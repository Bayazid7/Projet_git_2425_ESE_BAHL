
projet3A_le_bon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a844  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800aa24  0800aa24  0000ba24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab2c  0800ab2c  0000c06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab2c  0800ab2c  0000bb2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab34  0800ab34  0000c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab34  0800ab34  0000bb34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab38  0800ab38  0000bb38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800ab3c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ee4  2000006c  0800aba8  0000c06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f50  0800aba8  0000cf50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028745  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005424  00000000  00000000  000347e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002108  00000000  00000000  00039c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001992  00000000  00000000  0003bd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002556f  00000000  00000000  0003d6a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000287c9  00000000  00000000  00062c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eae23  00000000  00000000  0008b3da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001761fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009470  00000000  00000000  00176240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0017f6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800aa0c 	.word	0x0800aa0c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	0800aa0c 	.word	0x0800aa0c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b96a 	b.w	8000924 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	460c      	mov	r4, r1
 8000670:	2b00      	cmp	r3, #0
 8000672:	d14e      	bne.n	8000712 <__udivmoddi4+0xaa>
 8000674:	4694      	mov	ip, r2
 8000676:	458c      	cmp	ip, r1
 8000678:	4686      	mov	lr, r0
 800067a:	fab2 f282 	clz	r2, r2
 800067e:	d962      	bls.n	8000746 <__udivmoddi4+0xde>
 8000680:	b14a      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000682:	f1c2 0320 	rsb	r3, r2, #32
 8000686:	4091      	lsls	r1, r2
 8000688:	fa20 f303 	lsr.w	r3, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	4319      	orrs	r1, r3
 8000692:	fa00 fe02 	lsl.w	lr, r0, r2
 8000696:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800069a:	fa1f f68c 	uxth.w	r6, ip
 800069e:	fbb1 f4f7 	udiv	r4, r1, r7
 80006a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006a6:	fb07 1114 	mls	r1, r7, r4, r1
 80006aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ae:	fb04 f106 	mul.w	r1, r4, r6
 80006b2:	4299      	cmp	r1, r3
 80006b4:	d90a      	bls.n	80006cc <__udivmoddi4+0x64>
 80006b6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80006be:	f080 8112 	bcs.w	80008e6 <__udivmoddi4+0x27e>
 80006c2:	4299      	cmp	r1, r3
 80006c4:	f240 810f 	bls.w	80008e6 <__udivmoddi4+0x27e>
 80006c8:	3c02      	subs	r4, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a59      	subs	r1, r3, r1
 80006ce:	fa1f f38e 	uxth.w	r3, lr
 80006d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006d6:	fb07 1110 	mls	r1, r7, r0, r1
 80006da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006de:	fb00 f606 	mul.w	r6, r0, r6
 80006e2:	429e      	cmp	r6, r3
 80006e4:	d90a      	bls.n	80006fc <__udivmoddi4+0x94>
 80006e6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80006ee:	f080 80fc 	bcs.w	80008ea <__udivmoddi4+0x282>
 80006f2:	429e      	cmp	r6, r3
 80006f4:	f240 80f9 	bls.w	80008ea <__udivmoddi4+0x282>
 80006f8:	4463      	add	r3, ip
 80006fa:	3802      	subs	r0, #2
 80006fc:	1b9b      	subs	r3, r3, r6
 80006fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000702:	2100      	movs	r1, #0
 8000704:	b11d      	cbz	r5, 800070e <__udivmoddi4+0xa6>
 8000706:	40d3      	lsrs	r3, r2
 8000708:	2200      	movs	r2, #0
 800070a:	e9c5 3200 	strd	r3, r2, [r5]
 800070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000712:	428b      	cmp	r3, r1
 8000714:	d905      	bls.n	8000722 <__udivmoddi4+0xba>
 8000716:	b10d      	cbz	r5, 800071c <__udivmoddi4+0xb4>
 8000718:	e9c5 0100 	strd	r0, r1, [r5]
 800071c:	2100      	movs	r1, #0
 800071e:	4608      	mov	r0, r1
 8000720:	e7f5      	b.n	800070e <__udivmoddi4+0xa6>
 8000722:	fab3 f183 	clz	r1, r3
 8000726:	2900      	cmp	r1, #0
 8000728:	d146      	bne.n	80007b8 <__udivmoddi4+0x150>
 800072a:	42a3      	cmp	r3, r4
 800072c:	d302      	bcc.n	8000734 <__udivmoddi4+0xcc>
 800072e:	4290      	cmp	r0, r2
 8000730:	f0c0 80f0 	bcc.w	8000914 <__udivmoddi4+0x2ac>
 8000734:	1a86      	subs	r6, r0, r2
 8000736:	eb64 0303 	sbc.w	r3, r4, r3
 800073a:	2001      	movs	r0, #1
 800073c:	2d00      	cmp	r5, #0
 800073e:	d0e6      	beq.n	800070e <__udivmoddi4+0xa6>
 8000740:	e9c5 6300 	strd	r6, r3, [r5]
 8000744:	e7e3      	b.n	800070e <__udivmoddi4+0xa6>
 8000746:	2a00      	cmp	r2, #0
 8000748:	f040 8090 	bne.w	800086c <__udivmoddi4+0x204>
 800074c:	eba1 040c 	sub.w	r4, r1, ip
 8000750:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000754:	fa1f f78c 	uxth.w	r7, ip
 8000758:	2101      	movs	r1, #1
 800075a:	fbb4 f6f8 	udiv	r6, r4, r8
 800075e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000762:	fb08 4416 	mls	r4, r8, r6, r4
 8000766:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800076a:	fb07 f006 	mul.w	r0, r7, r6
 800076e:	4298      	cmp	r0, r3
 8000770:	d908      	bls.n	8000784 <__udivmoddi4+0x11c>
 8000772:	eb1c 0303 	adds.w	r3, ip, r3
 8000776:	f106 34ff 	add.w	r4, r6, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x11a>
 800077c:	4298      	cmp	r0, r3
 800077e:	f200 80cd 	bhi.w	800091c <__udivmoddi4+0x2b4>
 8000782:	4626      	mov	r6, r4
 8000784:	1a1c      	subs	r4, r3, r0
 8000786:	fa1f f38e 	uxth.w	r3, lr
 800078a:	fbb4 f0f8 	udiv	r0, r4, r8
 800078e:	fb08 4410 	mls	r4, r8, r0, r4
 8000792:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000796:	fb00 f707 	mul.w	r7, r0, r7
 800079a:	429f      	cmp	r7, r3
 800079c:	d908      	bls.n	80007b0 <__udivmoddi4+0x148>
 800079e:	eb1c 0303 	adds.w	r3, ip, r3
 80007a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80007a6:	d202      	bcs.n	80007ae <__udivmoddi4+0x146>
 80007a8:	429f      	cmp	r7, r3
 80007aa:	f200 80b0 	bhi.w	800090e <__udivmoddi4+0x2a6>
 80007ae:	4620      	mov	r0, r4
 80007b0:	1bdb      	subs	r3, r3, r7
 80007b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007b6:	e7a5      	b.n	8000704 <__udivmoddi4+0x9c>
 80007b8:	f1c1 0620 	rsb	r6, r1, #32
 80007bc:	408b      	lsls	r3, r1
 80007be:	fa22 f706 	lsr.w	r7, r2, r6
 80007c2:	431f      	orrs	r7, r3
 80007c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007c8:	fa04 f301 	lsl.w	r3, r4, r1
 80007cc:	ea43 030c 	orr.w	r3, r3, ip
 80007d0:	40f4      	lsrs	r4, r6
 80007d2:	fa00 f801 	lsl.w	r8, r0, r1
 80007d6:	0c38      	lsrs	r0, r7, #16
 80007d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007dc:	fbb4 fef0 	udiv	lr, r4, r0
 80007e0:	fa1f fc87 	uxth.w	ip, r7
 80007e4:	fb00 441e 	mls	r4, r0, lr, r4
 80007e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007ec:	fb0e f90c 	mul.w	r9, lr, ip
 80007f0:	45a1      	cmp	r9, r4
 80007f2:	fa02 f201 	lsl.w	r2, r2, r1
 80007f6:	d90a      	bls.n	800080e <__udivmoddi4+0x1a6>
 80007f8:	193c      	adds	r4, r7, r4
 80007fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007fe:	f080 8084 	bcs.w	800090a <__udivmoddi4+0x2a2>
 8000802:	45a1      	cmp	r9, r4
 8000804:	f240 8081 	bls.w	800090a <__udivmoddi4+0x2a2>
 8000808:	f1ae 0e02 	sub.w	lr, lr, #2
 800080c:	443c      	add	r4, r7
 800080e:	eba4 0409 	sub.w	r4, r4, r9
 8000812:	fa1f f983 	uxth.w	r9, r3
 8000816:	fbb4 f3f0 	udiv	r3, r4, r0
 800081a:	fb00 4413 	mls	r4, r0, r3, r4
 800081e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000822:	fb03 fc0c 	mul.w	ip, r3, ip
 8000826:	45a4      	cmp	ip, r4
 8000828:	d907      	bls.n	800083a <__udivmoddi4+0x1d2>
 800082a:	193c      	adds	r4, r7, r4
 800082c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000830:	d267      	bcs.n	8000902 <__udivmoddi4+0x29a>
 8000832:	45a4      	cmp	ip, r4
 8000834:	d965      	bls.n	8000902 <__udivmoddi4+0x29a>
 8000836:	3b02      	subs	r3, #2
 8000838:	443c      	add	r4, r7
 800083a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800083e:	fba0 9302 	umull	r9, r3, r0, r2
 8000842:	eba4 040c 	sub.w	r4, r4, ip
 8000846:	429c      	cmp	r4, r3
 8000848:	46ce      	mov	lr, r9
 800084a:	469c      	mov	ip, r3
 800084c:	d351      	bcc.n	80008f2 <__udivmoddi4+0x28a>
 800084e:	d04e      	beq.n	80008ee <__udivmoddi4+0x286>
 8000850:	b155      	cbz	r5, 8000868 <__udivmoddi4+0x200>
 8000852:	ebb8 030e 	subs.w	r3, r8, lr
 8000856:	eb64 040c 	sbc.w	r4, r4, ip
 800085a:	fa04 f606 	lsl.w	r6, r4, r6
 800085e:	40cb      	lsrs	r3, r1
 8000860:	431e      	orrs	r6, r3
 8000862:	40cc      	lsrs	r4, r1
 8000864:	e9c5 6400 	strd	r6, r4, [r5]
 8000868:	2100      	movs	r1, #0
 800086a:	e750      	b.n	800070e <__udivmoddi4+0xa6>
 800086c:	f1c2 0320 	rsb	r3, r2, #32
 8000870:	fa20 f103 	lsr.w	r1, r0, r3
 8000874:	fa0c fc02 	lsl.w	ip, ip, r2
 8000878:	fa24 f303 	lsr.w	r3, r4, r3
 800087c:	4094      	lsls	r4, r2
 800087e:	430c      	orrs	r4, r1
 8000880:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000884:	fa00 fe02 	lsl.w	lr, r0, r2
 8000888:	fa1f f78c 	uxth.w	r7, ip
 800088c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000890:	fb08 3110 	mls	r1, r8, r0, r3
 8000894:	0c23      	lsrs	r3, r4, #16
 8000896:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800089a:	fb00 f107 	mul.w	r1, r0, r7
 800089e:	4299      	cmp	r1, r3
 80008a0:	d908      	bls.n	80008b4 <__udivmoddi4+0x24c>
 80008a2:	eb1c 0303 	adds.w	r3, ip, r3
 80008a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80008aa:	d22c      	bcs.n	8000906 <__udivmoddi4+0x29e>
 80008ac:	4299      	cmp	r1, r3
 80008ae:	d92a      	bls.n	8000906 <__udivmoddi4+0x29e>
 80008b0:	3802      	subs	r0, #2
 80008b2:	4463      	add	r3, ip
 80008b4:	1a5b      	subs	r3, r3, r1
 80008b6:	b2a4      	uxth	r4, r4
 80008b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008bc:	fb08 3311 	mls	r3, r8, r1, r3
 80008c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008c4:	fb01 f307 	mul.w	r3, r1, r7
 80008c8:	42a3      	cmp	r3, r4
 80008ca:	d908      	bls.n	80008de <__udivmoddi4+0x276>
 80008cc:	eb1c 0404 	adds.w	r4, ip, r4
 80008d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80008d4:	d213      	bcs.n	80008fe <__udivmoddi4+0x296>
 80008d6:	42a3      	cmp	r3, r4
 80008d8:	d911      	bls.n	80008fe <__udivmoddi4+0x296>
 80008da:	3902      	subs	r1, #2
 80008dc:	4464      	add	r4, ip
 80008de:	1ae4      	subs	r4, r4, r3
 80008e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008e4:	e739      	b.n	800075a <__udivmoddi4+0xf2>
 80008e6:	4604      	mov	r4, r0
 80008e8:	e6f0      	b.n	80006cc <__udivmoddi4+0x64>
 80008ea:	4608      	mov	r0, r1
 80008ec:	e706      	b.n	80006fc <__udivmoddi4+0x94>
 80008ee:	45c8      	cmp	r8, r9
 80008f0:	d2ae      	bcs.n	8000850 <__udivmoddi4+0x1e8>
 80008f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80008f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80008fa:	3801      	subs	r0, #1
 80008fc:	e7a8      	b.n	8000850 <__udivmoddi4+0x1e8>
 80008fe:	4631      	mov	r1, r6
 8000900:	e7ed      	b.n	80008de <__udivmoddi4+0x276>
 8000902:	4603      	mov	r3, r0
 8000904:	e799      	b.n	800083a <__udivmoddi4+0x1d2>
 8000906:	4630      	mov	r0, r6
 8000908:	e7d4      	b.n	80008b4 <__udivmoddi4+0x24c>
 800090a:	46d6      	mov	lr, sl
 800090c:	e77f      	b.n	800080e <__udivmoddi4+0x1a6>
 800090e:	4463      	add	r3, ip
 8000910:	3802      	subs	r0, #2
 8000912:	e74d      	b.n	80007b0 <__udivmoddi4+0x148>
 8000914:	4606      	mov	r6, r0
 8000916:	4623      	mov	r3, r4
 8000918:	4608      	mov	r0, r1
 800091a:	e70f      	b.n	800073c <__udivmoddi4+0xd4>
 800091c:	3e02      	subs	r6, #2
 800091e:	4463      	add	r3, ip
 8000920:	e730      	b.n	8000784 <__udivmoddi4+0x11c>
 8000922:	bf00      	nop

08000924 <__aeabi_idiv0>:
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop

08000928 <StartMoteursens1>:
#include "Driver.h"

void StartMoteursens1(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);//l'activation de channel 1 Timer 1
 800092c:	2100      	movs	r1, #0
 800092e:	4806      	ldr	r0, [pc, #24]	@ (8000948 <StartMoteursens1+0x20>)
 8000930:	f003 fe88 	bl	8004644 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//l'activation de channel 2 Timer 1
 8000934:	2104      	movs	r1, #4
 8000936:	4804      	ldr	r0, [pc, #16]	@ (8000948 <StartMoteursens1+0x20>)
 8000938:	f003 fe84 	bl	8004644 <HAL_TIM_PWM_Start>
	printf("sens1\r\n");
 800093c:	4803      	ldr	r0, [pc, #12]	@ (800094c <StartMoteursens1+0x24>)
 800093e:	f009 f99d 	bl	8009c7c <puts>

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000020c 	.word	0x2000020c
 800094c:	0800aa24 	.word	0x0800aa24

08000950 <StartMoteursens2>:

void StartMoteursens2(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);//l'activation de channel 1 Timer 1
 8000954:	2100      	movs	r1, #0
 8000956:	4806      	ldr	r0, [pc, #24]	@ (8000970 <StartMoteursens2+0x20>)
 8000958:	f005 f918 	bl	8005b8c <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);//l'activation de channel 2 Timer 1
 800095c:	2104      	movs	r1, #4
 800095e:	4804      	ldr	r0, [pc, #16]	@ (8000970 <StartMoteursens2+0x20>)
 8000960:	f005 f914 	bl	8005b8c <HAL_TIMEx_PWMN_Start>
	printf("sens2\r\n");
 8000964:	4803      	ldr	r0, [pc, #12]	@ (8000974 <StartMoteursens2+0x24>)
 8000966:	f009 f989 	bl	8009c7c <puts>

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000020c 	.word	0x2000020c
 8000974:	0800aa2c 	.word	0x0800aa2c

08000978 <StopMoteur>:

void StopMoteur(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);//l'activation de channel 1 Timer 1
 800097c:	2100      	movs	r1, #0
 800097e:	480a      	ldr	r0, [pc, #40]	@ (80009a8 <StopMoteur+0x30>)
 8000980:	f005 f9b8 	bl	8005cf4 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);//l'activation de channel 2 Timer 1
 8000984:	2104      	movs	r1, #4
 8000986:	4808      	ldr	r0, [pc, #32]	@ (80009a8 <StopMoteur+0x30>)
 8000988:	f005 f9b4 	bl	8005cf4 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);//l'activation de channel 1 Timer 1
 800098c:	2100      	movs	r1, #0
 800098e:	4806      	ldr	r0, [pc, #24]	@ (80009a8 <StopMoteur+0x30>)
 8000990:	f003 ff58 	bl	8004844 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);//l'activation de channel 2 Timer 1
 8000994:	2104      	movs	r1, #4
 8000996:	4804      	ldr	r0, [pc, #16]	@ (80009a8 <StopMoteur+0x30>)
 8000998:	f003 ff54 	bl	8004844 <HAL_TIM_PWM_Stop>
	printf("okStop\r\n");
 800099c:	4803      	ldr	r0, [pc, #12]	@ (80009ac <StopMoteur+0x34>)
 800099e:	f009 f96d 	bl	8009c7c <puts>
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000020c 	.word	0x2000020c
 80009ac:	0800aa34 	.word	0x0800aa34

080009b0 <EncoderStart>:
#include "Encoder.h"
#include <stdio.h>

void EncoderStart(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); //l'activation de l'encodeur
 80009b4:	213c      	movs	r1, #60	@ 0x3c
 80009b6:	4802      	ldr	r0, [pc, #8]	@ (80009c0 <EncoderStart+0x10>)
 80009b8:	f004 f880 	bl	8004abc <HAL_TIM_Encoder_Start>
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000258 	.word	0x20000258

080009c4 <GetEncodeur>:

uint16_t GetEncodeur(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
	uint16_t valueEnc = __HAL_TIM_GET_COUNTER(&htim3); //valeur de l'encodeur
 80009ca:	4b05      	ldr	r3, [pc, #20]	@ (80009e0 <GetEncodeur+0x1c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009d0:	80fb      	strh	r3, [r7, #6]

	    return valueEnc;
 80009d2:	88fb      	ldrh	r3, [r7, #6]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	20000258 	.word	0x20000258

080009e4 <GetMotorSpeed>:

float GetMotorSpeed(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  uint16_t valueSpeed = GetEncodeur()*65535;
 80009ea:	f7ff ffeb 	bl	80009c4 <GetEncodeur>
 80009ee:	4603      	mov	r3, r0
 80009f0:	425b      	negs	r3, r3
 80009f2:	80fb      	strh	r3, [r7, #6]

  return valueSpeed;
 80009f4:	88fb      	ldrh	r3, [r7, #6]
 80009f6:	ee07 3a90 	vmov	s15, r3
 80009fa:	eef8 7a67 	vcvt.f32.u32	s15, s15

}
 80009fe:	eeb0 0a67 	vmov.f32	s0, s15
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08c      	sub	sp, #48	@ 0x30
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2220      	movs	r2, #32
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f009 fa0b 	bl	8009e3c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a26:	4b32      	ldr	r3, [pc, #200]	@ (8000af0 <MX_ADC1_Init+0xe8>)
 8000a28:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a2e:	4b30      	ldr	r3, [pc, #192]	@ (8000af0 <MX_ADC1_Init+0xe8>)
 8000a30:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a36:	4b2e      	ldr	r3, [pc, #184]	@ (8000af0 <MX_ADC1_Init+0xe8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a3c:	4b2c      	ldr	r3, [pc, #176]	@ (8000af0 <MX_ADC1_Init+0xe8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000a42:	4b2b      	ldr	r3, [pc, #172]	@ (8000af0 <MX_ADC1_Init+0xe8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a48:	4b29      	ldr	r3, [pc, #164]	@ (8000af0 <MX_ADC1_Init+0xe8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a4e:	4b28      	ldr	r3, [pc, #160]	@ (8000af0 <MX_ADC1_Init+0xe8>)
 8000a50:	2204      	movs	r2, #4
 8000a52:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a54:	4b26      	ldr	r3, [pc, #152]	@ (8000af0 <MX_ADC1_Init+0xe8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a5a:	4b25      	ldr	r3, [pc, #148]	@ (8000af0 <MX_ADC1_Init+0xe8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000a60:	4b23      	ldr	r3, [pc, #140]	@ (8000af0 <MX_ADC1_Init+0xe8>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a66:	4b22      	ldr	r3, [pc, #136]	@ (8000af0 <MX_ADC1_Init+0xe8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a6e:	4b20      	ldr	r3, [pc, #128]	@ (8000af0 <MX_ADC1_Init+0xe8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a74:	4b1e      	ldr	r3, [pc, #120]	@ (8000af0 <MX_ADC1_Init+0xe8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000af0 <MX_ADC1_Init+0xe8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a82:	4b1b      	ldr	r3, [pc, #108]	@ (8000af0 <MX_ADC1_Init+0xe8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000a88:	4b19      	ldr	r3, [pc, #100]	@ (8000af0 <MX_ADC1_Init+0xe8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a90:	4817      	ldr	r0, [pc, #92]	@ (8000af0 <MX_ADC1_Init+0xe8>)
 8000a92:	f001 fac9 	bl	8002028 <HAL_ADC_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000a9c:	f000 fb42 	bl	8001124 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000aa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4811      	ldr	r0, [pc, #68]	@ (8000af0 <MX_ADC1_Init+0xe8>)
 8000aac:	f002 f856 	bl	8002b5c <HAL_ADCEx_MultiModeConfigChannel>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000ab6:	f000 fb35 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <MX_ADC1_Init+0xec>)
 8000abc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000abe:	2306      	movs	r3, #6
 8000ac0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ac6:	237f      	movs	r3, #127	@ 0x7f
 8000ac8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aca:	2304      	movs	r3, #4
 8000acc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4806      	ldr	r0, [pc, #24]	@ (8000af0 <MX_ADC1_Init+0xe8>)
 8000ad8:	f001 fc2a 	bl	8002330 <HAL_ADC_ConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000ae2:	f000 fb1f 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	3730      	adds	r7, #48	@ 0x30
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000088 	.word	0x20000088
 8000af4:	3ef08000 	.word	0x3ef08000

08000af8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000afe:	463b      	mov	r3, r7
 8000b00:	2220      	movs	r2, #32
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f009 f999 	bl	8009e3c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b0c:	4a2b      	ldr	r2, [pc, #172]	@ (8000bbc <MX_ADC2_Init+0xc4>)
 8000b0e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b10:	4b29      	ldr	r3, [pc, #164]	@ (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b12:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b16:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b18:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b1e:	4b26      	ldr	r3, [pc, #152]	@ (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000b24:	4b24      	ldr	r3, [pc, #144]	@ (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b2a:	4b23      	ldr	r3, [pc, #140]	@ (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b30:	4b21      	ldr	r3, [pc, #132]	@ (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b32:	2204      	movs	r2, #4
 8000b34:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b36:	4b20      	ldr	r3, [pc, #128]	@ (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000b42:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b50:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b56:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000b5c:	4b16      	ldr	r3, [pc, #88]	@ (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b64:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b72:	4811      	ldr	r0, [pc, #68]	@ (8000bb8 <MX_ADC2_Init+0xc0>)
 8000b74:	f001 fa58 	bl	8002028 <HAL_ADC_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000b7e:	f000 fad1 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b82:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <MX_ADC2_Init+0xc8>)
 8000b84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b86:	2306      	movs	r3, #6
 8000b88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b8e:	237f      	movs	r3, #127	@ 0x7f
 8000b90:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b92:	2304      	movs	r3, #4
 8000b94:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4806      	ldr	r0, [pc, #24]	@ (8000bb8 <MX_ADC2_Init+0xc0>)
 8000ba0:	f001 fbc6 	bl	8002330 <HAL_ADC_ConfigChannel>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000baa:	f000 fabb 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	3720      	adds	r7, #32
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000f4 	.word	0x200000f4
 8000bbc:	50000100 	.word	0x50000100
 8000bc0:	0c900008 	.word	0x0c900008

08000bc4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b09e      	sub	sp, #120	@ 0x78
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bdc:	f107 0320 	add.w	r3, r7, #32
 8000be0:	2244      	movs	r2, #68	@ 0x44
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f009 f929 	bl	8009e3c <memset>
  if(adcHandle->Instance==ADC1)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bf2:	d13d      	bne.n	8000c70 <HAL_ADC_MspInit+0xac>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000bf4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bf8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000bfa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000bfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c00:	f107 0320 	add.w	r3, r7, #32
 8000c04:	4618      	mov	r0, r3
 8000c06:	f003 fa09 	bl	800401c <HAL_RCCEx_PeriphCLKConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c10:	f000 fa88 	bl	8001124 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c14:	4b46      	ldr	r3, [pc, #280]	@ (8000d30 <HAL_ADC_MspInit+0x16c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	4a45      	ldr	r2, [pc, #276]	@ (8000d30 <HAL_ADC_MspInit+0x16c>)
 8000c1c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c1e:	4b44      	ldr	r3, [pc, #272]	@ (8000d30 <HAL_ADC_MspInit+0x16c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d10b      	bne.n	8000c3e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c26:	4b43      	ldr	r3, [pc, #268]	@ (8000d34 <HAL_ADC_MspInit+0x170>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2a:	4a42      	ldr	r2, [pc, #264]	@ (8000d34 <HAL_ADC_MspInit+0x170>)
 8000c2c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c32:	4b40      	ldr	r3, [pc, #256]	@ (8000d34 <HAL_ADC_MspInit+0x170>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c3a:	61fb      	str	r3, [r7, #28]
 8000c3c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d34 <HAL_ADC_MspInit+0x170>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c42:	4a3c      	ldr	r2, [pc, #240]	@ (8000d34 <HAL_ADC_MspInit+0x170>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4a:	4b3a      	ldr	r3, [pc, #232]	@ (8000d34 <HAL_ADC_MspInit+0x170>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	61bb      	str	r3, [r7, #24]
 8000c54:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = CB_OUT4_Pin;
 8000c56:	2301      	movs	r3, #1
 8000c58:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(CB_OUT4_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c66:	4619      	mov	r1, r3
 8000c68:	4833      	ldr	r0, [pc, #204]	@ (8000d38 <HAL_ADC_MspInit+0x174>)
 8000c6a:	f002 f8fb 	bl	8002e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000c6e:	e05a      	b.n	8000d26 <HAL_ADC_MspInit+0x162>
  else if(adcHandle->Instance==ADC2)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a31      	ldr	r2, [pc, #196]	@ (8000d3c <HAL_ADC_MspInit+0x178>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d155      	bne.n	8000d26 <HAL_ADC_MspInit+0x162>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c7e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c80:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000c84:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c86:	f107 0320 	add.w	r3, r7, #32
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f003 f9c6 	bl	800401c <HAL_RCCEx_PeriphCLKConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_ADC_MspInit+0xd6>
      Error_Handler();
 8000c96:	f000 fa45 	bl	8001124 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c9a:	4b25      	ldr	r3, [pc, #148]	@ (8000d30 <HAL_ADC_MspInit+0x16c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	4a23      	ldr	r2, [pc, #140]	@ (8000d30 <HAL_ADC_MspInit+0x16c>)
 8000ca2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ca4:	4b22      	ldr	r3, [pc, #136]	@ (8000d30 <HAL_ADC_MspInit+0x16c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d10b      	bne.n	8000cc4 <HAL_ADC_MspInit+0x100>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000cac:	4b21      	ldr	r3, [pc, #132]	@ (8000d34 <HAL_ADC_MspInit+0x170>)
 8000cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb0:	4a20      	ldr	r2, [pc, #128]	@ (8000d34 <HAL_ADC_MspInit+0x170>)
 8000cb2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d34 <HAL_ADC_MspInit+0x170>)
 8000cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <HAL_ADC_MspInit+0x170>)
 8000cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc8:	4a1a      	ldr	r2, [pc, #104]	@ (8000d34 <HAL_ADC_MspInit+0x170>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd0:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <HAL_ADC_MspInit+0x170>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cdc:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <HAL_ADC_MspInit+0x170>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce0:	4a14      	ldr	r2, [pc, #80]	@ (8000d34 <HAL_ADC_MspInit+0x170>)
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce8:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <HAL_ADC_MspInit+0x170>)
 8000cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CB_OUT1_Pin|CB_OUT2_Pin;
 8000cf4:	23c0      	movs	r3, #192	@ 0xc0
 8000cf6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d04:	4619      	mov	r1, r3
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d0a:	f002 f8ab 	bl	8002e64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CB_OUT3_Pin;
 8000d0e:	2310      	movs	r3, #16
 8000d10:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d12:	2303      	movs	r3, #3
 8000d14:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(CB_OUT3_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4807      	ldr	r0, [pc, #28]	@ (8000d40 <HAL_ADC_MspInit+0x17c>)
 8000d22:	f002 f89f 	bl	8002e64 <HAL_GPIO_Init>
}
 8000d26:	bf00      	nop
 8000d28:	3778      	adds	r7, #120	@ 0x78
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000160 	.word	0x20000160
 8000d34:	40021000 	.word	0x40021000
 8000d38:	48000400 	.word	0x48000400
 8000d3c:	50000100 	.word	0x50000100
 8000d40:	48000800 	.word	0x48000800

08000d44 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d48:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <MX_FREERTOS_Init+0x18>)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4804      	ldr	r0, [pc, #16]	@ (8000d60 <MX_FREERTOS_Init+0x1c>)
 8000d4e:	f006 f903 	bl	8006f58 <osThreadNew>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4a03      	ldr	r2, [pc, #12]	@ (8000d64 <MX_FREERTOS_Init+0x20>)
 8000d56:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	0800aa94 	.word	0x0800aa94
 8000d60:	08000d69 	.word	0x08000d69
 8000d64:	20000164 	.word	0x20000164

08000d68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f006 f983 	bl	800707c <osDelay>
 8000d76:	e7fb      	b.n	8000d70 <StartDefaultTask+0x8>

08000d78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	@ 0x28
 8000d7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	4b35      	ldr	r3, [pc, #212]	@ (8000e64 <MX_GPIO_Init+0xec>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d92:	4a34      	ldr	r2, [pc, #208]	@ (8000e64 <MX_GPIO_Init+0xec>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d9a:	4b32      	ldr	r3, [pc, #200]	@ (8000e64 <MX_GPIO_Init+0xec>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000da6:	4b2f      	ldr	r3, [pc, #188]	@ (8000e64 <MX_GPIO_Init+0xec>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000daa:	4a2e      	ldr	r2, [pc, #184]	@ (8000e64 <MX_GPIO_Init+0xec>)
 8000dac:	f043 0320 	orr.w	r3, r3, #32
 8000db0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db2:	4b2c      	ldr	r3, [pc, #176]	@ (8000e64 <MX_GPIO_Init+0xec>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db6:	f003 0320 	and.w	r3, r3, #32
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b29      	ldr	r3, [pc, #164]	@ (8000e64 <MX_GPIO_Init+0xec>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc2:	4a28      	ldr	r2, [pc, #160]	@ (8000e64 <MX_GPIO_Init+0xec>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dca:	4b26      	ldr	r3, [pc, #152]	@ (8000e64 <MX_GPIO_Init+0xec>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b23      	ldr	r3, [pc, #140]	@ (8000e64 <MX_GPIO_Init+0xec>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dda:	4a22      	ldr	r2, [pc, #136]	@ (8000e64 <MX_GPIO_Init+0xec>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de2:	4b20      	ldr	r3, [pc, #128]	@ (8000e64 <MX_GPIO_Init+0xec>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000df4:	481c      	ldr	r0, [pc, #112]	@ (8000e68 <MX_GPIO_Init+0xf0>)
 8000df6:	f002 f9b7 	bl	8003168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEV_EN_Pin|M_EN_Pin|CB_IN_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2123      	movs	r1, #35	@ 0x23
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e02:	f002 f9b1 	bl	8003168 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC14 PC15 */
  GPIO_InitStruct.Pin = LED1_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8000e06:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4812      	ldr	r0, [pc, #72]	@ (8000e68 <MX_GPIO_Init+0xf0>)
 8000e20:	f002 f820 	bl	8002e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DEV_EN_Pin|M_EN_Pin|CB_IN_Pin;
 8000e24:	2323      	movs	r3, #35	@ 0x23
 8000e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3e:	f002 f811 	bl	8002e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CHAT_SOURIS_Pin|INT_ACCELERO_Pin;
 8000e42:	2342      	movs	r3, #66	@ 0x42
 8000e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	@ (8000e6c <MX_GPIO_Init+0xf4>)
 8000e56:	f002 f805 	bl	8002e64 <HAL_GPIO_Init>

}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	@ 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40021000 	.word	0x40021000
 8000e68:	48000800 	.word	0x48000800
 8000e6c:	48000400 	.word	0x48000400

08000e70 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee4 <MX_I2C1_Init+0x74>)
 8000e76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee8 <MX_I2C1_Init+0x78>)
 8000e78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <MX_I2C1_Init+0x74>)
 8000e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000eec <MX_I2C1_Init+0x7c>)
 8000e7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e80:	4b18      	ldr	r3, [pc, #96]	@ (8000ee4 <MX_I2C1_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e86:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <MX_I2C1_Init+0x74>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <MX_I2C1_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e92:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <MX_I2C1_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e98:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <MX_I2C1_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <MX_I2C1_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <MX_I2C1_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eaa:	480e      	ldr	r0, [pc, #56]	@ (8000ee4 <MX_I2C1_Init+0x74>)
 8000eac:	f002 f974 	bl	8003198 <HAL_I2C_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000eb6:	f000 f935 	bl	8001124 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4809      	ldr	r0, [pc, #36]	@ (8000ee4 <MX_I2C1_Init+0x74>)
 8000ebe:	f002 fa06 	bl	80032ce <HAL_I2CEx_ConfigAnalogFilter>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ec8:	f000 f92c 	bl	8001124 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4805      	ldr	r0, [pc, #20]	@ (8000ee4 <MX_I2C1_Init+0x74>)
 8000ed0:	f002 fa48 	bl	8003364 <HAL_I2CEx_ConfigDigitalFilter>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000eda:	f000 f923 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000168 	.word	0x20000168
 8000ee8:	40005400 	.word	0x40005400
 8000eec:	40b285c2 	.word	0x40b285c2

08000ef0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b09a      	sub	sp, #104	@ 0x68
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	2244      	movs	r2, #68	@ 0x44
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f008 ff93 	bl	8009e3c <memset>
  if(i2cHandle->Instance==I2C1)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8000f98 <HAL_I2C_MspInit+0xa8>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d136      	bne.n	8000f8e <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f20:	2340      	movs	r3, #64	@ 0x40
 8000f22:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f003 f875 	bl	800401c <HAL_RCCEx_PeriphCLKConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f38:	f000 f8f4 	bl	8001124 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3c:	4b17      	ldr	r3, [pc, #92]	@ (8000f9c <HAL_I2C_MspInit+0xac>)
 8000f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f40:	4a16      	ldr	r2, [pc, #88]	@ (8000f9c <HAL_I2C_MspInit+0xac>)
 8000f42:	f043 0302 	orr.w	r3, r3, #2
 8000f46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f48:	4b14      	ldr	r3, [pc, #80]	@ (8000f9c <HAL_I2C_MspInit+0xac>)
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000f54:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000f58:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f5a:	2312      	movs	r3, #18
 8000f5c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f66:	2304      	movs	r3, #4
 8000f68:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480b      	ldr	r0, [pc, #44]	@ (8000fa0 <HAL_I2C_MspInit+0xb0>)
 8000f72:	f001 ff77 	bl	8002e64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f76:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <HAL_I2C_MspInit+0xac>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7a:	4a08      	ldr	r2, [pc, #32]	@ (8000f9c <HAL_I2C_MspInit+0xac>)
 8000f7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f80:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f82:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <HAL_I2C_MspInit+0xac>)
 8000f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3768      	adds	r7, #104	@ 0x68
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40005400 	.word	0x40005400
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	48000400 	.word	0x48000400

08000fa4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000fac:	1d39      	adds	r1, r7, #4
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4803      	ldr	r0, [pc, #12]	@ (8000fc4 <__io_putchar+0x20>)
 8000fb6:	f005 f8c4 	bl	8006142 <HAL_UART_Transmit>

	return ch;
 8000fba:	687b      	ldr	r3, [r7, #4]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	200002f0 	.word	0x200002f0

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fce:	f000 fdfc 	bl	8001bca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd2:	f000 f84b 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd6:	f7ff fecf 	bl	8000d78 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fda:	f7ff fd15 	bl	8000a08 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000fde:	f7ff fd8b 	bl	8000af8 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000fe2:	f7ff ff45 	bl	8000e70 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000fe6:	f000 fc97 	bl	8001918 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000fea:	f000 fce1 	bl	80019b0 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000fee:	f000 fa11 	bl	8001414 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ff2:	f000 fadb 	bl	80015ac <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ff6:	f000 fb2f 	bl	8001658 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  StartMoteursens1();
 8000ffa:	f7ff fc95 	bl	8000928 <StartMoteursens1>
  HAL_Delay(100);
 8000ffe:	2064      	movs	r0, #100	@ 0x64
 8001000:	f000 fe1a 	bl	8001c38 <HAL_Delay>
  //printf("l'activation PWM\n\r");
  StartMoteursens2();
 8001004:	f7ff fca4 	bl	8000950 <StartMoteursens2>
  HAL_Delay(100);
 8001008:	2064      	movs	r0, #100	@ 0x64
 800100a:	f000 fe15 	bl	8001c38 <HAL_Delay>
  //printf("l'activation PWM\n\r");
  StopMoteur();
 800100e:	f7ff fcb3 	bl	8000978 <StopMoteur>
  HAL_Delay(100);
 8001012:	2064      	movs	r0, #100	@ 0x64
 8001014:	f000 fe10 	bl	8001c38 <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001018:	f005 ff54 	bl	8006ec4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800101c:	f7ff fe92 	bl	8000d44 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001020:	f005 ff74 	bl	8006f0c <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("l'activation de l'encodeur");
 8001024:	480f      	ldr	r0, [pc, #60]	@ (8001064 <main+0x9c>)
 8001026:	f008 fdc1 	bl	8009bac <iprintf>
	  EncoderStart();
 800102a:	f7ff fcc1 	bl	80009b0 <EncoderStart>
	  uint16_t valueEnc = GetEncodeur();
 800102e:	f7ff fcc9 	bl	80009c4 <GetEncodeur>
 8001032:	4603      	mov	r3, r0
 8001034:	80fb      	strh	r3, [r7, #6]
	  printf("Encoder Value: %ld\r\n", valueEnc);//affichage des valeurs
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	4619      	mov	r1, r3
 800103a:	480b      	ldr	r0, [pc, #44]	@ (8001068 <main+0xa0>)
 800103c:	f008 fdb6 	bl	8009bac <iprintf>
      float vitesse = GetMotorSpeed();
 8001040:	f7ff fcd0 	bl	80009e4 <GetMotorSpeed>
 8001044:	ee07 0a90 	vmov	s15, r0
 8001048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800104c:	edc7 7a00 	vstr	s15, [r7]
      printf("Encoder Value: %ld\r\n", vitesse);
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	f7ff fa99 	bl	8000588 <__aeabi_f2d>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4803      	ldr	r0, [pc, #12]	@ (8001068 <main+0xa0>)
 800105c:	f008 fda6 	bl	8009bac <iprintf>
  {
 8001060:	bf00      	nop
 8001062:	e7df      	b.n	8001024 <main+0x5c>
 8001064:	0800aa48 	.word	0x0800aa48
 8001068:	0800aa64 	.word	0x0800aa64

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b094      	sub	sp, #80	@ 0x50
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0318 	add.w	r3, r7, #24
 8001076:	2238      	movs	r2, #56	@ 0x38
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f008 fede 	bl	8009e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800108e:	2000      	movs	r0, #0
 8001090:	f002 f9b4 	bl	80033fc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001094:	2301      	movs	r3, #1
 8001096:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001098:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800109c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109e:	2302      	movs	r3, #2
 80010a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a2:	2303      	movs	r3, #3
 80010a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80010a6:	2304      	movs	r3, #4
 80010a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80010aa:	2355      	movs	r3, #85	@ 0x55
 80010ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ae:	2302      	movs	r3, #2
 80010b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010b2:	2302      	movs	r3, #2
 80010b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010b6:	2302      	movs	r3, #2
 80010b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ba:	f107 0318 	add.w	r3, r7, #24
 80010be:	4618      	mov	r0, r3
 80010c0:	f002 fa50 	bl	8003564 <HAL_RCC_OscConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0x62>
  {
    Error_Handler();
 80010ca:	f000 f82b 	bl	8001124 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ce:	230f      	movs	r3, #15
 80010d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d2:	2303      	movs	r3, #3
 80010d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2104      	movs	r1, #4
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 fd4e 	bl	8003b88 <HAL_RCC_ClockConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80010f2:	f000 f817 	bl	8001124 <Error_Handler>
  }
}
 80010f6:	bf00      	nop
 80010f8:	3750      	adds	r7, #80	@ 0x50
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001112:	f000 fd73 	bl	8001bfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40001000 	.word	0x40001000

08001124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
}
 800112a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <Error_Handler+0x8>

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_MspInit+0x50>)
 8001138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800113a:	4a11      	ldr	r2, [pc, #68]	@ (8001180 <HAL_MspInit+0x50>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6613      	str	r3, [r2, #96]	@ 0x60
 8001142:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <HAL_MspInit+0x50>)
 8001144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <HAL_MspInit+0x50>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001152:	4a0b      	ldr	r2, [pc, #44]	@ (8001180 <HAL_MspInit+0x50>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001158:	6593      	str	r3, [r2, #88]	@ 0x58
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <HAL_MspInit+0x50>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	210f      	movs	r1, #15
 800116a:	f06f 0001 	mvn.w	r0, #1
 800116e:	f001 fe51 	bl	8002e14 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001172:	f002 f9e7 	bl	8003544 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000

08001184 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08c      	sub	sp, #48	@ 0x30
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001194:	4b2c      	ldr	r3, [pc, #176]	@ (8001248 <HAL_InitTick+0xc4>)
 8001196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001198:	4a2b      	ldr	r2, [pc, #172]	@ (8001248 <HAL_InitTick+0xc4>)
 800119a:	f043 0310 	orr.w	r3, r3, #16
 800119e:	6593      	str	r3, [r2, #88]	@ 0x58
 80011a0:	4b29      	ldr	r3, [pc, #164]	@ (8001248 <HAL_InitTick+0xc4>)
 80011a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a4:	f003 0310 	and.w	r3, r3, #16
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011ac:	f107 020c 	add.w	r2, r7, #12
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	4611      	mov	r1, r2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f002 feba 	bl	8003f30 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011bc:	f002 fe8c 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 80011c0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011c4:	4a21      	ldr	r2, [pc, #132]	@ (800124c <HAL_InitTick+0xc8>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	0c9b      	lsrs	r3, r3, #18
 80011cc:	3b01      	subs	r3, #1
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <HAL_InitTick+0xcc>)
 80011d2:	4a20      	ldr	r2, [pc, #128]	@ (8001254 <HAL_InitTick+0xd0>)
 80011d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <HAL_InitTick+0xcc>)
 80011d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011dc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011de:	4a1c      	ldr	r2, [pc, #112]	@ (8001250 <HAL_InitTick+0xcc>)
 80011e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <HAL_InitTick+0xcc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ea:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <HAL_InitTick+0xcc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80011f0:	4817      	ldr	r0, [pc, #92]	@ (8001250 <HAL_InitTick+0xcc>)
 80011f2:	f003 f903 	bl	80043fc <HAL_TIM_Base_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80011fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001200:	2b00      	cmp	r3, #0
 8001202:	d11b      	bne.n	800123c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001204:	4812      	ldr	r0, [pc, #72]	@ (8001250 <HAL_InitTick+0xcc>)
 8001206:	f003 f951 	bl	80044ac <HAL_TIM_Base_Start_IT>
 800120a:	4603      	mov	r3, r0
 800120c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001210:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001214:	2b00      	cmp	r3, #0
 8001216:	d111      	bne.n	800123c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001218:	2036      	movs	r0, #54	@ 0x36
 800121a:	f001 fe15 	bl	8002e48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d808      	bhi.n	8001236 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	2036      	movs	r0, #54	@ 0x36
 800122a:	f001 fdf3 	bl	8002e14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800122e:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <HAL_InitTick+0xd4>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	e002      	b.n	800123c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800123c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001240:	4618      	mov	r0, r3
 8001242:	3730      	adds	r7, #48	@ 0x30
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40021000 	.word	0x40021000
 800124c:	431bde83 	.word	0x431bde83
 8001250:	200001bc 	.word	0x200001bc
 8001254:	40001000 	.word	0x40001000
 8001258:	20000004 	.word	0x20000004

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <NMI_Handler+0x4>

08001264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <MemManage_Handler+0x4>

08001274 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <UsageFault_Handler+0x4>

08001284 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001298:	4802      	ldr	r0, [pc, #8]	@ (80012a4 <TIM6_DAC_IRQHandler+0x10>)
 800129a:	f003 fc9d 	bl	8004bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200001bc 	.word	0x200001bc

080012a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	e00a      	b.n	80012d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ba:	f3af 8000 	nop.w
 80012be:	4601      	mov	r1, r0
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	60ba      	str	r2, [r7, #8]
 80012c6:	b2ca      	uxtb	r2, r1
 80012c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	3301      	adds	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dbf0      	blt.n	80012ba <_read+0x12>
  }

  return len;
 80012d8:	687b      	ldr	r3, [r7, #4]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	e009      	b.n	8001308 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	60ba      	str	r2, [r7, #8]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fe51 	bl	8000fa4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	429a      	cmp	r2, r3
 800130e:	dbf1      	blt.n	80012f4 <_write+0x12>
  }
  return len;
 8001310:	687b      	ldr	r3, [r7, #4]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <_close>:

int _close(int file)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001342:	605a      	str	r2, [r3, #4]
  return 0;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <_isatty>:

int _isatty(int file)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800138c:	4a14      	ldr	r2, [pc, #80]	@ (80013e0 <_sbrk+0x5c>)
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <_sbrk+0x60>)
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001398:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a0:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <_sbrk+0x64>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	@ (80013ec <_sbrk+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d207      	bcs.n	80013c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b4:	f008 fde6 	bl	8009f84 <__errno>
 80013b8:	4603      	mov	r3, r0
 80013ba:	220c      	movs	r2, #12
 80013bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e009      	b.n	80013d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c4:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ca:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a05      	ldr	r2, [pc, #20]	@ (80013e8 <_sbrk+0x64>)
 80013d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20008000 	.word	0x20008000
 80013e4:	00000400 	.word	0x00000400
 80013e8:	20000208 	.word	0x20000208
 80013ec:	20001f50 	.word	0x20001f50

080013f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <SystemInit+0x20>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013fa:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <SystemInit+0x20>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b09c      	sub	sp, #112	@ 0x70
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001428:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001434:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
 8001444:	615a      	str	r2, [r3, #20]
 8001446:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2234      	movs	r2, #52	@ 0x34
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f008 fcf4 	bl	8009e3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001454:	4b53      	ldr	r3, [pc, #332]	@ (80015a4 <MX_TIM1_Init+0x190>)
 8001456:	4a54      	ldr	r2, [pc, #336]	@ (80015a8 <MX_TIM1_Init+0x194>)
 8001458:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 800145a:	4b52      	ldr	r3, [pc, #328]	@ (80015a4 <MX_TIM1_Init+0x190>)
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001460:	4b50      	ldr	r3, [pc, #320]	@ (80015a4 <MX_TIM1_Init+0x190>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 16999;
 8001466:	4b4f      	ldr	r3, [pc, #316]	@ (80015a4 <MX_TIM1_Init+0x190>)
 8001468:	f244 2267 	movw	r2, #16999	@ 0x4267
 800146c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146e:	4b4d      	ldr	r3, [pc, #308]	@ (80015a4 <MX_TIM1_Init+0x190>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001474:	4b4b      	ldr	r3, [pc, #300]	@ (80015a4 <MX_TIM1_Init+0x190>)
 8001476:	2200      	movs	r2, #0
 8001478:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147a:	4b4a      	ldr	r3, [pc, #296]	@ (80015a4 <MX_TIM1_Init+0x190>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001480:	4848      	ldr	r0, [pc, #288]	@ (80015a4 <MX_TIM1_Init+0x190>)
 8001482:	f002 ffbb 	bl	80043fc <HAL_TIM_Base_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800148c:	f7ff fe4a 	bl	8001124 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001494:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001496:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800149a:	4619      	mov	r1, r3
 800149c:	4841      	ldr	r0, [pc, #260]	@ (80015a4 <MX_TIM1_Init+0x190>)
 800149e:	f003 fdff 	bl	80050a0 <HAL_TIM_ConfigClockSource>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80014a8:	f7ff fe3c 	bl	8001124 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014ac:	483d      	ldr	r0, [pc, #244]	@ (80015a4 <MX_TIM1_Init+0x190>)
 80014ae:	f003 f867 	bl	8004580 <HAL_TIM_PWM_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80014b8:	f7ff fe34 	bl	8001124 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014bc:	2300      	movs	r3, #0
 80014be:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014c0:	2300      	movs	r3, #0
 80014c2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014cc:	4619      	mov	r1, r3
 80014ce:	4835      	ldr	r0, [pc, #212]	@ (80015a4 <MX_TIM1_Init+0x190>)
 80014d0:	f004 fc6e 	bl	8005db0 <HAL_TIMEx_MasterConfigSynchronization>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80014da:	f7ff fe23 	bl	8001124 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014de:	2360      	movs	r3, #96	@ 0x60
 80014e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 8499;
 80014e2:	f242 1333 	movw	r3, #8499	@ 0x2133
 80014e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e8:	2300      	movs	r3, #0
 80014ea:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014ec:	2300      	movs	r3, #0
 80014ee:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014f4:	2300      	movs	r3, #0
 80014f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001500:	2200      	movs	r2, #0
 8001502:	4619      	mov	r1, r3
 8001504:	4827      	ldr	r0, [pc, #156]	@ (80015a4 <MX_TIM1_Init+0x190>)
 8001506:	f003 fcb7 	bl	8004e78 <HAL_TIM_PWM_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001510:	f7ff fe08 	bl	8001124 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001518:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800151c:	2204      	movs	r2, #4
 800151e:	4619      	mov	r1, r3
 8001520:	4820      	ldr	r0, [pc, #128]	@ (80015a4 <MX_TIM1_Init+0x190>)
 8001522:	f003 fca9 	bl	8004e78 <HAL_TIM_PWM_ConfigChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 800152c:	f7ff fdfa 	bl	8001124 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001530:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001534:	2208      	movs	r2, #8
 8001536:	4619      	mov	r1, r3
 8001538:	481a      	ldr	r0, [pc, #104]	@ (80015a4 <MX_TIM1_Init+0x190>)
 800153a:	f003 fc9d 	bl	8004e78 <HAL_TIM_PWM_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8001544:	f7ff fdee 	bl	8001124 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800155c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001560:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800156e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001572:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001578:	2300      	movs	r3, #0
 800157a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	4619      	mov	r1, r3
 8001584:	4807      	ldr	r0, [pc, #28]	@ (80015a4 <MX_TIM1_Init+0x190>)
 8001586:	f004 fc95 	bl	8005eb4 <HAL_TIMEx_ConfigBreakDeadTime>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM1_Init+0x180>
  {
    Error_Handler();
 8001590:	f7ff fdc8 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001594:	4803      	ldr	r0, [pc, #12]	@ (80015a4 <MX_TIM1_Init+0x190>)
 8001596:	f000 f969 	bl	800186c <HAL_TIM_MspPostInit>

}
 800159a:	bf00      	nop
 800159c:	3770      	adds	r7, #112	@ 0x70
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000020c 	.word	0x2000020c
 80015a8:	40012c00 	.word	0x40012c00

080015ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08c      	sub	sp, #48	@ 0x30
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	2224      	movs	r2, #36	@ 0x24
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f008 fc3e 	bl	8009e3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c0:	463b      	mov	r3, r7
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015ca:	4b21      	ldr	r3, [pc, #132]	@ (8001650 <MX_TIM3_Init+0xa4>)
 80015cc:	4a21      	ldr	r2, [pc, #132]	@ (8001654 <MX_TIM3_Init+0xa8>)
 80015ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <MX_TIM3_Init+0xa4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001650 <MX_TIM3_Init+0xa4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001650 <MX_TIM3_Init+0xa4>)
 80015de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001650 <MX_TIM3_Init+0xa4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ea:	4b19      	ldr	r3, [pc, #100]	@ (8001650 <MX_TIM3_Init+0xa4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015f0:	2301      	movs	r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015f4:	2300      	movs	r3, #0
 80015f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015f8:	2301      	movs	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001608:	2301      	movs	r3, #1
 800160a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800160c:	2300      	movs	r3, #0
 800160e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	4619      	mov	r1, r3
 800161a:	480d      	ldr	r0, [pc, #52]	@ (8001650 <MX_TIM3_Init+0xa4>)
 800161c:	f003 f9a8 	bl	8004970 <HAL_TIM_Encoder_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001626:	f7ff fd7d 	bl	8001124 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001632:	463b      	mov	r3, r7
 8001634:	4619      	mov	r1, r3
 8001636:	4806      	ldr	r0, [pc, #24]	@ (8001650 <MX_TIM3_Init+0xa4>)
 8001638:	f004 fbba 	bl	8005db0 <HAL_TIMEx_MasterConfigSynchronization>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001642:	f7ff fd6f 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	3730      	adds	r7, #48	@ 0x30
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000258 	.word	0x20000258
 8001654:	40000400 	.word	0x40000400

08001658 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08c      	sub	sp, #48	@ 0x30
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	2224      	movs	r2, #36	@ 0x24
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f008 fbe8 	bl	8009e3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166c:	463b      	mov	r3, r7
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001676:	4b21      	ldr	r3, [pc, #132]	@ (80016fc <MX_TIM4_Init+0xa4>)
 8001678:	4a21      	ldr	r2, [pc, #132]	@ (8001700 <MX_TIM4_Init+0xa8>)
 800167a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800167c:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <MX_TIM4_Init+0xa4>)
 800167e:	2200      	movs	r2, #0
 8001680:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001682:	4b1e      	ldr	r3, [pc, #120]	@ (80016fc <MX_TIM4_Init+0xa4>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001688:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <MX_TIM4_Init+0xa4>)
 800168a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800168e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001690:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <MX_TIM4_Init+0xa4>)
 8001692:	2200      	movs	r2, #0
 8001694:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001696:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <MX_TIM4_Init+0xa4>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800169c:	2301      	movs	r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016a4:	2301      	movs	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016b4:	2301      	movs	r3, #1
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	4619      	mov	r1, r3
 80016c6:	480d      	ldr	r0, [pc, #52]	@ (80016fc <MX_TIM4_Init+0xa4>)
 80016c8:	f003 f952 	bl	8004970 <HAL_TIM_Encoder_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80016d2:	f7ff fd27 	bl	8001124 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016de:	463b      	mov	r3, r7
 80016e0:	4619      	mov	r1, r3
 80016e2:	4806      	ldr	r0, [pc, #24]	@ (80016fc <MX_TIM4_Init+0xa4>)
 80016e4:	f004 fb64 	bl	8005db0 <HAL_TIMEx_MasterConfigSynchronization>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80016ee:	f7ff fd19 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	3730      	adds	r7, #48	@ 0x30
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200002a4 	.word	0x200002a4
 8001700:	40000800 	.word	0x40000800

08001704 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0a      	ldr	r2, [pc, #40]	@ (800173c <HAL_TIM_Base_MspInit+0x38>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d10b      	bne.n	800172e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001716:	4b0a      	ldr	r3, [pc, #40]	@ (8001740 <HAL_TIM_Base_MspInit+0x3c>)
 8001718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800171a:	4a09      	ldr	r2, [pc, #36]	@ (8001740 <HAL_TIM_Base_MspInit+0x3c>)
 800171c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001720:	6613      	str	r3, [r2, #96]	@ 0x60
 8001722:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <HAL_TIM_Base_MspInit+0x3c>)
 8001724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001726:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800172e:	bf00      	nop
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40012c00 	.word	0x40012c00
 8001740:	40021000 	.word	0x40021000

08001744 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08c      	sub	sp, #48	@ 0x30
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 031c 	add.w	r3, r7, #28
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a3d      	ldr	r2, [pc, #244]	@ (8001858 <HAL_TIM_Encoder_MspInit+0x114>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d144      	bne.n	80017f0 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001766:	4b3d      	ldr	r3, [pc, #244]	@ (800185c <HAL_TIM_Encoder_MspInit+0x118>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176a:	4a3c      	ldr	r2, [pc, #240]	@ (800185c <HAL_TIM_Encoder_MspInit+0x118>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	6593      	str	r3, [r2, #88]	@ 0x58
 8001772:	4b3a      	ldr	r3, [pc, #232]	@ (800185c <HAL_TIM_Encoder_MspInit+0x118>)
 8001774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	61bb      	str	r3, [r7, #24]
 800177c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800177e:	4b37      	ldr	r3, [pc, #220]	@ (800185c <HAL_TIM_Encoder_MspInit+0x118>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001782:	4a36      	ldr	r2, [pc, #216]	@ (800185c <HAL_TIM_Encoder_MspInit+0x118>)
 8001784:	f043 0304 	orr.w	r3, r3, #4
 8001788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800178a:	4b34      	ldr	r3, [pc, #208]	@ (800185c <HAL_TIM_Encoder_MspInit+0x118>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	4b31      	ldr	r3, [pc, #196]	@ (800185c <HAL_TIM_Encoder_MspInit+0x118>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179a:	4a30      	ldr	r2, [pc, #192]	@ (800185c <HAL_TIM_Encoder_MspInit+0x118>)
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017a2:	4b2e      	ldr	r3, [pc, #184]	@ (800185c <HAL_TIM_Encoder_MspInit+0x118>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A1_Pin;
 80017ae:	2340      	movs	r3, #64	@ 0x40
 80017b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017be:	2302      	movs	r3, #2
 80017c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ENCODER_A1_GPIO_Port, &GPIO_InitStruct);
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	4619      	mov	r1, r3
 80017c8:	4825      	ldr	r0, [pc, #148]	@ (8001860 <HAL_TIM_Encoder_MspInit+0x11c>)
 80017ca:	f001 fb4b 	bl	8002e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_B1_Pin;
 80017ce:	2320      	movs	r3, #32
 80017d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017de:	2302      	movs	r3, #2
 80017e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ENCODER_B1_GPIO_Port, &GPIO_InitStruct);
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	4619      	mov	r1, r3
 80017e8:	481e      	ldr	r0, [pc, #120]	@ (8001864 <HAL_TIM_Encoder_MspInit+0x120>)
 80017ea:	f001 fb3b 	bl	8002e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80017ee:	e02e      	b.n	800184e <HAL_TIM_Encoder_MspInit+0x10a>
  else if(tim_encoderHandle->Instance==TIM4)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001868 <HAL_TIM_Encoder_MspInit+0x124>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d129      	bne.n	800184e <HAL_TIM_Encoder_MspInit+0x10a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017fa:	4b18      	ldr	r3, [pc, #96]	@ (800185c <HAL_TIM_Encoder_MspInit+0x118>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fe:	4a17      	ldr	r2, [pc, #92]	@ (800185c <HAL_TIM_Encoder_MspInit+0x118>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6593      	str	r3, [r2, #88]	@ 0x58
 8001806:	4b15      	ldr	r3, [pc, #84]	@ (800185c <HAL_TIM_Encoder_MspInit+0x118>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4b12      	ldr	r3, [pc, #72]	@ (800185c <HAL_TIM_Encoder_MspInit+0x118>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001816:	4a11      	ldr	r2, [pc, #68]	@ (800185c <HAL_TIM_Encoder_MspInit+0x118>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800181e:	4b0f      	ldr	r3, [pc, #60]	@ (800185c <HAL_TIM_Encoder_MspInit+0x118>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_A2_Pin|ENCODER_B2_Pin;
 800182a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800182e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800183c:	230a      	movs	r3, #10
 800183e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	f107 031c 	add.w	r3, r7, #28
 8001844:	4619      	mov	r1, r3
 8001846:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800184a:	f001 fb0b 	bl	8002e64 <HAL_GPIO_Init>
}
 800184e:	bf00      	nop
 8001850:	3730      	adds	r7, #48	@ 0x30
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40000400 	.word	0x40000400
 800185c:	40021000 	.word	0x40021000
 8001860:	48000800 	.word	0x48000800
 8001864:	48000400 	.word	0x48000400
 8001868:	40000800 	.word	0x40000800

0800186c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	@ 0x28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a20      	ldr	r2, [pc, #128]	@ (800190c <HAL_TIM_MspPostInit+0xa0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d13a      	bne.n	8001904 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	4b20      	ldr	r3, [pc, #128]	@ (8001910 <HAL_TIM_MspPostInit+0xa4>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001892:	4a1f      	ldr	r2, [pc, #124]	@ (8001910 <HAL_TIM_MspPostInit+0xa4>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800189a:	4b1d      	ldr	r3, [pc, #116]	@ (8001910 <HAL_TIM_MspPostInit+0xa4>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001910 <HAL_TIM_MspPostInit+0xa4>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018aa:	4a19      	ldr	r2, [pc, #100]	@ (8001910 <HAL_TIM_MspPostInit+0xa4>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b2:	4b17      	ldr	r3, [pc, #92]	@ (8001910 <HAL_TIM_MspPostInit+0xa4>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = REV2_Pin|REV1_Pin;
 80018be:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80018c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80018d0:	2306      	movs	r3, #6
 80018d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	480e      	ldr	r0, [pc, #56]	@ (8001914 <HAL_TIM_MspPostInit+0xa8>)
 80018dc:	f001 fac2 	bl	8002e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FWD2_Pin|FWD1_Pin|M_SCTR_LIDAR_Pin;
 80018e0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80018f2:	2306      	movs	r3, #6
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001900:	f001 fab0 	bl	8002e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001904:	bf00      	nop
 8001906:	3728      	adds	r7, #40	@ 0x28
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40012c00 	.word	0x40012c00
 8001910:	40021000 	.word	0x40021000
 8001914:	48000400 	.word	0x48000400

08001918 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800191c:	4b22      	ldr	r3, [pc, #136]	@ (80019a8 <MX_USART2_UART_Init+0x90>)
 800191e:	4a23      	ldr	r2, [pc, #140]	@ (80019ac <MX_USART2_UART_Init+0x94>)
 8001920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001922:	4b21      	ldr	r3, [pc, #132]	@ (80019a8 <MX_USART2_UART_Init+0x90>)
 8001924:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800192a:	4b1f      	ldr	r3, [pc, #124]	@ (80019a8 <MX_USART2_UART_Init+0x90>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001930:	4b1d      	ldr	r3, [pc, #116]	@ (80019a8 <MX_USART2_UART_Init+0x90>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001936:	4b1c      	ldr	r3, [pc, #112]	@ (80019a8 <MX_USART2_UART_Init+0x90>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800193c:	4b1a      	ldr	r3, [pc, #104]	@ (80019a8 <MX_USART2_UART_Init+0x90>)
 800193e:	220c      	movs	r2, #12
 8001940:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001942:	4b19      	ldr	r3, [pc, #100]	@ (80019a8 <MX_USART2_UART_Init+0x90>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001948:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <MX_USART2_UART_Init+0x90>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800194e:	4b16      	ldr	r3, [pc, #88]	@ (80019a8 <MX_USART2_UART_Init+0x90>)
 8001950:	2200      	movs	r2, #0
 8001952:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001954:	4b14      	ldr	r3, [pc, #80]	@ (80019a8 <MX_USART2_UART_Init+0x90>)
 8001956:	2200      	movs	r2, #0
 8001958:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800195a:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <MX_USART2_UART_Init+0x90>)
 800195c:	2200      	movs	r2, #0
 800195e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001960:	4811      	ldr	r0, [pc, #68]	@ (80019a8 <MX_USART2_UART_Init+0x90>)
 8001962:	f004 fb9e 	bl	80060a2 <HAL_UART_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800196c:	f7ff fbda 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001970:	2100      	movs	r1, #0
 8001972:	480d      	ldr	r0, [pc, #52]	@ (80019a8 <MX_USART2_UART_Init+0x90>)
 8001974:	f005 f998 	bl	8006ca8 <HAL_UARTEx_SetTxFifoThreshold>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800197e:	f7ff fbd1 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001982:	2100      	movs	r1, #0
 8001984:	4808      	ldr	r0, [pc, #32]	@ (80019a8 <MX_USART2_UART_Init+0x90>)
 8001986:	f005 f9cd 	bl	8006d24 <HAL_UARTEx_SetRxFifoThreshold>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001990:	f7ff fbc8 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001994:	4804      	ldr	r0, [pc, #16]	@ (80019a8 <MX_USART2_UART_Init+0x90>)
 8001996:	f005 f94e 	bl	8006c36 <HAL_UARTEx_DisableFifoMode>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80019a0:	f7ff fbc0 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	200002f0 	.word	0x200002f0
 80019ac:	40004400 	.word	0x40004400

080019b0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019b4:	4b22      	ldr	r3, [pc, #136]	@ (8001a40 <MX_USART3_UART_Init+0x90>)
 80019b6:	4a23      	ldr	r2, [pc, #140]	@ (8001a44 <MX_USART3_UART_Init+0x94>)
 80019b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019ba:	4b21      	ldr	r3, [pc, #132]	@ (8001a40 <MX_USART3_UART_Init+0x90>)
 80019bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a40 <MX_USART3_UART_Init+0x90>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a40 <MX_USART3_UART_Init+0x90>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001a40 <MX_USART3_UART_Init+0x90>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a40 <MX_USART3_UART_Init+0x90>)
 80019d6:	220c      	movs	r2, #12
 80019d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019da:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <MX_USART3_UART_Init+0x90>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e0:	4b17      	ldr	r3, [pc, #92]	@ (8001a40 <MX_USART3_UART_Init+0x90>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019e6:	4b16      	ldr	r3, [pc, #88]	@ (8001a40 <MX_USART3_UART_Init+0x90>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019ec:	4b14      	ldr	r3, [pc, #80]	@ (8001a40 <MX_USART3_UART_Init+0x90>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019f2:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <MX_USART3_UART_Init+0x90>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019f8:	4811      	ldr	r0, [pc, #68]	@ (8001a40 <MX_USART3_UART_Init+0x90>)
 80019fa:	f004 fb52 	bl	80060a2 <HAL_UART_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a04:	f7ff fb8e 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a08:	2100      	movs	r1, #0
 8001a0a:	480d      	ldr	r0, [pc, #52]	@ (8001a40 <MX_USART3_UART_Init+0x90>)
 8001a0c:	f005 f94c 	bl	8006ca8 <HAL_UARTEx_SetTxFifoThreshold>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a16:	f7ff fb85 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4808      	ldr	r0, [pc, #32]	@ (8001a40 <MX_USART3_UART_Init+0x90>)
 8001a1e:	f005 f981 	bl	8006d24 <HAL_UARTEx_SetRxFifoThreshold>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a28:	f7ff fb7c 	bl	8001124 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a2c:	4804      	ldr	r0, [pc, #16]	@ (8001a40 <MX_USART3_UART_Init+0x90>)
 8001a2e:	f005 f902 	bl	8006c36 <HAL_UARTEx_DisableFifoMode>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a38:	f7ff fb74 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000384 	.word	0x20000384
 8001a44:	40004800 	.word	0x40004800

08001a48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b09c      	sub	sp, #112	@ 0x70
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a60:	f107 0318 	add.w	r3, r7, #24
 8001a64:	2244      	movs	r2, #68	@ 0x44
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f008 f9e7 	bl	8009e3c <memset>
  if(uartHandle->Instance==USART2)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a3d      	ldr	r2, [pc, #244]	@ (8001b68 <HAL_UART_MspInit+0x120>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d137      	bne.n	8001ae8 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a80:	f107 0318 	add.w	r3, r7, #24
 8001a84:	4618      	mov	r0, r3
 8001a86:	f002 fac9 	bl	800401c <HAL_RCCEx_PeriphCLKConfig>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a90:	f7ff fb48 	bl	8001124 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a94:	4b35      	ldr	r3, [pc, #212]	@ (8001b6c <HAL_UART_MspInit+0x124>)
 8001a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a98:	4a34      	ldr	r2, [pc, #208]	@ (8001b6c <HAL_UART_MspInit+0x124>)
 8001a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aa0:	4b32      	ldr	r3, [pc, #200]	@ (8001b6c <HAL_UART_MspInit+0x124>)
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aac:	4b2f      	ldr	r3, [pc, #188]	@ (8001b6c <HAL_UART_MspInit+0x124>)
 8001aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab0:	4a2e      	ldr	r2, [pc, #184]	@ (8001b6c <HAL_UART_MspInit+0x124>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b6c <HAL_UART_MspInit+0x124>)
 8001aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX_LIDAR_Pin|RX_LIDAR_Pin;
 8001ac4:	230c      	movs	r3, #12
 8001ac6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ad4:	2307      	movs	r3, #7
 8001ad6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001adc:	4619      	mov	r1, r3
 8001ade:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae2:	f001 f9bf 	bl	8002e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ae6:	e03b      	b.n	8001b60 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a20      	ldr	r2, [pc, #128]	@ (8001b70 <HAL_UART_MspInit+0x128>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d136      	bne.n	8001b60 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001af2:	2304      	movs	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001afa:	f107 0318 	add.w	r3, r7, #24
 8001afe:	4618      	mov	r0, r3
 8001b00:	f002 fa8c 	bl	800401c <HAL_RCCEx_PeriphCLKConfig>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001b0a:	f7ff fb0b 	bl	8001124 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b0e:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <HAL_UART_MspInit+0x124>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b12:	4a16      	ldr	r2, [pc, #88]	@ (8001b6c <HAL_UART_MspInit+0x124>)
 8001b14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b1a:	4b14      	ldr	r3, [pc, #80]	@ (8001b6c <HAL_UART_MspInit+0x124>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b26:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <HAL_UART_MspInit+0x124>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2a:	4a10      	ldr	r2, [pc, #64]	@ (8001b6c <HAL_UART_MspInit+0x124>)
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b32:	4b0e      	ldr	r3, [pc, #56]	@ (8001b6c <HAL_UART_MspInit+0x124>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SWD_TX_Pin|SWD_RX_Pin;
 8001b3e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b42:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b50:	2307      	movs	r3, #7
 8001b52:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b54:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4806      	ldr	r0, [pc, #24]	@ (8001b74 <HAL_UART_MspInit+0x12c>)
 8001b5c:	f001 f982 	bl	8002e64 <HAL_GPIO_Init>
}
 8001b60:	bf00      	nop
 8001b62:	3770      	adds	r7, #112	@ 0x70
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40004400 	.word	0x40004400
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40004800 	.word	0x40004800
 8001b74:	48000800 	.word	0x48000800

08001b78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b78:	480d      	ldr	r0, [pc, #52]	@ (8001bb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b7a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b7c:	f7ff fc38 	bl	80013f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b80:	480c      	ldr	r0, [pc, #48]	@ (8001bb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b82:	490d      	ldr	r1, [pc, #52]	@ (8001bb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b84:	4a0d      	ldr	r2, [pc, #52]	@ (8001bbc <LoopForever+0xe>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b88:	e002      	b.n	8001b90 <LoopCopyDataInit>

08001b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8e:	3304      	adds	r3, #4

08001b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b94:	d3f9      	bcc.n	8001b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b96:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b98:	4c0a      	ldr	r4, [pc, #40]	@ (8001bc4 <LoopForever+0x16>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b9c:	e001      	b.n	8001ba2 <LoopFillZerobss>

08001b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba0:	3204      	adds	r2, #4

08001ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba4:	d3fb      	bcc.n	8001b9e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001ba6:	f008 f9f3 	bl	8009f90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001baa:	f7ff fa0d 	bl	8000fc8 <main>

08001bae <LoopForever>:

LoopForever:
    b LoopForever
 8001bae:	e7fe      	b.n	8001bae <LoopForever>
  ldr   r0, =_estack
 8001bb0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001bbc:	0800ab3c 	.word	0x0800ab3c
  ldr r2, =_sbss
 8001bc0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001bc4:	20001f50 	.word	0x20001f50

08001bc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bc8:	e7fe      	b.n	8001bc8 <ADC1_2_IRQHandler>

08001bca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd4:	2003      	movs	r0, #3
 8001bd6:	f001 f912 	bl	8002dfe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bda:	200f      	movs	r0, #15
 8001bdc:	f7ff fad2 	bl	8001184 <HAL_InitTick>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	71fb      	strb	r3, [r7, #7]
 8001bea:	e001      	b.n	8001bf0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bec:	f7ff faa0 	bl	8001130 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bf0:	79fb      	ldrb	r3, [r7, #7]

}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c00:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <HAL_IncTick+0x1c>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <HAL_IncTick+0x20>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4413      	add	r3, r2
 8001c0a:	4a03      	ldr	r2, [pc, #12]	@ (8001c18 <HAL_IncTick+0x1c>)
 8001c0c:	6013      	str	r3, [r2, #0]
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	20000418 	.word	0x20000418
 8001c1c:	20000008 	.word	0x20000008

08001c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return uwTick;
 8001c24:	4b03      	ldr	r3, [pc, #12]	@ (8001c34 <HAL_GetTick+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000418 	.word	0x20000418

08001c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c40:	f7ff ffee 	bl	8001c20 <HAL_GetTick>
 8001c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c50:	d004      	beq.n	8001c5c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c52:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <HAL_Delay+0x40>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	4413      	add	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c5c:	bf00      	nop
 8001c5e:	f7ff ffdf 	bl	8001c20 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d8f7      	bhi.n	8001c5e <HAL_Delay+0x26>
  {
  }
}
 8001c6e:	bf00      	nop
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000008 	.word	0x20000008

08001c7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	609a      	str	r2, [r3, #8]
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	609a      	str	r2, [r3, #8]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	3360      	adds	r3, #96	@ 0x60
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <LL_ADC_SetOffset+0x44>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	4313      	orrs	r3, r2
 8001d14:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d1c:	bf00      	nop
 8001d1e:	371c      	adds	r7, #28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	03fff000 	.word	0x03fff000

08001d2c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3360      	adds	r3, #96	@ 0x60
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	3360      	adds	r3, #96	@ 0x60
 8001d68:	461a      	mov	r2, r3
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d82:	bf00      	nop
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b087      	sub	sp, #28
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3360      	adds	r3, #96	@ 0x60
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001db8:	bf00      	nop
 8001dba:	371c      	adds	r7, #28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3360      	adds	r3, #96	@ 0x60
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	431a      	orrs	r2, r3
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001dee:	bf00      	nop
 8001df0:	371c      	adds	r7, #28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	615a      	str	r2, [r3, #20]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3330      	adds	r3, #48	@ 0x30
 8001e30:	461a      	mov	r2, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	f003 030c 	and.w	r3, r3, #12
 8001e3c:	4413      	add	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	211f      	movs	r1, #31
 8001e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	401a      	ands	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	0e9b      	lsrs	r3, r3, #26
 8001e58:	f003 011f 	and.w	r1, r3, #31
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f003 031f 	and.w	r3, r3, #31
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
 8001e66:	431a      	orrs	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e6c:	bf00      	nop
 8001e6e:	371c      	adds	r7, #28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	3314      	adds	r3, #20
 8001e88:	461a      	mov	r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	0e5b      	lsrs	r3, r3, #25
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	4413      	add	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	0d1b      	lsrs	r3, r3, #20
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	2107      	movs	r1, #7
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	401a      	ands	r2, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	0d1b      	lsrs	r3, r3, #20
 8001eb2:	f003 031f 	and.w	r3, r3, #31
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ec2:	bf00      	nop
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	401a      	ands	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f003 0318 	and.w	r3, r3, #24
 8001ef2:	4908      	ldr	r1, [pc, #32]	@ (8001f14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ef4:	40d9      	lsrs	r1, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	400b      	ands	r3, r1
 8001efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001efe:	431a      	orrs	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	0007ffff 	.word	0x0007ffff

08001f18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6093      	str	r3, [r2, #8]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f50:	d101      	bne.n	8001f56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001f74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f78:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fa0:	d101      	bne.n	8001fa6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <LL_ADC_IsEnabled+0x18>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <LL_ADC_IsEnabled+0x1a>
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d101      	bne.n	8001ff2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	2b08      	cmp	r3, #8
 8002012:	d101      	bne.n	8002018 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b089      	sub	sp, #36	@ 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e167      	b.n	8002312 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204c:	2b00      	cmp	r3, #0
 800204e:	d109      	bne.n	8002064 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7fe fdb7 	bl	8000bc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff67 	bl	8001f3c <LL_ADC_IsDeepPowerDownEnabled>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d004      	beq.n	800207e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff4d 	bl	8001f18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff82 	bl	8001f8c <LL_ADC_IsInternalRegulatorEnabled>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d115      	bne.n	80020ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ff66 	bl	8001f64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002098:	4ba0      	ldr	r3, [pc, #640]	@ (800231c <HAL_ADC_Init+0x2f4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	099b      	lsrs	r3, r3, #6
 800209e:	4aa0      	ldr	r2, [pc, #640]	@ (8002320 <HAL_ADC_Init+0x2f8>)
 80020a0:	fba2 2303 	umull	r2, r3, r2, r3
 80020a4:	099b      	lsrs	r3, r3, #6
 80020a6:	3301      	adds	r3, #1
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020ac:	e002      	b.n	80020b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f9      	bne.n	80020ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff ff64 	bl	8001f8c <LL_ADC_IsInternalRegulatorEnabled>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10d      	bne.n	80020e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ce:	f043 0210 	orr.w	r2, r3, #16
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020da:	f043 0201 	orr.w	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ff75 	bl	8001fda <LL_ADC_REG_IsConversionOngoing>
 80020f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 8100 	bne.w	8002300 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	2b00      	cmp	r3, #0
 8002104:	f040 80fc 	bne.w	8002300 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002110:	f043 0202 	orr.w	r2, r3, #2
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff49 	bl	8001fb4 <LL_ADC_IsEnabled>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d111      	bne.n	800214c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002128:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800212c:	f7ff ff42 	bl	8001fb4 <LL_ADC_IsEnabled>
 8002130:	4604      	mov	r4, r0
 8002132:	487c      	ldr	r0, [pc, #496]	@ (8002324 <HAL_ADC_Init+0x2fc>)
 8002134:	f7ff ff3e 	bl	8001fb4 <LL_ADC_IsEnabled>
 8002138:	4603      	mov	r3, r0
 800213a:	4323      	orrs	r3, r4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d105      	bne.n	800214c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4619      	mov	r1, r3
 8002146:	4878      	ldr	r0, [pc, #480]	@ (8002328 <HAL_ADC_Init+0x300>)
 8002148:	f7ff fd98 	bl	8001c7c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	7f5b      	ldrb	r3, [r3, #29]
 8002150:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002156:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800215c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002162:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800216a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002176:	2b01      	cmp	r3, #1
 8002178:	d106      	bne.n	8002188 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217e:	3b01      	subs	r3, #1
 8002180:	045b      	lsls	r3, r3, #17
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800218c:	2b00      	cmp	r3, #0
 800218e:	d009      	beq.n	80021a4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002194:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	4b60      	ldr	r3, [pc, #384]	@ (800232c <HAL_ADC_Init+0x304>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	69b9      	ldr	r1, [r7, #24]
 80021b4:	430b      	orrs	r3, r1
 80021b6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff ff14 	bl	8002000 <LL_ADC_INJ_IsConversionOngoing>
 80021d8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d16d      	bne.n	80022bc <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d16a      	bne.n	80022bc <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021ea:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021f2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002202:	f023 0302 	bic.w	r3, r3, #2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	69b9      	ldr	r1, [r7, #24]
 800220c:	430b      	orrs	r3, r1
 800220e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d017      	beq.n	8002248 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002226:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002230:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002234:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6911      	ldr	r1, [r2, #16]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	430b      	orrs	r3, r1
 8002242:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002246:	e013      	b.n	8002270 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691a      	ldr	r2, [r3, #16]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002256:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002268:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800226c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002276:	2b01      	cmp	r3, #1
 8002278:	d118      	bne.n	80022ac <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002284:	f023 0304 	bic.w	r3, r3, #4
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002290:	4311      	orrs	r1, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002296:	4311      	orrs	r1, r2
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800229c:	430a      	orrs	r2, r1
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f042 0201 	orr.w	r2, r2, #1
 80022a8:	611a      	str	r2, [r3, #16]
 80022aa:	e007      	b.n	80022bc <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691a      	ldr	r2, [r3, #16]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0201 	bic.w	r2, r2, #1
 80022ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d10c      	bne.n	80022de <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	f023 010f 	bic.w	r1, r3, #15
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	1e5a      	subs	r2, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	631a      	str	r2, [r3, #48]	@ 0x30
 80022dc:	e007      	b.n	80022ee <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 020f 	bic.w	r2, r2, #15
 80022ec:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f2:	f023 0303 	bic.w	r3, r3, #3
 80022f6:	f043 0201 	orr.w	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022fe:	e007      	b.n	8002310 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002304:	f043 0210 	orr.w	r2, r3, #16
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002310:	7ffb      	ldrb	r3, [r7, #31]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3724      	adds	r7, #36	@ 0x24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd90      	pop	{r4, r7, pc}
 800231a:	bf00      	nop
 800231c:	20000000 	.word	0x20000000
 8002320:	053e2d63 	.word	0x053e2d63
 8002324:	50000100 	.word	0x50000100
 8002328:	50000300 	.word	0x50000300
 800232c:	fff04007 	.word	0xfff04007

08002330 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b0b6      	sub	sp, #216	@ 0xd8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x22>
 800234e:	2302      	movs	r3, #2
 8002350:	e3c8      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x7b4>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fe3b 	bl	8001fda <LL_ADC_REG_IsConversionOngoing>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	f040 83ad 	bne.w	8002ac6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	f7ff fd51 	bl	8001e20 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fe29 	bl	8001fda <LL_ADC_REG_IsConversionOngoing>
 8002388:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fe35 	bl	8002000 <LL_ADC_INJ_IsConversionOngoing>
 8002396:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800239a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f040 81d9 	bne.w	8002756 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f040 81d4 	bne.w	8002756 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80023b6:	d10f      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2200      	movs	r2, #0
 80023c2:	4619      	mov	r1, r3
 80023c4:	f7ff fd58 	bl	8001e78 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fd12 	bl	8001dfa <LL_ADC_SetSamplingTimeCommonConfig>
 80023d6:	e00e      	b.n	80023f6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	6819      	ldr	r1, [r3, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	461a      	mov	r2, r3
 80023e6:	f7ff fd47 	bl	8001e78 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fd02 	bl	8001dfa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	08db      	lsrs	r3, r3, #3
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	2b04      	cmp	r3, #4
 8002416:	d022      	beq.n	800245e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	6919      	ldr	r1, [r3, #16]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002428:	f7ff fc5c 	bl	8001ce4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	6919      	ldr	r1, [r3, #16]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	461a      	mov	r2, r3
 800243a:	f7ff fca8 	bl	8001d8e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800244a:	2b01      	cmp	r3, #1
 800244c:	d102      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x124>
 800244e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002452:	e000      	b.n	8002456 <HAL_ADC_ConfigChannel+0x126>
 8002454:	2300      	movs	r3, #0
 8002456:	461a      	mov	r2, r3
 8002458:	f7ff fcb4 	bl	8001dc4 <LL_ADC_SetOffsetSaturation>
 800245c:	e17b      	b.n	8002756 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fc61 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 800246a:	4603      	mov	r3, r0
 800246c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10a      	bne.n	800248a <HAL_ADC_ConfigChannel+0x15a>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2100      	movs	r1, #0
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fc56 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 8002480:	4603      	mov	r3, r0
 8002482:	0e9b      	lsrs	r3, r3, #26
 8002484:	f003 021f 	and.w	r2, r3, #31
 8002488:	e01e      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x198>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fc4b 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80024b8:	2320      	movs	r3, #32
 80024ba:	e004      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80024bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024c0:	fab3 f383 	clz	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d105      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x1b0>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0e9b      	lsrs	r3, r3, #26
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	e018      	b.n	8002512 <HAL_ADC_ConfigChannel+0x1e2>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80024f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80024fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002504:	2320      	movs	r3, #32
 8002506:	e004      	b.n	8002512 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002508:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800250c:	fab3 f383 	clz	r3, r3
 8002510:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002512:	429a      	cmp	r2, r3
 8002514:	d106      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2200      	movs	r2, #0
 800251c:	2100      	movs	r1, #0
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fc1a 	bl	8001d58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2101      	movs	r1, #1
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fbfe 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 8002530:	4603      	mov	r3, r0
 8002532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10a      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x220>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2101      	movs	r1, #1
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fbf3 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	0e9b      	lsrs	r3, r3, #26
 800254a:	f003 021f 	and.w	r2, r3, #31
 800254e:	e01e      	b.n	800258e <HAL_ADC_ConfigChannel+0x25e>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2101      	movs	r1, #1
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fbe8 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 800255c:	4603      	mov	r3, r0
 800255e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800256e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002572:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002576:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800257e:	2320      	movs	r3, #32
 8002580:	e004      	b.n	800258c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002582:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002596:	2b00      	cmp	r3, #0
 8002598:	d105      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x276>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	0e9b      	lsrs	r3, r3, #26
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	e018      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x2a8>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80025ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80025be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80025c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80025ca:	2320      	movs	r3, #32
 80025cc:	e004      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80025ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025d2:	fab3 f383 	clz	r3, r3
 80025d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025d8:	429a      	cmp	r2, r3
 80025da:	d106      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2200      	movs	r2, #0
 80025e2:	2101      	movs	r1, #1
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fbb7 	bl	8001d58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2102      	movs	r1, #2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fb9b 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10a      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x2e6>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2102      	movs	r1, #2
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fb90 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 800260c:	4603      	mov	r3, r0
 800260e:	0e9b      	lsrs	r3, r3, #26
 8002610:	f003 021f 	and.w	r2, r3, #31
 8002614:	e01e      	b.n	8002654 <HAL_ADC_ConfigChannel+0x324>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2102      	movs	r1, #2
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fb85 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 8002622:	4603      	mov	r3, r0
 8002624:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002634:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002638:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800263c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002644:	2320      	movs	r3, #32
 8002646:	e004      	b.n	8002652 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002648:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800264c:	fab3 f383 	clz	r3, r3
 8002650:	b2db      	uxtb	r3, r3
 8002652:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265c:	2b00      	cmp	r3, #0
 800265e:	d105      	bne.n	800266c <HAL_ADC_ConfigChannel+0x33c>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	0e9b      	lsrs	r3, r3, #26
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	e016      	b.n	800269a <HAL_ADC_ConfigChannel+0x36a>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800267e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002680:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002684:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800268c:	2320      	movs	r3, #32
 800268e:	e004      	b.n	800269a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002690:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800269a:	429a      	cmp	r2, r3
 800269c:	d106      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2200      	movs	r2, #0
 80026a4:	2102      	movs	r1, #2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fb56 	bl	8001d58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2103      	movs	r1, #3
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fb3a 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10a      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x3a8>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2103      	movs	r1, #3
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff fb2f 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 80026ce:	4603      	mov	r3, r0
 80026d0:	0e9b      	lsrs	r3, r3, #26
 80026d2:	f003 021f 	and.w	r2, r3, #31
 80026d6:	e017      	b.n	8002708 <HAL_ADC_ConfigChannel+0x3d8>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2103      	movs	r1, #3
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff fb24 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 80026e4:	4603      	mov	r3, r0
 80026e6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80026f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026f2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80026f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80026fa:	2320      	movs	r3, #32
 80026fc:	e003      	b.n	8002706 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80026fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002700:	fab3 f383 	clz	r3, r3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x3f0>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	0e9b      	lsrs	r3, r3, #26
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	e011      	b.n	8002744 <HAL_ADC_ConfigChannel+0x414>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800272e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002730:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002732:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002738:	2320      	movs	r3, #32
 800273a:	e003      	b.n	8002744 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800273c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002744:	429a      	cmp	r2, r3
 8002746:	d106      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2200      	movs	r2, #0
 800274e:	2103      	movs	r1, #3
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fb01 	bl	8001d58 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fc2a 	bl	8001fb4 <LL_ADC_IsEnabled>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	f040 8140 	bne.w	80029e8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	6819      	ldr	r1, [r3, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	461a      	mov	r2, r3
 8002776:	f7ff fbab 	bl	8001ed0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	4a8f      	ldr	r2, [pc, #572]	@ (80029bc <HAL_ADC_ConfigChannel+0x68c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	f040 8131 	bne.w	80029e8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10b      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x47e>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	0e9b      	lsrs	r3, r3, #26
 800279c:	3301      	adds	r3, #1
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	2b09      	cmp	r3, #9
 80027a4:	bf94      	ite	ls
 80027a6:	2301      	movls	r3, #1
 80027a8:	2300      	movhi	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	e019      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x4b2>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80027bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027be:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80027c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80027c6:	2320      	movs	r3, #32
 80027c8:	e003      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80027ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	3301      	adds	r3, #1
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	2b09      	cmp	r3, #9
 80027da:	bf94      	ite	ls
 80027dc:	2301      	movls	r3, #1
 80027de:	2300      	movhi	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d079      	beq.n	80028da <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d107      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x4d2>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	0e9b      	lsrs	r3, r3, #26
 80027f8:	3301      	adds	r3, #1
 80027fa:	069b      	lsls	r3, r3, #26
 80027fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002800:	e015      	b.n	800282e <HAL_ADC_ConfigChannel+0x4fe>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002812:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800281a:	2320      	movs	r3, #32
 800281c:	e003      	b.n	8002826 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800281e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	3301      	adds	r3, #1
 8002828:	069b      	lsls	r3, r3, #26
 800282a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002836:	2b00      	cmp	r3, #0
 8002838:	d109      	bne.n	800284e <HAL_ADC_ConfigChannel+0x51e>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	0e9b      	lsrs	r3, r3, #26
 8002840:	3301      	adds	r3, #1
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	2101      	movs	r1, #1
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	e017      	b.n	800287e <HAL_ADC_ConfigChannel+0x54e>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800285c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800285e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002860:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002866:	2320      	movs	r3, #32
 8002868:	e003      	b.n	8002872 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800286a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	3301      	adds	r3, #1
 8002874:	f003 031f 	and.w	r3, r3, #31
 8002878:	2101      	movs	r1, #1
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	ea42 0103 	orr.w	r1, r2, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10a      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x574>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	0e9b      	lsrs	r3, r3, #26
 8002894:	3301      	adds	r3, #1
 8002896:	f003 021f 	and.w	r2, r3, #31
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	051b      	lsls	r3, r3, #20
 80028a2:	e018      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x5a6>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ac:	fa93 f3a3 	rbit	r3, r3
 80028b0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80028b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80028b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80028bc:	2320      	movs	r3, #32
 80028be:	e003      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80028c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	3301      	adds	r3, #1
 80028ca:	f003 021f 	and.w	r2, r3, #31
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028d6:	430b      	orrs	r3, r1
 80028d8:	e081      	b.n	80029de <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d107      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x5c6>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	0e9b      	lsrs	r3, r3, #26
 80028ec:	3301      	adds	r3, #1
 80028ee:	069b      	lsls	r3, r3, #26
 80028f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028f4:	e015      	b.n	8002922 <HAL_ADC_ConfigChannel+0x5f2>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002906:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800290e:	2320      	movs	r3, #32
 8002910:	e003      	b.n	800291a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002914:	fab3 f383 	clz	r3, r3
 8002918:	b2db      	uxtb	r3, r3
 800291a:	3301      	adds	r3, #1
 800291c:	069b      	lsls	r3, r3, #26
 800291e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x612>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	0e9b      	lsrs	r3, r3, #26
 8002934:	3301      	adds	r3, #1
 8002936:	f003 031f 	and.w	r3, r3, #31
 800293a:	2101      	movs	r1, #1
 800293c:	fa01 f303 	lsl.w	r3, r1, r3
 8002940:	e017      	b.n	8002972 <HAL_ADC_ConfigChannel+0x642>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	61fb      	str	r3, [r7, #28]
  return result;
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800295a:	2320      	movs	r3, #32
 800295c:	e003      	b.n	8002966 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	fab3 f383 	clz	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	3301      	adds	r3, #1
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	2101      	movs	r1, #1
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	ea42 0103 	orr.w	r1, r2, r3
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10d      	bne.n	800299e <HAL_ADC_ConfigChannel+0x66e>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0e9b      	lsrs	r3, r3, #26
 8002988:	3301      	adds	r3, #1
 800298a:	f003 021f 	and.w	r2, r3, #31
 800298e:	4613      	mov	r3, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4413      	add	r3, r2
 8002994:	3b1e      	subs	r3, #30
 8002996:	051b      	lsls	r3, r3, #20
 8002998:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800299c:	e01e      	b.n	80029dc <HAL_ADC_ConfigChannel+0x6ac>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	613b      	str	r3, [r7, #16]
  return result;
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d104      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80029b6:	2320      	movs	r3, #32
 80029b8:	e006      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x698>
 80029ba:	bf00      	nop
 80029bc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	3301      	adds	r3, #1
 80029ca:	f003 021f 	and.w	r2, r3, #31
 80029ce:	4613      	mov	r3, r2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	4413      	add	r3, r2
 80029d4:	3b1e      	subs	r3, #30
 80029d6:	051b      	lsls	r3, r3, #20
 80029d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029dc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029e2:	4619      	mov	r1, r3
 80029e4:	f7ff fa48 	bl	8001e78 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4b3f      	ldr	r3, [pc, #252]	@ (8002aec <HAL_ADC_ConfigChannel+0x7bc>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d071      	beq.n	8002ad8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029f4:	483e      	ldr	r0, [pc, #248]	@ (8002af0 <HAL_ADC_ConfigChannel+0x7c0>)
 80029f6:	f7ff f967 	bl	8001cc8 <LL_ADC_GetCommonPathInternalCh>
 80029fa:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a3c      	ldr	r2, [pc, #240]	@ (8002af4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d004      	beq.n	8002a12 <HAL_ADC_ConfigChannel+0x6e2>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a3a      	ldr	r2, [pc, #232]	@ (8002af8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d127      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d121      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a26:	d157      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a2c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a30:	4619      	mov	r1, r3
 8002a32:	482f      	ldr	r0, [pc, #188]	@ (8002af0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a34:	f7ff f935 	bl	8001ca2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a38:	4b30      	ldr	r3, [pc, #192]	@ (8002afc <HAL_ADC_ConfigChannel+0x7cc>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	099b      	lsrs	r3, r3, #6
 8002a3e:	4a30      	ldr	r2, [pc, #192]	@ (8002b00 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a40:	fba2 2303 	umull	r2, r3, r2, r3
 8002a44:	099b      	lsrs	r3, r3, #6
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a52:	e002      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f9      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a60:	e03a      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a27      	ldr	r2, [pc, #156]	@ (8002b04 <HAL_ADC_ConfigChannel+0x7d4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d113      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10d      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a22      	ldr	r2, [pc, #136]	@ (8002b08 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d02a      	beq.n	8002ad8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4818      	ldr	r0, [pc, #96]	@ (8002af0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a8e:	f7ff f908 	bl	8001ca2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a92:	e021      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1c      	ldr	r2, [pc, #112]	@ (8002b0c <HAL_ADC_ConfigChannel+0x7dc>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d11c      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d116      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a16      	ldr	r2, [pc, #88]	@ (8002b08 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d011      	beq.n	8002ad8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ab4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ab8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002abc:	4619      	mov	r1, r3
 8002abe:	480c      	ldr	r0, [pc, #48]	@ (8002af0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ac0:	f7ff f8ef 	bl	8001ca2 <LL_ADC_SetCommonPathInternalCh>
 8002ac4:	e008      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aca:	f043 0220 	orr.w	r2, r3, #32
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ae0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	37d8      	adds	r7, #216	@ 0xd8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	80080000 	.word	0x80080000
 8002af0:	50000300 	.word	0x50000300
 8002af4:	c3210000 	.word	0xc3210000
 8002af8:	90c00010 	.word	0x90c00010
 8002afc:	20000000 	.word	0x20000000
 8002b00:	053e2d63 	.word	0x053e2d63
 8002b04:	c7520000 	.word	0xc7520000
 8002b08:	50000100 	.word	0x50000100
 8002b0c:	cb840000 	.word	0xcb840000

08002b10 <LL_ADC_IsEnabled>:
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <LL_ADC_IsEnabled+0x18>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <LL_ADC_IsEnabled+0x1a>
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d101      	bne.n	8002b4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b0a1      	sub	sp, #132	@ 0x84
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e08b      	b.n	8002c92 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002b82:	2300      	movs	r3, #0
 8002b84:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002b86:	2300      	movs	r3, #0
 8002b88:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b92:	d102      	bne.n	8002b9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b94:	4b41      	ldr	r3, [pc, #260]	@ (8002c9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	e001      	b.n	8002b9e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10b      	bne.n	8002bbc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba8:	f043 0220 	orr.w	r2, r3, #32
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e06a      	b.n	8002c92 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ffb9 	bl	8002b36 <LL_ADC_REG_IsConversionOngoing>
 8002bc4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff ffb3 	bl	8002b36 <LL_ADC_REG_IsConversionOngoing>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d14c      	bne.n	8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002bd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d149      	bne.n	8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002bdc:	4b30      	ldr	r3, [pc, #192]	@ (8002ca0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002bde:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d028      	beq.n	8002c3a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002be8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	6859      	ldr	r1, [r3, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002bfa:	035b      	lsls	r3, r3, #13
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c02:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c04:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c08:	f7ff ff82 	bl	8002b10 <LL_ADC_IsEnabled>
 8002c0c:	4604      	mov	r4, r0
 8002c0e:	4823      	ldr	r0, [pc, #140]	@ (8002c9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002c10:	f7ff ff7e 	bl	8002b10 <LL_ADC_IsEnabled>
 8002c14:	4603      	mov	r3, r0
 8002c16:	4323      	orrs	r3, r4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d133      	bne.n	8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002c24:	f023 030f 	bic.w	r3, r3, #15
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	6811      	ldr	r1, [r2, #0]
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	6892      	ldr	r2, [r2, #8]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	431a      	orrs	r2, r3
 8002c34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c36:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c38:	e024      	b.n	8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c44:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c46:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c4a:	f7ff ff61 	bl	8002b10 <LL_ADC_IsEnabled>
 8002c4e:	4604      	mov	r4, r0
 8002c50:	4812      	ldr	r0, [pc, #72]	@ (8002c9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002c52:	f7ff ff5d 	bl	8002b10 <LL_ADC_IsEnabled>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4323      	orrs	r3, r4
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d112      	bne.n	8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002c66:	f023 030f 	bic.w	r3, r3, #15
 8002c6a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002c6c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c6e:	e009      	b.n	8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c74:	f043 0220 	orr.w	r2, r3, #32
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002c82:	e000      	b.n	8002c86 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c84:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c8e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3784      	adds	r7, #132	@ 0x84
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd90      	pop	{r4, r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	50000100 	.word	0x50000100
 8002ca0:	50000300 	.word	0x50000300

08002ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ccc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cd6:	4a04      	ldr	r2, [pc, #16]	@ (8002ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	60d3      	str	r3, [r2, #12]
}
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf0:	4b04      	ldr	r3, [pc, #16]	@ (8002d04 <__NVIC_GetPriorityGrouping+0x18>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	0a1b      	lsrs	r3, r3, #8
 8002cf6:	f003 0307 	and.w	r3, r3, #7
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	db0b      	blt.n	8002d32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	f003 021f 	and.w	r2, r3, #31
 8002d20:	4907      	ldr	r1, [pc, #28]	@ (8002d40 <__NVIC_EnableIRQ+0x38>)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	2001      	movs	r0, #1
 8002d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	e000e100 	.word	0xe000e100

08002d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	6039      	str	r1, [r7, #0]
 8002d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	db0a      	blt.n	8002d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	490c      	ldr	r1, [pc, #48]	@ (8002d90 <__NVIC_SetPriority+0x4c>)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	0112      	lsls	r2, r2, #4
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	440b      	add	r3, r1
 8002d68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d6c:	e00a      	b.n	8002d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4908      	ldr	r1, [pc, #32]	@ (8002d94 <__NVIC_SetPriority+0x50>)
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	3b04      	subs	r3, #4
 8002d7c:	0112      	lsls	r2, r2, #4
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	440b      	add	r3, r1
 8002d82:	761a      	strb	r2, [r3, #24]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	e000e100 	.word	0xe000e100
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b089      	sub	sp, #36	@ 0x24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f1c3 0307 	rsb	r3, r3, #7
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	bf28      	it	cs
 8002db6:	2304      	movcs	r3, #4
 8002db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	2b06      	cmp	r3, #6
 8002dc0:	d902      	bls.n	8002dc8 <NVIC_EncodePriority+0x30>
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3b03      	subs	r3, #3
 8002dc6:	e000      	b.n	8002dca <NVIC_EncodePriority+0x32>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43da      	mvns	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	401a      	ands	r2, r3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de0:	f04f 31ff 	mov.w	r1, #4294967295
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	43d9      	mvns	r1, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df0:	4313      	orrs	r3, r2
         );
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3724      	adds	r7, #36	@ 0x24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff ff4c 	bl	8002ca4 <__NVIC_SetPriorityGrouping>
}
 8002e0c:	bf00      	nop
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e22:	f7ff ff63 	bl	8002cec <__NVIC_GetPriorityGrouping>
 8002e26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	6978      	ldr	r0, [r7, #20]
 8002e2e:	f7ff ffb3 	bl	8002d98 <NVIC_EncodePriority>
 8002e32:	4602      	mov	r2, r0
 8002e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff ff82 	bl	8002d44 <__NVIC_SetPriority>
}
 8002e40:	bf00      	nop
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ff56 	bl	8002d08 <__NVIC_EnableIRQ>
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e72:	e15a      	b.n	800312a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	2101      	movs	r1, #1
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e80:	4013      	ands	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 814c 	beq.w	8003124 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d005      	beq.n	8002ea4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d130      	bne.n	8002f06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	2203      	movs	r2, #3
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eda:	2201      	movs	r2, #1
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	f003 0201 	and.w	r2, r3, #1
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	d017      	beq.n	8002f42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4013      	ands	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d123      	bne.n	8002f96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	08da      	lsrs	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3208      	adds	r2, #8
 8002f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	220f      	movs	r2, #15
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	08da      	lsrs	r2, r3, #3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3208      	adds	r2, #8
 8002f90:	6939      	ldr	r1, [r7, #16]
 8002f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4013      	ands	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 0203 	and.w	r2, r3, #3
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 80a6 	beq.w	8003124 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd8:	4b5b      	ldr	r3, [pc, #364]	@ (8003148 <HAL_GPIO_Init+0x2e4>)
 8002fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fdc:	4a5a      	ldr	r2, [pc, #360]	@ (8003148 <HAL_GPIO_Init+0x2e4>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fe4:	4b58      	ldr	r3, [pc, #352]	@ (8003148 <HAL_GPIO_Init+0x2e4>)
 8002fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ff0:	4a56      	ldr	r2, [pc, #344]	@ (800314c <HAL_GPIO_Init+0x2e8>)
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	089b      	lsrs	r3, r3, #2
 8002ff6:	3302      	adds	r3, #2
 8002ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	220f      	movs	r2, #15
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4013      	ands	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800301a:	d01f      	beq.n	800305c <HAL_GPIO_Init+0x1f8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a4c      	ldr	r2, [pc, #304]	@ (8003150 <HAL_GPIO_Init+0x2ec>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d019      	beq.n	8003058 <HAL_GPIO_Init+0x1f4>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a4b      	ldr	r2, [pc, #300]	@ (8003154 <HAL_GPIO_Init+0x2f0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d013      	beq.n	8003054 <HAL_GPIO_Init+0x1f0>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a4a      	ldr	r2, [pc, #296]	@ (8003158 <HAL_GPIO_Init+0x2f4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00d      	beq.n	8003050 <HAL_GPIO_Init+0x1ec>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a49      	ldr	r2, [pc, #292]	@ (800315c <HAL_GPIO_Init+0x2f8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <HAL_GPIO_Init+0x1e8>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a48      	ldr	r2, [pc, #288]	@ (8003160 <HAL_GPIO_Init+0x2fc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d101      	bne.n	8003048 <HAL_GPIO_Init+0x1e4>
 8003044:	2305      	movs	r3, #5
 8003046:	e00a      	b.n	800305e <HAL_GPIO_Init+0x1fa>
 8003048:	2306      	movs	r3, #6
 800304a:	e008      	b.n	800305e <HAL_GPIO_Init+0x1fa>
 800304c:	2304      	movs	r3, #4
 800304e:	e006      	b.n	800305e <HAL_GPIO_Init+0x1fa>
 8003050:	2303      	movs	r3, #3
 8003052:	e004      	b.n	800305e <HAL_GPIO_Init+0x1fa>
 8003054:	2302      	movs	r3, #2
 8003056:	e002      	b.n	800305e <HAL_GPIO_Init+0x1fa>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <HAL_GPIO_Init+0x1fa>
 800305c:	2300      	movs	r3, #0
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	f002 0203 	and.w	r2, r2, #3
 8003064:	0092      	lsls	r2, r2, #2
 8003066:	4093      	lsls	r3, r2
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800306e:	4937      	ldr	r1, [pc, #220]	@ (800314c <HAL_GPIO_Init+0x2e8>)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	089b      	lsrs	r3, r3, #2
 8003074:	3302      	adds	r3, #2
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800307c:	4b39      	ldr	r3, [pc, #228]	@ (8003164 <HAL_GPIO_Init+0x300>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	43db      	mvns	r3, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030a0:	4a30      	ldr	r2, [pc, #192]	@ (8003164 <HAL_GPIO_Init+0x300>)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030a6:	4b2f      	ldr	r3, [pc, #188]	@ (8003164 <HAL_GPIO_Init+0x300>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030ca:	4a26      	ldr	r2, [pc, #152]	@ (8003164 <HAL_GPIO_Init+0x300>)
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80030d0:	4b24      	ldr	r3, [pc, #144]	@ (8003164 <HAL_GPIO_Init+0x300>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	43db      	mvns	r3, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003164 <HAL_GPIO_Init+0x300>)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003164 <HAL_GPIO_Init+0x300>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	43db      	mvns	r3, r3
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4013      	ands	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800311e:	4a11      	ldr	r2, [pc, #68]	@ (8003164 <HAL_GPIO_Init+0x300>)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	3301      	adds	r3, #1
 8003128:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	f47f ae9d 	bne.w	8002e74 <HAL_GPIO_Init+0x10>
  }
}
 800313a:	bf00      	nop
 800313c:	bf00      	nop
 800313e:	371c      	adds	r7, #28
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	40021000 	.word	0x40021000
 800314c:	40010000 	.word	0x40010000
 8003150:	48000400 	.word	0x48000400
 8003154:	48000800 	.word	0x48000800
 8003158:	48000c00 	.word	0x48000c00
 800315c:	48001000 	.word	0x48001000
 8003160:	48001400 	.word	0x48001400
 8003164:	40010400 	.word	0x40010400

08003168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	807b      	strh	r3, [r7, #2]
 8003174:	4613      	mov	r3, r2
 8003176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003178:	787b      	ldrb	r3, [r7, #1]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800317e:	887a      	ldrh	r2, [r7, #2]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003184:	e002      	b.n	800318c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003186:	887a      	ldrh	r2, [r7, #2]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e08d      	b.n	80032c6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fd fe96 	bl	8000ef0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2224      	movs	r2, #36	@ 0x24
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0201 	bic.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d107      	bne.n	8003212 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	e006      	b.n	8003220 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800321e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2b02      	cmp	r3, #2
 8003226:	d108      	bne.n	800323a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003236:	605a      	str	r2, [r3, #4]
 8003238:	e007      	b.n	800324a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003248:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6812      	ldr	r2, [r2, #0]
 8003254:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003258:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800325c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800326c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69d9      	ldr	r1, [r3, #28]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1a      	ldr	r2, [r3, #32]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0201 	orr.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d138      	bne.n	8003356 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032ee:	2302      	movs	r3, #2
 80032f0:	e032      	b.n	8003358 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2224      	movs	r2, #36	@ 0x24
 80032fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0201 	bic.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003320:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6819      	ldr	r1, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0201 	orr.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2220      	movs	r2, #32
 8003346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	e000      	b.n	8003358 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003356:	2302      	movs	r3, #2
  }
}
 8003358:	4618      	mov	r0, r3
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b20      	cmp	r3, #32
 8003378:	d139      	bne.n	80033ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003384:	2302      	movs	r3, #2
 8003386:	e033      	b.n	80033f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2224      	movs	r2, #36	@ 0x24
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80033b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	021b      	lsls	r3, r3, #8
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0201 	orr.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	e000      	b.n	80033f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033ee:	2302      	movs	r3, #2
  }
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d141      	bne.n	800348e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800340a:	4b4b      	ldr	r3, [pc, #300]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003416:	d131      	bne.n	800347c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003418:	4b47      	ldr	r3, [pc, #284]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800341a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800341e:	4a46      	ldr	r2, [pc, #280]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003424:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003428:	4b43      	ldr	r3, [pc, #268]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003430:	4a41      	ldr	r2, [pc, #260]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003432:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003436:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003438:	4b40      	ldr	r3, [pc, #256]	@ (800353c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2232      	movs	r2, #50	@ 0x32
 800343e:	fb02 f303 	mul.w	r3, r2, r3
 8003442:	4a3f      	ldr	r2, [pc, #252]	@ (8003540 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003444:	fba2 2303 	umull	r2, r3, r2, r3
 8003448:	0c9b      	lsrs	r3, r3, #18
 800344a:	3301      	adds	r3, #1
 800344c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800344e:	e002      	b.n	8003456 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3b01      	subs	r3, #1
 8003454:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003456:	4b38      	ldr	r3, [pc, #224]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800345e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003462:	d102      	bne.n	800346a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f2      	bne.n	8003450 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800346a:	4b33      	ldr	r3, [pc, #204]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003476:	d158      	bne.n	800352a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e057      	b.n	800352c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800347c:	4b2e      	ldr	r3, [pc, #184]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003482:	4a2d      	ldr	r2, [pc, #180]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003484:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003488:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800348c:	e04d      	b.n	800352a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003494:	d141      	bne.n	800351a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003496:	4b28      	ldr	r3, [pc, #160]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800349e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a2:	d131      	bne.n	8003508 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034a4:	4b24      	ldr	r3, [pc, #144]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034aa:	4a23      	ldr	r2, [pc, #140]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034b4:	4b20      	ldr	r3, [pc, #128]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034c4:	4b1d      	ldr	r3, [pc, #116]	@ (800353c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2232      	movs	r2, #50	@ 0x32
 80034ca:	fb02 f303 	mul.w	r3, r2, r3
 80034ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003540 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034d0:	fba2 2303 	umull	r2, r3, r2, r3
 80034d4:	0c9b      	lsrs	r3, r3, #18
 80034d6:	3301      	adds	r3, #1
 80034d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034da:	e002      	b.n	80034e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	3b01      	subs	r3, #1
 80034e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034e2:	4b15      	ldr	r3, [pc, #84]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ee:	d102      	bne.n	80034f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f2      	bne.n	80034dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034f6:	4b10      	ldr	r3, [pc, #64]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003502:	d112      	bne.n	800352a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e011      	b.n	800352c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003508:	4b0b      	ldr	r3, [pc, #44]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800350a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800350e:	4a0a      	ldr	r2, [pc, #40]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003514:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003518:	e007      	b.n	800352a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800351a:	4b07      	ldr	r3, [pc, #28]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003522:	4a05      	ldr	r2, [pc, #20]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003524:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003528:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	40007000 	.word	0x40007000
 800353c:	20000000 	.word	0x20000000
 8003540:	431bde83 	.word	0x431bde83

08003544 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003548:	4b05      	ldr	r3, [pc, #20]	@ (8003560 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	4a04      	ldr	r2, [pc, #16]	@ (8003560 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800354e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003552:	6093      	str	r3, [r2, #8]
}
 8003554:	bf00      	nop
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40007000 	.word	0x40007000

08003564 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e2fe      	b.n	8003b74 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d075      	beq.n	800366e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003582:	4b97      	ldr	r3, [pc, #604]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 030c 	and.w	r3, r3, #12
 800358a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800358c:	4b94      	ldr	r3, [pc, #592]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	2b0c      	cmp	r3, #12
 800359a:	d102      	bne.n	80035a2 <HAL_RCC_OscConfig+0x3e>
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d002      	beq.n	80035a8 <HAL_RCC_OscConfig+0x44>
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d10b      	bne.n	80035c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a8:	4b8d      	ldr	r3, [pc, #564]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d05b      	beq.n	800366c <HAL_RCC_OscConfig+0x108>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d157      	bne.n	800366c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e2d9      	b.n	8003b74 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c8:	d106      	bne.n	80035d8 <HAL_RCC_OscConfig+0x74>
 80035ca:	4b85      	ldr	r3, [pc, #532]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a84      	ldr	r2, [pc, #528]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 80035d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	e01d      	b.n	8003614 <HAL_RCC_OscConfig+0xb0>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035e0:	d10c      	bne.n	80035fc <HAL_RCC_OscConfig+0x98>
 80035e2:	4b7f      	ldr	r3, [pc, #508]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a7e      	ldr	r2, [pc, #504]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 80035e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	4b7c      	ldr	r3, [pc, #496]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a7b      	ldr	r2, [pc, #492]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 80035f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	e00b      	b.n	8003614 <HAL_RCC_OscConfig+0xb0>
 80035fc:	4b78      	ldr	r3, [pc, #480]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a77      	ldr	r2, [pc, #476]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 8003602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	4b75      	ldr	r3, [pc, #468]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a74      	ldr	r2, [pc, #464]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 800360e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d013      	beq.n	8003644 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7fe fb00 	bl	8001c20 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003624:	f7fe fafc 	bl	8001c20 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b64      	cmp	r3, #100	@ 0x64
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e29e      	b.n	8003b74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003636:	4b6a      	ldr	r3, [pc, #424]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0xc0>
 8003642:	e014      	b.n	800366e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7fe faec 	bl	8001c20 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800364c:	f7fe fae8 	bl	8001c20 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b64      	cmp	r3, #100	@ 0x64
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e28a      	b.n	8003b74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800365e:	4b60      	ldr	r3, [pc, #384]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0xe8>
 800366a:	e000      	b.n	800366e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800366c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d075      	beq.n	8003766 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800367a:	4b59      	ldr	r3, [pc, #356]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 030c 	and.w	r3, r3, #12
 8003682:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003684:	4b56      	ldr	r3, [pc, #344]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	2b0c      	cmp	r3, #12
 8003692:	d102      	bne.n	800369a <HAL_RCC_OscConfig+0x136>
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d002      	beq.n	80036a0 <HAL_RCC_OscConfig+0x13c>
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	2b04      	cmp	r3, #4
 800369e:	d11f      	bne.n	80036e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036a0:	4b4f      	ldr	r3, [pc, #316]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_OscConfig+0x154>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e25d      	b.n	8003b74 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b8:	4b49      	ldr	r3, [pc, #292]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	061b      	lsls	r3, r3, #24
 80036c6:	4946      	ldr	r1, [pc, #280]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036cc:	4b45      	ldr	r3, [pc, #276]	@ (80037e4 <HAL_RCC_OscConfig+0x280>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fd fd57 	bl	8001184 <HAL_InitTick>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d043      	beq.n	8003764 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e249      	b.n	8003b74 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d023      	beq.n	8003730 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e8:	4b3d      	ldr	r3, [pc, #244]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a3c      	ldr	r2, [pc, #240]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 80036ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f4:	f7fe fa94 	bl	8001c20 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fc:	f7fe fa90 	bl	8001c20 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e232      	b.n	8003b74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800370e:	4b34      	ldr	r3, [pc, #208]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f0      	beq.n	80036fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371a:	4b31      	ldr	r3, [pc, #196]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	061b      	lsls	r3, r3, #24
 8003728:	492d      	ldr	r1, [pc, #180]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]
 800372e:	e01a      	b.n	8003766 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003730:	4b2b      	ldr	r3, [pc, #172]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a2a      	ldr	r2, [pc, #168]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 8003736:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800373a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7fe fa70 	bl	8001c20 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003744:	f7fe fa6c 	bl	8001c20 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e20e      	b.n	8003b74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003756:	4b22      	ldr	r3, [pc, #136]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x1e0>
 8003762:	e000      	b.n	8003766 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003764:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d041      	beq.n	80037f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d01c      	beq.n	80037b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800377a:	4b19      	ldr	r3, [pc, #100]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 800377c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003780:	4a17      	ldr	r2, [pc, #92]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378a:	f7fe fa49 	bl	8001c20 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003792:	f7fe fa45 	bl	8001c20 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e1e7      	b.n	8003b74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037a4:	4b0e      	ldr	r3, [pc, #56]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 80037a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0ef      	beq.n	8003792 <HAL_RCC_OscConfig+0x22e>
 80037b2:	e020      	b.n	80037f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037b4:	4b0a      	ldr	r3, [pc, #40]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 80037b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037ba:	4a09      	ldr	r2, [pc, #36]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 80037bc:	f023 0301 	bic.w	r3, r3, #1
 80037c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c4:	f7fe fa2c 	bl	8001c20 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037ca:	e00d      	b.n	80037e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037cc:	f7fe fa28 	bl	8001c20 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d906      	bls.n	80037e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e1ca      	b.n	8003b74 <HAL_RCC_OscConfig+0x610>
 80037de:	bf00      	nop
 80037e0:	40021000 	.word	0x40021000
 80037e4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037e8:	4b8c      	ldr	r3, [pc, #560]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 80037ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1ea      	bne.n	80037cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 80a6 	beq.w	8003950 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003804:	2300      	movs	r3, #0
 8003806:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003808:	4b84      	ldr	r3, [pc, #528]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 800380a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_RCC_OscConfig+0x2b4>
 8003814:	2301      	movs	r3, #1
 8003816:	e000      	b.n	800381a <HAL_RCC_OscConfig+0x2b6>
 8003818:	2300      	movs	r3, #0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00d      	beq.n	800383a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800381e:	4b7f      	ldr	r3, [pc, #508]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 8003820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003822:	4a7e      	ldr	r2, [pc, #504]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 8003824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003828:	6593      	str	r3, [r2, #88]	@ 0x58
 800382a:	4b7c      	ldr	r3, [pc, #496]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 800382c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003836:	2301      	movs	r3, #1
 8003838:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800383a:	4b79      	ldr	r3, [pc, #484]	@ (8003a20 <HAL_RCC_OscConfig+0x4bc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003842:	2b00      	cmp	r3, #0
 8003844:	d118      	bne.n	8003878 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003846:	4b76      	ldr	r3, [pc, #472]	@ (8003a20 <HAL_RCC_OscConfig+0x4bc>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a75      	ldr	r2, [pc, #468]	@ (8003a20 <HAL_RCC_OscConfig+0x4bc>)
 800384c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003852:	f7fe f9e5 	bl	8001c20 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800385a:	f7fe f9e1 	bl	8001c20 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e183      	b.n	8003b74 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800386c:	4b6c      	ldr	r3, [pc, #432]	@ (8003a20 <HAL_RCC_OscConfig+0x4bc>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d108      	bne.n	8003892 <HAL_RCC_OscConfig+0x32e>
 8003880:	4b66      	ldr	r3, [pc, #408]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003886:	4a65      	ldr	r2, [pc, #404]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003890:	e024      	b.n	80038dc <HAL_RCC_OscConfig+0x378>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b05      	cmp	r3, #5
 8003898:	d110      	bne.n	80038bc <HAL_RCC_OscConfig+0x358>
 800389a:	4b60      	ldr	r3, [pc, #384]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 800389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a0:	4a5e      	ldr	r2, [pc, #376]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 80038a2:	f043 0304 	orr.w	r3, r3, #4
 80038a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038aa:	4b5c      	ldr	r3, [pc, #368]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b0:	4a5a      	ldr	r2, [pc, #360]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038ba:	e00f      	b.n	80038dc <HAL_RCC_OscConfig+0x378>
 80038bc:	4b57      	ldr	r3, [pc, #348]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 80038be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c2:	4a56      	ldr	r2, [pc, #344]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 80038c4:	f023 0301 	bic.w	r3, r3, #1
 80038c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038cc:	4b53      	ldr	r3, [pc, #332]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d2:	4a52      	ldr	r2, [pc, #328]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 80038d4:	f023 0304 	bic.w	r3, r3, #4
 80038d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d016      	beq.n	8003912 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e4:	f7fe f99c 	bl	8001c20 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ea:	e00a      	b.n	8003902 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ec:	f7fe f998 	bl	8001c20 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e138      	b.n	8003b74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003902:	4b46      	ldr	r3, [pc, #280]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 8003904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0ed      	beq.n	80038ec <HAL_RCC_OscConfig+0x388>
 8003910:	e015      	b.n	800393e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003912:	f7fe f985 	bl	8001c20 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003918:	e00a      	b.n	8003930 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800391a:	f7fe f981 	bl	8001c20 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003928:	4293      	cmp	r3, r2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e121      	b.n	8003b74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003930:	4b3a      	ldr	r3, [pc, #232]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1ed      	bne.n	800391a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800393e:	7ffb      	ldrb	r3, [r7, #31]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d105      	bne.n	8003950 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003944:	4b35      	ldr	r3, [pc, #212]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 8003946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003948:	4a34      	ldr	r2, [pc, #208]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 800394a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800394e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0320 	and.w	r3, r3, #32
 8003958:	2b00      	cmp	r3, #0
 800395a:	d03c      	beq.n	80039d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d01c      	beq.n	800399e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003964:	4b2d      	ldr	r3, [pc, #180]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 8003966:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800396a:	4a2c      	ldr	r2, [pc, #176]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003974:	f7fe f954 	bl	8001c20 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800397c:	f7fe f950 	bl	8001c20 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e0f2      	b.n	8003b74 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800398e:	4b23      	ldr	r3, [pc, #140]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 8003990:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0ef      	beq.n	800397c <HAL_RCC_OscConfig+0x418>
 800399c:	e01b      	b.n	80039d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800399e:	4b1f      	ldr	r3, [pc, #124]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 80039a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039a4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 80039a6:	f023 0301 	bic.w	r3, r3, #1
 80039aa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ae:	f7fe f937 	bl	8001c20 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039b6:	f7fe f933 	bl	8001c20 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e0d5      	b.n	8003b74 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039c8:	4b14      	ldr	r3, [pc, #80]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 80039ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1ef      	bne.n	80039b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 80c9 	beq.w	8003b72 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039e0:	4b0e      	ldr	r3, [pc, #56]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 030c 	and.w	r3, r3, #12
 80039e8:	2b0c      	cmp	r3, #12
 80039ea:	f000 8083 	beq.w	8003af4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d15e      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f6:	4b09      	ldr	r3, [pc, #36]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a08      	ldr	r2, [pc, #32]	@ (8003a1c <HAL_RCC_OscConfig+0x4b8>)
 80039fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a02:	f7fe f90d 	bl	8001c20 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a08:	e00c      	b.n	8003a24 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a0a:	f7fe f909 	bl	8001c20 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d905      	bls.n	8003a24 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e0ab      	b.n	8003b74 <HAL_RCC_OscConfig+0x610>
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a24:	4b55      	ldr	r3, [pc, #340]	@ (8003b7c <HAL_RCC_OscConfig+0x618>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1ec      	bne.n	8003a0a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a30:	4b52      	ldr	r3, [pc, #328]	@ (8003b7c <HAL_RCC_OscConfig+0x618>)
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	4b52      	ldr	r3, [pc, #328]	@ (8003b80 <HAL_RCC_OscConfig+0x61c>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6a11      	ldr	r1, [r2, #32]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a40:	3a01      	subs	r2, #1
 8003a42:	0112      	lsls	r2, r2, #4
 8003a44:	4311      	orrs	r1, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003a4a:	0212      	lsls	r2, r2, #8
 8003a4c:	4311      	orrs	r1, r2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a52:	0852      	lsrs	r2, r2, #1
 8003a54:	3a01      	subs	r2, #1
 8003a56:	0552      	lsls	r2, r2, #21
 8003a58:	4311      	orrs	r1, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a5e:	0852      	lsrs	r2, r2, #1
 8003a60:	3a01      	subs	r2, #1
 8003a62:	0652      	lsls	r2, r2, #25
 8003a64:	4311      	orrs	r1, r2
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a6a:	06d2      	lsls	r2, r2, #27
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	4943      	ldr	r1, [pc, #268]	@ (8003b7c <HAL_RCC_OscConfig+0x618>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a74:	4b41      	ldr	r3, [pc, #260]	@ (8003b7c <HAL_RCC_OscConfig+0x618>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a40      	ldr	r2, [pc, #256]	@ (8003b7c <HAL_RCC_OscConfig+0x618>)
 8003a7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a7e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a80:	4b3e      	ldr	r3, [pc, #248]	@ (8003b7c <HAL_RCC_OscConfig+0x618>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4a3d      	ldr	r2, [pc, #244]	@ (8003b7c <HAL_RCC_OscConfig+0x618>)
 8003a86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8c:	f7fe f8c8 	bl	8001c20 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a94:	f7fe f8c4 	bl	8001c20 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e066      	b.n	8003b74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa6:	4b35      	ldr	r3, [pc, #212]	@ (8003b7c <HAL_RCC_OscConfig+0x618>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0x530>
 8003ab2:	e05e      	b.n	8003b72 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab4:	4b31      	ldr	r3, [pc, #196]	@ (8003b7c <HAL_RCC_OscConfig+0x618>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a30      	ldr	r2, [pc, #192]	@ (8003b7c <HAL_RCC_OscConfig+0x618>)
 8003aba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fe f8ae 	bl	8001c20 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac8:	f7fe f8aa 	bl	8001c20 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e04c      	b.n	8003b74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ada:	4b28      	ldr	r3, [pc, #160]	@ (8003b7c <HAL_RCC_OscConfig+0x618>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ae6:	4b25      	ldr	r3, [pc, #148]	@ (8003b7c <HAL_RCC_OscConfig+0x618>)
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	4924      	ldr	r1, [pc, #144]	@ (8003b7c <HAL_RCC_OscConfig+0x618>)
 8003aec:	4b25      	ldr	r3, [pc, #148]	@ (8003b84 <HAL_RCC_OscConfig+0x620>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	60cb      	str	r3, [r1, #12]
 8003af2:	e03e      	b.n	8003b72 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e039      	b.n	8003b74 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003b00:	4b1e      	ldr	r3, [pc, #120]	@ (8003b7c <HAL_RCC_OscConfig+0x618>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f003 0203 	and.w	r2, r3, #3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d12c      	bne.n	8003b6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d123      	bne.n	8003b6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b30:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d11b      	bne.n	8003b6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b40:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d113      	bne.n	8003b6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b50:	085b      	lsrs	r3, r3, #1
 8003b52:	3b01      	subs	r3, #1
 8003b54:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d109      	bne.n	8003b6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b64:	085b      	lsrs	r3, r3, #1
 8003b66:	3b01      	subs	r3, #1
 8003b68:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d001      	beq.n	8003b72 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3720      	adds	r7, #32
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	019f800c 	.word	0x019f800c
 8003b84:	feeefffc 	.word	0xfeeefffc

08003b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e11e      	b.n	8003dde <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba0:	4b91      	ldr	r3, [pc, #580]	@ (8003de8 <HAL_RCC_ClockConfig+0x260>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d910      	bls.n	8003bd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bae:	4b8e      	ldr	r3, [pc, #568]	@ (8003de8 <HAL_RCC_ClockConfig+0x260>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f023 020f 	bic.w	r2, r3, #15
 8003bb6:	498c      	ldr	r1, [pc, #560]	@ (8003de8 <HAL_RCC_ClockConfig+0x260>)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bbe:	4b8a      	ldr	r3, [pc, #552]	@ (8003de8 <HAL_RCC_ClockConfig+0x260>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e106      	b.n	8003dde <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d073      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d129      	bne.n	8003c38 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003be4:	4b81      	ldr	r3, [pc, #516]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e0f4      	b.n	8003dde <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003bf4:	f000 f9ce 	bl	8003f94 <RCC_GetSysClockFreqFromPLLSource>
 8003bf8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	4a7c      	ldr	r2, [pc, #496]	@ (8003df0 <HAL_RCC_ClockConfig+0x268>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d93f      	bls.n	8003c82 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c02:	4b7a      	ldr	r3, [pc, #488]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d033      	beq.n	8003c82 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d12f      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c22:	4b72      	ldr	r3, [pc, #456]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c2a:	4a70      	ldr	r2, [pc, #448]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003c2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c32:	2380      	movs	r3, #128	@ 0x80
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	e024      	b.n	8003c82 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d107      	bne.n	8003c50 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c40:	4b6a      	ldr	r3, [pc, #424]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d109      	bne.n	8003c60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0c6      	b.n	8003dde <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c50:	4b66      	ldr	r3, [pc, #408]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e0be      	b.n	8003dde <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003c60:	f000 f8ce 	bl	8003e00 <HAL_RCC_GetSysClockFreq>
 8003c64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	4a61      	ldr	r2, [pc, #388]	@ (8003df0 <HAL_RCC_ClockConfig+0x268>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d909      	bls.n	8003c82 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c6e:	4b5f      	ldr	r3, [pc, #380]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c76:	4a5d      	ldr	r2, [pc, #372]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c7c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003c7e:	2380      	movs	r3, #128	@ 0x80
 8003c80:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c82:	4b5a      	ldr	r3, [pc, #360]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f023 0203 	bic.w	r2, r3, #3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4957      	ldr	r1, [pc, #348]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c94:	f7fd ffc4 	bl	8001c20 <HAL_GetTick>
 8003c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9a:	e00a      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c9c:	f7fd ffc0 	bl	8001c20 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e095      	b.n	8003dde <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb2:	4b4e      	ldr	r3, [pc, #312]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 020c 	and.w	r2, r3, #12
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d1eb      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d023      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cdc:	4b43      	ldr	r3, [pc, #268]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4a42      	ldr	r2, [pc, #264]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003ce2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ce6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d007      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003cf4:	4b3d      	ldr	r3, [pc, #244]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003cfc:	4a3b      	ldr	r2, [pc, #236]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003cfe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d04:	4b39      	ldr	r3, [pc, #228]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	4936      	ldr	r1, [pc, #216]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	608b      	str	r3, [r1, #8]
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2b80      	cmp	r3, #128	@ 0x80
 8003d1c:	d105      	bne.n	8003d2a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d1e:	4b33      	ldr	r3, [pc, #204]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	4a32      	ldr	r2, [pc, #200]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003d24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d28:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003de8 <HAL_RCC_ClockConfig+0x260>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d21d      	bcs.n	8003d74 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d38:	4b2b      	ldr	r3, [pc, #172]	@ (8003de8 <HAL_RCC_ClockConfig+0x260>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f023 020f 	bic.w	r2, r3, #15
 8003d40:	4929      	ldr	r1, [pc, #164]	@ (8003de8 <HAL_RCC_ClockConfig+0x260>)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d48:	f7fd ff6a 	bl	8001c20 <HAL_GetTick>
 8003d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4e:	e00a      	b.n	8003d66 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d50:	f7fd ff66 	bl	8001c20 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e03b      	b.n	8003dde <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d66:	4b20      	ldr	r3, [pc, #128]	@ (8003de8 <HAL_RCC_ClockConfig+0x260>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d1ed      	bne.n	8003d50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d80:	4b1a      	ldr	r3, [pc, #104]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4917      	ldr	r1, [pc, #92]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d009      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d9e:	4b13      	ldr	r3, [pc, #76]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	490f      	ldr	r1, [pc, #60]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003db2:	f000 f825 	bl	8003e00 <HAL_RCC_GetSysClockFreq>
 8003db6:	4602      	mov	r2, r0
 8003db8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dec <HAL_RCC_ClockConfig+0x264>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	091b      	lsrs	r3, r3, #4
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	490c      	ldr	r1, [pc, #48]	@ (8003df4 <HAL_RCC_ClockConfig+0x26c>)
 8003dc4:	5ccb      	ldrb	r3, [r1, r3]
 8003dc6:	f003 031f 	and.w	r3, r3, #31
 8003dca:	fa22 f303 	lsr.w	r3, r2, r3
 8003dce:	4a0a      	ldr	r2, [pc, #40]	@ (8003df8 <HAL_RCC_ClockConfig+0x270>)
 8003dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8003dfc <HAL_RCC_ClockConfig+0x274>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fd f9d4 	bl	8001184 <HAL_InitTick>
 8003ddc:	4603      	mov	r3, r0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40022000 	.word	0x40022000
 8003dec:	40021000 	.word	0x40021000
 8003df0:	04c4b400 	.word	0x04c4b400
 8003df4:	0800aab8 	.word	0x0800aab8
 8003df8:	20000000 	.word	0x20000000
 8003dfc:	20000004 	.word	0x20000004

08003e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e06:	4b2c      	ldr	r3, [pc, #176]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d102      	bne.n	8003e18 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e12:	4b2a      	ldr	r3, [pc, #168]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	e047      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e18:	4b27      	ldr	r3, [pc, #156]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 030c 	and.w	r3, r3, #12
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d102      	bne.n	8003e2a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e24:	4b25      	ldr	r3, [pc, #148]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	e03e      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003e2a:	4b23      	ldr	r3, [pc, #140]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b0c      	cmp	r3, #12
 8003e34:	d136      	bne.n	8003ea4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e36:	4b20      	ldr	r3, [pc, #128]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e40:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	091b      	lsrs	r3, r3, #4
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	d10c      	bne.n	8003e6e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e54:	4a19      	ldr	r2, [pc, #100]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5c:	4a16      	ldr	r2, [pc, #88]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e5e:	68d2      	ldr	r2, [r2, #12]
 8003e60:	0a12      	lsrs	r2, r2, #8
 8003e62:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e66:	fb02 f303 	mul.w	r3, r2, r3
 8003e6a:	617b      	str	r3, [r7, #20]
      break;
 8003e6c:	e00c      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e6e:	4a13      	ldr	r2, [pc, #76]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e76:	4a10      	ldr	r2, [pc, #64]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e78:	68d2      	ldr	r2, [r2, #12]
 8003e7a:	0a12      	lsrs	r2, r2, #8
 8003e7c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e80:	fb02 f303 	mul.w	r3, r2, r3
 8003e84:	617b      	str	r3, [r7, #20]
      break;
 8003e86:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e88:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	0e5b      	lsrs	r3, r3, #25
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	3301      	adds	r3, #1
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	e001      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ea8:	693b      	ldr	r3, [r7, #16]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	371c      	adds	r7, #28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	00f42400 	.word	0x00f42400

08003ec0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec4:	4b03      	ldr	r3, [pc, #12]	@ (8003ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20000000 	.word	0x20000000

08003ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003edc:	f7ff fff0 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4b06      	ldr	r3, [pc, #24]	@ (8003efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	0a1b      	lsrs	r3, r3, #8
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	4904      	ldr	r1, [pc, #16]	@ (8003f00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40021000 	.word	0x40021000
 8003f00:	0800aac8 	.word	0x0800aac8

08003f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f08:	f7ff ffda 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b06      	ldr	r3, [pc, #24]	@ (8003f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	0adb      	lsrs	r3, r3, #11
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4904      	ldr	r1, [pc, #16]	@ (8003f2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	0800aac8 	.word	0x0800aac8

08003f30 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	220f      	movs	r2, #15
 8003f3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003f40:	4b12      	ldr	r3, [pc, #72]	@ (8003f8c <HAL_RCC_GetClockConfig+0x5c>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 0203 	and.w	r2, r3, #3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f8c <HAL_RCC_GetClockConfig+0x5c>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003f58:	4b0c      	ldr	r3, [pc, #48]	@ (8003f8c <HAL_RCC_GetClockConfig+0x5c>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003f64:	4b09      	ldr	r3, [pc, #36]	@ (8003f8c <HAL_RCC_GetClockConfig+0x5c>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	08db      	lsrs	r3, r3, #3
 8003f6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003f72:	4b07      	ldr	r3, [pc, #28]	@ (8003f90 <HAL_RCC_GetClockConfig+0x60>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 020f 	and.w	r2, r3, #15
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	601a      	str	r2, [r3, #0]
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40022000 	.word	0x40022000

08003f94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8004014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	091b      	lsrs	r3, r3, #4
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	3301      	adds	r3, #1
 8003fb0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d10c      	bne.n	8003fd2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fb8:	4a17      	ldr	r2, [pc, #92]	@ (8004018 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc0:	4a14      	ldr	r2, [pc, #80]	@ (8004014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fc2:	68d2      	ldr	r2, [r2, #12]
 8003fc4:	0a12      	lsrs	r2, r2, #8
 8003fc6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003fca:	fb02 f303 	mul.w	r3, r2, r3
 8003fce:	617b      	str	r3, [r7, #20]
    break;
 8003fd0:	e00c      	b.n	8003fec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fd2:	4a11      	ldr	r2, [pc, #68]	@ (8004018 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fda:	4a0e      	ldr	r2, [pc, #56]	@ (8004014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fdc:	68d2      	ldr	r2, [r2, #12]
 8003fde:	0a12      	lsrs	r2, r2, #8
 8003fe0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003fe4:	fb02 f303 	mul.w	r3, r2, r3
 8003fe8:	617b      	str	r3, [r7, #20]
    break;
 8003fea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fec:	4b09      	ldr	r3, [pc, #36]	@ (8004014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	0e5b      	lsrs	r3, r3, #25
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004006:	687b      	ldr	r3, [r7, #4]
}
 8004008:	4618      	mov	r0, r3
 800400a:	371c      	adds	r7, #28
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	40021000 	.word	0x40021000
 8004018:	00f42400 	.word	0x00f42400

0800401c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004024:	2300      	movs	r3, #0
 8004026:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004028:	2300      	movs	r3, #0
 800402a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 8098 	beq.w	800416a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800403a:	2300      	movs	r3, #0
 800403c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800403e:	4b43      	ldr	r3, [pc, #268]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10d      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800404a:	4b40      	ldr	r3, [pc, #256]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800404c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404e:	4a3f      	ldr	r2, [pc, #252]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004054:	6593      	str	r3, [r2, #88]	@ 0x58
 8004056:	4b3d      	ldr	r3, [pc, #244]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004062:	2301      	movs	r3, #1
 8004064:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004066:	4b3a      	ldr	r3, [pc, #232]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a39      	ldr	r2, [pc, #228]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800406c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004070:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004072:	f7fd fdd5 	bl	8001c20 <HAL_GetTick>
 8004076:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004078:	e009      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407a:	f7fd fdd1 	bl	8001c20 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d902      	bls.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	74fb      	strb	r3, [r7, #19]
        break;
 800408c:	e005      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800408e:	4b30      	ldr	r3, [pc, #192]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0ef      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800409a:	7cfb      	ldrb	r3, [r7, #19]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d159      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040a0:	4b2a      	ldr	r3, [pc, #168]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d01e      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d019      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040bc:	4b23      	ldr	r3, [pc, #140]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040c8:	4b20      	ldr	r3, [pc, #128]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ce:	4a1f      	ldr	r2, [pc, #124]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040d8:	4b1c      	ldr	r3, [pc, #112]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040de:	4a1b      	ldr	r2, [pc, #108]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040e8:	4a18      	ldr	r2, [pc, #96]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d016      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fa:	f7fd fd91 	bl	8001c20 <HAL_GetTick>
 80040fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004100:	e00b      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004102:	f7fd fd8d 	bl	8001c20 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004110:	4293      	cmp	r3, r2
 8004112:	d902      	bls.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	74fb      	strb	r3, [r7, #19]
            break;
 8004118:	e006      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800411a:	4b0c      	ldr	r3, [pc, #48]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800411c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0ec      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004128:	7cfb      	ldrb	r3, [r7, #19]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10b      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800412e:	4b07      	ldr	r3, [pc, #28]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004134:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413c:	4903      	ldr	r1, [pc, #12]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004144:	e008      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004146:	7cfb      	ldrb	r3, [r7, #19]
 8004148:	74bb      	strb	r3, [r7, #18]
 800414a:	e005      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800414c:	40021000 	.word	0x40021000
 8004150:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004154:	7cfb      	ldrb	r3, [r7, #19]
 8004156:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004158:	7c7b      	ldrb	r3, [r7, #17]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d105      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415e:	4ba6      	ldr	r3, [pc, #664]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004162:	4aa5      	ldr	r2, [pc, #660]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004164:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004168:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004176:	4ba0      	ldr	r3, [pc, #640]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417c:	f023 0203 	bic.w	r2, r3, #3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	499c      	ldr	r1, [pc, #624]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004198:	4b97      	ldr	r3, [pc, #604]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419e:	f023 020c 	bic.w	r2, r3, #12
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	4994      	ldr	r1, [pc, #592]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041ba:	4b8f      	ldr	r3, [pc, #572]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	498b      	ldr	r1, [pc, #556]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041dc:	4b86      	ldr	r3, [pc, #536]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	4983      	ldr	r1, [pc, #524]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041fe:	4b7e      	ldr	r3, [pc, #504]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004204:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	497a      	ldr	r1, [pc, #488]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00a      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004220:	4b75      	ldr	r3, [pc, #468]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004226:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	4972      	ldr	r1, [pc, #456]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004242:	4b6d      	ldr	r3, [pc, #436]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004248:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	4969      	ldr	r1, [pc, #420]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004252:	4313      	orrs	r3, r2
 8004254:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00a      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004264:	4b64      	ldr	r3, [pc, #400]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800426a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	4961      	ldr	r1, [pc, #388]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00a      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004286:	4b5c      	ldr	r3, [pc, #368]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800428c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004294:	4958      	ldr	r1, [pc, #352]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d015      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042a8:	4b53      	ldr	r3, [pc, #332]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b6:	4950      	ldr	r1, [pc, #320]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042c6:	d105      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042c8:	4b4b      	ldr	r3, [pc, #300]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4a4a      	ldr	r2, [pc, #296]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042d2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d015      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042e0:	4b45      	ldr	r3, [pc, #276]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ee:	4942      	ldr	r1, [pc, #264]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042fe:	d105      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004300:	4b3d      	ldr	r3, [pc, #244]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	4a3c      	ldr	r2, [pc, #240]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800430a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d015      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004318:	4b37      	ldr	r3, [pc, #220]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004326:	4934      	ldr	r1, [pc, #208]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004332:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004336:	d105      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004338:	4b2f      	ldr	r3, [pc, #188]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	4a2e      	ldr	r2, [pc, #184]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800433e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004342:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d015      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004350:	4b29      	ldr	r3, [pc, #164]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004356:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800435e:	4926      	ldr	r1, [pc, #152]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800436a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800436e:	d105      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004370:	4b21      	ldr	r3, [pc, #132]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4a20      	ldr	r2, [pc, #128]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004376:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800437a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d015      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004388:	4b1b      	ldr	r3, [pc, #108]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004396:	4918      	ldr	r1, [pc, #96]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043a6:	d105      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043a8:	4b13      	ldr	r3, [pc, #76]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	4a12      	ldr	r2, [pc, #72]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d015      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80043c0:	4b0d      	ldr	r3, [pc, #52]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ce:	490a      	ldr	r1, [pc, #40]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043de:	d105      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043e0:	4b05      	ldr	r3, [pc, #20]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4a04      	ldr	r2, [pc, #16]	@ (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80043ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40021000 	.word	0x40021000

080043fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e049      	b.n	80044a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7fd f96e 	bl	8001704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3304      	adds	r3, #4
 8004438:	4619      	mov	r1, r3
 800443a:	4610      	mov	r0, r2
 800443c:	f000 ff52 	bl	80052e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d001      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e04a      	b.n	800455a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0201 	orr.w	r2, r2, #1
 80044da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a21      	ldr	r2, [pc, #132]	@ (8004568 <HAL_TIM_Base_Start_IT+0xbc>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d018      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x6c>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ee:	d013      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x6c>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1d      	ldr	r2, [pc, #116]	@ (800456c <HAL_TIM_Base_Start_IT+0xc0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00e      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x6c>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004570 <HAL_TIM_Base_Start_IT+0xc4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d009      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x6c>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1a      	ldr	r2, [pc, #104]	@ (8004574 <HAL_TIM_Base_Start_IT+0xc8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d004      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x6c>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a19      	ldr	r2, [pc, #100]	@ (8004578 <HAL_TIM_Base_Start_IT+0xcc>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d115      	bne.n	8004544 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	4b17      	ldr	r3, [pc, #92]	@ (800457c <HAL_TIM_Base_Start_IT+0xd0>)
 8004520:	4013      	ands	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b06      	cmp	r3, #6
 8004528:	d015      	beq.n	8004556 <HAL_TIM_Base_Start_IT+0xaa>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004530:	d011      	beq.n	8004556 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0201 	orr.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004542:	e008      	b.n	8004556 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	e000      	b.n	8004558 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004556:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40012c00 	.word	0x40012c00
 800456c:	40000400 	.word	0x40000400
 8004570:	40000800 	.word	0x40000800
 8004574:	40013400 	.word	0x40013400
 8004578:	40014000 	.word	0x40014000
 800457c:	00010007 	.word	0x00010007

08004580 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e049      	b.n	8004626 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f841 	bl	800462e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f000 fe90 	bl	80052e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
	...

08004644 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d109      	bne.n	8004668 <HAL_TIM_PWM_Start+0x24>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b01      	cmp	r3, #1
 800465e:	bf14      	ite	ne
 8004660:	2301      	movne	r3, #1
 8004662:	2300      	moveq	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	e03c      	b.n	80046e2 <HAL_TIM_PWM_Start+0x9e>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2b04      	cmp	r3, #4
 800466c:	d109      	bne.n	8004682 <HAL_TIM_PWM_Start+0x3e>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b01      	cmp	r3, #1
 8004678:	bf14      	ite	ne
 800467a:	2301      	movne	r3, #1
 800467c:	2300      	moveq	r3, #0
 800467e:	b2db      	uxtb	r3, r3
 8004680:	e02f      	b.n	80046e2 <HAL_TIM_PWM_Start+0x9e>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b08      	cmp	r3, #8
 8004686:	d109      	bne.n	800469c <HAL_TIM_PWM_Start+0x58>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b01      	cmp	r3, #1
 8004692:	bf14      	ite	ne
 8004694:	2301      	movne	r3, #1
 8004696:	2300      	moveq	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	e022      	b.n	80046e2 <HAL_TIM_PWM_Start+0x9e>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2b0c      	cmp	r3, #12
 80046a0:	d109      	bne.n	80046b6 <HAL_TIM_PWM_Start+0x72>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	bf14      	ite	ne
 80046ae:	2301      	movne	r3, #1
 80046b0:	2300      	moveq	r3, #0
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	e015      	b.n	80046e2 <HAL_TIM_PWM_Start+0x9e>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b10      	cmp	r3, #16
 80046ba:	d109      	bne.n	80046d0 <HAL_TIM_PWM_Start+0x8c>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	bf14      	ite	ne
 80046c8:	2301      	movne	r3, #1
 80046ca:	2300      	moveq	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	e008      	b.n	80046e2 <HAL_TIM_PWM_Start+0x9e>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b01      	cmp	r3, #1
 80046da:	bf14      	ite	ne
 80046dc:	2301      	movne	r3, #1
 80046de:	2300      	moveq	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e097      	b.n	800481a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d104      	bne.n	80046fa <HAL_TIM_PWM_Start+0xb6>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046f8:	e023      	b.n	8004742 <HAL_TIM_PWM_Start+0xfe>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d104      	bne.n	800470a <HAL_TIM_PWM_Start+0xc6>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004708:	e01b      	b.n	8004742 <HAL_TIM_PWM_Start+0xfe>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b08      	cmp	r3, #8
 800470e:	d104      	bne.n	800471a <HAL_TIM_PWM_Start+0xd6>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004718:	e013      	b.n	8004742 <HAL_TIM_PWM_Start+0xfe>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b0c      	cmp	r3, #12
 800471e:	d104      	bne.n	800472a <HAL_TIM_PWM_Start+0xe6>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004728:	e00b      	b.n	8004742 <HAL_TIM_PWM_Start+0xfe>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b10      	cmp	r3, #16
 800472e:	d104      	bne.n	800473a <HAL_TIM_PWM_Start+0xf6>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004738:	e003      	b.n	8004742 <HAL_TIM_PWM_Start+0xfe>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2202      	movs	r2, #2
 800473e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2201      	movs	r2, #1
 8004748:	6839      	ldr	r1, [r7, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f001 f9f8 	bl	8005b40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a33      	ldr	r2, [pc, #204]	@ (8004824 <HAL_TIM_PWM_Start+0x1e0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d013      	beq.n	8004782 <HAL_TIM_PWM_Start+0x13e>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a32      	ldr	r2, [pc, #200]	@ (8004828 <HAL_TIM_PWM_Start+0x1e4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d00e      	beq.n	8004782 <HAL_TIM_PWM_Start+0x13e>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a30      	ldr	r2, [pc, #192]	@ (800482c <HAL_TIM_PWM_Start+0x1e8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d009      	beq.n	8004782 <HAL_TIM_PWM_Start+0x13e>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a2f      	ldr	r2, [pc, #188]	@ (8004830 <HAL_TIM_PWM_Start+0x1ec>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d004      	beq.n	8004782 <HAL_TIM_PWM_Start+0x13e>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a2d      	ldr	r2, [pc, #180]	@ (8004834 <HAL_TIM_PWM_Start+0x1f0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d101      	bne.n	8004786 <HAL_TIM_PWM_Start+0x142>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <HAL_TIM_PWM_Start+0x144>
 8004786:	2300      	movs	r3, #0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800479a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a20      	ldr	r2, [pc, #128]	@ (8004824 <HAL_TIM_PWM_Start+0x1e0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d018      	beq.n	80047d8 <HAL_TIM_PWM_Start+0x194>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047ae:	d013      	beq.n	80047d8 <HAL_TIM_PWM_Start+0x194>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a20      	ldr	r2, [pc, #128]	@ (8004838 <HAL_TIM_PWM_Start+0x1f4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00e      	beq.n	80047d8 <HAL_TIM_PWM_Start+0x194>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1f      	ldr	r2, [pc, #124]	@ (800483c <HAL_TIM_PWM_Start+0x1f8>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d009      	beq.n	80047d8 <HAL_TIM_PWM_Start+0x194>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a17      	ldr	r2, [pc, #92]	@ (8004828 <HAL_TIM_PWM_Start+0x1e4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d004      	beq.n	80047d8 <HAL_TIM_PWM_Start+0x194>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a16      	ldr	r2, [pc, #88]	@ (800482c <HAL_TIM_PWM_Start+0x1e8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d115      	bne.n	8004804 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	4b18      	ldr	r3, [pc, #96]	@ (8004840 <HAL_TIM_PWM_Start+0x1fc>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b06      	cmp	r3, #6
 80047e8:	d015      	beq.n	8004816 <HAL_TIM_PWM_Start+0x1d2>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047f0:	d011      	beq.n	8004816 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f042 0201 	orr.w	r2, r2, #1
 8004800:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004802:	e008      	b.n	8004816 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	e000      	b.n	8004818 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004816:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40012c00 	.word	0x40012c00
 8004828:	40013400 	.word	0x40013400
 800482c:	40014000 	.word	0x40014000
 8004830:	40014400 	.word	0x40014400
 8004834:	40014800 	.word	0x40014800
 8004838:	40000400 	.word	0x40000400
 800483c:	40000800 	.word	0x40000800
 8004840:	00010007 	.word	0x00010007

08004844 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2200      	movs	r2, #0
 8004854:	6839      	ldr	r1, [r7, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f001 f972 	bl	8005b40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a3e      	ldr	r2, [pc, #248]	@ (800495c <HAL_TIM_PWM_Stop+0x118>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d013      	beq.n	800488e <HAL_TIM_PWM_Stop+0x4a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a3d      	ldr	r2, [pc, #244]	@ (8004960 <HAL_TIM_PWM_Stop+0x11c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00e      	beq.n	800488e <HAL_TIM_PWM_Stop+0x4a>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a3b      	ldr	r2, [pc, #236]	@ (8004964 <HAL_TIM_PWM_Stop+0x120>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d009      	beq.n	800488e <HAL_TIM_PWM_Stop+0x4a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a3a      	ldr	r2, [pc, #232]	@ (8004968 <HAL_TIM_PWM_Stop+0x124>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d004      	beq.n	800488e <HAL_TIM_PWM_Stop+0x4a>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a38      	ldr	r2, [pc, #224]	@ (800496c <HAL_TIM_PWM_Stop+0x128>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d101      	bne.n	8004892 <HAL_TIM_PWM_Stop+0x4e>
 800488e:	2301      	movs	r3, #1
 8004890:	e000      	b.n	8004894 <HAL_TIM_PWM_Stop+0x50>
 8004892:	2300      	movs	r3, #0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d017      	beq.n	80048c8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6a1a      	ldr	r2, [r3, #32]
 800489e:	f241 1311 	movw	r3, #4369	@ 0x1111
 80048a2:	4013      	ands	r3, r2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10f      	bne.n	80048c8 <HAL_TIM_PWM_Stop+0x84>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6a1a      	ldr	r2, [r3, #32]
 80048ae:	f244 4344 	movw	r3, #17476	@ 0x4444
 80048b2:	4013      	ands	r3, r2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d107      	bne.n	80048c8 <HAL_TIM_PWM_Stop+0x84>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048c6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6a1a      	ldr	r2, [r3, #32]
 80048ce:	f241 1311 	movw	r3, #4369	@ 0x1111
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10f      	bne.n	80048f8 <HAL_TIM_PWM_Stop+0xb4>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6a1a      	ldr	r2, [r3, #32]
 80048de:	f244 4344 	movw	r3, #17476	@ 0x4444
 80048e2:	4013      	ands	r3, r2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d107      	bne.n	80048f8 <HAL_TIM_PWM_Stop+0xb4>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d104      	bne.n	8004908 <HAL_TIM_PWM_Stop+0xc4>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004906:	e023      	b.n	8004950 <HAL_TIM_PWM_Stop+0x10c>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b04      	cmp	r3, #4
 800490c:	d104      	bne.n	8004918 <HAL_TIM_PWM_Stop+0xd4>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004916:	e01b      	b.n	8004950 <HAL_TIM_PWM_Stop+0x10c>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	2b08      	cmp	r3, #8
 800491c:	d104      	bne.n	8004928 <HAL_TIM_PWM_Stop+0xe4>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004926:	e013      	b.n	8004950 <HAL_TIM_PWM_Stop+0x10c>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2b0c      	cmp	r3, #12
 800492c:	d104      	bne.n	8004938 <HAL_TIM_PWM_Stop+0xf4>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004936:	e00b      	b.n	8004950 <HAL_TIM_PWM_Stop+0x10c>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2b10      	cmp	r3, #16
 800493c:	d104      	bne.n	8004948 <HAL_TIM_PWM_Stop+0x104>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004946:	e003      	b.n	8004950 <HAL_TIM_PWM_Stop+0x10c>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40012c00 	.word	0x40012c00
 8004960:	40013400 	.word	0x40013400
 8004964:	40014000 	.word	0x40014000
 8004968:	40014400 	.word	0x40014400
 800496c:	40014800 	.word	0x40014800

08004970 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e097      	b.n	8004ab4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d106      	bne.n	800499e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7fc fed3 	bl	8001744 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2202      	movs	r2, #2
 80049a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6812      	ldr	r2, [r2, #0]
 80049b0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80049b4:	f023 0307 	bic.w	r3, r3, #7
 80049b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3304      	adds	r3, #4
 80049c2:	4619      	mov	r1, r3
 80049c4:	4610      	mov	r0, r2
 80049c6:	f000 fc8d 	bl	80052e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049f2:	f023 0303 	bic.w	r3, r3, #3
 80049f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	021b      	lsls	r3, r3, #8
 8004a02:	4313      	orrs	r3, r2
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004a10:	f023 030c 	bic.w	r3, r3, #12
 8004a14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	021b      	lsls	r3, r3, #8
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	011a      	lsls	r2, r3, #4
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	031b      	lsls	r3, r3, #12
 8004a40:	4313      	orrs	r3, r2
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004a4e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004a56:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	4313      	orrs	r3, r2
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004acc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ad4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004adc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ae4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d110      	bne.n	8004b0e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d102      	bne.n	8004af8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004af2:	7b7b      	ldrb	r3, [r7, #13]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d001      	beq.n	8004afc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e069      	b.n	8004bd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b0c:	e031      	b.n	8004b72 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d110      	bne.n	8004b36 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b14:	7bbb      	ldrb	r3, [r7, #14]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d102      	bne.n	8004b20 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b1a:	7b3b      	ldrb	r3, [r7, #12]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d001      	beq.n	8004b24 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e055      	b.n	8004bd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b34:	e01d      	b.n	8004b72 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d108      	bne.n	8004b4e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b3c:	7bbb      	ldrb	r3, [r7, #14]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d105      	bne.n	8004b4e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b42:	7b7b      	ldrb	r3, [r7, #13]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d102      	bne.n	8004b4e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b48:	7b3b      	ldrb	r3, [r7, #12]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d001      	beq.n	8004b52 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e03e      	b.n	8004bd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2202      	movs	r2, #2
 8004b56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2202      	movs	r2, #2
 8004b66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <HAL_TIM_Encoder_Start+0xc4>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d008      	beq.n	8004b90 <HAL_TIM_Encoder_Start+0xd4>
 8004b7e:	e00f      	b.n	8004ba0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2201      	movs	r2, #1
 8004b86:	2100      	movs	r1, #0
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 ffd9 	bl	8005b40 <TIM_CCxChannelCmd>
      break;
 8004b8e:	e016      	b.n	8004bbe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2201      	movs	r2, #1
 8004b96:	2104      	movs	r1, #4
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 ffd1 	bl	8005b40 <TIM_CCxChannelCmd>
      break;
 8004b9e:	e00e      	b.n	8004bbe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 ffc9 	bl	8005b40 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	2104      	movs	r1, #4
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 ffc2 	bl	8005b40 <TIM_CCxChannelCmd>
      break;
 8004bbc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0201 	orr.w	r2, r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d020      	beq.n	8004c3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d01b      	beq.n	8004c3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0202 	mvn.w	r2, #2
 8004c0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fb40 	bl	80052a8 <HAL_TIM_IC_CaptureCallback>
 8004c28:	e005      	b.n	8004c36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fb32 	bl	8005294 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fb43 	bl	80052bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d020      	beq.n	8004c88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d01b      	beq.n	8004c88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0204 	mvn.w	r2, #4
 8004c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fb1a 	bl	80052a8 <HAL_TIM_IC_CaptureCallback>
 8004c74:	e005      	b.n	8004c82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fb0c 	bl	8005294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fb1d 	bl	80052bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d020      	beq.n	8004cd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f003 0308 	and.w	r3, r3, #8
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d01b      	beq.n	8004cd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f06f 0208 	mvn.w	r2, #8
 8004ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2204      	movs	r2, #4
 8004caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 faf4 	bl	80052a8 <HAL_TIM_IC_CaptureCallback>
 8004cc0:	e005      	b.n	8004cce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 fae6 	bl	8005294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 faf7 	bl	80052bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f003 0310 	and.w	r3, r3, #16
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d020      	beq.n	8004d20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f003 0310 	and.w	r3, r3, #16
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01b      	beq.n	8004d20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0210 	mvn.w	r2, #16
 8004cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2208      	movs	r2, #8
 8004cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 face 	bl	80052a8 <HAL_TIM_IC_CaptureCallback>
 8004d0c:	e005      	b.n	8004d1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fac0 	bl	8005294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 fad1 	bl	80052bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00c      	beq.n	8004d44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d007      	beq.n	8004d44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0201 	mvn.w	r2, #1
 8004d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fc f9de 	bl	8001100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d104      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00c      	beq.n	8004d72 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d007      	beq.n	8004d72 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f001 f937 	bl	8005fe0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00c      	beq.n	8004d96 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d007      	beq.n	8004d96 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f001 f92f 	bl	8005ff4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00c      	beq.n	8004dba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d007      	beq.n	8004dba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 fa8b 	bl	80052d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f003 0320 	and.w	r3, r3, #32
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00c      	beq.n	8004dde <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d007      	beq.n	8004dde <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f06f 0220 	mvn.w	r2, #32
 8004dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f001 f8f7 	bl	8005fcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00c      	beq.n	8004e02 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d007      	beq.n	8004e02 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f001 f903 	bl	8006008 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00c      	beq.n	8004e26 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d007      	beq.n	8004e26 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f001 f8fb 	bl	800601c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00c      	beq.n	8004e4a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d007      	beq.n	8004e4a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f001 f8f3 	bl	8006030 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00c      	beq.n	8004e6e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d007      	beq.n	8004e6e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f001 f8eb 	bl	8006044 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e6e:	bf00      	nop
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d101      	bne.n	8004e96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e92:	2302      	movs	r3, #2
 8004e94:	e0ff      	b.n	8005096 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b14      	cmp	r3, #20
 8004ea2:	f200 80f0 	bhi.w	8005086 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8004eac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004f01 	.word	0x08004f01
 8004eb0:	08005087 	.word	0x08005087
 8004eb4:	08005087 	.word	0x08005087
 8004eb8:	08005087 	.word	0x08005087
 8004ebc:	08004f41 	.word	0x08004f41
 8004ec0:	08005087 	.word	0x08005087
 8004ec4:	08005087 	.word	0x08005087
 8004ec8:	08005087 	.word	0x08005087
 8004ecc:	08004f83 	.word	0x08004f83
 8004ed0:	08005087 	.word	0x08005087
 8004ed4:	08005087 	.word	0x08005087
 8004ed8:	08005087 	.word	0x08005087
 8004edc:	08004fc3 	.word	0x08004fc3
 8004ee0:	08005087 	.word	0x08005087
 8004ee4:	08005087 	.word	0x08005087
 8004ee8:	08005087 	.word	0x08005087
 8004eec:	08005005 	.word	0x08005005
 8004ef0:	08005087 	.word	0x08005087
 8004ef4:	08005087 	.word	0x08005087
 8004ef8:	08005087 	.word	0x08005087
 8004efc:	08005045 	.word	0x08005045
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fa88 	bl	800541c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0208 	orr.w	r2, r2, #8
 8004f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0204 	bic.w	r2, r2, #4
 8004f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6999      	ldr	r1, [r3, #24]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	691a      	ldr	r2, [r3, #16]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	619a      	str	r2, [r3, #24]
      break;
 8004f3e:	e0a5      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 faf8 	bl	800553c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699a      	ldr	r2, [r3, #24]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699a      	ldr	r2, [r3, #24]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6999      	ldr	r1, [r3, #24]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	021a      	lsls	r2, r3, #8
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	619a      	str	r2, [r3, #24]
      break;
 8004f80:	e084      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 fb61 	bl	8005650 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69da      	ldr	r2, [r3, #28]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0208 	orr.w	r2, r2, #8
 8004f9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69da      	ldr	r2, [r3, #28]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0204 	bic.w	r2, r2, #4
 8004fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69d9      	ldr	r1, [r3, #28]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	691a      	ldr	r2, [r3, #16]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	61da      	str	r2, [r3, #28]
      break;
 8004fc0:	e064      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68b9      	ldr	r1, [r7, #8]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fbc9 	bl	8005760 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69da      	ldr	r2, [r3, #28]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69da      	ldr	r2, [r3, #28]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69d9      	ldr	r1, [r3, #28]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	021a      	lsls	r2, r3, #8
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	61da      	str	r2, [r3, #28]
      break;
 8005002:	e043      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fc32 	bl	8005874 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0208 	orr.w	r2, r2, #8
 800501e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0204 	bic.w	r2, r2, #4
 800502e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005042:	e023      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fc76 	bl	800593c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800505e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800506e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	021a      	lsls	r2, r3, #8
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005084:	e002      	b.n	800508c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	75fb      	strb	r3, [r7, #23]
      break;
 800508a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005094:	7dfb      	ldrb	r3, [r7, #23]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop

080050a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <HAL_TIM_ConfigClockSource+0x1c>
 80050b8:	2302      	movs	r3, #2
 80050ba:	e0de      	b.n	800527a <HAL_TIM_ConfigClockSource+0x1da>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80050da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80050de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a63      	ldr	r2, [pc, #396]	@ (8005284 <HAL_TIM_ConfigClockSource+0x1e4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	f000 80a9 	beq.w	800524e <HAL_TIM_ConfigClockSource+0x1ae>
 80050fc:	4a61      	ldr	r2, [pc, #388]	@ (8005284 <HAL_TIM_ConfigClockSource+0x1e4>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	f200 80ae 	bhi.w	8005260 <HAL_TIM_ConfigClockSource+0x1c0>
 8005104:	4a60      	ldr	r2, [pc, #384]	@ (8005288 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	f000 80a1 	beq.w	800524e <HAL_TIM_ConfigClockSource+0x1ae>
 800510c:	4a5e      	ldr	r2, [pc, #376]	@ (8005288 <HAL_TIM_ConfigClockSource+0x1e8>)
 800510e:	4293      	cmp	r3, r2
 8005110:	f200 80a6 	bhi.w	8005260 <HAL_TIM_ConfigClockSource+0x1c0>
 8005114:	4a5d      	ldr	r2, [pc, #372]	@ (800528c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005116:	4293      	cmp	r3, r2
 8005118:	f000 8099 	beq.w	800524e <HAL_TIM_ConfigClockSource+0x1ae>
 800511c:	4a5b      	ldr	r2, [pc, #364]	@ (800528c <HAL_TIM_ConfigClockSource+0x1ec>)
 800511e:	4293      	cmp	r3, r2
 8005120:	f200 809e 	bhi.w	8005260 <HAL_TIM_ConfigClockSource+0x1c0>
 8005124:	4a5a      	ldr	r2, [pc, #360]	@ (8005290 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	f000 8091 	beq.w	800524e <HAL_TIM_ConfigClockSource+0x1ae>
 800512c:	4a58      	ldr	r2, [pc, #352]	@ (8005290 <HAL_TIM_ConfigClockSource+0x1f0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	f200 8096 	bhi.w	8005260 <HAL_TIM_ConfigClockSource+0x1c0>
 8005134:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005138:	f000 8089 	beq.w	800524e <HAL_TIM_ConfigClockSource+0x1ae>
 800513c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005140:	f200 808e 	bhi.w	8005260 <HAL_TIM_ConfigClockSource+0x1c0>
 8005144:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005148:	d03e      	beq.n	80051c8 <HAL_TIM_ConfigClockSource+0x128>
 800514a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800514e:	f200 8087 	bhi.w	8005260 <HAL_TIM_ConfigClockSource+0x1c0>
 8005152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005156:	f000 8086 	beq.w	8005266 <HAL_TIM_ConfigClockSource+0x1c6>
 800515a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800515e:	d87f      	bhi.n	8005260 <HAL_TIM_ConfigClockSource+0x1c0>
 8005160:	2b70      	cmp	r3, #112	@ 0x70
 8005162:	d01a      	beq.n	800519a <HAL_TIM_ConfigClockSource+0xfa>
 8005164:	2b70      	cmp	r3, #112	@ 0x70
 8005166:	d87b      	bhi.n	8005260 <HAL_TIM_ConfigClockSource+0x1c0>
 8005168:	2b60      	cmp	r3, #96	@ 0x60
 800516a:	d050      	beq.n	800520e <HAL_TIM_ConfigClockSource+0x16e>
 800516c:	2b60      	cmp	r3, #96	@ 0x60
 800516e:	d877      	bhi.n	8005260 <HAL_TIM_ConfigClockSource+0x1c0>
 8005170:	2b50      	cmp	r3, #80	@ 0x50
 8005172:	d03c      	beq.n	80051ee <HAL_TIM_ConfigClockSource+0x14e>
 8005174:	2b50      	cmp	r3, #80	@ 0x50
 8005176:	d873      	bhi.n	8005260 <HAL_TIM_ConfigClockSource+0x1c0>
 8005178:	2b40      	cmp	r3, #64	@ 0x40
 800517a:	d058      	beq.n	800522e <HAL_TIM_ConfigClockSource+0x18e>
 800517c:	2b40      	cmp	r3, #64	@ 0x40
 800517e:	d86f      	bhi.n	8005260 <HAL_TIM_ConfigClockSource+0x1c0>
 8005180:	2b30      	cmp	r3, #48	@ 0x30
 8005182:	d064      	beq.n	800524e <HAL_TIM_ConfigClockSource+0x1ae>
 8005184:	2b30      	cmp	r3, #48	@ 0x30
 8005186:	d86b      	bhi.n	8005260 <HAL_TIM_ConfigClockSource+0x1c0>
 8005188:	2b20      	cmp	r3, #32
 800518a:	d060      	beq.n	800524e <HAL_TIM_ConfigClockSource+0x1ae>
 800518c:	2b20      	cmp	r3, #32
 800518e:	d867      	bhi.n	8005260 <HAL_TIM_ConfigClockSource+0x1c0>
 8005190:	2b00      	cmp	r3, #0
 8005192:	d05c      	beq.n	800524e <HAL_TIM_ConfigClockSource+0x1ae>
 8005194:	2b10      	cmp	r3, #16
 8005196:	d05a      	beq.n	800524e <HAL_TIM_ConfigClockSource+0x1ae>
 8005198:	e062      	b.n	8005260 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051aa:	f000 fca9 	bl	8005b00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	609a      	str	r2, [r3, #8]
      break;
 80051c6:	e04f      	b.n	8005268 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051d8:	f000 fc92 	bl	8005b00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051ea:	609a      	str	r2, [r3, #8]
      break;
 80051ec:	e03c      	b.n	8005268 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051fa:	461a      	mov	r2, r3
 80051fc:	f000 fc04 	bl	8005a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2150      	movs	r1, #80	@ 0x50
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fc5d 	bl	8005ac6 <TIM_ITRx_SetConfig>
      break;
 800520c:	e02c      	b.n	8005268 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800521a:	461a      	mov	r2, r3
 800521c:	f000 fc23 	bl	8005a66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2160      	movs	r1, #96	@ 0x60
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fc4d 	bl	8005ac6 <TIM_ITRx_SetConfig>
      break;
 800522c:	e01c      	b.n	8005268 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800523a:	461a      	mov	r2, r3
 800523c:	f000 fbe4 	bl	8005a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2140      	movs	r1, #64	@ 0x40
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fc3d 	bl	8005ac6 <TIM_ITRx_SetConfig>
      break;
 800524c:	e00c      	b.n	8005268 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4619      	mov	r1, r3
 8005258:	4610      	mov	r0, r2
 800525a:	f000 fc34 	bl	8005ac6 <TIM_ITRx_SetConfig>
      break;
 800525e:	e003      	b.n	8005268 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	73fb      	strb	r3, [r7, #15]
      break;
 8005264:	e000      	b.n	8005268 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005266:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005278:	7bfb      	ldrb	r3, [r7, #15]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	00100070 	.word	0x00100070
 8005288:	00100040 	.word	0x00100040
 800528c:	00100030 	.word	0x00100030
 8005290:	00100020 	.word	0x00100020

08005294 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a42      	ldr	r2, [pc, #264]	@ (8005400 <TIM_Base_SetConfig+0x11c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00f      	beq.n	800531c <TIM_Base_SetConfig+0x38>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005302:	d00b      	beq.n	800531c <TIM_Base_SetConfig+0x38>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a3f      	ldr	r2, [pc, #252]	@ (8005404 <TIM_Base_SetConfig+0x120>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d007      	beq.n	800531c <TIM_Base_SetConfig+0x38>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a3e      	ldr	r2, [pc, #248]	@ (8005408 <TIM_Base_SetConfig+0x124>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d003      	beq.n	800531c <TIM_Base_SetConfig+0x38>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a3d      	ldr	r2, [pc, #244]	@ (800540c <TIM_Base_SetConfig+0x128>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d108      	bne.n	800532e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a33      	ldr	r2, [pc, #204]	@ (8005400 <TIM_Base_SetConfig+0x11c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d01b      	beq.n	800536e <TIM_Base_SetConfig+0x8a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800533c:	d017      	beq.n	800536e <TIM_Base_SetConfig+0x8a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a30      	ldr	r2, [pc, #192]	@ (8005404 <TIM_Base_SetConfig+0x120>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <TIM_Base_SetConfig+0x8a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a2f      	ldr	r2, [pc, #188]	@ (8005408 <TIM_Base_SetConfig+0x124>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00f      	beq.n	800536e <TIM_Base_SetConfig+0x8a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a2e      	ldr	r2, [pc, #184]	@ (800540c <TIM_Base_SetConfig+0x128>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00b      	beq.n	800536e <TIM_Base_SetConfig+0x8a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a2d      	ldr	r2, [pc, #180]	@ (8005410 <TIM_Base_SetConfig+0x12c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d007      	beq.n	800536e <TIM_Base_SetConfig+0x8a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a2c      	ldr	r2, [pc, #176]	@ (8005414 <TIM_Base_SetConfig+0x130>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d003      	beq.n	800536e <TIM_Base_SetConfig+0x8a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a2b      	ldr	r2, [pc, #172]	@ (8005418 <TIM_Base_SetConfig+0x134>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d108      	bne.n	8005380 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a16      	ldr	r2, [pc, #88]	@ (8005400 <TIM_Base_SetConfig+0x11c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d00f      	beq.n	80053cc <TIM_Base_SetConfig+0xe8>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a17      	ldr	r2, [pc, #92]	@ (800540c <TIM_Base_SetConfig+0x128>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00b      	beq.n	80053cc <TIM_Base_SetConfig+0xe8>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a16      	ldr	r2, [pc, #88]	@ (8005410 <TIM_Base_SetConfig+0x12c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d007      	beq.n	80053cc <TIM_Base_SetConfig+0xe8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a15      	ldr	r2, [pc, #84]	@ (8005414 <TIM_Base_SetConfig+0x130>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d003      	beq.n	80053cc <TIM_Base_SetConfig+0xe8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a14      	ldr	r2, [pc, #80]	@ (8005418 <TIM_Base_SetConfig+0x134>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d103      	bne.n	80053d4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	691a      	ldr	r2, [r3, #16]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d105      	bne.n	80053f2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f023 0201 	bic.w	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	611a      	str	r2, [r3, #16]
  }
}
 80053f2:	bf00      	nop
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40012c00 	.word	0x40012c00
 8005404:	40000400 	.word	0x40000400
 8005408:	40000800 	.word	0x40000800
 800540c:	40013400 	.word	0x40013400
 8005410:	40014000 	.word	0x40014000
 8005414:	40014400 	.word	0x40014400
 8005418:	40014800 	.word	0x40014800

0800541c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	f023 0201 	bic.w	r2, r3, #1
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800544a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800544e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0303 	bic.w	r3, r3, #3
 8005456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f023 0302 	bic.w	r3, r3, #2
 8005468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	4313      	orrs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a2c      	ldr	r2, [pc, #176]	@ (8005528 <TIM_OC1_SetConfig+0x10c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00f      	beq.n	800549c <TIM_OC1_SetConfig+0x80>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a2b      	ldr	r2, [pc, #172]	@ (800552c <TIM_OC1_SetConfig+0x110>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d00b      	beq.n	800549c <TIM_OC1_SetConfig+0x80>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a2a      	ldr	r2, [pc, #168]	@ (8005530 <TIM_OC1_SetConfig+0x114>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d007      	beq.n	800549c <TIM_OC1_SetConfig+0x80>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a29      	ldr	r2, [pc, #164]	@ (8005534 <TIM_OC1_SetConfig+0x118>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d003      	beq.n	800549c <TIM_OC1_SetConfig+0x80>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a28      	ldr	r2, [pc, #160]	@ (8005538 <TIM_OC1_SetConfig+0x11c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d10c      	bne.n	80054b6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f023 0308 	bic.w	r3, r3, #8
 80054a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f023 0304 	bic.w	r3, r3, #4
 80054b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005528 <TIM_OC1_SetConfig+0x10c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00f      	beq.n	80054de <TIM_OC1_SetConfig+0xc2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a1a      	ldr	r2, [pc, #104]	@ (800552c <TIM_OC1_SetConfig+0x110>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00b      	beq.n	80054de <TIM_OC1_SetConfig+0xc2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a19      	ldr	r2, [pc, #100]	@ (8005530 <TIM_OC1_SetConfig+0x114>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d007      	beq.n	80054de <TIM_OC1_SetConfig+0xc2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a18      	ldr	r2, [pc, #96]	@ (8005534 <TIM_OC1_SetConfig+0x118>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d003      	beq.n	80054de <TIM_OC1_SetConfig+0xc2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a17      	ldr	r2, [pc, #92]	@ (8005538 <TIM_OC1_SetConfig+0x11c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d111      	bne.n	8005502 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	621a      	str	r2, [r3, #32]
}
 800551c:	bf00      	nop
 800551e:	371c      	adds	r7, #28
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	40012c00 	.word	0x40012c00
 800552c:	40013400 	.word	0x40013400
 8005530:	40014000 	.word	0x40014000
 8005534:	40014400 	.word	0x40014400
 8005538:	40014800 	.word	0x40014800

0800553c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	f023 0210 	bic.w	r2, r3, #16
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800556a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800556e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	021b      	lsls	r3, r3, #8
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4313      	orrs	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f023 0320 	bic.w	r3, r3, #32
 800558a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a28      	ldr	r2, [pc, #160]	@ (800563c <TIM_OC2_SetConfig+0x100>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d003      	beq.n	80055a8 <TIM_OC2_SetConfig+0x6c>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a27      	ldr	r2, [pc, #156]	@ (8005640 <TIM_OC2_SetConfig+0x104>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d10d      	bne.n	80055c4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a1d      	ldr	r2, [pc, #116]	@ (800563c <TIM_OC2_SetConfig+0x100>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d00f      	beq.n	80055ec <TIM_OC2_SetConfig+0xb0>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005640 <TIM_OC2_SetConfig+0x104>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00b      	beq.n	80055ec <TIM_OC2_SetConfig+0xb0>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005644 <TIM_OC2_SetConfig+0x108>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d007      	beq.n	80055ec <TIM_OC2_SetConfig+0xb0>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a1a      	ldr	r2, [pc, #104]	@ (8005648 <TIM_OC2_SetConfig+0x10c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d003      	beq.n	80055ec <TIM_OC2_SetConfig+0xb0>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a19      	ldr	r2, [pc, #100]	@ (800564c <TIM_OC2_SetConfig+0x110>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d113      	bne.n	8005614 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4313      	orrs	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	621a      	str	r2, [r3, #32]
}
 800562e:	bf00      	nop
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	40012c00 	.word	0x40012c00
 8005640:	40013400 	.word	0x40013400
 8005644:	40014000 	.word	0x40014000
 8005648:	40014400 	.word	0x40014400
 800564c:	40014800 	.word	0x40014800

08005650 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800567e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0303 	bic.w	r3, r3, #3
 800568a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800569c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	021b      	lsls	r3, r3, #8
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a27      	ldr	r2, [pc, #156]	@ (800574c <TIM_OC3_SetConfig+0xfc>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <TIM_OC3_SetConfig+0x6a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a26      	ldr	r2, [pc, #152]	@ (8005750 <TIM_OC3_SetConfig+0x100>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d10d      	bne.n	80056d6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	021b      	lsls	r3, r3, #8
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a1c      	ldr	r2, [pc, #112]	@ (800574c <TIM_OC3_SetConfig+0xfc>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00f      	beq.n	80056fe <TIM_OC3_SetConfig+0xae>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005750 <TIM_OC3_SetConfig+0x100>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00b      	beq.n	80056fe <TIM_OC3_SetConfig+0xae>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a1a      	ldr	r2, [pc, #104]	@ (8005754 <TIM_OC3_SetConfig+0x104>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d007      	beq.n	80056fe <TIM_OC3_SetConfig+0xae>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a19      	ldr	r2, [pc, #100]	@ (8005758 <TIM_OC3_SetConfig+0x108>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d003      	beq.n	80056fe <TIM_OC3_SetConfig+0xae>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a18      	ldr	r2, [pc, #96]	@ (800575c <TIM_OC3_SetConfig+0x10c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d113      	bne.n	8005726 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800570c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4313      	orrs	r3, r2
 8005718:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	621a      	str	r2, [r3, #32]
}
 8005740:	bf00      	nop
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	40012c00 	.word	0x40012c00
 8005750:	40013400 	.word	0x40013400
 8005754:	40014000 	.word	0x40014000
 8005758:	40014400 	.word	0x40014400
 800575c:	40014800 	.word	0x40014800

08005760 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800578e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800579a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	021b      	lsls	r3, r3, #8
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	031b      	lsls	r3, r3, #12
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a28      	ldr	r2, [pc, #160]	@ (8005860 <TIM_OC4_SetConfig+0x100>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d003      	beq.n	80057cc <TIM_OC4_SetConfig+0x6c>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a27      	ldr	r2, [pc, #156]	@ (8005864 <TIM_OC4_SetConfig+0x104>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d10d      	bne.n	80057e8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80057d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	031b      	lsls	r3, r3, #12
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	4313      	orrs	r3, r2
 80057de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005860 <TIM_OC4_SetConfig+0x100>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00f      	beq.n	8005810 <TIM_OC4_SetConfig+0xb0>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005864 <TIM_OC4_SetConfig+0x104>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00b      	beq.n	8005810 <TIM_OC4_SetConfig+0xb0>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005868 <TIM_OC4_SetConfig+0x108>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d007      	beq.n	8005810 <TIM_OC4_SetConfig+0xb0>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a1a      	ldr	r2, [pc, #104]	@ (800586c <TIM_OC4_SetConfig+0x10c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d003      	beq.n	8005810 <TIM_OC4_SetConfig+0xb0>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a19      	ldr	r2, [pc, #100]	@ (8005870 <TIM_OC4_SetConfig+0x110>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d113      	bne.n	8005838 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005816:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800581e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	019b      	lsls	r3, r3, #6
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	019b      	lsls	r3, r3, #6
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	4313      	orrs	r3, r2
 8005836:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	621a      	str	r2, [r3, #32]
}
 8005852:	bf00      	nop
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	40012c00 	.word	0x40012c00
 8005864:	40013400 	.word	0x40013400
 8005868:	40014000 	.word	0x40014000
 800586c:	40014400 	.word	0x40014400
 8005870:	40014800 	.word	0x40014800

08005874 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80058b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	041b      	lsls	r3, r3, #16
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a17      	ldr	r2, [pc, #92]	@ (8005928 <TIM_OC5_SetConfig+0xb4>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00f      	beq.n	80058ee <TIM_OC5_SetConfig+0x7a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a16      	ldr	r2, [pc, #88]	@ (800592c <TIM_OC5_SetConfig+0xb8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00b      	beq.n	80058ee <TIM_OC5_SetConfig+0x7a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a15      	ldr	r2, [pc, #84]	@ (8005930 <TIM_OC5_SetConfig+0xbc>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d007      	beq.n	80058ee <TIM_OC5_SetConfig+0x7a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a14      	ldr	r2, [pc, #80]	@ (8005934 <TIM_OC5_SetConfig+0xc0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d003      	beq.n	80058ee <TIM_OC5_SetConfig+0x7a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a13      	ldr	r2, [pc, #76]	@ (8005938 <TIM_OC5_SetConfig+0xc4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d109      	bne.n	8005902 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	021b      	lsls	r3, r3, #8
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	621a      	str	r2, [r3, #32]
}
 800591c:	bf00      	nop
 800591e:	371c      	adds	r7, #28
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	40012c00 	.word	0x40012c00
 800592c:	40013400 	.word	0x40013400
 8005930:	40014000 	.word	0x40014000
 8005934:	40014400 	.word	0x40014400
 8005938:	40014800 	.word	0x40014800

0800593c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800596a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800596e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	021b      	lsls	r3, r3, #8
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005982:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	051b      	lsls	r3, r3, #20
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	4313      	orrs	r3, r2
 800598e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a18      	ldr	r2, [pc, #96]	@ (80059f4 <TIM_OC6_SetConfig+0xb8>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00f      	beq.n	80059b8 <TIM_OC6_SetConfig+0x7c>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a17      	ldr	r2, [pc, #92]	@ (80059f8 <TIM_OC6_SetConfig+0xbc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00b      	beq.n	80059b8 <TIM_OC6_SetConfig+0x7c>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a16      	ldr	r2, [pc, #88]	@ (80059fc <TIM_OC6_SetConfig+0xc0>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d007      	beq.n	80059b8 <TIM_OC6_SetConfig+0x7c>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a15      	ldr	r2, [pc, #84]	@ (8005a00 <TIM_OC6_SetConfig+0xc4>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d003      	beq.n	80059b8 <TIM_OC6_SetConfig+0x7c>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a14      	ldr	r2, [pc, #80]	@ (8005a04 <TIM_OC6_SetConfig+0xc8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d109      	bne.n	80059cc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	029b      	lsls	r3, r3, #10
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	621a      	str	r2, [r3, #32]
}
 80059e6:	bf00      	nop
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40012c00 	.word	0x40012c00
 80059f8:	40013400 	.word	0x40013400
 80059fc:	40014000 	.word	0x40014000
 8005a00:	40014400 	.word	0x40014400
 8005a04:	40014800 	.word	0x40014800

08005a08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	f023 0201 	bic.w	r2, r3, #1
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f023 030a 	bic.w	r3, r3, #10
 8005a44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	621a      	str	r2, [r3, #32]
}
 8005a5a:	bf00      	nop
 8005a5c:	371c      	adds	r7, #28
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b087      	sub	sp, #28
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	f023 0210 	bic.w	r2, r3, #16
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	031b      	lsls	r3, r3, #12
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005aa2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	011b      	lsls	r3, r3, #4
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	621a      	str	r2, [r3, #32]
}
 8005aba:	bf00      	nop
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b085      	sub	sp, #20
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005adc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ae0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f043 0307 	orr.w	r3, r3, #7
 8005aec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	609a      	str	r2, [r3, #8]
}
 8005af4:	bf00      	nop
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	021a      	lsls	r2, r3, #8
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	431a      	orrs	r2, r3
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	609a      	str	r2, [r3, #8]
}
 8005b34:	bf00      	nop
 8005b36:	371c      	adds	r7, #28
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f003 031f 	and.w	r3, r3, #31
 8005b52:	2201      	movs	r2, #1
 8005b54:	fa02 f303 	lsl.w	r3, r2, r3
 8005b58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a1a      	ldr	r2, [r3, #32]
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	43db      	mvns	r3, r3
 8005b62:	401a      	ands	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6a1a      	ldr	r2, [r3, #32]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f003 031f 	and.w	r3, r3, #31
 8005b72:	6879      	ldr	r1, [r7, #4]
 8005b74:	fa01 f303 	lsl.w	r3, r1, r3
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	621a      	str	r2, [r3, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
	...

08005b8c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d109      	bne.n	8005bb0 <HAL_TIMEx_PWMN_Start+0x24>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	bf14      	ite	ne
 8005ba8:	2301      	movne	r3, #1
 8005baa:	2300      	moveq	r3, #0
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	e022      	b.n	8005bf6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d109      	bne.n	8005bca <HAL_TIMEx_PWMN_Start+0x3e>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	bf14      	ite	ne
 8005bc2:	2301      	movne	r3, #1
 8005bc4:	2300      	moveq	r3, #0
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	e015      	b.n	8005bf6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d109      	bne.n	8005be4 <HAL_TIMEx_PWMN_Start+0x58>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	bf14      	ite	ne
 8005bdc:	2301      	movne	r3, #1
 8005bde:	2300      	moveq	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	e008      	b.n	8005bf6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	bf14      	ite	ne
 8005bf0:	2301      	movne	r3, #1
 8005bf2:	2300      	moveq	r3, #0
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e069      	b.n	8005cd2 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d104      	bne.n	8005c0e <HAL_TIMEx_PWMN_Start+0x82>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c0c:	e013      	b.n	8005c36 <HAL_TIMEx_PWMN_Start+0xaa>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	d104      	bne.n	8005c1e <HAL_TIMEx_PWMN_Start+0x92>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c1c:	e00b      	b.n	8005c36 <HAL_TIMEx_PWMN_Start+0xaa>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d104      	bne.n	8005c2e <HAL_TIMEx_PWMN_Start+0xa2>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c2c:	e003      	b.n	8005c36 <HAL_TIMEx_PWMN_Start+0xaa>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2202      	movs	r2, #2
 8005c32:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2204      	movs	r2, #4
 8005c3c:	6839      	ldr	r1, [r7, #0]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 fa0a 	bl	8006058 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a20      	ldr	r2, [pc, #128]	@ (8005cdc <HAL_TIMEx_PWMN_Start+0x150>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d018      	beq.n	8005c90 <HAL_TIMEx_PWMN_Start+0x104>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c66:	d013      	beq.n	8005c90 <HAL_TIMEx_PWMN_Start+0x104>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ce0 <HAL_TIMEx_PWMN_Start+0x154>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d00e      	beq.n	8005c90 <HAL_TIMEx_PWMN_Start+0x104>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a1b      	ldr	r2, [pc, #108]	@ (8005ce4 <HAL_TIMEx_PWMN_Start+0x158>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d009      	beq.n	8005c90 <HAL_TIMEx_PWMN_Start+0x104>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a19      	ldr	r2, [pc, #100]	@ (8005ce8 <HAL_TIMEx_PWMN_Start+0x15c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d004      	beq.n	8005c90 <HAL_TIMEx_PWMN_Start+0x104>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a18      	ldr	r2, [pc, #96]	@ (8005cec <HAL_TIMEx_PWMN_Start+0x160>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d115      	bne.n	8005cbc <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	4b16      	ldr	r3, [pc, #88]	@ (8005cf0 <HAL_TIMEx_PWMN_Start+0x164>)
 8005c98:	4013      	ands	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b06      	cmp	r3, #6
 8005ca0:	d015      	beq.n	8005cce <HAL_TIMEx_PWMN_Start+0x142>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ca8:	d011      	beq.n	8005cce <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f042 0201 	orr.w	r2, r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cba:	e008      	b.n	8005cce <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	e000      	b.n	8005cd0 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40012c00 	.word	0x40012c00
 8005ce0:	40000400 	.word	0x40000400
 8005ce4:	40000800 	.word	0x40000800
 8005ce8:	40013400 	.word	0x40013400
 8005cec:	40014000 	.word	0x40014000
 8005cf0:	00010007 	.word	0x00010007

08005cf4 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2200      	movs	r2, #0
 8005d04:	6839      	ldr	r1, [r7, #0]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 f9a6 	bl	8006058 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6a1a      	ldr	r2, [r3, #32]
 8005d12:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005d16:	4013      	ands	r3, r2
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10f      	bne.n	8005d3c <HAL_TIMEx_PWMN_Stop+0x48>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6a1a      	ldr	r2, [r3, #32]
 8005d22:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005d26:	4013      	ands	r3, r2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d107      	bne.n	8005d3c <HAL_TIMEx_PWMN_Stop+0x48>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d3a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6a1a      	ldr	r2, [r3, #32]
 8005d42:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005d46:	4013      	ands	r3, r2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10f      	bne.n	8005d6c <HAL_TIMEx_PWMN_Stop+0x78>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6a1a      	ldr	r2, [r3, #32]
 8005d52:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005d56:	4013      	ands	r3, r2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d107      	bne.n	8005d6c <HAL_TIMEx_PWMN_Stop+0x78>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0201 	bic.w	r2, r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d104      	bne.n	8005d7c <HAL_TIMEx_PWMN_Stop+0x88>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d7a:	e013      	b.n	8005da4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d104      	bne.n	8005d8c <HAL_TIMEx_PWMN_Stop+0x98>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d8a:	e00b      	b.n	8005da4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d104      	bne.n	8005d9c <HAL_TIMEx_PWMN_Stop+0xa8>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d9a:	e003      	b.n	8005da4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
	...

08005db0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d101      	bne.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	e065      	b.n	8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a2c      	ldr	r2, [pc, #176]	@ (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d004      	beq.n	8005dfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a2b      	ldr	r2, [pc, #172]	@ (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d108      	bne.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005e14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d018      	beq.n	8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e3e:	d013      	beq.n	8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a18      	ldr	r2, [pc, #96]	@ (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d00e      	beq.n	8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a17      	ldr	r2, [pc, #92]	@ (8005eac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d009      	beq.n	8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a12      	ldr	r2, [pc, #72]	@ (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d004      	beq.n	8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a13      	ldr	r2, [pc, #76]	@ (8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d10c      	bne.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	40012c00 	.word	0x40012c00
 8005ea4:	40013400 	.word	0x40013400
 8005ea8:	40000400 	.word	0x40000400
 8005eac:	40000800 	.word	0x40000800
 8005eb0:	40014000 	.word	0x40014000

08005eb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e073      	b.n	8005fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	041b      	lsls	r3, r3, #16
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a19      	ldr	r2, [pc, #100]	@ (8005fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d004      	beq.n	8005f6c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a18      	ldr	r2, [pc, #96]	@ (8005fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d11c      	bne.n	8005fa6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f76:	051b      	lsls	r3, r3, #20
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	40012c00 	.word	0x40012c00
 8005fc8:	40013400 	.word	0x40013400

08005fcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	2204      	movs	r2, #4
 800606c:	fa02 f303 	lsl.w	r3, r2, r3
 8006070:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6a1a      	ldr	r2, [r3, #32]
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	43db      	mvns	r3, r3
 800607a:	401a      	ands	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a1a      	ldr	r2, [r3, #32]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f003 030f 	and.w	r3, r3, #15
 800608a:	6879      	ldr	r1, [r7, #4]
 800608c:	fa01 f303 	lsl.w	r3, r1, r3
 8006090:	431a      	orrs	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	621a      	str	r2, [r3, #32]
}
 8006096:	bf00      	nop
 8006098:	371c      	adds	r7, #28
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b082      	sub	sp, #8
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d101      	bne.n	80060b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e042      	b.n	800613a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d106      	bne.n	80060cc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7fb fcbe 	bl	8001a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2224      	movs	r2, #36	@ 0x24
 80060d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0201 	bic.w	r2, r2, #1
 80060e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fb83 	bl	80067f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f8b4 	bl	8006260 <UART_SetConfig>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d101      	bne.n	8006102 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e01b      	b.n	800613a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006110:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006120:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f042 0201 	orr.w	r2, r2, #1
 8006130:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fc02 	bl	800693c <UART_CheckIdleState>
 8006138:	4603      	mov	r3, r0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b08a      	sub	sp, #40	@ 0x28
 8006146:	af02      	add	r7, sp, #8
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	603b      	str	r3, [r7, #0]
 800614e:	4613      	mov	r3, r2
 8006150:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006158:	2b20      	cmp	r3, #32
 800615a:	d17b      	bne.n	8006254 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <HAL_UART_Transmit+0x26>
 8006162:	88fb      	ldrh	r3, [r7, #6]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e074      	b.n	8006256 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2221      	movs	r2, #33	@ 0x21
 8006178:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800617c:	f7fb fd50 	bl	8001c20 <HAL_GetTick>
 8006180:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	88fa      	ldrh	r2, [r7, #6]
 8006186:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	88fa      	ldrh	r2, [r7, #6]
 800618e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800619a:	d108      	bne.n	80061ae <HAL_UART_Transmit+0x6c>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d104      	bne.n	80061ae <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80061a4:	2300      	movs	r3, #0
 80061a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	61bb      	str	r3, [r7, #24]
 80061ac:	e003      	b.n	80061b6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061b6:	e030      	b.n	800621a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	2200      	movs	r2, #0
 80061c0:	2180      	movs	r1, #128	@ 0x80
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 fc64 	bl	8006a90 <UART_WaitOnFlagUntilTimeout>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e03d      	b.n	8006256 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10b      	bne.n	80061f8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	881b      	ldrh	r3, [r3, #0]
 80061e4:	461a      	mov	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	3302      	adds	r3, #2
 80061f4:	61bb      	str	r3, [r7, #24]
 80061f6:	e007      	b.n	8006208 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	781a      	ldrb	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	3301      	adds	r3, #1
 8006206:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800620e:	b29b      	uxth	r3, r3
 8006210:	3b01      	subs	r3, #1
 8006212:	b29a      	uxth	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006220:	b29b      	uxth	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1c8      	bne.n	80061b8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2200      	movs	r2, #0
 800622e:	2140      	movs	r1, #64	@ 0x40
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f000 fc2d 	bl	8006a90 <UART_WaitOnFlagUntilTimeout>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d005      	beq.n	8006248 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2220      	movs	r2, #32
 8006240:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e006      	b.n	8006256 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2220      	movs	r2, #32
 800624c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	e000      	b.n	8006256 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006254:	2302      	movs	r3, #2
  }
}
 8006256:	4618      	mov	r0, r3
 8006258:	3720      	adds	r7, #32
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006264:	b08c      	sub	sp, #48	@ 0x30
 8006266:	af00      	add	r7, sp, #0
 8006268:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	689a      	ldr	r2, [r3, #8]
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	431a      	orrs	r2, r3
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	431a      	orrs	r2, r3
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	69db      	ldr	r3, [r3, #28]
 8006284:	4313      	orrs	r3, r2
 8006286:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	4bab      	ldr	r3, [pc, #684]	@ (800653c <UART_SetConfig+0x2dc>)
 8006290:	4013      	ands	r3, r2
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	6812      	ldr	r2, [r2, #0]
 8006296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006298:	430b      	orrs	r3, r1
 800629a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4aa0      	ldr	r2, [pc, #640]	@ (8006540 <UART_SetConfig+0x2e0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d004      	beq.n	80062cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062c8:	4313      	orrs	r3, r2
 80062ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80062d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	6812      	ldr	r2, [r2, #0]
 80062de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062e0:	430b      	orrs	r3, r1
 80062e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ea:	f023 010f 	bic.w	r1, r3, #15
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a91      	ldr	r2, [pc, #580]	@ (8006544 <UART_SetConfig+0x2e4>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d125      	bne.n	8006350 <UART_SetConfig+0xf0>
 8006304:	4b90      	ldr	r3, [pc, #576]	@ (8006548 <UART_SetConfig+0x2e8>)
 8006306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800630a:	f003 0303 	and.w	r3, r3, #3
 800630e:	2b03      	cmp	r3, #3
 8006310:	d81a      	bhi.n	8006348 <UART_SetConfig+0xe8>
 8006312:	a201      	add	r2, pc, #4	@ (adr r2, 8006318 <UART_SetConfig+0xb8>)
 8006314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006318:	08006329 	.word	0x08006329
 800631c:	08006339 	.word	0x08006339
 8006320:	08006331 	.word	0x08006331
 8006324:	08006341 	.word	0x08006341
 8006328:	2301      	movs	r3, #1
 800632a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800632e:	e0d6      	b.n	80064de <UART_SetConfig+0x27e>
 8006330:	2302      	movs	r3, #2
 8006332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006336:	e0d2      	b.n	80064de <UART_SetConfig+0x27e>
 8006338:	2304      	movs	r3, #4
 800633a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800633e:	e0ce      	b.n	80064de <UART_SetConfig+0x27e>
 8006340:	2308      	movs	r3, #8
 8006342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006346:	e0ca      	b.n	80064de <UART_SetConfig+0x27e>
 8006348:	2310      	movs	r3, #16
 800634a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800634e:	e0c6      	b.n	80064de <UART_SetConfig+0x27e>
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a7d      	ldr	r2, [pc, #500]	@ (800654c <UART_SetConfig+0x2ec>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d138      	bne.n	80063cc <UART_SetConfig+0x16c>
 800635a:	4b7b      	ldr	r3, [pc, #492]	@ (8006548 <UART_SetConfig+0x2e8>)
 800635c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006360:	f003 030c 	and.w	r3, r3, #12
 8006364:	2b0c      	cmp	r3, #12
 8006366:	d82d      	bhi.n	80063c4 <UART_SetConfig+0x164>
 8006368:	a201      	add	r2, pc, #4	@ (adr r2, 8006370 <UART_SetConfig+0x110>)
 800636a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636e:	bf00      	nop
 8006370:	080063a5 	.word	0x080063a5
 8006374:	080063c5 	.word	0x080063c5
 8006378:	080063c5 	.word	0x080063c5
 800637c:	080063c5 	.word	0x080063c5
 8006380:	080063b5 	.word	0x080063b5
 8006384:	080063c5 	.word	0x080063c5
 8006388:	080063c5 	.word	0x080063c5
 800638c:	080063c5 	.word	0x080063c5
 8006390:	080063ad 	.word	0x080063ad
 8006394:	080063c5 	.word	0x080063c5
 8006398:	080063c5 	.word	0x080063c5
 800639c:	080063c5 	.word	0x080063c5
 80063a0:	080063bd 	.word	0x080063bd
 80063a4:	2300      	movs	r3, #0
 80063a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063aa:	e098      	b.n	80064de <UART_SetConfig+0x27e>
 80063ac:	2302      	movs	r3, #2
 80063ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063b2:	e094      	b.n	80064de <UART_SetConfig+0x27e>
 80063b4:	2304      	movs	r3, #4
 80063b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ba:	e090      	b.n	80064de <UART_SetConfig+0x27e>
 80063bc:	2308      	movs	r3, #8
 80063be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063c2:	e08c      	b.n	80064de <UART_SetConfig+0x27e>
 80063c4:	2310      	movs	r3, #16
 80063c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ca:	e088      	b.n	80064de <UART_SetConfig+0x27e>
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a5f      	ldr	r2, [pc, #380]	@ (8006550 <UART_SetConfig+0x2f0>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d125      	bne.n	8006422 <UART_SetConfig+0x1c2>
 80063d6:	4b5c      	ldr	r3, [pc, #368]	@ (8006548 <UART_SetConfig+0x2e8>)
 80063d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80063e0:	2b30      	cmp	r3, #48	@ 0x30
 80063e2:	d016      	beq.n	8006412 <UART_SetConfig+0x1b2>
 80063e4:	2b30      	cmp	r3, #48	@ 0x30
 80063e6:	d818      	bhi.n	800641a <UART_SetConfig+0x1ba>
 80063e8:	2b20      	cmp	r3, #32
 80063ea:	d00a      	beq.n	8006402 <UART_SetConfig+0x1a2>
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	d814      	bhi.n	800641a <UART_SetConfig+0x1ba>
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <UART_SetConfig+0x19a>
 80063f4:	2b10      	cmp	r3, #16
 80063f6:	d008      	beq.n	800640a <UART_SetConfig+0x1aa>
 80063f8:	e00f      	b.n	800641a <UART_SetConfig+0x1ba>
 80063fa:	2300      	movs	r3, #0
 80063fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006400:	e06d      	b.n	80064de <UART_SetConfig+0x27e>
 8006402:	2302      	movs	r3, #2
 8006404:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006408:	e069      	b.n	80064de <UART_SetConfig+0x27e>
 800640a:	2304      	movs	r3, #4
 800640c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006410:	e065      	b.n	80064de <UART_SetConfig+0x27e>
 8006412:	2308      	movs	r3, #8
 8006414:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006418:	e061      	b.n	80064de <UART_SetConfig+0x27e>
 800641a:	2310      	movs	r3, #16
 800641c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006420:	e05d      	b.n	80064de <UART_SetConfig+0x27e>
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a4b      	ldr	r2, [pc, #300]	@ (8006554 <UART_SetConfig+0x2f4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d125      	bne.n	8006478 <UART_SetConfig+0x218>
 800642c:	4b46      	ldr	r3, [pc, #280]	@ (8006548 <UART_SetConfig+0x2e8>)
 800642e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006432:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006436:	2bc0      	cmp	r3, #192	@ 0xc0
 8006438:	d016      	beq.n	8006468 <UART_SetConfig+0x208>
 800643a:	2bc0      	cmp	r3, #192	@ 0xc0
 800643c:	d818      	bhi.n	8006470 <UART_SetConfig+0x210>
 800643e:	2b80      	cmp	r3, #128	@ 0x80
 8006440:	d00a      	beq.n	8006458 <UART_SetConfig+0x1f8>
 8006442:	2b80      	cmp	r3, #128	@ 0x80
 8006444:	d814      	bhi.n	8006470 <UART_SetConfig+0x210>
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <UART_SetConfig+0x1f0>
 800644a:	2b40      	cmp	r3, #64	@ 0x40
 800644c:	d008      	beq.n	8006460 <UART_SetConfig+0x200>
 800644e:	e00f      	b.n	8006470 <UART_SetConfig+0x210>
 8006450:	2300      	movs	r3, #0
 8006452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006456:	e042      	b.n	80064de <UART_SetConfig+0x27e>
 8006458:	2302      	movs	r3, #2
 800645a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800645e:	e03e      	b.n	80064de <UART_SetConfig+0x27e>
 8006460:	2304      	movs	r3, #4
 8006462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006466:	e03a      	b.n	80064de <UART_SetConfig+0x27e>
 8006468:	2308      	movs	r3, #8
 800646a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800646e:	e036      	b.n	80064de <UART_SetConfig+0x27e>
 8006470:	2310      	movs	r3, #16
 8006472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006476:	e032      	b.n	80064de <UART_SetConfig+0x27e>
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a30      	ldr	r2, [pc, #192]	@ (8006540 <UART_SetConfig+0x2e0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d12a      	bne.n	80064d8 <UART_SetConfig+0x278>
 8006482:	4b31      	ldr	r3, [pc, #196]	@ (8006548 <UART_SetConfig+0x2e8>)
 8006484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006488:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800648c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006490:	d01a      	beq.n	80064c8 <UART_SetConfig+0x268>
 8006492:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006496:	d81b      	bhi.n	80064d0 <UART_SetConfig+0x270>
 8006498:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800649c:	d00c      	beq.n	80064b8 <UART_SetConfig+0x258>
 800649e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064a2:	d815      	bhi.n	80064d0 <UART_SetConfig+0x270>
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d003      	beq.n	80064b0 <UART_SetConfig+0x250>
 80064a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064ac:	d008      	beq.n	80064c0 <UART_SetConfig+0x260>
 80064ae:	e00f      	b.n	80064d0 <UART_SetConfig+0x270>
 80064b0:	2300      	movs	r3, #0
 80064b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064b6:	e012      	b.n	80064de <UART_SetConfig+0x27e>
 80064b8:	2302      	movs	r3, #2
 80064ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064be:	e00e      	b.n	80064de <UART_SetConfig+0x27e>
 80064c0:	2304      	movs	r3, #4
 80064c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064c6:	e00a      	b.n	80064de <UART_SetConfig+0x27e>
 80064c8:	2308      	movs	r3, #8
 80064ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064ce:	e006      	b.n	80064de <UART_SetConfig+0x27e>
 80064d0:	2310      	movs	r3, #16
 80064d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064d6:	e002      	b.n	80064de <UART_SetConfig+0x27e>
 80064d8:	2310      	movs	r3, #16
 80064da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a17      	ldr	r2, [pc, #92]	@ (8006540 <UART_SetConfig+0x2e0>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	f040 80a8 	bne.w	800663a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064ee:	2b08      	cmp	r3, #8
 80064f0:	d834      	bhi.n	800655c <UART_SetConfig+0x2fc>
 80064f2:	a201      	add	r2, pc, #4	@ (adr r2, 80064f8 <UART_SetConfig+0x298>)
 80064f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f8:	0800651d 	.word	0x0800651d
 80064fc:	0800655d 	.word	0x0800655d
 8006500:	08006525 	.word	0x08006525
 8006504:	0800655d 	.word	0x0800655d
 8006508:	0800652b 	.word	0x0800652b
 800650c:	0800655d 	.word	0x0800655d
 8006510:	0800655d 	.word	0x0800655d
 8006514:	0800655d 	.word	0x0800655d
 8006518:	08006533 	.word	0x08006533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800651c:	f7fd fcdc 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 8006520:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006522:	e021      	b.n	8006568 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006524:	4b0c      	ldr	r3, [pc, #48]	@ (8006558 <UART_SetConfig+0x2f8>)
 8006526:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006528:	e01e      	b.n	8006568 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800652a:	f7fd fc69 	bl	8003e00 <HAL_RCC_GetSysClockFreq>
 800652e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006530:	e01a      	b.n	8006568 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006536:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006538:	e016      	b.n	8006568 <UART_SetConfig+0x308>
 800653a:	bf00      	nop
 800653c:	cfff69f3 	.word	0xcfff69f3
 8006540:	40008000 	.word	0x40008000
 8006544:	40013800 	.word	0x40013800
 8006548:	40021000 	.word	0x40021000
 800654c:	40004400 	.word	0x40004400
 8006550:	40004800 	.word	0x40004800
 8006554:	40004c00 	.word	0x40004c00
 8006558:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006566:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 812a 	beq.w	80067c4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006574:	4a9e      	ldr	r2, [pc, #632]	@ (80067f0 <UART_SetConfig+0x590>)
 8006576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800657a:	461a      	mov	r2, r3
 800657c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006582:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	4613      	mov	r3, r2
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	4413      	add	r3, r2
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	429a      	cmp	r2, r3
 8006592:	d305      	bcc.n	80065a0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	429a      	cmp	r2, r3
 800659e:	d903      	bls.n	80065a8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80065a6:	e10d      	b.n	80067c4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065aa:	2200      	movs	r2, #0
 80065ac:	60bb      	str	r3, [r7, #8]
 80065ae:	60fa      	str	r2, [r7, #12]
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b4:	4a8e      	ldr	r2, [pc, #568]	@ (80067f0 <UART_SetConfig+0x590>)
 80065b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	2200      	movs	r2, #0
 80065be:	603b      	str	r3, [r7, #0]
 80065c0:	607a      	str	r2, [r7, #4]
 80065c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80065ca:	f7fa f835 	bl	8000638 <__aeabi_uldivmod>
 80065ce:	4602      	mov	r2, r0
 80065d0:	460b      	mov	r3, r1
 80065d2:	4610      	mov	r0, r2
 80065d4:	4619      	mov	r1, r3
 80065d6:	f04f 0200 	mov.w	r2, #0
 80065da:	f04f 0300 	mov.w	r3, #0
 80065de:	020b      	lsls	r3, r1, #8
 80065e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80065e4:	0202      	lsls	r2, r0, #8
 80065e6:	6979      	ldr	r1, [r7, #20]
 80065e8:	6849      	ldr	r1, [r1, #4]
 80065ea:	0849      	lsrs	r1, r1, #1
 80065ec:	2000      	movs	r0, #0
 80065ee:	460c      	mov	r4, r1
 80065f0:	4605      	mov	r5, r0
 80065f2:	eb12 0804 	adds.w	r8, r2, r4
 80065f6:	eb43 0905 	adc.w	r9, r3, r5
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	469a      	mov	sl, r3
 8006602:	4693      	mov	fp, r2
 8006604:	4652      	mov	r2, sl
 8006606:	465b      	mov	r3, fp
 8006608:	4640      	mov	r0, r8
 800660a:	4649      	mov	r1, r9
 800660c:	f7fa f814 	bl	8000638 <__aeabi_uldivmod>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4613      	mov	r3, r2
 8006616:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800661e:	d308      	bcc.n	8006632 <UART_SetConfig+0x3d2>
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006626:	d204      	bcs.n	8006632 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6a3a      	ldr	r2, [r7, #32]
 800662e:	60da      	str	r2, [r3, #12]
 8006630:	e0c8      	b.n	80067c4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006638:	e0c4      	b.n	80067c4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006642:	d167      	bne.n	8006714 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006644:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006648:	2b08      	cmp	r3, #8
 800664a:	d828      	bhi.n	800669e <UART_SetConfig+0x43e>
 800664c:	a201      	add	r2, pc, #4	@ (adr r2, 8006654 <UART_SetConfig+0x3f4>)
 800664e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006652:	bf00      	nop
 8006654:	08006679 	.word	0x08006679
 8006658:	08006681 	.word	0x08006681
 800665c:	08006689 	.word	0x08006689
 8006660:	0800669f 	.word	0x0800669f
 8006664:	0800668f 	.word	0x0800668f
 8006668:	0800669f 	.word	0x0800669f
 800666c:	0800669f 	.word	0x0800669f
 8006670:	0800669f 	.word	0x0800669f
 8006674:	08006697 	.word	0x08006697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006678:	f7fd fc2e 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 800667c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800667e:	e014      	b.n	80066aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006680:	f7fd fc40 	bl	8003f04 <HAL_RCC_GetPCLK2Freq>
 8006684:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006686:	e010      	b.n	80066aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006688:	4b5a      	ldr	r3, [pc, #360]	@ (80067f4 <UART_SetConfig+0x594>)
 800668a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800668c:	e00d      	b.n	80066aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800668e:	f7fd fbb7 	bl	8003e00 <HAL_RCC_GetSysClockFreq>
 8006692:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006694:	e009      	b.n	80066aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800669a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800669c:	e005      	b.n	80066aa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80066a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 8089 	beq.w	80067c4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b6:	4a4e      	ldr	r2, [pc, #312]	@ (80067f0 <UART_SetConfig+0x590>)
 80066b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066bc:	461a      	mov	r2, r3
 80066be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80066c4:	005a      	lsls	r2, r3, #1
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	085b      	lsrs	r3, r3, #1
 80066cc:	441a      	add	r2, r3
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	2b0f      	cmp	r3, #15
 80066dc:	d916      	bls.n	800670c <UART_SetConfig+0x4ac>
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066e4:	d212      	bcs.n	800670c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	f023 030f 	bic.w	r3, r3, #15
 80066ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	085b      	lsrs	r3, r3, #1
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	8bfb      	ldrh	r3, [r7, #30]
 80066fe:	4313      	orrs	r3, r2
 8006700:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	8bfa      	ldrh	r2, [r7, #30]
 8006708:	60da      	str	r2, [r3, #12]
 800670a:	e05b      	b.n	80067c4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006712:	e057      	b.n	80067c4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006714:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006718:	2b08      	cmp	r3, #8
 800671a:	d828      	bhi.n	800676e <UART_SetConfig+0x50e>
 800671c:	a201      	add	r2, pc, #4	@ (adr r2, 8006724 <UART_SetConfig+0x4c4>)
 800671e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006722:	bf00      	nop
 8006724:	08006749 	.word	0x08006749
 8006728:	08006751 	.word	0x08006751
 800672c:	08006759 	.word	0x08006759
 8006730:	0800676f 	.word	0x0800676f
 8006734:	0800675f 	.word	0x0800675f
 8006738:	0800676f 	.word	0x0800676f
 800673c:	0800676f 	.word	0x0800676f
 8006740:	0800676f 	.word	0x0800676f
 8006744:	08006767 	.word	0x08006767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006748:	f7fd fbc6 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 800674c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800674e:	e014      	b.n	800677a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006750:	f7fd fbd8 	bl	8003f04 <HAL_RCC_GetPCLK2Freq>
 8006754:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006756:	e010      	b.n	800677a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006758:	4b26      	ldr	r3, [pc, #152]	@ (80067f4 <UART_SetConfig+0x594>)
 800675a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800675c:	e00d      	b.n	800677a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800675e:	f7fd fb4f 	bl	8003e00 <HAL_RCC_GetSysClockFreq>
 8006762:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006764:	e009      	b.n	800677a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800676a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800676c:	e005      	b.n	800677a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800676e:	2300      	movs	r3, #0
 8006770:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006778:	bf00      	nop
    }

    if (pclk != 0U)
 800677a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677c:	2b00      	cmp	r3, #0
 800677e:	d021      	beq.n	80067c4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006784:	4a1a      	ldr	r2, [pc, #104]	@ (80067f0 <UART_SetConfig+0x590>)
 8006786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800678a:	461a      	mov	r2, r3
 800678c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	085b      	lsrs	r3, r3, #1
 8006798:	441a      	add	r2, r3
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	2b0f      	cmp	r3, #15
 80067a8:	d909      	bls.n	80067be <UART_SetConfig+0x55e>
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067b0:	d205      	bcs.n	80067be <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067b2:	6a3b      	ldr	r3, [r7, #32]
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	60da      	str	r2, [r3, #12]
 80067bc:	e002      	b.n	80067c4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2200      	movs	r2, #0
 80067d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2200      	movs	r2, #0
 80067de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80067e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3730      	adds	r7, #48	@ 0x30
 80067e8:	46bd      	mov	sp, r7
 80067ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067ee:	bf00      	nop
 80067f0:	0800aad0 	.word	0x0800aad0
 80067f4:	00f42400 	.word	0x00f42400

080067f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006804:	f003 0308 	and.w	r3, r3, #8
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00a      	beq.n	8006822 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	430a      	orrs	r2, r1
 8006820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00a      	beq.n	8006844 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	430a      	orrs	r2, r1
 8006842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006848:	f003 0302 	and.w	r3, r3, #2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00a      	beq.n	8006866 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	430a      	orrs	r2, r1
 8006864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800686a:	f003 0304 	and.w	r3, r3, #4
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00a      	beq.n	8006888 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	430a      	orrs	r2, r1
 8006886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800688c:	f003 0310 	and.w	r3, r3, #16
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00a      	beq.n	80068aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ae:	f003 0320 	and.w	r3, r3, #32
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00a      	beq.n	80068cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d01a      	beq.n	800690e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068f6:	d10a      	bne.n	800690e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	605a      	str	r2, [r3, #4]
  }
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b098      	sub	sp, #96	@ 0x60
 8006940:	af02      	add	r7, sp, #8
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800694c:	f7fb f968 	bl	8001c20 <HAL_GetTick>
 8006950:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0308 	and.w	r3, r3, #8
 800695c:	2b08      	cmp	r3, #8
 800695e:	d12f      	bne.n	80069c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006960:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006968:	2200      	movs	r2, #0
 800696a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f88e 	bl	8006a90 <UART_WaitOnFlagUntilTimeout>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d022      	beq.n	80069c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006982:	e853 3f00 	ldrex	r3, [r3]
 8006986:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800698a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800698e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	461a      	mov	r2, r3
 8006996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006998:	647b      	str	r3, [r7, #68]	@ 0x44
 800699a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800699e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069a0:	e841 2300 	strex	r3, r2, [r1]
 80069a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1e6      	bne.n	800697a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e063      	b.n	8006a88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0304 	and.w	r3, r3, #4
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	d149      	bne.n	8006a62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069d6:	2200      	movs	r2, #0
 80069d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f857 	bl	8006a90 <UART_WaitOnFlagUntilTimeout>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d03c      	beq.n	8006a62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f0:	e853 3f00 	ldrex	r3, [r3]
 80069f4:	623b      	str	r3, [r7, #32]
   return(result);
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	461a      	mov	r2, r3
 8006a04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a06:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a0e:	e841 2300 	strex	r3, r2, [r1]
 8006a12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1e6      	bne.n	80069e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3308      	adds	r3, #8
 8006a20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	e853 3f00 	ldrex	r3, [r3]
 8006a28:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f023 0301 	bic.w	r3, r3, #1
 8006a30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3308      	adds	r3, #8
 8006a38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a3a:	61fa      	str	r2, [r7, #28]
 8006a3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3e:	69b9      	ldr	r1, [r7, #24]
 8006a40:	69fa      	ldr	r2, [r7, #28]
 8006a42:	e841 2300 	strex	r3, r2, [r1]
 8006a46:	617b      	str	r3, [r7, #20]
   return(result);
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1e5      	bne.n	8006a1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2220      	movs	r2, #32
 8006a52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e012      	b.n	8006a88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2220      	movs	r2, #32
 8006a66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3758      	adds	r7, #88	@ 0x58
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aa0:	e04f      	b.n	8006b42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa8:	d04b      	beq.n	8006b42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aaa:	f7fb f8b9 	bl	8001c20 <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	69ba      	ldr	r2, [r7, #24]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d302      	bcc.n	8006ac0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e04e      	b.n	8006b62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0304 	and.w	r3, r3, #4
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d037      	beq.n	8006b42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2b80      	cmp	r3, #128	@ 0x80
 8006ad6:	d034      	beq.n	8006b42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2b40      	cmp	r3, #64	@ 0x40
 8006adc:	d031      	beq.n	8006b42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	f003 0308 	and.w	r3, r3, #8
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d110      	bne.n	8006b0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2208      	movs	r2, #8
 8006af2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 f838 	bl	8006b6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2208      	movs	r2, #8
 8006afe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e029      	b.n	8006b62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69db      	ldr	r3, [r3, #28]
 8006b14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b1c:	d111      	bne.n	8006b42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 f81e 	bl	8006b6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2220      	movs	r2, #32
 8006b32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e00f      	b.n	8006b62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	69da      	ldr	r2, [r3, #28]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	bf0c      	ite	eq
 8006b52:	2301      	moveq	r3, #1
 8006b54:	2300      	movne	r3, #0
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	461a      	mov	r2, r3
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d0a0      	beq.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b095      	sub	sp, #84	@ 0x54
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b7a:	e853 3f00 	ldrex	r3, [r3]
 8006b7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b90:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b98:	e841 2300 	strex	r3, r2, [r1]
 8006b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1e6      	bne.n	8006b72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3308      	adds	r3, #8
 8006baa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bba:	f023 0301 	bic.w	r3, r3, #1
 8006bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3308      	adds	r3, #8
 8006bc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e3      	bne.n	8006ba4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d118      	bne.n	8006c16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	f023 0310 	bic.w	r3, r3, #16
 8006bf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c02:	61bb      	str	r3, [r7, #24]
 8006c04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	6979      	ldr	r1, [r7, #20]
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e6      	bne.n	8006be4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c2a:	bf00      	nop
 8006c2c:	3754      	adds	r7, #84	@ 0x54
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b085      	sub	sp, #20
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d101      	bne.n	8006c4c <HAL_UARTEx_DisableFifoMode+0x16>
 8006c48:	2302      	movs	r3, #2
 8006c4a:	e027      	b.n	8006c9c <HAL_UARTEx_DisableFifoMode+0x66>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2224      	movs	r2, #36	@ 0x24
 8006c58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f022 0201 	bic.w	r2, r2, #1
 8006c72:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006c7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d101      	bne.n	8006cc0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	e02d      	b.n	8006d1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2224      	movs	r2, #36	@ 0x24
 8006ccc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 0201 	bic.w	r2, r2, #1
 8006ce6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f84f 	bl	8006da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d101      	bne.n	8006d3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d38:	2302      	movs	r3, #2
 8006d3a:	e02d      	b.n	8006d98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2224      	movs	r2, #36	@ 0x24
 8006d48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 0201 	bic.w	r2, r2, #1
 8006d62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	430a      	orrs	r2, r1
 8006d76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f811 	bl	8006da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d108      	bne.n	8006dc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006dc0:	e031      	b.n	8006e26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006dc6:	2308      	movs	r3, #8
 8006dc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	0e5b      	lsrs	r3, r3, #25
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	0f5b      	lsrs	r3, r3, #29
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	7b3a      	ldrb	r2, [r7, #12]
 8006dee:	4911      	ldr	r1, [pc, #68]	@ (8006e34 <UARTEx_SetNbDataToProcess+0x94>)
 8006df0:	5c8a      	ldrb	r2, [r1, r2]
 8006df2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006df6:	7b3a      	ldrb	r2, [r7, #12]
 8006df8:	490f      	ldr	r1, [pc, #60]	@ (8006e38 <UARTEx_SetNbDataToProcess+0x98>)
 8006dfa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	7b7a      	ldrb	r2, [r7, #13]
 8006e0c:	4909      	ldr	r1, [pc, #36]	@ (8006e34 <UARTEx_SetNbDataToProcess+0x94>)
 8006e0e:	5c8a      	ldrb	r2, [r1, r2]
 8006e10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e14:	7b7a      	ldrb	r2, [r7, #13]
 8006e16:	4908      	ldr	r1, [pc, #32]	@ (8006e38 <UARTEx_SetNbDataToProcess+0x98>)
 8006e18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006e26:	bf00      	nop
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	0800aae8 	.word	0x0800aae8
 8006e38:	0800aaf0 	.word	0x0800aaf0

08006e3c <__NVIC_SetPriority>:
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	4603      	mov	r3, r0
 8006e44:	6039      	str	r1, [r7, #0]
 8006e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	db0a      	blt.n	8006e66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	490c      	ldr	r1, [pc, #48]	@ (8006e88 <__NVIC_SetPriority+0x4c>)
 8006e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e5a:	0112      	lsls	r2, r2, #4
 8006e5c:	b2d2      	uxtb	r2, r2
 8006e5e:	440b      	add	r3, r1
 8006e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006e64:	e00a      	b.n	8006e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	4908      	ldr	r1, [pc, #32]	@ (8006e8c <__NVIC_SetPriority+0x50>)
 8006e6c:	79fb      	ldrb	r3, [r7, #7]
 8006e6e:	f003 030f 	and.w	r3, r3, #15
 8006e72:	3b04      	subs	r3, #4
 8006e74:	0112      	lsls	r2, r2, #4
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	440b      	add	r3, r1
 8006e7a:	761a      	strb	r2, [r3, #24]
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	e000e100 	.word	0xe000e100
 8006e8c:	e000ed00 	.word	0xe000ed00

08006e90 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006e90:	b580      	push	{r7, lr}
 8006e92:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006e94:	4b05      	ldr	r3, [pc, #20]	@ (8006eac <SysTick_Handler+0x1c>)
 8006e96:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006e98:	f001 fd46 	bl	8008928 <xTaskGetSchedulerState>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d001      	beq.n	8006ea6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006ea2:	f002 fb41 	bl	8009528 <xPortSysTickHandler>
  }
}
 8006ea6:	bf00      	nop
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	e000e010 	.word	0xe000e010

08006eb0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	f06f 0004 	mvn.w	r0, #4
 8006eba:	f7ff ffbf 	bl	8006e3c <__NVIC_SetPriority>
#endif
}
 8006ebe:	bf00      	nop
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006eca:	f3ef 8305 	mrs	r3, IPSR
 8006ece:	603b      	str	r3, [r7, #0]
  return(result);
 8006ed0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006ed6:	f06f 0305 	mvn.w	r3, #5
 8006eda:	607b      	str	r3, [r7, #4]
 8006edc:	e00c      	b.n	8006ef8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006ede:	4b0a      	ldr	r3, [pc, #40]	@ (8006f08 <osKernelInitialize+0x44>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d105      	bne.n	8006ef2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006ee6:	4b08      	ldr	r3, [pc, #32]	@ (8006f08 <osKernelInitialize+0x44>)
 8006ee8:	2201      	movs	r2, #1
 8006eea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	607b      	str	r3, [r7, #4]
 8006ef0:	e002      	b.n	8006ef8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ef6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ef8:	687b      	ldr	r3, [r7, #4]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	2000041c 	.word	0x2000041c

08006f0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f12:	f3ef 8305 	mrs	r3, IPSR
 8006f16:	603b      	str	r3, [r7, #0]
  return(result);
 8006f18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006f1e:	f06f 0305 	mvn.w	r3, #5
 8006f22:	607b      	str	r3, [r7, #4]
 8006f24:	e010      	b.n	8006f48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006f26:	4b0b      	ldr	r3, [pc, #44]	@ (8006f54 <osKernelStart+0x48>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d109      	bne.n	8006f42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006f2e:	f7ff ffbf 	bl	8006eb0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006f32:	4b08      	ldr	r3, [pc, #32]	@ (8006f54 <osKernelStart+0x48>)
 8006f34:	2202      	movs	r2, #2
 8006f36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006f38:	f001 f892 	bl	8008060 <vTaskStartScheduler>
      stat = osOK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	607b      	str	r3, [r7, #4]
 8006f40:	e002      	b.n	8006f48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006f42:	f04f 33ff 	mov.w	r3, #4294967295
 8006f46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006f48:	687b      	ldr	r3, [r7, #4]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	2000041c 	.word	0x2000041c

08006f58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b08e      	sub	sp, #56	@ 0x38
 8006f5c:	af04      	add	r7, sp, #16
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006f64:	2300      	movs	r3, #0
 8006f66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f68:	f3ef 8305 	mrs	r3, IPSR
 8006f6c:	617b      	str	r3, [r7, #20]
  return(result);
 8006f6e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d17e      	bne.n	8007072 <osThreadNew+0x11a>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d07b      	beq.n	8007072 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006f7a:	2380      	movs	r3, #128	@ 0x80
 8006f7c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006f7e:	2318      	movs	r3, #24
 8006f80:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006f82:	2300      	movs	r3, #0
 8006f84:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006f86:	f04f 33ff 	mov.w	r3, #4294967295
 8006f8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d045      	beq.n	800701e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d002      	beq.n	8006fa0 <osThreadNew+0x48>
        name = attr->name;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d002      	beq.n	8006fae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d008      	beq.n	8006fc6 <osThreadNew+0x6e>
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	2b38      	cmp	r3, #56	@ 0x38
 8006fb8:	d805      	bhi.n	8006fc6 <osThreadNew+0x6e>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <osThreadNew+0x72>
        return (NULL);
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	e054      	b.n	8007074 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	089b      	lsrs	r3, r3, #2
 8006fd8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00e      	beq.n	8007000 <osThreadNew+0xa8>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	2ba7      	cmp	r3, #167	@ 0xa7
 8006fe8:	d90a      	bls.n	8007000 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d006      	beq.n	8007000 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d002      	beq.n	8007000 <osThreadNew+0xa8>
        mem = 1;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	61bb      	str	r3, [r7, #24]
 8006ffe:	e010      	b.n	8007022 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10c      	bne.n	8007022 <osThreadNew+0xca>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d108      	bne.n	8007022 <osThreadNew+0xca>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d104      	bne.n	8007022 <osThreadNew+0xca>
          mem = 0;
 8007018:	2300      	movs	r3, #0
 800701a:	61bb      	str	r3, [r7, #24]
 800701c:	e001      	b.n	8007022 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800701e:	2300      	movs	r3, #0
 8007020:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d110      	bne.n	800704a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007030:	9202      	str	r2, [sp, #8]
 8007032:	9301      	str	r3, [sp, #4]
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	6a3a      	ldr	r2, [r7, #32]
 800703c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 fe1a 	bl	8007c78 <xTaskCreateStatic>
 8007044:	4603      	mov	r3, r0
 8007046:	613b      	str	r3, [r7, #16]
 8007048:	e013      	b.n	8007072 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d110      	bne.n	8007072 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	b29a      	uxth	r2, r3
 8007054:	f107 0310 	add.w	r3, r7, #16
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f000 fe68 	bl	8007d38 <xTaskCreate>
 8007068:	4603      	mov	r3, r0
 800706a:	2b01      	cmp	r3, #1
 800706c:	d001      	beq.n	8007072 <osThreadNew+0x11a>
            hTask = NULL;
 800706e:	2300      	movs	r3, #0
 8007070:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007072:	693b      	ldr	r3, [r7, #16]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3728      	adds	r7, #40	@ 0x28
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007084:	f3ef 8305 	mrs	r3, IPSR
 8007088:	60bb      	str	r3, [r7, #8]
  return(result);
 800708a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800708c:	2b00      	cmp	r3, #0
 800708e:	d003      	beq.n	8007098 <osDelay+0x1c>
    stat = osErrorISR;
 8007090:	f06f 0305 	mvn.w	r3, #5
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	e007      	b.n	80070a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007098:	2300      	movs	r3, #0
 800709a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d002      	beq.n	80070a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 ffa6 	bl	8007ff4 <vTaskDelay>
    }
  }

  return (stat);
 80070a8:	68fb      	ldr	r3, [r7, #12]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
	...

080070b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4a07      	ldr	r2, [pc, #28]	@ (80070e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80070c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	4a06      	ldr	r2, [pc, #24]	@ (80070e4 <vApplicationGetIdleTaskMemory+0x30>)
 80070ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2280      	movs	r2, #128	@ 0x80
 80070d0:	601a      	str	r2, [r3, #0]
}
 80070d2:	bf00      	nop
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	20000420 	.word	0x20000420
 80070e4:	200004c8 	.word	0x200004c8

080070e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4a07      	ldr	r2, [pc, #28]	@ (8007114 <vApplicationGetTimerTaskMemory+0x2c>)
 80070f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	4a06      	ldr	r2, [pc, #24]	@ (8007118 <vApplicationGetTimerTaskMemory+0x30>)
 80070fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007106:	601a      	str	r2, [r3, #0]
}
 8007108:	bf00      	nop
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	200006c8 	.word	0x200006c8
 8007118:	20000770 	.word	0x20000770

0800711c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f103 0208 	add.w	r2, r3, #8
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f04f 32ff 	mov.w	r2, #4294967295
 8007134:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f103 0208 	add.w	r2, r3, #8
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f103 0208 	add.w	r2, r3, #8
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007176:	b480      	push	{r7}
 8007178:	b085      	sub	sp, #20
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	601a      	str	r2, [r3, #0]
}
 80071b2:	bf00      	nop
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071be:	b480      	push	{r7}
 80071c0:	b085      	sub	sp, #20
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d4:	d103      	bne.n	80071de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	e00c      	b.n	80071f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	3308      	adds	r3, #8
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	e002      	b.n	80071ec <vListInsert+0x2e>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d2f6      	bcs.n	80071e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	1c5a      	adds	r2, r3, #1
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	601a      	str	r2, [r3, #0]
}
 8007224:	bf00      	nop
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	6892      	ldr	r2, [r2, #8]
 8007246:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	6852      	ldr	r2, [r2, #4]
 8007250:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	429a      	cmp	r2, r3
 800725a:	d103      	bne.n	8007264 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689a      	ldr	r2, [r3, #8]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	1e5a      	subs	r2, r3, #1
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
}
 8007278:	4618      	mov	r0, r3
 800727a:	3714      	adds	r7, #20
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10b      	bne.n	80072b0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800729c:	f383 8811 	msr	BASEPRI, r3
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80072aa:	bf00      	nop
 80072ac:	bf00      	nop
 80072ae:	e7fd      	b.n	80072ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80072b0:	f002 f8aa 	bl	8009408 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072bc:	68f9      	ldr	r1, [r7, #12]
 80072be:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80072c0:	fb01 f303 	mul.w	r3, r1, r3
 80072c4:	441a      	add	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072e0:	3b01      	subs	r3, #1
 80072e2:	68f9      	ldr	r1, [r7, #12]
 80072e4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80072e6:	fb01 f303 	mul.w	r3, r1, r3
 80072ea:	441a      	add	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	22ff      	movs	r2, #255	@ 0xff
 80072f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	22ff      	movs	r2, #255	@ 0xff
 80072fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d114      	bne.n	8007330 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d01a      	beq.n	8007344 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3310      	adds	r3, #16
 8007312:	4618      	mov	r0, r3
 8007314:	f001 f942 	bl	800859c <xTaskRemoveFromEventList>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d012      	beq.n	8007344 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800731e:	4b0d      	ldr	r3, [pc, #52]	@ (8007354 <xQueueGenericReset+0xd0>)
 8007320:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007324:	601a      	str	r2, [r3, #0]
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	e009      	b.n	8007344 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	3310      	adds	r3, #16
 8007334:	4618      	mov	r0, r3
 8007336:	f7ff fef1 	bl	800711c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	3324      	adds	r3, #36	@ 0x24
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff feec 	bl	800711c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007344:	f002 f892 	bl	800946c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007348:	2301      	movs	r3, #1
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	e000ed04 	.word	0xe000ed04

08007358 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08e      	sub	sp, #56	@ 0x38
 800735c:	af02      	add	r7, sp, #8
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10b      	bne.n	8007384 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800737e:	bf00      	nop
 8007380:	bf00      	nop
 8007382:	e7fd      	b.n	8007380 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10b      	bne.n	80073a2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800738a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800739c:	bf00      	nop
 800739e:	bf00      	nop
 80073a0:	e7fd      	b.n	800739e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <xQueueGenericCreateStatic+0x56>
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d001      	beq.n	80073b2 <xQueueGenericCreateStatic+0x5a>
 80073ae:	2301      	movs	r3, #1
 80073b0:	e000      	b.n	80073b4 <xQueueGenericCreateStatic+0x5c>
 80073b2:	2300      	movs	r3, #0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10b      	bne.n	80073d0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80073b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	623b      	str	r3, [r7, #32]
}
 80073ca:	bf00      	nop
 80073cc:	bf00      	nop
 80073ce:	e7fd      	b.n	80073cc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d102      	bne.n	80073dc <xQueueGenericCreateStatic+0x84>
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d101      	bne.n	80073e0 <xQueueGenericCreateStatic+0x88>
 80073dc:	2301      	movs	r3, #1
 80073de:	e000      	b.n	80073e2 <xQueueGenericCreateStatic+0x8a>
 80073e0:	2300      	movs	r3, #0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10b      	bne.n	80073fe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80073e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ea:	f383 8811 	msr	BASEPRI, r3
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f3bf 8f4f 	dsb	sy
 80073f6:	61fb      	str	r3, [r7, #28]
}
 80073f8:	bf00      	nop
 80073fa:	bf00      	nop
 80073fc:	e7fd      	b.n	80073fa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80073fe:	2350      	movs	r3, #80	@ 0x50
 8007400:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2b50      	cmp	r3, #80	@ 0x50
 8007406:	d00b      	beq.n	8007420 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740c:	f383 8811 	msr	BASEPRI, r3
 8007410:	f3bf 8f6f 	isb	sy
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	61bb      	str	r3, [r7, #24]
}
 800741a:	bf00      	nop
 800741c:	bf00      	nop
 800741e:	e7fd      	b.n	800741c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007420:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00d      	beq.n	8007448 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800742c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007434:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	4613      	mov	r3, r2
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	68b9      	ldr	r1, [r7, #8]
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f000 f805 	bl	8007452 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800744a:	4618      	mov	r0, r3
 800744c:	3730      	adds	r7, #48	@ 0x30
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b084      	sub	sp, #16
 8007456:	af00      	add	r7, sp, #0
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	607a      	str	r2, [r7, #4]
 800745e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d103      	bne.n	800746e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	69ba      	ldr	r2, [r7, #24]
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	e002      	b.n	8007474 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007480:	2101      	movs	r1, #1
 8007482:	69b8      	ldr	r0, [r7, #24]
 8007484:	f7ff fefe 	bl	8007284 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	78fa      	ldrb	r2, [r7, #3]
 800748c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007490:	bf00      	nop
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b08e      	sub	sp, #56	@ 0x38
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074a6:	2300      	movs	r3, #0
 80074a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80074ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10b      	bne.n	80074cc <xQueueGenericSend+0x34>
	__asm volatile
 80074b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b8:	f383 8811 	msr	BASEPRI, r3
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80074c6:	bf00      	nop
 80074c8:	bf00      	nop
 80074ca:	e7fd      	b.n	80074c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d103      	bne.n	80074da <xQueueGenericSend+0x42>
 80074d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d101      	bne.n	80074de <xQueueGenericSend+0x46>
 80074da:	2301      	movs	r3, #1
 80074dc:	e000      	b.n	80074e0 <xQueueGenericSend+0x48>
 80074de:	2300      	movs	r3, #0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10b      	bne.n	80074fc <xQueueGenericSend+0x64>
	__asm volatile
 80074e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80074f6:	bf00      	nop
 80074f8:	bf00      	nop
 80074fa:	e7fd      	b.n	80074f8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d103      	bne.n	800750a <xQueueGenericSend+0x72>
 8007502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007506:	2b01      	cmp	r3, #1
 8007508:	d101      	bne.n	800750e <xQueueGenericSend+0x76>
 800750a:	2301      	movs	r3, #1
 800750c:	e000      	b.n	8007510 <xQueueGenericSend+0x78>
 800750e:	2300      	movs	r3, #0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10b      	bne.n	800752c <xQueueGenericSend+0x94>
	__asm volatile
 8007514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	623b      	str	r3, [r7, #32]
}
 8007526:	bf00      	nop
 8007528:	bf00      	nop
 800752a:	e7fd      	b.n	8007528 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800752c:	f001 f9fc 	bl	8008928 <xTaskGetSchedulerState>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d102      	bne.n	800753c <xQueueGenericSend+0xa4>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <xQueueGenericSend+0xa8>
 800753c:	2301      	movs	r3, #1
 800753e:	e000      	b.n	8007542 <xQueueGenericSend+0xaa>
 8007540:	2300      	movs	r3, #0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10b      	bne.n	800755e <xQueueGenericSend+0xc6>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	61fb      	str	r3, [r7, #28]
}
 8007558:	bf00      	nop
 800755a:	bf00      	nop
 800755c:	e7fd      	b.n	800755a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800755e:	f001 ff53 	bl	8009408 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007564:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800756a:	429a      	cmp	r2, r3
 800756c:	d302      	bcc.n	8007574 <xQueueGenericSend+0xdc>
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2b02      	cmp	r3, #2
 8007572:	d129      	bne.n	80075c8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	68b9      	ldr	r1, [r7, #8]
 8007578:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800757a:	f000 fa0f 	bl	800799c <prvCopyDataToQueue>
 800757e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007584:	2b00      	cmp	r3, #0
 8007586:	d010      	beq.n	80075aa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758a:	3324      	adds	r3, #36	@ 0x24
 800758c:	4618      	mov	r0, r3
 800758e:	f001 f805 	bl	800859c <xTaskRemoveFromEventList>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d013      	beq.n	80075c0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007598:	4b3f      	ldr	r3, [pc, #252]	@ (8007698 <xQueueGenericSend+0x200>)
 800759a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800759e:	601a      	str	r2, [r3, #0]
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	e00a      	b.n	80075c0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d007      	beq.n	80075c0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075b0:	4b39      	ldr	r3, [pc, #228]	@ (8007698 <xQueueGenericSend+0x200>)
 80075b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075b6:	601a      	str	r2, [r3, #0]
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075c0:	f001 ff54 	bl	800946c <vPortExitCritical>
				return pdPASS;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e063      	b.n	8007690 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d103      	bne.n	80075d6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075ce:	f001 ff4d 	bl	800946c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80075d2:	2300      	movs	r3, #0
 80075d4:	e05c      	b.n	8007690 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d106      	bne.n	80075ea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075dc:	f107 0314 	add.w	r3, r7, #20
 80075e0:	4618      	mov	r0, r3
 80075e2:	f001 f83f 	bl	8008664 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075e6:	2301      	movs	r3, #1
 80075e8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075ea:	f001 ff3f 	bl	800946c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075ee:	f000 fda7 	bl	8008140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075f2:	f001 ff09 	bl	8009408 <vPortEnterCritical>
 80075f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075fc:	b25b      	sxtb	r3, r3
 80075fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007602:	d103      	bne.n	800760c <xQueueGenericSend+0x174>
 8007604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007606:	2200      	movs	r2, #0
 8007608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800760c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007612:	b25b      	sxtb	r3, r3
 8007614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007618:	d103      	bne.n	8007622 <xQueueGenericSend+0x18a>
 800761a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007622:	f001 ff23 	bl	800946c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007626:	1d3a      	adds	r2, r7, #4
 8007628:	f107 0314 	add.w	r3, r7, #20
 800762c:	4611      	mov	r1, r2
 800762e:	4618      	mov	r0, r3
 8007630:	f001 f82e 	bl	8008690 <xTaskCheckForTimeOut>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d124      	bne.n	8007684 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800763a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800763c:	f000 faa6 	bl	8007b8c <prvIsQueueFull>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d018      	beq.n	8007678 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007648:	3310      	adds	r3, #16
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	4611      	mov	r1, r2
 800764e:	4618      	mov	r0, r3
 8007650:	f000 ff52 	bl	80084f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007654:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007656:	f000 fa31 	bl	8007abc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800765a:	f000 fd7f 	bl	800815c <xTaskResumeAll>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	f47f af7c 	bne.w	800755e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007666:	4b0c      	ldr	r3, [pc, #48]	@ (8007698 <xQueueGenericSend+0x200>)
 8007668:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	e772      	b.n	800755e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007678:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800767a:	f000 fa1f 	bl	8007abc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800767e:	f000 fd6d 	bl	800815c <xTaskResumeAll>
 8007682:	e76c      	b.n	800755e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007684:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007686:	f000 fa19 	bl	8007abc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800768a:	f000 fd67 	bl	800815c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800768e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007690:	4618      	mov	r0, r3
 8007692:	3738      	adds	r7, #56	@ 0x38
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	e000ed04 	.word	0xe000ed04

0800769c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b090      	sub	sp, #64	@ 0x40
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80076ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10b      	bne.n	80076cc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80076c6:	bf00      	nop
 80076c8:	bf00      	nop
 80076ca:	e7fd      	b.n	80076c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d103      	bne.n	80076da <xQueueGenericSendFromISR+0x3e>
 80076d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <xQueueGenericSendFromISR+0x42>
 80076da:	2301      	movs	r3, #1
 80076dc:	e000      	b.n	80076e0 <xQueueGenericSendFromISR+0x44>
 80076de:	2300      	movs	r3, #0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10b      	bne.n	80076fc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80076e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80076f6:	bf00      	nop
 80076f8:	bf00      	nop
 80076fa:	e7fd      	b.n	80076f8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d103      	bne.n	800770a <xQueueGenericSendFromISR+0x6e>
 8007702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007706:	2b01      	cmp	r3, #1
 8007708:	d101      	bne.n	800770e <xQueueGenericSendFromISR+0x72>
 800770a:	2301      	movs	r3, #1
 800770c:	e000      	b.n	8007710 <xQueueGenericSendFromISR+0x74>
 800770e:	2300      	movs	r3, #0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10b      	bne.n	800772c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	623b      	str	r3, [r7, #32]
}
 8007726:	bf00      	nop
 8007728:	bf00      	nop
 800772a:	e7fd      	b.n	8007728 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800772c:	f001 ff4c 	bl	80095c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007730:	f3ef 8211 	mrs	r2, BASEPRI
 8007734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	61fa      	str	r2, [r7, #28]
 8007746:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007748:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800774a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800774c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007754:	429a      	cmp	r2, r3
 8007756:	d302      	bcc.n	800775e <xQueueGenericSendFromISR+0xc2>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b02      	cmp	r3, #2
 800775c:	d12f      	bne.n	80077be <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800775e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007760:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007764:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800776c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	68b9      	ldr	r1, [r7, #8]
 8007772:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007774:	f000 f912 	bl	800799c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007778:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800777c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007780:	d112      	bne.n	80077a8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007786:	2b00      	cmp	r3, #0
 8007788:	d016      	beq.n	80077b8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800778a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800778c:	3324      	adds	r3, #36	@ 0x24
 800778e:	4618      	mov	r0, r3
 8007790:	f000 ff04 	bl	800859c <xTaskRemoveFromEventList>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00e      	beq.n	80077b8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00b      	beq.n	80077b8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	e007      	b.n	80077b8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80077ac:	3301      	adds	r3, #1
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	b25a      	sxtb	r2, r3
 80077b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80077b8:	2301      	movs	r3, #1
 80077ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80077bc:	e001      	b.n	80077c2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077c4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3740      	adds	r7, #64	@ 0x40
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08c      	sub	sp, #48	@ 0x30
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80077e4:	2300      	movs	r3, #0
 80077e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10b      	bne.n	800780a <xQueueReceive+0x32>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	623b      	str	r3, [r7, #32]
}
 8007804:	bf00      	nop
 8007806:	bf00      	nop
 8007808:	e7fd      	b.n	8007806 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d103      	bne.n	8007818 <xQueueReceive+0x40>
 8007810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007814:	2b00      	cmp	r3, #0
 8007816:	d101      	bne.n	800781c <xQueueReceive+0x44>
 8007818:	2301      	movs	r3, #1
 800781a:	e000      	b.n	800781e <xQueueReceive+0x46>
 800781c:	2300      	movs	r3, #0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10b      	bne.n	800783a <xQueueReceive+0x62>
	__asm volatile
 8007822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007826:	f383 8811 	msr	BASEPRI, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	61fb      	str	r3, [r7, #28]
}
 8007834:	bf00      	nop
 8007836:	bf00      	nop
 8007838:	e7fd      	b.n	8007836 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800783a:	f001 f875 	bl	8008928 <xTaskGetSchedulerState>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d102      	bne.n	800784a <xQueueReceive+0x72>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <xQueueReceive+0x76>
 800784a:	2301      	movs	r3, #1
 800784c:	e000      	b.n	8007850 <xQueueReceive+0x78>
 800784e:	2300      	movs	r3, #0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10b      	bne.n	800786c <xQueueReceive+0x94>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	61bb      	str	r3, [r7, #24]
}
 8007866:	bf00      	nop
 8007868:	bf00      	nop
 800786a:	e7fd      	b.n	8007868 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800786c:	f001 fdcc 	bl	8009408 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007874:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007878:	2b00      	cmp	r3, #0
 800787a:	d01f      	beq.n	80078bc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800787c:	68b9      	ldr	r1, [r7, #8]
 800787e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007880:	f000 f8f6 	bl	8007a70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007886:	1e5a      	subs	r2, r3, #1
 8007888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800788a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800788c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00f      	beq.n	80078b4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007896:	3310      	adds	r3, #16
 8007898:	4618      	mov	r0, r3
 800789a:	f000 fe7f 	bl	800859c <xTaskRemoveFromEventList>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d007      	beq.n	80078b4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078a4:	4b3c      	ldr	r3, [pc, #240]	@ (8007998 <xQueueReceive+0x1c0>)
 80078a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078b4:	f001 fdda 	bl	800946c <vPortExitCritical>
				return pdPASS;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e069      	b.n	8007990 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d103      	bne.n	80078ca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078c2:	f001 fdd3 	bl	800946c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078c6:	2300      	movs	r3, #0
 80078c8:	e062      	b.n	8007990 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d106      	bne.n	80078de <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078d0:	f107 0310 	add.w	r3, r7, #16
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 fec5 	bl	8008664 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078da:	2301      	movs	r3, #1
 80078dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078de:	f001 fdc5 	bl	800946c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078e2:	f000 fc2d 	bl	8008140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078e6:	f001 fd8f 	bl	8009408 <vPortEnterCritical>
 80078ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078f0:	b25b      	sxtb	r3, r3
 80078f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f6:	d103      	bne.n	8007900 <xQueueReceive+0x128>
 80078f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007902:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007906:	b25b      	sxtb	r3, r3
 8007908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790c:	d103      	bne.n	8007916 <xQueueReceive+0x13e>
 800790e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007910:	2200      	movs	r2, #0
 8007912:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007916:	f001 fda9 	bl	800946c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800791a:	1d3a      	adds	r2, r7, #4
 800791c:	f107 0310 	add.w	r3, r7, #16
 8007920:	4611      	mov	r1, r2
 8007922:	4618      	mov	r0, r3
 8007924:	f000 feb4 	bl	8008690 <xTaskCheckForTimeOut>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d123      	bne.n	8007976 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800792e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007930:	f000 f916 	bl	8007b60 <prvIsQueueEmpty>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d017      	beq.n	800796a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800793a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793c:	3324      	adds	r3, #36	@ 0x24
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	4611      	mov	r1, r2
 8007942:	4618      	mov	r0, r3
 8007944:	f000 fdd8 	bl	80084f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007948:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800794a:	f000 f8b7 	bl	8007abc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800794e:	f000 fc05 	bl	800815c <xTaskResumeAll>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d189      	bne.n	800786c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007958:	4b0f      	ldr	r3, [pc, #60]	@ (8007998 <xQueueReceive+0x1c0>)
 800795a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800795e:	601a      	str	r2, [r3, #0]
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	e780      	b.n	800786c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800796a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800796c:	f000 f8a6 	bl	8007abc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007970:	f000 fbf4 	bl	800815c <xTaskResumeAll>
 8007974:	e77a      	b.n	800786c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007976:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007978:	f000 f8a0 	bl	8007abc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800797c:	f000 fbee 	bl	800815c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007980:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007982:	f000 f8ed 	bl	8007b60 <prvIsQueueEmpty>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	f43f af6f 	beq.w	800786c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800798e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007990:	4618      	mov	r0, r3
 8007992:	3730      	adds	r7, #48	@ 0x30
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	e000ed04 	.word	0xe000ed04

0800799c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80079a8:	2300      	movs	r3, #0
 80079aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10d      	bne.n	80079d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d14d      	bne.n	8007a5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 ffcc 	bl	8008964 <xTaskPriorityDisinherit>
 80079cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	609a      	str	r2, [r3, #8]
 80079d4:	e043      	b.n	8007a5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d119      	bne.n	8007a10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6858      	ldr	r0, [r3, #4]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079e4:	461a      	mov	r2, r3
 80079e6:	68b9      	ldr	r1, [r7, #8]
 80079e8:	f002 faf9 	bl	8009fde <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079f4:	441a      	add	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d32b      	bcc.n	8007a5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	605a      	str	r2, [r3, #4]
 8007a0e:	e026      	b.n	8007a5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	68d8      	ldr	r0, [r3, #12]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a18:	461a      	mov	r2, r3
 8007a1a:	68b9      	ldr	r1, [r7, #8]
 8007a1c:	f002 fadf 	bl	8009fde <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	68da      	ldr	r2, [r3, #12]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a28:	425b      	negs	r3, r3
 8007a2a:	441a      	add	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d207      	bcs.n	8007a4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a44:	425b      	negs	r3, r3
 8007a46:	441a      	add	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d105      	bne.n	8007a5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	1c5a      	adds	r2, r3, #1
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007a66:	697b      	ldr	r3, [r7, #20]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d018      	beq.n	8007ab4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68da      	ldr	r2, [r3, #12]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a8a:	441a      	add	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	68da      	ldr	r2, [r3, #12]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d303      	bcc.n	8007aa4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68d9      	ldr	r1, [r3, #12]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aac:	461a      	mov	r2, r3
 8007aae:	6838      	ldr	r0, [r7, #0]
 8007ab0:	f002 fa95 	bl	8009fde <memcpy>
	}
}
 8007ab4:	bf00      	nop
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ac4:	f001 fca0 	bl	8009408 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ace:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ad0:	e011      	b.n	8007af6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d012      	beq.n	8007b00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	3324      	adds	r3, #36	@ 0x24
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 fd5c 	bl	800859c <xTaskRemoveFromEventList>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d001      	beq.n	8007aee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007aea:	f000 fe35 	bl	8008758 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	dce9      	bgt.n	8007ad2 <prvUnlockQueue+0x16>
 8007afe:	e000      	b.n	8007b02 <prvUnlockQueue+0x46>
					break;
 8007b00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	22ff      	movs	r2, #255	@ 0xff
 8007b06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007b0a:	f001 fcaf 	bl	800946c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b0e:	f001 fc7b 	bl	8009408 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b1a:	e011      	b.n	8007b40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d012      	beq.n	8007b4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	3310      	adds	r3, #16
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 fd37 	bl	800859c <xTaskRemoveFromEventList>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d001      	beq.n	8007b38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b34:	f000 fe10 	bl	8008758 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	dce9      	bgt.n	8007b1c <prvUnlockQueue+0x60>
 8007b48:	e000      	b.n	8007b4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	22ff      	movs	r2, #255	@ 0xff
 8007b50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007b54:	f001 fc8a 	bl	800946c <vPortExitCritical>
}
 8007b58:	bf00      	nop
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b68:	f001 fc4e 	bl	8009408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d102      	bne.n	8007b7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b74:	2301      	movs	r3, #1
 8007b76:	60fb      	str	r3, [r7, #12]
 8007b78:	e001      	b.n	8007b7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b7e:	f001 fc75 	bl	800946c <vPortExitCritical>

	return xReturn;
 8007b82:	68fb      	ldr	r3, [r7, #12]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b94:	f001 fc38 	bl	8009408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d102      	bne.n	8007baa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	60fb      	str	r3, [r7, #12]
 8007ba8:	e001      	b.n	8007bae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007baa:	2300      	movs	r3, #0
 8007bac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bae:	f001 fc5d 	bl	800946c <vPortExitCritical>

	return xReturn;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	e014      	b.n	8007bf6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007bcc:	4a0f      	ldr	r2, [pc, #60]	@ (8007c0c <vQueueAddToRegistry+0x50>)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10b      	bne.n	8007bf0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007bd8:	490c      	ldr	r1, [pc, #48]	@ (8007c0c <vQueueAddToRegistry+0x50>)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	683a      	ldr	r2, [r7, #0]
 8007bde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007be2:	4a0a      	ldr	r2, [pc, #40]	@ (8007c0c <vQueueAddToRegistry+0x50>)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	4413      	add	r3, r2
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007bee:	e006      	b.n	8007bfe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	60fb      	str	r3, [r7, #12]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b07      	cmp	r3, #7
 8007bfa:	d9e7      	bls.n	8007bcc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007bfc:	bf00      	nop
 8007bfe:	bf00      	nop
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	20000b70 	.word	0x20000b70

08007c10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007c20:	f001 fbf2 	bl	8009408 <vPortEnterCritical>
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c2a:	b25b      	sxtb	r3, r3
 8007c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c30:	d103      	bne.n	8007c3a <vQueueWaitForMessageRestricted+0x2a>
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c40:	b25b      	sxtb	r3, r3
 8007c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c46:	d103      	bne.n	8007c50 <vQueueWaitForMessageRestricted+0x40>
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c50:	f001 fc0c 	bl	800946c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d106      	bne.n	8007c6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	3324      	adds	r3, #36	@ 0x24
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	68b9      	ldr	r1, [r7, #8]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 fc6d 	bl	8008544 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c6a:	6978      	ldr	r0, [r7, #20]
 8007c6c:	f7ff ff26 	bl	8007abc <prvUnlockQueue>
	}
 8007c70:	bf00      	nop
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08e      	sub	sp, #56	@ 0x38
 8007c7c:	af04      	add	r7, sp, #16
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
 8007c84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10b      	bne.n	8007ca4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	623b      	str	r3, [r7, #32]
}
 8007c9e:	bf00      	nop
 8007ca0:	bf00      	nop
 8007ca2:	e7fd      	b.n	8007ca0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10b      	bne.n	8007cc2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	61fb      	str	r3, [r7, #28]
}
 8007cbc:	bf00      	nop
 8007cbe:	bf00      	nop
 8007cc0:	e7fd      	b.n	8007cbe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007cc2:	23a8      	movs	r3, #168	@ 0xa8
 8007cc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	2ba8      	cmp	r3, #168	@ 0xa8
 8007cca:	d00b      	beq.n	8007ce4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	61bb      	str	r3, [r7, #24]
}
 8007cde:	bf00      	nop
 8007ce0:	bf00      	nop
 8007ce2:	e7fd      	b.n	8007ce0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ce4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d01e      	beq.n	8007d2a <xTaskCreateStatic+0xb2>
 8007cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d01b      	beq.n	8007d2a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007cfa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfe:	2202      	movs	r2, #2
 8007d00:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d04:	2300      	movs	r3, #0
 8007d06:	9303      	str	r3, [sp, #12]
 8007d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0a:	9302      	str	r3, [sp, #8]
 8007d0c:	f107 0314 	add.w	r3, r7, #20
 8007d10:	9301      	str	r3, [sp, #4]
 8007d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	68b9      	ldr	r1, [r7, #8]
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 f851 	bl	8007dc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007d24:	f000 f8f6 	bl	8007f14 <prvAddNewTaskToReadyList>
 8007d28:	e001      	b.n	8007d2e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d2e:	697b      	ldr	r3, [r7, #20]
	}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3728      	adds	r7, #40	@ 0x28
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08c      	sub	sp, #48	@ 0x30
 8007d3c:	af04      	add	r7, sp, #16
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	603b      	str	r3, [r7, #0]
 8007d44:	4613      	mov	r3, r2
 8007d46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d48:	88fb      	ldrh	r3, [r7, #6]
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f001 fc7d 	bl	800964c <pvPortMalloc>
 8007d52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00e      	beq.n	8007d78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d5a:	20a8      	movs	r0, #168	@ 0xa8
 8007d5c:	f001 fc76 	bl	800964c <pvPortMalloc>
 8007d60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d003      	beq.n	8007d70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d6e:	e005      	b.n	8007d7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d70:	6978      	ldr	r0, [r7, #20]
 8007d72:	f001 fd39 	bl	80097e8 <vPortFree>
 8007d76:	e001      	b.n	8007d7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d017      	beq.n	8007db2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d8a:	88fa      	ldrh	r2, [r7, #6]
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	9303      	str	r3, [sp, #12]
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	9302      	str	r3, [sp, #8]
 8007d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d96:	9301      	str	r3, [sp, #4]
 8007d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	68b9      	ldr	r1, [r7, #8]
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f000 f80f 	bl	8007dc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007da6:	69f8      	ldr	r0, [r7, #28]
 8007da8:	f000 f8b4 	bl	8007f14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007dac:	2301      	movs	r3, #1
 8007dae:	61bb      	str	r3, [r7, #24]
 8007db0:	e002      	b.n	8007db8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007db2:	f04f 33ff 	mov.w	r3, #4294967295
 8007db6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007db8:	69bb      	ldr	r3, [r7, #24]
	}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3720      	adds	r7, #32
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
	...

08007dc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b088      	sub	sp, #32
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
 8007dd0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	461a      	mov	r2, r3
 8007ddc:	21a5      	movs	r1, #165	@ 0xa5
 8007dde:	f002 f82d 	bl	8009e3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007dec:	3b01      	subs	r3, #1
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	4413      	add	r3, r2
 8007df2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	f023 0307 	bic.w	r3, r3, #7
 8007dfa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	f003 0307 	and.w	r3, r3, #7
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00b      	beq.n	8007e1e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	617b      	str	r3, [r7, #20]
}
 8007e18:	bf00      	nop
 8007e1a:	bf00      	nop
 8007e1c:	e7fd      	b.n	8007e1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d01f      	beq.n	8007e64 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e24:	2300      	movs	r3, #0
 8007e26:	61fb      	str	r3, [r7, #28]
 8007e28:	e012      	b.n	8007e50 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	4413      	add	r3, r2
 8007e30:	7819      	ldrb	r1, [r3, #0]
 8007e32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	4413      	add	r3, r2
 8007e38:	3334      	adds	r3, #52	@ 0x34
 8007e3a:	460a      	mov	r2, r1
 8007e3c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	4413      	add	r3, r2
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d006      	beq.n	8007e58 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	61fb      	str	r3, [r7, #28]
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	2b0f      	cmp	r3, #15
 8007e54:	d9e9      	bls.n	8007e2a <prvInitialiseNewTask+0x66>
 8007e56:	e000      	b.n	8007e5a <prvInitialiseNewTask+0x96>
			{
				break;
 8007e58:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e62:	e003      	b.n	8007e6c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6e:	2b37      	cmp	r3, #55	@ 0x37
 8007e70:	d901      	bls.n	8007e76 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e72:	2337      	movs	r3, #55	@ 0x37
 8007e74:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e80:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e84:	2200      	movs	r2, #0
 8007e86:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7ff f965 	bl	800715c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e94:	3318      	adds	r3, #24
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7ff f960 	bl	800715c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ea0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eaa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eb0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec4:	3354      	adds	r3, #84	@ 0x54
 8007ec6:	224c      	movs	r2, #76	@ 0x4c
 8007ec8:	2100      	movs	r1, #0
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f001 ffb6 	bl	8009e3c <memset>
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed2:	4a0d      	ldr	r2, [pc, #52]	@ (8007f08 <prvInitialiseNewTask+0x144>)
 8007ed4:	659a      	str	r2, [r3, #88]	@ 0x58
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed8:	4a0c      	ldr	r2, [pc, #48]	@ (8007f0c <prvInitialiseNewTask+0x148>)
 8007eda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ede:	4a0c      	ldr	r2, [pc, #48]	@ (8007f10 <prvInitialiseNewTask+0x14c>)
 8007ee0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	68f9      	ldr	r1, [r7, #12]
 8007ee6:	69b8      	ldr	r0, [r7, #24]
 8007ee8:	f001 f95a 	bl	80091a0 <pxPortInitialiseStack>
 8007eec:	4602      	mov	r2, r0
 8007eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d002      	beq.n	8007efe <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007efa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007efc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007efe:	bf00      	nop
 8007f00:	3720      	adds	r7, #32
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	20001e04 	.word	0x20001e04
 8007f0c:	20001e6c 	.word	0x20001e6c
 8007f10:	20001ed4 	.word	0x20001ed4

08007f14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f1c:	f001 fa74 	bl	8009408 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f20:	4b2d      	ldr	r3, [pc, #180]	@ (8007fd8 <prvAddNewTaskToReadyList+0xc4>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3301      	adds	r3, #1
 8007f26:	4a2c      	ldr	r2, [pc, #176]	@ (8007fd8 <prvAddNewTaskToReadyList+0xc4>)
 8007f28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8007fdc <prvAddNewTaskToReadyList+0xc8>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d109      	bne.n	8007f46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f32:	4a2a      	ldr	r2, [pc, #168]	@ (8007fdc <prvAddNewTaskToReadyList+0xc8>)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f38:	4b27      	ldr	r3, [pc, #156]	@ (8007fd8 <prvAddNewTaskToReadyList+0xc4>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d110      	bne.n	8007f62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f40:	f000 fc2e 	bl	80087a0 <prvInitialiseTaskLists>
 8007f44:	e00d      	b.n	8007f62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f46:	4b26      	ldr	r3, [pc, #152]	@ (8007fe0 <prvAddNewTaskToReadyList+0xcc>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d109      	bne.n	8007f62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f4e:	4b23      	ldr	r3, [pc, #140]	@ (8007fdc <prvAddNewTaskToReadyList+0xc8>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d802      	bhi.n	8007f62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8007fdc <prvAddNewTaskToReadyList+0xc8>)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f62:	4b20      	ldr	r3, [pc, #128]	@ (8007fe4 <prvAddNewTaskToReadyList+0xd0>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3301      	adds	r3, #1
 8007f68:	4a1e      	ldr	r2, [pc, #120]	@ (8007fe4 <prvAddNewTaskToReadyList+0xd0>)
 8007f6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007fe4 <prvAddNewTaskToReadyList+0xd0>)
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f78:	4b1b      	ldr	r3, [pc, #108]	@ (8007fe8 <prvAddNewTaskToReadyList+0xd4>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d903      	bls.n	8007f88 <prvAddNewTaskToReadyList+0x74>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f84:	4a18      	ldr	r2, [pc, #96]	@ (8007fe8 <prvAddNewTaskToReadyList+0xd4>)
 8007f86:	6013      	str	r3, [r2, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4413      	add	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4a15      	ldr	r2, [pc, #84]	@ (8007fec <prvAddNewTaskToReadyList+0xd8>)
 8007f96:	441a      	add	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	3304      	adds	r3, #4
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	4610      	mov	r0, r2
 8007fa0:	f7ff f8e9 	bl	8007176 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007fa4:	f001 fa62 	bl	800946c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8007fe0 <prvAddNewTaskToReadyList+0xcc>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00e      	beq.n	8007fce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8007fdc <prvAddNewTaskToReadyList+0xc8>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d207      	bcs.n	8007fce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8007ff0 <prvAddNewTaskToReadyList+0xdc>)
 8007fc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fce:	bf00      	nop
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	20001084 	.word	0x20001084
 8007fdc:	20000bb0 	.word	0x20000bb0
 8007fe0:	20001090 	.word	0x20001090
 8007fe4:	200010a0 	.word	0x200010a0
 8007fe8:	2000108c 	.word	0x2000108c
 8007fec:	20000bb4 	.word	0x20000bb4
 8007ff0:	e000ed04 	.word	0xe000ed04

08007ff4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d018      	beq.n	8008038 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008006:	4b14      	ldr	r3, [pc, #80]	@ (8008058 <vTaskDelay+0x64>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00b      	beq.n	8008026 <vTaskDelay+0x32>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	60bb      	str	r3, [r7, #8]
}
 8008020:	bf00      	nop
 8008022:	bf00      	nop
 8008024:	e7fd      	b.n	8008022 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008026:	f000 f88b 	bl	8008140 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800802a:	2100      	movs	r1, #0
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fd09 	bl	8008a44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008032:	f000 f893 	bl	800815c <xTaskResumeAll>
 8008036:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d107      	bne.n	800804e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800803e:	4b07      	ldr	r3, [pc, #28]	@ (800805c <vTaskDelay+0x68>)
 8008040:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800804e:	bf00      	nop
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	200010ac 	.word	0x200010ac
 800805c:	e000ed04 	.word	0xe000ed04

08008060 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b08a      	sub	sp, #40	@ 0x28
 8008064:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008066:	2300      	movs	r3, #0
 8008068:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800806a:	2300      	movs	r3, #0
 800806c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800806e:	463a      	mov	r2, r7
 8008070:	1d39      	adds	r1, r7, #4
 8008072:	f107 0308 	add.w	r3, r7, #8
 8008076:	4618      	mov	r0, r3
 8008078:	f7ff f81c 	bl	80070b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	9202      	str	r2, [sp, #8]
 8008084:	9301      	str	r3, [sp, #4]
 8008086:	2300      	movs	r3, #0
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	2300      	movs	r3, #0
 800808c:	460a      	mov	r2, r1
 800808e:	4924      	ldr	r1, [pc, #144]	@ (8008120 <vTaskStartScheduler+0xc0>)
 8008090:	4824      	ldr	r0, [pc, #144]	@ (8008124 <vTaskStartScheduler+0xc4>)
 8008092:	f7ff fdf1 	bl	8007c78 <xTaskCreateStatic>
 8008096:	4603      	mov	r3, r0
 8008098:	4a23      	ldr	r2, [pc, #140]	@ (8008128 <vTaskStartScheduler+0xc8>)
 800809a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800809c:	4b22      	ldr	r3, [pc, #136]	@ (8008128 <vTaskStartScheduler+0xc8>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d002      	beq.n	80080aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80080a4:	2301      	movs	r3, #1
 80080a6:	617b      	str	r3, [r7, #20]
 80080a8:	e001      	b.n	80080ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80080aa:	2300      	movs	r3, #0
 80080ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d102      	bne.n	80080ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80080b4:	f000 fd1a 	bl	8008aec <xTimerCreateTimerTask>
 80080b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d11b      	bne.n	80080f8 <vTaskStartScheduler+0x98>
	__asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	613b      	str	r3, [r7, #16]
}
 80080d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80080d4:	4b15      	ldr	r3, [pc, #84]	@ (800812c <vTaskStartScheduler+0xcc>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	3354      	adds	r3, #84	@ 0x54
 80080da:	4a15      	ldr	r2, [pc, #84]	@ (8008130 <vTaskStartScheduler+0xd0>)
 80080dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80080de:	4b15      	ldr	r3, [pc, #84]	@ (8008134 <vTaskStartScheduler+0xd4>)
 80080e0:	f04f 32ff 	mov.w	r2, #4294967295
 80080e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80080e6:	4b14      	ldr	r3, [pc, #80]	@ (8008138 <vTaskStartScheduler+0xd8>)
 80080e8:	2201      	movs	r2, #1
 80080ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80080ec:	4b13      	ldr	r3, [pc, #76]	@ (800813c <vTaskStartScheduler+0xdc>)
 80080ee:	2200      	movs	r2, #0
 80080f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80080f2:	f001 f8e5 	bl	80092c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80080f6:	e00f      	b.n	8008118 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080fe:	d10b      	bne.n	8008118 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	60fb      	str	r3, [r7, #12]
}
 8008112:	bf00      	nop
 8008114:	bf00      	nop
 8008116:	e7fd      	b.n	8008114 <vTaskStartScheduler+0xb4>
}
 8008118:	bf00      	nop
 800811a:	3718      	adds	r7, #24
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	0800aa7c 	.word	0x0800aa7c
 8008124:	08008771 	.word	0x08008771
 8008128:	200010a8 	.word	0x200010a8
 800812c:	20000bb0 	.word	0x20000bb0
 8008130:	2000001c 	.word	0x2000001c
 8008134:	200010a4 	.word	0x200010a4
 8008138:	20001090 	.word	0x20001090
 800813c:	20001088 	.word	0x20001088

08008140 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008140:	b480      	push	{r7}
 8008142:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008144:	4b04      	ldr	r3, [pc, #16]	@ (8008158 <vTaskSuspendAll+0x18>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	3301      	adds	r3, #1
 800814a:	4a03      	ldr	r2, [pc, #12]	@ (8008158 <vTaskSuspendAll+0x18>)
 800814c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800814e:	bf00      	nop
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	200010ac 	.word	0x200010ac

0800815c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008162:	2300      	movs	r3, #0
 8008164:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008166:	2300      	movs	r3, #0
 8008168:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800816a:	4b42      	ldr	r3, [pc, #264]	@ (8008274 <xTaskResumeAll+0x118>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10b      	bne.n	800818a <xTaskResumeAll+0x2e>
	__asm volatile
 8008172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	603b      	str	r3, [r7, #0]
}
 8008184:	bf00      	nop
 8008186:	bf00      	nop
 8008188:	e7fd      	b.n	8008186 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800818a:	f001 f93d 	bl	8009408 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800818e:	4b39      	ldr	r3, [pc, #228]	@ (8008274 <xTaskResumeAll+0x118>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3b01      	subs	r3, #1
 8008194:	4a37      	ldr	r2, [pc, #220]	@ (8008274 <xTaskResumeAll+0x118>)
 8008196:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008198:	4b36      	ldr	r3, [pc, #216]	@ (8008274 <xTaskResumeAll+0x118>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d162      	bne.n	8008266 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80081a0:	4b35      	ldr	r3, [pc, #212]	@ (8008278 <xTaskResumeAll+0x11c>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d05e      	beq.n	8008266 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081a8:	e02f      	b.n	800820a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081aa:	4b34      	ldr	r3, [pc, #208]	@ (800827c <xTaskResumeAll+0x120>)
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	3318      	adds	r3, #24
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7ff f83a 	bl	8007230 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	3304      	adds	r3, #4
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7ff f835 	bl	8007230 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ca:	4b2d      	ldr	r3, [pc, #180]	@ (8008280 <xTaskResumeAll+0x124>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d903      	bls.n	80081da <xTaskResumeAll+0x7e>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d6:	4a2a      	ldr	r2, [pc, #168]	@ (8008280 <xTaskResumeAll+0x124>)
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4a27      	ldr	r2, [pc, #156]	@ (8008284 <xTaskResumeAll+0x128>)
 80081e8:	441a      	add	r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	3304      	adds	r3, #4
 80081ee:	4619      	mov	r1, r3
 80081f0:	4610      	mov	r0, r2
 80081f2:	f7fe ffc0 	bl	8007176 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081fa:	4b23      	ldr	r3, [pc, #140]	@ (8008288 <xTaskResumeAll+0x12c>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008200:	429a      	cmp	r2, r3
 8008202:	d302      	bcc.n	800820a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008204:	4b21      	ldr	r3, [pc, #132]	@ (800828c <xTaskResumeAll+0x130>)
 8008206:	2201      	movs	r2, #1
 8008208:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800820a:	4b1c      	ldr	r3, [pc, #112]	@ (800827c <xTaskResumeAll+0x120>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1cb      	bne.n	80081aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008218:	f000 fb66 	bl	80088e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800821c:	4b1c      	ldr	r3, [pc, #112]	@ (8008290 <xTaskResumeAll+0x134>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d010      	beq.n	800824a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008228:	f000 f846 	bl	80082b8 <xTaskIncrementTick>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d002      	beq.n	8008238 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008232:	4b16      	ldr	r3, [pc, #88]	@ (800828c <xTaskResumeAll+0x130>)
 8008234:	2201      	movs	r2, #1
 8008236:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	3b01      	subs	r3, #1
 800823c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1f1      	bne.n	8008228 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008244:	4b12      	ldr	r3, [pc, #72]	@ (8008290 <xTaskResumeAll+0x134>)
 8008246:	2200      	movs	r2, #0
 8008248:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800824a:	4b10      	ldr	r3, [pc, #64]	@ (800828c <xTaskResumeAll+0x130>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d009      	beq.n	8008266 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008252:	2301      	movs	r3, #1
 8008254:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008256:	4b0f      	ldr	r3, [pc, #60]	@ (8008294 <xTaskResumeAll+0x138>)
 8008258:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008266:	f001 f901 	bl	800946c <vPortExitCritical>

	return xAlreadyYielded;
 800826a:	68bb      	ldr	r3, [r7, #8]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	200010ac 	.word	0x200010ac
 8008278:	20001084 	.word	0x20001084
 800827c:	20001044 	.word	0x20001044
 8008280:	2000108c 	.word	0x2000108c
 8008284:	20000bb4 	.word	0x20000bb4
 8008288:	20000bb0 	.word	0x20000bb0
 800828c:	20001098 	.word	0x20001098
 8008290:	20001094 	.word	0x20001094
 8008294:	e000ed04 	.word	0xe000ed04

08008298 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800829e:	4b05      	ldr	r3, [pc, #20]	@ (80082b4 <xTaskGetTickCount+0x1c>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80082a4:	687b      	ldr	r3, [r7, #4]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	20001088 	.word	0x20001088

080082b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80082be:	2300      	movs	r3, #0
 80082c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082c2:	4b4f      	ldr	r3, [pc, #316]	@ (8008400 <xTaskIncrementTick+0x148>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f040 8090 	bne.w	80083ec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80082cc:	4b4d      	ldr	r3, [pc, #308]	@ (8008404 <xTaskIncrementTick+0x14c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3301      	adds	r3, #1
 80082d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80082d4:	4a4b      	ldr	r2, [pc, #300]	@ (8008404 <xTaskIncrementTick+0x14c>)
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d121      	bne.n	8008324 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80082e0:	4b49      	ldr	r3, [pc, #292]	@ (8008408 <xTaskIncrementTick+0x150>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00b      	beq.n	8008302 <xTaskIncrementTick+0x4a>
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	603b      	str	r3, [r7, #0]
}
 80082fc:	bf00      	nop
 80082fe:	bf00      	nop
 8008300:	e7fd      	b.n	80082fe <xTaskIncrementTick+0x46>
 8008302:	4b41      	ldr	r3, [pc, #260]	@ (8008408 <xTaskIncrementTick+0x150>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	4b40      	ldr	r3, [pc, #256]	@ (800840c <xTaskIncrementTick+0x154>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a3e      	ldr	r2, [pc, #248]	@ (8008408 <xTaskIncrementTick+0x150>)
 800830e:	6013      	str	r3, [r2, #0]
 8008310:	4a3e      	ldr	r2, [pc, #248]	@ (800840c <xTaskIncrementTick+0x154>)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	4b3e      	ldr	r3, [pc, #248]	@ (8008410 <xTaskIncrementTick+0x158>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	3301      	adds	r3, #1
 800831c:	4a3c      	ldr	r2, [pc, #240]	@ (8008410 <xTaskIncrementTick+0x158>)
 800831e:	6013      	str	r3, [r2, #0]
 8008320:	f000 fae2 	bl	80088e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008324:	4b3b      	ldr	r3, [pc, #236]	@ (8008414 <xTaskIncrementTick+0x15c>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	429a      	cmp	r2, r3
 800832c:	d349      	bcc.n	80083c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800832e:	4b36      	ldr	r3, [pc, #216]	@ (8008408 <xTaskIncrementTick+0x150>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d104      	bne.n	8008342 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008338:	4b36      	ldr	r3, [pc, #216]	@ (8008414 <xTaskIncrementTick+0x15c>)
 800833a:	f04f 32ff 	mov.w	r2, #4294967295
 800833e:	601a      	str	r2, [r3, #0]
					break;
 8008340:	e03f      	b.n	80083c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008342:	4b31      	ldr	r3, [pc, #196]	@ (8008408 <xTaskIncrementTick+0x150>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	429a      	cmp	r2, r3
 8008358:	d203      	bcs.n	8008362 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800835a:	4a2e      	ldr	r2, [pc, #184]	@ (8008414 <xTaskIncrementTick+0x15c>)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008360:	e02f      	b.n	80083c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	3304      	adds	r3, #4
 8008366:	4618      	mov	r0, r3
 8008368:	f7fe ff62 	bl	8007230 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008370:	2b00      	cmp	r3, #0
 8008372:	d004      	beq.n	800837e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	3318      	adds	r3, #24
 8008378:	4618      	mov	r0, r3
 800837a:	f7fe ff59 	bl	8007230 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008382:	4b25      	ldr	r3, [pc, #148]	@ (8008418 <xTaskIncrementTick+0x160>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	429a      	cmp	r2, r3
 8008388:	d903      	bls.n	8008392 <xTaskIncrementTick+0xda>
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838e:	4a22      	ldr	r2, [pc, #136]	@ (8008418 <xTaskIncrementTick+0x160>)
 8008390:	6013      	str	r3, [r2, #0]
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008396:	4613      	mov	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4a1f      	ldr	r2, [pc, #124]	@ (800841c <xTaskIncrementTick+0x164>)
 80083a0:	441a      	add	r2, r3
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	3304      	adds	r3, #4
 80083a6:	4619      	mov	r1, r3
 80083a8:	4610      	mov	r0, r2
 80083aa:	f7fe fee4 	bl	8007176 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008420 <xTaskIncrementTick+0x168>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d3b8      	bcc.n	800832e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80083bc:	2301      	movs	r3, #1
 80083be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083c0:	e7b5      	b.n	800832e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80083c2:	4b17      	ldr	r3, [pc, #92]	@ (8008420 <xTaskIncrementTick+0x168>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083c8:	4914      	ldr	r1, [pc, #80]	@ (800841c <xTaskIncrementTick+0x164>)
 80083ca:	4613      	mov	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4413      	add	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	440b      	add	r3, r1
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d901      	bls.n	80083de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80083da:	2301      	movs	r3, #1
 80083dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80083de:	4b11      	ldr	r3, [pc, #68]	@ (8008424 <xTaskIncrementTick+0x16c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d007      	beq.n	80083f6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80083e6:	2301      	movs	r3, #1
 80083e8:	617b      	str	r3, [r7, #20]
 80083ea:	e004      	b.n	80083f6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80083ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008428 <xTaskIncrementTick+0x170>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	3301      	adds	r3, #1
 80083f2:	4a0d      	ldr	r2, [pc, #52]	@ (8008428 <xTaskIncrementTick+0x170>)
 80083f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80083f6:	697b      	ldr	r3, [r7, #20]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3718      	adds	r7, #24
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	200010ac 	.word	0x200010ac
 8008404:	20001088 	.word	0x20001088
 8008408:	2000103c 	.word	0x2000103c
 800840c:	20001040 	.word	0x20001040
 8008410:	2000109c 	.word	0x2000109c
 8008414:	200010a4 	.word	0x200010a4
 8008418:	2000108c 	.word	0x2000108c
 800841c:	20000bb4 	.word	0x20000bb4
 8008420:	20000bb0 	.word	0x20000bb0
 8008424:	20001098 	.word	0x20001098
 8008428:	20001094 	.word	0x20001094

0800842c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008432:	4b2b      	ldr	r3, [pc, #172]	@ (80084e0 <vTaskSwitchContext+0xb4>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800843a:	4b2a      	ldr	r3, [pc, #168]	@ (80084e4 <vTaskSwitchContext+0xb8>)
 800843c:	2201      	movs	r2, #1
 800843e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008440:	e047      	b.n	80084d2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008442:	4b28      	ldr	r3, [pc, #160]	@ (80084e4 <vTaskSwitchContext+0xb8>)
 8008444:	2200      	movs	r2, #0
 8008446:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008448:	4b27      	ldr	r3, [pc, #156]	@ (80084e8 <vTaskSwitchContext+0xbc>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	60fb      	str	r3, [r7, #12]
 800844e:	e011      	b.n	8008474 <vTaskSwitchContext+0x48>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10b      	bne.n	800846e <vTaskSwitchContext+0x42>
	__asm volatile
 8008456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	607b      	str	r3, [r7, #4]
}
 8008468:	bf00      	nop
 800846a:	bf00      	nop
 800846c:	e7fd      	b.n	800846a <vTaskSwitchContext+0x3e>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3b01      	subs	r3, #1
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	491d      	ldr	r1, [pc, #116]	@ (80084ec <vTaskSwitchContext+0xc0>)
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	4613      	mov	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	440b      	add	r3, r1
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d0e3      	beq.n	8008450 <vTaskSwitchContext+0x24>
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	4613      	mov	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4a16      	ldr	r2, [pc, #88]	@ (80084ec <vTaskSwitchContext+0xc0>)
 8008494:	4413      	add	r3, r2
 8008496:	60bb      	str	r3, [r7, #8]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	605a      	str	r2, [r3, #4]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	685a      	ldr	r2, [r3, #4]
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	3308      	adds	r3, #8
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d104      	bne.n	80084b8 <vTaskSwitchContext+0x8c>
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	685a      	ldr	r2, [r3, #4]
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	605a      	str	r2, [r3, #4]
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	4a0c      	ldr	r2, [pc, #48]	@ (80084f0 <vTaskSwitchContext+0xc4>)
 80084c0:	6013      	str	r3, [r2, #0]
 80084c2:	4a09      	ldr	r2, [pc, #36]	@ (80084e8 <vTaskSwitchContext+0xbc>)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80084c8:	4b09      	ldr	r3, [pc, #36]	@ (80084f0 <vTaskSwitchContext+0xc4>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3354      	adds	r3, #84	@ 0x54
 80084ce:	4a09      	ldr	r2, [pc, #36]	@ (80084f4 <vTaskSwitchContext+0xc8>)
 80084d0:	6013      	str	r3, [r2, #0]
}
 80084d2:	bf00      	nop
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	200010ac 	.word	0x200010ac
 80084e4:	20001098 	.word	0x20001098
 80084e8:	2000108c 	.word	0x2000108c
 80084ec:	20000bb4 	.word	0x20000bb4
 80084f0:	20000bb0 	.word	0x20000bb0
 80084f4:	2000001c 	.word	0x2000001c

080084f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10b      	bne.n	8008520 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800850c:	f383 8811 	msr	BASEPRI, r3
 8008510:	f3bf 8f6f 	isb	sy
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	60fb      	str	r3, [r7, #12]
}
 800851a:	bf00      	nop
 800851c:	bf00      	nop
 800851e:	e7fd      	b.n	800851c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008520:	4b07      	ldr	r3, [pc, #28]	@ (8008540 <vTaskPlaceOnEventList+0x48>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3318      	adds	r3, #24
 8008526:	4619      	mov	r1, r3
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7fe fe48 	bl	80071be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800852e:	2101      	movs	r1, #1
 8008530:	6838      	ldr	r0, [r7, #0]
 8008532:	f000 fa87 	bl	8008a44 <prvAddCurrentTaskToDelayedList>
}
 8008536:	bf00      	nop
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	20000bb0 	.word	0x20000bb0

08008544 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10b      	bne.n	800856e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	617b      	str	r3, [r7, #20]
}
 8008568:	bf00      	nop
 800856a:	bf00      	nop
 800856c:	e7fd      	b.n	800856a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800856e:	4b0a      	ldr	r3, [pc, #40]	@ (8008598 <vTaskPlaceOnEventListRestricted+0x54>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	3318      	adds	r3, #24
 8008574:	4619      	mov	r1, r3
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f7fe fdfd 	bl	8007176 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008582:	f04f 33ff 	mov.w	r3, #4294967295
 8008586:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008588:	6879      	ldr	r1, [r7, #4]
 800858a:	68b8      	ldr	r0, [r7, #8]
 800858c:	f000 fa5a 	bl	8008a44 <prvAddCurrentTaskToDelayedList>
	}
 8008590:	bf00      	nop
 8008592:	3718      	adds	r7, #24
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	20000bb0 	.word	0x20000bb0

0800859c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10b      	bne.n	80085ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	60fb      	str	r3, [r7, #12]
}
 80085c4:	bf00      	nop
 80085c6:	bf00      	nop
 80085c8:	e7fd      	b.n	80085c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	3318      	adds	r3, #24
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fe fe2e 	bl	8007230 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085d4:	4b1d      	ldr	r3, [pc, #116]	@ (800864c <xTaskRemoveFromEventList+0xb0>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d11d      	bne.n	8008618 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	3304      	adds	r3, #4
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fe fe25 	bl	8007230 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ea:	4b19      	ldr	r3, [pc, #100]	@ (8008650 <xTaskRemoveFromEventList+0xb4>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d903      	bls.n	80085fa <xTaskRemoveFromEventList+0x5e>
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f6:	4a16      	ldr	r2, [pc, #88]	@ (8008650 <xTaskRemoveFromEventList+0xb4>)
 80085f8:	6013      	str	r3, [r2, #0]
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085fe:	4613      	mov	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4a13      	ldr	r2, [pc, #76]	@ (8008654 <xTaskRemoveFromEventList+0xb8>)
 8008608:	441a      	add	r2, r3
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	3304      	adds	r3, #4
 800860e:	4619      	mov	r1, r3
 8008610:	4610      	mov	r0, r2
 8008612:	f7fe fdb0 	bl	8007176 <vListInsertEnd>
 8008616:	e005      	b.n	8008624 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	3318      	adds	r3, #24
 800861c:	4619      	mov	r1, r3
 800861e:	480e      	ldr	r0, [pc, #56]	@ (8008658 <xTaskRemoveFromEventList+0xbc>)
 8008620:	f7fe fda9 	bl	8007176 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008628:	4b0c      	ldr	r3, [pc, #48]	@ (800865c <xTaskRemoveFromEventList+0xc0>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800862e:	429a      	cmp	r2, r3
 8008630:	d905      	bls.n	800863e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008632:	2301      	movs	r3, #1
 8008634:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008636:	4b0a      	ldr	r3, [pc, #40]	@ (8008660 <xTaskRemoveFromEventList+0xc4>)
 8008638:	2201      	movs	r2, #1
 800863a:	601a      	str	r2, [r3, #0]
 800863c:	e001      	b.n	8008642 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800863e:	2300      	movs	r3, #0
 8008640:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008642:	697b      	ldr	r3, [r7, #20]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3718      	adds	r7, #24
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	200010ac 	.word	0x200010ac
 8008650:	2000108c 	.word	0x2000108c
 8008654:	20000bb4 	.word	0x20000bb4
 8008658:	20001044 	.word	0x20001044
 800865c:	20000bb0 	.word	0x20000bb0
 8008660:	20001098 	.word	0x20001098

08008664 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800866c:	4b06      	ldr	r3, [pc, #24]	@ (8008688 <vTaskInternalSetTimeOutState+0x24>)
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008674:	4b05      	ldr	r3, [pc, #20]	@ (800868c <vTaskInternalSetTimeOutState+0x28>)
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	605a      	str	r2, [r3, #4]
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr
 8008688:	2000109c 	.word	0x2000109c
 800868c:	20001088 	.word	0x20001088

08008690 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d10b      	bne.n	80086b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80086a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	613b      	str	r3, [r7, #16]
}
 80086b2:	bf00      	nop
 80086b4:	bf00      	nop
 80086b6:	e7fd      	b.n	80086b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10b      	bne.n	80086d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	60fb      	str	r3, [r7, #12]
}
 80086d0:	bf00      	nop
 80086d2:	bf00      	nop
 80086d4:	e7fd      	b.n	80086d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80086d6:	f000 fe97 	bl	8009408 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80086da:	4b1d      	ldr	r3, [pc, #116]	@ (8008750 <xTaskCheckForTimeOut+0xc0>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	69ba      	ldr	r2, [r7, #24]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f2:	d102      	bne.n	80086fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80086f4:	2300      	movs	r3, #0
 80086f6:	61fb      	str	r3, [r7, #28]
 80086f8:	e023      	b.n	8008742 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	4b15      	ldr	r3, [pc, #84]	@ (8008754 <xTaskCheckForTimeOut+0xc4>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	429a      	cmp	r2, r3
 8008704:	d007      	beq.n	8008716 <xTaskCheckForTimeOut+0x86>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	429a      	cmp	r2, r3
 800870e:	d302      	bcc.n	8008716 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008710:	2301      	movs	r3, #1
 8008712:	61fb      	str	r3, [r7, #28]
 8008714:	e015      	b.n	8008742 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	697a      	ldr	r2, [r7, #20]
 800871c:	429a      	cmp	r2, r3
 800871e:	d20b      	bcs.n	8008738 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	1ad2      	subs	r2, r2, r3
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f7ff ff99 	bl	8008664 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008732:	2300      	movs	r3, #0
 8008734:	61fb      	str	r3, [r7, #28]
 8008736:	e004      	b.n	8008742 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	2200      	movs	r2, #0
 800873c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800873e:	2301      	movs	r3, #1
 8008740:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008742:	f000 fe93 	bl	800946c <vPortExitCritical>

	return xReturn;
 8008746:	69fb      	ldr	r3, [r7, #28]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3720      	adds	r7, #32
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	20001088 	.word	0x20001088
 8008754:	2000109c 	.word	0x2000109c

08008758 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008758:	b480      	push	{r7}
 800875a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800875c:	4b03      	ldr	r3, [pc, #12]	@ (800876c <vTaskMissedYield+0x14>)
 800875e:	2201      	movs	r2, #1
 8008760:	601a      	str	r2, [r3, #0]
}
 8008762:	bf00      	nop
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	20001098 	.word	0x20001098

08008770 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008778:	f000 f852 	bl	8008820 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800877c:	4b06      	ldr	r3, [pc, #24]	@ (8008798 <prvIdleTask+0x28>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d9f9      	bls.n	8008778 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008784:	4b05      	ldr	r3, [pc, #20]	@ (800879c <prvIdleTask+0x2c>)
 8008786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800878a:	601a      	str	r2, [r3, #0]
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008794:	e7f0      	b.n	8008778 <prvIdleTask+0x8>
 8008796:	bf00      	nop
 8008798:	20000bb4 	.word	0x20000bb4
 800879c:	e000ed04 	.word	0xe000ed04

080087a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087a6:	2300      	movs	r3, #0
 80087a8:	607b      	str	r3, [r7, #4]
 80087aa:	e00c      	b.n	80087c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	4613      	mov	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4a12      	ldr	r2, [pc, #72]	@ (8008800 <prvInitialiseTaskLists+0x60>)
 80087b8:	4413      	add	r3, r2
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7fe fcae 	bl	800711c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	3301      	adds	r3, #1
 80087c4:	607b      	str	r3, [r7, #4]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b37      	cmp	r3, #55	@ 0x37
 80087ca:	d9ef      	bls.n	80087ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80087cc:	480d      	ldr	r0, [pc, #52]	@ (8008804 <prvInitialiseTaskLists+0x64>)
 80087ce:	f7fe fca5 	bl	800711c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80087d2:	480d      	ldr	r0, [pc, #52]	@ (8008808 <prvInitialiseTaskLists+0x68>)
 80087d4:	f7fe fca2 	bl	800711c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80087d8:	480c      	ldr	r0, [pc, #48]	@ (800880c <prvInitialiseTaskLists+0x6c>)
 80087da:	f7fe fc9f 	bl	800711c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80087de:	480c      	ldr	r0, [pc, #48]	@ (8008810 <prvInitialiseTaskLists+0x70>)
 80087e0:	f7fe fc9c 	bl	800711c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80087e4:	480b      	ldr	r0, [pc, #44]	@ (8008814 <prvInitialiseTaskLists+0x74>)
 80087e6:	f7fe fc99 	bl	800711c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008818 <prvInitialiseTaskLists+0x78>)
 80087ec:	4a05      	ldr	r2, [pc, #20]	@ (8008804 <prvInitialiseTaskLists+0x64>)
 80087ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087f0:	4b0a      	ldr	r3, [pc, #40]	@ (800881c <prvInitialiseTaskLists+0x7c>)
 80087f2:	4a05      	ldr	r2, [pc, #20]	@ (8008808 <prvInitialiseTaskLists+0x68>)
 80087f4:	601a      	str	r2, [r3, #0]
}
 80087f6:	bf00      	nop
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	20000bb4 	.word	0x20000bb4
 8008804:	20001014 	.word	0x20001014
 8008808:	20001028 	.word	0x20001028
 800880c:	20001044 	.word	0x20001044
 8008810:	20001058 	.word	0x20001058
 8008814:	20001070 	.word	0x20001070
 8008818:	2000103c 	.word	0x2000103c
 800881c:	20001040 	.word	0x20001040

08008820 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008826:	e019      	b.n	800885c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008828:	f000 fdee 	bl	8009408 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800882c:	4b10      	ldr	r3, [pc, #64]	@ (8008870 <prvCheckTasksWaitingTermination+0x50>)
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	3304      	adds	r3, #4
 8008838:	4618      	mov	r0, r3
 800883a:	f7fe fcf9 	bl	8007230 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800883e:	4b0d      	ldr	r3, [pc, #52]	@ (8008874 <prvCheckTasksWaitingTermination+0x54>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3b01      	subs	r3, #1
 8008844:	4a0b      	ldr	r2, [pc, #44]	@ (8008874 <prvCheckTasksWaitingTermination+0x54>)
 8008846:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008848:	4b0b      	ldr	r3, [pc, #44]	@ (8008878 <prvCheckTasksWaitingTermination+0x58>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3b01      	subs	r3, #1
 800884e:	4a0a      	ldr	r2, [pc, #40]	@ (8008878 <prvCheckTasksWaitingTermination+0x58>)
 8008850:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008852:	f000 fe0b 	bl	800946c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f810 	bl	800887c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800885c:	4b06      	ldr	r3, [pc, #24]	@ (8008878 <prvCheckTasksWaitingTermination+0x58>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1e1      	bne.n	8008828 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	20001058 	.word	0x20001058
 8008874:	20001084 	.word	0x20001084
 8008878:	2000106c 	.word	0x2000106c

0800887c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	3354      	adds	r3, #84	@ 0x54
 8008888:	4618      	mov	r0, r3
 800888a:	f001 faef 	bl	8009e6c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008894:	2b00      	cmp	r3, #0
 8008896:	d108      	bne.n	80088aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800889c:	4618      	mov	r0, r3
 800889e:	f000 ffa3 	bl	80097e8 <vPortFree>
				vPortFree( pxTCB );
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 ffa0 	bl	80097e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80088a8:	e019      	b.n	80088de <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d103      	bne.n	80088bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 ff97 	bl	80097e8 <vPortFree>
	}
 80088ba:	e010      	b.n	80088de <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d00b      	beq.n	80088de <prvDeleteTCB+0x62>
	__asm volatile
 80088c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	60fb      	str	r3, [r7, #12]
}
 80088d8:	bf00      	nop
 80088da:	bf00      	nop
 80088dc:	e7fd      	b.n	80088da <prvDeleteTCB+0x5e>
	}
 80088de:	bf00      	nop
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
	...

080088e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008920 <prvResetNextTaskUnblockTime+0x38>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d104      	bne.n	8008902 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008924 <prvResetNextTaskUnblockTime+0x3c>)
 80088fa:	f04f 32ff 	mov.w	r2, #4294967295
 80088fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008900:	e008      	b.n	8008914 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008902:	4b07      	ldr	r3, [pc, #28]	@ (8008920 <prvResetNextTaskUnblockTime+0x38>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	4a04      	ldr	r2, [pc, #16]	@ (8008924 <prvResetNextTaskUnblockTime+0x3c>)
 8008912:	6013      	str	r3, [r2, #0]
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr
 8008920:	2000103c 	.word	0x2000103c
 8008924:	200010a4 	.word	0x200010a4

08008928 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800892e:	4b0b      	ldr	r3, [pc, #44]	@ (800895c <xTaskGetSchedulerState+0x34>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d102      	bne.n	800893c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008936:	2301      	movs	r3, #1
 8008938:	607b      	str	r3, [r7, #4]
 800893a:	e008      	b.n	800894e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800893c:	4b08      	ldr	r3, [pc, #32]	@ (8008960 <xTaskGetSchedulerState+0x38>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d102      	bne.n	800894a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008944:	2302      	movs	r3, #2
 8008946:	607b      	str	r3, [r7, #4]
 8008948:	e001      	b.n	800894e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800894a:	2300      	movs	r3, #0
 800894c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800894e:	687b      	ldr	r3, [r7, #4]
	}
 8008950:	4618      	mov	r0, r3
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr
 800895c:	20001090 	.word	0x20001090
 8008960:	200010ac 	.word	0x200010ac

08008964 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008970:	2300      	movs	r3, #0
 8008972:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d058      	beq.n	8008a2c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800897a:	4b2f      	ldr	r3, [pc, #188]	@ (8008a38 <xTaskPriorityDisinherit+0xd4>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	429a      	cmp	r2, r3
 8008982:	d00b      	beq.n	800899c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008988:	f383 8811 	msr	BASEPRI, r3
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	60fb      	str	r3, [r7, #12]
}
 8008996:	bf00      	nop
 8008998:	bf00      	nop
 800899a:	e7fd      	b.n	8008998 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10b      	bne.n	80089bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	60bb      	str	r3, [r7, #8]
}
 80089b6:	bf00      	nop
 80089b8:	bf00      	nop
 80089ba:	e7fd      	b.n	80089b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089c0:	1e5a      	subs	r2, r3, #1
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d02c      	beq.n	8008a2c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d128      	bne.n	8008a2c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	3304      	adds	r3, #4
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fe fc26 	bl	8007230 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089fc:	4b0f      	ldr	r3, [pc, #60]	@ (8008a3c <xTaskPriorityDisinherit+0xd8>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d903      	bls.n	8008a0c <xTaskPriorityDisinherit+0xa8>
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a08:	4a0c      	ldr	r2, [pc, #48]	@ (8008a3c <xTaskPriorityDisinherit+0xd8>)
 8008a0a:	6013      	str	r3, [r2, #0]
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a10:	4613      	mov	r3, r2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	4a09      	ldr	r2, [pc, #36]	@ (8008a40 <xTaskPriorityDisinherit+0xdc>)
 8008a1a:	441a      	add	r2, r3
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	3304      	adds	r3, #4
 8008a20:	4619      	mov	r1, r3
 8008a22:	4610      	mov	r0, r2
 8008a24:	f7fe fba7 	bl	8007176 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a2c:	697b      	ldr	r3, [r7, #20]
	}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3718      	adds	r7, #24
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	20000bb0 	.word	0x20000bb0
 8008a3c:	2000108c 	.word	0x2000108c
 8008a40:	20000bb4 	.word	0x20000bb4

08008a44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a4e:	4b21      	ldr	r3, [pc, #132]	@ (8008ad4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a54:	4b20      	ldr	r3, [pc, #128]	@ (8008ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	3304      	adds	r3, #4
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fe fbe8 	bl	8007230 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a66:	d10a      	bne.n	8008a7e <prvAddCurrentTaskToDelayedList+0x3a>
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d007      	beq.n	8008a7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3304      	adds	r3, #4
 8008a74:	4619      	mov	r1, r3
 8008a76:	4819      	ldr	r0, [pc, #100]	@ (8008adc <prvAddCurrentTaskToDelayedList+0x98>)
 8008a78:	f7fe fb7d 	bl	8007176 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a7c:	e026      	b.n	8008acc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4413      	add	r3, r2
 8008a84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a86:	4b14      	ldr	r3, [pc, #80]	@ (8008ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d209      	bcs.n	8008aaa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a96:	4b12      	ldr	r3, [pc, #72]	@ (8008ae0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8008ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	f7fe fb8b 	bl	80071be <vListInsert>
}
 8008aa8:	e010      	b.n	8008acc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8008ae4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	3304      	adds	r3, #4
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	f7fe fb81 	bl	80071be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008abc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ae8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d202      	bcs.n	8008acc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008ac6:	4a08      	ldr	r2, [pc, #32]	@ (8008ae8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	6013      	str	r3, [r2, #0]
}
 8008acc:	bf00      	nop
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	20001088 	.word	0x20001088
 8008ad8:	20000bb0 	.word	0x20000bb0
 8008adc:	20001070 	.word	0x20001070
 8008ae0:	20001040 	.word	0x20001040
 8008ae4:	2000103c 	.word	0x2000103c
 8008ae8:	200010a4 	.word	0x200010a4

08008aec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b08a      	sub	sp, #40	@ 0x28
 8008af0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008af2:	2300      	movs	r3, #0
 8008af4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008af6:	f000 fb13 	bl	8009120 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008afa:	4b1d      	ldr	r3, [pc, #116]	@ (8008b70 <xTimerCreateTimerTask+0x84>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d021      	beq.n	8008b46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008b06:	2300      	movs	r3, #0
 8008b08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b0a:	1d3a      	adds	r2, r7, #4
 8008b0c:	f107 0108 	add.w	r1, r7, #8
 8008b10:	f107 030c 	add.w	r3, r7, #12
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7fe fae7 	bl	80070e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b1a:	6879      	ldr	r1, [r7, #4]
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	9202      	str	r2, [sp, #8]
 8008b22:	9301      	str	r3, [sp, #4]
 8008b24:	2302      	movs	r3, #2
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	460a      	mov	r2, r1
 8008b2c:	4911      	ldr	r1, [pc, #68]	@ (8008b74 <xTimerCreateTimerTask+0x88>)
 8008b2e:	4812      	ldr	r0, [pc, #72]	@ (8008b78 <xTimerCreateTimerTask+0x8c>)
 8008b30:	f7ff f8a2 	bl	8007c78 <xTaskCreateStatic>
 8008b34:	4603      	mov	r3, r0
 8008b36:	4a11      	ldr	r2, [pc, #68]	@ (8008b7c <xTimerCreateTimerTask+0x90>)
 8008b38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008b3a:	4b10      	ldr	r3, [pc, #64]	@ (8008b7c <xTimerCreateTimerTask+0x90>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008b42:	2301      	movs	r3, #1
 8008b44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10b      	bne.n	8008b64 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b50:	f383 8811 	msr	BASEPRI, r3
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	613b      	str	r3, [r7, #16]
}
 8008b5e:	bf00      	nop
 8008b60:	bf00      	nop
 8008b62:	e7fd      	b.n	8008b60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008b64:	697b      	ldr	r3, [r7, #20]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3718      	adds	r7, #24
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	200010e0 	.word	0x200010e0
 8008b74:	0800aa84 	.word	0x0800aa84
 8008b78:	08008cb9 	.word	0x08008cb9
 8008b7c:	200010e4 	.word	0x200010e4

08008b80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b08a      	sub	sp, #40	@ 0x28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
 8008b8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d10b      	bne.n	8008bb0 <xTimerGenericCommand+0x30>
	__asm volatile
 8008b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	623b      	str	r3, [r7, #32]
}
 8008baa:	bf00      	nop
 8008bac:	bf00      	nop
 8008bae:	e7fd      	b.n	8008bac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008bb0:	4b19      	ldr	r3, [pc, #100]	@ (8008c18 <xTimerGenericCommand+0x98>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d02a      	beq.n	8008c0e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	2b05      	cmp	r3, #5
 8008bc8:	dc18      	bgt.n	8008bfc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008bca:	f7ff fead 	bl	8008928 <xTaskGetSchedulerState>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d109      	bne.n	8008be8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008bd4:	4b10      	ldr	r3, [pc, #64]	@ (8008c18 <xTimerGenericCommand+0x98>)
 8008bd6:	6818      	ldr	r0, [r3, #0]
 8008bd8:	f107 0110 	add.w	r1, r7, #16
 8008bdc:	2300      	movs	r3, #0
 8008bde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008be0:	f7fe fc5a 	bl	8007498 <xQueueGenericSend>
 8008be4:	6278      	str	r0, [r7, #36]	@ 0x24
 8008be6:	e012      	b.n	8008c0e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008be8:	4b0b      	ldr	r3, [pc, #44]	@ (8008c18 <xTimerGenericCommand+0x98>)
 8008bea:	6818      	ldr	r0, [r3, #0]
 8008bec:	f107 0110 	add.w	r1, r7, #16
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f7fe fc50 	bl	8007498 <xQueueGenericSend>
 8008bf8:	6278      	str	r0, [r7, #36]	@ 0x24
 8008bfa:	e008      	b.n	8008c0e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008bfc:	4b06      	ldr	r3, [pc, #24]	@ (8008c18 <xTimerGenericCommand+0x98>)
 8008bfe:	6818      	ldr	r0, [r3, #0]
 8008c00:	f107 0110 	add.w	r1, r7, #16
 8008c04:	2300      	movs	r3, #0
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	f7fe fd48 	bl	800769c <xQueueGenericSendFromISR>
 8008c0c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3728      	adds	r7, #40	@ 0x28
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	200010e0 	.word	0x200010e0

08008c1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b088      	sub	sp, #32
 8008c20:	af02      	add	r7, sp, #8
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c26:	4b23      	ldr	r3, [pc, #140]	@ (8008cb4 <prvProcessExpiredTimer+0x98>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	3304      	adds	r3, #4
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fe fafb 	bl	8007230 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c40:	f003 0304 	and.w	r3, r3, #4
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d023      	beq.n	8008c90 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	699a      	ldr	r2, [r3, #24]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	18d1      	adds	r1, r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	6978      	ldr	r0, [r7, #20]
 8008c56:	f000 f8d5 	bl	8008e04 <prvInsertTimerInActiveList>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d020      	beq.n	8008ca2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c60:	2300      	movs	r3, #0
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	2300      	movs	r3, #0
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	2100      	movs	r1, #0
 8008c6a:	6978      	ldr	r0, [r7, #20]
 8008c6c:	f7ff ff88 	bl	8008b80 <xTimerGenericCommand>
 8008c70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d114      	bne.n	8008ca2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c7c:	f383 8811 	msr	BASEPRI, r3
 8008c80:	f3bf 8f6f 	isb	sy
 8008c84:	f3bf 8f4f 	dsb	sy
 8008c88:	60fb      	str	r3, [r7, #12]
}
 8008c8a:	bf00      	nop
 8008c8c:	bf00      	nop
 8008c8e:	e7fd      	b.n	8008c8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c96:	f023 0301 	bic.w	r3, r3, #1
 8008c9a:	b2da      	uxtb	r2, r3
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	6978      	ldr	r0, [r7, #20]
 8008ca8:	4798      	blx	r3
}
 8008caa:	bf00      	nop
 8008cac:	3718      	adds	r7, #24
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	200010d8 	.word	0x200010d8

08008cb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cc0:	f107 0308 	add.w	r3, r7, #8
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f000 f859 	bl	8008d7c <prvGetNextExpireTime>
 8008cca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	4619      	mov	r1, r3
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f000 f805 	bl	8008ce0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008cd6:	f000 f8d7 	bl	8008e88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cda:	bf00      	nop
 8008cdc:	e7f0      	b.n	8008cc0 <prvTimerTask+0x8>
	...

08008ce0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008cea:	f7ff fa29 	bl	8008140 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008cee:	f107 0308 	add.w	r3, r7, #8
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 f866 	bl	8008dc4 <prvSampleTimeNow>
 8008cf8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d130      	bne.n	8008d62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10a      	bne.n	8008d1c <prvProcessTimerOrBlockTask+0x3c>
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d806      	bhi.n	8008d1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008d0e:	f7ff fa25 	bl	800815c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008d12:	68f9      	ldr	r1, [r7, #12]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7ff ff81 	bl	8008c1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d1a:	e024      	b.n	8008d66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d008      	beq.n	8008d34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d22:	4b13      	ldr	r3, [pc, #76]	@ (8008d70 <prvProcessTimerOrBlockTask+0x90>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d101      	bne.n	8008d30 <prvProcessTimerOrBlockTask+0x50>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e000      	b.n	8008d32 <prvProcessTimerOrBlockTask+0x52>
 8008d30:	2300      	movs	r3, #0
 8008d32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d34:	4b0f      	ldr	r3, [pc, #60]	@ (8008d74 <prvProcessTimerOrBlockTask+0x94>)
 8008d36:	6818      	ldr	r0, [r3, #0]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	4619      	mov	r1, r3
 8008d42:	f7fe ff65 	bl	8007c10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d46:	f7ff fa09 	bl	800815c <xTaskResumeAll>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10a      	bne.n	8008d66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008d50:	4b09      	ldr	r3, [pc, #36]	@ (8008d78 <prvProcessTimerOrBlockTask+0x98>)
 8008d52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	f3bf 8f6f 	isb	sy
}
 8008d60:	e001      	b.n	8008d66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008d62:	f7ff f9fb 	bl	800815c <xTaskResumeAll>
}
 8008d66:	bf00      	nop
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	200010dc 	.word	0x200010dc
 8008d74:	200010e0 	.word	0x200010e0
 8008d78:	e000ed04 	.word	0xe000ed04

08008d7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008d84:	4b0e      	ldr	r3, [pc, #56]	@ (8008dc0 <prvGetNextExpireTime+0x44>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <prvGetNextExpireTime+0x16>
 8008d8e:	2201      	movs	r2, #1
 8008d90:	e000      	b.n	8008d94 <prvGetNextExpireTime+0x18>
 8008d92:	2200      	movs	r2, #0
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d105      	bne.n	8008dac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008da0:	4b07      	ldr	r3, [pc, #28]	@ (8008dc0 <prvGetNextExpireTime+0x44>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	60fb      	str	r3, [r7, #12]
 8008daa:	e001      	b.n	8008db0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008db0:	68fb      	ldr	r3, [r7, #12]
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3714      	adds	r7, #20
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	200010d8 	.word	0x200010d8

08008dc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008dcc:	f7ff fa64 	bl	8008298 <xTaskGetTickCount>
 8008dd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8008e00 <prvSampleTimeNow+0x3c>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d205      	bcs.n	8008de8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ddc:	f000 f93a 	bl	8009054 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	601a      	str	r2, [r3, #0]
 8008de6:	e002      	b.n	8008dee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008dee:	4a04      	ldr	r2, [pc, #16]	@ (8008e00 <prvSampleTimeNow+0x3c>)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008df4:	68fb      	ldr	r3, [r7, #12]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	200010e8 	.word	0x200010e8

08008e04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
 8008e10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008e12:	2300      	movs	r3, #0
 8008e14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008e22:	68ba      	ldr	r2, [r7, #8]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d812      	bhi.n	8008e50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	1ad2      	subs	r2, r2, r3
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d302      	bcc.n	8008e3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	617b      	str	r3, [r7, #20]
 8008e3c:	e01b      	b.n	8008e76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e3e:	4b10      	ldr	r3, [pc, #64]	@ (8008e80 <prvInsertTimerInActiveList+0x7c>)
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	3304      	adds	r3, #4
 8008e46:	4619      	mov	r1, r3
 8008e48:	4610      	mov	r0, r2
 8008e4a:	f7fe f9b8 	bl	80071be <vListInsert>
 8008e4e:	e012      	b.n	8008e76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d206      	bcs.n	8008e66 <prvInsertTimerInActiveList+0x62>
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d302      	bcc.n	8008e66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008e60:	2301      	movs	r3, #1
 8008e62:	617b      	str	r3, [r7, #20]
 8008e64:	e007      	b.n	8008e76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e66:	4b07      	ldr	r3, [pc, #28]	@ (8008e84 <prvInsertTimerInActiveList+0x80>)
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	4619      	mov	r1, r3
 8008e70:	4610      	mov	r0, r2
 8008e72:	f7fe f9a4 	bl	80071be <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008e76:	697b      	ldr	r3, [r7, #20]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3718      	adds	r7, #24
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	200010dc 	.word	0x200010dc
 8008e84:	200010d8 	.word	0x200010d8

08008e88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b08e      	sub	sp, #56	@ 0x38
 8008e8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e8e:	e0ce      	b.n	800902e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	da19      	bge.n	8008eca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008e96:	1d3b      	adds	r3, r7, #4
 8008e98:	3304      	adds	r3, #4
 8008e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10b      	bne.n	8008eba <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	61fb      	str	r3, [r7, #28]
}
 8008eb4:	bf00      	nop
 8008eb6:	bf00      	nop
 8008eb8:	e7fd      	b.n	8008eb6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ec0:	6850      	ldr	r0, [r2, #4]
 8008ec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ec4:	6892      	ldr	r2, [r2, #8]
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f2c0 80ae 	blt.w	800902e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed8:	695b      	ldr	r3, [r3, #20]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d004      	beq.n	8008ee8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fe f9a4 	bl	8007230 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ee8:	463b      	mov	r3, r7
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7ff ff6a 	bl	8008dc4 <prvSampleTimeNow>
 8008ef0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2b09      	cmp	r3, #9
 8008ef6:	f200 8097 	bhi.w	8009028 <prvProcessReceivedCommands+0x1a0>
 8008efa:	a201      	add	r2, pc, #4	@ (adr r2, 8008f00 <prvProcessReceivedCommands+0x78>)
 8008efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f00:	08008f29 	.word	0x08008f29
 8008f04:	08008f29 	.word	0x08008f29
 8008f08:	08008f29 	.word	0x08008f29
 8008f0c:	08008f9f 	.word	0x08008f9f
 8008f10:	08008fb3 	.word	0x08008fb3
 8008f14:	08008fff 	.word	0x08008fff
 8008f18:	08008f29 	.word	0x08008f29
 8008f1c:	08008f29 	.word	0x08008f29
 8008f20:	08008f9f 	.word	0x08008f9f
 8008f24:	08008fb3 	.word	0x08008fb3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f2e:	f043 0301 	orr.w	r3, r3, #1
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	18d1      	adds	r1, r2, r3
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f48:	f7ff ff5c 	bl	8008e04 <prvInsertTimerInActiveList>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d06c      	beq.n	800902c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f60:	f003 0304 	and.w	r3, r3, #4
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d061      	beq.n	800902c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	441a      	add	r2, r3
 8008f70:	2300      	movs	r3, #0
 8008f72:	9300      	str	r3, [sp, #0]
 8008f74:	2300      	movs	r3, #0
 8008f76:	2100      	movs	r1, #0
 8008f78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f7a:	f7ff fe01 	bl	8008b80 <xTimerGenericCommand>
 8008f7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008f80:	6a3b      	ldr	r3, [r7, #32]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d152      	bne.n	800902c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8a:	f383 8811 	msr	BASEPRI, r3
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	f3bf 8f4f 	dsb	sy
 8008f96:	61bb      	str	r3, [r7, #24]
}
 8008f98:	bf00      	nop
 8008f9a:	bf00      	nop
 8008f9c:	e7fd      	b.n	8008f9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fa4:	f023 0301 	bic.w	r3, r3, #1
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008fb0:	e03d      	b.n	800902e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fb8:	f043 0301 	orr.w	r3, r3, #1
 8008fbc:	b2da      	uxtb	r2, r3
 8008fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d10b      	bne.n	8008fea <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	617b      	str	r3, [r7, #20]
}
 8008fe4:	bf00      	nop
 8008fe6:	bf00      	nop
 8008fe8:	e7fd      	b.n	8008fe6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fec:	699a      	ldr	r2, [r3, #24]
 8008fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff0:	18d1      	adds	r1, r2, r3
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ff6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ff8:	f7ff ff04 	bl	8008e04 <prvInsertTimerInActiveList>
					break;
 8008ffc:	e017      	b.n	800902e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009000:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009004:	f003 0302 	and.w	r3, r3, #2
 8009008:	2b00      	cmp	r3, #0
 800900a:	d103      	bne.n	8009014 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800900c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800900e:	f000 fbeb 	bl	80097e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009012:	e00c      	b.n	800902e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009016:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800901a:	f023 0301 	bic.w	r3, r3, #1
 800901e:	b2da      	uxtb	r2, r3
 8009020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009022:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009026:	e002      	b.n	800902e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009028:	bf00      	nop
 800902a:	e000      	b.n	800902e <prvProcessReceivedCommands+0x1a6>
					break;
 800902c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800902e:	4b08      	ldr	r3, [pc, #32]	@ (8009050 <prvProcessReceivedCommands+0x1c8>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	1d39      	adds	r1, r7, #4
 8009034:	2200      	movs	r2, #0
 8009036:	4618      	mov	r0, r3
 8009038:	f7fe fbce 	bl	80077d8 <xQueueReceive>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	f47f af26 	bne.w	8008e90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009044:	bf00      	nop
 8009046:	bf00      	nop
 8009048:	3730      	adds	r7, #48	@ 0x30
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	200010e0 	.word	0x200010e0

08009054 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b088      	sub	sp, #32
 8009058:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800905a:	e049      	b.n	80090f0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800905c:	4b2e      	ldr	r3, [pc, #184]	@ (8009118 <prvSwitchTimerLists+0xc4>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009066:	4b2c      	ldr	r3, [pc, #176]	@ (8009118 <prvSwitchTimerLists+0xc4>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	3304      	adds	r3, #4
 8009074:	4618      	mov	r0, r3
 8009076:	f7fe f8db 	bl	8007230 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009088:	f003 0304 	and.w	r3, r3, #4
 800908c:	2b00      	cmp	r3, #0
 800908e:	d02f      	beq.n	80090f0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	4413      	add	r3, r2
 8009098:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d90e      	bls.n	80090c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090ae:	4b1a      	ldr	r3, [pc, #104]	@ (8009118 <prvSwitchTimerLists+0xc4>)
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	3304      	adds	r3, #4
 80090b6:	4619      	mov	r1, r3
 80090b8:	4610      	mov	r0, r2
 80090ba:	f7fe f880 	bl	80071be <vListInsert>
 80090be:	e017      	b.n	80090f0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090c0:	2300      	movs	r3, #0
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	2300      	movs	r3, #0
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	2100      	movs	r1, #0
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	f7ff fd58 	bl	8008b80 <xTimerGenericCommand>
 80090d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10b      	bne.n	80090f0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80090d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090dc:	f383 8811 	msr	BASEPRI, r3
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	603b      	str	r3, [r7, #0]
}
 80090ea:	bf00      	nop
 80090ec:	bf00      	nop
 80090ee:	e7fd      	b.n	80090ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090f0:	4b09      	ldr	r3, [pc, #36]	@ (8009118 <prvSwitchTimerLists+0xc4>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1b0      	bne.n	800905c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80090fa:	4b07      	ldr	r3, [pc, #28]	@ (8009118 <prvSwitchTimerLists+0xc4>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009100:	4b06      	ldr	r3, [pc, #24]	@ (800911c <prvSwitchTimerLists+0xc8>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a04      	ldr	r2, [pc, #16]	@ (8009118 <prvSwitchTimerLists+0xc4>)
 8009106:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009108:	4a04      	ldr	r2, [pc, #16]	@ (800911c <prvSwitchTimerLists+0xc8>)
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	6013      	str	r3, [r2, #0]
}
 800910e:	bf00      	nop
 8009110:	3718      	adds	r7, #24
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	200010d8 	.word	0x200010d8
 800911c:	200010dc 	.word	0x200010dc

08009120 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009126:	f000 f96f 	bl	8009408 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800912a:	4b15      	ldr	r3, [pc, #84]	@ (8009180 <prvCheckForValidListAndQueue+0x60>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d120      	bne.n	8009174 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009132:	4814      	ldr	r0, [pc, #80]	@ (8009184 <prvCheckForValidListAndQueue+0x64>)
 8009134:	f7fd fff2 	bl	800711c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009138:	4813      	ldr	r0, [pc, #76]	@ (8009188 <prvCheckForValidListAndQueue+0x68>)
 800913a:	f7fd ffef 	bl	800711c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800913e:	4b13      	ldr	r3, [pc, #76]	@ (800918c <prvCheckForValidListAndQueue+0x6c>)
 8009140:	4a10      	ldr	r2, [pc, #64]	@ (8009184 <prvCheckForValidListAndQueue+0x64>)
 8009142:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009144:	4b12      	ldr	r3, [pc, #72]	@ (8009190 <prvCheckForValidListAndQueue+0x70>)
 8009146:	4a10      	ldr	r2, [pc, #64]	@ (8009188 <prvCheckForValidListAndQueue+0x68>)
 8009148:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800914a:	2300      	movs	r3, #0
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	4b11      	ldr	r3, [pc, #68]	@ (8009194 <prvCheckForValidListAndQueue+0x74>)
 8009150:	4a11      	ldr	r2, [pc, #68]	@ (8009198 <prvCheckForValidListAndQueue+0x78>)
 8009152:	2110      	movs	r1, #16
 8009154:	200a      	movs	r0, #10
 8009156:	f7fe f8ff 	bl	8007358 <xQueueGenericCreateStatic>
 800915a:	4603      	mov	r3, r0
 800915c:	4a08      	ldr	r2, [pc, #32]	@ (8009180 <prvCheckForValidListAndQueue+0x60>)
 800915e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009160:	4b07      	ldr	r3, [pc, #28]	@ (8009180 <prvCheckForValidListAndQueue+0x60>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d005      	beq.n	8009174 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009168:	4b05      	ldr	r3, [pc, #20]	@ (8009180 <prvCheckForValidListAndQueue+0x60>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	490b      	ldr	r1, [pc, #44]	@ (800919c <prvCheckForValidListAndQueue+0x7c>)
 800916e:	4618      	mov	r0, r3
 8009170:	f7fe fd24 	bl	8007bbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009174:	f000 f97a 	bl	800946c <vPortExitCritical>
}
 8009178:	bf00      	nop
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	200010e0 	.word	0x200010e0
 8009184:	200010b0 	.word	0x200010b0
 8009188:	200010c4 	.word	0x200010c4
 800918c:	200010d8 	.word	0x200010d8
 8009190:	200010dc 	.word	0x200010dc
 8009194:	2000118c 	.word	0x2000118c
 8009198:	200010ec 	.word	0x200010ec
 800919c:	0800aa8c 	.word	0x0800aa8c

080091a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	3b04      	subs	r3, #4
 80091b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80091b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	3b04      	subs	r3, #4
 80091be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	f023 0201 	bic.w	r2, r3, #1
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	3b04      	subs	r3, #4
 80091ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80091d0:	4a0c      	ldr	r2, [pc, #48]	@ (8009204 <pxPortInitialiseStack+0x64>)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	3b14      	subs	r3, #20
 80091da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	3b04      	subs	r3, #4
 80091e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f06f 0202 	mvn.w	r2, #2
 80091ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	3b20      	subs	r3, #32
 80091f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80091f6:	68fb      	ldr	r3, [r7, #12]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	08009209 	.word	0x08009209

08009208 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800920e:	2300      	movs	r3, #0
 8009210:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009212:	4b13      	ldr	r3, [pc, #76]	@ (8009260 <prvTaskExitError+0x58>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800921a:	d00b      	beq.n	8009234 <prvTaskExitError+0x2c>
	__asm volatile
 800921c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009220:	f383 8811 	msr	BASEPRI, r3
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	60fb      	str	r3, [r7, #12]
}
 800922e:	bf00      	nop
 8009230:	bf00      	nop
 8009232:	e7fd      	b.n	8009230 <prvTaskExitError+0x28>
	__asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	60bb      	str	r3, [r7, #8]
}
 8009246:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009248:	bf00      	nop
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d0fc      	beq.n	800924a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009250:	bf00      	nop
 8009252:	bf00      	nop
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	2000000c 	.word	0x2000000c
	...

08009270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009270:	4b07      	ldr	r3, [pc, #28]	@ (8009290 <pxCurrentTCBConst2>)
 8009272:	6819      	ldr	r1, [r3, #0]
 8009274:	6808      	ldr	r0, [r1, #0]
 8009276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800927a:	f380 8809 	msr	PSP, r0
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f04f 0000 	mov.w	r0, #0
 8009286:	f380 8811 	msr	BASEPRI, r0
 800928a:	4770      	bx	lr
 800928c:	f3af 8000 	nop.w

08009290 <pxCurrentTCBConst2>:
 8009290:	20000bb0 	.word	0x20000bb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009294:	bf00      	nop
 8009296:	bf00      	nop

08009298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009298:	4808      	ldr	r0, [pc, #32]	@ (80092bc <prvPortStartFirstTask+0x24>)
 800929a:	6800      	ldr	r0, [r0, #0]
 800929c:	6800      	ldr	r0, [r0, #0]
 800929e:	f380 8808 	msr	MSP, r0
 80092a2:	f04f 0000 	mov.w	r0, #0
 80092a6:	f380 8814 	msr	CONTROL, r0
 80092aa:	b662      	cpsie	i
 80092ac:	b661      	cpsie	f
 80092ae:	f3bf 8f4f 	dsb	sy
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	df00      	svc	0
 80092b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80092ba:	bf00      	nop
 80092bc:	e000ed08 	.word	0xe000ed08

080092c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80092c6:	4b47      	ldr	r3, [pc, #284]	@ (80093e4 <xPortStartScheduler+0x124>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a47      	ldr	r2, [pc, #284]	@ (80093e8 <xPortStartScheduler+0x128>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d10b      	bne.n	80092e8 <xPortStartScheduler+0x28>
	__asm volatile
 80092d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	613b      	str	r3, [r7, #16]
}
 80092e2:	bf00      	nop
 80092e4:	bf00      	nop
 80092e6:	e7fd      	b.n	80092e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80092e8:	4b3e      	ldr	r3, [pc, #248]	@ (80093e4 <xPortStartScheduler+0x124>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a3f      	ldr	r2, [pc, #252]	@ (80093ec <xPortStartScheduler+0x12c>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d10b      	bne.n	800930a <xPortStartScheduler+0x4a>
	__asm volatile
 80092f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	60fb      	str	r3, [r7, #12]
}
 8009304:	bf00      	nop
 8009306:	bf00      	nop
 8009308:	e7fd      	b.n	8009306 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800930a:	4b39      	ldr	r3, [pc, #228]	@ (80093f0 <xPortStartScheduler+0x130>)
 800930c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	b2db      	uxtb	r3, r3
 8009314:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	22ff      	movs	r2, #255	@ 0xff
 800931a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	b2db      	uxtb	r3, r3
 8009322:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009324:	78fb      	ldrb	r3, [r7, #3]
 8009326:	b2db      	uxtb	r3, r3
 8009328:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800932c:	b2da      	uxtb	r2, r3
 800932e:	4b31      	ldr	r3, [pc, #196]	@ (80093f4 <xPortStartScheduler+0x134>)
 8009330:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009332:	4b31      	ldr	r3, [pc, #196]	@ (80093f8 <xPortStartScheduler+0x138>)
 8009334:	2207      	movs	r2, #7
 8009336:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009338:	e009      	b.n	800934e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800933a:	4b2f      	ldr	r3, [pc, #188]	@ (80093f8 <xPortStartScheduler+0x138>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	3b01      	subs	r3, #1
 8009340:	4a2d      	ldr	r2, [pc, #180]	@ (80093f8 <xPortStartScheduler+0x138>)
 8009342:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009344:	78fb      	ldrb	r3, [r7, #3]
 8009346:	b2db      	uxtb	r3, r3
 8009348:	005b      	lsls	r3, r3, #1
 800934a:	b2db      	uxtb	r3, r3
 800934c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800934e:	78fb      	ldrb	r3, [r7, #3]
 8009350:	b2db      	uxtb	r3, r3
 8009352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009356:	2b80      	cmp	r3, #128	@ 0x80
 8009358:	d0ef      	beq.n	800933a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800935a:	4b27      	ldr	r3, [pc, #156]	@ (80093f8 <xPortStartScheduler+0x138>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f1c3 0307 	rsb	r3, r3, #7
 8009362:	2b04      	cmp	r3, #4
 8009364:	d00b      	beq.n	800937e <xPortStartScheduler+0xbe>
	__asm volatile
 8009366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800936a:	f383 8811 	msr	BASEPRI, r3
 800936e:	f3bf 8f6f 	isb	sy
 8009372:	f3bf 8f4f 	dsb	sy
 8009376:	60bb      	str	r3, [r7, #8]
}
 8009378:	bf00      	nop
 800937a:	bf00      	nop
 800937c:	e7fd      	b.n	800937a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800937e:	4b1e      	ldr	r3, [pc, #120]	@ (80093f8 <xPortStartScheduler+0x138>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	021b      	lsls	r3, r3, #8
 8009384:	4a1c      	ldr	r2, [pc, #112]	@ (80093f8 <xPortStartScheduler+0x138>)
 8009386:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009388:	4b1b      	ldr	r3, [pc, #108]	@ (80093f8 <xPortStartScheduler+0x138>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009390:	4a19      	ldr	r2, [pc, #100]	@ (80093f8 <xPortStartScheduler+0x138>)
 8009392:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	b2da      	uxtb	r2, r3
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800939c:	4b17      	ldr	r3, [pc, #92]	@ (80093fc <xPortStartScheduler+0x13c>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a16      	ldr	r2, [pc, #88]	@ (80093fc <xPortStartScheduler+0x13c>)
 80093a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80093a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80093a8:	4b14      	ldr	r3, [pc, #80]	@ (80093fc <xPortStartScheduler+0x13c>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a13      	ldr	r2, [pc, #76]	@ (80093fc <xPortStartScheduler+0x13c>)
 80093ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80093b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80093b4:	f000 f8da 	bl	800956c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80093b8:	4b11      	ldr	r3, [pc, #68]	@ (8009400 <xPortStartScheduler+0x140>)
 80093ba:	2200      	movs	r2, #0
 80093bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80093be:	f000 f8f9 	bl	80095b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80093c2:	4b10      	ldr	r3, [pc, #64]	@ (8009404 <xPortStartScheduler+0x144>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a0f      	ldr	r2, [pc, #60]	@ (8009404 <xPortStartScheduler+0x144>)
 80093c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80093cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80093ce:	f7ff ff63 	bl	8009298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80093d2:	f7ff f82b 	bl	800842c <vTaskSwitchContext>
	prvTaskExitError();
 80093d6:	f7ff ff17 	bl	8009208 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80093da:	2300      	movs	r3, #0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3718      	adds	r7, #24
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	e000ed00 	.word	0xe000ed00
 80093e8:	410fc271 	.word	0x410fc271
 80093ec:	410fc270 	.word	0x410fc270
 80093f0:	e000e400 	.word	0xe000e400
 80093f4:	200011dc 	.word	0x200011dc
 80093f8:	200011e0 	.word	0x200011e0
 80093fc:	e000ed20 	.word	0xe000ed20
 8009400:	2000000c 	.word	0x2000000c
 8009404:	e000ef34 	.word	0xe000ef34

08009408 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
	__asm volatile
 800940e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	607b      	str	r3, [r7, #4]
}
 8009420:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009422:	4b10      	ldr	r3, [pc, #64]	@ (8009464 <vPortEnterCritical+0x5c>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	3301      	adds	r3, #1
 8009428:	4a0e      	ldr	r2, [pc, #56]	@ (8009464 <vPortEnterCritical+0x5c>)
 800942a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800942c:	4b0d      	ldr	r3, [pc, #52]	@ (8009464 <vPortEnterCritical+0x5c>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d110      	bne.n	8009456 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009434:	4b0c      	ldr	r3, [pc, #48]	@ (8009468 <vPortEnterCritical+0x60>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	b2db      	uxtb	r3, r3
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00b      	beq.n	8009456 <vPortEnterCritical+0x4e>
	__asm volatile
 800943e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	603b      	str	r3, [r7, #0]
}
 8009450:	bf00      	nop
 8009452:	bf00      	nop
 8009454:	e7fd      	b.n	8009452 <vPortEnterCritical+0x4a>
	}
}
 8009456:	bf00      	nop
 8009458:	370c      	adds	r7, #12
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	2000000c 	.word	0x2000000c
 8009468:	e000ed04 	.word	0xe000ed04

0800946c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009472:	4b12      	ldr	r3, [pc, #72]	@ (80094bc <vPortExitCritical+0x50>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10b      	bne.n	8009492 <vPortExitCritical+0x26>
	__asm volatile
 800947a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947e:	f383 8811 	msr	BASEPRI, r3
 8009482:	f3bf 8f6f 	isb	sy
 8009486:	f3bf 8f4f 	dsb	sy
 800948a:	607b      	str	r3, [r7, #4]
}
 800948c:	bf00      	nop
 800948e:	bf00      	nop
 8009490:	e7fd      	b.n	800948e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009492:	4b0a      	ldr	r3, [pc, #40]	@ (80094bc <vPortExitCritical+0x50>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	3b01      	subs	r3, #1
 8009498:	4a08      	ldr	r2, [pc, #32]	@ (80094bc <vPortExitCritical+0x50>)
 800949a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800949c:	4b07      	ldr	r3, [pc, #28]	@ (80094bc <vPortExitCritical+0x50>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d105      	bne.n	80094b0 <vPortExitCritical+0x44>
 80094a4:	2300      	movs	r3, #0
 80094a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	f383 8811 	msr	BASEPRI, r3
}
 80094ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr
 80094bc:	2000000c 	.word	0x2000000c

080094c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80094c0:	f3ef 8009 	mrs	r0, PSP
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	4b15      	ldr	r3, [pc, #84]	@ (8009520 <pxCurrentTCBConst>)
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	f01e 0f10 	tst.w	lr, #16
 80094d0:	bf08      	it	eq
 80094d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80094d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094da:	6010      	str	r0, [r2, #0]
 80094dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80094e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80094e4:	f380 8811 	msr	BASEPRI, r0
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f7fe ff9c 	bl	800842c <vTaskSwitchContext>
 80094f4:	f04f 0000 	mov.w	r0, #0
 80094f8:	f380 8811 	msr	BASEPRI, r0
 80094fc:	bc09      	pop	{r0, r3}
 80094fe:	6819      	ldr	r1, [r3, #0]
 8009500:	6808      	ldr	r0, [r1, #0]
 8009502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009506:	f01e 0f10 	tst.w	lr, #16
 800950a:	bf08      	it	eq
 800950c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009510:	f380 8809 	msr	PSP, r0
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	f3af 8000 	nop.w

08009520 <pxCurrentTCBConst>:
 8009520:	20000bb0 	.word	0x20000bb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009524:	bf00      	nop
 8009526:	bf00      	nop

08009528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
	__asm volatile
 800952e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009532:	f383 8811 	msr	BASEPRI, r3
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	607b      	str	r3, [r7, #4]
}
 8009540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009542:	f7fe feb9 	bl	80082b8 <xTaskIncrementTick>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d003      	beq.n	8009554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800954c:	4b06      	ldr	r3, [pc, #24]	@ (8009568 <xPortSysTickHandler+0x40>)
 800954e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009552:	601a      	str	r2, [r3, #0]
 8009554:	2300      	movs	r3, #0
 8009556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	f383 8811 	msr	BASEPRI, r3
}
 800955e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009560:	bf00      	nop
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	e000ed04 	.word	0xe000ed04

0800956c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800956c:	b480      	push	{r7}
 800956e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009570:	4b0b      	ldr	r3, [pc, #44]	@ (80095a0 <vPortSetupTimerInterrupt+0x34>)
 8009572:	2200      	movs	r2, #0
 8009574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009576:	4b0b      	ldr	r3, [pc, #44]	@ (80095a4 <vPortSetupTimerInterrupt+0x38>)
 8009578:	2200      	movs	r2, #0
 800957a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800957c:	4b0a      	ldr	r3, [pc, #40]	@ (80095a8 <vPortSetupTimerInterrupt+0x3c>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a0a      	ldr	r2, [pc, #40]	@ (80095ac <vPortSetupTimerInterrupt+0x40>)
 8009582:	fba2 2303 	umull	r2, r3, r2, r3
 8009586:	099b      	lsrs	r3, r3, #6
 8009588:	4a09      	ldr	r2, [pc, #36]	@ (80095b0 <vPortSetupTimerInterrupt+0x44>)
 800958a:	3b01      	subs	r3, #1
 800958c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800958e:	4b04      	ldr	r3, [pc, #16]	@ (80095a0 <vPortSetupTimerInterrupt+0x34>)
 8009590:	2207      	movs	r2, #7
 8009592:	601a      	str	r2, [r3, #0]
}
 8009594:	bf00      	nop
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	e000e010 	.word	0xe000e010
 80095a4:	e000e018 	.word	0xe000e018
 80095a8:	20000000 	.word	0x20000000
 80095ac:	10624dd3 	.word	0x10624dd3
 80095b0:	e000e014 	.word	0xe000e014

080095b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80095b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80095c4 <vPortEnableVFP+0x10>
 80095b8:	6801      	ldr	r1, [r0, #0]
 80095ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80095be:	6001      	str	r1, [r0, #0]
 80095c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80095c2:	bf00      	nop
 80095c4:	e000ed88 	.word	0xe000ed88

080095c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80095ce:	f3ef 8305 	mrs	r3, IPSR
 80095d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2b0f      	cmp	r3, #15
 80095d8:	d915      	bls.n	8009606 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80095da:	4a18      	ldr	r2, [pc, #96]	@ (800963c <vPortValidateInterruptPriority+0x74>)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	4413      	add	r3, r2
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80095e4:	4b16      	ldr	r3, [pc, #88]	@ (8009640 <vPortValidateInterruptPriority+0x78>)
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	7afa      	ldrb	r2, [r7, #11]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d20b      	bcs.n	8009606 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80095ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f2:	f383 8811 	msr	BASEPRI, r3
 80095f6:	f3bf 8f6f 	isb	sy
 80095fa:	f3bf 8f4f 	dsb	sy
 80095fe:	607b      	str	r3, [r7, #4]
}
 8009600:	bf00      	nop
 8009602:	bf00      	nop
 8009604:	e7fd      	b.n	8009602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009606:	4b0f      	ldr	r3, [pc, #60]	@ (8009644 <vPortValidateInterruptPriority+0x7c>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800960e:	4b0e      	ldr	r3, [pc, #56]	@ (8009648 <vPortValidateInterruptPriority+0x80>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	429a      	cmp	r2, r3
 8009614:	d90b      	bls.n	800962e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800961a:	f383 8811 	msr	BASEPRI, r3
 800961e:	f3bf 8f6f 	isb	sy
 8009622:	f3bf 8f4f 	dsb	sy
 8009626:	603b      	str	r3, [r7, #0]
}
 8009628:	bf00      	nop
 800962a:	bf00      	nop
 800962c:	e7fd      	b.n	800962a <vPortValidateInterruptPriority+0x62>
	}
 800962e:	bf00      	nop
 8009630:	3714      	adds	r7, #20
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	e000e3f0 	.word	0xe000e3f0
 8009640:	200011dc 	.word	0x200011dc
 8009644:	e000ed0c 	.word	0xe000ed0c
 8009648:	200011e0 	.word	0x200011e0

0800964c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b08a      	sub	sp, #40	@ 0x28
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009654:	2300      	movs	r3, #0
 8009656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009658:	f7fe fd72 	bl	8008140 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800965c:	4b5c      	ldr	r3, [pc, #368]	@ (80097d0 <pvPortMalloc+0x184>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d101      	bne.n	8009668 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009664:	f000 f924 	bl	80098b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009668:	4b5a      	ldr	r3, [pc, #360]	@ (80097d4 <pvPortMalloc+0x188>)
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4013      	ands	r3, r2
 8009670:	2b00      	cmp	r3, #0
 8009672:	f040 8095 	bne.w	80097a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d01e      	beq.n	80096ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800967c:	2208      	movs	r2, #8
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4413      	add	r3, r2
 8009682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f003 0307 	and.w	r3, r3, #7
 800968a:	2b00      	cmp	r3, #0
 800968c:	d015      	beq.n	80096ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f023 0307 	bic.w	r3, r3, #7
 8009694:	3308      	adds	r3, #8
 8009696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f003 0307 	and.w	r3, r3, #7
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00b      	beq.n	80096ba <pvPortMalloc+0x6e>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	617b      	str	r3, [r7, #20]
}
 80096b4:	bf00      	nop
 80096b6:	bf00      	nop
 80096b8:	e7fd      	b.n	80096b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d06f      	beq.n	80097a0 <pvPortMalloc+0x154>
 80096c0:	4b45      	ldr	r3, [pc, #276]	@ (80097d8 <pvPortMalloc+0x18c>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d86a      	bhi.n	80097a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80096ca:	4b44      	ldr	r3, [pc, #272]	@ (80097dc <pvPortMalloc+0x190>)
 80096cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80096ce:	4b43      	ldr	r3, [pc, #268]	@ (80097dc <pvPortMalloc+0x190>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096d4:	e004      	b.n	80096e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80096d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80096da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d903      	bls.n	80096f2 <pvPortMalloc+0xa6>
 80096ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1f1      	bne.n	80096d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80096f2:	4b37      	ldr	r3, [pc, #220]	@ (80097d0 <pvPortMalloc+0x184>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d051      	beq.n	80097a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2208      	movs	r2, #8
 8009702:	4413      	add	r3, r2
 8009704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	6a3b      	ldr	r3, [r7, #32]
 800970c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800970e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009710:	685a      	ldr	r2, [r3, #4]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	1ad2      	subs	r2, r2, r3
 8009716:	2308      	movs	r3, #8
 8009718:	005b      	lsls	r3, r3, #1
 800971a:	429a      	cmp	r2, r3
 800971c:	d920      	bls.n	8009760 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800971e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4413      	add	r3, r2
 8009724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	f003 0307 	and.w	r3, r3, #7
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00b      	beq.n	8009748 <pvPortMalloc+0xfc>
	__asm volatile
 8009730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009734:	f383 8811 	msr	BASEPRI, r3
 8009738:	f3bf 8f6f 	isb	sy
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	613b      	str	r3, [r7, #16]
}
 8009742:	bf00      	nop
 8009744:	bf00      	nop
 8009746:	e7fd      	b.n	8009744 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974a:	685a      	ldr	r2, [r3, #4]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	1ad2      	subs	r2, r2, r3
 8009750:	69bb      	ldr	r3, [r7, #24]
 8009752:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800975a:	69b8      	ldr	r0, [r7, #24]
 800975c:	f000 f90a 	bl	8009974 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009760:	4b1d      	ldr	r3, [pc, #116]	@ (80097d8 <pvPortMalloc+0x18c>)
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	1ad3      	subs	r3, r2, r3
 800976a:	4a1b      	ldr	r2, [pc, #108]	@ (80097d8 <pvPortMalloc+0x18c>)
 800976c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800976e:	4b1a      	ldr	r3, [pc, #104]	@ (80097d8 <pvPortMalloc+0x18c>)
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	4b1b      	ldr	r3, [pc, #108]	@ (80097e0 <pvPortMalloc+0x194>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	429a      	cmp	r2, r3
 8009778:	d203      	bcs.n	8009782 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800977a:	4b17      	ldr	r3, [pc, #92]	@ (80097d8 <pvPortMalloc+0x18c>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a18      	ldr	r2, [pc, #96]	@ (80097e0 <pvPortMalloc+0x194>)
 8009780:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009784:	685a      	ldr	r2, [r3, #4]
 8009786:	4b13      	ldr	r3, [pc, #76]	@ (80097d4 <pvPortMalloc+0x188>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	431a      	orrs	r2, r3
 800978c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009792:	2200      	movs	r2, #0
 8009794:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009796:	4b13      	ldr	r3, [pc, #76]	@ (80097e4 <pvPortMalloc+0x198>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	3301      	adds	r3, #1
 800979c:	4a11      	ldr	r2, [pc, #68]	@ (80097e4 <pvPortMalloc+0x198>)
 800979e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80097a0:	f7fe fcdc 	bl	800815c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	f003 0307 	and.w	r3, r3, #7
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00b      	beq.n	80097c6 <pvPortMalloc+0x17a>
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	60fb      	str	r3, [r7, #12]
}
 80097c0:	bf00      	nop
 80097c2:	bf00      	nop
 80097c4:	e7fd      	b.n	80097c2 <pvPortMalloc+0x176>
	return pvReturn;
 80097c6:	69fb      	ldr	r3, [r7, #28]
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3728      	adds	r7, #40	@ 0x28
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	20001dec 	.word	0x20001dec
 80097d4:	20001e00 	.word	0x20001e00
 80097d8:	20001df0 	.word	0x20001df0
 80097dc:	20001de4 	.word	0x20001de4
 80097e0:	20001df4 	.word	0x20001df4
 80097e4:	20001df8 	.word	0x20001df8

080097e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b086      	sub	sp, #24
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d04f      	beq.n	800989a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80097fa:	2308      	movs	r3, #8
 80097fc:	425b      	negs	r3, r3
 80097fe:	697a      	ldr	r2, [r7, #20]
 8009800:	4413      	add	r3, r2
 8009802:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	685a      	ldr	r2, [r3, #4]
 800980c:	4b25      	ldr	r3, [pc, #148]	@ (80098a4 <vPortFree+0xbc>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4013      	ands	r3, r2
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10b      	bne.n	800982e <vPortFree+0x46>
	__asm volatile
 8009816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981a:	f383 8811 	msr	BASEPRI, r3
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	f3bf 8f4f 	dsb	sy
 8009826:	60fb      	str	r3, [r7, #12]
}
 8009828:	bf00      	nop
 800982a:	bf00      	nop
 800982c:	e7fd      	b.n	800982a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00b      	beq.n	800984e <vPortFree+0x66>
	__asm volatile
 8009836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	60bb      	str	r3, [r7, #8]
}
 8009848:	bf00      	nop
 800984a:	bf00      	nop
 800984c:	e7fd      	b.n	800984a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	685a      	ldr	r2, [r3, #4]
 8009852:	4b14      	ldr	r3, [pc, #80]	@ (80098a4 <vPortFree+0xbc>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4013      	ands	r3, r2
 8009858:	2b00      	cmp	r3, #0
 800985a:	d01e      	beq.n	800989a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d11a      	bne.n	800989a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	685a      	ldr	r2, [r3, #4]
 8009868:	4b0e      	ldr	r3, [pc, #56]	@ (80098a4 <vPortFree+0xbc>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	43db      	mvns	r3, r3
 800986e:	401a      	ands	r2, r3
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009874:	f7fe fc64 	bl	8008140 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	685a      	ldr	r2, [r3, #4]
 800987c:	4b0a      	ldr	r3, [pc, #40]	@ (80098a8 <vPortFree+0xc0>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4413      	add	r3, r2
 8009882:	4a09      	ldr	r2, [pc, #36]	@ (80098a8 <vPortFree+0xc0>)
 8009884:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009886:	6938      	ldr	r0, [r7, #16]
 8009888:	f000 f874 	bl	8009974 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800988c:	4b07      	ldr	r3, [pc, #28]	@ (80098ac <vPortFree+0xc4>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	3301      	adds	r3, #1
 8009892:	4a06      	ldr	r2, [pc, #24]	@ (80098ac <vPortFree+0xc4>)
 8009894:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009896:	f7fe fc61 	bl	800815c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800989a:	bf00      	nop
 800989c:	3718      	adds	r7, #24
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	20001e00 	.word	0x20001e00
 80098a8:	20001df0 	.word	0x20001df0
 80098ac:	20001dfc 	.word	0x20001dfc

080098b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80098b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80098ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80098bc:	4b27      	ldr	r3, [pc, #156]	@ (800995c <prvHeapInit+0xac>)
 80098be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f003 0307 	and.w	r3, r3, #7
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00c      	beq.n	80098e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3307      	adds	r3, #7
 80098ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f023 0307 	bic.w	r3, r3, #7
 80098d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	1ad3      	subs	r3, r2, r3
 80098de:	4a1f      	ldr	r2, [pc, #124]	@ (800995c <prvHeapInit+0xac>)
 80098e0:	4413      	add	r3, r2
 80098e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80098e8:	4a1d      	ldr	r2, [pc, #116]	@ (8009960 <prvHeapInit+0xb0>)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80098ee:	4b1c      	ldr	r3, [pc, #112]	@ (8009960 <prvHeapInit+0xb0>)
 80098f0:	2200      	movs	r2, #0
 80098f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	4413      	add	r3, r2
 80098fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80098fc:	2208      	movs	r2, #8
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	1a9b      	subs	r3, r3, r2
 8009902:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f023 0307 	bic.w	r3, r3, #7
 800990a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	4a15      	ldr	r2, [pc, #84]	@ (8009964 <prvHeapInit+0xb4>)
 8009910:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009912:	4b14      	ldr	r3, [pc, #80]	@ (8009964 <prvHeapInit+0xb4>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2200      	movs	r2, #0
 8009918:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800991a:	4b12      	ldr	r3, [pc, #72]	@ (8009964 <prvHeapInit+0xb4>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2200      	movs	r2, #0
 8009920:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	1ad2      	subs	r2, r2, r3
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009930:	4b0c      	ldr	r3, [pc, #48]	@ (8009964 <prvHeapInit+0xb4>)
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	4a0a      	ldr	r2, [pc, #40]	@ (8009968 <prvHeapInit+0xb8>)
 800993e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	4a09      	ldr	r2, [pc, #36]	@ (800996c <prvHeapInit+0xbc>)
 8009946:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009948:	4b09      	ldr	r3, [pc, #36]	@ (8009970 <prvHeapInit+0xc0>)
 800994a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800994e:	601a      	str	r2, [r3, #0]
}
 8009950:	bf00      	nop
 8009952:	3714      	adds	r7, #20
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr
 800995c:	200011e4 	.word	0x200011e4
 8009960:	20001de4 	.word	0x20001de4
 8009964:	20001dec 	.word	0x20001dec
 8009968:	20001df4 	.word	0x20001df4
 800996c:	20001df0 	.word	0x20001df0
 8009970:	20001e00 	.word	0x20001e00

08009974 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800997c:	4b28      	ldr	r3, [pc, #160]	@ (8009a20 <prvInsertBlockIntoFreeList+0xac>)
 800997e:	60fb      	str	r3, [r7, #12]
 8009980:	e002      	b.n	8009988 <prvInsertBlockIntoFreeList+0x14>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	60fb      	str	r3, [r7, #12]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	429a      	cmp	r2, r3
 8009990:	d8f7      	bhi.n	8009982 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	4413      	add	r3, r2
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d108      	bne.n	80099b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	685a      	ldr	r2, [r3, #4]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	441a      	add	r2, r3
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	68ba      	ldr	r2, [r7, #8]
 80099c0:	441a      	add	r2, r3
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d118      	bne.n	80099fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	4b15      	ldr	r3, [pc, #84]	@ (8009a24 <prvInsertBlockIntoFreeList+0xb0>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d00d      	beq.n	80099f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	685a      	ldr	r2, [r3, #4]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	441a      	add	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	601a      	str	r2, [r3, #0]
 80099f0:	e008      	b.n	8009a04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009a24 <prvInsertBlockIntoFreeList+0xb0>)
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	601a      	str	r2, [r3, #0]
 80099fa:	e003      	b.n	8009a04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d002      	beq.n	8009a12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a12:	bf00      	nop
 8009a14:	3714      	adds	r7, #20
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	20001de4 	.word	0x20001de4
 8009a24:	20001dec 	.word	0x20001dec

08009a28 <std>:
 8009a28:	2300      	movs	r3, #0
 8009a2a:	b510      	push	{r4, lr}
 8009a2c:	4604      	mov	r4, r0
 8009a2e:	e9c0 3300 	strd	r3, r3, [r0]
 8009a32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a36:	6083      	str	r3, [r0, #8]
 8009a38:	8181      	strh	r1, [r0, #12]
 8009a3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009a3c:	81c2      	strh	r2, [r0, #14]
 8009a3e:	6183      	str	r3, [r0, #24]
 8009a40:	4619      	mov	r1, r3
 8009a42:	2208      	movs	r2, #8
 8009a44:	305c      	adds	r0, #92	@ 0x5c
 8009a46:	f000 f9f9 	bl	8009e3c <memset>
 8009a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a80 <std+0x58>)
 8009a4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a84 <std+0x5c>)
 8009a50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009a52:	4b0d      	ldr	r3, [pc, #52]	@ (8009a88 <std+0x60>)
 8009a54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009a56:	4b0d      	ldr	r3, [pc, #52]	@ (8009a8c <std+0x64>)
 8009a58:	6323      	str	r3, [r4, #48]	@ 0x30
 8009a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a90 <std+0x68>)
 8009a5c:	6224      	str	r4, [r4, #32]
 8009a5e:	429c      	cmp	r4, r3
 8009a60:	d006      	beq.n	8009a70 <std+0x48>
 8009a62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a66:	4294      	cmp	r4, r2
 8009a68:	d002      	beq.n	8009a70 <std+0x48>
 8009a6a:	33d0      	adds	r3, #208	@ 0xd0
 8009a6c:	429c      	cmp	r4, r3
 8009a6e:	d105      	bne.n	8009a7c <std+0x54>
 8009a70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a78:	f000 baae 	b.w	8009fd8 <__retarget_lock_init_recursive>
 8009a7c:	bd10      	pop	{r4, pc}
 8009a7e:	bf00      	nop
 8009a80:	08009c8d 	.word	0x08009c8d
 8009a84:	08009caf 	.word	0x08009caf
 8009a88:	08009ce7 	.word	0x08009ce7
 8009a8c:	08009d0b 	.word	0x08009d0b
 8009a90:	20001e04 	.word	0x20001e04

08009a94 <stdio_exit_handler>:
 8009a94:	4a02      	ldr	r2, [pc, #8]	@ (8009aa0 <stdio_exit_handler+0xc>)
 8009a96:	4903      	ldr	r1, [pc, #12]	@ (8009aa4 <stdio_exit_handler+0x10>)
 8009a98:	4803      	ldr	r0, [pc, #12]	@ (8009aa8 <stdio_exit_handler+0x14>)
 8009a9a:	f000 b869 	b.w	8009b70 <_fwalk_sglue>
 8009a9e:	bf00      	nop
 8009aa0:	20000010 	.word	0x20000010
 8009aa4:	0800a895 	.word	0x0800a895
 8009aa8:	20000020 	.word	0x20000020

08009aac <cleanup_stdio>:
 8009aac:	6841      	ldr	r1, [r0, #4]
 8009aae:	4b0c      	ldr	r3, [pc, #48]	@ (8009ae0 <cleanup_stdio+0x34>)
 8009ab0:	4299      	cmp	r1, r3
 8009ab2:	b510      	push	{r4, lr}
 8009ab4:	4604      	mov	r4, r0
 8009ab6:	d001      	beq.n	8009abc <cleanup_stdio+0x10>
 8009ab8:	f000 feec 	bl	800a894 <_fflush_r>
 8009abc:	68a1      	ldr	r1, [r4, #8]
 8009abe:	4b09      	ldr	r3, [pc, #36]	@ (8009ae4 <cleanup_stdio+0x38>)
 8009ac0:	4299      	cmp	r1, r3
 8009ac2:	d002      	beq.n	8009aca <cleanup_stdio+0x1e>
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	f000 fee5 	bl	800a894 <_fflush_r>
 8009aca:	68e1      	ldr	r1, [r4, #12]
 8009acc:	4b06      	ldr	r3, [pc, #24]	@ (8009ae8 <cleanup_stdio+0x3c>)
 8009ace:	4299      	cmp	r1, r3
 8009ad0:	d004      	beq.n	8009adc <cleanup_stdio+0x30>
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ad8:	f000 bedc 	b.w	800a894 <_fflush_r>
 8009adc:	bd10      	pop	{r4, pc}
 8009ade:	bf00      	nop
 8009ae0:	20001e04 	.word	0x20001e04
 8009ae4:	20001e6c 	.word	0x20001e6c
 8009ae8:	20001ed4 	.word	0x20001ed4

08009aec <global_stdio_init.part.0>:
 8009aec:	b510      	push	{r4, lr}
 8009aee:	4b0b      	ldr	r3, [pc, #44]	@ (8009b1c <global_stdio_init.part.0+0x30>)
 8009af0:	4c0b      	ldr	r4, [pc, #44]	@ (8009b20 <global_stdio_init.part.0+0x34>)
 8009af2:	4a0c      	ldr	r2, [pc, #48]	@ (8009b24 <global_stdio_init.part.0+0x38>)
 8009af4:	601a      	str	r2, [r3, #0]
 8009af6:	4620      	mov	r0, r4
 8009af8:	2200      	movs	r2, #0
 8009afa:	2104      	movs	r1, #4
 8009afc:	f7ff ff94 	bl	8009a28 <std>
 8009b00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009b04:	2201      	movs	r2, #1
 8009b06:	2109      	movs	r1, #9
 8009b08:	f7ff ff8e 	bl	8009a28 <std>
 8009b0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009b10:	2202      	movs	r2, #2
 8009b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b16:	2112      	movs	r1, #18
 8009b18:	f7ff bf86 	b.w	8009a28 <std>
 8009b1c:	20001f3c 	.word	0x20001f3c
 8009b20:	20001e04 	.word	0x20001e04
 8009b24:	08009a95 	.word	0x08009a95

08009b28 <__sfp_lock_acquire>:
 8009b28:	4801      	ldr	r0, [pc, #4]	@ (8009b30 <__sfp_lock_acquire+0x8>)
 8009b2a:	f000 ba56 	b.w	8009fda <__retarget_lock_acquire_recursive>
 8009b2e:	bf00      	nop
 8009b30:	20001f45 	.word	0x20001f45

08009b34 <__sfp_lock_release>:
 8009b34:	4801      	ldr	r0, [pc, #4]	@ (8009b3c <__sfp_lock_release+0x8>)
 8009b36:	f000 ba51 	b.w	8009fdc <__retarget_lock_release_recursive>
 8009b3a:	bf00      	nop
 8009b3c:	20001f45 	.word	0x20001f45

08009b40 <__sinit>:
 8009b40:	b510      	push	{r4, lr}
 8009b42:	4604      	mov	r4, r0
 8009b44:	f7ff fff0 	bl	8009b28 <__sfp_lock_acquire>
 8009b48:	6a23      	ldr	r3, [r4, #32]
 8009b4a:	b11b      	cbz	r3, 8009b54 <__sinit+0x14>
 8009b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b50:	f7ff bff0 	b.w	8009b34 <__sfp_lock_release>
 8009b54:	4b04      	ldr	r3, [pc, #16]	@ (8009b68 <__sinit+0x28>)
 8009b56:	6223      	str	r3, [r4, #32]
 8009b58:	4b04      	ldr	r3, [pc, #16]	@ (8009b6c <__sinit+0x2c>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1f5      	bne.n	8009b4c <__sinit+0xc>
 8009b60:	f7ff ffc4 	bl	8009aec <global_stdio_init.part.0>
 8009b64:	e7f2      	b.n	8009b4c <__sinit+0xc>
 8009b66:	bf00      	nop
 8009b68:	08009aad 	.word	0x08009aad
 8009b6c:	20001f3c 	.word	0x20001f3c

08009b70 <_fwalk_sglue>:
 8009b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b74:	4607      	mov	r7, r0
 8009b76:	4688      	mov	r8, r1
 8009b78:	4614      	mov	r4, r2
 8009b7a:	2600      	movs	r6, #0
 8009b7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b80:	f1b9 0901 	subs.w	r9, r9, #1
 8009b84:	d505      	bpl.n	8009b92 <_fwalk_sglue+0x22>
 8009b86:	6824      	ldr	r4, [r4, #0]
 8009b88:	2c00      	cmp	r4, #0
 8009b8a:	d1f7      	bne.n	8009b7c <_fwalk_sglue+0xc>
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b92:	89ab      	ldrh	r3, [r5, #12]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d907      	bls.n	8009ba8 <_fwalk_sglue+0x38>
 8009b98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	d003      	beq.n	8009ba8 <_fwalk_sglue+0x38>
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	4638      	mov	r0, r7
 8009ba4:	47c0      	blx	r8
 8009ba6:	4306      	orrs	r6, r0
 8009ba8:	3568      	adds	r5, #104	@ 0x68
 8009baa:	e7e9      	b.n	8009b80 <_fwalk_sglue+0x10>

08009bac <iprintf>:
 8009bac:	b40f      	push	{r0, r1, r2, r3}
 8009bae:	b507      	push	{r0, r1, r2, lr}
 8009bb0:	4906      	ldr	r1, [pc, #24]	@ (8009bcc <iprintf+0x20>)
 8009bb2:	ab04      	add	r3, sp, #16
 8009bb4:	6808      	ldr	r0, [r1, #0]
 8009bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bba:	6881      	ldr	r1, [r0, #8]
 8009bbc:	9301      	str	r3, [sp, #4]
 8009bbe:	f000 fb3f 	bl	800a240 <_vfiprintf_r>
 8009bc2:	b003      	add	sp, #12
 8009bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bc8:	b004      	add	sp, #16
 8009bca:	4770      	bx	lr
 8009bcc:	2000001c 	.word	0x2000001c

08009bd0 <_puts_r>:
 8009bd0:	6a03      	ldr	r3, [r0, #32]
 8009bd2:	b570      	push	{r4, r5, r6, lr}
 8009bd4:	6884      	ldr	r4, [r0, #8]
 8009bd6:	4605      	mov	r5, r0
 8009bd8:	460e      	mov	r6, r1
 8009bda:	b90b      	cbnz	r3, 8009be0 <_puts_r+0x10>
 8009bdc:	f7ff ffb0 	bl	8009b40 <__sinit>
 8009be0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009be2:	07db      	lsls	r3, r3, #31
 8009be4:	d405      	bmi.n	8009bf2 <_puts_r+0x22>
 8009be6:	89a3      	ldrh	r3, [r4, #12]
 8009be8:	0598      	lsls	r0, r3, #22
 8009bea:	d402      	bmi.n	8009bf2 <_puts_r+0x22>
 8009bec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bee:	f000 f9f4 	bl	8009fda <__retarget_lock_acquire_recursive>
 8009bf2:	89a3      	ldrh	r3, [r4, #12]
 8009bf4:	0719      	lsls	r1, r3, #28
 8009bf6:	d502      	bpl.n	8009bfe <_puts_r+0x2e>
 8009bf8:	6923      	ldr	r3, [r4, #16]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d135      	bne.n	8009c6a <_puts_r+0x9a>
 8009bfe:	4621      	mov	r1, r4
 8009c00:	4628      	mov	r0, r5
 8009c02:	f000 f8c5 	bl	8009d90 <__swsetup_r>
 8009c06:	b380      	cbz	r0, 8009c6a <_puts_r+0x9a>
 8009c08:	f04f 35ff 	mov.w	r5, #4294967295
 8009c0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c0e:	07da      	lsls	r2, r3, #31
 8009c10:	d405      	bmi.n	8009c1e <_puts_r+0x4e>
 8009c12:	89a3      	ldrh	r3, [r4, #12]
 8009c14:	059b      	lsls	r3, r3, #22
 8009c16:	d402      	bmi.n	8009c1e <_puts_r+0x4e>
 8009c18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c1a:	f000 f9df 	bl	8009fdc <__retarget_lock_release_recursive>
 8009c1e:	4628      	mov	r0, r5
 8009c20:	bd70      	pop	{r4, r5, r6, pc}
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	da04      	bge.n	8009c30 <_puts_r+0x60>
 8009c26:	69a2      	ldr	r2, [r4, #24]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	dc17      	bgt.n	8009c5c <_puts_r+0x8c>
 8009c2c:	290a      	cmp	r1, #10
 8009c2e:	d015      	beq.n	8009c5c <_puts_r+0x8c>
 8009c30:	6823      	ldr	r3, [r4, #0]
 8009c32:	1c5a      	adds	r2, r3, #1
 8009c34:	6022      	str	r2, [r4, #0]
 8009c36:	7019      	strb	r1, [r3, #0]
 8009c38:	68a3      	ldr	r3, [r4, #8]
 8009c3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	60a3      	str	r3, [r4, #8]
 8009c42:	2900      	cmp	r1, #0
 8009c44:	d1ed      	bne.n	8009c22 <_puts_r+0x52>
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	da11      	bge.n	8009c6e <_puts_r+0x9e>
 8009c4a:	4622      	mov	r2, r4
 8009c4c:	210a      	movs	r1, #10
 8009c4e:	4628      	mov	r0, r5
 8009c50:	f000 f85f 	bl	8009d12 <__swbuf_r>
 8009c54:	3001      	adds	r0, #1
 8009c56:	d0d7      	beq.n	8009c08 <_puts_r+0x38>
 8009c58:	250a      	movs	r5, #10
 8009c5a:	e7d7      	b.n	8009c0c <_puts_r+0x3c>
 8009c5c:	4622      	mov	r2, r4
 8009c5e:	4628      	mov	r0, r5
 8009c60:	f000 f857 	bl	8009d12 <__swbuf_r>
 8009c64:	3001      	adds	r0, #1
 8009c66:	d1e7      	bne.n	8009c38 <_puts_r+0x68>
 8009c68:	e7ce      	b.n	8009c08 <_puts_r+0x38>
 8009c6a:	3e01      	subs	r6, #1
 8009c6c:	e7e4      	b.n	8009c38 <_puts_r+0x68>
 8009c6e:	6823      	ldr	r3, [r4, #0]
 8009c70:	1c5a      	adds	r2, r3, #1
 8009c72:	6022      	str	r2, [r4, #0]
 8009c74:	220a      	movs	r2, #10
 8009c76:	701a      	strb	r2, [r3, #0]
 8009c78:	e7ee      	b.n	8009c58 <_puts_r+0x88>
	...

08009c7c <puts>:
 8009c7c:	4b02      	ldr	r3, [pc, #8]	@ (8009c88 <puts+0xc>)
 8009c7e:	4601      	mov	r1, r0
 8009c80:	6818      	ldr	r0, [r3, #0]
 8009c82:	f7ff bfa5 	b.w	8009bd0 <_puts_r>
 8009c86:	bf00      	nop
 8009c88:	2000001c 	.word	0x2000001c

08009c8c <__sread>:
 8009c8c:	b510      	push	{r4, lr}
 8009c8e:	460c      	mov	r4, r1
 8009c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c94:	f000 f952 	bl	8009f3c <_read_r>
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	bfab      	itete	ge
 8009c9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009c9e:	89a3      	ldrhlt	r3, [r4, #12]
 8009ca0:	181b      	addge	r3, r3, r0
 8009ca2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009ca6:	bfac      	ite	ge
 8009ca8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009caa:	81a3      	strhlt	r3, [r4, #12]
 8009cac:	bd10      	pop	{r4, pc}

08009cae <__swrite>:
 8009cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb2:	461f      	mov	r7, r3
 8009cb4:	898b      	ldrh	r3, [r1, #12]
 8009cb6:	05db      	lsls	r3, r3, #23
 8009cb8:	4605      	mov	r5, r0
 8009cba:	460c      	mov	r4, r1
 8009cbc:	4616      	mov	r6, r2
 8009cbe:	d505      	bpl.n	8009ccc <__swrite+0x1e>
 8009cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cc4:	2302      	movs	r3, #2
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f000 f926 	bl	8009f18 <_lseek_r>
 8009ccc:	89a3      	ldrh	r3, [r4, #12]
 8009cce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009cd6:	81a3      	strh	r3, [r4, #12]
 8009cd8:	4632      	mov	r2, r6
 8009cda:	463b      	mov	r3, r7
 8009cdc:	4628      	mov	r0, r5
 8009cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce2:	f000 b93d 	b.w	8009f60 <_write_r>

08009ce6 <__sseek>:
 8009ce6:	b510      	push	{r4, lr}
 8009ce8:	460c      	mov	r4, r1
 8009cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cee:	f000 f913 	bl	8009f18 <_lseek_r>
 8009cf2:	1c43      	adds	r3, r0, #1
 8009cf4:	89a3      	ldrh	r3, [r4, #12]
 8009cf6:	bf15      	itete	ne
 8009cf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009cfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009cfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009d02:	81a3      	strheq	r3, [r4, #12]
 8009d04:	bf18      	it	ne
 8009d06:	81a3      	strhne	r3, [r4, #12]
 8009d08:	bd10      	pop	{r4, pc}

08009d0a <__sclose>:
 8009d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d0e:	f000 b89d 	b.w	8009e4c <_close_r>

08009d12 <__swbuf_r>:
 8009d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d14:	460e      	mov	r6, r1
 8009d16:	4614      	mov	r4, r2
 8009d18:	4605      	mov	r5, r0
 8009d1a:	b118      	cbz	r0, 8009d24 <__swbuf_r+0x12>
 8009d1c:	6a03      	ldr	r3, [r0, #32]
 8009d1e:	b90b      	cbnz	r3, 8009d24 <__swbuf_r+0x12>
 8009d20:	f7ff ff0e 	bl	8009b40 <__sinit>
 8009d24:	69a3      	ldr	r3, [r4, #24]
 8009d26:	60a3      	str	r3, [r4, #8]
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	071a      	lsls	r2, r3, #28
 8009d2c:	d501      	bpl.n	8009d32 <__swbuf_r+0x20>
 8009d2e:	6923      	ldr	r3, [r4, #16]
 8009d30:	b943      	cbnz	r3, 8009d44 <__swbuf_r+0x32>
 8009d32:	4621      	mov	r1, r4
 8009d34:	4628      	mov	r0, r5
 8009d36:	f000 f82b 	bl	8009d90 <__swsetup_r>
 8009d3a:	b118      	cbz	r0, 8009d44 <__swbuf_r+0x32>
 8009d3c:	f04f 37ff 	mov.w	r7, #4294967295
 8009d40:	4638      	mov	r0, r7
 8009d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d44:	6823      	ldr	r3, [r4, #0]
 8009d46:	6922      	ldr	r2, [r4, #16]
 8009d48:	1a98      	subs	r0, r3, r2
 8009d4a:	6963      	ldr	r3, [r4, #20]
 8009d4c:	b2f6      	uxtb	r6, r6
 8009d4e:	4283      	cmp	r3, r0
 8009d50:	4637      	mov	r7, r6
 8009d52:	dc05      	bgt.n	8009d60 <__swbuf_r+0x4e>
 8009d54:	4621      	mov	r1, r4
 8009d56:	4628      	mov	r0, r5
 8009d58:	f000 fd9c 	bl	800a894 <_fflush_r>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d1ed      	bne.n	8009d3c <__swbuf_r+0x2a>
 8009d60:	68a3      	ldr	r3, [r4, #8]
 8009d62:	3b01      	subs	r3, #1
 8009d64:	60a3      	str	r3, [r4, #8]
 8009d66:	6823      	ldr	r3, [r4, #0]
 8009d68:	1c5a      	adds	r2, r3, #1
 8009d6a:	6022      	str	r2, [r4, #0]
 8009d6c:	701e      	strb	r6, [r3, #0]
 8009d6e:	6962      	ldr	r2, [r4, #20]
 8009d70:	1c43      	adds	r3, r0, #1
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d004      	beq.n	8009d80 <__swbuf_r+0x6e>
 8009d76:	89a3      	ldrh	r3, [r4, #12]
 8009d78:	07db      	lsls	r3, r3, #31
 8009d7a:	d5e1      	bpl.n	8009d40 <__swbuf_r+0x2e>
 8009d7c:	2e0a      	cmp	r6, #10
 8009d7e:	d1df      	bne.n	8009d40 <__swbuf_r+0x2e>
 8009d80:	4621      	mov	r1, r4
 8009d82:	4628      	mov	r0, r5
 8009d84:	f000 fd86 	bl	800a894 <_fflush_r>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d0d9      	beq.n	8009d40 <__swbuf_r+0x2e>
 8009d8c:	e7d6      	b.n	8009d3c <__swbuf_r+0x2a>
	...

08009d90 <__swsetup_r>:
 8009d90:	b538      	push	{r3, r4, r5, lr}
 8009d92:	4b29      	ldr	r3, [pc, #164]	@ (8009e38 <__swsetup_r+0xa8>)
 8009d94:	4605      	mov	r5, r0
 8009d96:	6818      	ldr	r0, [r3, #0]
 8009d98:	460c      	mov	r4, r1
 8009d9a:	b118      	cbz	r0, 8009da4 <__swsetup_r+0x14>
 8009d9c:	6a03      	ldr	r3, [r0, #32]
 8009d9e:	b90b      	cbnz	r3, 8009da4 <__swsetup_r+0x14>
 8009da0:	f7ff fece 	bl	8009b40 <__sinit>
 8009da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009da8:	0719      	lsls	r1, r3, #28
 8009daa:	d422      	bmi.n	8009df2 <__swsetup_r+0x62>
 8009dac:	06da      	lsls	r2, r3, #27
 8009dae:	d407      	bmi.n	8009dc0 <__swsetup_r+0x30>
 8009db0:	2209      	movs	r2, #9
 8009db2:	602a      	str	r2, [r5, #0]
 8009db4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009db8:	81a3      	strh	r3, [r4, #12]
 8009dba:	f04f 30ff 	mov.w	r0, #4294967295
 8009dbe:	e033      	b.n	8009e28 <__swsetup_r+0x98>
 8009dc0:	0758      	lsls	r0, r3, #29
 8009dc2:	d512      	bpl.n	8009dea <__swsetup_r+0x5a>
 8009dc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009dc6:	b141      	cbz	r1, 8009dda <__swsetup_r+0x4a>
 8009dc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009dcc:	4299      	cmp	r1, r3
 8009dce:	d002      	beq.n	8009dd6 <__swsetup_r+0x46>
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	f000 f913 	bl	8009ffc <_free_r>
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009de0:	81a3      	strh	r3, [r4, #12]
 8009de2:	2300      	movs	r3, #0
 8009de4:	6063      	str	r3, [r4, #4]
 8009de6:	6923      	ldr	r3, [r4, #16]
 8009de8:	6023      	str	r3, [r4, #0]
 8009dea:	89a3      	ldrh	r3, [r4, #12]
 8009dec:	f043 0308 	orr.w	r3, r3, #8
 8009df0:	81a3      	strh	r3, [r4, #12]
 8009df2:	6923      	ldr	r3, [r4, #16]
 8009df4:	b94b      	cbnz	r3, 8009e0a <__swsetup_r+0x7a>
 8009df6:	89a3      	ldrh	r3, [r4, #12]
 8009df8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e00:	d003      	beq.n	8009e0a <__swsetup_r+0x7a>
 8009e02:	4621      	mov	r1, r4
 8009e04:	4628      	mov	r0, r5
 8009e06:	f000 fd93 	bl	800a930 <__smakebuf_r>
 8009e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e0e:	f013 0201 	ands.w	r2, r3, #1
 8009e12:	d00a      	beq.n	8009e2a <__swsetup_r+0x9a>
 8009e14:	2200      	movs	r2, #0
 8009e16:	60a2      	str	r2, [r4, #8]
 8009e18:	6962      	ldr	r2, [r4, #20]
 8009e1a:	4252      	negs	r2, r2
 8009e1c:	61a2      	str	r2, [r4, #24]
 8009e1e:	6922      	ldr	r2, [r4, #16]
 8009e20:	b942      	cbnz	r2, 8009e34 <__swsetup_r+0xa4>
 8009e22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009e26:	d1c5      	bne.n	8009db4 <__swsetup_r+0x24>
 8009e28:	bd38      	pop	{r3, r4, r5, pc}
 8009e2a:	0799      	lsls	r1, r3, #30
 8009e2c:	bf58      	it	pl
 8009e2e:	6962      	ldrpl	r2, [r4, #20]
 8009e30:	60a2      	str	r2, [r4, #8]
 8009e32:	e7f4      	b.n	8009e1e <__swsetup_r+0x8e>
 8009e34:	2000      	movs	r0, #0
 8009e36:	e7f7      	b.n	8009e28 <__swsetup_r+0x98>
 8009e38:	2000001c 	.word	0x2000001c

08009e3c <memset>:
 8009e3c:	4402      	add	r2, r0
 8009e3e:	4603      	mov	r3, r0
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d100      	bne.n	8009e46 <memset+0xa>
 8009e44:	4770      	bx	lr
 8009e46:	f803 1b01 	strb.w	r1, [r3], #1
 8009e4a:	e7f9      	b.n	8009e40 <memset+0x4>

08009e4c <_close_r>:
 8009e4c:	b538      	push	{r3, r4, r5, lr}
 8009e4e:	4d06      	ldr	r5, [pc, #24]	@ (8009e68 <_close_r+0x1c>)
 8009e50:	2300      	movs	r3, #0
 8009e52:	4604      	mov	r4, r0
 8009e54:	4608      	mov	r0, r1
 8009e56:	602b      	str	r3, [r5, #0]
 8009e58:	f7f7 fa5f 	bl	800131a <_close>
 8009e5c:	1c43      	adds	r3, r0, #1
 8009e5e:	d102      	bne.n	8009e66 <_close_r+0x1a>
 8009e60:	682b      	ldr	r3, [r5, #0]
 8009e62:	b103      	cbz	r3, 8009e66 <_close_r+0x1a>
 8009e64:	6023      	str	r3, [r4, #0]
 8009e66:	bd38      	pop	{r3, r4, r5, pc}
 8009e68:	20001f40 	.word	0x20001f40

08009e6c <_reclaim_reent>:
 8009e6c:	4b29      	ldr	r3, [pc, #164]	@ (8009f14 <_reclaim_reent+0xa8>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4283      	cmp	r3, r0
 8009e72:	b570      	push	{r4, r5, r6, lr}
 8009e74:	4604      	mov	r4, r0
 8009e76:	d04b      	beq.n	8009f10 <_reclaim_reent+0xa4>
 8009e78:	69c3      	ldr	r3, [r0, #28]
 8009e7a:	b1ab      	cbz	r3, 8009ea8 <_reclaim_reent+0x3c>
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	b16b      	cbz	r3, 8009e9c <_reclaim_reent+0x30>
 8009e80:	2500      	movs	r5, #0
 8009e82:	69e3      	ldr	r3, [r4, #28]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	5959      	ldr	r1, [r3, r5]
 8009e88:	2900      	cmp	r1, #0
 8009e8a:	d13b      	bne.n	8009f04 <_reclaim_reent+0x98>
 8009e8c:	3504      	adds	r5, #4
 8009e8e:	2d80      	cmp	r5, #128	@ 0x80
 8009e90:	d1f7      	bne.n	8009e82 <_reclaim_reent+0x16>
 8009e92:	69e3      	ldr	r3, [r4, #28]
 8009e94:	4620      	mov	r0, r4
 8009e96:	68d9      	ldr	r1, [r3, #12]
 8009e98:	f000 f8b0 	bl	8009ffc <_free_r>
 8009e9c:	69e3      	ldr	r3, [r4, #28]
 8009e9e:	6819      	ldr	r1, [r3, #0]
 8009ea0:	b111      	cbz	r1, 8009ea8 <_reclaim_reent+0x3c>
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f000 f8aa 	bl	8009ffc <_free_r>
 8009ea8:	6961      	ldr	r1, [r4, #20]
 8009eaa:	b111      	cbz	r1, 8009eb2 <_reclaim_reent+0x46>
 8009eac:	4620      	mov	r0, r4
 8009eae:	f000 f8a5 	bl	8009ffc <_free_r>
 8009eb2:	69e1      	ldr	r1, [r4, #28]
 8009eb4:	b111      	cbz	r1, 8009ebc <_reclaim_reent+0x50>
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f000 f8a0 	bl	8009ffc <_free_r>
 8009ebc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009ebe:	b111      	cbz	r1, 8009ec6 <_reclaim_reent+0x5a>
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f000 f89b 	bl	8009ffc <_free_r>
 8009ec6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ec8:	b111      	cbz	r1, 8009ed0 <_reclaim_reent+0x64>
 8009eca:	4620      	mov	r0, r4
 8009ecc:	f000 f896 	bl	8009ffc <_free_r>
 8009ed0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009ed2:	b111      	cbz	r1, 8009eda <_reclaim_reent+0x6e>
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f000 f891 	bl	8009ffc <_free_r>
 8009eda:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009edc:	b111      	cbz	r1, 8009ee4 <_reclaim_reent+0x78>
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f000 f88c 	bl	8009ffc <_free_r>
 8009ee4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009ee6:	b111      	cbz	r1, 8009eee <_reclaim_reent+0x82>
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f000 f887 	bl	8009ffc <_free_r>
 8009eee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009ef0:	b111      	cbz	r1, 8009ef8 <_reclaim_reent+0x8c>
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	f000 f882 	bl	8009ffc <_free_r>
 8009ef8:	6a23      	ldr	r3, [r4, #32]
 8009efa:	b14b      	cbz	r3, 8009f10 <_reclaim_reent+0xa4>
 8009efc:	4620      	mov	r0, r4
 8009efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f02:	4718      	bx	r3
 8009f04:	680e      	ldr	r6, [r1, #0]
 8009f06:	4620      	mov	r0, r4
 8009f08:	f000 f878 	bl	8009ffc <_free_r>
 8009f0c:	4631      	mov	r1, r6
 8009f0e:	e7bb      	b.n	8009e88 <_reclaim_reent+0x1c>
 8009f10:	bd70      	pop	{r4, r5, r6, pc}
 8009f12:	bf00      	nop
 8009f14:	2000001c 	.word	0x2000001c

08009f18 <_lseek_r>:
 8009f18:	b538      	push	{r3, r4, r5, lr}
 8009f1a:	4d07      	ldr	r5, [pc, #28]	@ (8009f38 <_lseek_r+0x20>)
 8009f1c:	4604      	mov	r4, r0
 8009f1e:	4608      	mov	r0, r1
 8009f20:	4611      	mov	r1, r2
 8009f22:	2200      	movs	r2, #0
 8009f24:	602a      	str	r2, [r5, #0]
 8009f26:	461a      	mov	r2, r3
 8009f28:	f7f7 fa1e 	bl	8001368 <_lseek>
 8009f2c:	1c43      	adds	r3, r0, #1
 8009f2e:	d102      	bne.n	8009f36 <_lseek_r+0x1e>
 8009f30:	682b      	ldr	r3, [r5, #0]
 8009f32:	b103      	cbz	r3, 8009f36 <_lseek_r+0x1e>
 8009f34:	6023      	str	r3, [r4, #0]
 8009f36:	bd38      	pop	{r3, r4, r5, pc}
 8009f38:	20001f40 	.word	0x20001f40

08009f3c <_read_r>:
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	4d07      	ldr	r5, [pc, #28]	@ (8009f5c <_read_r+0x20>)
 8009f40:	4604      	mov	r4, r0
 8009f42:	4608      	mov	r0, r1
 8009f44:	4611      	mov	r1, r2
 8009f46:	2200      	movs	r2, #0
 8009f48:	602a      	str	r2, [r5, #0]
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	f7f7 f9ac 	bl	80012a8 <_read>
 8009f50:	1c43      	adds	r3, r0, #1
 8009f52:	d102      	bne.n	8009f5a <_read_r+0x1e>
 8009f54:	682b      	ldr	r3, [r5, #0]
 8009f56:	b103      	cbz	r3, 8009f5a <_read_r+0x1e>
 8009f58:	6023      	str	r3, [r4, #0]
 8009f5a:	bd38      	pop	{r3, r4, r5, pc}
 8009f5c:	20001f40 	.word	0x20001f40

08009f60 <_write_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	4d07      	ldr	r5, [pc, #28]	@ (8009f80 <_write_r+0x20>)
 8009f64:	4604      	mov	r4, r0
 8009f66:	4608      	mov	r0, r1
 8009f68:	4611      	mov	r1, r2
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	602a      	str	r2, [r5, #0]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	f7f7 f9b7 	bl	80012e2 <_write>
 8009f74:	1c43      	adds	r3, r0, #1
 8009f76:	d102      	bne.n	8009f7e <_write_r+0x1e>
 8009f78:	682b      	ldr	r3, [r5, #0]
 8009f7a:	b103      	cbz	r3, 8009f7e <_write_r+0x1e>
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}
 8009f80:	20001f40 	.word	0x20001f40

08009f84 <__errno>:
 8009f84:	4b01      	ldr	r3, [pc, #4]	@ (8009f8c <__errno+0x8>)
 8009f86:	6818      	ldr	r0, [r3, #0]
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	2000001c 	.word	0x2000001c

08009f90 <__libc_init_array>:
 8009f90:	b570      	push	{r4, r5, r6, lr}
 8009f92:	4d0d      	ldr	r5, [pc, #52]	@ (8009fc8 <__libc_init_array+0x38>)
 8009f94:	4c0d      	ldr	r4, [pc, #52]	@ (8009fcc <__libc_init_array+0x3c>)
 8009f96:	1b64      	subs	r4, r4, r5
 8009f98:	10a4      	asrs	r4, r4, #2
 8009f9a:	2600      	movs	r6, #0
 8009f9c:	42a6      	cmp	r6, r4
 8009f9e:	d109      	bne.n	8009fb4 <__libc_init_array+0x24>
 8009fa0:	4d0b      	ldr	r5, [pc, #44]	@ (8009fd0 <__libc_init_array+0x40>)
 8009fa2:	4c0c      	ldr	r4, [pc, #48]	@ (8009fd4 <__libc_init_array+0x44>)
 8009fa4:	f000 fd32 	bl	800aa0c <_init>
 8009fa8:	1b64      	subs	r4, r4, r5
 8009faa:	10a4      	asrs	r4, r4, #2
 8009fac:	2600      	movs	r6, #0
 8009fae:	42a6      	cmp	r6, r4
 8009fb0:	d105      	bne.n	8009fbe <__libc_init_array+0x2e>
 8009fb2:	bd70      	pop	{r4, r5, r6, pc}
 8009fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fb8:	4798      	blx	r3
 8009fba:	3601      	adds	r6, #1
 8009fbc:	e7ee      	b.n	8009f9c <__libc_init_array+0xc>
 8009fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fc2:	4798      	blx	r3
 8009fc4:	3601      	adds	r6, #1
 8009fc6:	e7f2      	b.n	8009fae <__libc_init_array+0x1e>
 8009fc8:	0800ab34 	.word	0x0800ab34
 8009fcc:	0800ab34 	.word	0x0800ab34
 8009fd0:	0800ab34 	.word	0x0800ab34
 8009fd4:	0800ab38 	.word	0x0800ab38

08009fd8 <__retarget_lock_init_recursive>:
 8009fd8:	4770      	bx	lr

08009fda <__retarget_lock_acquire_recursive>:
 8009fda:	4770      	bx	lr

08009fdc <__retarget_lock_release_recursive>:
 8009fdc:	4770      	bx	lr

08009fde <memcpy>:
 8009fde:	440a      	add	r2, r1
 8009fe0:	4291      	cmp	r1, r2
 8009fe2:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fe6:	d100      	bne.n	8009fea <memcpy+0xc>
 8009fe8:	4770      	bx	lr
 8009fea:	b510      	push	{r4, lr}
 8009fec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ff4:	4291      	cmp	r1, r2
 8009ff6:	d1f9      	bne.n	8009fec <memcpy+0xe>
 8009ff8:	bd10      	pop	{r4, pc}
	...

08009ffc <_free_r>:
 8009ffc:	b538      	push	{r3, r4, r5, lr}
 8009ffe:	4605      	mov	r5, r0
 800a000:	2900      	cmp	r1, #0
 800a002:	d041      	beq.n	800a088 <_free_r+0x8c>
 800a004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a008:	1f0c      	subs	r4, r1, #4
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	bfb8      	it	lt
 800a00e:	18e4      	addlt	r4, r4, r3
 800a010:	f000 f8e0 	bl	800a1d4 <__malloc_lock>
 800a014:	4a1d      	ldr	r2, [pc, #116]	@ (800a08c <_free_r+0x90>)
 800a016:	6813      	ldr	r3, [r2, #0]
 800a018:	b933      	cbnz	r3, 800a028 <_free_r+0x2c>
 800a01a:	6063      	str	r3, [r4, #4]
 800a01c:	6014      	str	r4, [r2, #0]
 800a01e:	4628      	mov	r0, r5
 800a020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a024:	f000 b8dc 	b.w	800a1e0 <__malloc_unlock>
 800a028:	42a3      	cmp	r3, r4
 800a02a:	d908      	bls.n	800a03e <_free_r+0x42>
 800a02c:	6820      	ldr	r0, [r4, #0]
 800a02e:	1821      	adds	r1, r4, r0
 800a030:	428b      	cmp	r3, r1
 800a032:	bf01      	itttt	eq
 800a034:	6819      	ldreq	r1, [r3, #0]
 800a036:	685b      	ldreq	r3, [r3, #4]
 800a038:	1809      	addeq	r1, r1, r0
 800a03a:	6021      	streq	r1, [r4, #0]
 800a03c:	e7ed      	b.n	800a01a <_free_r+0x1e>
 800a03e:	461a      	mov	r2, r3
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	b10b      	cbz	r3, 800a048 <_free_r+0x4c>
 800a044:	42a3      	cmp	r3, r4
 800a046:	d9fa      	bls.n	800a03e <_free_r+0x42>
 800a048:	6811      	ldr	r1, [r2, #0]
 800a04a:	1850      	adds	r0, r2, r1
 800a04c:	42a0      	cmp	r0, r4
 800a04e:	d10b      	bne.n	800a068 <_free_r+0x6c>
 800a050:	6820      	ldr	r0, [r4, #0]
 800a052:	4401      	add	r1, r0
 800a054:	1850      	adds	r0, r2, r1
 800a056:	4283      	cmp	r3, r0
 800a058:	6011      	str	r1, [r2, #0]
 800a05a:	d1e0      	bne.n	800a01e <_free_r+0x22>
 800a05c:	6818      	ldr	r0, [r3, #0]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	6053      	str	r3, [r2, #4]
 800a062:	4408      	add	r0, r1
 800a064:	6010      	str	r0, [r2, #0]
 800a066:	e7da      	b.n	800a01e <_free_r+0x22>
 800a068:	d902      	bls.n	800a070 <_free_r+0x74>
 800a06a:	230c      	movs	r3, #12
 800a06c:	602b      	str	r3, [r5, #0]
 800a06e:	e7d6      	b.n	800a01e <_free_r+0x22>
 800a070:	6820      	ldr	r0, [r4, #0]
 800a072:	1821      	adds	r1, r4, r0
 800a074:	428b      	cmp	r3, r1
 800a076:	bf04      	itt	eq
 800a078:	6819      	ldreq	r1, [r3, #0]
 800a07a:	685b      	ldreq	r3, [r3, #4]
 800a07c:	6063      	str	r3, [r4, #4]
 800a07e:	bf04      	itt	eq
 800a080:	1809      	addeq	r1, r1, r0
 800a082:	6021      	streq	r1, [r4, #0]
 800a084:	6054      	str	r4, [r2, #4]
 800a086:	e7ca      	b.n	800a01e <_free_r+0x22>
 800a088:	bd38      	pop	{r3, r4, r5, pc}
 800a08a:	bf00      	nop
 800a08c:	20001f4c 	.word	0x20001f4c

0800a090 <sbrk_aligned>:
 800a090:	b570      	push	{r4, r5, r6, lr}
 800a092:	4e0f      	ldr	r6, [pc, #60]	@ (800a0d0 <sbrk_aligned+0x40>)
 800a094:	460c      	mov	r4, r1
 800a096:	6831      	ldr	r1, [r6, #0]
 800a098:	4605      	mov	r5, r0
 800a09a:	b911      	cbnz	r1, 800a0a2 <sbrk_aligned+0x12>
 800a09c:	f000 fca6 	bl	800a9ec <_sbrk_r>
 800a0a0:	6030      	str	r0, [r6, #0]
 800a0a2:	4621      	mov	r1, r4
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	f000 fca1 	bl	800a9ec <_sbrk_r>
 800a0aa:	1c43      	adds	r3, r0, #1
 800a0ac:	d103      	bne.n	800a0b6 <sbrk_aligned+0x26>
 800a0ae:	f04f 34ff 	mov.w	r4, #4294967295
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	bd70      	pop	{r4, r5, r6, pc}
 800a0b6:	1cc4      	adds	r4, r0, #3
 800a0b8:	f024 0403 	bic.w	r4, r4, #3
 800a0bc:	42a0      	cmp	r0, r4
 800a0be:	d0f8      	beq.n	800a0b2 <sbrk_aligned+0x22>
 800a0c0:	1a21      	subs	r1, r4, r0
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	f000 fc92 	bl	800a9ec <_sbrk_r>
 800a0c8:	3001      	adds	r0, #1
 800a0ca:	d1f2      	bne.n	800a0b2 <sbrk_aligned+0x22>
 800a0cc:	e7ef      	b.n	800a0ae <sbrk_aligned+0x1e>
 800a0ce:	bf00      	nop
 800a0d0:	20001f48 	.word	0x20001f48

0800a0d4 <_malloc_r>:
 800a0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0d8:	1ccd      	adds	r5, r1, #3
 800a0da:	f025 0503 	bic.w	r5, r5, #3
 800a0de:	3508      	adds	r5, #8
 800a0e0:	2d0c      	cmp	r5, #12
 800a0e2:	bf38      	it	cc
 800a0e4:	250c      	movcc	r5, #12
 800a0e6:	2d00      	cmp	r5, #0
 800a0e8:	4606      	mov	r6, r0
 800a0ea:	db01      	blt.n	800a0f0 <_malloc_r+0x1c>
 800a0ec:	42a9      	cmp	r1, r5
 800a0ee:	d904      	bls.n	800a0fa <_malloc_r+0x26>
 800a0f0:	230c      	movs	r3, #12
 800a0f2:	6033      	str	r3, [r6, #0]
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a1d0 <_malloc_r+0xfc>
 800a0fe:	f000 f869 	bl	800a1d4 <__malloc_lock>
 800a102:	f8d8 3000 	ldr.w	r3, [r8]
 800a106:	461c      	mov	r4, r3
 800a108:	bb44      	cbnz	r4, 800a15c <_malloc_r+0x88>
 800a10a:	4629      	mov	r1, r5
 800a10c:	4630      	mov	r0, r6
 800a10e:	f7ff ffbf 	bl	800a090 <sbrk_aligned>
 800a112:	1c43      	adds	r3, r0, #1
 800a114:	4604      	mov	r4, r0
 800a116:	d158      	bne.n	800a1ca <_malloc_r+0xf6>
 800a118:	f8d8 4000 	ldr.w	r4, [r8]
 800a11c:	4627      	mov	r7, r4
 800a11e:	2f00      	cmp	r7, #0
 800a120:	d143      	bne.n	800a1aa <_malloc_r+0xd6>
 800a122:	2c00      	cmp	r4, #0
 800a124:	d04b      	beq.n	800a1be <_malloc_r+0xea>
 800a126:	6823      	ldr	r3, [r4, #0]
 800a128:	4639      	mov	r1, r7
 800a12a:	4630      	mov	r0, r6
 800a12c:	eb04 0903 	add.w	r9, r4, r3
 800a130:	f000 fc5c 	bl	800a9ec <_sbrk_r>
 800a134:	4581      	cmp	r9, r0
 800a136:	d142      	bne.n	800a1be <_malloc_r+0xea>
 800a138:	6821      	ldr	r1, [r4, #0]
 800a13a:	1a6d      	subs	r5, r5, r1
 800a13c:	4629      	mov	r1, r5
 800a13e:	4630      	mov	r0, r6
 800a140:	f7ff ffa6 	bl	800a090 <sbrk_aligned>
 800a144:	3001      	adds	r0, #1
 800a146:	d03a      	beq.n	800a1be <_malloc_r+0xea>
 800a148:	6823      	ldr	r3, [r4, #0]
 800a14a:	442b      	add	r3, r5
 800a14c:	6023      	str	r3, [r4, #0]
 800a14e:	f8d8 3000 	ldr.w	r3, [r8]
 800a152:	685a      	ldr	r2, [r3, #4]
 800a154:	bb62      	cbnz	r2, 800a1b0 <_malloc_r+0xdc>
 800a156:	f8c8 7000 	str.w	r7, [r8]
 800a15a:	e00f      	b.n	800a17c <_malloc_r+0xa8>
 800a15c:	6822      	ldr	r2, [r4, #0]
 800a15e:	1b52      	subs	r2, r2, r5
 800a160:	d420      	bmi.n	800a1a4 <_malloc_r+0xd0>
 800a162:	2a0b      	cmp	r2, #11
 800a164:	d917      	bls.n	800a196 <_malloc_r+0xc2>
 800a166:	1961      	adds	r1, r4, r5
 800a168:	42a3      	cmp	r3, r4
 800a16a:	6025      	str	r5, [r4, #0]
 800a16c:	bf18      	it	ne
 800a16e:	6059      	strne	r1, [r3, #4]
 800a170:	6863      	ldr	r3, [r4, #4]
 800a172:	bf08      	it	eq
 800a174:	f8c8 1000 	streq.w	r1, [r8]
 800a178:	5162      	str	r2, [r4, r5]
 800a17a:	604b      	str	r3, [r1, #4]
 800a17c:	4630      	mov	r0, r6
 800a17e:	f000 f82f 	bl	800a1e0 <__malloc_unlock>
 800a182:	f104 000b 	add.w	r0, r4, #11
 800a186:	1d23      	adds	r3, r4, #4
 800a188:	f020 0007 	bic.w	r0, r0, #7
 800a18c:	1ac2      	subs	r2, r0, r3
 800a18e:	bf1c      	itt	ne
 800a190:	1a1b      	subne	r3, r3, r0
 800a192:	50a3      	strne	r3, [r4, r2]
 800a194:	e7af      	b.n	800a0f6 <_malloc_r+0x22>
 800a196:	6862      	ldr	r2, [r4, #4]
 800a198:	42a3      	cmp	r3, r4
 800a19a:	bf0c      	ite	eq
 800a19c:	f8c8 2000 	streq.w	r2, [r8]
 800a1a0:	605a      	strne	r2, [r3, #4]
 800a1a2:	e7eb      	b.n	800a17c <_malloc_r+0xa8>
 800a1a4:	4623      	mov	r3, r4
 800a1a6:	6864      	ldr	r4, [r4, #4]
 800a1a8:	e7ae      	b.n	800a108 <_malloc_r+0x34>
 800a1aa:	463c      	mov	r4, r7
 800a1ac:	687f      	ldr	r7, [r7, #4]
 800a1ae:	e7b6      	b.n	800a11e <_malloc_r+0x4a>
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	42a3      	cmp	r3, r4
 800a1b6:	d1fb      	bne.n	800a1b0 <_malloc_r+0xdc>
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	6053      	str	r3, [r2, #4]
 800a1bc:	e7de      	b.n	800a17c <_malloc_r+0xa8>
 800a1be:	230c      	movs	r3, #12
 800a1c0:	6033      	str	r3, [r6, #0]
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	f000 f80c 	bl	800a1e0 <__malloc_unlock>
 800a1c8:	e794      	b.n	800a0f4 <_malloc_r+0x20>
 800a1ca:	6005      	str	r5, [r0, #0]
 800a1cc:	e7d6      	b.n	800a17c <_malloc_r+0xa8>
 800a1ce:	bf00      	nop
 800a1d0:	20001f4c 	.word	0x20001f4c

0800a1d4 <__malloc_lock>:
 800a1d4:	4801      	ldr	r0, [pc, #4]	@ (800a1dc <__malloc_lock+0x8>)
 800a1d6:	f7ff bf00 	b.w	8009fda <__retarget_lock_acquire_recursive>
 800a1da:	bf00      	nop
 800a1dc:	20001f44 	.word	0x20001f44

0800a1e0 <__malloc_unlock>:
 800a1e0:	4801      	ldr	r0, [pc, #4]	@ (800a1e8 <__malloc_unlock+0x8>)
 800a1e2:	f7ff befb 	b.w	8009fdc <__retarget_lock_release_recursive>
 800a1e6:	bf00      	nop
 800a1e8:	20001f44 	.word	0x20001f44

0800a1ec <__sfputc_r>:
 800a1ec:	6893      	ldr	r3, [r2, #8]
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	b410      	push	{r4}
 800a1f4:	6093      	str	r3, [r2, #8]
 800a1f6:	da08      	bge.n	800a20a <__sfputc_r+0x1e>
 800a1f8:	6994      	ldr	r4, [r2, #24]
 800a1fa:	42a3      	cmp	r3, r4
 800a1fc:	db01      	blt.n	800a202 <__sfputc_r+0x16>
 800a1fe:	290a      	cmp	r1, #10
 800a200:	d103      	bne.n	800a20a <__sfputc_r+0x1e>
 800a202:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a206:	f7ff bd84 	b.w	8009d12 <__swbuf_r>
 800a20a:	6813      	ldr	r3, [r2, #0]
 800a20c:	1c58      	adds	r0, r3, #1
 800a20e:	6010      	str	r0, [r2, #0]
 800a210:	7019      	strb	r1, [r3, #0]
 800a212:	4608      	mov	r0, r1
 800a214:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <__sfputs_r>:
 800a21a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a21c:	4606      	mov	r6, r0
 800a21e:	460f      	mov	r7, r1
 800a220:	4614      	mov	r4, r2
 800a222:	18d5      	adds	r5, r2, r3
 800a224:	42ac      	cmp	r4, r5
 800a226:	d101      	bne.n	800a22c <__sfputs_r+0x12>
 800a228:	2000      	movs	r0, #0
 800a22a:	e007      	b.n	800a23c <__sfputs_r+0x22>
 800a22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a230:	463a      	mov	r2, r7
 800a232:	4630      	mov	r0, r6
 800a234:	f7ff ffda 	bl	800a1ec <__sfputc_r>
 800a238:	1c43      	adds	r3, r0, #1
 800a23a:	d1f3      	bne.n	800a224 <__sfputs_r+0xa>
 800a23c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a240 <_vfiprintf_r>:
 800a240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a244:	460d      	mov	r5, r1
 800a246:	b09d      	sub	sp, #116	@ 0x74
 800a248:	4614      	mov	r4, r2
 800a24a:	4698      	mov	r8, r3
 800a24c:	4606      	mov	r6, r0
 800a24e:	b118      	cbz	r0, 800a258 <_vfiprintf_r+0x18>
 800a250:	6a03      	ldr	r3, [r0, #32]
 800a252:	b90b      	cbnz	r3, 800a258 <_vfiprintf_r+0x18>
 800a254:	f7ff fc74 	bl	8009b40 <__sinit>
 800a258:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a25a:	07d9      	lsls	r1, r3, #31
 800a25c:	d405      	bmi.n	800a26a <_vfiprintf_r+0x2a>
 800a25e:	89ab      	ldrh	r3, [r5, #12]
 800a260:	059a      	lsls	r2, r3, #22
 800a262:	d402      	bmi.n	800a26a <_vfiprintf_r+0x2a>
 800a264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a266:	f7ff feb8 	bl	8009fda <__retarget_lock_acquire_recursive>
 800a26a:	89ab      	ldrh	r3, [r5, #12]
 800a26c:	071b      	lsls	r3, r3, #28
 800a26e:	d501      	bpl.n	800a274 <_vfiprintf_r+0x34>
 800a270:	692b      	ldr	r3, [r5, #16]
 800a272:	b99b      	cbnz	r3, 800a29c <_vfiprintf_r+0x5c>
 800a274:	4629      	mov	r1, r5
 800a276:	4630      	mov	r0, r6
 800a278:	f7ff fd8a 	bl	8009d90 <__swsetup_r>
 800a27c:	b170      	cbz	r0, 800a29c <_vfiprintf_r+0x5c>
 800a27e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a280:	07dc      	lsls	r4, r3, #31
 800a282:	d504      	bpl.n	800a28e <_vfiprintf_r+0x4e>
 800a284:	f04f 30ff 	mov.w	r0, #4294967295
 800a288:	b01d      	add	sp, #116	@ 0x74
 800a28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a28e:	89ab      	ldrh	r3, [r5, #12]
 800a290:	0598      	lsls	r0, r3, #22
 800a292:	d4f7      	bmi.n	800a284 <_vfiprintf_r+0x44>
 800a294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a296:	f7ff fea1 	bl	8009fdc <__retarget_lock_release_recursive>
 800a29a:	e7f3      	b.n	800a284 <_vfiprintf_r+0x44>
 800a29c:	2300      	movs	r3, #0
 800a29e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2a0:	2320      	movs	r3, #32
 800a2a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a2a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2aa:	2330      	movs	r3, #48	@ 0x30
 800a2ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a45c <_vfiprintf_r+0x21c>
 800a2b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a2b4:	f04f 0901 	mov.w	r9, #1
 800a2b8:	4623      	mov	r3, r4
 800a2ba:	469a      	mov	sl, r3
 800a2bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2c0:	b10a      	cbz	r2, 800a2c6 <_vfiprintf_r+0x86>
 800a2c2:	2a25      	cmp	r2, #37	@ 0x25
 800a2c4:	d1f9      	bne.n	800a2ba <_vfiprintf_r+0x7a>
 800a2c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a2ca:	d00b      	beq.n	800a2e4 <_vfiprintf_r+0xa4>
 800a2cc:	465b      	mov	r3, fp
 800a2ce:	4622      	mov	r2, r4
 800a2d0:	4629      	mov	r1, r5
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	f7ff ffa1 	bl	800a21a <__sfputs_r>
 800a2d8:	3001      	adds	r0, #1
 800a2da:	f000 80a7 	beq.w	800a42c <_vfiprintf_r+0x1ec>
 800a2de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2e0:	445a      	add	r2, fp
 800a2e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f000 809f 	beq.w	800a42c <_vfiprintf_r+0x1ec>
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2f8:	f10a 0a01 	add.w	sl, sl, #1
 800a2fc:	9304      	str	r3, [sp, #16]
 800a2fe:	9307      	str	r3, [sp, #28]
 800a300:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a304:	931a      	str	r3, [sp, #104]	@ 0x68
 800a306:	4654      	mov	r4, sl
 800a308:	2205      	movs	r2, #5
 800a30a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a30e:	4853      	ldr	r0, [pc, #332]	@ (800a45c <_vfiprintf_r+0x21c>)
 800a310:	f7f5 ff86 	bl	8000220 <memchr>
 800a314:	9a04      	ldr	r2, [sp, #16]
 800a316:	b9d8      	cbnz	r0, 800a350 <_vfiprintf_r+0x110>
 800a318:	06d1      	lsls	r1, r2, #27
 800a31a:	bf44      	itt	mi
 800a31c:	2320      	movmi	r3, #32
 800a31e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a322:	0713      	lsls	r3, r2, #28
 800a324:	bf44      	itt	mi
 800a326:	232b      	movmi	r3, #43	@ 0x2b
 800a328:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a32c:	f89a 3000 	ldrb.w	r3, [sl]
 800a330:	2b2a      	cmp	r3, #42	@ 0x2a
 800a332:	d015      	beq.n	800a360 <_vfiprintf_r+0x120>
 800a334:	9a07      	ldr	r2, [sp, #28]
 800a336:	4654      	mov	r4, sl
 800a338:	2000      	movs	r0, #0
 800a33a:	f04f 0c0a 	mov.w	ip, #10
 800a33e:	4621      	mov	r1, r4
 800a340:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a344:	3b30      	subs	r3, #48	@ 0x30
 800a346:	2b09      	cmp	r3, #9
 800a348:	d94b      	bls.n	800a3e2 <_vfiprintf_r+0x1a2>
 800a34a:	b1b0      	cbz	r0, 800a37a <_vfiprintf_r+0x13a>
 800a34c:	9207      	str	r2, [sp, #28]
 800a34e:	e014      	b.n	800a37a <_vfiprintf_r+0x13a>
 800a350:	eba0 0308 	sub.w	r3, r0, r8
 800a354:	fa09 f303 	lsl.w	r3, r9, r3
 800a358:	4313      	orrs	r3, r2
 800a35a:	9304      	str	r3, [sp, #16]
 800a35c:	46a2      	mov	sl, r4
 800a35e:	e7d2      	b.n	800a306 <_vfiprintf_r+0xc6>
 800a360:	9b03      	ldr	r3, [sp, #12]
 800a362:	1d19      	adds	r1, r3, #4
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	9103      	str	r1, [sp, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	bfbb      	ittet	lt
 800a36c:	425b      	neglt	r3, r3
 800a36e:	f042 0202 	orrlt.w	r2, r2, #2
 800a372:	9307      	strge	r3, [sp, #28]
 800a374:	9307      	strlt	r3, [sp, #28]
 800a376:	bfb8      	it	lt
 800a378:	9204      	strlt	r2, [sp, #16]
 800a37a:	7823      	ldrb	r3, [r4, #0]
 800a37c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a37e:	d10a      	bne.n	800a396 <_vfiprintf_r+0x156>
 800a380:	7863      	ldrb	r3, [r4, #1]
 800a382:	2b2a      	cmp	r3, #42	@ 0x2a
 800a384:	d132      	bne.n	800a3ec <_vfiprintf_r+0x1ac>
 800a386:	9b03      	ldr	r3, [sp, #12]
 800a388:	1d1a      	adds	r2, r3, #4
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	9203      	str	r2, [sp, #12]
 800a38e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a392:	3402      	adds	r4, #2
 800a394:	9305      	str	r3, [sp, #20]
 800a396:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a46c <_vfiprintf_r+0x22c>
 800a39a:	7821      	ldrb	r1, [r4, #0]
 800a39c:	2203      	movs	r2, #3
 800a39e:	4650      	mov	r0, sl
 800a3a0:	f7f5 ff3e 	bl	8000220 <memchr>
 800a3a4:	b138      	cbz	r0, 800a3b6 <_vfiprintf_r+0x176>
 800a3a6:	9b04      	ldr	r3, [sp, #16]
 800a3a8:	eba0 000a 	sub.w	r0, r0, sl
 800a3ac:	2240      	movs	r2, #64	@ 0x40
 800a3ae:	4082      	lsls	r2, r0
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	3401      	adds	r4, #1
 800a3b4:	9304      	str	r3, [sp, #16]
 800a3b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ba:	4829      	ldr	r0, [pc, #164]	@ (800a460 <_vfiprintf_r+0x220>)
 800a3bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3c0:	2206      	movs	r2, #6
 800a3c2:	f7f5 ff2d 	bl	8000220 <memchr>
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	d03f      	beq.n	800a44a <_vfiprintf_r+0x20a>
 800a3ca:	4b26      	ldr	r3, [pc, #152]	@ (800a464 <_vfiprintf_r+0x224>)
 800a3cc:	bb1b      	cbnz	r3, 800a416 <_vfiprintf_r+0x1d6>
 800a3ce:	9b03      	ldr	r3, [sp, #12]
 800a3d0:	3307      	adds	r3, #7
 800a3d2:	f023 0307 	bic.w	r3, r3, #7
 800a3d6:	3308      	adds	r3, #8
 800a3d8:	9303      	str	r3, [sp, #12]
 800a3da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3dc:	443b      	add	r3, r7
 800a3de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3e0:	e76a      	b.n	800a2b8 <_vfiprintf_r+0x78>
 800a3e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3e6:	460c      	mov	r4, r1
 800a3e8:	2001      	movs	r0, #1
 800a3ea:	e7a8      	b.n	800a33e <_vfiprintf_r+0xfe>
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	3401      	adds	r4, #1
 800a3f0:	9305      	str	r3, [sp, #20]
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	f04f 0c0a 	mov.w	ip, #10
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3fe:	3a30      	subs	r2, #48	@ 0x30
 800a400:	2a09      	cmp	r2, #9
 800a402:	d903      	bls.n	800a40c <_vfiprintf_r+0x1cc>
 800a404:	2b00      	cmp	r3, #0
 800a406:	d0c6      	beq.n	800a396 <_vfiprintf_r+0x156>
 800a408:	9105      	str	r1, [sp, #20]
 800a40a:	e7c4      	b.n	800a396 <_vfiprintf_r+0x156>
 800a40c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a410:	4604      	mov	r4, r0
 800a412:	2301      	movs	r3, #1
 800a414:	e7f0      	b.n	800a3f8 <_vfiprintf_r+0x1b8>
 800a416:	ab03      	add	r3, sp, #12
 800a418:	9300      	str	r3, [sp, #0]
 800a41a:	462a      	mov	r2, r5
 800a41c:	4b12      	ldr	r3, [pc, #72]	@ (800a468 <_vfiprintf_r+0x228>)
 800a41e:	a904      	add	r1, sp, #16
 800a420:	4630      	mov	r0, r6
 800a422:	f3af 8000 	nop.w
 800a426:	4607      	mov	r7, r0
 800a428:	1c78      	adds	r0, r7, #1
 800a42a:	d1d6      	bne.n	800a3da <_vfiprintf_r+0x19a>
 800a42c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a42e:	07d9      	lsls	r1, r3, #31
 800a430:	d405      	bmi.n	800a43e <_vfiprintf_r+0x1fe>
 800a432:	89ab      	ldrh	r3, [r5, #12]
 800a434:	059a      	lsls	r2, r3, #22
 800a436:	d402      	bmi.n	800a43e <_vfiprintf_r+0x1fe>
 800a438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a43a:	f7ff fdcf 	bl	8009fdc <__retarget_lock_release_recursive>
 800a43e:	89ab      	ldrh	r3, [r5, #12]
 800a440:	065b      	lsls	r3, r3, #25
 800a442:	f53f af1f 	bmi.w	800a284 <_vfiprintf_r+0x44>
 800a446:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a448:	e71e      	b.n	800a288 <_vfiprintf_r+0x48>
 800a44a:	ab03      	add	r3, sp, #12
 800a44c:	9300      	str	r3, [sp, #0]
 800a44e:	462a      	mov	r2, r5
 800a450:	4b05      	ldr	r3, [pc, #20]	@ (800a468 <_vfiprintf_r+0x228>)
 800a452:	a904      	add	r1, sp, #16
 800a454:	4630      	mov	r0, r6
 800a456:	f000 f879 	bl	800a54c <_printf_i>
 800a45a:	e7e4      	b.n	800a426 <_vfiprintf_r+0x1e6>
 800a45c:	0800aaf8 	.word	0x0800aaf8
 800a460:	0800ab02 	.word	0x0800ab02
 800a464:	00000000 	.word	0x00000000
 800a468:	0800a21b 	.word	0x0800a21b
 800a46c:	0800aafe 	.word	0x0800aafe

0800a470 <_printf_common>:
 800a470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a474:	4616      	mov	r6, r2
 800a476:	4698      	mov	r8, r3
 800a478:	688a      	ldr	r2, [r1, #8]
 800a47a:	690b      	ldr	r3, [r1, #16]
 800a47c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a480:	4293      	cmp	r3, r2
 800a482:	bfb8      	it	lt
 800a484:	4613      	movlt	r3, r2
 800a486:	6033      	str	r3, [r6, #0]
 800a488:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a48c:	4607      	mov	r7, r0
 800a48e:	460c      	mov	r4, r1
 800a490:	b10a      	cbz	r2, 800a496 <_printf_common+0x26>
 800a492:	3301      	adds	r3, #1
 800a494:	6033      	str	r3, [r6, #0]
 800a496:	6823      	ldr	r3, [r4, #0]
 800a498:	0699      	lsls	r1, r3, #26
 800a49a:	bf42      	ittt	mi
 800a49c:	6833      	ldrmi	r3, [r6, #0]
 800a49e:	3302      	addmi	r3, #2
 800a4a0:	6033      	strmi	r3, [r6, #0]
 800a4a2:	6825      	ldr	r5, [r4, #0]
 800a4a4:	f015 0506 	ands.w	r5, r5, #6
 800a4a8:	d106      	bne.n	800a4b8 <_printf_common+0x48>
 800a4aa:	f104 0a19 	add.w	sl, r4, #25
 800a4ae:	68e3      	ldr	r3, [r4, #12]
 800a4b0:	6832      	ldr	r2, [r6, #0]
 800a4b2:	1a9b      	subs	r3, r3, r2
 800a4b4:	42ab      	cmp	r3, r5
 800a4b6:	dc26      	bgt.n	800a506 <_printf_common+0x96>
 800a4b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a4bc:	6822      	ldr	r2, [r4, #0]
 800a4be:	3b00      	subs	r3, #0
 800a4c0:	bf18      	it	ne
 800a4c2:	2301      	movne	r3, #1
 800a4c4:	0692      	lsls	r2, r2, #26
 800a4c6:	d42b      	bmi.n	800a520 <_printf_common+0xb0>
 800a4c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a4cc:	4641      	mov	r1, r8
 800a4ce:	4638      	mov	r0, r7
 800a4d0:	47c8      	blx	r9
 800a4d2:	3001      	adds	r0, #1
 800a4d4:	d01e      	beq.n	800a514 <_printf_common+0xa4>
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	6922      	ldr	r2, [r4, #16]
 800a4da:	f003 0306 	and.w	r3, r3, #6
 800a4de:	2b04      	cmp	r3, #4
 800a4e0:	bf02      	ittt	eq
 800a4e2:	68e5      	ldreq	r5, [r4, #12]
 800a4e4:	6833      	ldreq	r3, [r6, #0]
 800a4e6:	1aed      	subeq	r5, r5, r3
 800a4e8:	68a3      	ldr	r3, [r4, #8]
 800a4ea:	bf0c      	ite	eq
 800a4ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4f0:	2500      	movne	r5, #0
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	bfc4      	itt	gt
 800a4f6:	1a9b      	subgt	r3, r3, r2
 800a4f8:	18ed      	addgt	r5, r5, r3
 800a4fa:	2600      	movs	r6, #0
 800a4fc:	341a      	adds	r4, #26
 800a4fe:	42b5      	cmp	r5, r6
 800a500:	d11a      	bne.n	800a538 <_printf_common+0xc8>
 800a502:	2000      	movs	r0, #0
 800a504:	e008      	b.n	800a518 <_printf_common+0xa8>
 800a506:	2301      	movs	r3, #1
 800a508:	4652      	mov	r2, sl
 800a50a:	4641      	mov	r1, r8
 800a50c:	4638      	mov	r0, r7
 800a50e:	47c8      	blx	r9
 800a510:	3001      	adds	r0, #1
 800a512:	d103      	bne.n	800a51c <_printf_common+0xac>
 800a514:	f04f 30ff 	mov.w	r0, #4294967295
 800a518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a51c:	3501      	adds	r5, #1
 800a51e:	e7c6      	b.n	800a4ae <_printf_common+0x3e>
 800a520:	18e1      	adds	r1, r4, r3
 800a522:	1c5a      	adds	r2, r3, #1
 800a524:	2030      	movs	r0, #48	@ 0x30
 800a526:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a52a:	4422      	add	r2, r4
 800a52c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a530:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a534:	3302      	adds	r3, #2
 800a536:	e7c7      	b.n	800a4c8 <_printf_common+0x58>
 800a538:	2301      	movs	r3, #1
 800a53a:	4622      	mov	r2, r4
 800a53c:	4641      	mov	r1, r8
 800a53e:	4638      	mov	r0, r7
 800a540:	47c8      	blx	r9
 800a542:	3001      	adds	r0, #1
 800a544:	d0e6      	beq.n	800a514 <_printf_common+0xa4>
 800a546:	3601      	adds	r6, #1
 800a548:	e7d9      	b.n	800a4fe <_printf_common+0x8e>
	...

0800a54c <_printf_i>:
 800a54c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a550:	7e0f      	ldrb	r7, [r1, #24]
 800a552:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a554:	2f78      	cmp	r7, #120	@ 0x78
 800a556:	4691      	mov	r9, r2
 800a558:	4680      	mov	r8, r0
 800a55a:	460c      	mov	r4, r1
 800a55c:	469a      	mov	sl, r3
 800a55e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a562:	d807      	bhi.n	800a574 <_printf_i+0x28>
 800a564:	2f62      	cmp	r7, #98	@ 0x62
 800a566:	d80a      	bhi.n	800a57e <_printf_i+0x32>
 800a568:	2f00      	cmp	r7, #0
 800a56a:	f000 80d2 	beq.w	800a712 <_printf_i+0x1c6>
 800a56e:	2f58      	cmp	r7, #88	@ 0x58
 800a570:	f000 80b9 	beq.w	800a6e6 <_printf_i+0x19a>
 800a574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a578:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a57c:	e03a      	b.n	800a5f4 <_printf_i+0xa8>
 800a57e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a582:	2b15      	cmp	r3, #21
 800a584:	d8f6      	bhi.n	800a574 <_printf_i+0x28>
 800a586:	a101      	add	r1, pc, #4	@ (adr r1, 800a58c <_printf_i+0x40>)
 800a588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a58c:	0800a5e5 	.word	0x0800a5e5
 800a590:	0800a5f9 	.word	0x0800a5f9
 800a594:	0800a575 	.word	0x0800a575
 800a598:	0800a575 	.word	0x0800a575
 800a59c:	0800a575 	.word	0x0800a575
 800a5a0:	0800a575 	.word	0x0800a575
 800a5a4:	0800a5f9 	.word	0x0800a5f9
 800a5a8:	0800a575 	.word	0x0800a575
 800a5ac:	0800a575 	.word	0x0800a575
 800a5b0:	0800a575 	.word	0x0800a575
 800a5b4:	0800a575 	.word	0x0800a575
 800a5b8:	0800a6f9 	.word	0x0800a6f9
 800a5bc:	0800a623 	.word	0x0800a623
 800a5c0:	0800a6b3 	.word	0x0800a6b3
 800a5c4:	0800a575 	.word	0x0800a575
 800a5c8:	0800a575 	.word	0x0800a575
 800a5cc:	0800a71b 	.word	0x0800a71b
 800a5d0:	0800a575 	.word	0x0800a575
 800a5d4:	0800a623 	.word	0x0800a623
 800a5d8:	0800a575 	.word	0x0800a575
 800a5dc:	0800a575 	.word	0x0800a575
 800a5e0:	0800a6bb 	.word	0x0800a6bb
 800a5e4:	6833      	ldr	r3, [r6, #0]
 800a5e6:	1d1a      	adds	r2, r3, #4
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	6032      	str	r2, [r6, #0]
 800a5ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e09d      	b.n	800a734 <_printf_i+0x1e8>
 800a5f8:	6833      	ldr	r3, [r6, #0]
 800a5fa:	6820      	ldr	r0, [r4, #0]
 800a5fc:	1d19      	adds	r1, r3, #4
 800a5fe:	6031      	str	r1, [r6, #0]
 800a600:	0606      	lsls	r6, r0, #24
 800a602:	d501      	bpl.n	800a608 <_printf_i+0xbc>
 800a604:	681d      	ldr	r5, [r3, #0]
 800a606:	e003      	b.n	800a610 <_printf_i+0xc4>
 800a608:	0645      	lsls	r5, r0, #25
 800a60a:	d5fb      	bpl.n	800a604 <_printf_i+0xb8>
 800a60c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a610:	2d00      	cmp	r5, #0
 800a612:	da03      	bge.n	800a61c <_printf_i+0xd0>
 800a614:	232d      	movs	r3, #45	@ 0x2d
 800a616:	426d      	negs	r5, r5
 800a618:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a61c:	4859      	ldr	r0, [pc, #356]	@ (800a784 <_printf_i+0x238>)
 800a61e:	230a      	movs	r3, #10
 800a620:	e011      	b.n	800a646 <_printf_i+0xfa>
 800a622:	6821      	ldr	r1, [r4, #0]
 800a624:	6833      	ldr	r3, [r6, #0]
 800a626:	0608      	lsls	r0, r1, #24
 800a628:	f853 5b04 	ldr.w	r5, [r3], #4
 800a62c:	d402      	bmi.n	800a634 <_printf_i+0xe8>
 800a62e:	0649      	lsls	r1, r1, #25
 800a630:	bf48      	it	mi
 800a632:	b2ad      	uxthmi	r5, r5
 800a634:	2f6f      	cmp	r7, #111	@ 0x6f
 800a636:	4853      	ldr	r0, [pc, #332]	@ (800a784 <_printf_i+0x238>)
 800a638:	6033      	str	r3, [r6, #0]
 800a63a:	bf14      	ite	ne
 800a63c:	230a      	movne	r3, #10
 800a63e:	2308      	moveq	r3, #8
 800a640:	2100      	movs	r1, #0
 800a642:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a646:	6866      	ldr	r6, [r4, #4]
 800a648:	60a6      	str	r6, [r4, #8]
 800a64a:	2e00      	cmp	r6, #0
 800a64c:	bfa2      	ittt	ge
 800a64e:	6821      	ldrge	r1, [r4, #0]
 800a650:	f021 0104 	bicge.w	r1, r1, #4
 800a654:	6021      	strge	r1, [r4, #0]
 800a656:	b90d      	cbnz	r5, 800a65c <_printf_i+0x110>
 800a658:	2e00      	cmp	r6, #0
 800a65a:	d04b      	beq.n	800a6f4 <_printf_i+0x1a8>
 800a65c:	4616      	mov	r6, r2
 800a65e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a662:	fb03 5711 	mls	r7, r3, r1, r5
 800a666:	5dc7      	ldrb	r7, [r0, r7]
 800a668:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a66c:	462f      	mov	r7, r5
 800a66e:	42bb      	cmp	r3, r7
 800a670:	460d      	mov	r5, r1
 800a672:	d9f4      	bls.n	800a65e <_printf_i+0x112>
 800a674:	2b08      	cmp	r3, #8
 800a676:	d10b      	bne.n	800a690 <_printf_i+0x144>
 800a678:	6823      	ldr	r3, [r4, #0]
 800a67a:	07df      	lsls	r7, r3, #31
 800a67c:	d508      	bpl.n	800a690 <_printf_i+0x144>
 800a67e:	6923      	ldr	r3, [r4, #16]
 800a680:	6861      	ldr	r1, [r4, #4]
 800a682:	4299      	cmp	r1, r3
 800a684:	bfde      	ittt	le
 800a686:	2330      	movle	r3, #48	@ 0x30
 800a688:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a68c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a690:	1b92      	subs	r2, r2, r6
 800a692:	6122      	str	r2, [r4, #16]
 800a694:	f8cd a000 	str.w	sl, [sp]
 800a698:	464b      	mov	r3, r9
 800a69a:	aa03      	add	r2, sp, #12
 800a69c:	4621      	mov	r1, r4
 800a69e:	4640      	mov	r0, r8
 800a6a0:	f7ff fee6 	bl	800a470 <_printf_common>
 800a6a4:	3001      	adds	r0, #1
 800a6a6:	d14a      	bne.n	800a73e <_printf_i+0x1f2>
 800a6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ac:	b004      	add	sp, #16
 800a6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6b2:	6823      	ldr	r3, [r4, #0]
 800a6b4:	f043 0320 	orr.w	r3, r3, #32
 800a6b8:	6023      	str	r3, [r4, #0]
 800a6ba:	4833      	ldr	r0, [pc, #204]	@ (800a788 <_printf_i+0x23c>)
 800a6bc:	2778      	movs	r7, #120	@ 0x78
 800a6be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	6831      	ldr	r1, [r6, #0]
 800a6c6:	061f      	lsls	r7, r3, #24
 800a6c8:	f851 5b04 	ldr.w	r5, [r1], #4
 800a6cc:	d402      	bmi.n	800a6d4 <_printf_i+0x188>
 800a6ce:	065f      	lsls	r7, r3, #25
 800a6d0:	bf48      	it	mi
 800a6d2:	b2ad      	uxthmi	r5, r5
 800a6d4:	6031      	str	r1, [r6, #0]
 800a6d6:	07d9      	lsls	r1, r3, #31
 800a6d8:	bf44      	itt	mi
 800a6da:	f043 0320 	orrmi.w	r3, r3, #32
 800a6de:	6023      	strmi	r3, [r4, #0]
 800a6e0:	b11d      	cbz	r5, 800a6ea <_printf_i+0x19e>
 800a6e2:	2310      	movs	r3, #16
 800a6e4:	e7ac      	b.n	800a640 <_printf_i+0xf4>
 800a6e6:	4827      	ldr	r0, [pc, #156]	@ (800a784 <_printf_i+0x238>)
 800a6e8:	e7e9      	b.n	800a6be <_printf_i+0x172>
 800a6ea:	6823      	ldr	r3, [r4, #0]
 800a6ec:	f023 0320 	bic.w	r3, r3, #32
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	e7f6      	b.n	800a6e2 <_printf_i+0x196>
 800a6f4:	4616      	mov	r6, r2
 800a6f6:	e7bd      	b.n	800a674 <_printf_i+0x128>
 800a6f8:	6833      	ldr	r3, [r6, #0]
 800a6fa:	6825      	ldr	r5, [r4, #0]
 800a6fc:	6961      	ldr	r1, [r4, #20]
 800a6fe:	1d18      	adds	r0, r3, #4
 800a700:	6030      	str	r0, [r6, #0]
 800a702:	062e      	lsls	r6, r5, #24
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	d501      	bpl.n	800a70c <_printf_i+0x1c0>
 800a708:	6019      	str	r1, [r3, #0]
 800a70a:	e002      	b.n	800a712 <_printf_i+0x1c6>
 800a70c:	0668      	lsls	r0, r5, #25
 800a70e:	d5fb      	bpl.n	800a708 <_printf_i+0x1bc>
 800a710:	8019      	strh	r1, [r3, #0]
 800a712:	2300      	movs	r3, #0
 800a714:	6123      	str	r3, [r4, #16]
 800a716:	4616      	mov	r6, r2
 800a718:	e7bc      	b.n	800a694 <_printf_i+0x148>
 800a71a:	6833      	ldr	r3, [r6, #0]
 800a71c:	1d1a      	adds	r2, r3, #4
 800a71e:	6032      	str	r2, [r6, #0]
 800a720:	681e      	ldr	r6, [r3, #0]
 800a722:	6862      	ldr	r2, [r4, #4]
 800a724:	2100      	movs	r1, #0
 800a726:	4630      	mov	r0, r6
 800a728:	f7f5 fd7a 	bl	8000220 <memchr>
 800a72c:	b108      	cbz	r0, 800a732 <_printf_i+0x1e6>
 800a72e:	1b80      	subs	r0, r0, r6
 800a730:	6060      	str	r0, [r4, #4]
 800a732:	6863      	ldr	r3, [r4, #4]
 800a734:	6123      	str	r3, [r4, #16]
 800a736:	2300      	movs	r3, #0
 800a738:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a73c:	e7aa      	b.n	800a694 <_printf_i+0x148>
 800a73e:	6923      	ldr	r3, [r4, #16]
 800a740:	4632      	mov	r2, r6
 800a742:	4649      	mov	r1, r9
 800a744:	4640      	mov	r0, r8
 800a746:	47d0      	blx	sl
 800a748:	3001      	adds	r0, #1
 800a74a:	d0ad      	beq.n	800a6a8 <_printf_i+0x15c>
 800a74c:	6823      	ldr	r3, [r4, #0]
 800a74e:	079b      	lsls	r3, r3, #30
 800a750:	d413      	bmi.n	800a77a <_printf_i+0x22e>
 800a752:	68e0      	ldr	r0, [r4, #12]
 800a754:	9b03      	ldr	r3, [sp, #12]
 800a756:	4298      	cmp	r0, r3
 800a758:	bfb8      	it	lt
 800a75a:	4618      	movlt	r0, r3
 800a75c:	e7a6      	b.n	800a6ac <_printf_i+0x160>
 800a75e:	2301      	movs	r3, #1
 800a760:	4632      	mov	r2, r6
 800a762:	4649      	mov	r1, r9
 800a764:	4640      	mov	r0, r8
 800a766:	47d0      	blx	sl
 800a768:	3001      	adds	r0, #1
 800a76a:	d09d      	beq.n	800a6a8 <_printf_i+0x15c>
 800a76c:	3501      	adds	r5, #1
 800a76e:	68e3      	ldr	r3, [r4, #12]
 800a770:	9903      	ldr	r1, [sp, #12]
 800a772:	1a5b      	subs	r3, r3, r1
 800a774:	42ab      	cmp	r3, r5
 800a776:	dcf2      	bgt.n	800a75e <_printf_i+0x212>
 800a778:	e7eb      	b.n	800a752 <_printf_i+0x206>
 800a77a:	2500      	movs	r5, #0
 800a77c:	f104 0619 	add.w	r6, r4, #25
 800a780:	e7f5      	b.n	800a76e <_printf_i+0x222>
 800a782:	bf00      	nop
 800a784:	0800ab09 	.word	0x0800ab09
 800a788:	0800ab1a 	.word	0x0800ab1a

0800a78c <__sflush_r>:
 800a78c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a794:	0716      	lsls	r6, r2, #28
 800a796:	4605      	mov	r5, r0
 800a798:	460c      	mov	r4, r1
 800a79a:	d454      	bmi.n	800a846 <__sflush_r+0xba>
 800a79c:	684b      	ldr	r3, [r1, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	dc02      	bgt.n	800a7a8 <__sflush_r+0x1c>
 800a7a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	dd48      	ble.n	800a83a <__sflush_r+0xae>
 800a7a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a7aa:	2e00      	cmp	r6, #0
 800a7ac:	d045      	beq.n	800a83a <__sflush_r+0xae>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a7b4:	682f      	ldr	r7, [r5, #0]
 800a7b6:	6a21      	ldr	r1, [r4, #32]
 800a7b8:	602b      	str	r3, [r5, #0]
 800a7ba:	d030      	beq.n	800a81e <__sflush_r+0x92>
 800a7bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a7be:	89a3      	ldrh	r3, [r4, #12]
 800a7c0:	0759      	lsls	r1, r3, #29
 800a7c2:	d505      	bpl.n	800a7d0 <__sflush_r+0x44>
 800a7c4:	6863      	ldr	r3, [r4, #4]
 800a7c6:	1ad2      	subs	r2, r2, r3
 800a7c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a7ca:	b10b      	cbz	r3, 800a7d0 <__sflush_r+0x44>
 800a7cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a7ce:	1ad2      	subs	r2, r2, r3
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a7d4:	6a21      	ldr	r1, [r4, #32]
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	47b0      	blx	r6
 800a7da:	1c43      	adds	r3, r0, #1
 800a7dc:	89a3      	ldrh	r3, [r4, #12]
 800a7de:	d106      	bne.n	800a7ee <__sflush_r+0x62>
 800a7e0:	6829      	ldr	r1, [r5, #0]
 800a7e2:	291d      	cmp	r1, #29
 800a7e4:	d82b      	bhi.n	800a83e <__sflush_r+0xb2>
 800a7e6:	4a2a      	ldr	r2, [pc, #168]	@ (800a890 <__sflush_r+0x104>)
 800a7e8:	410a      	asrs	r2, r1
 800a7ea:	07d6      	lsls	r6, r2, #31
 800a7ec:	d427      	bmi.n	800a83e <__sflush_r+0xb2>
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	6062      	str	r2, [r4, #4]
 800a7f2:	04d9      	lsls	r1, r3, #19
 800a7f4:	6922      	ldr	r2, [r4, #16]
 800a7f6:	6022      	str	r2, [r4, #0]
 800a7f8:	d504      	bpl.n	800a804 <__sflush_r+0x78>
 800a7fa:	1c42      	adds	r2, r0, #1
 800a7fc:	d101      	bne.n	800a802 <__sflush_r+0x76>
 800a7fe:	682b      	ldr	r3, [r5, #0]
 800a800:	b903      	cbnz	r3, 800a804 <__sflush_r+0x78>
 800a802:	6560      	str	r0, [r4, #84]	@ 0x54
 800a804:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a806:	602f      	str	r7, [r5, #0]
 800a808:	b1b9      	cbz	r1, 800a83a <__sflush_r+0xae>
 800a80a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a80e:	4299      	cmp	r1, r3
 800a810:	d002      	beq.n	800a818 <__sflush_r+0x8c>
 800a812:	4628      	mov	r0, r5
 800a814:	f7ff fbf2 	bl	8009ffc <_free_r>
 800a818:	2300      	movs	r3, #0
 800a81a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a81c:	e00d      	b.n	800a83a <__sflush_r+0xae>
 800a81e:	2301      	movs	r3, #1
 800a820:	4628      	mov	r0, r5
 800a822:	47b0      	blx	r6
 800a824:	4602      	mov	r2, r0
 800a826:	1c50      	adds	r0, r2, #1
 800a828:	d1c9      	bne.n	800a7be <__sflush_r+0x32>
 800a82a:	682b      	ldr	r3, [r5, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d0c6      	beq.n	800a7be <__sflush_r+0x32>
 800a830:	2b1d      	cmp	r3, #29
 800a832:	d001      	beq.n	800a838 <__sflush_r+0xac>
 800a834:	2b16      	cmp	r3, #22
 800a836:	d11e      	bne.n	800a876 <__sflush_r+0xea>
 800a838:	602f      	str	r7, [r5, #0]
 800a83a:	2000      	movs	r0, #0
 800a83c:	e022      	b.n	800a884 <__sflush_r+0xf8>
 800a83e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a842:	b21b      	sxth	r3, r3
 800a844:	e01b      	b.n	800a87e <__sflush_r+0xf2>
 800a846:	690f      	ldr	r7, [r1, #16]
 800a848:	2f00      	cmp	r7, #0
 800a84a:	d0f6      	beq.n	800a83a <__sflush_r+0xae>
 800a84c:	0793      	lsls	r3, r2, #30
 800a84e:	680e      	ldr	r6, [r1, #0]
 800a850:	bf08      	it	eq
 800a852:	694b      	ldreq	r3, [r1, #20]
 800a854:	600f      	str	r7, [r1, #0]
 800a856:	bf18      	it	ne
 800a858:	2300      	movne	r3, #0
 800a85a:	eba6 0807 	sub.w	r8, r6, r7
 800a85e:	608b      	str	r3, [r1, #8]
 800a860:	f1b8 0f00 	cmp.w	r8, #0
 800a864:	dde9      	ble.n	800a83a <__sflush_r+0xae>
 800a866:	6a21      	ldr	r1, [r4, #32]
 800a868:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a86a:	4643      	mov	r3, r8
 800a86c:	463a      	mov	r2, r7
 800a86e:	4628      	mov	r0, r5
 800a870:	47b0      	blx	r6
 800a872:	2800      	cmp	r0, #0
 800a874:	dc08      	bgt.n	800a888 <__sflush_r+0xfc>
 800a876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a87a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a87e:	81a3      	strh	r3, [r4, #12]
 800a880:	f04f 30ff 	mov.w	r0, #4294967295
 800a884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a888:	4407      	add	r7, r0
 800a88a:	eba8 0800 	sub.w	r8, r8, r0
 800a88e:	e7e7      	b.n	800a860 <__sflush_r+0xd4>
 800a890:	dfbffffe 	.word	0xdfbffffe

0800a894 <_fflush_r>:
 800a894:	b538      	push	{r3, r4, r5, lr}
 800a896:	690b      	ldr	r3, [r1, #16]
 800a898:	4605      	mov	r5, r0
 800a89a:	460c      	mov	r4, r1
 800a89c:	b913      	cbnz	r3, 800a8a4 <_fflush_r+0x10>
 800a89e:	2500      	movs	r5, #0
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	bd38      	pop	{r3, r4, r5, pc}
 800a8a4:	b118      	cbz	r0, 800a8ae <_fflush_r+0x1a>
 800a8a6:	6a03      	ldr	r3, [r0, #32]
 800a8a8:	b90b      	cbnz	r3, 800a8ae <_fflush_r+0x1a>
 800a8aa:	f7ff f949 	bl	8009b40 <__sinit>
 800a8ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d0f3      	beq.n	800a89e <_fflush_r+0xa>
 800a8b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a8b8:	07d0      	lsls	r0, r2, #31
 800a8ba:	d404      	bmi.n	800a8c6 <_fflush_r+0x32>
 800a8bc:	0599      	lsls	r1, r3, #22
 800a8be:	d402      	bmi.n	800a8c6 <_fflush_r+0x32>
 800a8c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8c2:	f7ff fb8a 	bl	8009fda <__retarget_lock_acquire_recursive>
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	f7ff ff5f 	bl	800a78c <__sflush_r>
 800a8ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a8d0:	07da      	lsls	r2, r3, #31
 800a8d2:	4605      	mov	r5, r0
 800a8d4:	d4e4      	bmi.n	800a8a0 <_fflush_r+0xc>
 800a8d6:	89a3      	ldrh	r3, [r4, #12]
 800a8d8:	059b      	lsls	r3, r3, #22
 800a8da:	d4e1      	bmi.n	800a8a0 <_fflush_r+0xc>
 800a8dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8de:	f7ff fb7d 	bl	8009fdc <__retarget_lock_release_recursive>
 800a8e2:	e7dd      	b.n	800a8a0 <_fflush_r+0xc>

0800a8e4 <__swhatbuf_r>:
 800a8e4:	b570      	push	{r4, r5, r6, lr}
 800a8e6:	460c      	mov	r4, r1
 800a8e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ec:	2900      	cmp	r1, #0
 800a8ee:	b096      	sub	sp, #88	@ 0x58
 800a8f0:	4615      	mov	r5, r2
 800a8f2:	461e      	mov	r6, r3
 800a8f4:	da0d      	bge.n	800a912 <__swhatbuf_r+0x2e>
 800a8f6:	89a3      	ldrh	r3, [r4, #12]
 800a8f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a8fc:	f04f 0100 	mov.w	r1, #0
 800a900:	bf14      	ite	ne
 800a902:	2340      	movne	r3, #64	@ 0x40
 800a904:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a908:	2000      	movs	r0, #0
 800a90a:	6031      	str	r1, [r6, #0]
 800a90c:	602b      	str	r3, [r5, #0]
 800a90e:	b016      	add	sp, #88	@ 0x58
 800a910:	bd70      	pop	{r4, r5, r6, pc}
 800a912:	466a      	mov	r2, sp
 800a914:	f000 f848 	bl	800a9a8 <_fstat_r>
 800a918:	2800      	cmp	r0, #0
 800a91a:	dbec      	blt.n	800a8f6 <__swhatbuf_r+0x12>
 800a91c:	9901      	ldr	r1, [sp, #4]
 800a91e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a922:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a926:	4259      	negs	r1, r3
 800a928:	4159      	adcs	r1, r3
 800a92a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a92e:	e7eb      	b.n	800a908 <__swhatbuf_r+0x24>

0800a930 <__smakebuf_r>:
 800a930:	898b      	ldrh	r3, [r1, #12]
 800a932:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a934:	079d      	lsls	r5, r3, #30
 800a936:	4606      	mov	r6, r0
 800a938:	460c      	mov	r4, r1
 800a93a:	d507      	bpl.n	800a94c <__smakebuf_r+0x1c>
 800a93c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a940:	6023      	str	r3, [r4, #0]
 800a942:	6123      	str	r3, [r4, #16]
 800a944:	2301      	movs	r3, #1
 800a946:	6163      	str	r3, [r4, #20]
 800a948:	b003      	add	sp, #12
 800a94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a94c:	ab01      	add	r3, sp, #4
 800a94e:	466a      	mov	r2, sp
 800a950:	f7ff ffc8 	bl	800a8e4 <__swhatbuf_r>
 800a954:	9f00      	ldr	r7, [sp, #0]
 800a956:	4605      	mov	r5, r0
 800a958:	4639      	mov	r1, r7
 800a95a:	4630      	mov	r0, r6
 800a95c:	f7ff fbba 	bl	800a0d4 <_malloc_r>
 800a960:	b948      	cbnz	r0, 800a976 <__smakebuf_r+0x46>
 800a962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a966:	059a      	lsls	r2, r3, #22
 800a968:	d4ee      	bmi.n	800a948 <__smakebuf_r+0x18>
 800a96a:	f023 0303 	bic.w	r3, r3, #3
 800a96e:	f043 0302 	orr.w	r3, r3, #2
 800a972:	81a3      	strh	r3, [r4, #12]
 800a974:	e7e2      	b.n	800a93c <__smakebuf_r+0xc>
 800a976:	89a3      	ldrh	r3, [r4, #12]
 800a978:	6020      	str	r0, [r4, #0]
 800a97a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a97e:	81a3      	strh	r3, [r4, #12]
 800a980:	9b01      	ldr	r3, [sp, #4]
 800a982:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a986:	b15b      	cbz	r3, 800a9a0 <__smakebuf_r+0x70>
 800a988:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a98c:	4630      	mov	r0, r6
 800a98e:	f000 f81d 	bl	800a9cc <_isatty_r>
 800a992:	b128      	cbz	r0, 800a9a0 <__smakebuf_r+0x70>
 800a994:	89a3      	ldrh	r3, [r4, #12]
 800a996:	f023 0303 	bic.w	r3, r3, #3
 800a99a:	f043 0301 	orr.w	r3, r3, #1
 800a99e:	81a3      	strh	r3, [r4, #12]
 800a9a0:	89a3      	ldrh	r3, [r4, #12]
 800a9a2:	431d      	orrs	r5, r3
 800a9a4:	81a5      	strh	r5, [r4, #12]
 800a9a6:	e7cf      	b.n	800a948 <__smakebuf_r+0x18>

0800a9a8 <_fstat_r>:
 800a9a8:	b538      	push	{r3, r4, r5, lr}
 800a9aa:	4d07      	ldr	r5, [pc, #28]	@ (800a9c8 <_fstat_r+0x20>)
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	4608      	mov	r0, r1
 800a9b2:	4611      	mov	r1, r2
 800a9b4:	602b      	str	r3, [r5, #0]
 800a9b6:	f7f6 fcbc 	bl	8001332 <_fstat>
 800a9ba:	1c43      	adds	r3, r0, #1
 800a9bc:	d102      	bne.n	800a9c4 <_fstat_r+0x1c>
 800a9be:	682b      	ldr	r3, [r5, #0]
 800a9c0:	b103      	cbz	r3, 800a9c4 <_fstat_r+0x1c>
 800a9c2:	6023      	str	r3, [r4, #0]
 800a9c4:	bd38      	pop	{r3, r4, r5, pc}
 800a9c6:	bf00      	nop
 800a9c8:	20001f40 	.word	0x20001f40

0800a9cc <_isatty_r>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	4d06      	ldr	r5, [pc, #24]	@ (800a9e8 <_isatty_r+0x1c>)
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	4608      	mov	r0, r1
 800a9d6:	602b      	str	r3, [r5, #0]
 800a9d8:	f7f6 fcbb 	bl	8001352 <_isatty>
 800a9dc:	1c43      	adds	r3, r0, #1
 800a9de:	d102      	bne.n	800a9e6 <_isatty_r+0x1a>
 800a9e0:	682b      	ldr	r3, [r5, #0]
 800a9e2:	b103      	cbz	r3, 800a9e6 <_isatty_r+0x1a>
 800a9e4:	6023      	str	r3, [r4, #0]
 800a9e6:	bd38      	pop	{r3, r4, r5, pc}
 800a9e8:	20001f40 	.word	0x20001f40

0800a9ec <_sbrk_r>:
 800a9ec:	b538      	push	{r3, r4, r5, lr}
 800a9ee:	4d06      	ldr	r5, [pc, #24]	@ (800aa08 <_sbrk_r+0x1c>)
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	4608      	mov	r0, r1
 800a9f6:	602b      	str	r3, [r5, #0]
 800a9f8:	f7f6 fcc4 	bl	8001384 <_sbrk>
 800a9fc:	1c43      	adds	r3, r0, #1
 800a9fe:	d102      	bne.n	800aa06 <_sbrk_r+0x1a>
 800aa00:	682b      	ldr	r3, [r5, #0]
 800aa02:	b103      	cbz	r3, 800aa06 <_sbrk_r+0x1a>
 800aa04:	6023      	str	r3, [r4, #0]
 800aa06:	bd38      	pop	{r3, r4, r5, pc}
 800aa08:	20001f40 	.word	0x20001f40

0800aa0c <_init>:
 800aa0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa0e:	bf00      	nop
 800aa10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa12:	bc08      	pop	{r3}
 800aa14:	469e      	mov	lr, r3
 800aa16:	4770      	bx	lr

0800aa18 <_fini>:
 800aa18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1a:	bf00      	nop
 800aa1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa1e:	bc08      	pop	{r3}
 800aa20:	469e      	mov	lr, r3
 800aa22:	4770      	bx	lr
