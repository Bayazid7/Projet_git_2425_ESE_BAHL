
robot_chat_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065a4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006784  08006784  00007784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006870  08006870  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006870  08006870  00007870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006878  08006878  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006878  08006878  00007878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800687c  0800687c  0000787c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006880  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b64  2000006c  080068ec  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bd0  080068ec  00008bd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016adc  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003777  00000000  00000000  0001eb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  000222f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e5b  00000000  00000000  000235c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020624  00000000  00000000  00024423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d60  00000000  00000000  00044a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2c14  00000000  00000000  0005b7a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e3bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005288  00000000  00000000  0011e400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00123688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800676c 	.word	0x0800676c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	0800676c 	.word	0x0800676c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <Moustache_Init>:
// Prototypes des tâches
static void CB_OUT1_Task(void *pvParameters);
static void CB_OUT2_Task(void *pvParameters);

// Initialisation
void Moustache_Init(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af02      	add	r7, sp, #8
    // Création des tâches
    xTaskCreate(CB_OUT1_Task, "CB_OUT1_Task", 128, NULL, 1, &cb_out1_task_handle);
 8000516:	4b0b      	ldr	r3, [pc, #44]	@ (8000544 <Moustache_Init+0x34>)
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2301      	movs	r3, #1
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2300      	movs	r3, #0
 8000520:	2280      	movs	r2, #128	@ 0x80
 8000522:	4909      	ldr	r1, [pc, #36]	@ (8000548 <Moustache_Init+0x38>)
 8000524:	4809      	ldr	r0, [pc, #36]	@ (800054c <Moustache_Init+0x3c>)
 8000526:	f003 fce9 	bl	8003efc <xTaskCreate>
    xTaskCreate(CB_OUT2_Task, "CB_OUT2_Task", 128, NULL, 1, &cb_out2_task_handle);
 800052a:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <Moustache_Init+0x40>)
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	2301      	movs	r3, #1
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	2300      	movs	r3, #0
 8000534:	2280      	movs	r2, #128	@ 0x80
 8000536:	4907      	ldr	r1, [pc, #28]	@ (8000554 <Moustache_Init+0x44>)
 8000538:	4807      	ldr	r0, [pc, #28]	@ (8000558 <Moustache_Init+0x48>)
 800053a:	f003 fcdf 	bl	8003efc <xTaskCreate>
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000088 	.word	0x20000088
 8000548:	08006784 	.word	0x08006784
 800054c:	08000605 	.word	0x08000605
 8000550:	2000008c 	.word	0x2000008c
 8000554:	08006794 	.word	0x08006794
 8000558:	08000655 	.word	0x08000655

0800055c <Moustache_HandleInterrupt>:

// Gestion des interruptions GPIO
void Moustache_HandleInterrupt(uint16_t GPIO_Pin) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af02      	add	r7, sp, #8
 8000562:	4603      	mov	r3, r0
 8000564:	80fb      	strh	r3, [r7, #6]
    BaseType_t higherPriorityTaskWoken = pdFALSE;
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]

    if (GPIO_Pin == CB_OUT1_Pin) {
 800056a:	88fb      	ldrh	r3, [r7, #6]
 800056c:	2b04      	cmp	r3, #4
 800056e:	d117      	bne.n	80005a0 <Moustache_HandleInterrupt+0x44>
        if (exclusive_task == 0 || exclusive_task == 1) {
 8000570:	4b20      	ldr	r3, [pc, #128]	@ (80005f4 <Moustache_HandleInterrupt+0x98>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	d004      	beq.n	8000584 <Moustache_HandleInterrupt+0x28>
 800057a:	4b1e      	ldr	r3, [pc, #120]	@ (80005f4 <Moustache_HandleInterrupt+0x98>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	2b01      	cmp	r3, #1
 8000582:	d127      	bne.n	80005d4 <Moustache_HandleInterrupt+0x78>
            // Activer CB_OUT1
            exclusive_task = 1; // Marquer CB_OUT1 comme exclusif
 8000584:	4b1b      	ldr	r3, [pc, #108]	@ (80005f4 <Moustache_HandleInterrupt+0x98>)
 8000586:	2201      	movs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
            xTaskNotifyFromISR(cb_out1_task_handle, 0x01, eSetBits, &higherPriorityTaskWoken);
 800058a:	4b1b      	ldr	r3, [pc, #108]	@ (80005f8 <Moustache_HandleInterrupt+0x9c>)
 800058c:	6818      	ldr	r0, [r3, #0]
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2300      	movs	r3, #0
 8000596:	2201      	movs	r2, #1
 8000598:	2101      	movs	r1, #1
 800059a:	f004 fb61 	bl	8004c60 <xTaskGenericNotifyFromISR>
 800059e:	e019      	b.n	80005d4 <Moustache_HandleInterrupt+0x78>
        }
    } else if (GPIO_Pin == CB_OUT2_Pin) {
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	2b08      	cmp	r3, #8
 80005a4:	d116      	bne.n	80005d4 <Moustache_HandleInterrupt+0x78>
        if (exclusive_task == 0 || exclusive_task == 2) {
 80005a6:	4b13      	ldr	r3, [pc, #76]	@ (80005f4 <Moustache_HandleInterrupt+0x98>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d004      	beq.n	80005ba <Moustache_HandleInterrupt+0x5e>
 80005b0:	4b10      	ldr	r3, [pc, #64]	@ (80005f4 <Moustache_HandleInterrupt+0x98>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b02      	cmp	r3, #2
 80005b8:	d10c      	bne.n	80005d4 <Moustache_HandleInterrupt+0x78>
            // Activer CB_OUT2
            exclusive_task = 2; // Marquer CB_OUT2 comme exclusif
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <Moustache_HandleInterrupt+0x98>)
 80005bc:	2202      	movs	r2, #2
 80005be:	701a      	strb	r2, [r3, #0]
            xTaskNotifyFromISR(cb_out2_task_handle, 0x01, eSetBits, &higherPriorityTaskWoken);
 80005c0:	4b0e      	ldr	r3, [pc, #56]	@ (80005fc <Moustache_HandleInterrupt+0xa0>)
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	2201      	movs	r2, #1
 80005ce:	2101      	movs	r1, #1
 80005d0:	f004 fb46 	bl	8004c60 <xTaskGenericNotifyFromISR>
        }
    }

    // Passer à une tâche de priorité plus élevée si nécessaire
    portYIELD_FROM_ISR(higherPriorityTaskWoken);
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d007      	beq.n	80005ea <Moustache_HandleInterrupt+0x8e>
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <Moustache_HandleInterrupt+0xa4>)
 80005dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	f3bf 8f4f 	dsb	sy
 80005e6:	f3bf 8f6f 	isb	sy
}
 80005ea:	bf00      	nop
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000090 	.word	0x20000090
 80005f8:	20000088 	.word	0x20000088
 80005fc:	2000008c 	.word	0x2000008c
 8000600:	e000ed04 	.word	0xe000ed04

08000604 <CB_OUT1_Task>:

// Tâches pour traiter les interruptions
static void CB_OUT1_Task(void *pvParameters) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    uint32_t notificationValue = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
    for (;;) {
        // Attend une notification
        if (xTaskNotifyWait(0, 0xFFFFFFFF, &notificationValue, portMAX_DELAY) == pdTRUE) {
 8000610:	f107 020c 	add.w	r2, r7, #12
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	f04f 31ff 	mov.w	r1, #4294967295
 800061c:	2000      	movs	r0, #0
 800061e:	f004 fac5 	bl	8004bac <xTaskNotifyWait>
 8000622:	4603      	mov	r3, r0
 8000624:	2b01      	cmp	r3, #1
 8000626:	d1f3      	bne.n	8000610 <CB_OUT1_Task+0xc>
            // Action pour CB_OUT1
            printf("CB_OUT1 Detected\r\n");
 8000628:	4807      	ldr	r0, [pc, #28]	@ (8000648 <CB_OUT1_Task+0x44>)
 800062a:	f005 fcfd 	bl	8006028 <puts>
            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // Exemple d'action
 800062e:	2101      	movs	r1, #1
 8000630:	4806      	ldr	r0, [pc, #24]	@ (800064c <CB_OUT1_Task+0x48>)
 8000632:	f000 fe25 	bl	8001280 <HAL_GPIO_TogglePin>

            // Simule une tâche longue
            vTaskDelay(pdMS_TO_TICKS(1000));
 8000636:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800063a:	f003 fda5 	bl	8004188 <vTaskDelay>

            // Réinitialiser l'état pour permettre de détecter CB_OUT1 ou CB_OUT2 à nouveau
            exclusive_task = 0;
 800063e:	4b04      	ldr	r3, [pc, #16]	@ (8000650 <CB_OUT1_Task+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
        if (xTaskNotifyWait(0, 0xFFFFFFFF, &notificationValue, portMAX_DELAY) == pdTRUE) {
 8000644:	e7e4      	b.n	8000610 <CB_OUT1_Task+0xc>
 8000646:	bf00      	nop
 8000648:	080067a4 	.word	0x080067a4
 800064c:	48000400 	.word	0x48000400
 8000650:	20000090 	.word	0x20000090

08000654 <CB_OUT2_Task>:
        }
    }
}

static void CB_OUT2_Task(void *pvParameters) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
    uint32_t notificationValue = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
    for (;;) {
        // Attend une notification
        if (xTaskNotifyWait(0, 0xFFFFFFFF, &notificationValue, portMAX_DELAY) == pdTRUE) {
 8000660:	f107 020c 	add.w	r2, r7, #12
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	f04f 31ff 	mov.w	r1, #4294967295
 800066c:	2000      	movs	r0, #0
 800066e:	f004 fa9d 	bl	8004bac <xTaskNotifyWait>
 8000672:	4603      	mov	r3, r0
 8000674:	2b01      	cmp	r3, #1
 8000676:	d1f3      	bne.n	8000660 <CB_OUT2_Task+0xc>
            // Action pour CB_OUT2
            printf("CB_OUT2 Detected\r\n");
 8000678:	4807      	ldr	r0, [pc, #28]	@ (8000698 <CB_OUT2_Task+0x44>)
 800067a:	f005 fcd5 	bl	8006028 <puts>
            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1); // Exemple d'action
 800067e:	2102      	movs	r1, #2
 8000680:	4806      	ldr	r0, [pc, #24]	@ (800069c <CB_OUT2_Task+0x48>)
 8000682:	f000 fdfd 	bl	8001280 <HAL_GPIO_TogglePin>

            // Simule une tâche longue
            vTaskDelay(pdMS_TO_TICKS(1000));
 8000686:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800068a:	f003 fd7d 	bl	8004188 <vTaskDelay>

            // Réinitialiser l'état pour permettre de détecter CB_OUT1 ou CB_OUT2 à nouveau
            exclusive_task = 0;
 800068e:	4b04      	ldr	r3, [pc, #16]	@ (80006a0 <CB_OUT2_Task+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
        if (xTaskNotifyWait(0, 0xFFFFFFFF, &notificationValue, portMAX_DELAY) == pdTRUE) {
 8000694:	e7e4      	b.n	8000660 <CB_OUT2_Task+0xc>
 8000696:	bf00      	nop
 8000698:	080067b8 	.word	0x080067b8
 800069c:	48000400 	.word	0x48000400
 80006a0:	20000090 	.word	0x20000090

080006a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006a8:	4a04      	ldr	r2, [pc, #16]	@ (80006bc <MX_FREERTOS_Init+0x18>)
 80006aa:	2100      	movs	r1, #0
 80006ac:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <MX_FREERTOS_Init+0x1c>)
 80006ae:	f002 fd35 	bl	800311c <osThreadNew>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a03      	ldr	r2, [pc, #12]	@ (80006c4 <MX_FREERTOS_Init+0x20>)
 80006b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	0800680c 	.word	0x0800680c
 80006c0:	080006c9 	.word	0x080006c9
 80006c4:	20000094 	.word	0x20000094

080006c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006d0:	2001      	movs	r0, #1
 80006d2:	f002 fdb5 	bl	8003240 <osDelay>
 80006d6:	e7fb      	b.n	80006d0 <StartDefaultTask+0x8>

080006d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	@ 0x28
 80006dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ee:	4b29      	ldr	r3, [pc, #164]	@ (8000794 <MX_GPIO_Init+0xbc>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	4a28      	ldr	r2, [pc, #160]	@ (8000794 <MX_GPIO_Init+0xbc>)
 80006f4:	f043 0320 	orr.w	r3, r3, #32
 80006f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fa:	4b26      	ldr	r3, [pc, #152]	@ (8000794 <MX_GPIO_Init+0xbc>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	f003 0320 	and.w	r3, r3, #32
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b23      	ldr	r3, [pc, #140]	@ (8000794 <MX_GPIO_Init+0xbc>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	4a22      	ldr	r2, [pc, #136]	@ (8000794 <MX_GPIO_Init+0xbc>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000712:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <MX_GPIO_Init+0xbc>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	4b1d      	ldr	r3, [pc, #116]	@ (8000794 <MX_GPIO_Init+0xbc>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <MX_GPIO_Init+0xbc>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_GPIO_Init+0xbc>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_GPIO_Init+0xbc>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	4a16      	ldr	r2, [pc, #88]	@ (8000794 <MX_GPIO_Init+0xbc>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_GPIO_Init+0xbc>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : CB_OUT1_Pin CB_OUT2_Pin */
  GPIO_InitStruct.Pin = CB_OUT1_Pin|CB_OUT2_Pin;
 800074e:	230c      	movs	r3, #12
 8000750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000752:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4619      	mov	r1, r3
 8000762:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000766:	f000 fc09 	bl	8000f7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2105      	movs	r1, #5
 800076e:	2008      	movs	r0, #8
 8000770:	f000 fbcf 	bl	8000f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000774:	2008      	movs	r0, #8
 8000776:	f000 fbe6 	bl	8000f46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2105      	movs	r1, #5
 800077e:	2009      	movs	r0, #9
 8000780:	f000 fbc7 	bl	8000f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000784:	2009      	movs	r0, #9
 8000786:	f000 fbde 	bl	8000f46 <HAL_NVIC_EnableIRQ>

}
 800078a:	bf00      	nop
 800078c:	3728      	adds	r7, #40	@ 0x28
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000

08000798 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80007a0:	1d39      	adds	r1, r7, #4
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	2201      	movs	r2, #1
 80007a8:	4803      	ldr	r0, [pc, #12]	@ (80007b8 <__io_putchar+0x20>)
 80007aa:	f001 fdbd 	bl	8002328 <HAL_UART_Transmit>
    return ch;
 80007ae:	687b      	ldr	r3, [r7, #4]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	2000009c 	.word	0x2000009c

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c0:	f000 fa5b 	bl	8000c7a <HAL_Init>

  /* USER CODE BEGIN Init */
  Moustache_Init(); // Initialisation du driver
 80007c4:	f7ff fea4 	bl	8000510 <Moustache_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c8:	f000 f814 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007cc:	f7ff ff84 	bl	80006d8 <MX_GPIO_Init>
  MX_UART4_Init();
 80007d0:	f000 f984 	bl	8000adc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  printf("---- FreeRTOS Demo ----\r\n");
 80007d4:	4806      	ldr	r0, [pc, #24]	@ (80007f0 <main+0x34>)
 80007d6:	f005 fc27 	bl	8006028 <puts>

  // Initialisation de Moustache
  Moustache_Init();
 80007da:	f7ff fe99 	bl	8000510 <Moustache_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007de:	f002 fc53 	bl	8003088 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80007e2:	f7ff ff5f 	bl	80006a4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007e6:	f002 fc73 	bl	80030d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ea:	bf00      	nop
 80007ec:	e7fd      	b.n	80007ea <main+0x2e>
 80007ee:	bf00      	nop
 80007f0:	080067d8 	.word	0x080067d8

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	@ 0x50
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0318 	add.w	r3, r7, #24
 80007fe:	2238      	movs	r2, #56	@ 0x38
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f005 fcf0 	bl	80061e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000816:	2000      	movs	r0, #0
 8000818:	f000 fd64 	bl	80012e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800081c:	2302      	movs	r3, #2
 800081e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000820:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000826:	2340      	movs	r3, #64	@ 0x40
 8000828:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082a:	2302      	movs	r3, #2
 800082c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800082e:	2302      	movs	r3, #2
 8000830:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000832:	2304      	movs	r3, #4
 8000834:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000836:	2355      	movs	r3, #85	@ 0x55
 8000838:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800083a:	2302      	movs	r3, #2
 800083c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800083e:	2302      	movs	r3, #2
 8000840:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000842:	2302      	movs	r3, #2
 8000844:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000846:	f107 0318 	add.w	r3, r7, #24
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fdfe 	bl	800144c <HAL_RCC_OscConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000856:	f000 f825 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085a:	230f      	movs	r3, #15
 800085c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	2303      	movs	r3, #3
 8000860:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2104      	movs	r1, #4
 8000872:	4618      	mov	r0, r3
 8000874:	f001 f8fc 	bl	8001a70 <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800087e:	f000 f811 	bl	80008a4 <Error_Handler>
  }
}
 8000882:	bf00      	nop
 8000884:	3750      	adds	r7, #80	@ 0x50
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	80fb      	strh	r3, [r7, #6]
	  Moustache_HandleInterrupt(GPIO_Pin);
 8000894:	88fb      	ldrh	r3, [r7, #6]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fe60 	bl	800055c <Moustache_HandleInterrupt>
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <Error_Handler+0x8>

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <HAL_MspInit+0x50>)
 80008b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ba:	4a11      	ldr	r2, [pc, #68]	@ (8000900 <HAL_MspInit+0x50>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80008c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <HAL_MspInit+0x50>)
 80008c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <HAL_MspInit+0x50>)
 80008d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000900 <HAL_MspInit+0x50>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <HAL_MspInit+0x50>)
 80008dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	210f      	movs	r1, #15
 80008ea:	f06f 0001 	mvn.w	r0, #1
 80008ee:	f000 fb10 	bl	8000f12 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008f2:	f000 fd9b 	bl	800142c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <NMI_Handler+0x4>

0800090c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <MemManage_Handler+0x4>

0800091c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <BusFault_Handler+0x4>

08000924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <UsageFault_Handler+0x4>

0800092c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093e:	f000 f9ef 	bl	8000d20 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000942:	f004 f8a5 	bl	8004a90 <xTaskGetSchedulerState>
 8000946:	4603      	mov	r3, r0
 8000948:	2b01      	cmp	r3, #1
 800094a:	d001      	beq.n	8000950 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800094c:	f004 ffd4 	bl	80058f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CB_OUT1_Pin);
 8000958:	2004      	movs	r0, #4
 800095a:	f000 fcab 	bl	80012b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}

08000962 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CB_OUT2_Pin);
 8000966:	2008      	movs	r0, #8
 8000968:	f000 fca4 	bl	80012b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	e00a      	b.n	8000998 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000982:	f3af 8000 	nop.w
 8000986:	4601      	mov	r1, r0
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	60ba      	str	r2, [r7, #8]
 800098e:	b2ca      	uxtb	r2, r1
 8000990:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3301      	adds	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	429a      	cmp	r2, r3
 800099e:	dbf0      	blt.n	8000982 <_read+0x12>
  }

  return len;
 80009a0:	687b      	ldr	r3, [r7, #4]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	e009      	b.n	80009d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	60ba      	str	r2, [r7, #8]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fee7 	bl	8000798 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3301      	adds	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbf1      	blt.n	80009bc <_write+0x12>
  }
  return len;
 80009d8:	687b      	ldr	r3, [r7, #4]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <_close>:

int _close(int file)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <_isatty>:

int _isatty(int file)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a22:	2301      	movs	r3, #1
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a54:	4a14      	ldr	r2, [pc, #80]	@ (8000aa8 <_sbrk+0x5c>)
 8000a56:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <_sbrk+0x60>)
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a60:	4b13      	ldr	r3, [pc, #76]	@ (8000ab0 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d102      	bne.n	8000a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a68:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <_sbrk+0x64>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	@ (8000ab4 <_sbrk+0x68>)
 8000a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6e:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d207      	bcs.n	8000a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a7c:	f005 fc02 	bl	8006284 <__errno>
 8000a80:	4603      	mov	r3, r0
 8000a82:	220c      	movs	r2, #12
 8000a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	e009      	b.n	8000aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a92:	4b07      	ldr	r3, [pc, #28]	@ (8000ab0 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a05      	ldr	r2, [pc, #20]	@ (8000ab0 <_sbrk+0x64>)
 8000a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20008000 	.word	0x20008000
 8000aac:	00000400 	.word	0x00000400
 8000ab0:	20000098 	.word	0x20000098
 8000ab4:	20001bd0 	.word	0x20001bd0

08000ab8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000abc:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <SystemInit+0x20>)
 8000abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ac2:	4a05      	ldr	r2, [pc, #20]	@ (8000ad8 <SystemInit+0x20>)
 8000ac4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ac8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	@ (8000b6c <MX_UART4_Init+0x90>)
 8000ae2:	4a23      	ldr	r2, [pc, #140]	@ (8000b70 <MX_UART4_Init+0x94>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <MX_UART4_Init+0x90>)
 8000ae8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b1f      	ldr	r3, [pc, #124]	@ (8000b6c <MX_UART4_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <MX_UART4_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b6c <MX_UART4_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <MX_UART4_Init+0x90>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b19      	ldr	r3, [pc, #100]	@ (8000b6c <MX_UART4_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <MX_UART4_Init+0x90>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b12:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <MX_UART4_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b18:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <MX_UART4_Init+0x90>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <MX_UART4_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b24:	4811      	ldr	r0, [pc, #68]	@ (8000b6c <MX_UART4_Init+0x90>)
 8000b26:	f001 fbaf 	bl	8002288 <HAL_UART_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000b30:	f7ff feb8 	bl	80008a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b34:	2100      	movs	r1, #0
 8000b36:	480d      	ldr	r0, [pc, #52]	@ (8000b6c <MX_UART4_Init+0x90>)
 8000b38:	f002 f9a8 	bl	8002e8c <HAL_UARTEx_SetTxFifoThreshold>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000b42:	f7ff feaf 	bl	80008a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b46:	2100      	movs	r1, #0
 8000b48:	4808      	ldr	r0, [pc, #32]	@ (8000b6c <MX_UART4_Init+0x90>)
 8000b4a:	f002 f9dd 	bl	8002f08 <HAL_UARTEx_SetRxFifoThreshold>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000b54:	f7ff fea6 	bl	80008a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	@ (8000b6c <MX_UART4_Init+0x90>)
 8000b5a:	f002 f95e 	bl	8002e1a <HAL_UARTEx_DisableFifoMode>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000b64:	f7ff fe9e 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000009c 	.word	0x2000009c
 8000b70:	40004c00 	.word	0x40004c00

08000b74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b09a      	sub	sp, #104	@ 0x68
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	2244      	movs	r2, #68	@ 0x44
 8000b92:	2100      	movs	r1, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f005 fb27 	bl	80061e8 <memset>
  if(uartHandle->Instance==UART4)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8000c1c <HAL_UART_MspInit+0xa8>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d136      	bne.n	8000c12 <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f001 f979 	bl	8001ea8 <HAL_RCCEx_PeriphCLKConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bbc:	f7ff fe72 	bl	80008a4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000bc0:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <HAL_UART_MspInit+0xac>)
 8000bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bc4:	4a16      	ldr	r2, [pc, #88]	@ (8000c20 <HAL_UART_MspInit+0xac>)
 8000bc6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000bca:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bcc:	4b14      	ldr	r3, [pc, #80]	@ (8000c20 <HAL_UART_MspInit+0xac>)
 8000bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd8:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <HAL_UART_MspInit+0xac>)
 8000bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bdc:	4a10      	ldr	r2, [pc, #64]	@ (8000c20 <HAL_UART_MspInit+0xac>)
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000be4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <HAL_UART_MspInit+0xac>)
 8000be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bf0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000bf4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000c02:	2305      	movs	r3, #5
 8000c04:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c06:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4805      	ldr	r0, [pc, #20]	@ (8000c24 <HAL_UART_MspInit+0xb0>)
 8000c0e:	f000 f9b5 	bl	8000f7c <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8000c12:	bf00      	nop
 8000c14:	3768      	adds	r7, #104	@ 0x68
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40004c00 	.word	0x40004c00
 8000c20:	40021000 	.word	0x40021000
 8000c24:	48000800 	.word	0x48000800

08000c28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c28:	480d      	ldr	r0, [pc, #52]	@ (8000c60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c2a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c2c:	f7ff ff44 	bl	8000ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c30:	480c      	ldr	r0, [pc, #48]	@ (8000c64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c32:	490d      	ldr	r1, [pc, #52]	@ (8000c68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c34:	4a0d      	ldr	r2, [pc, #52]	@ (8000c6c <LoopForever+0xe>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c48:	4c0a      	ldr	r4, [pc, #40]	@ (8000c74 <LoopForever+0x16>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000c56:	f005 fb1b 	bl	8006290 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c5a:	f7ff fdaf 	bl	80007bc <main>

08000c5e <LoopForever>:

LoopForever:
    b LoopForever
 8000c5e:	e7fe      	b.n	8000c5e <LoopForever>
  ldr   r0, =_estack
 8000c60:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c6c:	08006880 	.word	0x08006880
  ldr r2, =_sbss
 8000c70:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c74:	20001bd0 	.word	0x20001bd0

08000c78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC1_2_IRQHandler>

08000c7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c80:	2300      	movs	r3, #0
 8000c82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f939 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c8a:	200f      	movs	r0, #15
 8000c8c:	f000 f80e 	bl	8000cac <HAL_InitTick>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d002      	beq.n	8000c9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	71fb      	strb	r3, [r7, #7]
 8000c9a:	e001      	b.n	8000ca0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c9c:	f7ff fe08 	bl	80008b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ca0:	79fb      	ldrb	r3, [r7, #7]

}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cb8:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <HAL_InitTick+0x68>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d022      	beq.n	8000d06 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cc0:	4b15      	ldr	r3, [pc, #84]	@ (8000d18 <HAL_InitTick+0x6c>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <HAL_InitTick+0x68>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ccc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 f944 	bl	8000f62 <HAL_SYSTICK_Config>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d10f      	bne.n	8000d00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b0f      	cmp	r3, #15
 8000ce4:	d809      	bhi.n	8000cfa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	6879      	ldr	r1, [r7, #4]
 8000cea:	f04f 30ff 	mov.w	r0, #4294967295
 8000cee:	f000 f910 	bl	8000f12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <HAL_InitTick+0x70>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	e007      	b.n	8000d0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	73fb      	strb	r3, [r7, #15]
 8000cfe:	e004      	b.n	8000d0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	73fb      	strb	r3, [r7, #15]
 8000d04:	e001      	b.n	8000d0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000008 	.word	0x20000008
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	20000004 	.word	0x20000004

08000d20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d24:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <HAL_IncTick+0x1c>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <HAL_IncTick+0x20>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a03      	ldr	r2, [pc, #12]	@ (8000d3c <HAL_IncTick+0x1c>)
 8000d30:	6013      	str	r3, [r2, #0]
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	20000130 	.word	0x20000130
 8000d40:	20000008 	.word	0x20000008

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b03      	ldr	r3, [pc, #12]	@ (8000d58 <HAL_GetTick+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000130 	.word	0x20000130

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	@ (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	60d3      	str	r3, [r2, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	@ (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db0b      	blt.n	8000dea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	4907      	ldr	r1, [pc, #28]	@ (8000df8 <__NVIC_EnableIRQ+0x38>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	2001      	movs	r0, #1
 8000de2:	fa00 f202 	lsl.w	r2, r0, r2
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000e100 	.word	0xe000e100

08000dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	@ (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	@ (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	@ 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	@ 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ff8e 	bl	8000dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff29 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f20:	f7ff ff40 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000f24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f7ff ff90 	bl	8000e50 <NVIC_EncodePriority>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff5f 	bl	8000dfc <__NVIC_SetPriority>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff33 	bl	8000dc0 <__NVIC_EnableIRQ>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ffa4 	bl	8000eb8 <SysTick_Config>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f8a:	e15a      	b.n	8001242 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	2101      	movs	r1, #1
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	fa01 f303 	lsl.w	r3, r1, r3
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 814c 	beq.w	800123c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d005      	beq.n	8000fbc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d130      	bne.n	800101e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	68da      	ldr	r2, [r3, #12]
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	091b      	lsrs	r3, r3, #4
 8001008:	f003 0201 	and.w	r2, r3, #1
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b03      	cmp	r3, #3
 8001028:	d017      	beq.n	800105a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d123      	bne.n	80010ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	08da      	lsrs	r2, r3, #3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3208      	adds	r2, #8
 800106e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	691a      	ldr	r2, [r3, #16]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f003 0307 	and.w	r3, r3, #7
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	08da      	lsrs	r2, r3, #3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3208      	adds	r2, #8
 80010a8:	6939      	ldr	r1, [r7, #16]
 80010aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	2203      	movs	r2, #3
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0203 	and.w	r2, r3, #3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 80a6 	beq.w	800123c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f0:	4b5b      	ldr	r3, [pc, #364]	@ (8001260 <HAL_GPIO_Init+0x2e4>)
 80010f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f4:	4a5a      	ldr	r2, [pc, #360]	@ (8001260 <HAL_GPIO_Init+0x2e4>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80010fc:	4b58      	ldr	r3, [pc, #352]	@ (8001260 <HAL_GPIO_Init+0x2e4>)
 80010fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001108:	4a56      	ldr	r2, [pc, #344]	@ (8001264 <HAL_GPIO_Init+0x2e8>)
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	089b      	lsrs	r3, r3, #2
 800110e:	3302      	adds	r3, #2
 8001110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	220f      	movs	r2, #15
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001132:	d01f      	beq.n	8001174 <HAL_GPIO_Init+0x1f8>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a4c      	ldr	r2, [pc, #304]	@ (8001268 <HAL_GPIO_Init+0x2ec>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d019      	beq.n	8001170 <HAL_GPIO_Init+0x1f4>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a4b      	ldr	r2, [pc, #300]	@ (800126c <HAL_GPIO_Init+0x2f0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d013      	beq.n	800116c <HAL_GPIO_Init+0x1f0>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a4a      	ldr	r2, [pc, #296]	@ (8001270 <HAL_GPIO_Init+0x2f4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d00d      	beq.n	8001168 <HAL_GPIO_Init+0x1ec>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a49      	ldr	r2, [pc, #292]	@ (8001274 <HAL_GPIO_Init+0x2f8>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d007      	beq.n	8001164 <HAL_GPIO_Init+0x1e8>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a48      	ldr	r2, [pc, #288]	@ (8001278 <HAL_GPIO_Init+0x2fc>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d101      	bne.n	8001160 <HAL_GPIO_Init+0x1e4>
 800115c:	2305      	movs	r3, #5
 800115e:	e00a      	b.n	8001176 <HAL_GPIO_Init+0x1fa>
 8001160:	2306      	movs	r3, #6
 8001162:	e008      	b.n	8001176 <HAL_GPIO_Init+0x1fa>
 8001164:	2304      	movs	r3, #4
 8001166:	e006      	b.n	8001176 <HAL_GPIO_Init+0x1fa>
 8001168:	2303      	movs	r3, #3
 800116a:	e004      	b.n	8001176 <HAL_GPIO_Init+0x1fa>
 800116c:	2302      	movs	r3, #2
 800116e:	e002      	b.n	8001176 <HAL_GPIO_Init+0x1fa>
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <HAL_GPIO_Init+0x1fa>
 8001174:	2300      	movs	r3, #0
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	f002 0203 	and.w	r2, r2, #3
 800117c:	0092      	lsls	r2, r2, #2
 800117e:	4093      	lsls	r3, r2
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001186:	4937      	ldr	r1, [pc, #220]	@ (8001264 <HAL_GPIO_Init+0x2e8>)
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	3302      	adds	r3, #2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001194:	4b39      	ldr	r3, [pc, #228]	@ (800127c <HAL_GPIO_Init+0x300>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	43db      	mvns	r3, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011b8:	4a30      	ldr	r2, [pc, #192]	@ (800127c <HAL_GPIO_Init+0x300>)
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011be:	4b2f      	ldr	r3, [pc, #188]	@ (800127c <HAL_GPIO_Init+0x300>)
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011e2:	4a26      	ldr	r2, [pc, #152]	@ (800127c <HAL_GPIO_Init+0x300>)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80011e8:	4b24      	ldr	r3, [pc, #144]	@ (800127c <HAL_GPIO_Init+0x300>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800120c:	4a1b      	ldr	r2, [pc, #108]	@ (800127c <HAL_GPIO_Init+0x300>)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001212:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <HAL_GPIO_Init+0x300>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001236:	4a11      	ldr	r2, [pc, #68]	@ (800127c <HAL_GPIO_Init+0x300>)
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	3301      	adds	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	fa22 f303 	lsr.w	r3, r2, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	f47f ae9d 	bne.w	8000f8c <HAL_GPIO_Init+0x10>
  }
}
 8001252:	bf00      	nop
 8001254:	bf00      	nop
 8001256:	371c      	adds	r7, #28
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	40021000 	.word	0x40021000
 8001264:	40010000 	.word	0x40010000
 8001268:	48000400 	.word	0x48000400
 800126c:	48000800 	.word	0x48000800
 8001270:	48000c00 	.word	0x48000c00
 8001274:	48001000 	.word	0x48001000
 8001278:	48001400 	.word	0x48001400
 800127c:	40010400 	.word	0x40010400

08001280 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4013      	ands	r3, r2
 8001298:	041a      	lsls	r2, r3, #16
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	43d9      	mvns	r1, r3
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	400b      	ands	r3, r1
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	619a      	str	r2, [r3, #24]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012be:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012c0:	695a      	ldr	r2, [r3, #20]
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d006      	beq.n	80012d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012ca:	4a05      	ldr	r2, [pc, #20]	@ (80012e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fad9 	bl	800088a <HAL_GPIO_EXTI_Callback>
  }
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40010400 	.word	0x40010400

080012e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d141      	bne.n	8001376 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012f2:	4b4b      	ldr	r3, [pc, #300]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012fe:	d131      	bne.n	8001364 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001300:	4b47      	ldr	r3, [pc, #284]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001306:	4a46      	ldr	r2, [pc, #280]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800130c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001310:	4b43      	ldr	r3, [pc, #268]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001318:	4a41      	ldr	r2, [pc, #260]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800131a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800131e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001320:	4b40      	ldr	r3, [pc, #256]	@ (8001424 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2232      	movs	r2, #50	@ 0x32
 8001326:	fb02 f303 	mul.w	r3, r2, r3
 800132a:	4a3f      	ldr	r2, [pc, #252]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	0c9b      	lsrs	r3, r3, #18
 8001332:	3301      	adds	r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001336:	e002      	b.n	800133e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3b01      	subs	r3, #1
 800133c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800133e:	4b38      	ldr	r3, [pc, #224]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800134a:	d102      	bne.n	8001352 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f2      	bne.n	8001338 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001352:	4b33      	ldr	r3, [pc, #204]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800135a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800135e:	d158      	bne.n	8001412 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e057      	b.n	8001414 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001364:	4b2e      	ldr	r3, [pc, #184]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800136a:	4a2d      	ldr	r2, [pc, #180]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001370:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001374:	e04d      	b.n	8001412 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800137c:	d141      	bne.n	8001402 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800137e:	4b28      	ldr	r3, [pc, #160]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800138a:	d131      	bne.n	80013f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800138c:	4b24      	ldr	r3, [pc, #144]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001392:	4a23      	ldr	r2, [pc, #140]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001398:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800139c:	4b20      	ldr	r3, [pc, #128]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001424 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2232      	movs	r2, #50	@ 0x32
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013b8:	fba2 2303 	umull	r2, r3, r2, r3
 80013bc:	0c9b      	lsrs	r3, r3, #18
 80013be:	3301      	adds	r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c2:	e002      	b.n	80013ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ca:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013d6:	d102      	bne.n	80013de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f2      	bne.n	80013c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013de:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013ea:	d112      	bne.n	8001412 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e011      	b.n	8001414 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001400:	e007      	b.n	8001412 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001402:	4b07      	ldr	r3, [pc, #28]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800140a:	4a05      	ldr	r2, [pc, #20]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001410:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	40007000 	.word	0x40007000
 8001424:	20000000 	.word	0x20000000
 8001428:	431bde83 	.word	0x431bde83

0800142c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001430:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	4a04      	ldr	r2, [pc, #16]	@ (8001448 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001436:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800143a:	6093      	str	r3, [r2, #8]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40007000 	.word	0x40007000

0800144c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e2fe      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d075      	beq.n	8001556 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800146a:	4b97      	ldr	r3, [pc, #604]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001474:	4b94      	ldr	r3, [pc, #592]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	2b0c      	cmp	r3, #12
 8001482:	d102      	bne.n	800148a <HAL_RCC_OscConfig+0x3e>
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	2b03      	cmp	r3, #3
 8001488:	d002      	beq.n	8001490 <HAL_RCC_OscConfig+0x44>
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	2b08      	cmp	r3, #8
 800148e:	d10b      	bne.n	80014a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001490:	4b8d      	ldr	r3, [pc, #564]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d05b      	beq.n	8001554 <HAL_RCC_OscConfig+0x108>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d157      	bne.n	8001554 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e2d9      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014b0:	d106      	bne.n	80014c0 <HAL_RCC_OscConfig+0x74>
 80014b2:	4b85      	ldr	r3, [pc, #532]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a84      	ldr	r2, [pc, #528]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e01d      	b.n	80014fc <HAL_RCC_OscConfig+0xb0>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x98>
 80014ca:	4b7f      	ldr	r3, [pc, #508]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a7e      	ldr	r2, [pc, #504]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80014d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	4b7c      	ldr	r3, [pc, #496]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a7b      	ldr	r2, [pc, #492]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e00b      	b.n	80014fc <HAL_RCC_OscConfig+0xb0>
 80014e4:	4b78      	ldr	r3, [pc, #480]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a77      	ldr	r2, [pc, #476]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80014ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b75      	ldr	r3, [pc, #468]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a74      	ldr	r2, [pc, #464]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80014f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d013      	beq.n	800152c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001504:	f7ff fc1e 	bl	8000d44 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff fc1a 	bl	8000d44 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	@ 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e29e      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800151e:	4b6a      	ldr	r3, [pc, #424]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0xc0>
 800152a:	e014      	b.n	8001556 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152c:	f7ff fc0a 	bl	8000d44 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fc06 	bl	8000d44 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	@ 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e28a      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001546:	4b60      	ldr	r3, [pc, #384]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0xe8>
 8001552:	e000      	b.n	8001556 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d075      	beq.n	800164e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001562:	4b59      	ldr	r3, [pc, #356]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800156c:	4b56      	ldr	r3, [pc, #344]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	2b0c      	cmp	r3, #12
 800157a:	d102      	bne.n	8001582 <HAL_RCC_OscConfig+0x136>
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d002      	beq.n	8001588 <HAL_RCC_OscConfig+0x13c>
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	2b04      	cmp	r3, #4
 8001586:	d11f      	bne.n	80015c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001588:	4b4f      	ldr	r3, [pc, #316]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_OscConfig+0x154>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e25d      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b49      	ldr	r3, [pc, #292]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	061b      	lsls	r3, r3, #24
 80015ae:	4946      	ldr	r1, [pc, #280]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015b4:	4b45      	ldr	r3, [pc, #276]	@ (80016cc <HAL_RCC_OscConfig+0x280>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fb77 	bl	8000cac <HAL_InitTick>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d043      	beq.n	800164c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e249      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d023      	beq.n	8001618 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d0:	4b3d      	ldr	r3, [pc, #244]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a3c      	ldr	r2, [pc, #240]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80015d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015dc:	f7ff fbb2 	bl	8000d44 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e4:	f7ff fbae 	bl	8000d44 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e232      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f6:	4b34      	ldr	r3, [pc, #208]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001602:	4b31      	ldr	r3, [pc, #196]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	061b      	lsls	r3, r3, #24
 8001610:	492d      	ldr	r1, [pc, #180]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 8001612:	4313      	orrs	r3, r2
 8001614:	604b      	str	r3, [r1, #4]
 8001616:	e01a      	b.n	800164e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001618:	4b2b      	ldr	r3, [pc, #172]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a2a      	ldr	r2, [pc, #168]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 800161e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff fb8e 	bl	8000d44 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162c:	f7ff fb8a 	bl	8000d44 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e20e      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800163e:	4b22      	ldr	r3, [pc, #136]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x1e0>
 800164a:	e000      	b.n	800164e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800164c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d041      	beq.n	80016de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d01c      	beq.n	800169c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001662:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 8001664:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001668:	4a17      	ldr	r2, [pc, #92]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001672:	f7ff fb67 	bl	8000d44 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167a:	f7ff fb63 	bl	8000d44 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e1e7      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800168c:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 800168e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0ef      	beq.n	800167a <HAL_RCC_OscConfig+0x22e>
 800169a:	e020      	b.n	80016de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800169c:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 800169e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a2:	4a09      	ldr	r2, [pc, #36]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ac:	f7ff fb4a 	bl	8000d44 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016b2:	e00d      	b.n	80016d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b4:	f7ff fb46 	bl	8000d44 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d906      	bls.n	80016d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e1ca      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000
 80016cc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016d0:	4b8c      	ldr	r3, [pc, #560]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 80016d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1ea      	bne.n	80016b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 80a6 	beq.w	8001838 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ec:	2300      	movs	r3, #0
 80016ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016f0:	4b84      	ldr	r3, [pc, #528]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 80016f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <HAL_RCC_OscConfig+0x2b4>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <HAL_RCC_OscConfig+0x2b6>
 8001700:	2300      	movs	r3, #0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00d      	beq.n	8001722 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	4b7f      	ldr	r3, [pc, #508]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170a:	4a7e      	ldr	r2, [pc, #504]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001710:	6593      	str	r3, [r2, #88]	@ 0x58
 8001712:	4b7c      	ldr	r3, [pc, #496]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800171e:	2301      	movs	r3, #1
 8001720:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001722:	4b79      	ldr	r3, [pc, #484]	@ (8001908 <HAL_RCC_OscConfig+0x4bc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800172a:	2b00      	cmp	r3, #0
 800172c:	d118      	bne.n	8001760 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800172e:	4b76      	ldr	r3, [pc, #472]	@ (8001908 <HAL_RCC_OscConfig+0x4bc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a75      	ldr	r2, [pc, #468]	@ (8001908 <HAL_RCC_OscConfig+0x4bc>)
 8001734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173a:	f7ff fb03 	bl	8000d44 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001742:	f7ff faff 	bl	8000d44 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e183      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001754:	4b6c      	ldr	r3, [pc, #432]	@ (8001908 <HAL_RCC_OscConfig+0x4bc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d108      	bne.n	800177a <HAL_RCC_OscConfig+0x32e>
 8001768:	4b66      	ldr	r3, [pc, #408]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 800176a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800176e:	4a65      	ldr	r2, [pc, #404]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001778:	e024      	b.n	80017c4 <HAL_RCC_OscConfig+0x378>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b05      	cmp	r3, #5
 8001780:	d110      	bne.n	80017a4 <HAL_RCC_OscConfig+0x358>
 8001782:	4b60      	ldr	r3, [pc, #384]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 8001784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001788:	4a5e      	ldr	r2, [pc, #376]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 800178a:	f043 0304 	orr.w	r3, r3, #4
 800178e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001792:	4b5c      	ldr	r3, [pc, #368]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 8001794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001798:	4a5a      	ldr	r2, [pc, #360]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017a2:	e00f      	b.n	80017c4 <HAL_RCC_OscConfig+0x378>
 80017a4:	4b57      	ldr	r3, [pc, #348]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 80017a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017aa:	4a56      	ldr	r2, [pc, #344]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017b4:	4b53      	ldr	r3, [pc, #332]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 80017b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ba:	4a52      	ldr	r2, [pc, #328]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 80017bc:	f023 0304 	bic.w	r3, r3, #4
 80017c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d016      	beq.n	80017fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff faba 	bl	8000d44 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017d2:	e00a      	b.n	80017ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d4:	f7ff fab6 	bl	8000d44 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e138      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ea:	4b46      	ldr	r3, [pc, #280]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 80017ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0ed      	beq.n	80017d4 <HAL_RCC_OscConfig+0x388>
 80017f8:	e015      	b.n	8001826 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fa:	f7ff faa3 	bl	8000d44 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001800:	e00a      	b.n	8001818 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001802:	f7ff fa9f 	bl	8000d44 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001810:	4293      	cmp	r3, r2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e121      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001818:	4b3a      	ldr	r3, [pc, #232]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 800181a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1ed      	bne.n	8001802 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001826:	7ffb      	ldrb	r3, [r7, #31]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d105      	bne.n	8001838 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800182c:	4b35      	ldr	r3, [pc, #212]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 800182e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001830:	4a34      	ldr	r2, [pc, #208]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 8001832:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001836:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0320 	and.w	r3, r3, #32
 8001840:	2b00      	cmp	r3, #0
 8001842:	d03c      	beq.n	80018be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d01c      	beq.n	8001886 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800184c:	4b2d      	ldr	r3, [pc, #180]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 800184e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001852:	4a2c      	ldr	r2, [pc, #176]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185c:	f7ff fa72 	bl	8000d44 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001864:	f7ff fa6e 	bl	8000d44 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e0f2      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001876:	4b23      	ldr	r3, [pc, #140]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 8001878:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0ef      	beq.n	8001864 <HAL_RCC_OscConfig+0x418>
 8001884:	e01b      	b.n	80018be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001886:	4b1f      	ldr	r3, [pc, #124]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 8001888:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800188c:	4a1d      	ldr	r2, [pc, #116]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 800188e:	f023 0301 	bic.w	r3, r3, #1
 8001892:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001896:	f7ff fa55 	bl	8000d44 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800189e:	f7ff fa51 	bl	8000d44 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e0d5      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018b0:	4b14      	ldr	r3, [pc, #80]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 80018b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1ef      	bne.n	800189e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 80c9 	beq.w	8001a5a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 030c 	and.w	r3, r3, #12
 80018d0:	2b0c      	cmp	r3, #12
 80018d2:	f000 8083 	beq.w	80019dc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d15e      	bne.n	800199c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018de:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a08      	ldr	r2, [pc, #32]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 80018e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	f7ff fa2b 	bl	8000d44 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f0:	e00c      	b.n	800190c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f2:	f7ff fa27 	bl	8000d44 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d905      	bls.n	800190c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e0ab      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
 8001904:	40021000 	.word	0x40021000
 8001908:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190c:	4b55      	ldr	r3, [pc, #340]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1ec      	bne.n	80018f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001918:	4b52      	ldr	r3, [pc, #328]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	4b52      	ldr	r3, [pc, #328]	@ (8001a68 <HAL_RCC_OscConfig+0x61c>)
 800191e:	4013      	ands	r3, r2
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6a11      	ldr	r1, [r2, #32]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001928:	3a01      	subs	r2, #1
 800192a:	0112      	lsls	r2, r2, #4
 800192c:	4311      	orrs	r1, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001932:	0212      	lsls	r2, r2, #8
 8001934:	4311      	orrs	r1, r2
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800193a:	0852      	lsrs	r2, r2, #1
 800193c:	3a01      	subs	r2, #1
 800193e:	0552      	lsls	r2, r2, #21
 8001940:	4311      	orrs	r1, r2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001946:	0852      	lsrs	r2, r2, #1
 8001948:	3a01      	subs	r2, #1
 800194a:	0652      	lsls	r2, r2, #25
 800194c:	4311      	orrs	r1, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001952:	06d2      	lsls	r2, r2, #27
 8001954:	430a      	orrs	r2, r1
 8001956:	4943      	ldr	r1, [pc, #268]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 8001958:	4313      	orrs	r3, r2
 800195a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800195c:	4b41      	ldr	r3, [pc, #260]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a40      	ldr	r2, [pc, #256]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 8001962:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001966:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001968:	4b3e      	ldr	r3, [pc, #248]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4a3d      	ldr	r2, [pc, #244]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001972:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff f9e6 	bl	8000d44 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff f9e2 	bl	8000d44 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e066      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198e:	4b35      	ldr	r3, [pc, #212]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x530>
 800199a:	e05e      	b.n	8001a5a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199c:	4b31      	ldr	r3, [pc, #196]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a30      	ldr	r2, [pc, #192]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 80019a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a8:	f7ff f9cc 	bl	8000d44 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b0:	f7ff f9c8 	bl	8000d44 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e04c      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c2:	4b28      	ldr	r3, [pc, #160]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80019ce:	4b25      	ldr	r3, [pc, #148]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	4924      	ldr	r1, [pc, #144]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 80019d4:	4b25      	ldr	r3, [pc, #148]	@ (8001a6c <HAL_RCC_OscConfig+0x620>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	60cb      	str	r3, [r1, #12]
 80019da:	e03e      	b.n	8001a5a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e039      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80019e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f003 0203 	and.w	r2, r3, #3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d12c      	bne.n	8001a56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a06:	3b01      	subs	r3, #1
 8001a08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d123      	bne.n	8001a56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a18:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d11b      	bne.n	8001a56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a28:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d113      	bne.n	8001a56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a38:	085b      	lsrs	r3, r3, #1
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d109      	bne.n	8001a56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a4c:	085b      	lsrs	r3, r3, #1
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d001      	beq.n	8001a5a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3720      	adds	r7, #32
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021000 	.word	0x40021000
 8001a68:	019f800c 	.word	0x019f800c
 8001a6c:	feeefffc 	.word	0xfeeefffc

08001a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e11e      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a88:	4b91      	ldr	r3, [pc, #580]	@ (8001cd0 <HAL_RCC_ClockConfig+0x260>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 030f 	and.w	r3, r3, #15
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d910      	bls.n	8001ab8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b8e      	ldr	r3, [pc, #568]	@ (8001cd0 <HAL_RCC_ClockConfig+0x260>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 020f 	bic.w	r2, r3, #15
 8001a9e:	498c      	ldr	r1, [pc, #560]	@ (8001cd0 <HAL_RCC_ClockConfig+0x260>)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	4b8a      	ldr	r3, [pc, #552]	@ (8001cd0 <HAL_RCC_ClockConfig+0x260>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e106      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d073      	beq.n	8001bac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d129      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001acc:	4b81      	ldr	r3, [pc, #516]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0f4      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001adc:	f000 f99e 	bl	8001e1c <RCC_GetSysClockFreqFromPLLSource>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4a7c      	ldr	r2, [pc, #496]	@ (8001cd8 <HAL_RCC_ClockConfig+0x268>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d93f      	bls.n	8001b6a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001aea:	4b7a      	ldr	r3, [pc, #488]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d009      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d033      	beq.n	8001b6a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d12f      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b0a:	4b72      	ldr	r3, [pc, #456]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b12:	4a70      	ldr	r2, [pc, #448]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b1a:	2380      	movs	r3, #128	@ 0x80
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	e024      	b.n	8001b6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d107      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b28:	4b6a      	ldr	r3, [pc, #424]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d109      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0c6      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b38:	4b66      	ldr	r3, [pc, #408]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0be      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b48:	f000 f8ce 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001b4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4a61      	ldr	r2, [pc, #388]	@ (8001cd8 <HAL_RCC_ClockConfig+0x268>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d909      	bls.n	8001b6a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b56:	4b5f      	ldr	r3, [pc, #380]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b5e:	4a5d      	ldr	r2, [pc, #372]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b66:	2380      	movs	r3, #128	@ 0x80
 8001b68:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b6a:	4b5a      	ldr	r3, [pc, #360]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f023 0203 	bic.w	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4957      	ldr	r1, [pc, #348]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b7c:	f7ff f8e2 	bl	8000d44 <HAL_GetTick>
 8001b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b82:	e00a      	b.n	8001b9a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b84:	f7ff f8de 	bl	8000d44 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e095      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	4b4e      	ldr	r3, [pc, #312]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 020c 	and.w	r2, r3, #12
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d1eb      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d023      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc4:	4b43      	ldr	r3, [pc, #268]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4a42      	ldr	r2, [pc, #264]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001bca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d007      	beq.n	8001bec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001bdc:	4b3d      	ldr	r3, [pc, #244]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001be4:	4a3b      	ldr	r2, [pc, #236]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001be6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bec:	4b39      	ldr	r3, [pc, #228]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4936      	ldr	r1, [pc, #216]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	608b      	str	r3, [r1, #8]
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	2b80      	cmp	r3, #128	@ 0x80
 8001c04:	d105      	bne.n	8001c12 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c06:	4b33      	ldr	r3, [pc, #204]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	4a32      	ldr	r2, [pc, #200]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001c0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c10:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c12:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd0 <HAL_RCC_ClockConfig+0x260>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d21d      	bcs.n	8001c5c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c20:	4b2b      	ldr	r3, [pc, #172]	@ (8001cd0 <HAL_RCC_ClockConfig+0x260>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 020f 	bic.w	r2, r3, #15
 8001c28:	4929      	ldr	r1, [pc, #164]	@ (8001cd0 <HAL_RCC_ClockConfig+0x260>)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c30:	f7ff f888 	bl	8000d44 <HAL_GetTick>
 8001c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	e00a      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c38:	f7ff f884 	bl	8000d44 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e03b      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4e:	4b20      	ldr	r3, [pc, #128]	@ (8001cd0 <HAL_RCC_ClockConfig+0x260>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d1ed      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c68:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4917      	ldr	r1, [pc, #92]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d009      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c86:	4b13      	ldr	r3, [pc, #76]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	490f      	ldr	r1, [pc, #60]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c9a:	f000 f825 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	490c      	ldr	r1, [pc, #48]	@ (8001cdc <HAL_RCC_ClockConfig+0x26c>)
 8001cac:	5ccb      	ldrb	r3, [r1, r3]
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce0 <HAL_RCC_ClockConfig+0x270>)
 8001cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001cba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce4 <HAL_RCC_ClockConfig+0x274>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe fff4 	bl	8000cac <HAL_InitTick>
 8001cc4:	4603      	mov	r3, r0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40022000 	.word	0x40022000
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	04c4b400 	.word	0x04c4b400
 8001cdc:	08006830 	.word	0x08006830
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	20000004 	.word	0x20000004

08001ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cee:	4b2c      	ldr	r3, [pc, #176]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d102      	bne.n	8001d00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	e047      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d00:	4b27      	ldr	r3, [pc, #156]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d102      	bne.n	8001d12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d0c:	4b26      	ldr	r3, [pc, #152]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	e03e      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d12:	4b23      	ldr	r3, [pc, #140]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	d136      	bne.n	8001d8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d1e:	4b20      	ldr	r3, [pc, #128]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d28:	4b1d      	ldr	r3, [pc, #116]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3301      	adds	r3, #1
 8001d34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d10c      	bne.n	8001d56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d3c:	4a1a      	ldr	r2, [pc, #104]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d44:	4a16      	ldr	r2, [pc, #88]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d46:	68d2      	ldr	r2, [r2, #12]
 8001d48:	0a12      	lsrs	r2, r2, #8
 8001d4a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
 8001d52:	617b      	str	r3, [r7, #20]
      break;
 8001d54:	e00c      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d56:	4a13      	ldr	r2, [pc, #76]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5e:	4a10      	ldr	r2, [pc, #64]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d60:	68d2      	ldr	r2, [r2, #12]
 8001d62:	0a12      	lsrs	r2, r2, #8
 8001d64:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d68:	fb02 f303 	mul.w	r3, r2, r3
 8001d6c:	617b      	str	r3, [r7, #20]
      break;
 8001d6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d70:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	0e5b      	lsrs	r3, r3, #25
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	e001      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d90:	693b      	ldr	r3, [r7, #16]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	371c      	adds	r7, #28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	00f42400 	.word	0x00f42400
 8001da8:	007a1200 	.word	0x007a1200

08001dac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db0:	4b03      	ldr	r3, [pc, #12]	@ (8001dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000000 	.word	0x20000000

08001dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dc8:	f7ff fff0 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	0a1b      	lsrs	r3, r3, #8
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	4904      	ldr	r1, [pc, #16]	@ (8001dec <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dda:	5ccb      	ldrb	r3, [r1, r3]
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	08006840 	.word	0x08006840

08001df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001df4:	f7ff ffda 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	0adb      	lsrs	r3, r3, #11
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4904      	ldr	r1, [pc, #16]	@ (8001e18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000
 8001e18:	08006840 	.word	0x08006840

08001e1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e22:	4b1e      	ldr	r3, [pc, #120]	@ (8001e9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	3301      	adds	r3, #1
 8001e38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d10c      	bne.n	8001e5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e40:	4a17      	ldr	r2, [pc, #92]	@ (8001ea0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e48:	4a14      	ldr	r2, [pc, #80]	@ (8001e9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e4a:	68d2      	ldr	r2, [r2, #12]
 8001e4c:	0a12      	lsrs	r2, r2, #8
 8001e4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	617b      	str	r3, [r7, #20]
    break;
 8001e58:	e00c      	b.n	8001e74 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e5a:	4a12      	ldr	r2, [pc, #72]	@ (8001ea4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4a0e      	ldr	r2, [pc, #56]	@ (8001e9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e64:	68d2      	ldr	r2, [r2, #12]
 8001e66:	0a12      	lsrs	r2, r2, #8
 8001e68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e6c:	fb02 f303 	mul.w	r3, r2, r3
 8001e70:	617b      	str	r3, [r7, #20]
    break;
 8001e72:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e74:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0e5b      	lsrs	r3, r3, #25
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e8e:	687b      	ldr	r3, [r7, #4]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	371c      	adds	r7, #28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	007a1200 	.word	0x007a1200
 8001ea4:	00f42400 	.word	0x00f42400

08001ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 8098 	beq.w	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eca:	4b43      	ldr	r3, [pc, #268]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10d      	bne.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	4b40      	ldr	r3, [pc, #256]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eda:	4a3f      	ldr	r2, [pc, #252]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001edc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ee2:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ef2:	4b3a      	ldr	r3, [pc, #232]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a39      	ldr	r2, [pc, #228]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001efc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001efe:	f7fe ff21 	bl	8000d44 <HAL_GetTick>
 8001f02:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f04:	e009      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f06:	f7fe ff1d 	bl	8000d44 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d902      	bls.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	74fb      	strb	r3, [r7, #19]
        break;
 8001f18:	e005      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f1a:	4b30      	ldr	r3, [pc, #192]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0ef      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001f26:	7cfb      	ldrb	r3, [r7, #19]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d159      	bne.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f36:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d01e      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d019      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f48:	4b23      	ldr	r3, [pc, #140]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f54:	4b20      	ldr	r3, [pc, #128]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f64:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f74:	4a18      	ldr	r2, [pc, #96]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d016      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7fe fedd 	bl	8000d44 <HAL_GetTick>
 8001f8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8c:	e00b      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7fe fed9 	bl	8000d44 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d902      	bls.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	74fb      	strb	r3, [r7, #19]
            break;
 8001fa4:	e006      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0ec      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001fb4:	7cfb      	ldrb	r3, [r7, #19]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10b      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fba:	4b07      	ldr	r3, [pc, #28]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc8:	4903      	ldr	r1, [pc, #12]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fd2:	7cfb      	ldrb	r3, [r7, #19]
 8001fd4:	74bb      	strb	r3, [r7, #18]
 8001fd6:	e005      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fe0:	7cfb      	ldrb	r3, [r7, #19]
 8001fe2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fe4:	7c7b      	ldrb	r3, [r7, #17]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d105      	bne.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fea:	4ba6      	ldr	r3, [pc, #664]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fee:	4aa5      	ldr	r2, [pc, #660]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ff0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ff4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002002:	4ba0      	ldr	r3, [pc, #640]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002008:	f023 0203 	bic.w	r2, r3, #3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	499c      	ldr	r1, [pc, #624]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002024:	4b97      	ldr	r3, [pc, #604]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202a:	f023 020c 	bic.w	r2, r3, #12
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4994      	ldr	r1, [pc, #592]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002046:	4b8f      	ldr	r3, [pc, #572]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	498b      	ldr	r1, [pc, #556]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002068:	4b86      	ldr	r3, [pc, #536]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	4983      	ldr	r1, [pc, #524]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800208a:	4b7e      	ldr	r3, [pc, #504]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002090:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	497a      	ldr	r1, [pc, #488]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ac:	4b75      	ldr	r3, [pc, #468]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	4972      	ldr	r1, [pc, #456]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	4969      	ldr	r1, [pc, #420]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020f0:	4b64      	ldr	r3, [pc, #400]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	4961      	ldr	r1, [pc, #388]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002112:	4b5c      	ldr	r3, [pc, #368]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002118:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002120:	4958      	ldr	r1, [pc, #352]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002130:	2b00      	cmp	r3, #0
 8002132:	d015      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002134:	4b53      	ldr	r3, [pc, #332]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002142:	4950      	ldr	r1, [pc, #320]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002152:	d105      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002154:	4b4b      	ldr	r3, [pc, #300]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4a4a      	ldr	r2, [pc, #296]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800215a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800215e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002168:	2b00      	cmp	r3, #0
 800216a:	d015      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800216c:	4b45      	ldr	r3, [pc, #276]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002172:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217a:	4942      	ldr	r1, [pc, #264]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002186:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800218a:	d105      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800218c:	4b3d      	ldr	r3, [pc, #244]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4a3c      	ldr	r2, [pc, #240]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002196:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d015      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021a4:	4b37      	ldr	r3, [pc, #220]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	4934      	ldr	r1, [pc, #208]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021c2:	d105      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d015      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021dc:	4b29      	ldr	r3, [pc, #164]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ea:	4926      	ldr	r1, [pc, #152]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021fa:	d105      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021fc:	4b21      	ldr	r3, [pc, #132]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a20      	ldr	r2, [pc, #128]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002202:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002206:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d015      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002214:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002222:	4918      	ldr	r1, [pc, #96]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800222e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002232:	d105      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002234:	4b13      	ldr	r3, [pc, #76]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4a12      	ldr	r2, [pc, #72]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800223a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800223e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d015      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800224c:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002252:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800225a:	490a      	ldr	r1, [pc, #40]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002266:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800226a:	d105      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800226c:	4b05      	ldr	r3, [pc, #20]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4a04      	ldr	r2, [pc, #16]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002272:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002276:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002278:	7cbb      	ldrb	r3, [r7, #18]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000

08002288 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e042      	b.n	8002320 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d106      	bne.n	80022b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7fe fc61 	bl	8000b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2224      	movs	r2, #36	@ 0x24
 80022b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fb82 	bl	80029dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f8b3 	bl	8002444 <UART_SetConfig>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e01b      	b.n	8002320 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002306:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 fc01 	bl	8002b20 <UART_CheckIdleState>
 800231e:	4603      	mov	r3, r0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	@ 0x28
 800232c:	af02      	add	r7, sp, #8
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	4613      	mov	r3, r2
 8002336:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800233e:	2b20      	cmp	r3, #32
 8002340:	d17b      	bne.n	800243a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <HAL_UART_Transmit+0x26>
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e074      	b.n	800243c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2221      	movs	r2, #33	@ 0x21
 800235e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002362:	f7fe fcef 	bl	8000d44 <HAL_GetTick>
 8002366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	88fa      	ldrh	r2, [r7, #6]
 800236c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	88fa      	ldrh	r2, [r7, #6]
 8002374:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002380:	d108      	bne.n	8002394 <HAL_UART_Transmit+0x6c>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d104      	bne.n	8002394 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	e003      	b.n	800239c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002398:	2300      	movs	r3, #0
 800239a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800239c:	e030      	b.n	8002400 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2200      	movs	r2, #0
 80023a6:	2180      	movs	r1, #128	@ 0x80
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 fc63 	bl	8002c74 <UART_WaitOnFlagUntilTimeout>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e03d      	b.n	800243c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10b      	bne.n	80023de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	3302      	adds	r3, #2
 80023da:	61bb      	str	r3, [r7, #24]
 80023dc:	e007      	b.n	80023ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	781a      	ldrb	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	3301      	adds	r3, #1
 80023ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002406:	b29b      	uxth	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1c8      	bne.n	800239e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2200      	movs	r2, #0
 8002414:	2140      	movs	r1, #64	@ 0x40
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 fc2c 	bl	8002c74 <UART_WaitOnFlagUntilTimeout>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d005      	beq.n	800242e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2220      	movs	r2, #32
 8002426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e006      	b.n	800243c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2220      	movs	r2, #32
 8002432:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e000      	b.n	800243c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800243a:	2302      	movs	r3, #2
  }
}
 800243c:	4618      	mov	r0, r3
 800243e:	3720      	adds	r7, #32
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002448:	b08c      	sub	sp, #48	@ 0x30
 800244a:	af00      	add	r7, sp, #0
 800244c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	431a      	orrs	r2, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	431a      	orrs	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	4313      	orrs	r3, r2
 800246a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	4bab      	ldr	r3, [pc, #684]	@ (8002720 <UART_SetConfig+0x2dc>)
 8002474:	4013      	ands	r3, r2
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800247c:	430b      	orrs	r3, r1
 800247e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4aa0      	ldr	r2, [pc, #640]	@ (8002724 <UART_SetConfig+0x2e0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d004      	beq.n	80024b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024ac:	4313      	orrs	r3, r2
 80024ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80024ba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80024c4:	430b      	orrs	r3, r1
 80024c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ce:	f023 010f 	bic.w	r1, r3, #15
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a91      	ldr	r2, [pc, #580]	@ (8002728 <UART_SetConfig+0x2e4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d125      	bne.n	8002534 <UART_SetConfig+0xf0>
 80024e8:	4b90      	ldr	r3, [pc, #576]	@ (800272c <UART_SetConfig+0x2e8>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d81a      	bhi.n	800252c <UART_SetConfig+0xe8>
 80024f6:	a201      	add	r2, pc, #4	@ (adr r2, 80024fc <UART_SetConfig+0xb8>)
 80024f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fc:	0800250d 	.word	0x0800250d
 8002500:	0800251d 	.word	0x0800251d
 8002504:	08002515 	.word	0x08002515
 8002508:	08002525 	.word	0x08002525
 800250c:	2301      	movs	r3, #1
 800250e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002512:	e0d6      	b.n	80026c2 <UART_SetConfig+0x27e>
 8002514:	2302      	movs	r3, #2
 8002516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800251a:	e0d2      	b.n	80026c2 <UART_SetConfig+0x27e>
 800251c:	2304      	movs	r3, #4
 800251e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002522:	e0ce      	b.n	80026c2 <UART_SetConfig+0x27e>
 8002524:	2308      	movs	r3, #8
 8002526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800252a:	e0ca      	b.n	80026c2 <UART_SetConfig+0x27e>
 800252c:	2310      	movs	r3, #16
 800252e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002532:	e0c6      	b.n	80026c2 <UART_SetConfig+0x27e>
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a7d      	ldr	r2, [pc, #500]	@ (8002730 <UART_SetConfig+0x2ec>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d138      	bne.n	80025b0 <UART_SetConfig+0x16c>
 800253e:	4b7b      	ldr	r3, [pc, #492]	@ (800272c <UART_SetConfig+0x2e8>)
 8002540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002544:	f003 030c 	and.w	r3, r3, #12
 8002548:	2b0c      	cmp	r3, #12
 800254a:	d82d      	bhi.n	80025a8 <UART_SetConfig+0x164>
 800254c:	a201      	add	r2, pc, #4	@ (adr r2, 8002554 <UART_SetConfig+0x110>)
 800254e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002552:	bf00      	nop
 8002554:	08002589 	.word	0x08002589
 8002558:	080025a9 	.word	0x080025a9
 800255c:	080025a9 	.word	0x080025a9
 8002560:	080025a9 	.word	0x080025a9
 8002564:	08002599 	.word	0x08002599
 8002568:	080025a9 	.word	0x080025a9
 800256c:	080025a9 	.word	0x080025a9
 8002570:	080025a9 	.word	0x080025a9
 8002574:	08002591 	.word	0x08002591
 8002578:	080025a9 	.word	0x080025a9
 800257c:	080025a9 	.word	0x080025a9
 8002580:	080025a9 	.word	0x080025a9
 8002584:	080025a1 	.word	0x080025a1
 8002588:	2300      	movs	r3, #0
 800258a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800258e:	e098      	b.n	80026c2 <UART_SetConfig+0x27e>
 8002590:	2302      	movs	r3, #2
 8002592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002596:	e094      	b.n	80026c2 <UART_SetConfig+0x27e>
 8002598:	2304      	movs	r3, #4
 800259a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800259e:	e090      	b.n	80026c2 <UART_SetConfig+0x27e>
 80025a0:	2308      	movs	r3, #8
 80025a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025a6:	e08c      	b.n	80026c2 <UART_SetConfig+0x27e>
 80025a8:	2310      	movs	r3, #16
 80025aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025ae:	e088      	b.n	80026c2 <UART_SetConfig+0x27e>
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a5f      	ldr	r2, [pc, #380]	@ (8002734 <UART_SetConfig+0x2f0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d125      	bne.n	8002606 <UART_SetConfig+0x1c2>
 80025ba:	4b5c      	ldr	r3, [pc, #368]	@ (800272c <UART_SetConfig+0x2e8>)
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80025c4:	2b30      	cmp	r3, #48	@ 0x30
 80025c6:	d016      	beq.n	80025f6 <UART_SetConfig+0x1b2>
 80025c8:	2b30      	cmp	r3, #48	@ 0x30
 80025ca:	d818      	bhi.n	80025fe <UART_SetConfig+0x1ba>
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d00a      	beq.n	80025e6 <UART_SetConfig+0x1a2>
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d814      	bhi.n	80025fe <UART_SetConfig+0x1ba>
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <UART_SetConfig+0x19a>
 80025d8:	2b10      	cmp	r3, #16
 80025da:	d008      	beq.n	80025ee <UART_SetConfig+0x1aa>
 80025dc:	e00f      	b.n	80025fe <UART_SetConfig+0x1ba>
 80025de:	2300      	movs	r3, #0
 80025e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025e4:	e06d      	b.n	80026c2 <UART_SetConfig+0x27e>
 80025e6:	2302      	movs	r3, #2
 80025e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025ec:	e069      	b.n	80026c2 <UART_SetConfig+0x27e>
 80025ee:	2304      	movs	r3, #4
 80025f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025f4:	e065      	b.n	80026c2 <UART_SetConfig+0x27e>
 80025f6:	2308      	movs	r3, #8
 80025f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025fc:	e061      	b.n	80026c2 <UART_SetConfig+0x27e>
 80025fe:	2310      	movs	r3, #16
 8002600:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002604:	e05d      	b.n	80026c2 <UART_SetConfig+0x27e>
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a4b      	ldr	r2, [pc, #300]	@ (8002738 <UART_SetConfig+0x2f4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d125      	bne.n	800265c <UART_SetConfig+0x218>
 8002610:	4b46      	ldr	r3, [pc, #280]	@ (800272c <UART_SetConfig+0x2e8>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002616:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800261a:	2bc0      	cmp	r3, #192	@ 0xc0
 800261c:	d016      	beq.n	800264c <UART_SetConfig+0x208>
 800261e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002620:	d818      	bhi.n	8002654 <UART_SetConfig+0x210>
 8002622:	2b80      	cmp	r3, #128	@ 0x80
 8002624:	d00a      	beq.n	800263c <UART_SetConfig+0x1f8>
 8002626:	2b80      	cmp	r3, #128	@ 0x80
 8002628:	d814      	bhi.n	8002654 <UART_SetConfig+0x210>
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <UART_SetConfig+0x1f0>
 800262e:	2b40      	cmp	r3, #64	@ 0x40
 8002630:	d008      	beq.n	8002644 <UART_SetConfig+0x200>
 8002632:	e00f      	b.n	8002654 <UART_SetConfig+0x210>
 8002634:	2300      	movs	r3, #0
 8002636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800263a:	e042      	b.n	80026c2 <UART_SetConfig+0x27e>
 800263c:	2302      	movs	r3, #2
 800263e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002642:	e03e      	b.n	80026c2 <UART_SetConfig+0x27e>
 8002644:	2304      	movs	r3, #4
 8002646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800264a:	e03a      	b.n	80026c2 <UART_SetConfig+0x27e>
 800264c:	2308      	movs	r3, #8
 800264e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002652:	e036      	b.n	80026c2 <UART_SetConfig+0x27e>
 8002654:	2310      	movs	r3, #16
 8002656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800265a:	e032      	b.n	80026c2 <UART_SetConfig+0x27e>
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a30      	ldr	r2, [pc, #192]	@ (8002724 <UART_SetConfig+0x2e0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d12a      	bne.n	80026bc <UART_SetConfig+0x278>
 8002666:	4b31      	ldr	r3, [pc, #196]	@ (800272c <UART_SetConfig+0x2e8>)
 8002668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002670:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002674:	d01a      	beq.n	80026ac <UART_SetConfig+0x268>
 8002676:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800267a:	d81b      	bhi.n	80026b4 <UART_SetConfig+0x270>
 800267c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002680:	d00c      	beq.n	800269c <UART_SetConfig+0x258>
 8002682:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002686:	d815      	bhi.n	80026b4 <UART_SetConfig+0x270>
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <UART_SetConfig+0x250>
 800268c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002690:	d008      	beq.n	80026a4 <UART_SetConfig+0x260>
 8002692:	e00f      	b.n	80026b4 <UART_SetConfig+0x270>
 8002694:	2300      	movs	r3, #0
 8002696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800269a:	e012      	b.n	80026c2 <UART_SetConfig+0x27e>
 800269c:	2302      	movs	r3, #2
 800269e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026a2:	e00e      	b.n	80026c2 <UART_SetConfig+0x27e>
 80026a4:	2304      	movs	r3, #4
 80026a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026aa:	e00a      	b.n	80026c2 <UART_SetConfig+0x27e>
 80026ac:	2308      	movs	r3, #8
 80026ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026b2:	e006      	b.n	80026c2 <UART_SetConfig+0x27e>
 80026b4:	2310      	movs	r3, #16
 80026b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80026ba:	e002      	b.n	80026c2 <UART_SetConfig+0x27e>
 80026bc:	2310      	movs	r3, #16
 80026be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a17      	ldr	r2, [pc, #92]	@ (8002724 <UART_SetConfig+0x2e0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	f040 80a8 	bne.w	800281e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80026ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d834      	bhi.n	8002740 <UART_SetConfig+0x2fc>
 80026d6:	a201      	add	r2, pc, #4	@ (adr r2, 80026dc <UART_SetConfig+0x298>)
 80026d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026dc:	08002701 	.word	0x08002701
 80026e0:	08002741 	.word	0x08002741
 80026e4:	08002709 	.word	0x08002709
 80026e8:	08002741 	.word	0x08002741
 80026ec:	0800270f 	.word	0x0800270f
 80026f0:	08002741 	.word	0x08002741
 80026f4:	08002741 	.word	0x08002741
 80026f8:	08002741 	.word	0x08002741
 80026fc:	08002717 	.word	0x08002717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002700:	f7ff fb60 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8002704:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002706:	e021      	b.n	800274c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002708:	4b0c      	ldr	r3, [pc, #48]	@ (800273c <UART_SetConfig+0x2f8>)
 800270a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800270c:	e01e      	b.n	800274c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800270e:	f7ff faeb 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8002712:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002714:	e01a      	b.n	800274c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800271c:	e016      	b.n	800274c <UART_SetConfig+0x308>
 800271e:	bf00      	nop
 8002720:	cfff69f3 	.word	0xcfff69f3
 8002724:	40008000 	.word	0x40008000
 8002728:	40013800 	.word	0x40013800
 800272c:	40021000 	.word	0x40021000
 8002730:	40004400 	.word	0x40004400
 8002734:	40004800 	.word	0x40004800
 8002738:	40004c00 	.word	0x40004c00
 800273c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800274a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 812a 	beq.w	80029a8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002758:	4a9e      	ldr	r2, [pc, #632]	@ (80029d4 <UART_SetConfig+0x590>)
 800275a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800275e:	461a      	mov	r2, r3
 8002760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002762:	fbb3 f3f2 	udiv	r3, r3, r2
 8002766:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4413      	add	r3, r2
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	429a      	cmp	r2, r3
 8002776:	d305      	bcc.n	8002784 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	429a      	cmp	r2, r3
 8002782:	d903      	bls.n	800278c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800278a:	e10d      	b.n	80029a8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278e:	2200      	movs	r2, #0
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	60fa      	str	r2, [r7, #12]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002798:	4a8e      	ldr	r2, [pc, #568]	@ (80029d4 <UART_SetConfig+0x590>)
 800279a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2200      	movs	r2, #0
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027ae:	f7fd fd37 	bl	8000220 <__aeabi_uldivmod>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4610      	mov	r0, r2
 80027b8:	4619      	mov	r1, r3
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	020b      	lsls	r3, r1, #8
 80027c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80027c8:	0202      	lsls	r2, r0, #8
 80027ca:	6979      	ldr	r1, [r7, #20]
 80027cc:	6849      	ldr	r1, [r1, #4]
 80027ce:	0849      	lsrs	r1, r1, #1
 80027d0:	2000      	movs	r0, #0
 80027d2:	460c      	mov	r4, r1
 80027d4:	4605      	mov	r5, r0
 80027d6:	eb12 0804 	adds.w	r8, r2, r4
 80027da:	eb43 0905 	adc.w	r9, r3, r5
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	469a      	mov	sl, r3
 80027e6:	4693      	mov	fp, r2
 80027e8:	4652      	mov	r2, sl
 80027ea:	465b      	mov	r3, fp
 80027ec:	4640      	mov	r0, r8
 80027ee:	4649      	mov	r1, r9
 80027f0:	f7fd fd16 	bl	8000220 <__aeabi_uldivmod>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4613      	mov	r3, r2
 80027fa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002802:	d308      	bcc.n	8002816 <UART_SetConfig+0x3d2>
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800280a:	d204      	bcs.n	8002816 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6a3a      	ldr	r2, [r7, #32]
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	e0c8      	b.n	80029a8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800281c:	e0c4      	b.n	80029a8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002826:	d167      	bne.n	80028f8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002828:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800282c:	2b08      	cmp	r3, #8
 800282e:	d828      	bhi.n	8002882 <UART_SetConfig+0x43e>
 8002830:	a201      	add	r2, pc, #4	@ (adr r2, 8002838 <UART_SetConfig+0x3f4>)
 8002832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002836:	bf00      	nop
 8002838:	0800285d 	.word	0x0800285d
 800283c:	08002865 	.word	0x08002865
 8002840:	0800286d 	.word	0x0800286d
 8002844:	08002883 	.word	0x08002883
 8002848:	08002873 	.word	0x08002873
 800284c:	08002883 	.word	0x08002883
 8002850:	08002883 	.word	0x08002883
 8002854:	08002883 	.word	0x08002883
 8002858:	0800287b 	.word	0x0800287b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800285c:	f7ff fab2 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8002860:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002862:	e014      	b.n	800288e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002864:	f7ff fac4 	bl	8001df0 <HAL_RCC_GetPCLK2Freq>
 8002868:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800286a:	e010      	b.n	800288e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800286c:	4b5a      	ldr	r3, [pc, #360]	@ (80029d8 <UART_SetConfig+0x594>)
 800286e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002870:	e00d      	b.n	800288e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002872:	f7ff fa39 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8002876:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002878:	e009      	b.n	800288e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800287a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800287e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002880:	e005      	b.n	800288e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800288c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800288e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 8089 	beq.w	80029a8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289a:	4a4e      	ldr	r2, [pc, #312]	@ (80029d4 <UART_SetConfig+0x590>)
 800289c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028a0:	461a      	mov	r2, r3
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80028a8:	005a      	lsls	r2, r3, #1
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	085b      	lsrs	r3, r3, #1
 80028b0:	441a      	add	r2, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	2b0f      	cmp	r3, #15
 80028c0:	d916      	bls.n	80028f0 <UART_SetConfig+0x4ac>
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028c8:	d212      	bcs.n	80028f0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	f023 030f 	bic.w	r3, r3, #15
 80028d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	085b      	lsrs	r3, r3, #1
 80028d8:	b29b      	uxth	r3, r3
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	b29a      	uxth	r2, r3
 80028e0:	8bfb      	ldrh	r3, [r7, #30]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	8bfa      	ldrh	r2, [r7, #30]
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	e05b      	b.n	80029a8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80028f6:	e057      	b.n	80029a8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d828      	bhi.n	8002952 <UART_SetConfig+0x50e>
 8002900:	a201      	add	r2, pc, #4	@ (adr r2, 8002908 <UART_SetConfig+0x4c4>)
 8002902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002906:	bf00      	nop
 8002908:	0800292d 	.word	0x0800292d
 800290c:	08002935 	.word	0x08002935
 8002910:	0800293d 	.word	0x0800293d
 8002914:	08002953 	.word	0x08002953
 8002918:	08002943 	.word	0x08002943
 800291c:	08002953 	.word	0x08002953
 8002920:	08002953 	.word	0x08002953
 8002924:	08002953 	.word	0x08002953
 8002928:	0800294b 	.word	0x0800294b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800292c:	f7ff fa4a 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8002930:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002932:	e014      	b.n	800295e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002934:	f7ff fa5c 	bl	8001df0 <HAL_RCC_GetPCLK2Freq>
 8002938:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800293a:	e010      	b.n	800295e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800293c:	4b26      	ldr	r3, [pc, #152]	@ (80029d8 <UART_SetConfig+0x594>)
 800293e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002940:	e00d      	b.n	800295e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002942:	f7ff f9d1 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8002946:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002948:	e009      	b.n	800295e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800294a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002950:	e005      	b.n	800295e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800295c:	bf00      	nop
    }

    if (pclk != 0U)
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	2b00      	cmp	r3, #0
 8002962:	d021      	beq.n	80029a8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	4a1a      	ldr	r2, [pc, #104]	@ (80029d4 <UART_SetConfig+0x590>)
 800296a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800296e:	461a      	mov	r2, r3
 8002970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002972:	fbb3 f2f2 	udiv	r2, r3, r2
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	441a      	add	r2, r3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	2b0f      	cmp	r3, #15
 800298c:	d909      	bls.n	80029a2 <UART_SetConfig+0x55e>
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002994:	d205      	bcs.n	80029a2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	b29a      	uxth	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60da      	str	r2, [r3, #12]
 80029a0:	e002      	b.n	80029a8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2200      	movs	r2, #0
 80029bc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2200      	movs	r2, #0
 80029c2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80029c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3730      	adds	r7, #48	@ 0x30
 80029cc:	46bd      	mov	sp, r7
 80029ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029d2:	bf00      	nop
 80029d4:	08006848 	.word	0x08006848
 80029d8:	00f42400 	.word	0x00f42400

080029dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d01a      	beq.n	8002af2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ada:	d10a      	bne.n	8002af2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	605a      	str	r2, [r3, #4]
  }
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b098      	sub	sp, #96	@ 0x60
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b30:	f7fe f908 	bl	8000d44 <HAL_GetTick>
 8002b34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d12f      	bne.n	8002ba4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f88e 	bl	8002c74 <UART_WaitOnFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d022      	beq.n	8002ba4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b66:	e853 3f00 	ldrex	r3, [r3]
 8002b6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b72:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b7e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b84:	e841 2300 	strex	r3, r2, [r1]
 8002b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1e6      	bne.n	8002b5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e063      	b.n	8002c6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d149      	bne.n	8002c46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bb2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f857 	bl	8002c74 <UART_WaitOnFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d03c      	beq.n	8002c46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd4:	e853 3f00 	ldrex	r3, [r3]
 8002bd8:	623b      	str	r3, [r7, #32]
   return(result);
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bea:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bf2:	e841 2300 	strex	r3, r2, [r1]
 8002bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1e6      	bne.n	8002bcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3308      	adds	r3, #8
 8002c04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	e853 3f00 	ldrex	r3, [r3]
 8002c0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3308      	adds	r3, #8
 8002c1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c1e:	61fa      	str	r2, [r7, #28]
 8002c20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c22:	69b9      	ldr	r1, [r7, #24]
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	e841 2300 	strex	r3, r2, [r1]
 8002c2a:	617b      	str	r3, [r7, #20]
   return(result);
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1e5      	bne.n	8002bfe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2220      	movs	r2, #32
 8002c36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e012      	b.n	8002c6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3758      	adds	r7, #88	@ 0x58
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	4613      	mov	r3, r2
 8002c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c84:	e04f      	b.n	8002d26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8c:	d04b      	beq.n	8002d26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8e:	f7fe f859 	bl	8000d44 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d302      	bcc.n	8002ca4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e04e      	b.n	8002d46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d037      	beq.n	8002d26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b80      	cmp	r3, #128	@ 0x80
 8002cba:	d034      	beq.n	8002d26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b40      	cmp	r3, #64	@ 0x40
 8002cc0:	d031      	beq.n	8002d26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d110      	bne.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f838 	bl	8002d4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2208      	movs	r2, #8
 8002ce2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e029      	b.n	8002d46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d00:	d111      	bne.n	8002d26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f81e 	bl	8002d4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e00f      	b.n	8002d46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	69da      	ldr	r2, [r3, #28]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	bf0c      	ite	eq
 8002d36:	2301      	moveq	r3, #1
 8002d38:	2300      	movne	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d0a0      	beq.n	8002c86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b095      	sub	sp, #84	@ 0x54
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d5e:	e853 3f00 	ldrex	r3, [r3]
 8002d62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d74:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d76:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d7c:	e841 2300 	strex	r3, r2, [r1]
 8002d80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1e6      	bne.n	8002d56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3308      	adds	r3, #8
 8002d8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	e853 3f00 	ldrex	r3, [r3]
 8002d96:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d9e:	f023 0301 	bic.w	r3, r3, #1
 8002da2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3308      	adds	r3, #8
 8002daa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002dac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002db2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002db4:	e841 2300 	strex	r3, r2, [r1]
 8002db8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1e3      	bne.n	8002d88 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d118      	bne.n	8002dfa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	e853 3f00 	ldrex	r3, [r3]
 8002dd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f023 0310 	bic.w	r3, r3, #16
 8002ddc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002de6:	61bb      	str	r3, [r7, #24]
 8002de8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dea:	6979      	ldr	r1, [r7, #20]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	e841 2300 	strex	r3, r2, [r1]
 8002df2:	613b      	str	r3, [r7, #16]
   return(result);
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1e6      	bne.n	8002dc8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002e0e:	bf00      	nop
 8002e10:	3754      	adds	r7, #84	@ 0x54
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b085      	sub	sp, #20
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_UARTEx_DisableFifoMode+0x16>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e027      	b.n	8002e80 <HAL_UARTEx_DisableFifoMode+0x66>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2224      	movs	r2, #36	@ 0x24
 8002e3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8002e5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2220      	movs	r2, #32
 8002e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e02d      	b.n	8002f00 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2224      	movs	r2, #36	@ 0x24
 8002eb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f84f 	bl	8002f84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e02d      	b.n	8002f7c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2224      	movs	r2, #36	@ 0x24
 8002f2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f811 	bl	8002f84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d108      	bne.n	8002fa6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002fa4:	e031      	b.n	800300a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002fa6:	2308      	movs	r3, #8
 8002fa8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002faa:	2308      	movs	r3, #8
 8002fac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	0e5b      	lsrs	r3, r3, #25
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	0f5b      	lsrs	r3, r3, #29
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002fce:	7bbb      	ldrb	r3, [r7, #14]
 8002fd0:	7b3a      	ldrb	r2, [r7, #12]
 8002fd2:	4911      	ldr	r1, [pc, #68]	@ (8003018 <UARTEx_SetNbDataToProcess+0x94>)
 8002fd4:	5c8a      	ldrb	r2, [r1, r2]
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002fda:	7b3a      	ldrb	r2, [r7, #12]
 8002fdc:	490f      	ldr	r1, [pc, #60]	@ (800301c <UARTEx_SetNbDataToProcess+0x98>)
 8002fde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002fe0:	fb93 f3f2 	sdiv	r3, r3, r2
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	7b7a      	ldrb	r2, [r7, #13]
 8002ff0:	4909      	ldr	r1, [pc, #36]	@ (8003018 <UARTEx_SetNbDataToProcess+0x94>)
 8002ff2:	5c8a      	ldrb	r2, [r1, r2]
 8002ff4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002ff8:	7b7a      	ldrb	r2, [r7, #13]
 8002ffa:	4908      	ldr	r1, [pc, #32]	@ (800301c <UARTEx_SetNbDataToProcess+0x98>)
 8002ffc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002ffe:	fb93 f3f2 	sdiv	r3, r3, r2
 8003002:	b29a      	uxth	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800300a:	bf00      	nop
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	08006860 	.word	0x08006860
 800301c:	08006868 	.word	0x08006868

08003020 <__NVIC_SetPriority>:
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	6039      	str	r1, [r7, #0]
 800302a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003030:	2b00      	cmp	r3, #0
 8003032:	db0a      	blt.n	800304a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	b2da      	uxtb	r2, r3
 8003038:	490c      	ldr	r1, [pc, #48]	@ (800306c <__NVIC_SetPriority+0x4c>)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	0112      	lsls	r2, r2, #4
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	440b      	add	r3, r1
 8003044:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003048:	e00a      	b.n	8003060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	b2da      	uxtb	r2, r3
 800304e:	4908      	ldr	r1, [pc, #32]	@ (8003070 <__NVIC_SetPriority+0x50>)
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	3b04      	subs	r3, #4
 8003058:	0112      	lsls	r2, r2, #4
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	440b      	add	r3, r1
 800305e:	761a      	strb	r2, [r3, #24]
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000e100 	.word	0xe000e100
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003078:	2100      	movs	r1, #0
 800307a:	f06f 0004 	mvn.w	r0, #4
 800307e:	f7ff ffcf 	bl	8003020 <__NVIC_SetPriority>
#endif
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800308e:	f3ef 8305 	mrs	r3, IPSR
 8003092:	603b      	str	r3, [r7, #0]
  return(result);
 8003094:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800309a:	f06f 0305 	mvn.w	r3, #5
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	e00c      	b.n	80030bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80030a2:	4b0a      	ldr	r3, [pc, #40]	@ (80030cc <osKernelInitialize+0x44>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d105      	bne.n	80030b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80030aa:	4b08      	ldr	r3, [pc, #32]	@ (80030cc <osKernelInitialize+0x44>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	607b      	str	r3, [r7, #4]
 80030b4:	e002      	b.n	80030bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80030b6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80030bc:	687b      	ldr	r3, [r7, #4]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	20000134 	.word	0x20000134

080030d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030d6:	f3ef 8305 	mrs	r3, IPSR
 80030da:	603b      	str	r3, [r7, #0]
  return(result);
 80030dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80030e2:	f06f 0305 	mvn.w	r3, #5
 80030e6:	607b      	str	r3, [r7, #4]
 80030e8:	e010      	b.n	800310c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80030ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <osKernelStart+0x48>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d109      	bne.n	8003106 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80030f2:	f7ff ffbf 	bl	8003074 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80030f6:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <osKernelStart+0x48>)
 80030f8:	2202      	movs	r2, #2
 80030fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80030fc:	f001 f87a 	bl	80041f4 <vTaskStartScheduler>
      stat = osOK;
 8003100:	2300      	movs	r3, #0
 8003102:	607b      	str	r3, [r7, #4]
 8003104:	e002      	b.n	800310c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003106:	f04f 33ff 	mov.w	r3, #4294967295
 800310a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800310c:	687b      	ldr	r3, [r7, #4]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000134 	.word	0x20000134

0800311c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800311c:	b580      	push	{r7, lr}
 800311e:	b08e      	sub	sp, #56	@ 0x38
 8003120:	af04      	add	r7, sp, #16
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003128:	2300      	movs	r3, #0
 800312a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800312c:	f3ef 8305 	mrs	r3, IPSR
 8003130:	617b      	str	r3, [r7, #20]
  return(result);
 8003132:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003134:	2b00      	cmp	r3, #0
 8003136:	d17e      	bne.n	8003236 <osThreadNew+0x11a>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d07b      	beq.n	8003236 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800313e:	2380      	movs	r3, #128	@ 0x80
 8003140:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003142:	2318      	movs	r3, #24
 8003144:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003146:	2300      	movs	r3, #0
 8003148:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800314a:	f04f 33ff 	mov.w	r3, #4294967295
 800314e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d045      	beq.n	80031e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <osThreadNew+0x48>
        name = attr->name;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <osThreadNew+0x6e>
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	2b38      	cmp	r3, #56	@ 0x38
 800317c:	d805      	bhi.n	800318a <osThreadNew+0x6e>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <osThreadNew+0x72>
        return (NULL);
 800318a:	2300      	movs	r3, #0
 800318c:	e054      	b.n	8003238 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	089b      	lsrs	r3, r3, #2
 800319c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00e      	beq.n	80031c4 <osThreadNew+0xa8>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2b5b      	cmp	r3, #91	@ 0x5b
 80031ac:	d90a      	bls.n	80031c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d006      	beq.n	80031c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <osThreadNew+0xa8>
        mem = 1;
 80031be:	2301      	movs	r3, #1
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	e010      	b.n	80031e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10c      	bne.n	80031e6 <osThreadNew+0xca>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d108      	bne.n	80031e6 <osThreadNew+0xca>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d104      	bne.n	80031e6 <osThreadNew+0xca>
          mem = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	61bb      	str	r3, [r7, #24]
 80031e0:	e001      	b.n	80031e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d110      	bne.n	800320e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031f4:	9202      	str	r2, [sp, #8]
 80031f6:	9301      	str	r3, [sp, #4]
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	6a3a      	ldr	r2, [r7, #32]
 8003200:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 fe1a 	bl	8003e3c <xTaskCreateStatic>
 8003208:	4603      	mov	r3, r0
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	e013      	b.n	8003236 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d110      	bne.n	8003236 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	b29a      	uxth	r2, r3
 8003218:	f107 0310 	add.w	r3, r7, #16
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 fe68 	bl	8003efc <xTaskCreate>
 800322c:	4603      	mov	r3, r0
 800322e:	2b01      	cmp	r3, #1
 8003230:	d001      	beq.n	8003236 <osThreadNew+0x11a>
            hTask = NULL;
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003236:	693b      	ldr	r3, [r7, #16]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3728      	adds	r7, #40	@ 0x28
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003248:	f3ef 8305 	mrs	r3, IPSR
 800324c:	60bb      	str	r3, [r7, #8]
  return(result);
 800324e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <osDelay+0x1c>
    stat = osErrorISR;
 8003254:	f06f 0305 	mvn.w	r3, #5
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	e007      	b.n	800326c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 ff8e 	bl	8004188 <vTaskDelay>
    }
  }

  return (stat);
 800326c:	68fb      	ldr	r3, [r7, #12]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4a07      	ldr	r2, [pc, #28]	@ (80032a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003288:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	4a06      	ldr	r2, [pc, #24]	@ (80032a8 <vApplicationGetIdleTaskMemory+0x30>)
 800328e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2280      	movs	r2, #128	@ 0x80
 8003294:	601a      	str	r2, [r3, #0]
}
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	20000138 	.word	0x20000138
 80032a8:	20000194 	.word	0x20000194

080032ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4a07      	ldr	r2, [pc, #28]	@ (80032d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80032bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	4a06      	ldr	r2, [pc, #24]	@ (80032dc <vApplicationGetTimerTaskMemory+0x30>)
 80032c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032ca:	601a      	str	r2, [r3, #0]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	20000394 	.word	0x20000394
 80032dc:	200003f0 	.word	0x200003f0

080032e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f103 0208 	add.w	r2, r3, #8
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f04f 32ff 	mov.w	r2, #4294967295
 80032f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f103 0208 	add.w	r2, r3, #8
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f103 0208 	add.w	r2, r3, #8
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800333a:	b480      	push	{r7}
 800333c:	b085      	sub	sp, #20
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	601a      	str	r2, [r3, #0]
}
 8003376:	bf00      	nop
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003382:	b480      	push	{r7}
 8003384:	b085      	sub	sp, #20
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d103      	bne.n	80033a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	e00c      	b.n	80033bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3308      	adds	r3, #8
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	e002      	b.n	80033b0 <vListInsert+0x2e>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d2f6      	bcs.n	80033aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	601a      	str	r2, [r3, #0]
}
 80033e8:	bf00      	nop
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6892      	ldr	r2, [r2, #8]
 800340a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6852      	ldr	r2, [r2, #4]
 8003414:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	429a      	cmp	r2, r3
 800341e:	d103      	bne.n	8003428 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	1e5a      	subs	r2, r3, #1
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10b      	bne.n	8003474 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800345c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003460:	f383 8811 	msr	BASEPRI, r3
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800346e:	bf00      	nop
 8003470:	bf00      	nop
 8003472:	e7fd      	b.n	8003470 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003474:	f002 f9b0 	bl	80057d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003480:	68f9      	ldr	r1, [r7, #12]
 8003482:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003484:	fb01 f303 	mul.w	r3, r1, r3
 8003488:	441a      	add	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a4:	3b01      	subs	r3, #1
 80034a6:	68f9      	ldr	r1, [r7, #12]
 80034a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80034aa:	fb01 f303 	mul.w	r3, r1, r3
 80034ae:	441a      	add	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	22ff      	movs	r2, #255	@ 0xff
 80034b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	22ff      	movs	r2, #255	@ 0xff
 80034c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d114      	bne.n	80034f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d01a      	beq.n	8003508 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	3310      	adds	r3, #16
 80034d6:	4618      	mov	r0, r3
 80034d8:	f001 f91a 	bl	8004710 <xTaskRemoveFromEventList>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d012      	beq.n	8003508 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80034e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003518 <xQueueGenericReset+0xd0>)
 80034e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	e009      	b.n	8003508 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3310      	adds	r3, #16
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff fef1 	bl	80032e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	3324      	adds	r3, #36	@ 0x24
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff feec 	bl	80032e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003508:	f002 f998 	bl	800583c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800350c:	2301      	movs	r3, #1
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	e000ed04 	.word	0xe000ed04

0800351c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08e      	sub	sp, #56	@ 0x38
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10b      	bne.n	8003548 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003542:	bf00      	nop
 8003544:	bf00      	nop
 8003546:	e7fd      	b.n	8003544 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10b      	bne.n	8003566 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800354e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003552:	f383 8811 	msr	BASEPRI, r3
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003560:	bf00      	nop
 8003562:	bf00      	nop
 8003564:	e7fd      	b.n	8003562 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <xQueueGenericCreateStatic+0x56>
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <xQueueGenericCreateStatic+0x5a>
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <xQueueGenericCreateStatic+0x5c>
 8003576:	2300      	movs	r3, #0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10b      	bne.n	8003594 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800357c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003580:	f383 8811 	msr	BASEPRI, r3
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	623b      	str	r3, [r7, #32]
}
 800358e:	bf00      	nop
 8003590:	bf00      	nop
 8003592:	e7fd      	b.n	8003590 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d102      	bne.n	80035a0 <xQueueGenericCreateStatic+0x84>
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <xQueueGenericCreateStatic+0x88>
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <xQueueGenericCreateStatic+0x8a>
 80035a4:	2300      	movs	r3, #0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10b      	bne.n	80035c2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80035aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	61fb      	str	r3, [r7, #28]
}
 80035bc:	bf00      	nop
 80035be:	bf00      	nop
 80035c0:	e7fd      	b.n	80035be <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80035c2:	2350      	movs	r3, #80	@ 0x50
 80035c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b50      	cmp	r3, #80	@ 0x50
 80035ca:	d00b      	beq.n	80035e4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80035cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d0:	f383 8811 	msr	BASEPRI, r3
 80035d4:	f3bf 8f6f 	isb	sy
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	61bb      	str	r3, [r7, #24]
}
 80035de:	bf00      	nop
 80035e0:	bf00      	nop
 80035e2:	e7fd      	b.n	80035e0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80035e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80035ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00d      	beq.n	800360c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80035f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035f8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80035fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 f805 	bl	8003616 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800360c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800360e:	4618      	mov	r0, r3
 8003610:	3730      	adds	r7, #48	@ 0x30
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d103      	bne.n	8003632 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	e002      	b.n	8003638 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003644:	2101      	movs	r1, #1
 8003646:	69b8      	ldr	r0, [r7, #24]
 8003648:	f7ff fefe 	bl	8003448 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	78fa      	ldrb	r2, [r7, #3]
 8003650:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003654:	bf00      	nop
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08e      	sub	sp, #56	@ 0x38
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800366a:	2300      	movs	r3, #0
 800366c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10b      	bne.n	8003690 <xQueueGenericSend+0x34>
	__asm volatile
 8003678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800368a:	bf00      	nop
 800368c:	bf00      	nop
 800368e:	e7fd      	b.n	800368c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d103      	bne.n	800369e <xQueueGenericSend+0x42>
 8003696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <xQueueGenericSend+0x46>
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <xQueueGenericSend+0x48>
 80036a2:	2300      	movs	r3, #0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10b      	bne.n	80036c0 <xQueueGenericSend+0x64>
	__asm volatile
 80036a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ac:	f383 8811 	msr	BASEPRI, r3
 80036b0:	f3bf 8f6f 	isb	sy
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80036ba:	bf00      	nop
 80036bc:	bf00      	nop
 80036be:	e7fd      	b.n	80036bc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d103      	bne.n	80036ce <xQueueGenericSend+0x72>
 80036c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <xQueueGenericSend+0x76>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <xQueueGenericSend+0x78>
 80036d2:	2300      	movs	r3, #0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10b      	bne.n	80036f0 <xQueueGenericSend+0x94>
	__asm volatile
 80036d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036dc:	f383 8811 	msr	BASEPRI, r3
 80036e0:	f3bf 8f6f 	isb	sy
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	623b      	str	r3, [r7, #32]
}
 80036ea:	bf00      	nop
 80036ec:	bf00      	nop
 80036ee:	e7fd      	b.n	80036ec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036f0:	f001 f9ce 	bl	8004a90 <xTaskGetSchedulerState>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d102      	bne.n	8003700 <xQueueGenericSend+0xa4>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <xQueueGenericSend+0xa8>
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <xQueueGenericSend+0xaa>
 8003704:	2300      	movs	r3, #0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10b      	bne.n	8003722 <xQueueGenericSend+0xc6>
	__asm volatile
 800370a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800370e:	f383 8811 	msr	BASEPRI, r3
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	61fb      	str	r3, [r7, #28]
}
 800371c:	bf00      	nop
 800371e:	bf00      	nop
 8003720:	e7fd      	b.n	800371e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003722:	f002 f859 	bl	80057d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003728:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800372a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800372e:	429a      	cmp	r2, r3
 8003730:	d302      	bcc.n	8003738 <xQueueGenericSend+0xdc>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b02      	cmp	r3, #2
 8003736:	d129      	bne.n	800378c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	68b9      	ldr	r1, [r7, #8]
 800373c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800373e:	f000 fa0f 	bl	8003b60 <prvCopyDataToQueue>
 8003742:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003748:	2b00      	cmp	r3, #0
 800374a:	d010      	beq.n	800376e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800374c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374e:	3324      	adds	r3, #36	@ 0x24
 8003750:	4618      	mov	r0, r3
 8003752:	f000 ffdd 	bl	8004710 <xTaskRemoveFromEventList>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d013      	beq.n	8003784 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800375c:	4b3f      	ldr	r3, [pc, #252]	@ (800385c <xQueueGenericSend+0x200>)
 800375e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	e00a      	b.n	8003784 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800376e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003774:	4b39      	ldr	r3, [pc, #228]	@ (800385c <xQueueGenericSend+0x200>)
 8003776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003784:	f002 f85a 	bl	800583c <vPortExitCritical>
				return pdPASS;
 8003788:	2301      	movs	r3, #1
 800378a:	e063      	b.n	8003854 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d103      	bne.n	800379a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003792:	f002 f853 	bl	800583c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003796:	2300      	movs	r3, #0
 8003798:	e05c      	b.n	8003854 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800379a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800379c:	2b00      	cmp	r3, #0
 800379e:	d106      	bne.n	80037ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037a0:	f107 0314 	add.w	r3, r7, #20
 80037a4:	4618      	mov	r0, r3
 80037a6:	f001 f817 	bl	80047d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037aa:	2301      	movs	r3, #1
 80037ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037ae:	f002 f845 	bl	800583c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037b2:	f000 fd87 	bl	80042c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037b6:	f002 f80f 	bl	80057d8 <vPortEnterCritical>
 80037ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037c0:	b25b      	sxtb	r3, r3
 80037c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c6:	d103      	bne.n	80037d0 <xQueueGenericSend+0x174>
 80037c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037d6:	b25b      	sxtb	r3, r3
 80037d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037dc:	d103      	bne.n	80037e6 <xQueueGenericSend+0x18a>
 80037de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037e6:	f002 f829 	bl	800583c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037ea:	1d3a      	adds	r2, r7, #4
 80037ec:	f107 0314 	add.w	r3, r7, #20
 80037f0:	4611      	mov	r1, r2
 80037f2:	4618      	mov	r0, r3
 80037f4:	f001 f806 	bl	8004804 <xTaskCheckForTimeOut>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d124      	bne.n	8003848 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003800:	f000 faa6 	bl	8003d50 <prvIsQueueFull>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d018      	beq.n	800383c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800380a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380c:	3310      	adds	r3, #16
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	4611      	mov	r1, r2
 8003812:	4618      	mov	r0, r3
 8003814:	f000 ff2a 	bl	800466c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003818:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800381a:	f000 fa31 	bl	8003c80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800381e:	f000 fd5f 	bl	80042e0 <xTaskResumeAll>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	f47f af7c 	bne.w	8003722 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800382a:	4b0c      	ldr	r3, [pc, #48]	@ (800385c <xQueueGenericSend+0x200>)
 800382c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	e772      	b.n	8003722 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800383c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800383e:	f000 fa1f 	bl	8003c80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003842:	f000 fd4d 	bl	80042e0 <xTaskResumeAll>
 8003846:	e76c      	b.n	8003722 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003848:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800384a:	f000 fa19 	bl	8003c80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800384e:	f000 fd47 	bl	80042e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003852:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003854:	4618      	mov	r0, r3
 8003856:	3738      	adds	r7, #56	@ 0x38
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	e000ed04 	.word	0xe000ed04

08003860 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b090      	sub	sp, #64	@ 0x40
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10b      	bne.n	8003890 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800388a:	bf00      	nop
 800388c:	bf00      	nop
 800388e:	e7fd      	b.n	800388c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d103      	bne.n	800389e <xQueueGenericSendFromISR+0x3e>
 8003896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <xQueueGenericSendFromISR+0x42>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <xQueueGenericSendFromISR+0x44>
 80038a2:	2300      	movs	r3, #0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80038a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ac:	f383 8811 	msr	BASEPRI, r3
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80038ba:	bf00      	nop
 80038bc:	bf00      	nop
 80038be:	e7fd      	b.n	80038bc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d103      	bne.n	80038ce <xQueueGenericSendFromISR+0x6e>
 80038c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <xQueueGenericSendFromISR+0x72>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <xQueueGenericSendFromISR+0x74>
 80038d2:	2300      	movs	r3, #0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10b      	bne.n	80038f0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	623b      	str	r3, [r7, #32]
}
 80038ea:	bf00      	nop
 80038ec:	bf00      	nop
 80038ee:	e7fd      	b.n	80038ec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038f0:	f002 f852 	bl	8005998 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80038f4:	f3ef 8211 	mrs	r2, BASEPRI
 80038f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	61fa      	str	r2, [r7, #28]
 800390a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800390c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800390e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003912:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003918:	429a      	cmp	r2, r3
 800391a:	d302      	bcc.n	8003922 <xQueueGenericSendFromISR+0xc2>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d12f      	bne.n	8003982 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003924:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003928:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800392c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003930:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003938:	f000 f912 	bl	8003b60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800393c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003944:	d112      	bne.n	800396c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394a:	2b00      	cmp	r3, #0
 800394c:	d016      	beq.n	800397c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800394e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003950:	3324      	adds	r3, #36	@ 0x24
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fedc 	bl	8004710 <xTaskRemoveFromEventList>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00e      	beq.n	800397c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00b      	beq.n	800397c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	e007      	b.n	800397c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800396c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003970:	3301      	adds	r3, #1
 8003972:	b2db      	uxtb	r3, r3
 8003974:	b25a      	sxtb	r2, r3
 8003976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003978:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800397c:	2301      	movs	r3, #1
 800397e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003980:	e001      	b.n	8003986 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003982:	2300      	movs	r3, #0
 8003984:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003988:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003990:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003994:	4618      	mov	r0, r3
 8003996:	3740      	adds	r7, #64	@ 0x40
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08c      	sub	sp, #48	@ 0x30
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10b      	bne.n	80039ce <xQueueReceive+0x32>
	__asm volatile
 80039b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	623b      	str	r3, [r7, #32]
}
 80039c8:	bf00      	nop
 80039ca:	bf00      	nop
 80039cc:	e7fd      	b.n	80039ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d103      	bne.n	80039dc <xQueueReceive+0x40>
 80039d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <xQueueReceive+0x44>
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <xQueueReceive+0x46>
 80039e0:	2300      	movs	r3, #0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10b      	bne.n	80039fe <xQueueReceive+0x62>
	__asm volatile
 80039e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	61fb      	str	r3, [r7, #28]
}
 80039f8:	bf00      	nop
 80039fa:	bf00      	nop
 80039fc:	e7fd      	b.n	80039fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039fe:	f001 f847 	bl	8004a90 <xTaskGetSchedulerState>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d102      	bne.n	8003a0e <xQueueReceive+0x72>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <xQueueReceive+0x76>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <xQueueReceive+0x78>
 8003a12:	2300      	movs	r3, #0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10b      	bne.n	8003a30 <xQueueReceive+0x94>
	__asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	61bb      	str	r3, [r7, #24]
}
 8003a2a:	bf00      	nop
 8003a2c:	bf00      	nop
 8003a2e:	e7fd      	b.n	8003a2c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a30:	f001 fed2 	bl	80057d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a38:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01f      	beq.n	8003a80 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a40:	68b9      	ldr	r1, [r7, #8]
 8003a42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a44:	f000 f8f6 	bl	8003c34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4a:	1e5a      	subs	r2, r3, #1
 8003a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00f      	beq.n	8003a78 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5a:	3310      	adds	r3, #16
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fe57 	bl	8004710 <xTaskRemoveFromEventList>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d007      	beq.n	8003a78 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a68:	4b3c      	ldr	r3, [pc, #240]	@ (8003b5c <xQueueReceive+0x1c0>)
 8003a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a78:	f001 fee0 	bl	800583c <vPortExitCritical>
				return pdPASS;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e069      	b.n	8003b54 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d103      	bne.n	8003a8e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a86:	f001 fed9 	bl	800583c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e062      	b.n	8003b54 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d106      	bne.n	8003aa2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a94:	f107 0310 	add.w	r3, r7, #16
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fe9d 	bl	80047d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003aa2:	f001 fecb 	bl	800583c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003aa6:	f000 fc0d 	bl	80042c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003aaa:	f001 fe95 	bl	80057d8 <vPortEnterCritical>
 8003aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ab4:	b25b      	sxtb	r3, r3
 8003ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aba:	d103      	bne.n	8003ac4 <xQueueReceive+0x128>
 8003abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003aca:	b25b      	sxtb	r3, r3
 8003acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad0:	d103      	bne.n	8003ada <xQueueReceive+0x13e>
 8003ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ada:	f001 feaf 	bl	800583c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ade:	1d3a      	adds	r2, r7, #4
 8003ae0:	f107 0310 	add.w	r3, r7, #16
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 fe8c 	bl	8004804 <xTaskCheckForTimeOut>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d123      	bne.n	8003b3a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003af2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003af4:	f000 f916 	bl	8003d24 <prvIsQueueEmpty>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d017      	beq.n	8003b2e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b00:	3324      	adds	r3, #36	@ 0x24
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fdb0 	bl	800466c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b0e:	f000 f8b7 	bl	8003c80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b12:	f000 fbe5 	bl	80042e0 <xTaskResumeAll>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d189      	bne.n	8003a30 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b5c <xQueueReceive+0x1c0>)
 8003b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	e780      	b.n	8003a30 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b30:	f000 f8a6 	bl	8003c80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b34:	f000 fbd4 	bl	80042e0 <xTaskResumeAll>
 8003b38:	e77a      	b.n	8003a30 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b3c:	f000 f8a0 	bl	8003c80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b40:	f000 fbce 	bl	80042e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b46:	f000 f8ed 	bl	8003d24 <prvIsQueueEmpty>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f43f af6f 	beq.w	8003a30 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b52:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3730      	adds	r7, #48	@ 0x30
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	e000ed04 	.word	0xe000ed04

08003b60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10d      	bne.n	8003b9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d14d      	bne.n	8003c22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 ff9e 	bl	8004acc <xTaskPriorityDisinherit>
 8003b90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	609a      	str	r2, [r3, #8]
 8003b98:	e043      	b.n	8003c22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d119      	bne.n	8003bd4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6858      	ldr	r0, [r3, #4]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	f002 fb97 	bl	80062de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	441a      	add	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d32b      	bcc.n	8003c22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	e026      	b.n	8003c22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	68d8      	ldr	r0, [r3, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	461a      	mov	r2, r3
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	f002 fb7d 	bl	80062de <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bec:	425b      	negs	r3, r3
 8003bee:	441a      	add	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d207      	bcs.n	8003c10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c08:	425b      	negs	r3, r3
 8003c0a:	441a      	add	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d105      	bne.n	8003c22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003c2a:	697b      	ldr	r3, [r7, #20]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d018      	beq.n	8003c78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4e:	441a      	add	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d303      	bcc.n	8003c68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68d9      	ldr	r1, [r3, #12]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c70:	461a      	mov	r2, r3
 8003c72:	6838      	ldr	r0, [r7, #0]
 8003c74:	f002 fb33 	bl	80062de <memcpy>
	}
}
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c88:	f001 fda6 	bl	80057d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c94:	e011      	b.n	8003cba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d012      	beq.n	8003cc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3324      	adds	r3, #36	@ 0x24
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fd34 	bl	8004710 <xTaskRemoveFromEventList>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003cae:	f000 fe0d 	bl	80048cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	dce9      	bgt.n	8003c96 <prvUnlockQueue+0x16>
 8003cc2:	e000      	b.n	8003cc6 <prvUnlockQueue+0x46>
					break;
 8003cc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	22ff      	movs	r2, #255	@ 0xff
 8003cca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003cce:	f001 fdb5 	bl	800583c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003cd2:	f001 fd81 	bl	80057d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cde:	e011      	b.n	8003d04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d012      	beq.n	8003d0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3310      	adds	r3, #16
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fd0f 	bl	8004710 <xTaskRemoveFromEventList>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003cf8:	f000 fde8 	bl	80048cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003cfc:	7bbb      	ldrb	r3, [r7, #14]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	dce9      	bgt.n	8003ce0 <prvUnlockQueue+0x60>
 8003d0c:	e000      	b.n	8003d10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	22ff      	movs	r2, #255	@ 0xff
 8003d14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003d18:	f001 fd90 	bl	800583c <vPortExitCritical>
}
 8003d1c:	bf00      	nop
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d2c:	f001 fd54 	bl	80057d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d102      	bne.n	8003d3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	e001      	b.n	8003d42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d42:	f001 fd7b 	bl	800583c <vPortExitCritical>

	return xReturn;
 8003d46:	68fb      	ldr	r3, [r7, #12]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d58:	f001 fd3e 	bl	80057d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d102      	bne.n	8003d6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	e001      	b.n	8003d72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d72:	f001 fd63 	bl	800583c <vPortExitCritical>

	return xReturn;
 8003d76:	68fb      	ldr	r3, [r7, #12]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	e014      	b.n	8003dba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d90:	4a0f      	ldr	r2, [pc, #60]	@ (8003dd0 <vQueueAddToRegistry+0x50>)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10b      	bne.n	8003db4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d9c:	490c      	ldr	r1, [pc, #48]	@ (8003dd0 <vQueueAddToRegistry+0x50>)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003da6:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd0 <vQueueAddToRegistry+0x50>)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	4413      	add	r3, r2
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003db2:	e006      	b.n	8003dc2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3301      	adds	r3, #1
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2b07      	cmp	r3, #7
 8003dbe:	d9e7      	bls.n	8003d90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003dc0:	bf00      	nop
 8003dc2:	bf00      	nop
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	200007f0 	.word	0x200007f0

08003dd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003de4:	f001 fcf8 	bl	80057d8 <vPortEnterCritical>
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003dee:	b25b      	sxtb	r3, r3
 8003df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df4:	d103      	bne.n	8003dfe <vQueueWaitForMessageRestricted+0x2a>
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e04:	b25b      	sxtb	r3, r3
 8003e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0a:	d103      	bne.n	8003e14 <vQueueWaitForMessageRestricted+0x40>
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e14:	f001 fd12 	bl	800583c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d106      	bne.n	8003e2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	3324      	adds	r3, #36	@ 0x24
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fc45 	bl	80046b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e2e:	6978      	ldr	r0, [r7, #20]
 8003e30:	f7ff ff26 	bl	8003c80 <prvUnlockQueue>
	}
 8003e34:	bf00      	nop
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08e      	sub	sp, #56	@ 0x38
 8003e40:	af04      	add	r7, sp, #16
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10b      	bne.n	8003e68 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	623b      	str	r3, [r7, #32]
}
 8003e62:	bf00      	nop
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10b      	bne.n	8003e86 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	61fb      	str	r3, [r7, #28]
}
 8003e80:	bf00      	nop
 8003e82:	bf00      	nop
 8003e84:	e7fd      	b.n	8003e82 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e86:	235c      	movs	r3, #92	@ 0x5c
 8003e88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	2b5c      	cmp	r3, #92	@ 0x5c
 8003e8e:	d00b      	beq.n	8003ea8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	61bb      	str	r3, [r7, #24]
}
 8003ea2:	bf00      	nop
 8003ea4:	bf00      	nop
 8003ea6:	e7fd      	b.n	8003ea4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ea8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d01e      	beq.n	8003eee <xTaskCreateStatic+0xb2>
 8003eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d01b      	beq.n	8003eee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ebe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ec8:	2300      	movs	r3, #0
 8003eca:	9303      	str	r3, [sp, #12]
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ece:	9302      	str	r3, [sp, #8]
 8003ed0:	f107 0314 	add.w	r3, r7, #20
 8003ed4:	9301      	str	r3, [sp, #4]
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f850 	bl	8003f86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ee6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ee8:	f000 f8de 	bl	80040a8 <prvAddNewTaskToReadyList>
 8003eec:	e001      	b.n	8003ef2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ef2:	697b      	ldr	r3, [r7, #20]
	}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3728      	adds	r7, #40	@ 0x28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08c      	sub	sp, #48	@ 0x30
 8003f00:	af04      	add	r7, sp, #16
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f0c:	88fb      	ldrh	r3, [r7, #6]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f001 fd83 	bl	8005a1c <pvPortMalloc>
 8003f16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00e      	beq.n	8003f3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f1e:	205c      	movs	r0, #92	@ 0x5c
 8003f20:	f001 fd7c 	bl	8005a1c <pvPortMalloc>
 8003f24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f32:	e005      	b.n	8003f40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f34:	6978      	ldr	r0, [r7, #20]
 8003f36:	f001 fe3f 	bl	8005bb8 <vPortFree>
 8003f3a:	e001      	b.n	8003f40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d017      	beq.n	8003f76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f4e:	88fa      	ldrh	r2, [r7, #6]
 8003f50:	2300      	movs	r3, #0
 8003f52:	9303      	str	r3, [sp, #12]
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	9302      	str	r3, [sp, #8]
 8003f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f5a:	9301      	str	r3, [sp, #4]
 8003f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f80e 	bl	8003f86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f6a:	69f8      	ldr	r0, [r7, #28]
 8003f6c:	f000 f89c 	bl	80040a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f70:	2301      	movs	r3, #1
 8003f72:	61bb      	str	r3, [r7, #24]
 8003f74:	e002      	b.n	8003f7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f76:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f7c:	69bb      	ldr	r3, [r7, #24]
	}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3720      	adds	r7, #32
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b088      	sub	sp, #32
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	60b9      	str	r1, [r7, #8]
 8003f90:	607a      	str	r2, [r7, #4]
 8003f92:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f96:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	21a5      	movs	r1, #165	@ 0xa5
 8003fa0:	f002 f922 	bl	80061e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	f023 0307 	bic.w	r3, r3, #7
 8003fbc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00b      	beq.n	8003fe0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	617b      	str	r3, [r7, #20]
}
 8003fda:	bf00      	nop
 8003fdc:	bf00      	nop
 8003fde:	e7fd      	b.n	8003fdc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d01f      	beq.n	8004026 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	e012      	b.n	8004012 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	7819      	ldrb	r1, [r3, #0]
 8003ff4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	3334      	adds	r3, #52	@ 0x34
 8003ffc:	460a      	mov	r2, r1
 8003ffe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	4413      	add	r3, r2
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d006      	beq.n	800401a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	3301      	adds	r3, #1
 8004010:	61fb      	str	r3, [r7, #28]
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	2b0f      	cmp	r3, #15
 8004016:	d9e9      	bls.n	8003fec <prvInitialiseNewTask+0x66>
 8004018:	e000      	b.n	800401c <prvInitialiseNewTask+0x96>
			{
				break;
 800401a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800401c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004024:	e003      	b.n	800402e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800402e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004030:	2b37      	cmp	r3, #55	@ 0x37
 8004032:	d901      	bls.n	8004038 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004034:	2337      	movs	r3, #55	@ 0x37
 8004036:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800403c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800403e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004040:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004042:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004046:	2200      	movs	r2, #0
 8004048:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800404a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404c:	3304      	adds	r3, #4
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff f966 	bl	8003320 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004056:	3318      	adds	r3, #24
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff f961 	bl	8003320 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800405e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004062:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004066:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800406a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800406e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004072:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004076:	2200      	movs	r2, #0
 8004078:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800407a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	68f9      	ldr	r1, [r7, #12]
 8004086:	69b8      	ldr	r0, [r7, #24]
 8004088:	f001 fa78 	bl	800557c <pxPortInitialiseStack>
 800408c:	4602      	mov	r2, r0
 800408e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004090:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800409a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800409c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800409e:	bf00      	nop
 80040a0:	3720      	adds	r7, #32
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040b0:	f001 fb92 	bl	80057d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040b4:	4b2d      	ldr	r3, [pc, #180]	@ (800416c <prvAddNewTaskToReadyList+0xc4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3301      	adds	r3, #1
 80040ba:	4a2c      	ldr	r2, [pc, #176]	@ (800416c <prvAddNewTaskToReadyList+0xc4>)
 80040bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040be:	4b2c      	ldr	r3, [pc, #176]	@ (8004170 <prvAddNewTaskToReadyList+0xc8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040c6:	4a2a      	ldr	r2, [pc, #168]	@ (8004170 <prvAddNewTaskToReadyList+0xc8>)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040cc:	4b27      	ldr	r3, [pc, #156]	@ (800416c <prvAddNewTaskToReadyList+0xc4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d110      	bne.n	80040f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040d4:	f000 fc1e 	bl	8004914 <prvInitialiseTaskLists>
 80040d8:	e00d      	b.n	80040f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040da:	4b26      	ldr	r3, [pc, #152]	@ (8004174 <prvAddNewTaskToReadyList+0xcc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d109      	bne.n	80040f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040e2:	4b23      	ldr	r3, [pc, #140]	@ (8004170 <prvAddNewTaskToReadyList+0xc8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d802      	bhi.n	80040f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004170 <prvAddNewTaskToReadyList+0xc8>)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040f6:	4b20      	ldr	r3, [pc, #128]	@ (8004178 <prvAddNewTaskToReadyList+0xd0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3301      	adds	r3, #1
 80040fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004178 <prvAddNewTaskToReadyList+0xd0>)
 80040fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004100:	4b1d      	ldr	r3, [pc, #116]	@ (8004178 <prvAddNewTaskToReadyList+0xd0>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800410c:	4b1b      	ldr	r3, [pc, #108]	@ (800417c <prvAddNewTaskToReadyList+0xd4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d903      	bls.n	800411c <prvAddNewTaskToReadyList+0x74>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004118:	4a18      	ldr	r2, [pc, #96]	@ (800417c <prvAddNewTaskToReadyList+0xd4>)
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4a15      	ldr	r2, [pc, #84]	@ (8004180 <prvAddNewTaskToReadyList+0xd8>)
 800412a:	441a      	add	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	4619      	mov	r1, r3
 8004132:	4610      	mov	r0, r2
 8004134:	f7ff f901 	bl	800333a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004138:	f001 fb80 	bl	800583c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800413c:	4b0d      	ldr	r3, [pc, #52]	@ (8004174 <prvAddNewTaskToReadyList+0xcc>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00e      	beq.n	8004162 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004144:	4b0a      	ldr	r3, [pc, #40]	@ (8004170 <prvAddNewTaskToReadyList+0xc8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414e:	429a      	cmp	r2, r3
 8004150:	d207      	bcs.n	8004162 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004152:	4b0c      	ldr	r3, [pc, #48]	@ (8004184 <prvAddNewTaskToReadyList+0xdc>)
 8004154:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004162:	bf00      	nop
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000d04 	.word	0x20000d04
 8004170:	20000830 	.word	0x20000830
 8004174:	20000d10 	.word	0x20000d10
 8004178:	20000d20 	.word	0x20000d20
 800417c:	20000d0c 	.word	0x20000d0c
 8004180:	20000834 	.word	0x20000834
 8004184:	e000ed04 	.word	0xe000ed04

08004188 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d018      	beq.n	80041cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800419a:	4b14      	ldr	r3, [pc, #80]	@ (80041ec <vTaskDelay+0x64>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00b      	beq.n	80041ba <vTaskDelay+0x32>
	__asm volatile
 80041a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a6:	f383 8811 	msr	BASEPRI, r3
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	60bb      	str	r3, [r7, #8]
}
 80041b4:	bf00      	nop
 80041b6:	bf00      	nop
 80041b8:	e7fd      	b.n	80041b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80041ba:	f000 f883 	bl	80042c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041be:	2100      	movs	r1, #0
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 fe2d 	bl	8004e20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80041c6:	f000 f88b 	bl	80042e0 <xTaskResumeAll>
 80041ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d107      	bne.n	80041e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80041d2:	4b07      	ldr	r3, [pc, #28]	@ (80041f0 <vTaskDelay+0x68>)
 80041d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041e2:	bf00      	nop
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20000d2c 	.word	0x20000d2c
 80041f0:	e000ed04 	.word	0xe000ed04

080041f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08a      	sub	sp, #40	@ 0x28
 80041f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80041fe:	2300      	movs	r3, #0
 8004200:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004202:	463a      	mov	r2, r7
 8004204:	1d39      	adds	r1, r7, #4
 8004206:	f107 0308 	add.w	r3, r7, #8
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff f834 	bl	8003278 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004210:	6839      	ldr	r1, [r7, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	9202      	str	r2, [sp, #8]
 8004218:	9301      	str	r3, [sp, #4]
 800421a:	2300      	movs	r3, #0
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	2300      	movs	r3, #0
 8004220:	460a      	mov	r2, r1
 8004222:	4922      	ldr	r1, [pc, #136]	@ (80042ac <vTaskStartScheduler+0xb8>)
 8004224:	4822      	ldr	r0, [pc, #136]	@ (80042b0 <vTaskStartScheduler+0xbc>)
 8004226:	f7ff fe09 	bl	8003e3c <xTaskCreateStatic>
 800422a:	4603      	mov	r3, r0
 800422c:	4a21      	ldr	r2, [pc, #132]	@ (80042b4 <vTaskStartScheduler+0xc0>)
 800422e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004230:	4b20      	ldr	r3, [pc, #128]	@ (80042b4 <vTaskStartScheduler+0xc0>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004238:	2301      	movs	r3, #1
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	e001      	b.n	8004242 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d102      	bne.n	800424e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004248:	f000 fe3e 	bl	8004ec8 <xTimerCreateTimerTask>
 800424c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d116      	bne.n	8004282 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	613b      	str	r3, [r7, #16]
}
 8004266:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004268:	4b13      	ldr	r3, [pc, #76]	@ (80042b8 <vTaskStartScheduler+0xc4>)
 800426a:	f04f 32ff 	mov.w	r2, #4294967295
 800426e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004270:	4b12      	ldr	r3, [pc, #72]	@ (80042bc <vTaskStartScheduler+0xc8>)
 8004272:	2201      	movs	r2, #1
 8004274:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004276:	4b12      	ldr	r3, [pc, #72]	@ (80042c0 <vTaskStartScheduler+0xcc>)
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800427c:	f001 fa08 	bl	8005690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004280:	e00f      	b.n	80042a2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004288:	d10b      	bne.n	80042a2 <vTaskStartScheduler+0xae>
	__asm volatile
 800428a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	60fb      	str	r3, [r7, #12]
}
 800429c:	bf00      	nop
 800429e:	bf00      	nop
 80042a0:	e7fd      	b.n	800429e <vTaskStartScheduler+0xaa>
}
 80042a2:	bf00      	nop
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	080067f4 	.word	0x080067f4
 80042b0:	080048e5 	.word	0x080048e5
 80042b4:	20000d28 	.word	0x20000d28
 80042b8:	20000d24 	.word	0x20000d24
 80042bc:	20000d10 	.word	0x20000d10
 80042c0:	20000d08 	.word	0x20000d08

080042c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80042c8:	4b04      	ldr	r3, [pc, #16]	@ (80042dc <vTaskSuspendAll+0x18>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3301      	adds	r3, #1
 80042ce:	4a03      	ldr	r2, [pc, #12]	@ (80042dc <vTaskSuspendAll+0x18>)
 80042d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80042d2:	bf00      	nop
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	20000d2c 	.word	0x20000d2c

080042e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042ee:	4b42      	ldr	r3, [pc, #264]	@ (80043f8 <xTaskResumeAll+0x118>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10b      	bne.n	800430e <xTaskResumeAll+0x2e>
	__asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	603b      	str	r3, [r7, #0]
}
 8004308:	bf00      	nop
 800430a:	bf00      	nop
 800430c:	e7fd      	b.n	800430a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800430e:	f001 fa63 	bl	80057d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004312:	4b39      	ldr	r3, [pc, #228]	@ (80043f8 <xTaskResumeAll+0x118>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3b01      	subs	r3, #1
 8004318:	4a37      	ldr	r2, [pc, #220]	@ (80043f8 <xTaskResumeAll+0x118>)
 800431a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800431c:	4b36      	ldr	r3, [pc, #216]	@ (80043f8 <xTaskResumeAll+0x118>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d162      	bne.n	80043ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004324:	4b35      	ldr	r3, [pc, #212]	@ (80043fc <xTaskResumeAll+0x11c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d05e      	beq.n	80043ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800432c:	e02f      	b.n	800438e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800432e:	4b34      	ldr	r3, [pc, #208]	@ (8004400 <xTaskResumeAll+0x120>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3318      	adds	r3, #24
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff f85a 	bl	80033f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3304      	adds	r3, #4
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff f855 	bl	80033f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800434e:	4b2d      	ldr	r3, [pc, #180]	@ (8004404 <xTaskResumeAll+0x124>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d903      	bls.n	800435e <xTaskResumeAll+0x7e>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435a:	4a2a      	ldr	r2, [pc, #168]	@ (8004404 <xTaskResumeAll+0x124>)
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4a27      	ldr	r2, [pc, #156]	@ (8004408 <xTaskResumeAll+0x128>)
 800436c:	441a      	add	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	3304      	adds	r3, #4
 8004372:	4619      	mov	r1, r3
 8004374:	4610      	mov	r0, r2
 8004376:	f7fe ffe0 	bl	800333a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800437e:	4b23      	ldr	r3, [pc, #140]	@ (800440c <xTaskResumeAll+0x12c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004384:	429a      	cmp	r2, r3
 8004386:	d302      	bcc.n	800438e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004388:	4b21      	ldr	r3, [pc, #132]	@ (8004410 <xTaskResumeAll+0x130>)
 800438a:	2201      	movs	r2, #1
 800438c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800438e:	4b1c      	ldr	r3, [pc, #112]	@ (8004400 <xTaskResumeAll+0x120>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1cb      	bne.n	800432e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800439c:	f000 fb58 	bl	8004a50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80043a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004414 <xTaskResumeAll+0x134>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d010      	beq.n	80043ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043ac:	f000 f846 	bl	800443c <xTaskIncrementTick>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80043b6:	4b16      	ldr	r3, [pc, #88]	@ (8004410 <xTaskResumeAll+0x130>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3b01      	subs	r3, #1
 80043c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1f1      	bne.n	80043ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80043c8:	4b12      	ldr	r3, [pc, #72]	@ (8004414 <xTaskResumeAll+0x134>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043ce:	4b10      	ldr	r3, [pc, #64]	@ (8004410 <xTaskResumeAll+0x130>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80043d6:	2301      	movs	r3, #1
 80043d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80043da:	4b0f      	ldr	r3, [pc, #60]	@ (8004418 <xTaskResumeAll+0x138>)
 80043dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043ea:	f001 fa27 	bl	800583c <vPortExitCritical>

	return xAlreadyYielded;
 80043ee:	68bb      	ldr	r3, [r7, #8]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	20000d2c 	.word	0x20000d2c
 80043fc:	20000d04 	.word	0x20000d04
 8004400:	20000cc4 	.word	0x20000cc4
 8004404:	20000d0c 	.word	0x20000d0c
 8004408:	20000834 	.word	0x20000834
 800440c:	20000830 	.word	0x20000830
 8004410:	20000d18 	.word	0x20000d18
 8004414:	20000d14 	.word	0x20000d14
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004422:	4b05      	ldr	r3, [pc, #20]	@ (8004438 <xTaskGetTickCount+0x1c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004428:	687b      	ldr	r3, [r7, #4]
}
 800442a:	4618      	mov	r0, r3
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	20000d08 	.word	0x20000d08

0800443c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004446:	4b4f      	ldr	r3, [pc, #316]	@ (8004584 <xTaskIncrementTick+0x148>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	f040 8090 	bne.w	8004570 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004450:	4b4d      	ldr	r3, [pc, #308]	@ (8004588 <xTaskIncrementTick+0x14c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3301      	adds	r3, #1
 8004456:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004458:	4a4b      	ldr	r2, [pc, #300]	@ (8004588 <xTaskIncrementTick+0x14c>)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d121      	bne.n	80044a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004464:	4b49      	ldr	r3, [pc, #292]	@ (800458c <xTaskIncrementTick+0x150>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00b      	beq.n	8004486 <xTaskIncrementTick+0x4a>
	__asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	603b      	str	r3, [r7, #0]
}
 8004480:	bf00      	nop
 8004482:	bf00      	nop
 8004484:	e7fd      	b.n	8004482 <xTaskIncrementTick+0x46>
 8004486:	4b41      	ldr	r3, [pc, #260]	@ (800458c <xTaskIncrementTick+0x150>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	4b40      	ldr	r3, [pc, #256]	@ (8004590 <xTaskIncrementTick+0x154>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a3e      	ldr	r2, [pc, #248]	@ (800458c <xTaskIncrementTick+0x150>)
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	4a3e      	ldr	r2, [pc, #248]	@ (8004590 <xTaskIncrementTick+0x154>)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	4b3e      	ldr	r3, [pc, #248]	@ (8004594 <xTaskIncrementTick+0x158>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3301      	adds	r3, #1
 80044a0:	4a3c      	ldr	r2, [pc, #240]	@ (8004594 <xTaskIncrementTick+0x158>)
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	f000 fad4 	bl	8004a50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004598 <xTaskIncrementTick+0x15c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d349      	bcc.n	8004546 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044b2:	4b36      	ldr	r3, [pc, #216]	@ (800458c <xTaskIncrementTick+0x150>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d104      	bne.n	80044c6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044bc:	4b36      	ldr	r3, [pc, #216]	@ (8004598 <xTaskIncrementTick+0x15c>)
 80044be:	f04f 32ff 	mov.w	r2, #4294967295
 80044c2:	601a      	str	r2, [r3, #0]
					break;
 80044c4:	e03f      	b.n	8004546 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044c6:	4b31      	ldr	r3, [pc, #196]	@ (800458c <xTaskIncrementTick+0x150>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d203      	bcs.n	80044e6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044de:	4a2e      	ldr	r2, [pc, #184]	@ (8004598 <xTaskIncrementTick+0x15c>)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80044e4:	e02f      	b.n	8004546 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	3304      	adds	r3, #4
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fe ff82 	bl	80033f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d004      	beq.n	8004502 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	3318      	adds	r3, #24
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fe ff79 	bl	80033f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004506:	4b25      	ldr	r3, [pc, #148]	@ (800459c <xTaskIncrementTick+0x160>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d903      	bls.n	8004516 <xTaskIncrementTick+0xda>
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004512:	4a22      	ldr	r2, [pc, #136]	@ (800459c <xTaskIncrementTick+0x160>)
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800451a:	4613      	mov	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4a1f      	ldr	r2, [pc, #124]	@ (80045a0 <xTaskIncrementTick+0x164>)
 8004524:	441a      	add	r2, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	3304      	adds	r3, #4
 800452a:	4619      	mov	r1, r3
 800452c:	4610      	mov	r0, r2
 800452e:	f7fe ff04 	bl	800333a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004536:	4b1b      	ldr	r3, [pc, #108]	@ (80045a4 <xTaskIncrementTick+0x168>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453c:	429a      	cmp	r2, r3
 800453e:	d3b8      	bcc.n	80044b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004540:	2301      	movs	r3, #1
 8004542:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004544:	e7b5      	b.n	80044b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004546:	4b17      	ldr	r3, [pc, #92]	@ (80045a4 <xTaskIncrementTick+0x168>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800454c:	4914      	ldr	r1, [pc, #80]	@ (80045a0 <xTaskIncrementTick+0x164>)
 800454e:	4613      	mov	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4413      	add	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	440b      	add	r3, r1
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d901      	bls.n	8004562 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800455e:	2301      	movs	r3, #1
 8004560:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004562:	4b11      	ldr	r3, [pc, #68]	@ (80045a8 <xTaskIncrementTick+0x16c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d007      	beq.n	800457a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800456a:	2301      	movs	r3, #1
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	e004      	b.n	800457a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004570:	4b0e      	ldr	r3, [pc, #56]	@ (80045ac <xTaskIncrementTick+0x170>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3301      	adds	r3, #1
 8004576:	4a0d      	ldr	r2, [pc, #52]	@ (80045ac <xTaskIncrementTick+0x170>)
 8004578:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800457a:	697b      	ldr	r3, [r7, #20]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	20000d2c 	.word	0x20000d2c
 8004588:	20000d08 	.word	0x20000d08
 800458c:	20000cbc 	.word	0x20000cbc
 8004590:	20000cc0 	.word	0x20000cc0
 8004594:	20000d1c 	.word	0x20000d1c
 8004598:	20000d24 	.word	0x20000d24
 800459c:	20000d0c 	.word	0x20000d0c
 80045a0:	20000834 	.word	0x20000834
 80045a4:	20000830 	.word	0x20000830
 80045a8:	20000d18 	.word	0x20000d18
 80045ac:	20000d14 	.word	0x20000d14

080045b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045b6:	4b28      	ldr	r3, [pc, #160]	@ (8004658 <vTaskSwitchContext+0xa8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045be:	4b27      	ldr	r3, [pc, #156]	@ (800465c <vTaskSwitchContext+0xac>)
 80045c0:	2201      	movs	r2, #1
 80045c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045c4:	e042      	b.n	800464c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80045c6:	4b25      	ldr	r3, [pc, #148]	@ (800465c <vTaskSwitchContext+0xac>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045cc:	4b24      	ldr	r3, [pc, #144]	@ (8004660 <vTaskSwitchContext+0xb0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	e011      	b.n	80045f8 <vTaskSwitchContext+0x48>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10b      	bne.n	80045f2 <vTaskSwitchContext+0x42>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	607b      	str	r3, [r7, #4]
}
 80045ec:	bf00      	nop
 80045ee:	bf00      	nop
 80045f0:	e7fd      	b.n	80045ee <vTaskSwitchContext+0x3e>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	491a      	ldr	r1, [pc, #104]	@ (8004664 <vTaskSwitchContext+0xb4>)
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0e3      	beq.n	80045d4 <vTaskSwitchContext+0x24>
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4613      	mov	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4a13      	ldr	r2, [pc, #76]	@ (8004664 <vTaskSwitchContext+0xb4>)
 8004618:	4413      	add	r3, r2
 800461a:	60bb      	str	r3, [r7, #8]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	605a      	str	r2, [r3, #4]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	3308      	adds	r3, #8
 800462e:	429a      	cmp	r2, r3
 8004630:	d104      	bne.n	800463c <vTaskSwitchContext+0x8c>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	605a      	str	r2, [r3, #4]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	4a09      	ldr	r2, [pc, #36]	@ (8004668 <vTaskSwitchContext+0xb8>)
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	4a06      	ldr	r2, [pc, #24]	@ (8004660 <vTaskSwitchContext+0xb0>)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6013      	str	r3, [r2, #0]
}
 800464c:	bf00      	nop
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	20000d2c 	.word	0x20000d2c
 800465c:	20000d18 	.word	0x20000d18
 8004660:	20000d0c 	.word	0x20000d0c
 8004664:	20000834 	.word	0x20000834
 8004668:	20000830 	.word	0x20000830

0800466c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10b      	bne.n	8004694 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	60fb      	str	r3, [r7, #12]
}
 800468e:	bf00      	nop
 8004690:	bf00      	nop
 8004692:	e7fd      	b.n	8004690 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004694:	4b07      	ldr	r3, [pc, #28]	@ (80046b4 <vTaskPlaceOnEventList+0x48>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3318      	adds	r3, #24
 800469a:	4619      	mov	r1, r3
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7fe fe70 	bl	8003382 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046a2:	2101      	movs	r1, #1
 80046a4:	6838      	ldr	r0, [r7, #0]
 80046a6:	f000 fbbb 	bl	8004e20 <prvAddCurrentTaskToDelayedList>
}
 80046aa:	bf00      	nop
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20000830 	.word	0x20000830

080046b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10b      	bne.n	80046e2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	617b      	str	r3, [r7, #20]
}
 80046dc:	bf00      	nop
 80046de:	bf00      	nop
 80046e0:	e7fd      	b.n	80046de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046e2:	4b0a      	ldr	r3, [pc, #40]	@ (800470c <vTaskPlaceOnEventListRestricted+0x54>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3318      	adds	r3, #24
 80046e8:	4619      	mov	r1, r3
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f7fe fe25 	bl	800333a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80046f6:	f04f 33ff 	mov.w	r3, #4294967295
 80046fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	68b8      	ldr	r0, [r7, #8]
 8004700:	f000 fb8e 	bl	8004e20 <prvAddCurrentTaskToDelayedList>
	}
 8004704:	bf00      	nop
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	20000830 	.word	0x20000830

08004710 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10b      	bne.n	800473e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	60fb      	str	r3, [r7, #12]
}
 8004738:	bf00      	nop
 800473a:	bf00      	nop
 800473c:	e7fd      	b.n	800473a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	3318      	adds	r3, #24
 8004742:	4618      	mov	r0, r3
 8004744:	f7fe fe56 	bl	80033f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004748:	4b1d      	ldr	r3, [pc, #116]	@ (80047c0 <xTaskRemoveFromEventList+0xb0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d11d      	bne.n	800478c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	3304      	adds	r3, #4
 8004754:	4618      	mov	r0, r3
 8004756:	f7fe fe4d 	bl	80033f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800475e:	4b19      	ldr	r3, [pc, #100]	@ (80047c4 <xTaskRemoveFromEventList+0xb4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d903      	bls.n	800476e <xTaskRemoveFromEventList+0x5e>
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476a:	4a16      	ldr	r2, [pc, #88]	@ (80047c4 <xTaskRemoveFromEventList+0xb4>)
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004772:	4613      	mov	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4a13      	ldr	r2, [pc, #76]	@ (80047c8 <xTaskRemoveFromEventList+0xb8>)
 800477c:	441a      	add	r2, r3
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	3304      	adds	r3, #4
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f7fe fdd8 	bl	800333a <vListInsertEnd>
 800478a:	e005      	b.n	8004798 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	3318      	adds	r3, #24
 8004790:	4619      	mov	r1, r3
 8004792:	480e      	ldr	r0, [pc, #56]	@ (80047cc <xTaskRemoveFromEventList+0xbc>)
 8004794:	f7fe fdd1 	bl	800333a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800479c:	4b0c      	ldr	r3, [pc, #48]	@ (80047d0 <xTaskRemoveFromEventList+0xc0>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d905      	bls.n	80047b2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047a6:	2301      	movs	r3, #1
 80047a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047aa:	4b0a      	ldr	r3, [pc, #40]	@ (80047d4 <xTaskRemoveFromEventList+0xc4>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	e001      	b.n	80047b6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80047b6:	697b      	ldr	r3, [r7, #20]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	20000d2c 	.word	0x20000d2c
 80047c4:	20000d0c 	.word	0x20000d0c
 80047c8:	20000834 	.word	0x20000834
 80047cc:	20000cc4 	.word	0x20000cc4
 80047d0:	20000830 	.word	0x20000830
 80047d4:	20000d18 	.word	0x20000d18

080047d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047e0:	4b06      	ldr	r3, [pc, #24]	@ (80047fc <vTaskInternalSetTimeOutState+0x24>)
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047e8:	4b05      	ldr	r3, [pc, #20]	@ (8004800 <vTaskInternalSetTimeOutState+0x28>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	605a      	str	r2, [r3, #4]
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	20000d1c 	.word	0x20000d1c
 8004800:	20000d08 	.word	0x20000d08

08004804 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10b      	bne.n	800482c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	613b      	str	r3, [r7, #16]
}
 8004826:	bf00      	nop
 8004828:	bf00      	nop
 800482a:	e7fd      	b.n	8004828 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10b      	bne.n	800484a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	60fb      	str	r3, [r7, #12]
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop
 8004848:	e7fd      	b.n	8004846 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800484a:	f000 ffc5 	bl	80057d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800484e:	4b1d      	ldr	r3, [pc, #116]	@ (80048c4 <xTaskCheckForTimeOut+0xc0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d102      	bne.n	800486e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004868:	2300      	movs	r3, #0
 800486a:	61fb      	str	r3, [r7, #28]
 800486c:	e023      	b.n	80048b6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	4b15      	ldr	r3, [pc, #84]	@ (80048c8 <xTaskCheckForTimeOut+0xc4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d007      	beq.n	800488a <xTaskCheckForTimeOut+0x86>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	429a      	cmp	r2, r3
 8004882:	d302      	bcc.n	800488a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004884:	2301      	movs	r3, #1
 8004886:	61fb      	str	r3, [r7, #28]
 8004888:	e015      	b.n	80048b6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	429a      	cmp	r2, r3
 8004892:	d20b      	bcs.n	80048ac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	1ad2      	subs	r2, r2, r3
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff ff99 	bl	80047d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	e004      	b.n	80048b6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048b2:	2301      	movs	r3, #1
 80048b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048b6:	f000 ffc1 	bl	800583c <vPortExitCritical>

	return xReturn;
 80048ba:	69fb      	ldr	r3, [r7, #28]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3720      	adds	r7, #32
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	20000d08 	.word	0x20000d08
 80048c8:	20000d1c 	.word	0x20000d1c

080048cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048d0:	4b03      	ldr	r3, [pc, #12]	@ (80048e0 <vTaskMissedYield+0x14>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]
}
 80048d6:	bf00      	nop
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	20000d18 	.word	0x20000d18

080048e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048ec:	f000 f852 	bl	8004994 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048f0:	4b06      	ldr	r3, [pc, #24]	@ (800490c <prvIdleTask+0x28>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d9f9      	bls.n	80048ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80048f8:	4b05      	ldr	r3, [pc, #20]	@ (8004910 <prvIdleTask+0x2c>)
 80048fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004908:	e7f0      	b.n	80048ec <prvIdleTask+0x8>
 800490a:	bf00      	nop
 800490c:	20000834 	.word	0x20000834
 8004910:	e000ed04 	.word	0xe000ed04

08004914 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800491a:	2300      	movs	r3, #0
 800491c:	607b      	str	r3, [r7, #4]
 800491e:	e00c      	b.n	800493a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	4613      	mov	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4a12      	ldr	r2, [pc, #72]	@ (8004974 <prvInitialiseTaskLists+0x60>)
 800492c:	4413      	add	r3, r2
 800492e:	4618      	mov	r0, r3
 8004930:	f7fe fcd6 	bl	80032e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3301      	adds	r3, #1
 8004938:	607b      	str	r3, [r7, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b37      	cmp	r3, #55	@ 0x37
 800493e:	d9ef      	bls.n	8004920 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004940:	480d      	ldr	r0, [pc, #52]	@ (8004978 <prvInitialiseTaskLists+0x64>)
 8004942:	f7fe fccd 	bl	80032e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004946:	480d      	ldr	r0, [pc, #52]	@ (800497c <prvInitialiseTaskLists+0x68>)
 8004948:	f7fe fcca 	bl	80032e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800494c:	480c      	ldr	r0, [pc, #48]	@ (8004980 <prvInitialiseTaskLists+0x6c>)
 800494e:	f7fe fcc7 	bl	80032e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004952:	480c      	ldr	r0, [pc, #48]	@ (8004984 <prvInitialiseTaskLists+0x70>)
 8004954:	f7fe fcc4 	bl	80032e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004958:	480b      	ldr	r0, [pc, #44]	@ (8004988 <prvInitialiseTaskLists+0x74>)
 800495a:	f7fe fcc1 	bl	80032e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800495e:	4b0b      	ldr	r3, [pc, #44]	@ (800498c <prvInitialiseTaskLists+0x78>)
 8004960:	4a05      	ldr	r2, [pc, #20]	@ (8004978 <prvInitialiseTaskLists+0x64>)
 8004962:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004964:	4b0a      	ldr	r3, [pc, #40]	@ (8004990 <prvInitialiseTaskLists+0x7c>)
 8004966:	4a05      	ldr	r2, [pc, #20]	@ (800497c <prvInitialiseTaskLists+0x68>)
 8004968:	601a      	str	r2, [r3, #0]
}
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000834 	.word	0x20000834
 8004978:	20000c94 	.word	0x20000c94
 800497c:	20000ca8 	.word	0x20000ca8
 8004980:	20000cc4 	.word	0x20000cc4
 8004984:	20000cd8 	.word	0x20000cd8
 8004988:	20000cf0 	.word	0x20000cf0
 800498c:	20000cbc 	.word	0x20000cbc
 8004990:	20000cc0 	.word	0x20000cc0

08004994 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800499a:	e019      	b.n	80049d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800499c:	f000 ff1c 	bl	80057d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049a0:	4b10      	ldr	r3, [pc, #64]	@ (80049e4 <prvCheckTasksWaitingTermination+0x50>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3304      	adds	r3, #4
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fe fd21 	bl	80033f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049b2:	4b0d      	ldr	r3, [pc, #52]	@ (80049e8 <prvCheckTasksWaitingTermination+0x54>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	4a0b      	ldr	r2, [pc, #44]	@ (80049e8 <prvCheckTasksWaitingTermination+0x54>)
 80049ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049bc:	4b0b      	ldr	r3, [pc, #44]	@ (80049ec <prvCheckTasksWaitingTermination+0x58>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3b01      	subs	r3, #1
 80049c2:	4a0a      	ldr	r2, [pc, #40]	@ (80049ec <prvCheckTasksWaitingTermination+0x58>)
 80049c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049c6:	f000 ff39 	bl	800583c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f810 	bl	80049f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049d0:	4b06      	ldr	r3, [pc, #24]	@ (80049ec <prvCheckTasksWaitingTermination+0x58>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e1      	bne.n	800499c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049d8:	bf00      	nop
 80049da:	bf00      	nop
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20000cd8 	.word	0x20000cd8
 80049e8:	20000d04 	.word	0x20000d04
 80049ec:	20000cec 	.word	0x20000cec

080049f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d108      	bne.n	8004a14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a06:	4618      	mov	r0, r3
 8004a08:	f001 f8d6 	bl	8005bb8 <vPortFree>
				vPortFree( pxTCB );
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f001 f8d3 	bl	8005bb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a12:	e019      	b.n	8004a48 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d103      	bne.n	8004a26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f001 f8ca 	bl	8005bb8 <vPortFree>
	}
 8004a24:	e010      	b.n	8004a48 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d00b      	beq.n	8004a48 <prvDeleteTCB+0x58>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	60fb      	str	r3, [r7, #12]
}
 8004a42:	bf00      	nop
 8004a44:	bf00      	nop
 8004a46:	e7fd      	b.n	8004a44 <prvDeleteTCB+0x54>
	}
 8004a48:	bf00      	nop
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a56:	4b0c      	ldr	r3, [pc, #48]	@ (8004a88 <prvResetNextTaskUnblockTime+0x38>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d104      	bne.n	8004a6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a60:	4b0a      	ldr	r3, [pc, #40]	@ (8004a8c <prvResetNextTaskUnblockTime+0x3c>)
 8004a62:	f04f 32ff 	mov.w	r2, #4294967295
 8004a66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a68:	e008      	b.n	8004a7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a6a:	4b07      	ldr	r3, [pc, #28]	@ (8004a88 <prvResetNextTaskUnblockTime+0x38>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	4a04      	ldr	r2, [pc, #16]	@ (8004a8c <prvResetNextTaskUnblockTime+0x3c>)
 8004a7a:	6013      	str	r3, [r2, #0]
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	20000cbc 	.word	0x20000cbc
 8004a8c:	20000d24 	.word	0x20000d24

08004a90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a96:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac4 <xTaskGetSchedulerState+0x34>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d102      	bne.n	8004aa4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	607b      	str	r3, [r7, #4]
 8004aa2:	e008      	b.n	8004ab6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aa4:	4b08      	ldr	r3, [pc, #32]	@ (8004ac8 <xTaskGetSchedulerState+0x38>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d102      	bne.n	8004ab2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004aac:	2302      	movs	r3, #2
 8004aae:	607b      	str	r3, [r7, #4]
 8004ab0:	e001      	b.n	8004ab6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ab6:	687b      	ldr	r3, [r7, #4]
	}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	20000d10 	.word	0x20000d10
 8004ac8:	20000d2c 	.word	0x20000d2c

08004acc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d058      	beq.n	8004b94 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8004ba0 <xTaskPriorityDisinherit+0xd4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d00b      	beq.n	8004b04 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	60fb      	str	r3, [r7, #12]
}
 8004afe:	bf00      	nop
 8004b00:	bf00      	nop
 8004b02:	e7fd      	b.n	8004b00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10b      	bne.n	8004b24 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	60bb      	str	r3, [r7, #8]
}
 8004b1e:	bf00      	nop
 8004b20:	bf00      	nop
 8004b22:	e7fd      	b.n	8004b20 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b28:	1e5a      	subs	r2, r3, #1
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d02c      	beq.n	8004b94 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d128      	bne.n	8004b94 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	3304      	adds	r3, #4
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe fc54 	bl	80033f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b58:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b64:	4b0f      	ldr	r3, [pc, #60]	@ (8004ba4 <xTaskPriorityDisinherit+0xd8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d903      	bls.n	8004b74 <xTaskPriorityDisinherit+0xa8>
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b70:	4a0c      	ldr	r2, [pc, #48]	@ (8004ba4 <xTaskPriorityDisinherit+0xd8>)
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4a09      	ldr	r2, [pc, #36]	@ (8004ba8 <xTaskPriorityDisinherit+0xdc>)
 8004b82:	441a      	add	r2, r3
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	3304      	adds	r3, #4
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	f7fe fbd5 	bl	800333a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b90:	2301      	movs	r3, #1
 8004b92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b94:	697b      	ldr	r3, [r7, #20]
	}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000830 	.word	0x20000830
 8004ba4:	20000d0c 	.word	0x20000d0c
 8004ba8:	20000834 	.word	0x20000834

08004bac <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
 8004bb8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004bba:	f000 fe0d 	bl	80057d8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004bbe:	4b26      	ldr	r3, [pc, #152]	@ (8004c58 <xTaskNotifyWait+0xac>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d01a      	beq.n	8004c02 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004bcc:	4b22      	ldr	r3, [pc, #136]	@ (8004c58 <xTaskNotifyWait+0xac>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	43d2      	mvns	r2, r2
 8004bd6:	400a      	ands	r2, r1
 8004bd8:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004bda:	4b1f      	ldr	r3, [pc, #124]	@ (8004c58 <xTaskNotifyWait+0xac>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00b      	beq.n	8004c02 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bea:	2101      	movs	r1, #1
 8004bec:	6838      	ldr	r0, [r7, #0]
 8004bee:	f000 f917 	bl	8004e20 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8004c5c <xTaskNotifyWait+0xb0>)
 8004bf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004c02:	f000 fe1b 	bl	800583c <vPortExitCritical>

		taskENTER_CRITICAL();
 8004c06:	f000 fde7 	bl	80057d8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d004      	beq.n	8004c1a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004c10:	4b11      	ldr	r3, [pc, #68]	@ (8004c58 <xTaskNotifyWait+0xac>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8004c58 <xTaskNotifyWait+0xac>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d002      	beq.n	8004c2e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	e008      	b.n	8004c40 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c58 <xTaskNotifyWait+0xac>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	43d2      	mvns	r2, r2
 8004c38:	400a      	ands	r2, r1
 8004c3a:	655a      	str	r2, [r3, #84]	@ 0x54
				xReturn = pdTRUE;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c40:	4b05      	ldr	r3, [pc, #20]	@ (8004c58 <xTaskNotifyWait+0xac>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 8004c4a:	f000 fdf7 	bl	800583c <vPortExitCritical>

		return xReturn;
 8004c4e:	697b      	ldr	r3, [r7, #20]
	}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	20000830 	.word	0x20000830
 8004c5c:	e000ed04 	.word	0xe000ed04

08004c60 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08e      	sub	sp, #56	@ 0x38
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004c70:	2301      	movs	r3, #1
 8004c72:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10b      	bne.n	8004c92 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c8c:	bf00      	nop
 8004c8e:	bf00      	nop
 8004c90:	e7fd      	b.n	8004c8e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c92:	f000 fe81 	bl	8005998 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8004c9a:	f3ef 8211 	mrs	r2, BASEPRI
 8004c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	623a      	str	r2, [r7, #32]
 8004cb0:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8004cb2:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8004cd6:	79fb      	ldrb	r3, [r7, #7]
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d829      	bhi.n	8004d30 <xTaskGenericNotifyFromISR+0xd0>
 8004cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce4 <xTaskGenericNotifyFromISR+0x84>)
 8004cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce2:	bf00      	nop
 8004ce4:	08004d53 	.word	0x08004d53
 8004ce8:	08004cf9 	.word	0x08004cf9
 8004cec:	08004d07 	.word	0x08004d07
 8004cf0:	08004d13 	.word	0x08004d13
 8004cf4:	08004d1b 	.word	0x08004d1b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d02:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8004d04:	e028      	b.n	8004d58 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8004d10:	e022      	b.n	8004d58 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8004d18:	e01e      	b.n	8004d58 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004d1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d003      	beq.n	8004d2a <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004d28:	e016      	b.n	8004d58 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8004d2e:	e013      	b.n	8004d58 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d00d      	beq.n	8004d56 <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	61bb      	str	r3, [r7, #24]
}
 8004d4c:	bf00      	nop
 8004d4e:	bf00      	nop
 8004d50:	e7fd      	b.n	8004d4e <xTaskGenericNotifyFromISR+0xee>
					break;
 8004d52:	bf00      	nop
 8004d54:	e000      	b.n	8004d58 <xTaskGenericNotifyFromISR+0xf8>
					break;
 8004d56:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004d58:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d147      	bne.n	8004df0 <xTaskGenericNotifyFromISR+0x190>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00b      	beq.n	8004d80 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	617b      	str	r3, [r7, #20]
}
 8004d7a:	bf00      	nop
 8004d7c:	bf00      	nop
 8004d7e:	e7fd      	b.n	8004d7c <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d80:	4b21      	ldr	r3, [pc, #132]	@ (8004e08 <xTaskGenericNotifyFromISR+0x1a8>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d11d      	bne.n	8004dc4 <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fe fb31 	bl	80033f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d96:	4b1d      	ldr	r3, [pc, #116]	@ (8004e0c <xTaskGenericNotifyFromISR+0x1ac>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d903      	bls.n	8004da6 <xTaskGenericNotifyFromISR+0x146>
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da2:	4a1a      	ldr	r2, [pc, #104]	@ (8004e0c <xTaskGenericNotifyFromISR+0x1ac>)
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004daa:	4613      	mov	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4a17      	ldr	r2, [pc, #92]	@ (8004e10 <xTaskGenericNotifyFromISR+0x1b0>)
 8004db4:	441a      	add	r2, r3
 8004db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db8:	3304      	adds	r3, #4
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	f7fe fabc 	bl	800333a <vListInsertEnd>
 8004dc2:	e005      	b.n	8004dd0 <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc6:	3318      	adds	r3, #24
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4812      	ldr	r0, [pc, #72]	@ (8004e14 <xTaskGenericNotifyFromISR+0x1b4>)
 8004dcc:	f7fe fab5 	bl	800333a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dd4:	4b10      	ldr	r3, [pc, #64]	@ (8004e18 <xTaskGenericNotifyFromISR+0x1b8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d908      	bls.n	8004df0 <xTaskGenericNotifyFromISR+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004dde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <xTaskGenericNotifyFromISR+0x18a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004de4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004de6:	2201      	movs	r2, #1
 8004de8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8004dea:	4b0c      	ldr	r3, [pc, #48]	@ (8004e1c <xTaskGenericNotifyFromISR+0x1bc>)
 8004dec:	2201      	movs	r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df2:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	f383 8811 	msr	BASEPRI, r3
}
 8004dfa:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8004dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3738      	adds	r7, #56	@ 0x38
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20000d2c 	.word	0x20000d2c
 8004e0c:	20000d0c 	.word	0x20000d0c
 8004e10:	20000834 	.word	0x20000834
 8004e14:	20000cc4 	.word	0x20000cc4
 8004e18:	20000830 	.word	0x20000830
 8004e1c:	20000d18 	.word	0x20000d18

08004e20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e2a:	4b21      	ldr	r3, [pc, #132]	@ (8004eb0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e30:	4b20      	ldr	r3, [pc, #128]	@ (8004eb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3304      	adds	r3, #4
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fe fadc 	bl	80033f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	d10a      	bne.n	8004e5a <prvAddCurrentTaskToDelayedList+0x3a>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d007      	beq.n	8004e5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004eb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3304      	adds	r3, #4
 8004e50:	4619      	mov	r1, r3
 8004e52:	4819      	ldr	r0, [pc, #100]	@ (8004eb8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004e54:	f7fe fa71 	bl	800333a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e58:	e026      	b.n	8004ea8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4413      	add	r3, r2
 8004e60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e62:	4b14      	ldr	r3, [pc, #80]	@ (8004eb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d209      	bcs.n	8004e86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e72:	4b12      	ldr	r3, [pc, #72]	@ (8004ebc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4610      	mov	r0, r2
 8004e80:	f7fe fa7f 	bl	8003382 <vListInsert>
}
 8004e84:	e010      	b.n	8004ea8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e86:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	4619      	mov	r1, r3
 8004e92:	4610      	mov	r0, r2
 8004e94:	f7fe fa75 	bl	8003382 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e98:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d202      	bcs.n	8004ea8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004ea2:	4a08      	ldr	r2, [pc, #32]	@ (8004ec4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	6013      	str	r3, [r2, #0]
}
 8004ea8:	bf00      	nop
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	20000d08 	.word	0x20000d08
 8004eb4:	20000830 	.word	0x20000830
 8004eb8:	20000cf0 	.word	0x20000cf0
 8004ebc:	20000cc0 	.word	0x20000cc0
 8004ec0:	20000cbc 	.word	0x20000cbc
 8004ec4:	20000d24 	.word	0x20000d24

08004ec8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08a      	sub	sp, #40	@ 0x28
 8004ecc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004ed2:	f000 fb13 	bl	80054fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8004f4c <xTimerCreateTimerTask+0x84>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d021      	beq.n	8004f22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004ee6:	1d3a      	adds	r2, r7, #4
 8004ee8:	f107 0108 	add.w	r1, r7, #8
 8004eec:	f107 030c 	add.w	r3, r7, #12
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fe f9db 	bl	80032ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	9202      	str	r2, [sp, #8]
 8004efe:	9301      	str	r3, [sp, #4]
 8004f00:	2302      	movs	r3, #2
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	2300      	movs	r3, #0
 8004f06:	460a      	mov	r2, r1
 8004f08:	4911      	ldr	r1, [pc, #68]	@ (8004f50 <xTimerCreateTimerTask+0x88>)
 8004f0a:	4812      	ldr	r0, [pc, #72]	@ (8004f54 <xTimerCreateTimerTask+0x8c>)
 8004f0c:	f7fe ff96 	bl	8003e3c <xTaskCreateStatic>
 8004f10:	4603      	mov	r3, r0
 8004f12:	4a11      	ldr	r2, [pc, #68]	@ (8004f58 <xTimerCreateTimerTask+0x90>)
 8004f14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f16:	4b10      	ldr	r3, [pc, #64]	@ (8004f58 <xTimerCreateTimerTask+0x90>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10b      	bne.n	8004f40 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	613b      	str	r3, [r7, #16]
}
 8004f3a:	bf00      	nop
 8004f3c:	bf00      	nop
 8004f3e:	e7fd      	b.n	8004f3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004f40:	697b      	ldr	r3, [r7, #20]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	20000d60 	.word	0x20000d60
 8004f50:	080067fc 	.word	0x080067fc
 8004f54:	08005095 	.word	0x08005095
 8004f58:	20000d64 	.word	0x20000d64

08004f5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08a      	sub	sp, #40	@ 0x28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10b      	bne.n	8004f8c <xTimerGenericCommand+0x30>
	__asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	623b      	str	r3, [r7, #32]
}
 8004f86:	bf00      	nop
 8004f88:	bf00      	nop
 8004f8a:	e7fd      	b.n	8004f88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004f8c:	4b19      	ldr	r3, [pc, #100]	@ (8004ff4 <xTimerGenericCommand+0x98>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d02a      	beq.n	8004fea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b05      	cmp	r3, #5
 8004fa4:	dc18      	bgt.n	8004fd8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004fa6:	f7ff fd73 	bl	8004a90 <xTaskGetSchedulerState>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d109      	bne.n	8004fc4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004fb0:	4b10      	ldr	r3, [pc, #64]	@ (8004ff4 <xTimerGenericCommand+0x98>)
 8004fb2:	6818      	ldr	r0, [r3, #0]
 8004fb4:	f107 0110 	add.w	r1, r7, #16
 8004fb8:	2300      	movs	r3, #0
 8004fba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fbc:	f7fe fb4e 	bl	800365c <xQueueGenericSend>
 8004fc0:	6278      	str	r0, [r7, #36]	@ 0x24
 8004fc2:	e012      	b.n	8004fea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff4 <xTimerGenericCommand+0x98>)
 8004fc6:	6818      	ldr	r0, [r3, #0]
 8004fc8:	f107 0110 	add.w	r1, r7, #16
 8004fcc:	2300      	movs	r3, #0
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f7fe fb44 	bl	800365c <xQueueGenericSend>
 8004fd4:	6278      	str	r0, [r7, #36]	@ 0x24
 8004fd6:	e008      	b.n	8004fea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004fd8:	4b06      	ldr	r3, [pc, #24]	@ (8004ff4 <xTimerGenericCommand+0x98>)
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	f107 0110 	add.w	r1, r7, #16
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	f7fe fc3c 	bl	8003860 <xQueueGenericSendFromISR>
 8004fe8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3728      	adds	r7, #40	@ 0x28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	20000d60 	.word	0x20000d60

08004ff8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005002:	4b23      	ldr	r3, [pc, #140]	@ (8005090 <prvProcessExpiredTimer+0x98>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	3304      	adds	r3, #4
 8005010:	4618      	mov	r0, r3
 8005012:	f7fe f9ef 	bl	80033f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d023      	beq.n	800506c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	699a      	ldr	r2, [r3, #24]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	18d1      	adds	r1, r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	6978      	ldr	r0, [r7, #20]
 8005032:	f000 f8d5 	bl	80051e0 <prvInsertTimerInActiveList>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d020      	beq.n	800507e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800503c:	2300      	movs	r3, #0
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	2300      	movs	r3, #0
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	2100      	movs	r1, #0
 8005046:	6978      	ldr	r0, [r7, #20]
 8005048:	f7ff ff88 	bl	8004f5c <xTimerGenericCommand>
 800504c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d114      	bne.n	800507e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	60fb      	str	r3, [r7, #12]
}
 8005066:	bf00      	nop
 8005068:	bf00      	nop
 800506a:	e7fd      	b.n	8005068 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005072:	f023 0301 	bic.w	r3, r3, #1
 8005076:	b2da      	uxtb	r2, r3
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	6978      	ldr	r0, [r7, #20]
 8005084:	4798      	blx	r3
}
 8005086:	bf00      	nop
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	20000d58 	.word	0x20000d58

08005094 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800509c:	f107 0308 	add.w	r3, r7, #8
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 f859 	bl	8005158 <prvGetNextExpireTime>
 80050a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	4619      	mov	r1, r3
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f805 	bl	80050bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80050b2:	f000 f8d7 	bl	8005264 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050b6:	bf00      	nop
 80050b8:	e7f0      	b.n	800509c <prvTimerTask+0x8>
	...

080050bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80050c6:	f7ff f8fd 	bl	80042c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050ca:	f107 0308 	add.w	r3, r7, #8
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 f866 	bl	80051a0 <prvSampleTimeNow>
 80050d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d130      	bne.n	800513e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10a      	bne.n	80050f8 <prvProcessTimerOrBlockTask+0x3c>
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d806      	bhi.n	80050f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80050ea:	f7ff f8f9 	bl	80042e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80050ee:	68f9      	ldr	r1, [r7, #12]
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7ff ff81 	bl	8004ff8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80050f6:	e024      	b.n	8005142 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d008      	beq.n	8005110 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80050fe:	4b13      	ldr	r3, [pc, #76]	@ (800514c <prvProcessTimerOrBlockTask+0x90>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <prvProcessTimerOrBlockTask+0x50>
 8005108:	2301      	movs	r3, #1
 800510a:	e000      	b.n	800510e <prvProcessTimerOrBlockTask+0x52>
 800510c:	2300      	movs	r3, #0
 800510e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005110:	4b0f      	ldr	r3, [pc, #60]	@ (8005150 <prvProcessTimerOrBlockTask+0x94>)
 8005112:	6818      	ldr	r0, [r3, #0]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	4619      	mov	r1, r3
 800511e:	f7fe fe59 	bl	8003dd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005122:	f7ff f8dd 	bl	80042e0 <xTaskResumeAll>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10a      	bne.n	8005142 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800512c:	4b09      	ldr	r3, [pc, #36]	@ (8005154 <prvProcessTimerOrBlockTask+0x98>)
 800512e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	f3bf 8f6f 	isb	sy
}
 800513c:	e001      	b.n	8005142 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800513e:	f7ff f8cf 	bl	80042e0 <xTaskResumeAll>
}
 8005142:	bf00      	nop
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	20000d5c 	.word	0x20000d5c
 8005150:	20000d60 	.word	0x20000d60
 8005154:	e000ed04 	.word	0xe000ed04

08005158 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005160:	4b0e      	ldr	r3, [pc, #56]	@ (800519c <prvGetNextExpireTime+0x44>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <prvGetNextExpireTime+0x16>
 800516a:	2201      	movs	r2, #1
 800516c:	e000      	b.n	8005170 <prvGetNextExpireTime+0x18>
 800516e:	2200      	movs	r2, #0
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d105      	bne.n	8005188 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800517c:	4b07      	ldr	r3, [pc, #28]	@ (800519c <prvGetNextExpireTime+0x44>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	e001      	b.n	800518c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800518c:	68fb      	ldr	r3, [r7, #12]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	20000d58 	.word	0x20000d58

080051a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80051a8:	f7ff f938 	bl	800441c <xTaskGetTickCount>
 80051ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80051ae:	4b0b      	ldr	r3, [pc, #44]	@ (80051dc <prvSampleTimeNow+0x3c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d205      	bcs.n	80051c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80051b8:	f000 f93a 	bl	8005430 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	e002      	b.n	80051ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80051ca:	4a04      	ldr	r2, [pc, #16]	@ (80051dc <prvSampleTimeNow+0x3c>)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80051d0:	68fb      	ldr	r3, [r7, #12]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	20000d68 	.word	0x20000d68

080051e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80051ee:	2300      	movs	r3, #0
 80051f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	429a      	cmp	r2, r3
 8005204:	d812      	bhi.n	800522c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	1ad2      	subs	r2, r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	429a      	cmp	r2, r3
 8005212:	d302      	bcc.n	800521a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005214:	2301      	movs	r3, #1
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	e01b      	b.n	8005252 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800521a:	4b10      	ldr	r3, [pc, #64]	@ (800525c <prvInsertTimerInActiveList+0x7c>)
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	3304      	adds	r3, #4
 8005222:	4619      	mov	r1, r3
 8005224:	4610      	mov	r0, r2
 8005226:	f7fe f8ac 	bl	8003382 <vListInsert>
 800522a:	e012      	b.n	8005252 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d206      	bcs.n	8005242 <prvInsertTimerInActiveList+0x62>
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d302      	bcc.n	8005242 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800523c:	2301      	movs	r3, #1
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	e007      	b.n	8005252 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005242:	4b07      	ldr	r3, [pc, #28]	@ (8005260 <prvInsertTimerInActiveList+0x80>)
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	3304      	adds	r3, #4
 800524a:	4619      	mov	r1, r3
 800524c:	4610      	mov	r0, r2
 800524e:	f7fe f898 	bl	8003382 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005252:	697b      	ldr	r3, [r7, #20]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000d5c 	.word	0x20000d5c
 8005260:	20000d58 	.word	0x20000d58

08005264 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08e      	sub	sp, #56	@ 0x38
 8005268:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800526a:	e0ce      	b.n	800540a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	da19      	bge.n	80052a6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005272:	1d3b      	adds	r3, r7, #4
 8005274:	3304      	adds	r3, #4
 8005276:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10b      	bne.n	8005296 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	61fb      	str	r3, [r7, #28]
}
 8005290:	bf00      	nop
 8005292:	bf00      	nop
 8005294:	e7fd      	b.n	8005292 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800529c:	6850      	ldr	r0, [r2, #4]
 800529e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052a0:	6892      	ldr	r2, [r2, #8]
 80052a2:	4611      	mov	r1, r2
 80052a4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f2c0 80ae 	blt.w	800540a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80052b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d004      	beq.n	80052c4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052bc:	3304      	adds	r3, #4
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fe f898 	bl	80033f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052c4:	463b      	mov	r3, r7
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff ff6a 	bl	80051a0 <prvSampleTimeNow>
 80052cc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b09      	cmp	r3, #9
 80052d2:	f200 8097 	bhi.w	8005404 <prvProcessReceivedCommands+0x1a0>
 80052d6:	a201      	add	r2, pc, #4	@ (adr r2, 80052dc <prvProcessReceivedCommands+0x78>)
 80052d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052dc:	08005305 	.word	0x08005305
 80052e0:	08005305 	.word	0x08005305
 80052e4:	08005305 	.word	0x08005305
 80052e8:	0800537b 	.word	0x0800537b
 80052ec:	0800538f 	.word	0x0800538f
 80052f0:	080053db 	.word	0x080053db
 80052f4:	08005305 	.word	0x08005305
 80052f8:	08005305 	.word	0x08005305
 80052fc:	0800537b 	.word	0x0800537b
 8005300:	0800538f 	.word	0x0800538f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005306:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800530a:	f043 0301 	orr.w	r3, r3, #1
 800530e:	b2da      	uxtb	r2, r3
 8005310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005312:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	18d1      	adds	r1, r2, r3
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005322:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005324:	f7ff ff5c 	bl	80051e0 <prvInsertTimerInActiveList>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d06c      	beq.n	8005408 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800532e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005334:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005338:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b00      	cmp	r3, #0
 8005342:	d061      	beq.n	8005408 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	441a      	add	r2, r3
 800534c:	2300      	movs	r3, #0
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	2300      	movs	r3, #0
 8005352:	2100      	movs	r1, #0
 8005354:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005356:	f7ff fe01 	bl	8004f5c <xTimerGenericCommand>
 800535a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d152      	bne.n	8005408 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	61bb      	str	r3, [r7, #24]
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop
 8005378:	e7fd      	b.n	8005376 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800537a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005380:	f023 0301 	bic.w	r3, r3, #1
 8005384:	b2da      	uxtb	r2, r3
 8005386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005388:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800538c:	e03d      	b.n	800540a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800538e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005390:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005394:	f043 0301 	orr.w	r3, r3, #1
 8005398:	b2da      	uxtb	r2, r3
 800539a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80053a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10b      	bne.n	80053c6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	617b      	str	r3, [r7, #20]
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	e7fd      	b.n	80053c2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80053c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c8:	699a      	ldr	r2, [r3, #24]
 80053ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053cc:	18d1      	adds	r1, r2, r3
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053d4:	f7ff ff04 	bl	80051e0 <prvInsertTimerInActiveList>
					break;
 80053d8:	e017      	b.n	800540a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80053da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d103      	bne.n	80053f0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80053e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053ea:	f000 fbe5 	bl	8005bb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80053ee:	e00c      	b.n	800540a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053f6:	f023 0301 	bic.w	r3, r3, #1
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005402:	e002      	b.n	800540a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005404:	bf00      	nop
 8005406:	e000      	b.n	800540a <prvProcessReceivedCommands+0x1a6>
					break;
 8005408:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800540a:	4b08      	ldr	r3, [pc, #32]	@ (800542c <prvProcessReceivedCommands+0x1c8>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	1d39      	adds	r1, r7, #4
 8005410:	2200      	movs	r2, #0
 8005412:	4618      	mov	r0, r3
 8005414:	f7fe fac2 	bl	800399c <xQueueReceive>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	f47f af26 	bne.w	800526c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005420:	bf00      	nop
 8005422:	bf00      	nop
 8005424:	3730      	adds	r7, #48	@ 0x30
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000d60 	.word	0x20000d60

08005430 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005436:	e049      	b.n	80054cc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005438:	4b2e      	ldr	r3, [pc, #184]	@ (80054f4 <prvSwitchTimerLists+0xc4>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005442:	4b2c      	ldr	r3, [pc, #176]	@ (80054f4 <prvSwitchTimerLists+0xc4>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	3304      	adds	r3, #4
 8005450:	4618      	mov	r0, r3
 8005452:	f7fd ffcf 	bl	80033f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d02f      	beq.n	80054cc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4413      	add	r3, r2
 8005474:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	429a      	cmp	r2, r3
 800547c:	d90e      	bls.n	800549c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800548a:	4b1a      	ldr	r3, [pc, #104]	@ (80054f4 <prvSwitchTimerLists+0xc4>)
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	3304      	adds	r3, #4
 8005492:	4619      	mov	r1, r3
 8005494:	4610      	mov	r0, r2
 8005496:	f7fd ff74 	bl	8003382 <vListInsert>
 800549a:	e017      	b.n	80054cc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800549c:	2300      	movs	r3, #0
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	2300      	movs	r3, #0
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	2100      	movs	r1, #0
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f7ff fd58 	bl	8004f5c <xTimerGenericCommand>
 80054ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10b      	bne.n	80054cc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	603b      	str	r3, [r7, #0]
}
 80054c6:	bf00      	nop
 80054c8:	bf00      	nop
 80054ca:	e7fd      	b.n	80054c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054cc:	4b09      	ldr	r3, [pc, #36]	@ (80054f4 <prvSwitchTimerLists+0xc4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1b0      	bne.n	8005438 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80054d6:	4b07      	ldr	r3, [pc, #28]	@ (80054f4 <prvSwitchTimerLists+0xc4>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80054dc:	4b06      	ldr	r3, [pc, #24]	@ (80054f8 <prvSwitchTimerLists+0xc8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a04      	ldr	r2, [pc, #16]	@ (80054f4 <prvSwitchTimerLists+0xc4>)
 80054e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80054e4:	4a04      	ldr	r2, [pc, #16]	@ (80054f8 <prvSwitchTimerLists+0xc8>)
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	6013      	str	r3, [r2, #0]
}
 80054ea:	bf00      	nop
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	20000d58 	.word	0x20000d58
 80054f8:	20000d5c 	.word	0x20000d5c

080054fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005502:	f000 f969 	bl	80057d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005506:	4b15      	ldr	r3, [pc, #84]	@ (800555c <prvCheckForValidListAndQueue+0x60>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d120      	bne.n	8005550 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800550e:	4814      	ldr	r0, [pc, #80]	@ (8005560 <prvCheckForValidListAndQueue+0x64>)
 8005510:	f7fd fee6 	bl	80032e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005514:	4813      	ldr	r0, [pc, #76]	@ (8005564 <prvCheckForValidListAndQueue+0x68>)
 8005516:	f7fd fee3 	bl	80032e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800551a:	4b13      	ldr	r3, [pc, #76]	@ (8005568 <prvCheckForValidListAndQueue+0x6c>)
 800551c:	4a10      	ldr	r2, [pc, #64]	@ (8005560 <prvCheckForValidListAndQueue+0x64>)
 800551e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005520:	4b12      	ldr	r3, [pc, #72]	@ (800556c <prvCheckForValidListAndQueue+0x70>)
 8005522:	4a10      	ldr	r2, [pc, #64]	@ (8005564 <prvCheckForValidListAndQueue+0x68>)
 8005524:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005526:	2300      	movs	r3, #0
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	4b11      	ldr	r3, [pc, #68]	@ (8005570 <prvCheckForValidListAndQueue+0x74>)
 800552c:	4a11      	ldr	r2, [pc, #68]	@ (8005574 <prvCheckForValidListAndQueue+0x78>)
 800552e:	2110      	movs	r1, #16
 8005530:	200a      	movs	r0, #10
 8005532:	f7fd fff3 	bl	800351c <xQueueGenericCreateStatic>
 8005536:	4603      	mov	r3, r0
 8005538:	4a08      	ldr	r2, [pc, #32]	@ (800555c <prvCheckForValidListAndQueue+0x60>)
 800553a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800553c:	4b07      	ldr	r3, [pc, #28]	@ (800555c <prvCheckForValidListAndQueue+0x60>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005544:	4b05      	ldr	r3, [pc, #20]	@ (800555c <prvCheckForValidListAndQueue+0x60>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	490b      	ldr	r1, [pc, #44]	@ (8005578 <prvCheckForValidListAndQueue+0x7c>)
 800554a:	4618      	mov	r0, r3
 800554c:	f7fe fc18 	bl	8003d80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005550:	f000 f974 	bl	800583c <vPortExitCritical>
}
 8005554:	bf00      	nop
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000d60 	.word	0x20000d60
 8005560:	20000d30 	.word	0x20000d30
 8005564:	20000d44 	.word	0x20000d44
 8005568:	20000d58 	.word	0x20000d58
 800556c:	20000d5c 	.word	0x20000d5c
 8005570:	20000e0c 	.word	0x20000e0c
 8005574:	20000d6c 	.word	0x20000d6c
 8005578:	08006804 	.word	0x08006804

0800557c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	3b04      	subs	r3, #4
 800558c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005594:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	3b04      	subs	r3, #4
 800559a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f023 0201 	bic.w	r2, r3, #1
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3b04      	subs	r3, #4
 80055aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80055ac:	4a0c      	ldr	r2, [pc, #48]	@ (80055e0 <pxPortInitialiseStack+0x64>)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3b14      	subs	r3, #20
 80055b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3b04      	subs	r3, #4
 80055c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f06f 0202 	mvn.w	r2, #2
 80055ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	3b20      	subs	r3, #32
 80055d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055d2:	68fb      	ldr	r3, [r7, #12]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	080055e5 	.word	0x080055e5

080055e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80055ea:	2300      	movs	r3, #0
 80055ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055ee:	4b13      	ldr	r3, [pc, #76]	@ (800563c <prvTaskExitError+0x58>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f6:	d00b      	beq.n	8005610 <prvTaskExitError+0x2c>
	__asm volatile
 80055f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	60fb      	str	r3, [r7, #12]
}
 800560a:	bf00      	nop
 800560c:	bf00      	nop
 800560e:	e7fd      	b.n	800560c <prvTaskExitError+0x28>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	60bb      	str	r3, [r7, #8]
}
 8005622:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005624:	bf00      	nop
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0fc      	beq.n	8005626 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800562c:	bf00      	nop
 800562e:	bf00      	nop
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	2000000c 	.word	0x2000000c

08005640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005640:	4b07      	ldr	r3, [pc, #28]	@ (8005660 <pxCurrentTCBConst2>)
 8005642:	6819      	ldr	r1, [r3, #0]
 8005644:	6808      	ldr	r0, [r1, #0]
 8005646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564a:	f380 8809 	msr	PSP, r0
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f04f 0000 	mov.w	r0, #0
 8005656:	f380 8811 	msr	BASEPRI, r0
 800565a:	4770      	bx	lr
 800565c:	f3af 8000 	nop.w

08005660 <pxCurrentTCBConst2>:
 8005660:	20000830 	.word	0x20000830
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005664:	bf00      	nop
 8005666:	bf00      	nop

08005668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005668:	4808      	ldr	r0, [pc, #32]	@ (800568c <prvPortStartFirstTask+0x24>)
 800566a:	6800      	ldr	r0, [r0, #0]
 800566c:	6800      	ldr	r0, [r0, #0]
 800566e:	f380 8808 	msr	MSP, r0
 8005672:	f04f 0000 	mov.w	r0, #0
 8005676:	f380 8814 	msr	CONTROL, r0
 800567a:	b662      	cpsie	i
 800567c:	b661      	cpsie	f
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	df00      	svc	0
 8005688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800568a:	bf00      	nop
 800568c:	e000ed08 	.word	0xe000ed08

08005690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005696:	4b47      	ldr	r3, [pc, #284]	@ (80057b4 <xPortStartScheduler+0x124>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a47      	ldr	r2, [pc, #284]	@ (80057b8 <xPortStartScheduler+0x128>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d10b      	bne.n	80056b8 <xPortStartScheduler+0x28>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	613b      	str	r3, [r7, #16]
}
 80056b2:	bf00      	nop
 80056b4:	bf00      	nop
 80056b6:	e7fd      	b.n	80056b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80056b8:	4b3e      	ldr	r3, [pc, #248]	@ (80057b4 <xPortStartScheduler+0x124>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a3f      	ldr	r2, [pc, #252]	@ (80057bc <xPortStartScheduler+0x12c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d10b      	bne.n	80056da <xPortStartScheduler+0x4a>
	__asm volatile
 80056c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	60fb      	str	r3, [r7, #12]
}
 80056d4:	bf00      	nop
 80056d6:	bf00      	nop
 80056d8:	e7fd      	b.n	80056d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056da:	4b39      	ldr	r3, [pc, #228]	@ (80057c0 <xPortStartScheduler+0x130>)
 80056dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	22ff      	movs	r2, #255	@ 0xff
 80056ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	4b31      	ldr	r3, [pc, #196]	@ (80057c4 <xPortStartScheduler+0x134>)
 8005700:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005702:	4b31      	ldr	r3, [pc, #196]	@ (80057c8 <xPortStartScheduler+0x138>)
 8005704:	2207      	movs	r2, #7
 8005706:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005708:	e009      	b.n	800571e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800570a:	4b2f      	ldr	r3, [pc, #188]	@ (80057c8 <xPortStartScheduler+0x138>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	3b01      	subs	r3, #1
 8005710:	4a2d      	ldr	r2, [pc, #180]	@ (80057c8 <xPortStartScheduler+0x138>)
 8005712:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005714:	78fb      	ldrb	r3, [r7, #3]
 8005716:	b2db      	uxtb	r3, r3
 8005718:	005b      	lsls	r3, r3, #1
 800571a:	b2db      	uxtb	r3, r3
 800571c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800571e:	78fb      	ldrb	r3, [r7, #3]
 8005720:	b2db      	uxtb	r3, r3
 8005722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005726:	2b80      	cmp	r3, #128	@ 0x80
 8005728:	d0ef      	beq.n	800570a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800572a:	4b27      	ldr	r3, [pc, #156]	@ (80057c8 <xPortStartScheduler+0x138>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f1c3 0307 	rsb	r3, r3, #7
 8005732:	2b04      	cmp	r3, #4
 8005734:	d00b      	beq.n	800574e <xPortStartScheduler+0xbe>
	__asm volatile
 8005736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	60bb      	str	r3, [r7, #8]
}
 8005748:	bf00      	nop
 800574a:	bf00      	nop
 800574c:	e7fd      	b.n	800574a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800574e:	4b1e      	ldr	r3, [pc, #120]	@ (80057c8 <xPortStartScheduler+0x138>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	021b      	lsls	r3, r3, #8
 8005754:	4a1c      	ldr	r2, [pc, #112]	@ (80057c8 <xPortStartScheduler+0x138>)
 8005756:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005758:	4b1b      	ldr	r3, [pc, #108]	@ (80057c8 <xPortStartScheduler+0x138>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005760:	4a19      	ldr	r2, [pc, #100]	@ (80057c8 <xPortStartScheduler+0x138>)
 8005762:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	b2da      	uxtb	r2, r3
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800576c:	4b17      	ldr	r3, [pc, #92]	@ (80057cc <xPortStartScheduler+0x13c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a16      	ldr	r2, [pc, #88]	@ (80057cc <xPortStartScheduler+0x13c>)
 8005772:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005776:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005778:	4b14      	ldr	r3, [pc, #80]	@ (80057cc <xPortStartScheduler+0x13c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a13      	ldr	r2, [pc, #76]	@ (80057cc <xPortStartScheduler+0x13c>)
 800577e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005782:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005784:	f000 f8da 	bl	800593c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005788:	4b11      	ldr	r3, [pc, #68]	@ (80057d0 <xPortStartScheduler+0x140>)
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800578e:	f000 f8f9 	bl	8005984 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005792:	4b10      	ldr	r3, [pc, #64]	@ (80057d4 <xPortStartScheduler+0x144>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a0f      	ldr	r2, [pc, #60]	@ (80057d4 <xPortStartScheduler+0x144>)
 8005798:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800579c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800579e:	f7ff ff63 	bl	8005668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80057a2:	f7fe ff05 	bl	80045b0 <vTaskSwitchContext>
	prvTaskExitError();
 80057a6:	f7ff ff1d 	bl	80055e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3718      	adds	r7, #24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	e000ed00 	.word	0xe000ed00
 80057b8:	410fc271 	.word	0x410fc271
 80057bc:	410fc270 	.word	0x410fc270
 80057c0:	e000e400 	.word	0xe000e400
 80057c4:	20000e5c 	.word	0x20000e5c
 80057c8:	20000e60 	.word	0x20000e60
 80057cc:	e000ed20 	.word	0xe000ed20
 80057d0:	2000000c 	.word	0x2000000c
 80057d4:	e000ef34 	.word	0xe000ef34

080057d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	607b      	str	r3, [r7, #4]
}
 80057f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80057f2:	4b10      	ldr	r3, [pc, #64]	@ (8005834 <vPortEnterCritical+0x5c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3301      	adds	r3, #1
 80057f8:	4a0e      	ldr	r2, [pc, #56]	@ (8005834 <vPortEnterCritical+0x5c>)
 80057fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80057fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005834 <vPortEnterCritical+0x5c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d110      	bne.n	8005826 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005804:	4b0c      	ldr	r3, [pc, #48]	@ (8005838 <vPortEnterCritical+0x60>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00b      	beq.n	8005826 <vPortEnterCritical+0x4e>
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	603b      	str	r3, [r7, #0]
}
 8005820:	bf00      	nop
 8005822:	bf00      	nop
 8005824:	e7fd      	b.n	8005822 <vPortEnterCritical+0x4a>
	}
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	2000000c 	.word	0x2000000c
 8005838:	e000ed04 	.word	0xe000ed04

0800583c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005842:	4b12      	ldr	r3, [pc, #72]	@ (800588c <vPortExitCritical+0x50>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10b      	bne.n	8005862 <vPortExitCritical+0x26>
	__asm volatile
 800584a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	607b      	str	r3, [r7, #4]
}
 800585c:	bf00      	nop
 800585e:	bf00      	nop
 8005860:	e7fd      	b.n	800585e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005862:	4b0a      	ldr	r3, [pc, #40]	@ (800588c <vPortExitCritical+0x50>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3b01      	subs	r3, #1
 8005868:	4a08      	ldr	r2, [pc, #32]	@ (800588c <vPortExitCritical+0x50>)
 800586a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800586c:	4b07      	ldr	r3, [pc, #28]	@ (800588c <vPortExitCritical+0x50>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d105      	bne.n	8005880 <vPortExitCritical+0x44>
 8005874:	2300      	movs	r3, #0
 8005876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	f383 8811 	msr	BASEPRI, r3
}
 800587e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	2000000c 	.word	0x2000000c

08005890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005890:	f3ef 8009 	mrs	r0, PSP
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	4b15      	ldr	r3, [pc, #84]	@ (80058f0 <pxCurrentTCBConst>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	f01e 0f10 	tst.w	lr, #16
 80058a0:	bf08      	it	eq
 80058a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80058a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058aa:	6010      	str	r0, [r2, #0]
 80058ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80058b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80058b4:	f380 8811 	msr	BASEPRI, r0
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f7fe fe76 	bl	80045b0 <vTaskSwitchContext>
 80058c4:	f04f 0000 	mov.w	r0, #0
 80058c8:	f380 8811 	msr	BASEPRI, r0
 80058cc:	bc09      	pop	{r0, r3}
 80058ce:	6819      	ldr	r1, [r3, #0]
 80058d0:	6808      	ldr	r0, [r1, #0]
 80058d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d6:	f01e 0f10 	tst.w	lr, #16
 80058da:	bf08      	it	eq
 80058dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058e0:	f380 8809 	msr	PSP, r0
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	f3af 8000 	nop.w

080058f0 <pxCurrentTCBConst>:
 80058f0:	20000830 	.word	0x20000830
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop

080058f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
	__asm volatile
 80058fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	607b      	str	r3, [r7, #4]
}
 8005910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005912:	f7fe fd93 	bl	800443c <xTaskIncrementTick>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800591c:	4b06      	ldr	r3, [pc, #24]	@ (8005938 <xPortSysTickHandler+0x40>)
 800591e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	2300      	movs	r3, #0
 8005926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	f383 8811 	msr	BASEPRI, r3
}
 800592e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005930:	bf00      	nop
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	e000ed04 	.word	0xe000ed04

0800593c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005940:	4b0b      	ldr	r3, [pc, #44]	@ (8005970 <vPortSetupTimerInterrupt+0x34>)
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005946:	4b0b      	ldr	r3, [pc, #44]	@ (8005974 <vPortSetupTimerInterrupt+0x38>)
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800594c:	4b0a      	ldr	r3, [pc, #40]	@ (8005978 <vPortSetupTimerInterrupt+0x3c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a0a      	ldr	r2, [pc, #40]	@ (800597c <vPortSetupTimerInterrupt+0x40>)
 8005952:	fba2 2303 	umull	r2, r3, r2, r3
 8005956:	099b      	lsrs	r3, r3, #6
 8005958:	4a09      	ldr	r2, [pc, #36]	@ (8005980 <vPortSetupTimerInterrupt+0x44>)
 800595a:	3b01      	subs	r3, #1
 800595c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800595e:	4b04      	ldr	r3, [pc, #16]	@ (8005970 <vPortSetupTimerInterrupt+0x34>)
 8005960:	2207      	movs	r2, #7
 8005962:	601a      	str	r2, [r3, #0]
}
 8005964:	bf00      	nop
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	e000e010 	.word	0xe000e010
 8005974:	e000e018 	.word	0xe000e018
 8005978:	20000000 	.word	0x20000000
 800597c:	10624dd3 	.word	0x10624dd3
 8005980:	e000e014 	.word	0xe000e014

08005984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005984:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005994 <vPortEnableVFP+0x10>
 8005988:	6801      	ldr	r1, [r0, #0]
 800598a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800598e:	6001      	str	r1, [r0, #0]
 8005990:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005992:	bf00      	nop
 8005994:	e000ed88 	.word	0xe000ed88

08005998 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800599e:	f3ef 8305 	mrs	r3, IPSR
 80059a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b0f      	cmp	r3, #15
 80059a8:	d915      	bls.n	80059d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80059aa:	4a18      	ldr	r2, [pc, #96]	@ (8005a0c <vPortValidateInterruptPriority+0x74>)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80059b4:	4b16      	ldr	r3, [pc, #88]	@ (8005a10 <vPortValidateInterruptPriority+0x78>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	7afa      	ldrb	r2, [r7, #11]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d20b      	bcs.n	80059d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	607b      	str	r3, [r7, #4]
}
 80059d0:	bf00      	nop
 80059d2:	bf00      	nop
 80059d4:	e7fd      	b.n	80059d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80059d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005a14 <vPortValidateInterruptPriority+0x7c>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80059de:	4b0e      	ldr	r3, [pc, #56]	@ (8005a18 <vPortValidateInterruptPriority+0x80>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d90b      	bls.n	80059fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80059e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	603b      	str	r3, [r7, #0]
}
 80059f8:	bf00      	nop
 80059fa:	bf00      	nop
 80059fc:	e7fd      	b.n	80059fa <vPortValidateInterruptPriority+0x62>
	}
 80059fe:	bf00      	nop
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	e000e3f0 	.word	0xe000e3f0
 8005a10:	20000e5c 	.word	0x20000e5c
 8005a14:	e000ed0c 	.word	0xe000ed0c
 8005a18:	20000e60 	.word	0x20000e60

08005a1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08a      	sub	sp, #40	@ 0x28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a24:	2300      	movs	r3, #0
 8005a26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a28:	f7fe fc4c 	bl	80042c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a2c:	4b5c      	ldr	r3, [pc, #368]	@ (8005ba0 <pvPortMalloc+0x184>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a34:	f000 f924 	bl	8005c80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a38:	4b5a      	ldr	r3, [pc, #360]	@ (8005ba4 <pvPortMalloc+0x188>)
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f040 8095 	bne.w	8005b70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01e      	beq.n	8005a8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005a4c:	2208      	movs	r2, #8
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4413      	add	r3, r2
 8005a52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f003 0307 	and.w	r3, r3, #7
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d015      	beq.n	8005a8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f023 0307 	bic.w	r3, r3, #7
 8005a64:	3308      	adds	r3, #8
 8005a66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00b      	beq.n	8005a8a <pvPortMalloc+0x6e>
	__asm volatile
 8005a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	617b      	str	r3, [r7, #20]
}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop
 8005a88:	e7fd      	b.n	8005a86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d06f      	beq.n	8005b70 <pvPortMalloc+0x154>
 8005a90:	4b45      	ldr	r3, [pc, #276]	@ (8005ba8 <pvPortMalloc+0x18c>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d86a      	bhi.n	8005b70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a9a:	4b44      	ldr	r3, [pc, #272]	@ (8005bac <pvPortMalloc+0x190>)
 8005a9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a9e:	4b43      	ldr	r3, [pc, #268]	@ (8005bac <pvPortMalloc+0x190>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005aa4:	e004      	b.n	8005ab0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d903      	bls.n	8005ac2 <pvPortMalloc+0xa6>
 8005aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1f1      	bne.n	8005aa6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ac2:	4b37      	ldr	r3, [pc, #220]	@ (8005ba0 <pvPortMalloc+0x184>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d051      	beq.n	8005b70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2208      	movs	r2, #8
 8005ad2:	4413      	add	r3, r2
 8005ad4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	1ad2      	subs	r2, r2, r3
 8005ae6:	2308      	movs	r3, #8
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d920      	bls.n	8005b30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4413      	add	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00b      	beq.n	8005b18 <pvPortMalloc+0xfc>
	__asm volatile
 8005b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	613b      	str	r3, [r7, #16]
}
 8005b12:	bf00      	nop
 8005b14:	bf00      	nop
 8005b16:	e7fd      	b.n	8005b14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	1ad2      	subs	r2, r2, r3
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b2a:	69b8      	ldr	r0, [r7, #24]
 8005b2c:	f000 f90a 	bl	8005d44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b30:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba8 <pvPortMalloc+0x18c>)
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ba8 <pvPortMalloc+0x18c>)
 8005b3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ba8 <pvPortMalloc+0x18c>)
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	4b1b      	ldr	r3, [pc, #108]	@ (8005bb0 <pvPortMalloc+0x194>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d203      	bcs.n	8005b52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b4a:	4b17      	ldr	r3, [pc, #92]	@ (8005ba8 <pvPortMalloc+0x18c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a18      	ldr	r2, [pc, #96]	@ (8005bb0 <pvPortMalloc+0x194>)
 8005b50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	4b13      	ldr	r3, [pc, #76]	@ (8005ba4 <pvPortMalloc+0x188>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b66:	4b13      	ldr	r3, [pc, #76]	@ (8005bb4 <pvPortMalloc+0x198>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	4a11      	ldr	r2, [pc, #68]	@ (8005bb4 <pvPortMalloc+0x198>)
 8005b6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b70:	f7fe fbb6 	bl	80042e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00b      	beq.n	8005b96 <pvPortMalloc+0x17a>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	60fb      	str	r3, [r7, #12]
}
 8005b90:	bf00      	nop
 8005b92:	bf00      	nop
 8005b94:	e7fd      	b.n	8005b92 <pvPortMalloc+0x176>
	return pvReturn;
 8005b96:	69fb      	ldr	r3, [r7, #28]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3728      	adds	r7, #40	@ 0x28
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	20001a6c 	.word	0x20001a6c
 8005ba4:	20001a80 	.word	0x20001a80
 8005ba8:	20001a70 	.word	0x20001a70
 8005bac:	20001a64 	.word	0x20001a64
 8005bb0:	20001a74 	.word	0x20001a74
 8005bb4:	20001a78 	.word	0x20001a78

08005bb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d04f      	beq.n	8005c6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bca:	2308      	movs	r3, #8
 8005bcc:	425b      	negs	r3, r3
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	4b25      	ldr	r3, [pc, #148]	@ (8005c74 <vPortFree+0xbc>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4013      	ands	r3, r2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10b      	bne.n	8005bfe <vPortFree+0x46>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	60fb      	str	r3, [r7, #12]
}
 8005bf8:	bf00      	nop
 8005bfa:	bf00      	nop
 8005bfc:	e7fd      	b.n	8005bfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00b      	beq.n	8005c1e <vPortFree+0x66>
	__asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	60bb      	str	r3, [r7, #8]
}
 8005c18:	bf00      	nop
 8005c1a:	bf00      	nop
 8005c1c:	e7fd      	b.n	8005c1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	4b14      	ldr	r3, [pc, #80]	@ (8005c74 <vPortFree+0xbc>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4013      	ands	r3, r2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d01e      	beq.n	8005c6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d11a      	bne.n	8005c6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	4b0e      	ldr	r3, [pc, #56]	@ (8005c74 <vPortFree+0xbc>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	43db      	mvns	r3, r3
 8005c3e:	401a      	ands	r2, r3
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c44:	f7fe fb3e 	bl	80042c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c78 <vPortFree+0xc0>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4413      	add	r3, r2
 8005c52:	4a09      	ldr	r2, [pc, #36]	@ (8005c78 <vPortFree+0xc0>)
 8005c54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c56:	6938      	ldr	r0, [r7, #16]
 8005c58:	f000 f874 	bl	8005d44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c5c:	4b07      	ldr	r3, [pc, #28]	@ (8005c7c <vPortFree+0xc4>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3301      	adds	r3, #1
 8005c62:	4a06      	ldr	r2, [pc, #24]	@ (8005c7c <vPortFree+0xc4>)
 8005c64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c66:	f7fe fb3b 	bl	80042e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c6a:	bf00      	nop
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20001a80 	.word	0x20001a80
 8005c78:	20001a70 	.word	0x20001a70
 8005c7c:	20001a7c 	.word	0x20001a7c

08005c80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c86:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005c8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c8c:	4b27      	ldr	r3, [pc, #156]	@ (8005d2c <prvHeapInit+0xac>)
 8005c8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f003 0307 	and.w	r3, r3, #7
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00c      	beq.n	8005cb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3307      	adds	r3, #7
 8005c9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 0307 	bic.w	r3, r3, #7
 8005ca6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	4a1f      	ldr	r2, [pc, #124]	@ (8005d2c <prvHeapInit+0xac>)
 8005cb0:	4413      	add	r3, r2
 8005cb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d30 <prvHeapInit+0xb0>)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8005d30 <prvHeapInit+0xb0>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	4413      	add	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ccc:	2208      	movs	r2, #8
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	1a9b      	subs	r3, r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0307 	bic.w	r3, r3, #7
 8005cda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4a15      	ldr	r2, [pc, #84]	@ (8005d34 <prvHeapInit+0xb4>)
 8005ce0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ce2:	4b14      	ldr	r3, [pc, #80]	@ (8005d34 <prvHeapInit+0xb4>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cea:	4b12      	ldr	r3, [pc, #72]	@ (8005d34 <prvHeapInit+0xb4>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	1ad2      	subs	r2, r2, r3
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d00:	4b0c      	ldr	r3, [pc, #48]	@ (8005d34 <prvHeapInit+0xb4>)
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8005d38 <prvHeapInit+0xb8>)
 8005d0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	4a09      	ldr	r2, [pc, #36]	@ (8005d3c <prvHeapInit+0xbc>)
 8005d16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d18:	4b09      	ldr	r3, [pc, #36]	@ (8005d40 <prvHeapInit+0xc0>)
 8005d1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005d1e:	601a      	str	r2, [r3, #0]
}
 8005d20:	bf00      	nop
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	20000e64 	.word	0x20000e64
 8005d30:	20001a64 	.word	0x20001a64
 8005d34:	20001a6c 	.word	0x20001a6c
 8005d38:	20001a74 	.word	0x20001a74
 8005d3c:	20001a70 	.word	0x20001a70
 8005d40:	20001a80 	.word	0x20001a80

08005d44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d4c:	4b28      	ldr	r3, [pc, #160]	@ (8005df0 <prvInsertBlockIntoFreeList+0xac>)
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	e002      	b.n	8005d58 <prvInsertBlockIntoFreeList+0x14>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d8f7      	bhi.n	8005d52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d108      	bne.n	8005d86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	441a      	add	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	441a      	add	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d118      	bne.n	8005dcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	4b15      	ldr	r3, [pc, #84]	@ (8005df4 <prvInsertBlockIntoFreeList+0xb0>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d00d      	beq.n	8005dc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	441a      	add	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	e008      	b.n	8005dd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8005df4 <prvInsertBlockIntoFreeList+0xb0>)
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	e003      	b.n	8005dd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d002      	beq.n	8005de2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005de2:	bf00      	nop
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	20001a64 	.word	0x20001a64
 8005df4:	20001a6c 	.word	0x20001a6c

08005df8 <std>:
 8005df8:	2300      	movs	r3, #0
 8005dfa:	b510      	push	{r4, lr}
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	e9c0 3300 	strd	r3, r3, [r0]
 8005e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e06:	6083      	str	r3, [r0, #8]
 8005e08:	8181      	strh	r1, [r0, #12]
 8005e0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e0c:	81c2      	strh	r2, [r0, #14]
 8005e0e:	6183      	str	r3, [r0, #24]
 8005e10:	4619      	mov	r1, r3
 8005e12:	2208      	movs	r2, #8
 8005e14:	305c      	adds	r0, #92	@ 0x5c
 8005e16:	f000 f9e7 	bl	80061e8 <memset>
 8005e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e50 <std+0x58>)
 8005e1c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e54 <std+0x5c>)
 8005e20:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005e22:	4b0d      	ldr	r3, [pc, #52]	@ (8005e58 <std+0x60>)
 8005e24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005e26:	4b0d      	ldr	r3, [pc, #52]	@ (8005e5c <std+0x64>)
 8005e28:	6323      	str	r3, [r4, #48]	@ 0x30
 8005e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e60 <std+0x68>)
 8005e2c:	6224      	str	r4, [r4, #32]
 8005e2e:	429c      	cmp	r4, r3
 8005e30:	d006      	beq.n	8005e40 <std+0x48>
 8005e32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005e36:	4294      	cmp	r4, r2
 8005e38:	d002      	beq.n	8005e40 <std+0x48>
 8005e3a:	33d0      	adds	r3, #208	@ 0xd0
 8005e3c:	429c      	cmp	r4, r3
 8005e3e:	d105      	bne.n	8005e4c <std+0x54>
 8005e40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e48:	f000 ba46 	b.w	80062d8 <__retarget_lock_init_recursive>
 8005e4c:	bd10      	pop	{r4, pc}
 8005e4e:	bf00      	nop
 8005e50:	08006039 	.word	0x08006039
 8005e54:	0800605b 	.word	0x0800605b
 8005e58:	08006093 	.word	0x08006093
 8005e5c:	080060b7 	.word	0x080060b7
 8005e60:	20001a84 	.word	0x20001a84

08005e64 <stdio_exit_handler>:
 8005e64:	4a02      	ldr	r2, [pc, #8]	@ (8005e70 <stdio_exit_handler+0xc>)
 8005e66:	4903      	ldr	r1, [pc, #12]	@ (8005e74 <stdio_exit_handler+0x10>)
 8005e68:	4803      	ldr	r0, [pc, #12]	@ (8005e78 <stdio_exit_handler+0x14>)
 8005e6a:	f000 b869 	b.w	8005f40 <_fwalk_sglue>
 8005e6e:	bf00      	nop
 8005e70:	20000010 	.word	0x20000010
 8005e74:	080065f5 	.word	0x080065f5
 8005e78:	20000020 	.word	0x20000020

08005e7c <cleanup_stdio>:
 8005e7c:	6841      	ldr	r1, [r0, #4]
 8005e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005eb0 <cleanup_stdio+0x34>)
 8005e80:	4299      	cmp	r1, r3
 8005e82:	b510      	push	{r4, lr}
 8005e84:	4604      	mov	r4, r0
 8005e86:	d001      	beq.n	8005e8c <cleanup_stdio+0x10>
 8005e88:	f000 fbb4 	bl	80065f4 <_fflush_r>
 8005e8c:	68a1      	ldr	r1, [r4, #8]
 8005e8e:	4b09      	ldr	r3, [pc, #36]	@ (8005eb4 <cleanup_stdio+0x38>)
 8005e90:	4299      	cmp	r1, r3
 8005e92:	d002      	beq.n	8005e9a <cleanup_stdio+0x1e>
 8005e94:	4620      	mov	r0, r4
 8005e96:	f000 fbad 	bl	80065f4 <_fflush_r>
 8005e9a:	68e1      	ldr	r1, [r4, #12]
 8005e9c:	4b06      	ldr	r3, [pc, #24]	@ (8005eb8 <cleanup_stdio+0x3c>)
 8005e9e:	4299      	cmp	r1, r3
 8005ea0:	d004      	beq.n	8005eac <cleanup_stdio+0x30>
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ea8:	f000 bba4 	b.w	80065f4 <_fflush_r>
 8005eac:	bd10      	pop	{r4, pc}
 8005eae:	bf00      	nop
 8005eb0:	20001a84 	.word	0x20001a84
 8005eb4:	20001aec 	.word	0x20001aec
 8005eb8:	20001b54 	.word	0x20001b54

08005ebc <global_stdio_init.part.0>:
 8005ebc:	b510      	push	{r4, lr}
 8005ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8005eec <global_stdio_init.part.0+0x30>)
 8005ec0:	4c0b      	ldr	r4, [pc, #44]	@ (8005ef0 <global_stdio_init.part.0+0x34>)
 8005ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8005ef4 <global_stdio_init.part.0+0x38>)
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2104      	movs	r1, #4
 8005ecc:	f7ff ff94 	bl	8005df8 <std>
 8005ed0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	2109      	movs	r1, #9
 8005ed8:	f7ff ff8e 	bl	8005df8 <std>
 8005edc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ee6:	2112      	movs	r1, #18
 8005ee8:	f7ff bf86 	b.w	8005df8 <std>
 8005eec:	20001bbc 	.word	0x20001bbc
 8005ef0:	20001a84 	.word	0x20001a84
 8005ef4:	08005e65 	.word	0x08005e65

08005ef8 <__sfp_lock_acquire>:
 8005ef8:	4801      	ldr	r0, [pc, #4]	@ (8005f00 <__sfp_lock_acquire+0x8>)
 8005efa:	f000 b9ee 	b.w	80062da <__retarget_lock_acquire_recursive>
 8005efe:	bf00      	nop
 8005f00:	20001bc5 	.word	0x20001bc5

08005f04 <__sfp_lock_release>:
 8005f04:	4801      	ldr	r0, [pc, #4]	@ (8005f0c <__sfp_lock_release+0x8>)
 8005f06:	f000 b9e9 	b.w	80062dc <__retarget_lock_release_recursive>
 8005f0a:	bf00      	nop
 8005f0c:	20001bc5 	.word	0x20001bc5

08005f10 <__sinit>:
 8005f10:	b510      	push	{r4, lr}
 8005f12:	4604      	mov	r4, r0
 8005f14:	f7ff fff0 	bl	8005ef8 <__sfp_lock_acquire>
 8005f18:	6a23      	ldr	r3, [r4, #32]
 8005f1a:	b11b      	cbz	r3, 8005f24 <__sinit+0x14>
 8005f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f20:	f7ff bff0 	b.w	8005f04 <__sfp_lock_release>
 8005f24:	4b04      	ldr	r3, [pc, #16]	@ (8005f38 <__sinit+0x28>)
 8005f26:	6223      	str	r3, [r4, #32]
 8005f28:	4b04      	ldr	r3, [pc, #16]	@ (8005f3c <__sinit+0x2c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1f5      	bne.n	8005f1c <__sinit+0xc>
 8005f30:	f7ff ffc4 	bl	8005ebc <global_stdio_init.part.0>
 8005f34:	e7f2      	b.n	8005f1c <__sinit+0xc>
 8005f36:	bf00      	nop
 8005f38:	08005e7d 	.word	0x08005e7d
 8005f3c:	20001bbc 	.word	0x20001bbc

08005f40 <_fwalk_sglue>:
 8005f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f44:	4607      	mov	r7, r0
 8005f46:	4688      	mov	r8, r1
 8005f48:	4614      	mov	r4, r2
 8005f4a:	2600      	movs	r6, #0
 8005f4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f50:	f1b9 0901 	subs.w	r9, r9, #1
 8005f54:	d505      	bpl.n	8005f62 <_fwalk_sglue+0x22>
 8005f56:	6824      	ldr	r4, [r4, #0]
 8005f58:	2c00      	cmp	r4, #0
 8005f5a:	d1f7      	bne.n	8005f4c <_fwalk_sglue+0xc>
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f62:	89ab      	ldrh	r3, [r5, #12]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d907      	bls.n	8005f78 <_fwalk_sglue+0x38>
 8005f68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	d003      	beq.n	8005f78 <_fwalk_sglue+0x38>
 8005f70:	4629      	mov	r1, r5
 8005f72:	4638      	mov	r0, r7
 8005f74:	47c0      	blx	r8
 8005f76:	4306      	orrs	r6, r0
 8005f78:	3568      	adds	r5, #104	@ 0x68
 8005f7a:	e7e9      	b.n	8005f50 <_fwalk_sglue+0x10>

08005f7c <_puts_r>:
 8005f7c:	6a03      	ldr	r3, [r0, #32]
 8005f7e:	b570      	push	{r4, r5, r6, lr}
 8005f80:	6884      	ldr	r4, [r0, #8]
 8005f82:	4605      	mov	r5, r0
 8005f84:	460e      	mov	r6, r1
 8005f86:	b90b      	cbnz	r3, 8005f8c <_puts_r+0x10>
 8005f88:	f7ff ffc2 	bl	8005f10 <__sinit>
 8005f8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f8e:	07db      	lsls	r3, r3, #31
 8005f90:	d405      	bmi.n	8005f9e <_puts_r+0x22>
 8005f92:	89a3      	ldrh	r3, [r4, #12]
 8005f94:	0598      	lsls	r0, r3, #22
 8005f96:	d402      	bmi.n	8005f9e <_puts_r+0x22>
 8005f98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f9a:	f000 f99e 	bl	80062da <__retarget_lock_acquire_recursive>
 8005f9e:	89a3      	ldrh	r3, [r4, #12]
 8005fa0:	0719      	lsls	r1, r3, #28
 8005fa2:	d502      	bpl.n	8005faa <_puts_r+0x2e>
 8005fa4:	6923      	ldr	r3, [r4, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d135      	bne.n	8006016 <_puts_r+0x9a>
 8005faa:	4621      	mov	r1, r4
 8005fac:	4628      	mov	r0, r5
 8005fae:	f000 f8c5 	bl	800613c <__swsetup_r>
 8005fb2:	b380      	cbz	r0, 8006016 <_puts_r+0x9a>
 8005fb4:	f04f 35ff 	mov.w	r5, #4294967295
 8005fb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fba:	07da      	lsls	r2, r3, #31
 8005fbc:	d405      	bmi.n	8005fca <_puts_r+0x4e>
 8005fbe:	89a3      	ldrh	r3, [r4, #12]
 8005fc0:	059b      	lsls	r3, r3, #22
 8005fc2:	d402      	bmi.n	8005fca <_puts_r+0x4e>
 8005fc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fc6:	f000 f989 	bl	80062dc <__retarget_lock_release_recursive>
 8005fca:	4628      	mov	r0, r5
 8005fcc:	bd70      	pop	{r4, r5, r6, pc}
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	da04      	bge.n	8005fdc <_puts_r+0x60>
 8005fd2:	69a2      	ldr	r2, [r4, #24]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	dc17      	bgt.n	8006008 <_puts_r+0x8c>
 8005fd8:	290a      	cmp	r1, #10
 8005fda:	d015      	beq.n	8006008 <_puts_r+0x8c>
 8005fdc:	6823      	ldr	r3, [r4, #0]
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	6022      	str	r2, [r4, #0]
 8005fe2:	7019      	strb	r1, [r3, #0]
 8005fe4:	68a3      	ldr	r3, [r4, #8]
 8005fe6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005fea:	3b01      	subs	r3, #1
 8005fec:	60a3      	str	r3, [r4, #8]
 8005fee:	2900      	cmp	r1, #0
 8005ff0:	d1ed      	bne.n	8005fce <_puts_r+0x52>
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	da11      	bge.n	800601a <_puts_r+0x9e>
 8005ff6:	4622      	mov	r2, r4
 8005ff8:	210a      	movs	r1, #10
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	f000 f85f 	bl	80060be <__swbuf_r>
 8006000:	3001      	adds	r0, #1
 8006002:	d0d7      	beq.n	8005fb4 <_puts_r+0x38>
 8006004:	250a      	movs	r5, #10
 8006006:	e7d7      	b.n	8005fb8 <_puts_r+0x3c>
 8006008:	4622      	mov	r2, r4
 800600a:	4628      	mov	r0, r5
 800600c:	f000 f857 	bl	80060be <__swbuf_r>
 8006010:	3001      	adds	r0, #1
 8006012:	d1e7      	bne.n	8005fe4 <_puts_r+0x68>
 8006014:	e7ce      	b.n	8005fb4 <_puts_r+0x38>
 8006016:	3e01      	subs	r6, #1
 8006018:	e7e4      	b.n	8005fe4 <_puts_r+0x68>
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	6022      	str	r2, [r4, #0]
 8006020:	220a      	movs	r2, #10
 8006022:	701a      	strb	r2, [r3, #0]
 8006024:	e7ee      	b.n	8006004 <_puts_r+0x88>
	...

08006028 <puts>:
 8006028:	4b02      	ldr	r3, [pc, #8]	@ (8006034 <puts+0xc>)
 800602a:	4601      	mov	r1, r0
 800602c:	6818      	ldr	r0, [r3, #0]
 800602e:	f7ff bfa5 	b.w	8005f7c <_puts_r>
 8006032:	bf00      	nop
 8006034:	2000001c 	.word	0x2000001c

08006038 <__sread>:
 8006038:	b510      	push	{r4, lr}
 800603a:	460c      	mov	r4, r1
 800603c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006040:	f000 f8fc 	bl	800623c <_read_r>
 8006044:	2800      	cmp	r0, #0
 8006046:	bfab      	itete	ge
 8006048:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800604a:	89a3      	ldrhlt	r3, [r4, #12]
 800604c:	181b      	addge	r3, r3, r0
 800604e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006052:	bfac      	ite	ge
 8006054:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006056:	81a3      	strhlt	r3, [r4, #12]
 8006058:	bd10      	pop	{r4, pc}

0800605a <__swrite>:
 800605a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800605e:	461f      	mov	r7, r3
 8006060:	898b      	ldrh	r3, [r1, #12]
 8006062:	05db      	lsls	r3, r3, #23
 8006064:	4605      	mov	r5, r0
 8006066:	460c      	mov	r4, r1
 8006068:	4616      	mov	r6, r2
 800606a:	d505      	bpl.n	8006078 <__swrite+0x1e>
 800606c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006070:	2302      	movs	r3, #2
 8006072:	2200      	movs	r2, #0
 8006074:	f000 f8d0 	bl	8006218 <_lseek_r>
 8006078:	89a3      	ldrh	r3, [r4, #12]
 800607a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800607e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006082:	81a3      	strh	r3, [r4, #12]
 8006084:	4632      	mov	r2, r6
 8006086:	463b      	mov	r3, r7
 8006088:	4628      	mov	r0, r5
 800608a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800608e:	f000 b8e7 	b.w	8006260 <_write_r>

08006092 <__sseek>:
 8006092:	b510      	push	{r4, lr}
 8006094:	460c      	mov	r4, r1
 8006096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800609a:	f000 f8bd 	bl	8006218 <_lseek_r>
 800609e:	1c43      	adds	r3, r0, #1
 80060a0:	89a3      	ldrh	r3, [r4, #12]
 80060a2:	bf15      	itete	ne
 80060a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80060a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80060aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80060ae:	81a3      	strheq	r3, [r4, #12]
 80060b0:	bf18      	it	ne
 80060b2:	81a3      	strhne	r3, [r4, #12]
 80060b4:	bd10      	pop	{r4, pc}

080060b6 <__sclose>:
 80060b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ba:	f000 b89d 	b.w	80061f8 <_close_r>

080060be <__swbuf_r>:
 80060be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c0:	460e      	mov	r6, r1
 80060c2:	4614      	mov	r4, r2
 80060c4:	4605      	mov	r5, r0
 80060c6:	b118      	cbz	r0, 80060d0 <__swbuf_r+0x12>
 80060c8:	6a03      	ldr	r3, [r0, #32]
 80060ca:	b90b      	cbnz	r3, 80060d0 <__swbuf_r+0x12>
 80060cc:	f7ff ff20 	bl	8005f10 <__sinit>
 80060d0:	69a3      	ldr	r3, [r4, #24]
 80060d2:	60a3      	str	r3, [r4, #8]
 80060d4:	89a3      	ldrh	r3, [r4, #12]
 80060d6:	071a      	lsls	r2, r3, #28
 80060d8:	d501      	bpl.n	80060de <__swbuf_r+0x20>
 80060da:	6923      	ldr	r3, [r4, #16]
 80060dc:	b943      	cbnz	r3, 80060f0 <__swbuf_r+0x32>
 80060de:	4621      	mov	r1, r4
 80060e0:	4628      	mov	r0, r5
 80060e2:	f000 f82b 	bl	800613c <__swsetup_r>
 80060e6:	b118      	cbz	r0, 80060f0 <__swbuf_r+0x32>
 80060e8:	f04f 37ff 	mov.w	r7, #4294967295
 80060ec:	4638      	mov	r0, r7
 80060ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	6922      	ldr	r2, [r4, #16]
 80060f4:	1a98      	subs	r0, r3, r2
 80060f6:	6963      	ldr	r3, [r4, #20]
 80060f8:	b2f6      	uxtb	r6, r6
 80060fa:	4283      	cmp	r3, r0
 80060fc:	4637      	mov	r7, r6
 80060fe:	dc05      	bgt.n	800610c <__swbuf_r+0x4e>
 8006100:	4621      	mov	r1, r4
 8006102:	4628      	mov	r0, r5
 8006104:	f000 fa76 	bl	80065f4 <_fflush_r>
 8006108:	2800      	cmp	r0, #0
 800610a:	d1ed      	bne.n	80060e8 <__swbuf_r+0x2a>
 800610c:	68a3      	ldr	r3, [r4, #8]
 800610e:	3b01      	subs	r3, #1
 8006110:	60a3      	str	r3, [r4, #8]
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	6022      	str	r2, [r4, #0]
 8006118:	701e      	strb	r6, [r3, #0]
 800611a:	6962      	ldr	r2, [r4, #20]
 800611c:	1c43      	adds	r3, r0, #1
 800611e:	429a      	cmp	r2, r3
 8006120:	d004      	beq.n	800612c <__swbuf_r+0x6e>
 8006122:	89a3      	ldrh	r3, [r4, #12]
 8006124:	07db      	lsls	r3, r3, #31
 8006126:	d5e1      	bpl.n	80060ec <__swbuf_r+0x2e>
 8006128:	2e0a      	cmp	r6, #10
 800612a:	d1df      	bne.n	80060ec <__swbuf_r+0x2e>
 800612c:	4621      	mov	r1, r4
 800612e:	4628      	mov	r0, r5
 8006130:	f000 fa60 	bl	80065f4 <_fflush_r>
 8006134:	2800      	cmp	r0, #0
 8006136:	d0d9      	beq.n	80060ec <__swbuf_r+0x2e>
 8006138:	e7d6      	b.n	80060e8 <__swbuf_r+0x2a>
	...

0800613c <__swsetup_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	4b29      	ldr	r3, [pc, #164]	@ (80061e4 <__swsetup_r+0xa8>)
 8006140:	4605      	mov	r5, r0
 8006142:	6818      	ldr	r0, [r3, #0]
 8006144:	460c      	mov	r4, r1
 8006146:	b118      	cbz	r0, 8006150 <__swsetup_r+0x14>
 8006148:	6a03      	ldr	r3, [r0, #32]
 800614a:	b90b      	cbnz	r3, 8006150 <__swsetup_r+0x14>
 800614c:	f7ff fee0 	bl	8005f10 <__sinit>
 8006150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006154:	0719      	lsls	r1, r3, #28
 8006156:	d422      	bmi.n	800619e <__swsetup_r+0x62>
 8006158:	06da      	lsls	r2, r3, #27
 800615a:	d407      	bmi.n	800616c <__swsetup_r+0x30>
 800615c:	2209      	movs	r2, #9
 800615e:	602a      	str	r2, [r5, #0]
 8006160:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006164:	81a3      	strh	r3, [r4, #12]
 8006166:	f04f 30ff 	mov.w	r0, #4294967295
 800616a:	e033      	b.n	80061d4 <__swsetup_r+0x98>
 800616c:	0758      	lsls	r0, r3, #29
 800616e:	d512      	bpl.n	8006196 <__swsetup_r+0x5a>
 8006170:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006172:	b141      	cbz	r1, 8006186 <__swsetup_r+0x4a>
 8006174:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006178:	4299      	cmp	r1, r3
 800617a:	d002      	beq.n	8006182 <__swsetup_r+0x46>
 800617c:	4628      	mov	r0, r5
 800617e:	f000 f8bd 	bl	80062fc <_free_r>
 8006182:	2300      	movs	r3, #0
 8006184:	6363      	str	r3, [r4, #52]	@ 0x34
 8006186:	89a3      	ldrh	r3, [r4, #12]
 8006188:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800618c:	81a3      	strh	r3, [r4, #12]
 800618e:	2300      	movs	r3, #0
 8006190:	6063      	str	r3, [r4, #4]
 8006192:	6923      	ldr	r3, [r4, #16]
 8006194:	6023      	str	r3, [r4, #0]
 8006196:	89a3      	ldrh	r3, [r4, #12]
 8006198:	f043 0308 	orr.w	r3, r3, #8
 800619c:	81a3      	strh	r3, [r4, #12]
 800619e:	6923      	ldr	r3, [r4, #16]
 80061a0:	b94b      	cbnz	r3, 80061b6 <__swsetup_r+0x7a>
 80061a2:	89a3      	ldrh	r3, [r4, #12]
 80061a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80061a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061ac:	d003      	beq.n	80061b6 <__swsetup_r+0x7a>
 80061ae:	4621      	mov	r1, r4
 80061b0:	4628      	mov	r0, r5
 80061b2:	f000 fa6d 	bl	8006690 <__smakebuf_r>
 80061b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061ba:	f013 0201 	ands.w	r2, r3, #1
 80061be:	d00a      	beq.n	80061d6 <__swsetup_r+0x9a>
 80061c0:	2200      	movs	r2, #0
 80061c2:	60a2      	str	r2, [r4, #8]
 80061c4:	6962      	ldr	r2, [r4, #20]
 80061c6:	4252      	negs	r2, r2
 80061c8:	61a2      	str	r2, [r4, #24]
 80061ca:	6922      	ldr	r2, [r4, #16]
 80061cc:	b942      	cbnz	r2, 80061e0 <__swsetup_r+0xa4>
 80061ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80061d2:	d1c5      	bne.n	8006160 <__swsetup_r+0x24>
 80061d4:	bd38      	pop	{r3, r4, r5, pc}
 80061d6:	0799      	lsls	r1, r3, #30
 80061d8:	bf58      	it	pl
 80061da:	6962      	ldrpl	r2, [r4, #20]
 80061dc:	60a2      	str	r2, [r4, #8]
 80061de:	e7f4      	b.n	80061ca <__swsetup_r+0x8e>
 80061e0:	2000      	movs	r0, #0
 80061e2:	e7f7      	b.n	80061d4 <__swsetup_r+0x98>
 80061e4:	2000001c 	.word	0x2000001c

080061e8 <memset>:
 80061e8:	4402      	add	r2, r0
 80061ea:	4603      	mov	r3, r0
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d100      	bne.n	80061f2 <memset+0xa>
 80061f0:	4770      	bx	lr
 80061f2:	f803 1b01 	strb.w	r1, [r3], #1
 80061f6:	e7f9      	b.n	80061ec <memset+0x4>

080061f8 <_close_r>:
 80061f8:	b538      	push	{r3, r4, r5, lr}
 80061fa:	4d06      	ldr	r5, [pc, #24]	@ (8006214 <_close_r+0x1c>)
 80061fc:	2300      	movs	r3, #0
 80061fe:	4604      	mov	r4, r0
 8006200:	4608      	mov	r0, r1
 8006202:	602b      	str	r3, [r5, #0]
 8006204:	f7fa fbed 	bl	80009e2 <_close>
 8006208:	1c43      	adds	r3, r0, #1
 800620a:	d102      	bne.n	8006212 <_close_r+0x1a>
 800620c:	682b      	ldr	r3, [r5, #0]
 800620e:	b103      	cbz	r3, 8006212 <_close_r+0x1a>
 8006210:	6023      	str	r3, [r4, #0]
 8006212:	bd38      	pop	{r3, r4, r5, pc}
 8006214:	20001bc0 	.word	0x20001bc0

08006218 <_lseek_r>:
 8006218:	b538      	push	{r3, r4, r5, lr}
 800621a:	4d07      	ldr	r5, [pc, #28]	@ (8006238 <_lseek_r+0x20>)
 800621c:	4604      	mov	r4, r0
 800621e:	4608      	mov	r0, r1
 8006220:	4611      	mov	r1, r2
 8006222:	2200      	movs	r2, #0
 8006224:	602a      	str	r2, [r5, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	f7fa fc02 	bl	8000a30 <_lseek>
 800622c:	1c43      	adds	r3, r0, #1
 800622e:	d102      	bne.n	8006236 <_lseek_r+0x1e>
 8006230:	682b      	ldr	r3, [r5, #0]
 8006232:	b103      	cbz	r3, 8006236 <_lseek_r+0x1e>
 8006234:	6023      	str	r3, [r4, #0]
 8006236:	bd38      	pop	{r3, r4, r5, pc}
 8006238:	20001bc0 	.word	0x20001bc0

0800623c <_read_r>:
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	4d07      	ldr	r5, [pc, #28]	@ (800625c <_read_r+0x20>)
 8006240:	4604      	mov	r4, r0
 8006242:	4608      	mov	r0, r1
 8006244:	4611      	mov	r1, r2
 8006246:	2200      	movs	r2, #0
 8006248:	602a      	str	r2, [r5, #0]
 800624a:	461a      	mov	r2, r3
 800624c:	f7fa fb90 	bl	8000970 <_read>
 8006250:	1c43      	adds	r3, r0, #1
 8006252:	d102      	bne.n	800625a <_read_r+0x1e>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	b103      	cbz	r3, 800625a <_read_r+0x1e>
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	bd38      	pop	{r3, r4, r5, pc}
 800625c:	20001bc0 	.word	0x20001bc0

08006260 <_write_r>:
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	4d07      	ldr	r5, [pc, #28]	@ (8006280 <_write_r+0x20>)
 8006264:	4604      	mov	r4, r0
 8006266:	4608      	mov	r0, r1
 8006268:	4611      	mov	r1, r2
 800626a:	2200      	movs	r2, #0
 800626c:	602a      	str	r2, [r5, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	f7fa fb9b 	bl	80009aa <_write>
 8006274:	1c43      	adds	r3, r0, #1
 8006276:	d102      	bne.n	800627e <_write_r+0x1e>
 8006278:	682b      	ldr	r3, [r5, #0]
 800627a:	b103      	cbz	r3, 800627e <_write_r+0x1e>
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	bd38      	pop	{r3, r4, r5, pc}
 8006280:	20001bc0 	.word	0x20001bc0

08006284 <__errno>:
 8006284:	4b01      	ldr	r3, [pc, #4]	@ (800628c <__errno+0x8>)
 8006286:	6818      	ldr	r0, [r3, #0]
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	2000001c 	.word	0x2000001c

08006290 <__libc_init_array>:
 8006290:	b570      	push	{r4, r5, r6, lr}
 8006292:	4d0d      	ldr	r5, [pc, #52]	@ (80062c8 <__libc_init_array+0x38>)
 8006294:	4c0d      	ldr	r4, [pc, #52]	@ (80062cc <__libc_init_array+0x3c>)
 8006296:	1b64      	subs	r4, r4, r5
 8006298:	10a4      	asrs	r4, r4, #2
 800629a:	2600      	movs	r6, #0
 800629c:	42a6      	cmp	r6, r4
 800629e:	d109      	bne.n	80062b4 <__libc_init_array+0x24>
 80062a0:	4d0b      	ldr	r5, [pc, #44]	@ (80062d0 <__libc_init_array+0x40>)
 80062a2:	4c0c      	ldr	r4, [pc, #48]	@ (80062d4 <__libc_init_array+0x44>)
 80062a4:	f000 fa62 	bl	800676c <_init>
 80062a8:	1b64      	subs	r4, r4, r5
 80062aa:	10a4      	asrs	r4, r4, #2
 80062ac:	2600      	movs	r6, #0
 80062ae:	42a6      	cmp	r6, r4
 80062b0:	d105      	bne.n	80062be <__libc_init_array+0x2e>
 80062b2:	bd70      	pop	{r4, r5, r6, pc}
 80062b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80062b8:	4798      	blx	r3
 80062ba:	3601      	adds	r6, #1
 80062bc:	e7ee      	b.n	800629c <__libc_init_array+0xc>
 80062be:	f855 3b04 	ldr.w	r3, [r5], #4
 80062c2:	4798      	blx	r3
 80062c4:	3601      	adds	r6, #1
 80062c6:	e7f2      	b.n	80062ae <__libc_init_array+0x1e>
 80062c8:	08006878 	.word	0x08006878
 80062cc:	08006878 	.word	0x08006878
 80062d0:	08006878 	.word	0x08006878
 80062d4:	0800687c 	.word	0x0800687c

080062d8 <__retarget_lock_init_recursive>:
 80062d8:	4770      	bx	lr

080062da <__retarget_lock_acquire_recursive>:
 80062da:	4770      	bx	lr

080062dc <__retarget_lock_release_recursive>:
 80062dc:	4770      	bx	lr

080062de <memcpy>:
 80062de:	440a      	add	r2, r1
 80062e0:	4291      	cmp	r1, r2
 80062e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80062e6:	d100      	bne.n	80062ea <memcpy+0xc>
 80062e8:	4770      	bx	lr
 80062ea:	b510      	push	{r4, lr}
 80062ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062f4:	4291      	cmp	r1, r2
 80062f6:	d1f9      	bne.n	80062ec <memcpy+0xe>
 80062f8:	bd10      	pop	{r4, pc}
	...

080062fc <_free_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	4605      	mov	r5, r0
 8006300:	2900      	cmp	r1, #0
 8006302:	d041      	beq.n	8006388 <_free_r+0x8c>
 8006304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006308:	1f0c      	subs	r4, r1, #4
 800630a:	2b00      	cmp	r3, #0
 800630c:	bfb8      	it	lt
 800630e:	18e4      	addlt	r4, r4, r3
 8006310:	f000 f8e0 	bl	80064d4 <__malloc_lock>
 8006314:	4a1d      	ldr	r2, [pc, #116]	@ (800638c <_free_r+0x90>)
 8006316:	6813      	ldr	r3, [r2, #0]
 8006318:	b933      	cbnz	r3, 8006328 <_free_r+0x2c>
 800631a:	6063      	str	r3, [r4, #4]
 800631c:	6014      	str	r4, [r2, #0]
 800631e:	4628      	mov	r0, r5
 8006320:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006324:	f000 b8dc 	b.w	80064e0 <__malloc_unlock>
 8006328:	42a3      	cmp	r3, r4
 800632a:	d908      	bls.n	800633e <_free_r+0x42>
 800632c:	6820      	ldr	r0, [r4, #0]
 800632e:	1821      	adds	r1, r4, r0
 8006330:	428b      	cmp	r3, r1
 8006332:	bf01      	itttt	eq
 8006334:	6819      	ldreq	r1, [r3, #0]
 8006336:	685b      	ldreq	r3, [r3, #4]
 8006338:	1809      	addeq	r1, r1, r0
 800633a:	6021      	streq	r1, [r4, #0]
 800633c:	e7ed      	b.n	800631a <_free_r+0x1e>
 800633e:	461a      	mov	r2, r3
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	b10b      	cbz	r3, 8006348 <_free_r+0x4c>
 8006344:	42a3      	cmp	r3, r4
 8006346:	d9fa      	bls.n	800633e <_free_r+0x42>
 8006348:	6811      	ldr	r1, [r2, #0]
 800634a:	1850      	adds	r0, r2, r1
 800634c:	42a0      	cmp	r0, r4
 800634e:	d10b      	bne.n	8006368 <_free_r+0x6c>
 8006350:	6820      	ldr	r0, [r4, #0]
 8006352:	4401      	add	r1, r0
 8006354:	1850      	adds	r0, r2, r1
 8006356:	4283      	cmp	r3, r0
 8006358:	6011      	str	r1, [r2, #0]
 800635a:	d1e0      	bne.n	800631e <_free_r+0x22>
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	6053      	str	r3, [r2, #4]
 8006362:	4408      	add	r0, r1
 8006364:	6010      	str	r0, [r2, #0]
 8006366:	e7da      	b.n	800631e <_free_r+0x22>
 8006368:	d902      	bls.n	8006370 <_free_r+0x74>
 800636a:	230c      	movs	r3, #12
 800636c:	602b      	str	r3, [r5, #0]
 800636e:	e7d6      	b.n	800631e <_free_r+0x22>
 8006370:	6820      	ldr	r0, [r4, #0]
 8006372:	1821      	adds	r1, r4, r0
 8006374:	428b      	cmp	r3, r1
 8006376:	bf04      	itt	eq
 8006378:	6819      	ldreq	r1, [r3, #0]
 800637a:	685b      	ldreq	r3, [r3, #4]
 800637c:	6063      	str	r3, [r4, #4]
 800637e:	bf04      	itt	eq
 8006380:	1809      	addeq	r1, r1, r0
 8006382:	6021      	streq	r1, [r4, #0]
 8006384:	6054      	str	r4, [r2, #4]
 8006386:	e7ca      	b.n	800631e <_free_r+0x22>
 8006388:	bd38      	pop	{r3, r4, r5, pc}
 800638a:	bf00      	nop
 800638c:	20001bcc 	.word	0x20001bcc

08006390 <sbrk_aligned>:
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	4e0f      	ldr	r6, [pc, #60]	@ (80063d0 <sbrk_aligned+0x40>)
 8006394:	460c      	mov	r4, r1
 8006396:	6831      	ldr	r1, [r6, #0]
 8006398:	4605      	mov	r5, r0
 800639a:	b911      	cbnz	r1, 80063a2 <sbrk_aligned+0x12>
 800639c:	f000 f9d6 	bl	800674c <_sbrk_r>
 80063a0:	6030      	str	r0, [r6, #0]
 80063a2:	4621      	mov	r1, r4
 80063a4:	4628      	mov	r0, r5
 80063a6:	f000 f9d1 	bl	800674c <_sbrk_r>
 80063aa:	1c43      	adds	r3, r0, #1
 80063ac:	d103      	bne.n	80063b6 <sbrk_aligned+0x26>
 80063ae:	f04f 34ff 	mov.w	r4, #4294967295
 80063b2:	4620      	mov	r0, r4
 80063b4:	bd70      	pop	{r4, r5, r6, pc}
 80063b6:	1cc4      	adds	r4, r0, #3
 80063b8:	f024 0403 	bic.w	r4, r4, #3
 80063bc:	42a0      	cmp	r0, r4
 80063be:	d0f8      	beq.n	80063b2 <sbrk_aligned+0x22>
 80063c0:	1a21      	subs	r1, r4, r0
 80063c2:	4628      	mov	r0, r5
 80063c4:	f000 f9c2 	bl	800674c <_sbrk_r>
 80063c8:	3001      	adds	r0, #1
 80063ca:	d1f2      	bne.n	80063b2 <sbrk_aligned+0x22>
 80063cc:	e7ef      	b.n	80063ae <sbrk_aligned+0x1e>
 80063ce:	bf00      	nop
 80063d0:	20001bc8 	.word	0x20001bc8

080063d4 <_malloc_r>:
 80063d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063d8:	1ccd      	adds	r5, r1, #3
 80063da:	f025 0503 	bic.w	r5, r5, #3
 80063de:	3508      	adds	r5, #8
 80063e0:	2d0c      	cmp	r5, #12
 80063e2:	bf38      	it	cc
 80063e4:	250c      	movcc	r5, #12
 80063e6:	2d00      	cmp	r5, #0
 80063e8:	4606      	mov	r6, r0
 80063ea:	db01      	blt.n	80063f0 <_malloc_r+0x1c>
 80063ec:	42a9      	cmp	r1, r5
 80063ee:	d904      	bls.n	80063fa <_malloc_r+0x26>
 80063f0:	230c      	movs	r3, #12
 80063f2:	6033      	str	r3, [r6, #0]
 80063f4:	2000      	movs	r0, #0
 80063f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064d0 <_malloc_r+0xfc>
 80063fe:	f000 f869 	bl	80064d4 <__malloc_lock>
 8006402:	f8d8 3000 	ldr.w	r3, [r8]
 8006406:	461c      	mov	r4, r3
 8006408:	bb44      	cbnz	r4, 800645c <_malloc_r+0x88>
 800640a:	4629      	mov	r1, r5
 800640c:	4630      	mov	r0, r6
 800640e:	f7ff ffbf 	bl	8006390 <sbrk_aligned>
 8006412:	1c43      	adds	r3, r0, #1
 8006414:	4604      	mov	r4, r0
 8006416:	d158      	bne.n	80064ca <_malloc_r+0xf6>
 8006418:	f8d8 4000 	ldr.w	r4, [r8]
 800641c:	4627      	mov	r7, r4
 800641e:	2f00      	cmp	r7, #0
 8006420:	d143      	bne.n	80064aa <_malloc_r+0xd6>
 8006422:	2c00      	cmp	r4, #0
 8006424:	d04b      	beq.n	80064be <_malloc_r+0xea>
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	4639      	mov	r1, r7
 800642a:	4630      	mov	r0, r6
 800642c:	eb04 0903 	add.w	r9, r4, r3
 8006430:	f000 f98c 	bl	800674c <_sbrk_r>
 8006434:	4581      	cmp	r9, r0
 8006436:	d142      	bne.n	80064be <_malloc_r+0xea>
 8006438:	6821      	ldr	r1, [r4, #0]
 800643a:	1a6d      	subs	r5, r5, r1
 800643c:	4629      	mov	r1, r5
 800643e:	4630      	mov	r0, r6
 8006440:	f7ff ffa6 	bl	8006390 <sbrk_aligned>
 8006444:	3001      	adds	r0, #1
 8006446:	d03a      	beq.n	80064be <_malloc_r+0xea>
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	442b      	add	r3, r5
 800644c:	6023      	str	r3, [r4, #0]
 800644e:	f8d8 3000 	ldr.w	r3, [r8]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	bb62      	cbnz	r2, 80064b0 <_malloc_r+0xdc>
 8006456:	f8c8 7000 	str.w	r7, [r8]
 800645a:	e00f      	b.n	800647c <_malloc_r+0xa8>
 800645c:	6822      	ldr	r2, [r4, #0]
 800645e:	1b52      	subs	r2, r2, r5
 8006460:	d420      	bmi.n	80064a4 <_malloc_r+0xd0>
 8006462:	2a0b      	cmp	r2, #11
 8006464:	d917      	bls.n	8006496 <_malloc_r+0xc2>
 8006466:	1961      	adds	r1, r4, r5
 8006468:	42a3      	cmp	r3, r4
 800646a:	6025      	str	r5, [r4, #0]
 800646c:	bf18      	it	ne
 800646e:	6059      	strne	r1, [r3, #4]
 8006470:	6863      	ldr	r3, [r4, #4]
 8006472:	bf08      	it	eq
 8006474:	f8c8 1000 	streq.w	r1, [r8]
 8006478:	5162      	str	r2, [r4, r5]
 800647a:	604b      	str	r3, [r1, #4]
 800647c:	4630      	mov	r0, r6
 800647e:	f000 f82f 	bl	80064e0 <__malloc_unlock>
 8006482:	f104 000b 	add.w	r0, r4, #11
 8006486:	1d23      	adds	r3, r4, #4
 8006488:	f020 0007 	bic.w	r0, r0, #7
 800648c:	1ac2      	subs	r2, r0, r3
 800648e:	bf1c      	itt	ne
 8006490:	1a1b      	subne	r3, r3, r0
 8006492:	50a3      	strne	r3, [r4, r2]
 8006494:	e7af      	b.n	80063f6 <_malloc_r+0x22>
 8006496:	6862      	ldr	r2, [r4, #4]
 8006498:	42a3      	cmp	r3, r4
 800649a:	bf0c      	ite	eq
 800649c:	f8c8 2000 	streq.w	r2, [r8]
 80064a0:	605a      	strne	r2, [r3, #4]
 80064a2:	e7eb      	b.n	800647c <_malloc_r+0xa8>
 80064a4:	4623      	mov	r3, r4
 80064a6:	6864      	ldr	r4, [r4, #4]
 80064a8:	e7ae      	b.n	8006408 <_malloc_r+0x34>
 80064aa:	463c      	mov	r4, r7
 80064ac:	687f      	ldr	r7, [r7, #4]
 80064ae:	e7b6      	b.n	800641e <_malloc_r+0x4a>
 80064b0:	461a      	mov	r2, r3
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	42a3      	cmp	r3, r4
 80064b6:	d1fb      	bne.n	80064b0 <_malloc_r+0xdc>
 80064b8:	2300      	movs	r3, #0
 80064ba:	6053      	str	r3, [r2, #4]
 80064bc:	e7de      	b.n	800647c <_malloc_r+0xa8>
 80064be:	230c      	movs	r3, #12
 80064c0:	6033      	str	r3, [r6, #0]
 80064c2:	4630      	mov	r0, r6
 80064c4:	f000 f80c 	bl	80064e0 <__malloc_unlock>
 80064c8:	e794      	b.n	80063f4 <_malloc_r+0x20>
 80064ca:	6005      	str	r5, [r0, #0]
 80064cc:	e7d6      	b.n	800647c <_malloc_r+0xa8>
 80064ce:	bf00      	nop
 80064d0:	20001bcc 	.word	0x20001bcc

080064d4 <__malloc_lock>:
 80064d4:	4801      	ldr	r0, [pc, #4]	@ (80064dc <__malloc_lock+0x8>)
 80064d6:	f7ff bf00 	b.w	80062da <__retarget_lock_acquire_recursive>
 80064da:	bf00      	nop
 80064dc:	20001bc4 	.word	0x20001bc4

080064e0 <__malloc_unlock>:
 80064e0:	4801      	ldr	r0, [pc, #4]	@ (80064e8 <__malloc_unlock+0x8>)
 80064e2:	f7ff befb 	b.w	80062dc <__retarget_lock_release_recursive>
 80064e6:	bf00      	nop
 80064e8:	20001bc4 	.word	0x20001bc4

080064ec <__sflush_r>:
 80064ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f4:	0716      	lsls	r6, r2, #28
 80064f6:	4605      	mov	r5, r0
 80064f8:	460c      	mov	r4, r1
 80064fa:	d454      	bmi.n	80065a6 <__sflush_r+0xba>
 80064fc:	684b      	ldr	r3, [r1, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	dc02      	bgt.n	8006508 <__sflush_r+0x1c>
 8006502:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006504:	2b00      	cmp	r3, #0
 8006506:	dd48      	ble.n	800659a <__sflush_r+0xae>
 8006508:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800650a:	2e00      	cmp	r6, #0
 800650c:	d045      	beq.n	800659a <__sflush_r+0xae>
 800650e:	2300      	movs	r3, #0
 8006510:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006514:	682f      	ldr	r7, [r5, #0]
 8006516:	6a21      	ldr	r1, [r4, #32]
 8006518:	602b      	str	r3, [r5, #0]
 800651a:	d030      	beq.n	800657e <__sflush_r+0x92>
 800651c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800651e:	89a3      	ldrh	r3, [r4, #12]
 8006520:	0759      	lsls	r1, r3, #29
 8006522:	d505      	bpl.n	8006530 <__sflush_r+0x44>
 8006524:	6863      	ldr	r3, [r4, #4]
 8006526:	1ad2      	subs	r2, r2, r3
 8006528:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800652a:	b10b      	cbz	r3, 8006530 <__sflush_r+0x44>
 800652c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800652e:	1ad2      	subs	r2, r2, r3
 8006530:	2300      	movs	r3, #0
 8006532:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006534:	6a21      	ldr	r1, [r4, #32]
 8006536:	4628      	mov	r0, r5
 8006538:	47b0      	blx	r6
 800653a:	1c43      	adds	r3, r0, #1
 800653c:	89a3      	ldrh	r3, [r4, #12]
 800653e:	d106      	bne.n	800654e <__sflush_r+0x62>
 8006540:	6829      	ldr	r1, [r5, #0]
 8006542:	291d      	cmp	r1, #29
 8006544:	d82b      	bhi.n	800659e <__sflush_r+0xb2>
 8006546:	4a2a      	ldr	r2, [pc, #168]	@ (80065f0 <__sflush_r+0x104>)
 8006548:	410a      	asrs	r2, r1
 800654a:	07d6      	lsls	r6, r2, #31
 800654c:	d427      	bmi.n	800659e <__sflush_r+0xb2>
 800654e:	2200      	movs	r2, #0
 8006550:	6062      	str	r2, [r4, #4]
 8006552:	04d9      	lsls	r1, r3, #19
 8006554:	6922      	ldr	r2, [r4, #16]
 8006556:	6022      	str	r2, [r4, #0]
 8006558:	d504      	bpl.n	8006564 <__sflush_r+0x78>
 800655a:	1c42      	adds	r2, r0, #1
 800655c:	d101      	bne.n	8006562 <__sflush_r+0x76>
 800655e:	682b      	ldr	r3, [r5, #0]
 8006560:	b903      	cbnz	r3, 8006564 <__sflush_r+0x78>
 8006562:	6560      	str	r0, [r4, #84]	@ 0x54
 8006564:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006566:	602f      	str	r7, [r5, #0]
 8006568:	b1b9      	cbz	r1, 800659a <__sflush_r+0xae>
 800656a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800656e:	4299      	cmp	r1, r3
 8006570:	d002      	beq.n	8006578 <__sflush_r+0x8c>
 8006572:	4628      	mov	r0, r5
 8006574:	f7ff fec2 	bl	80062fc <_free_r>
 8006578:	2300      	movs	r3, #0
 800657a:	6363      	str	r3, [r4, #52]	@ 0x34
 800657c:	e00d      	b.n	800659a <__sflush_r+0xae>
 800657e:	2301      	movs	r3, #1
 8006580:	4628      	mov	r0, r5
 8006582:	47b0      	blx	r6
 8006584:	4602      	mov	r2, r0
 8006586:	1c50      	adds	r0, r2, #1
 8006588:	d1c9      	bne.n	800651e <__sflush_r+0x32>
 800658a:	682b      	ldr	r3, [r5, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d0c6      	beq.n	800651e <__sflush_r+0x32>
 8006590:	2b1d      	cmp	r3, #29
 8006592:	d001      	beq.n	8006598 <__sflush_r+0xac>
 8006594:	2b16      	cmp	r3, #22
 8006596:	d11e      	bne.n	80065d6 <__sflush_r+0xea>
 8006598:	602f      	str	r7, [r5, #0]
 800659a:	2000      	movs	r0, #0
 800659c:	e022      	b.n	80065e4 <__sflush_r+0xf8>
 800659e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065a2:	b21b      	sxth	r3, r3
 80065a4:	e01b      	b.n	80065de <__sflush_r+0xf2>
 80065a6:	690f      	ldr	r7, [r1, #16]
 80065a8:	2f00      	cmp	r7, #0
 80065aa:	d0f6      	beq.n	800659a <__sflush_r+0xae>
 80065ac:	0793      	lsls	r3, r2, #30
 80065ae:	680e      	ldr	r6, [r1, #0]
 80065b0:	bf08      	it	eq
 80065b2:	694b      	ldreq	r3, [r1, #20]
 80065b4:	600f      	str	r7, [r1, #0]
 80065b6:	bf18      	it	ne
 80065b8:	2300      	movne	r3, #0
 80065ba:	eba6 0807 	sub.w	r8, r6, r7
 80065be:	608b      	str	r3, [r1, #8]
 80065c0:	f1b8 0f00 	cmp.w	r8, #0
 80065c4:	dde9      	ble.n	800659a <__sflush_r+0xae>
 80065c6:	6a21      	ldr	r1, [r4, #32]
 80065c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80065ca:	4643      	mov	r3, r8
 80065cc:	463a      	mov	r2, r7
 80065ce:	4628      	mov	r0, r5
 80065d0:	47b0      	blx	r6
 80065d2:	2800      	cmp	r0, #0
 80065d4:	dc08      	bgt.n	80065e8 <__sflush_r+0xfc>
 80065d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065de:	81a3      	strh	r3, [r4, #12]
 80065e0:	f04f 30ff 	mov.w	r0, #4294967295
 80065e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e8:	4407      	add	r7, r0
 80065ea:	eba8 0800 	sub.w	r8, r8, r0
 80065ee:	e7e7      	b.n	80065c0 <__sflush_r+0xd4>
 80065f0:	dfbffffe 	.word	0xdfbffffe

080065f4 <_fflush_r>:
 80065f4:	b538      	push	{r3, r4, r5, lr}
 80065f6:	690b      	ldr	r3, [r1, #16]
 80065f8:	4605      	mov	r5, r0
 80065fa:	460c      	mov	r4, r1
 80065fc:	b913      	cbnz	r3, 8006604 <_fflush_r+0x10>
 80065fe:	2500      	movs	r5, #0
 8006600:	4628      	mov	r0, r5
 8006602:	bd38      	pop	{r3, r4, r5, pc}
 8006604:	b118      	cbz	r0, 800660e <_fflush_r+0x1a>
 8006606:	6a03      	ldr	r3, [r0, #32]
 8006608:	b90b      	cbnz	r3, 800660e <_fflush_r+0x1a>
 800660a:	f7ff fc81 	bl	8005f10 <__sinit>
 800660e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0f3      	beq.n	80065fe <_fflush_r+0xa>
 8006616:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006618:	07d0      	lsls	r0, r2, #31
 800661a:	d404      	bmi.n	8006626 <_fflush_r+0x32>
 800661c:	0599      	lsls	r1, r3, #22
 800661e:	d402      	bmi.n	8006626 <_fflush_r+0x32>
 8006620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006622:	f7ff fe5a 	bl	80062da <__retarget_lock_acquire_recursive>
 8006626:	4628      	mov	r0, r5
 8006628:	4621      	mov	r1, r4
 800662a:	f7ff ff5f 	bl	80064ec <__sflush_r>
 800662e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006630:	07da      	lsls	r2, r3, #31
 8006632:	4605      	mov	r5, r0
 8006634:	d4e4      	bmi.n	8006600 <_fflush_r+0xc>
 8006636:	89a3      	ldrh	r3, [r4, #12]
 8006638:	059b      	lsls	r3, r3, #22
 800663a:	d4e1      	bmi.n	8006600 <_fflush_r+0xc>
 800663c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800663e:	f7ff fe4d 	bl	80062dc <__retarget_lock_release_recursive>
 8006642:	e7dd      	b.n	8006600 <_fflush_r+0xc>

08006644 <__swhatbuf_r>:
 8006644:	b570      	push	{r4, r5, r6, lr}
 8006646:	460c      	mov	r4, r1
 8006648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800664c:	2900      	cmp	r1, #0
 800664e:	b096      	sub	sp, #88	@ 0x58
 8006650:	4615      	mov	r5, r2
 8006652:	461e      	mov	r6, r3
 8006654:	da0d      	bge.n	8006672 <__swhatbuf_r+0x2e>
 8006656:	89a3      	ldrh	r3, [r4, #12]
 8006658:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800665c:	f04f 0100 	mov.w	r1, #0
 8006660:	bf14      	ite	ne
 8006662:	2340      	movne	r3, #64	@ 0x40
 8006664:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006668:	2000      	movs	r0, #0
 800666a:	6031      	str	r1, [r6, #0]
 800666c:	602b      	str	r3, [r5, #0]
 800666e:	b016      	add	sp, #88	@ 0x58
 8006670:	bd70      	pop	{r4, r5, r6, pc}
 8006672:	466a      	mov	r2, sp
 8006674:	f000 f848 	bl	8006708 <_fstat_r>
 8006678:	2800      	cmp	r0, #0
 800667a:	dbec      	blt.n	8006656 <__swhatbuf_r+0x12>
 800667c:	9901      	ldr	r1, [sp, #4]
 800667e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006682:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006686:	4259      	negs	r1, r3
 8006688:	4159      	adcs	r1, r3
 800668a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800668e:	e7eb      	b.n	8006668 <__swhatbuf_r+0x24>

08006690 <__smakebuf_r>:
 8006690:	898b      	ldrh	r3, [r1, #12]
 8006692:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006694:	079d      	lsls	r5, r3, #30
 8006696:	4606      	mov	r6, r0
 8006698:	460c      	mov	r4, r1
 800669a:	d507      	bpl.n	80066ac <__smakebuf_r+0x1c>
 800669c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80066a0:	6023      	str	r3, [r4, #0]
 80066a2:	6123      	str	r3, [r4, #16]
 80066a4:	2301      	movs	r3, #1
 80066a6:	6163      	str	r3, [r4, #20]
 80066a8:	b003      	add	sp, #12
 80066aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ac:	ab01      	add	r3, sp, #4
 80066ae:	466a      	mov	r2, sp
 80066b0:	f7ff ffc8 	bl	8006644 <__swhatbuf_r>
 80066b4:	9f00      	ldr	r7, [sp, #0]
 80066b6:	4605      	mov	r5, r0
 80066b8:	4639      	mov	r1, r7
 80066ba:	4630      	mov	r0, r6
 80066bc:	f7ff fe8a 	bl	80063d4 <_malloc_r>
 80066c0:	b948      	cbnz	r0, 80066d6 <__smakebuf_r+0x46>
 80066c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066c6:	059a      	lsls	r2, r3, #22
 80066c8:	d4ee      	bmi.n	80066a8 <__smakebuf_r+0x18>
 80066ca:	f023 0303 	bic.w	r3, r3, #3
 80066ce:	f043 0302 	orr.w	r3, r3, #2
 80066d2:	81a3      	strh	r3, [r4, #12]
 80066d4:	e7e2      	b.n	800669c <__smakebuf_r+0xc>
 80066d6:	89a3      	ldrh	r3, [r4, #12]
 80066d8:	6020      	str	r0, [r4, #0]
 80066da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066de:	81a3      	strh	r3, [r4, #12]
 80066e0:	9b01      	ldr	r3, [sp, #4]
 80066e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80066e6:	b15b      	cbz	r3, 8006700 <__smakebuf_r+0x70>
 80066e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ec:	4630      	mov	r0, r6
 80066ee:	f000 f81d 	bl	800672c <_isatty_r>
 80066f2:	b128      	cbz	r0, 8006700 <__smakebuf_r+0x70>
 80066f4:	89a3      	ldrh	r3, [r4, #12]
 80066f6:	f023 0303 	bic.w	r3, r3, #3
 80066fa:	f043 0301 	orr.w	r3, r3, #1
 80066fe:	81a3      	strh	r3, [r4, #12]
 8006700:	89a3      	ldrh	r3, [r4, #12]
 8006702:	431d      	orrs	r5, r3
 8006704:	81a5      	strh	r5, [r4, #12]
 8006706:	e7cf      	b.n	80066a8 <__smakebuf_r+0x18>

08006708 <_fstat_r>:
 8006708:	b538      	push	{r3, r4, r5, lr}
 800670a:	4d07      	ldr	r5, [pc, #28]	@ (8006728 <_fstat_r+0x20>)
 800670c:	2300      	movs	r3, #0
 800670e:	4604      	mov	r4, r0
 8006710:	4608      	mov	r0, r1
 8006712:	4611      	mov	r1, r2
 8006714:	602b      	str	r3, [r5, #0]
 8006716:	f7fa f970 	bl	80009fa <_fstat>
 800671a:	1c43      	adds	r3, r0, #1
 800671c:	d102      	bne.n	8006724 <_fstat_r+0x1c>
 800671e:	682b      	ldr	r3, [r5, #0]
 8006720:	b103      	cbz	r3, 8006724 <_fstat_r+0x1c>
 8006722:	6023      	str	r3, [r4, #0]
 8006724:	bd38      	pop	{r3, r4, r5, pc}
 8006726:	bf00      	nop
 8006728:	20001bc0 	.word	0x20001bc0

0800672c <_isatty_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4d06      	ldr	r5, [pc, #24]	@ (8006748 <_isatty_r+0x1c>)
 8006730:	2300      	movs	r3, #0
 8006732:	4604      	mov	r4, r0
 8006734:	4608      	mov	r0, r1
 8006736:	602b      	str	r3, [r5, #0]
 8006738:	f7fa f96f 	bl	8000a1a <_isatty>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d102      	bne.n	8006746 <_isatty_r+0x1a>
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	b103      	cbz	r3, 8006746 <_isatty_r+0x1a>
 8006744:	6023      	str	r3, [r4, #0]
 8006746:	bd38      	pop	{r3, r4, r5, pc}
 8006748:	20001bc0 	.word	0x20001bc0

0800674c <_sbrk_r>:
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	4d06      	ldr	r5, [pc, #24]	@ (8006768 <_sbrk_r+0x1c>)
 8006750:	2300      	movs	r3, #0
 8006752:	4604      	mov	r4, r0
 8006754:	4608      	mov	r0, r1
 8006756:	602b      	str	r3, [r5, #0]
 8006758:	f7fa f978 	bl	8000a4c <_sbrk>
 800675c:	1c43      	adds	r3, r0, #1
 800675e:	d102      	bne.n	8006766 <_sbrk_r+0x1a>
 8006760:	682b      	ldr	r3, [r5, #0]
 8006762:	b103      	cbz	r3, 8006766 <_sbrk_r+0x1a>
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	bd38      	pop	{r3, r4, r5, pc}
 8006768:	20001bc0 	.word	0x20001bc0

0800676c <_init>:
 800676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676e:	bf00      	nop
 8006770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006772:	bc08      	pop	{r3}
 8006774:	469e      	mov	lr, r3
 8006776:	4770      	bx	lr

08006778 <_fini>:
 8006778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677a:	bf00      	nop
 800677c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677e:	bc08      	pop	{r3}
 8006780:	469e      	mov	lr, r3
 8006782:	4770      	bx	lr
