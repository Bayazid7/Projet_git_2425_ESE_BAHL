
SOFWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f660  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000808  0800f840  0800f840  00010840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010048  08010048  000123a4  2**0
                  CONTENTS
  4 .ARM          00000008  08010048  08010048  00011048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010050  08010050  000123a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010050  08010050  00011050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010054  08010054  00011054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003a4  20000000  08010058  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ff8  200003a4  080103fc  000123a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000239c  080103fc  0001339c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000123a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020dcf  00000000  00000000  000123d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c04  00000000  00000000  000331a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b50  00000000  00000000  00037da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000151d  00000000  00000000  000398f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002372f  00000000  00000000  0003ae15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000237e2  00000000  00000000  0005e544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d494c  00000000  00000000  00081d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156672  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086ac  00000000  00000000  001566b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0015ed64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200003a4 	.word	0x200003a4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f828 	.word	0x0800f828

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200003a8 	.word	0x200003a8
 800021c:	0800f828 	.word	0x0800f828

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <ADXL343_I2C_Read>:
#include "cmsis_os.h"

TaskHandle_t TapDetected_task = NULL;

static uint8_t ADXL343_I2C_Read(ADXL343_InstanceDef_t *Instance, uint8_t reg, uint8_t *buf, uint16_t size)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af04      	add	r7, sp, #16
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	461a      	mov	r2, r3
 8001040:	460b      	mov	r3, r1
 8001042:	72fb      	strb	r3, [r7, #11]
 8001044:	4613      	mov	r3, r2
 8001046:	813b      	strh	r3, [r7, #8]
	if (Instance == NULL || buf == NULL || size == 0)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d005      	beq.n	800105a <ADXL343_I2C_Read+0x26>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <ADXL343_I2C_Read+0x26>
 8001054:	893b      	ldrh	r3, [r7, #8]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <ADXL343_I2C_Read+0x2a>
	{
		return 1;
 800105a:	2301      	movs	r3, #1
 800105c:	e014      	b.n	8001088 <ADXL343_I2C_Read+0x54>
	}
	if (HAL_I2C_Mem_Read(Instance->hi2c, ADXL343_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, buf, size, HAL_MAX_DELAY) != HAL_OK)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	7afb      	ldrb	r3, [r7, #11]
 8001064:	b29a      	uxth	r2, r3
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	893b      	ldrh	r3, [r7, #8]
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2301      	movs	r3, #1
 8001076:	21a6      	movs	r1, #166	@ 0xa6
 8001078:	f003 f930 	bl	80042dc <HAL_I2C_Mem_Read>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <ADXL343_I2C_Read+0x52>
	{
		return 1;
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <ADXL343_I2C_Read+0x54>
	}
	return 0;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <ADXL343_I2C_Write>:

static uint8_t ADXL343_I2C_Write(ADXL343_InstanceDef_t *Instance, uint8_t reg, uint8_t *buf, uint16_t size)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af04      	add	r7, sp, #16
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	461a      	mov	r2, r3
 800109c:	460b      	mov	r3, r1
 800109e:	72fb      	strb	r3, [r7, #11]
 80010a0:	4613      	mov	r3, r2
 80010a2:	813b      	strh	r3, [r7, #8]
	if (Instance == NULL || buf == NULL || size == 0)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d005      	beq.n	80010b6 <ADXL343_I2C_Write+0x26>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <ADXL343_I2C_Write+0x26>
 80010b0:	893b      	ldrh	r3, [r7, #8]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <ADXL343_I2C_Write+0x2a>
	{
		return 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e014      	b.n	80010e4 <ADXL343_I2C_Write+0x54>
	}
	if (HAL_I2C_Mem_Write(Instance->hi2c, ADXL343_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, buf, size, HAL_MAX_DELAY) != HAL_OK)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	7afb      	ldrb	r3, [r7, #11]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	9302      	str	r3, [sp, #8]
 80010c8:	893b      	ldrh	r3, [r7, #8]
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	21a6      	movs	r1, #166	@ 0xa6
 80010d4:	f002 ffee 	bl	80040b4 <HAL_I2C_Mem_Write>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <ADXL343_I2C_Write+0x52>
	{
		return 1;
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <ADXL343_I2C_Write+0x54>
	}
	return 0;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <ADXL343_Init>:


uint8_t ADXL343_Init(ADXL343_InstanceDef_t *Instance,I2C_HandleTypeDef *hi2c)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
	if (Instance == NULL )
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d104      	bne.n	8001106 <ADXL343_Init+0x1a>
	{
		printf("Erreur : Instance ou handle I2C est NULL.\r\n");
 80010fc:	4866      	ldr	r0, [pc, #408]	@ (8001298 <ADXL343_Init+0x1ac>)
 80010fe:	f00a fd59 	bl	800bbb4 <puts>
		return 1;
 8001102:	2301      	movs	r3, #1
 8001104:	e0c3      	b.n	800128e <ADXL343_Init+0x1a2>
	}
	Instance->hi2c = hi2c;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	601a      	str	r2, [r3, #0]
	Instance->accX = 0;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
	Instance->accY = 0;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
	Instance->accZ = 0;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
	uint8_t configData;
	uint8_t deviceID = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	73bb      	strb	r3, [r7, #14]
	if (ADXL343_I2C_Read(Instance, ADXL343_REG_DEVID, &deviceID, 1) != 0)
 8001128:	f107 020e 	add.w	r2, r7, #14
 800112c:	2301      	movs	r3, #1
 800112e:	2100      	movs	r1, #0
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff7f 	bl	8001034 <ADXL343_I2C_Read>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d004      	beq.n	8001146 <ADXL343_Init+0x5a>
	{
		printf("Erreur : Échec de la lecture de l'identifiant de l'appareil.\r\n");
 800113c:	4857      	ldr	r0, [pc, #348]	@ (800129c <ADXL343_Init+0x1b0>)
 800113e:	f00a fd39 	bl	800bbb4 <puts>
		return 1;
 8001142:	2301      	movs	r3, #1
 8001144:	e0a3      	b.n	800128e <ADXL343_Init+0x1a2>
	}

	if (deviceID != ADXL343_DEVID)
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	2be5      	cmp	r3, #229	@ 0xe5
 800114a:	d007      	beq.n	800115c <ADXL343_Init+0x70>
	{
		printf("Erreur : ID de l'appareil incorrect (attendu : 0x%X, lu : 0x%X).\r\n", ADXL343_DEVID, deviceID);
 800114c:	7bbb      	ldrb	r3, [r7, #14]
 800114e:	461a      	mov	r2, r3
 8001150:	21e5      	movs	r1, #229	@ 0xe5
 8001152:	4853      	ldr	r0, [pc, #332]	@ (80012a0 <ADXL343_Init+0x1b4>)
 8001154:	f00a fcc6 	bl	800bae4 <iprintf>
		return 1;
 8001158:	2301      	movs	r3, #1
 800115a:	e098      	b.n	800128e <ADXL343_Init+0x1a2>
	}

	configData = 0x08;
 800115c:	2308      	movs	r3, #8
 800115e:	73fb      	strb	r3, [r7, #15]
	if (ADXL343_I2C_Write(Instance, ADXL343_REG_POWER_CTL, &configData, 1) != 0)
 8001160:	f107 020f 	add.w	r2, r7, #15
 8001164:	2301      	movs	r3, #1
 8001166:	212d      	movs	r1, #45	@ 0x2d
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff91 	bl	8001090 <ADXL343_I2C_Write>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d004      	beq.n	800117e <ADXL343_Init+0x92>
	{
		printf("Erreur : Échec de la configuration de POWER_CTL.\r\n");
 8001174:	484b      	ldr	r0, [pc, #300]	@ (80012a4 <ADXL343_Init+0x1b8>)
 8001176:	f00a fd1d 	bl	800bbb4 <puts>
		return 1;
 800117a:	2301      	movs	r3, #1
 800117c:	e087      	b.n	800128e <ADXL343_Init+0x1a2>
	}
	// Configuration du format des données
	configData = 0x0B; // Exemple de format : Full resolution, ±16g
 800117e:	230b      	movs	r3, #11
 8001180:	73fb      	strb	r3, [r7, #15]
	if (ADXL343_I2C_Write(Instance, ADXL343_REG_DATA_FORMAT, &configData, 1) != 0)
 8001182:	f107 020f 	add.w	r2, r7, #15
 8001186:	2301      	movs	r3, #1
 8001188:	2131      	movs	r1, #49	@ 0x31
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff80 	bl	8001090 <ADXL343_I2C_Write>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <ADXL343_Init+0xb4>
	{
		printf("Erreur : Échec de la configuration de DATA_FORMAT.\r\n");
 8001196:	4844      	ldr	r0, [pc, #272]	@ (80012a8 <ADXL343_Init+0x1bc>)
 8001198:	f00a fd0c 	bl	800bbb4 <puts>
		return 1;
 800119c:	2301      	movs	r3, #1
 800119e:	e076      	b.n	800128e <ADXL343_Init+0x1a2>
	}

	ADXL343_SetOffset(Instance, 0,0, 0)	;
 80011a0:	2300      	movs	r3, #0
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 f890 	bl	80012cc <ADXL343_SetOffset>


	// Désactivation des interruptions
	configData = 0x00;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]
	if (ADXL343_I2C_Write(Instance, ADXL343_REG_INT_ENABLE, &configData, 1) != 0)
 80011b0:	f107 020f 	add.w	r2, r7, #15
 80011b4:	2301      	movs	r3, #1
 80011b6:	212e      	movs	r1, #46	@ 0x2e
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff69 	bl	8001090 <ADXL343_I2C_Write>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d004      	beq.n	80011ce <ADXL343_Init+0xe2>
	{
		printf("Erreur : Échec de la désactivation des interruptions.\r\n");
 80011c4:	4839      	ldr	r0, [pc, #228]	@ (80012ac <ADXL343_Init+0x1c0>)
 80011c6:	f00a fcf5 	bl	800bbb4 <puts>
		return 1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e05f      	b.n	800128e <ADXL343_Init+0x1a2>
	}
	// Configuration des seuils de tap
	if (ADXL343_SetTapThreshold(Instance,70) != 0)
 80011ce:	2146      	movs	r1, #70	@ 0x46
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 f89d 	bl	8001310 <ADXL343_SetTapThreshold>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d004      	beq.n	80011e6 <ADXL343_Init+0xfa>
	{
		printf("Erreur : Échec de la configuration de THRESH_TAP.\r\n");
 80011dc:	4834      	ldr	r0, [pc, #208]	@ (80012b0 <ADXL343_Init+0x1c4>)
 80011de:	f00a fce9 	bl	800bbb4 <puts>
		return 1;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e053      	b.n	800128e <ADXL343_Init+0x1a2>
	}
	// Configuration de la durée
	if (ADXL343_SetTapDuration(Instance, 90)!= 0)
 80011e6:	215a      	movs	r1, #90	@ 0x5a
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 f8a7 	bl	800133c <ADXL343_SetTapDuration>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d004      	beq.n	80011fe <ADXL343_Init+0x112>
	{
		printf("Erreur : Échec de la configuration de DUR.\r\n");
 80011f4:	482f      	ldr	r0, [pc, #188]	@ (80012b4 <ADXL343_Init+0x1c8>)
 80011f6:	f00a fcdd 	bl	800bbb4 <puts>
		return 1;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e047      	b.n	800128e <ADXL343_Init+0x1a2>
	}

	// Configuration des axes de tap
	configData = 0x06; // Activer les axes X, Y
 80011fe:	2306      	movs	r3, #6
 8001200:	73fb      	strb	r3, [r7, #15]
	if (ADXL343_I2C_Write(Instance, ADXL343_REG_TAP_AXES, &configData, 1) != 0)
 8001202:	f107 020f 	add.w	r2, r7, #15
 8001206:	2301      	movs	r3, #1
 8001208:	212a      	movs	r1, #42	@ 0x2a
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff40 	bl	8001090 <ADXL343_I2C_Write>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d004      	beq.n	8001220 <ADXL343_Init+0x134>
	{
		printf("Erreur : Échec de la configuration de TAP_AXES.\r\n");
 8001216:	4828      	ldr	r0, [pc, #160]	@ (80012b8 <ADXL343_Init+0x1cc>)
 8001218:	f00a fccc 	bl	800bbb4 <puts>
		return 1;
 800121c:	2301      	movs	r3, #1
 800121e:	e036      	b.n	800128e <ADXL343_Init+0x1a2>
	}

	// Configuration de la fréquence d'échantillonnage
	configData = RATE_200_HZ;
 8001220:	230b      	movs	r3, #11
 8001222:	73fb      	strb	r3, [r7, #15]
	if (ADXL343_I2C_Write(Instance, ADXL343_REG_BW_RATE, &configData, 1) != 0)
 8001224:	f107 020f 	add.w	r2, r7, #15
 8001228:	2301      	movs	r3, #1
 800122a:	212c      	movs	r1, #44	@ 0x2c
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff2f 	bl	8001090 <ADXL343_I2C_Write>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d004      	beq.n	8001242 <ADXL343_Init+0x156>
	{
		printf("Erreur : Échec de la configuration de BW_RATE.\r\n");
 8001238:	4820      	ldr	r0, [pc, #128]	@ (80012bc <ADXL343_Init+0x1d0>)
 800123a:	f00a fcbb 	bl	800bbb4 <puts>
		return 1;
 800123e:	2301      	movs	r3, #1
 8001240:	e025      	b.n	800128e <ADXL343_Init+0x1a2>
	}

	// Configuration de la carte d'interruption
	configData = 0x40; // Exemple de configuration
 8001242:	2340      	movs	r3, #64	@ 0x40
 8001244:	73fb      	strb	r3, [r7, #15]
	if (ADXL343_I2C_Write(Instance, ADXL343_REG_INT_MAP, &configData, 1) != 0)
 8001246:	f107 020f 	add.w	r2, r7, #15
 800124a:	2301      	movs	r3, #1
 800124c:	212f      	movs	r1, #47	@ 0x2f
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ff1e 	bl	8001090 <ADXL343_I2C_Write>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d004      	beq.n	8001264 <ADXL343_Init+0x178>
	{
		printf("Erreur : Échec de la configuration de INT_MAP.\r\n");
 800125a:	4819      	ldr	r0, [pc, #100]	@ (80012c0 <ADXL343_Init+0x1d4>)
 800125c:	f00a fcaa 	bl	800bbb4 <puts>
		return 1;
 8001260:	2301      	movs	r3, #1
 8001262:	e014      	b.n	800128e <ADXL343_Init+0x1a2>
	}

	// Activation des interruptions
	configData = 0x40; // Exemple pour activer les interruptions
 8001264:	2340      	movs	r3, #64	@ 0x40
 8001266:	73fb      	strb	r3, [r7, #15]
	if (ADXL343_I2C_Write(Instance, ADXL343_REG_INT_ENABLE, &configData, 1) != 0)
 8001268:	f107 020f 	add.w	r2, r7, #15
 800126c:	2301      	movs	r3, #1
 800126e:	212e      	movs	r1, #46	@ 0x2e
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff0d 	bl	8001090 <ADXL343_I2C_Write>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d004      	beq.n	8001286 <ADXL343_Init+0x19a>
	{
		printf("Erreur : Échec de l'activation des interruptions.\r\n");
 800127c:	4811      	ldr	r0, [pc, #68]	@ (80012c4 <ADXL343_Init+0x1d8>)
 800127e:	f00a fc99 	bl	800bbb4 <puts>
		return 1;
 8001282:	2301      	movs	r3, #1
 8001284:	e003      	b.n	800128e <ADXL343_Init+0x1a2>
	}

	printf("Initialisation de l'ADXL343 réussie.\r\n");
 8001286:	4810      	ldr	r0, [pc, #64]	@ (80012c8 <ADXL343_Init+0x1dc>)
 8001288:	f00a fc94 	bl	800bbb4 <puts>
	return 0;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	0800f840 	.word	0x0800f840
 800129c:	0800f86c 	.word	0x0800f86c
 80012a0:	0800f8ac 	.word	0x0800f8ac
 80012a4:	0800f8f0 	.word	0x0800f8f0
 80012a8:	0800f924 	.word	0x0800f924
 80012ac:	0800f95c 	.word	0x0800f95c
 80012b0:	0800f998 	.word	0x0800f998
 80012b4:	0800f9cc 	.word	0x0800f9cc
 80012b8:	0800f9fc 	.word	0x0800f9fc
 80012bc:	0800fa30 	.word	0x0800fa30
 80012c0:	0800fa64 	.word	0x0800fa64
 80012c4:	0800fa98 	.word	0x0800fa98
 80012c8:	0800facc 	.word	0x0800facc

080012cc <ADXL343_SetOffset>:

uint8_t ADXL343_SetOffset(ADXL343_InstanceDef_t *Instance, uint8_t ofsX, uint8_t ofsY, uint8_t ofsZ)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	4608      	mov	r0, r1
 80012d6:	4611      	mov	r1, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	4603      	mov	r3, r0
 80012dc:	70fb      	strb	r3, [r7, #3]
 80012de:	460b      	mov	r3, r1
 80012e0:	70bb      	strb	r3, [r7, #2]
 80012e2:	4613      	mov	r3, r2
 80012e4:	707b      	strb	r3, [r7, #1]
	uint8_t offsetData[3];
	offsetData[0] = ofsX;
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	733b      	strb	r3, [r7, #12]
	offsetData[1] = ofsY;
 80012ea:	78bb      	ldrb	r3, [r7, #2]
 80012ec:	737b      	strb	r3, [r7, #13]

	if (ADXL343_I2C_Write(Instance, ADXL343_REG_OFSX, offsetData, 3) != 0)
 80012ee:	f107 020c 	add.w	r2, r7, #12
 80012f2:	2303      	movs	r3, #3
 80012f4:	211e      	movs	r1, #30
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff feca 	bl	8001090 <ADXL343_I2C_Write>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <ADXL343_SetOffset+0x3a>
	{
		return 1;
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <ADXL343_SetOffset+0x3c>
	}
	return 0;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <ADXL343_SetTapThreshold>:

	return 0;
}

uint8_t ADXL343_SetTapThreshold(ADXL343_InstanceDef_t *Instance, uint8_t threshold)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	70fb      	strb	r3, [r7, #3]
	if (ADXL343_I2C_Write(Instance, ADXL343_REG_THRESH_TAP, &threshold, 1) != 0)
 800131c:	1cfa      	adds	r2, r7, #3
 800131e:	2301      	movs	r3, #1
 8001320:	211d      	movs	r1, #29
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff feb4 	bl	8001090 <ADXL343_I2C_Write>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <ADXL343_SetTapThreshold+0x22>
	{
		return 1;
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <ADXL343_SetTapThreshold+0x24>
	}
	return 0;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <ADXL343_SetTapDuration>:

uint8_t ADXL343_SetTapDuration(ADXL343_InstanceDef_t *Instance, uint8_t duration)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	70fb      	strb	r3, [r7, #3]
	if (ADXL343_I2C_Write(Instance, ADXL343_REG_DUR, &duration, 1) != 0)
 8001348:	1cfa      	adds	r2, r7, #3
 800134a:	2301      	movs	r3, #1
 800134c:	2121      	movs	r1, #33	@ 0x21
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fe9e 	bl	8001090 <ADXL343_I2C_Write>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <ADXL343_SetTapDuration+0x22>
	{
		return 1;
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <ADXL343_SetTapDuration+0x24>
	}
	return 0;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <Moteur_init>:
#include <stdlib.h>

#define PI 3.14159

void Moteur_init(Moteur_HandleTypeDef* moteur, TIM_HandleTypeDef* timer, uint32_t channel)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
    moteur->pwm_timer = timer;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	601a      	str	r2, [r3, #0]
    moteur->channel = channel;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	605a      	str	r2, [r3, #4]
    moteur->direction = MOTEUR_STOP;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2253      	movs	r2, #83	@ 0x53
 8001384:	721a      	strb	r2, [r3, #8]
    moteur->vitesse = 0;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <Moteur_setSpeed>:

void Moteur_setSpeed(Moteur_HandleTypeDef* moteur, int speed)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
    int vitesse = (int)(speed * 4250 / 290);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	f241 029a 	movw	r2, #4250	@ 0x109a
 80013a8:	fb02 f303 	mul.w	r3, r2, r3
 80013ac:	4a56      	ldr	r2, [pc, #344]	@ (8001508 <Moteur_setSpeed+0x170>)
 80013ae:	fb82 1203 	smull	r1, r2, r2, r3
 80013b2:	441a      	add	r2, r3
 80013b4:	1212      	asrs	r2, r2, #8
 80013b6:	17db      	asrs	r3, r3, #31
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	60fb      	str	r3, [r7, #12]
    moteur->vitesse = speed;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	60da      	str	r2, [r3, #12]

    if (speed >= 0)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db3b      	blt.n	8001440 <Moteur_setSpeed+0xa8>
    {
        Moteur_setDirection(moteur, MOTEUR_AVANCER);
 80013c8:	2141      	movs	r1, #65	@ 0x41
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f89e 	bl	800150c <Moteur_setDirection>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, vitesse);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d105      	bne.n	80013e4 <Moteur_setSpeed+0x4c>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	635a      	str	r2, [r3, #52]	@ 0x34
    else
    {
        Moteur_setDirection(moteur, MOTEUR_RECULER);
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, 8500-abs(vitesse));
    }
}
 80013e2:	e08d      	b.n	8001500 <Moteur_setSpeed+0x168>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, vitesse);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d105      	bne.n	80013f8 <Moteur_setSpeed+0x60>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6393      	str	r3, [r2, #56]	@ 0x38
 80013f6:	e083      	b.n	8001500 <Moteur_setSpeed+0x168>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	d105      	bne.n	800140c <Moteur_setSpeed+0x74>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800140a:	e079      	b.n	8001500 <Moteur_setSpeed+0x168>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b0c      	cmp	r3, #12
 8001412:	d105      	bne.n	8001420 <Moteur_setSpeed+0x88>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6413      	str	r3, [r2, #64]	@ 0x40
 800141e:	e06f      	b.n	8001500 <Moteur_setSpeed+0x168>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b10      	cmp	r3, #16
 8001426:	d105      	bne.n	8001434 <Moteur_setSpeed+0x9c>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6493      	str	r3, [r2, #72]	@ 0x48
 8001432:	e065      	b.n	8001500 <Moteur_setSpeed+0x168>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800143e:	e05f      	b.n	8001500 <Moteur_setSpeed+0x168>
        Moteur_setDirection(moteur, MOTEUR_RECULER);
 8001440:	2152      	movs	r1, #82	@ 0x52
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f862 	bl	800150c <Moteur_setDirection>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, 8500-abs(vitesse));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d10b      	bne.n	8001468 <Moteur_setSpeed+0xd0>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	bfb8      	it	lt
 8001456:	425b      	neglt	r3, r3
 8001458:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 800145c:	3334      	adds	r3, #52	@ 0x34
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6812      	ldr	r2, [r2, #0]
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001466:	e04b      	b.n	8001500 <Moteur_setSpeed+0x168>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, 8500-abs(vitesse));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b04      	cmp	r3, #4
 800146e:	d10b      	bne.n	8001488 <Moteur_setSpeed+0xf0>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	bfb8      	it	lt
 8001476:	425b      	neglt	r3, r3
 8001478:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 800147c:	3334      	adds	r3, #52	@ 0x34
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6812      	ldr	r2, [r2, #0]
 8001482:	6812      	ldr	r2, [r2, #0]
 8001484:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001486:	e03b      	b.n	8001500 <Moteur_setSpeed+0x168>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, 8500-abs(vitesse));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b08      	cmp	r3, #8
 800148e:	d10b      	bne.n	80014a8 <Moteur_setSpeed+0x110>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	bfb8      	it	lt
 8001496:	425b      	neglt	r3, r3
 8001498:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 800149c:	3334      	adds	r3, #52	@ 0x34
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	6812      	ldr	r2, [r2, #0]
 80014a4:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80014a6:	e02b      	b.n	8001500 <Moteur_setSpeed+0x168>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, 8500-abs(vitesse));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d10b      	bne.n	80014c8 <Moteur_setSpeed+0x130>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	bfb8      	it	lt
 80014b6:	425b      	neglt	r3, r3
 80014b8:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 80014bc:	3334      	adds	r3, #52	@ 0x34
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80014c6:	e01b      	b.n	8001500 <Moteur_setSpeed+0x168>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, 8500-abs(vitesse));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b10      	cmp	r3, #16
 80014ce:	d10b      	bne.n	80014e8 <Moteur_setSpeed+0x150>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	bfb8      	it	lt
 80014d6:	425b      	neglt	r3, r3
 80014d8:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 80014dc:	3334      	adds	r3, #52	@ 0x34
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80014e6:	e00b      	b.n	8001500 <Moteur_setSpeed+0x168>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, 8500-abs(vitesse));
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	bfb8      	it	lt
 80014ee:	425b      	neglt	r3, r3
 80014f0:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 80014f4:	3334      	adds	r3, #52	@ 0x34
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80014fe:	e7ff      	b.n	8001500 <Moteur_setSpeed+0x168>
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	e1fc780f 	.word	0xe1fc780f

0800150c <Moteur_setDirection>:

void Moteur_setDirection(Moteur_HandleTypeDef* moteur, char direction)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]
    moteur->direction = direction;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	78fa      	ldrb	r2, [r7, #3]
 800151c:	721a      	strb	r2, [r3, #8]

    switch (direction)
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	2b41      	cmp	r3, #65	@ 0x41
 8001522:	d002      	beq.n	800152a <Moteur_setDirection+0x1e>
 8001524:	2b52      	cmp	r3, #82	@ 0x52
 8001526:	d011      	beq.n	800154c <Moteur_setDirection+0x40>
 8001528:	e021      	b.n	800156e <Moteur_setDirection+0x62>
    {
        case MOTEUR_AVANCER:
            HAL_TIM_PWM_Start(moteur->pwm_timer, moteur->channel);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	4619      	mov	r1, r3
 8001534:	4610      	mov	r0, r2
 8001536:	f004 fc69 	bl	8005e0c <HAL_TIM_PWM_Start>
            HAL_TIMEx_PWMN_Stop(moteur->pwm_timer, moteur->channel);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	4619      	mov	r1, r3
 8001544:	4610      	mov	r0, r2
 8001546:	f005 ff2b 	bl	80073a0 <HAL_TIMEx_PWMN_Stop>
            break;
 800154a:	e021      	b.n	8001590 <Moteur_setDirection+0x84>

        case MOTEUR_RECULER:
            HAL_TIMEx_PWMN_Start(moteur->pwm_timer, moteur->channel);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4619      	mov	r1, r3
 8001556:	4610      	mov	r0, r2
 8001558:	f005 fe6e 	bl	8007238 <HAL_TIMEx_PWMN_Start>
            HAL_TIM_PWM_Stop(moteur->pwm_timer, moteur->channel);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	4619      	mov	r1, r3
 8001566:	4610      	mov	r0, r2
 8001568:	f004 fd50 	bl	800600c <HAL_TIM_PWM_Stop>
            break;
 800156c:	e010      	b.n	8001590 <Moteur_setDirection+0x84>

        case MOTEUR_STOP:
        default:
            HAL_TIM_PWM_Stop(moteur->pwm_timer, moteur->channel);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	4619      	mov	r1, r3
 8001578:	4610      	mov	r0, r2
 800157a:	f004 fd47 	bl	800600c <HAL_TIM_PWM_Stop>
            HAL_TIMEx_PWMN_Stop(moteur->pwm_timer, moteur->channel);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	4619      	mov	r1, r3
 8001588:	4610      	mov	r0, r2
 800158a:	f005 ff09 	bl	80073a0 <HAL_TIMEx_PWMN_Stop>
            break;
 800158e:	bf00      	nop
    }
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <Moteur_start>:

void Moteur_start(Moteur_HandleTypeDef* moteur)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
    Moteur_setDirection(moteur, MOTEUR_AVANCER);
 80015a0:	2141      	movs	r1, #65	@ 0x41
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffb2 	bl	800150c <Moteur_setDirection>
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <Moteur_stop>:

void Moteur_stop(Moteur_HandleTypeDef* moteur)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
    Moteur_setDirection(moteur, MOTEUR_STOP);
 80015b8:	2153      	movs	r1, #83	@ 0x53
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ffa6 	bl	800150c <Moteur_setDirection>
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <Moteur_recule>:
void Moteur_recule(Moteur_HandleTypeDef* moteur)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
    Moteur_setDirection(moteur,MOTEUR_RECULER);
 80015d0:	2152      	movs	r1, #82	@ 0x52
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ff9a 	bl	800150c <Moteur_setDirection>
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <Robot_Start>:
void Robot_Start(h_Robot* robot)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	Moteur_start(robot->moteur_droite) ;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ffd3 	bl	8001598 <Moteur_start>
	Moteur_start(robot->moteur_droite) ;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ffce 	bl	8001598 <Moteur_start>
	robot->direction = 'A' ;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2241      	movs	r2, #65	@ 0x41
 8001600:	701a      	strb	r2, [r3, #0]
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <Robot_Stop>:
void Robot_Stop(h_Robot* robot)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
	Moteur_stop(robot->moteur_droite) ;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ffca 	bl	80015b0 <Moteur_stop>
	Moteur_stop(robot->moteur_droite) ;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ffc5 	bl	80015b0 <Moteur_stop>
	robot->direction = 'S' ;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2253      	movs	r2, #83	@ 0x53
 800162a:	701a      	strb	r2, [r3, #0]
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <Robot_Recule>:
void Robot_Recule(h_Robot* robot)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	Moteur_recule(robot->moteur_droite) ;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ffc1 	bl	80015c8 <Moteur_recule>
	Moteur_recule(robot->moteur_droite) ;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ffbc 	bl	80015c8 <Moteur_recule>
	robot->direction = 'R' ;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2252      	movs	r2, #82	@ 0x52
 8001654:	701a      	strb	r2, [r3, #0]
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <Robot_Init>:

void Robot_Init(h_Robot* robot ,Moteur_HandleTypeDef* moteurD,Moteur_HandleTypeDef* moteurG )
{
 800165e:	b480      	push	{r7}
 8001660:	b085      	sub	sp, #20
 8001662:	af00      	add	r7, sp, #0
 8001664:	60f8      	str	r0, [r7, #12]
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
	robot->moteur_droite = moteurD ;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	615a      	str	r2, [r3, #20]
	robot->moteur_gauche = moteurG ;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	619a      	str	r2, [r3, #24]
	robot->omega = 0 ;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
	robot->theta =0 ;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
	robot->vitesse = 0 ;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	605a      	str	r2, [r3, #4]
	robot->mode = 0 ; // 0 : mode chat et 1 : mode souris
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	741a      	strb	r2, [r3, #16]
	robot->direction = 'A' ;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2241      	movs	r2, #65	@ 0x41
 8001698:	701a      	strb	r2, [r3, #0]

}
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <Robot_setAngle>:

void Robot_setAngle(h_Robot* robot, float angle)
{
 80016a8:	b5b0      	push	{r4, r5, r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	ed87 0a00 	vstr	s0, [r7]
    //  Rotation pour atteindre l'angle spécifié
	angle = angle*(2*PI/360) ;
 80016b4:	6838      	ldr	r0, [r7, #0]
 80016b6:	f7fe ff6f 	bl	8000598 <__aeabi_f2d>
 80016ba:	a382      	add	r3, pc, #520	@ (adr r3, 80018c4 <Robot_setAngle+0x21c>)
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	f7fe ffc2 	bl	8000648 <__aeabi_dmul>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	f7ff fab4 	bl	8000c38 <__aeabi_d2f>
 80016d0:	4603      	mov	r3, r0
 80016d2:	603b      	str	r3, [r7, #0]
    robot->omega = (2.0 / Ts) * (angle - robot->theta) + robot->omega;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80016da:	ed97 7a00 	vldr	s14, [r7]
 80016de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e2:	ee17 0a90 	vmov	r0, s15
 80016e6:	f7fe ff57 	bl	8000598 <__aeabi_f2d>
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	4b72      	ldr	r3, [pc, #456]	@ (80018b8 <Robot_setAngle+0x210>)
 80016f0:	f7fe ffaa 	bl	8000648 <__aeabi_dmul>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4614      	mov	r4, r2
 80016fa:	461d      	mov	r5, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe ff49 	bl	8000598 <__aeabi_f2d>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4620      	mov	r0, r4
 800170c:	4629      	mov	r1, r5
 800170e:	f7fe fde5 	bl	80002dc <__adddf3>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff fa8d 	bl	8000c38 <__aeabi_d2f>
 800171e:	4602      	mov	r2, r0
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	609a      	str	r2, [r3, #8]
    robot->moteur_droite->vitesse =robot->vitesse + robot->omega * L / 2.0;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe ff35 	bl	8000598 <__aeabi_f2d>
 800172e:	4604      	mov	r4, r0
 8001730:	460d      	mov	r5, r1
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe ff2e 	bl	8000598 <__aeabi_f2d>
 800173c:	a35c      	add	r3, pc, #368	@ (adr r3, 80018b0 <Robot_setAngle+0x208>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7fe ff81 	bl	8000648 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001756:	f7ff f8a1 	bl	800089c <__aeabi_ddiv>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4620      	mov	r0, r4
 8001760:	4629      	mov	r1, r5
 8001762:	f7fe fdbb 	bl	80002dc <__adddf3>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695c      	ldr	r4, [r3, #20]
 8001772:	f7ff fa19 	bl	8000ba8 <__aeabi_d2iz>
 8001776:	4603      	mov	r3, r0
 8001778:	60e3      	str	r3, [r4, #12]
    robot->moteur_gauche->vitesse = robot->vitesse - robot->omega * L / 2.0;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe ff0a 	bl	8000598 <__aeabi_f2d>
 8001784:	4604      	mov	r4, r0
 8001786:	460d      	mov	r5, r1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe ff03 	bl	8000598 <__aeabi_f2d>
 8001792:	a347      	add	r3, pc, #284	@ (adr r3, 80018b0 <Robot_setAngle+0x208>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f7fe ff56 	bl	8000648 <__aeabi_dmul>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017ac:	f7ff f876 	bl	800089c <__aeabi_ddiv>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4620      	mov	r0, r4
 80017b6:	4629      	mov	r1, r5
 80017b8:	f7fe fd8e 	bl	80002d8 <__aeabi_dsub>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	699c      	ldr	r4, [r3, #24]
 80017c8:	f7ff f9ee 	bl	8000ba8 <__aeabi_d2iz>
 80017cc:	4603      	mov	r3, r0
 80017ce:	60e3      	str	r3, [r4, #12]

    // Limiter les vitesses des moteurs pendant la rotation
    if (robot->moteur_droite->vitesse > 290) robot->moteur_droite->vitesse = 290;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 80017da:	dd04      	ble.n	80017e6 <Robot_setAngle+0x13e>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80017e4:	60da      	str	r2, [r3, #12]
    if (robot->moteur_droite->vitesse < -290) robot->moteur_droite->vitesse = -290;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f513 7f91 	cmn.w	r3, #290	@ 0x122
 80017f0:	da03      	bge.n	80017fa <Robot_setAngle+0x152>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	4a31      	ldr	r2, [pc, #196]	@ (80018bc <Robot_setAngle+0x214>)
 80017f8:	60da      	str	r2, [r3, #12]
    if (robot->moteur_gauche->vitesse > 290) robot->moteur_gauche->vitesse = 290;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8001804:	dd04      	ble.n	8001810 <Robot_setAngle+0x168>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800180e:	60da      	str	r2, [r3, #12]
    if (robot->moteur_gauche->vitesse < -290) robot->moteur_gauche->vitesse = -290;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f513 7f91 	cmn.w	r3, #290	@ 0x122
 800181a:	da03      	bge.n	8001824 <Robot_setAngle+0x17c>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a26      	ldr	r2, [pc, #152]	@ (80018bc <Robot_setAngle+0x214>)
 8001822:	60da      	str	r2, [r3, #12]

    // Appliquer les vitesses des moteurs pour la rotation
    Moteur_setSpeed(robot->moteur_droite, (int)robot->moteur_droite->vitesse);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695a      	ldr	r2, [r3, #20]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	4619      	mov	r1, r3
 8001830:	4610      	mov	r0, r2
 8001832:	f7ff fdb1 	bl	8001398 <Moteur_setSpeed>
    Moteur_setSpeed(robot->moteur_gauche, (int)robot->moteur_gauche->vitesse);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699a      	ldr	r2, [r3, #24]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	4619      	mov	r1, r3
 8001842:	4610      	mov	r0, r2
 8001844:	f7ff fda8 	bl	8001398 <Moteur_setSpeed>

    // Attendre que l'angle soit atteint
    HAL_Delay(1);
 8001848:	2001      	movs	r0, #1
 800184a:	f001 fd97 	bl	800337c <HAL_Delay>

    // Mettre à jour l'angle courant
    robot->theta = angle;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	60da      	str	r2, [r3, #12]

    //  Avancer en ligne droite
    // Appliquer les vitesses des moteurs pour avancer
    Moteur_setSpeed(robot->moteur_droite, 120);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	2178      	movs	r1, #120	@ 0x78
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fd9c 	bl	8001398 <Moteur_setSpeed>
    Moteur_setSpeed(robot->moteur_gauche, 80);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	2150      	movs	r1, #80	@ 0x50
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fd96 	bl	8001398 <Moteur_setSpeed>
    robot->omega = 0;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
    robot->vitesse = (robot->moteur_gauche->vitesse + robot->moteur_droite->vitesse )*0.5 ;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	4413      	add	r3, r2
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fe76 	bl	8000574 <__aeabi_i2d>
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	4b0c      	ldr	r3, [pc, #48]	@ (80018c0 <Robot_setAngle+0x218>)
 800188e:	f7fe fedb 	bl	8000648 <__aeabi_dmul>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	f7ff f9cd 	bl	8000c38 <__aeabi_d2f>
 800189e:	4602      	mov	r2, r0
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	605a      	str	r2, [r3, #4]
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bdb0      	pop	{r4, r5, r7, pc}
 80018ac:	f3af 8000 	nop.w
 80018b0:	10624dd3 	.word	0x10624dd3
 80018b4:	3fc43958 	.word	0x3fc43958
 80018b8:	40690000 	.word	0x40690000
 80018bc:	fffffede 	.word	0xfffffede
 80018c0:	3fe00000 	.word	0x3fe00000
 80018c4:	a50de270 	.word	0xa50de270
 80018c8:	3f91df45 	.word	0x3f91df45

080018cc <Moustache_Init>:
// Prototypes des tâches
static void CB_OUT1_Task(void *pvParameters);
static void CB_OUT2_Task(void *pvParameters);

// Initialisation
void Moustache_Init(void) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af02      	add	r7, sp, #8
    // Création des tâches
    xTaskCreate(CB_OUT1_Task, "CB_OUT1_Task", 128, NULL, 5, &cb_out1_task_handle);
 80018d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <Moustache_Init+0x34>)
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	2305      	movs	r3, #5
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2300      	movs	r3, #0
 80018dc:	2280      	movs	r2, #128	@ 0x80
 80018de:	4909      	ldr	r1, [pc, #36]	@ (8001904 <Moustache_Init+0x38>)
 80018e0:	4809      	ldr	r0, [pc, #36]	@ (8001908 <Moustache_Init+0x3c>)
 80018e2:	f007 fde5 	bl	80094b0 <xTaskCreate>
    xTaskCreate(CB_OUT2_Task, "CB_OUT2_Task", 128, NULL, 5, &cb_out2_task_handle);
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <Moustache_Init+0x40>)
 80018e8:	9301      	str	r3, [sp, #4]
 80018ea:	2305      	movs	r3, #5
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2300      	movs	r3, #0
 80018f0:	2280      	movs	r2, #128	@ 0x80
 80018f2:	4907      	ldr	r1, [pc, #28]	@ (8001910 <Moustache_Init+0x44>)
 80018f4:	4807      	ldr	r0, [pc, #28]	@ (8001914 <Moustache_Init+0x48>)
 80018f6:	f007 fddb 	bl	80094b0 <xTaskCreate>
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	200003c0 	.word	0x200003c0
 8001904:	0800faf4 	.word	0x0800faf4
 8001908:	080019ed 	.word	0x080019ed
 800190c:	200003c4 	.word	0x200003c4
 8001910:	0800fb04 	.word	0x0800fb04
 8001914:	08001a21 	.word	0x08001a21

08001918 <Moustache_HandleInterrupt>:

// Gestion des interruptions GPIO
void Moustache_HandleInterrupt(uint16_t GPIO_Pin) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af02      	add	r7, sp, #8
 800191e:	4603      	mov	r3, r0
 8001920:	80fb      	strh	r3, [r7, #6]
    BaseType_t higherPriorityTaskWoken = pdFALSE;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]

    if (GPIO_Pin == CB_OUT1_Pin) {
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	2b04      	cmp	r3, #4
 800192a:	d117      	bne.n	800195c <Moustache_HandleInterrupt+0x44>
        if (exclusive_task == 0 || exclusive_task == 1) {
 800192c:	4b20      	ldr	r3, [pc, #128]	@ (80019b0 <Moustache_HandleInterrupt+0x98>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d004      	beq.n	8001940 <Moustache_HandleInterrupt+0x28>
 8001936:	4b1e      	ldr	r3, [pc, #120]	@ (80019b0 <Moustache_HandleInterrupt+0x98>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b01      	cmp	r3, #1
 800193e:	d127      	bne.n	8001990 <Moustache_HandleInterrupt+0x78>
            // Activer CB_OUT1
            exclusive_task = 1; // Marquer CB_OUT1 comme exclusif
 8001940:	4b1b      	ldr	r3, [pc, #108]	@ (80019b0 <Moustache_HandleInterrupt+0x98>)
 8001942:	2201      	movs	r2, #1
 8001944:	701a      	strb	r2, [r3, #0]
            xTaskNotifyFromISR(cb_out1_task_handle, 0x01, eSetBits, &higherPriorityTaskWoken);
 8001946:	4b1b      	ldr	r3, [pc, #108]	@ (80019b4 <Moustache_HandleInterrupt+0x9c>)
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2300      	movs	r3, #0
 8001952:	2201      	movs	r2, #1
 8001954:	2101      	movs	r1, #1
 8001956:	f008 fb73 	bl	800a040 <xTaskGenericNotifyFromISR>
 800195a:	e019      	b.n	8001990 <Moustache_HandleInterrupt+0x78>
        }
    } else if (GPIO_Pin == CB_OUT2_Pin) {
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	2b08      	cmp	r3, #8
 8001960:	d116      	bne.n	8001990 <Moustache_HandleInterrupt+0x78>
        if (exclusive_task == 0 || exclusive_task == 2) {
 8001962:	4b13      	ldr	r3, [pc, #76]	@ (80019b0 <Moustache_HandleInterrupt+0x98>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d004      	beq.n	8001976 <Moustache_HandleInterrupt+0x5e>
 800196c:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <Moustache_HandleInterrupt+0x98>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d10c      	bne.n	8001990 <Moustache_HandleInterrupt+0x78>
            // Activer CB_OUT2
            exclusive_task = 2; // Marquer CB_OUT2 comme exclusif
 8001976:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <Moustache_HandleInterrupt+0x98>)
 8001978:	2202      	movs	r2, #2
 800197a:	701a      	strb	r2, [r3, #0]
            xTaskNotifyFromISR(cb_out2_task_handle, 0x01, eSetBits, &higherPriorityTaskWoken);
 800197c:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <Moustache_HandleInterrupt+0xa0>)
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2300      	movs	r3, #0
 8001988:	2201      	movs	r2, #1
 800198a:	2101      	movs	r1, #1
 800198c:	f008 fb58 	bl	800a040 <xTaskGenericNotifyFromISR>
        }
    }

    // Passer à une tâche de priorité plus élevée si nécessaire
    portYIELD_FROM_ISR(higherPriorityTaskWoken);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d007      	beq.n	80019a6 <Moustache_HandleInterrupt+0x8e>
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <Moustache_HandleInterrupt+0xa4>)
 8001998:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	f3bf 8f4f 	dsb	sy
 80019a2:	f3bf 8f6f 	isb	sy
}
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200003c8 	.word	0x200003c8
 80019b4:	200003c0 	.word	0x200003c0
 80019b8:	200003c4 	.word	0x200003c4
 80019bc:	e000ed04 	.word	0xe000ed04

080019c0 <Bord>:

static void Bord(void ) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	if (robot.direction == 'A') {
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <Bord+0x28>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b41      	cmp	r3, #65	@ 0x41
 80019ca:	d103      	bne.n	80019d4 <Bord+0x14>
		Robot_Recule(&robot);
 80019cc:	4806      	ldr	r0, [pc, #24]	@ (80019e8 <Bord+0x28>)
 80019ce:	f7ff fe31 	bl	8001634 <Robot_Recule>
	} else if (robot.direction == 'R') {
		Robot_Start(&robot);
	}
}
 80019d2:	e006      	b.n	80019e2 <Bord+0x22>
	} else if (robot.direction == 'R') {
 80019d4:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <Bord+0x28>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b52      	cmp	r3, #82	@ 0x52
 80019da:	d102      	bne.n	80019e2 <Bord+0x22>
		Robot_Start(&robot);
 80019dc:	4802      	ldr	r0, [pc, #8]	@ (80019e8 <Bord+0x28>)
 80019de:	f7ff fdff 	bl	80015e0 <Robot_Start>
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200011bc 	.word	0x200011bc

080019ec <CB_OUT1_Task>:
// Tâches pour traiter les interruptions
static void CB_OUT1_Task(void *pvParameters)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
    uint32_t notificationValue = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
    for (;;) {
        // Attend une notification
        if (xTaskNotifyWait(0, 0xFFFFFFFF, &notificationValue, portMAX_DELAY) == pdTRUE) {
 80019f8:	f107 020c 	add.w	r2, r7, #12
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	2000      	movs	r0, #0
 8001a06:	f008 f9f9 	bl	8009dfc <xTaskNotifyWait>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d1f3      	bne.n	80019f8 <CB_OUT1_Task+0xc>
            // Action pour CB_OUT1
            //printf("CB_OUT1 Detected\r\n");
            //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // Exemple d'action
        	Bord();
 8001a10:	f7ff ffd6 	bl	80019c0 <Bord>
            // Simule une tâche longue
            //vTaskDelay(pdMS_TO_TICKS(1000));

            // Réinitialiser l'état pour permettre de détecter CB_OUT1 ou CB_OUT2 à nouveau
            exclusive_task = 0;
 8001a14:	4b01      	ldr	r3, [pc, #4]	@ (8001a1c <CB_OUT1_Task+0x30>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
        if (xTaskNotifyWait(0, 0xFFFFFFFF, &notificationValue, portMAX_DELAY) == pdTRUE) {
 8001a1a:	e7ed      	b.n	80019f8 <CB_OUT1_Task+0xc>
 8001a1c:	200003c8 	.word	0x200003c8

08001a20 <CB_OUT2_Task>:
        }
    }
}

static void CB_OUT2_Task(void *pvParameters) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
    uint32_t notificationValue = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
    for (;;) {
        // Attend une notification
        if (xTaskNotifyWait(0, 0xFFFFFFFF, &notificationValue, portMAX_DELAY) == pdTRUE) {
 8001a2c:	f107 020c 	add.w	r2, r7, #12
 8001a30:	f04f 33ff 	mov.w	r3, #4294967295
 8001a34:	f04f 31ff 	mov.w	r1, #4294967295
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f008 f9df 	bl	8009dfc <xTaskNotifyWait>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d1f3      	bne.n	8001a2c <CB_OUT2_Task+0xc>
            // Action pour CB_OUT2
            //printf("CB_OUT2 Detected\r\n");
           // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1); // Exemple d'action
        	Bord();
 8001a44:	f7ff ffbc 	bl	80019c0 <Bord>
            // Simule une tâche longue
            //vTaskDelay(pdMS_TO_TICKS(1000));

            // Réinitialiser l'état pour permettre de détecter CB_OUT1 ou CB_OUT2 à nouveau
            exclusive_task = 0;
 8001a48:	4b01      	ldr	r3, [pc, #4]	@ (8001a50 <CB_OUT2_Task+0x30>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
        if (xTaskNotifyWait(0, 0xFFFFFFFF, &notificationValue, portMAX_DELAY) == pdTRUE) {
 8001a4e:	e7ed      	b.n	8001a2c <CB_OUT2_Task+0xc>
 8001a50:	200003c8 	.word	0x200003c8

08001a54 <LIDAR_Init>:

uint8_t flagDMA=0;
uint8_t flagStart = 0 ;

void LIDAR_Init(h_LIDAR_t *h_LIDAR, UART_HandleTypeDef *huart)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
	h_LIDAR->huart = huart;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	f8c3 2b60 	str.w	r2, [r3, #2912]	@ 0xb60
	h_LIDAR->info.start_sign=0xA55A ;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8001a6c:	f8a3 2b40 	strh.w	r2, [r3, #2880]	@ 0xb40
	h_LIDAR->processing.PH =0x55AA;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f245 52aa 	movw	r2, #21930	@ 0x55aa
 8001a76:	f8a3 2d58 	strh.w	r2, [r3, #3416]	@ 0xd58
	h_LIDAR->point[250].Angle=25;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f203 73d4 	addw	r3, r3, #2004	@ 0x7d4
 8001a80:	4a08      	ldr	r2, [pc, #32]	@ (8001aa4 <LIDAR_Init+0x50>)
 8001a82:	601a      	str	r2, [r3, #0]
	h_LIDAR->point[250].Distance=25;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001a8a:	4a06      	ldr	r2, [pc, #24]	@ (8001aa4 <LIDAR_Init+0x50>)
 8001a8c:	601a      	str	r2, [r3, #0]
	h_LIDAR->processing.idx = 0;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2d62 	strb.w	r2, [r3, #3426]	@ 0xd62

}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	41c80000 	.word	0x41c80000

08001aa8 <calculAngle>:

static float calculAngle(h_LIDAR_t *h_LIDAR,float Distance )
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	ed87 0a00 	vstr	s0, [r7]
	float Angle_FSA = ((h_LIDAR->processing.FSA) >> 1) / 64.0;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f8b3 3d5c 	ldrh.w	r3, [r3, #3420]	@ 0xd5c
 8001aba:	085b      	lsrs	r3, r3, #1
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fd58 	bl	8000574 <__aeabi_i2d>
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	4b4f      	ldr	r3, [pc, #316]	@ (8001c08 <calculAngle+0x160>)
 8001aca:	f7fe fee7 	bl	800089c <__aeabi_ddiv>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f7ff f8af 	bl	8000c38 <__aeabi_d2f>
 8001ada:	4603      	mov	r3, r0
 8001adc:	61bb      	str	r3, [r7, #24]
	float Angle_LSA = ((h_LIDAR->processing.LSA) >> 1) / 64.0;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f8b3 3d5e 	ldrh.w	r3, [r3, #3422]	@ 0xd5e
 8001ae4:	085b      	lsrs	r3, r3, #1
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd43 	bl	8000574 <__aeabi_i2d>
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	4b45      	ldr	r3, [pc, #276]	@ (8001c08 <calculAngle+0x160>)
 8001af4:	f7fe fed2 	bl	800089c <__aeabi_ddiv>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7ff f89a 	bl	8000c38 <__aeabi_d2f>
 8001b04:	4603      	mov	r3, r0
 8001b06:	617b      	str	r3, [r7, #20]
	float Angle = (Angle_LSA - Angle_FSA) * (h_LIDAR->processing.idx - 1)/(float)(h_LIDAR->processing.LSN-1) + Angle_FSA;
 8001b08:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3d62 	ldrb.w	r3, [r3, #3426]	@ 0xd62
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	ee07 3a90 	vmov	s15, r3
 8001b20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b24:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3d5b 	ldrb.w	r3, [r3, #3419]	@ 0xd5b
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	ee07 3a90 	vmov	s15, r3
 8001b34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b3c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b44:	edc7 7a04 	vstr	s15, [r7, #16]
	float Angle_Correc = 0;
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
	if (Distance != 0)
 8001b4e:	edd7 7a00 	vldr	s15, [r7]
 8001b52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5a:	d042      	beq.n	8001be2 <calculAngle+0x13a>
	{
		float numerator = 21.8 * (155.3 - Distance);
 8001b5c:	6838      	ldr	r0, [r7, #0]
 8001b5e:	f7fe fd1b 	bl	8000598 <__aeabi_f2d>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	a124      	add	r1, pc, #144	@ (adr r1, 8001bf8 <calculAngle+0x150>)
 8001b68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b6c:	f7fe fbb4 	bl	80002d8 <__aeabi_dsub>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	a321      	add	r3, pc, #132	@ (adr r3, 8001c00 <calculAngle+0x158>)
 8001b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7e:	f7fe fd63 	bl	8000648 <__aeabi_dmul>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f7ff f855 	bl	8000c38 <__aeabi_d2f>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	60fb      	str	r3, [r7, #12]
		float denominator = 155.3 * Distance;
 8001b92:	6838      	ldr	r0, [r7, #0]
 8001b94:	f7fe fd00 	bl	8000598 <__aeabi_f2d>
 8001b98:	a317      	add	r3, pc, #92	@ (adr r3, 8001bf8 <calculAngle+0x150>)
 8001b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9e:	f7fe fd53 	bl	8000648 <__aeabi_dmul>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f7ff f845 	bl	8000c38 <__aeabi_d2f>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	60bb      	str	r3, [r7, #8]
		Angle_Correc = atan(numerator / denominator);
 8001bb2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001bbe:	ee16 0a90 	vmov	r0, s13
 8001bc2:	f7fe fce9 	bl	8000598 <__aeabi_f2d>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	ec43 2b10 	vmov	d0, r2, r3
 8001bce:	f00d fc8b 	bl	800f4e8 <atan>
 8001bd2:	ec53 2b10 	vmov	r2, r3, d0
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f7ff f82d 	bl	8000c38 <__aeabi_d2f>
 8001bde:	4603      	mov	r3, r0
 8001be0:	61fb      	str	r3, [r7, #28]
	}
	return Angle + Angle_Correc ;
 8001be2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001be6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bea:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001bee:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	9999999a 	.word	0x9999999a
 8001bfc:	40636999 	.word	0x40636999
 8001c00:	cccccccd 	.word	0xcccccccd
 8001c04:	4035cccc 	.word	0x4035cccc
 8001c08:	40500000 	.word	0x40500000

08001c0c <LIDAR_start>:

HAL_StatusTypeDef LIDAR_start(h_LIDAR_t *h_LIDAR)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	printf("hello \n");
 8001c14:	4809      	ldr	r0, [pc, #36]	@ (8001c3c <LIDAR_start+0x30>)
 8001c16:	f009 ffcd 	bl	800bbb4 <puts>
	return HAL_UART_Receive_DMA(h_LIDAR->huart, h_LIDAR->data_buff, DATA_BUFF_SIZE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f8d3 0b60 	ldr.w	r0, [r3, #2912]	@ 0xb60
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f603 3364 	addw	r3, r3, #2916	@ 0xb64
 8001c26:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f005 feee 	bl	8007a0c <HAL_UART_Receive_DMA>
 8001c30:	4603      	mov	r3, r0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	0800fb14 	.word	0x0800fb14

08001c40 <process>:

void process(h_LIDAR_t *h_LIDAR, uint16_t start, uint16_t end)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	803b      	strh	r3, [r7, #0]
    for (uint16_t i = start; i < end;)
 8001c50:	887b      	ldrh	r3, [r7, #2]
 8001c52:	83fb      	strh	r3, [r7, #30]
 8001c54:	e0d2      	b.n	8001dfc <process+0x1bc>
    {
        // Lecture de l'en-tête (header)
        uint16_t header = (h_LIDAR->data_buff[i] << 8) | h_LIDAR->data_buff[i + 1];
 8001c56:	8bfb      	ldrh	r3, [r7, #30]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f893 3b64 	ldrb.w	r3, [r3, #2916]	@ 0xb64
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	b21a      	sxth	r2, r3
 8001c64:	8bfb      	ldrh	r3, [r7, #30]
 8001c66:	3301      	adds	r3, #1
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f893 3b64 	ldrb.w	r3, [r3, #2916]	@ 0xb64
 8001c70:	b21b      	sxth	r3, r3
 8001c72:	4313      	orrs	r3, r2
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	837b      	strh	r3, [r7, #26]

        if (header == h_LIDAR->info.start_sign)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f8b3 3b40 	ldrh.w	r3, [r3, #2880]	@ 0xb40
 8001c7e:	8b7a      	ldrh	r2, [r7, #26]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d103      	bne.n	8001c8c <process+0x4c>
        {
            i += 25; // Ignorer 27 octets pour ce type de header
 8001c84:	8bfb      	ldrh	r3, [r7, #30]
 8001c86:	3319      	adds	r3, #25
 8001c88:	83fb      	strh	r3, [r7, #30]
 8001c8a:	e0b7      	b.n	8001dfc <process+0x1bc>
        }
        else if (header == h_LIDAR->processing.PH)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f8b3 3d58 	ldrh.w	r3, [r3, #3416]	@ 0xd58
 8001c92:	8b7a      	ldrh	r2, [r7, #26]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	f040 80ae 	bne.w	8001df6 <process+0x1b6>
        {
            // Début du traitement
            h_LIDAR->processing.CT = h_LIDAR->data_buff[i + 2];
 8001c9a:	8bfb      	ldrh	r3, [r7, #30]
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f893 2b64 	ldrb.w	r2, [r3, #2916]	@ 0xb64
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f883 2d5a 	strb.w	r2, [r3, #3418]	@ 0xd5a
            h_LIDAR->processing.LSN = h_LIDAR->data_buff[i + 3];
 8001cac:	8bfb      	ldrh	r3, [r7, #30]
 8001cae:	3303      	adds	r3, #3
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f893 2b64 	ldrb.w	r2, [r3, #2916]	@ 0xb64
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f883 2d5b 	strb.w	r2, [r3, #3419]	@ 0xd5b
            h_LIDAR->processing.FSA = (h_LIDAR->data_buff[i + 5] << 8) | h_LIDAR->data_buff[i + 4];
 8001cbe:	8bfb      	ldrh	r3, [r7, #30]
 8001cc0:	3305      	adds	r3, #5
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f893 3b64 	ldrb.w	r3, [r3, #2916]	@ 0xb64
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	b21a      	sxth	r2, r3
 8001cce:	8bfb      	ldrh	r3, [r7, #30]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	440b      	add	r3, r1
 8001cd6:	f893 3b64 	ldrb.w	r3, [r3, #2916]	@ 0xb64
 8001cda:	b21b      	sxth	r3, r3
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	b21b      	sxth	r3, r3
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f8a3 2d5c 	strh.w	r2, [r3, #3420]	@ 0xd5c
            h_LIDAR->processing.LSA = (h_LIDAR->data_buff[i + 7] << 8) | h_LIDAR->data_buff[i + 6];
 8001ce8:	8bfb      	ldrh	r3, [r7, #30]
 8001cea:	3307      	adds	r3, #7
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	4413      	add	r3, r2
 8001cf0:	f893 3b64 	ldrb.w	r3, [r3, #2916]	@ 0xb64
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	b21a      	sxth	r2, r3
 8001cf8:	8bfb      	ldrh	r3, [r7, #30]
 8001cfa:	3306      	adds	r3, #6
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	440b      	add	r3, r1
 8001d00:	f893 3b64 	ldrb.w	r3, [r3, #2916]	@ 0xb64
 8001d04:	b21b      	sxth	r3, r3
 8001d06:	4313      	orrs	r3, r2
 8001d08:	b21b      	sxth	r3, r3
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f8a3 2d5e 	strh.w	r2, [r3, #3422]	@ 0xd5e
            h_LIDAR->processing.CS = (h_LIDAR->data_buff[i + 9] << 8) | h_LIDAR->data_buff[i + 8];
 8001d12:	8bfb      	ldrh	r3, [r7, #30]
 8001d14:	3309      	adds	r3, #9
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f893 3b64 	ldrb.w	r3, [r3, #2916]	@ 0xb64
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	b21a      	sxth	r2, r3
 8001d22:	8bfb      	ldrh	r3, [r7, #30]
 8001d24:	3308      	adds	r3, #8
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	440b      	add	r3, r1
 8001d2a:	f893 3b64 	ldrb.w	r3, [r3, #2916]	@ 0xb64
 8001d2e:	b21b      	sxth	r3, r3
 8001d30:	4313      	orrs	r3, r2
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f8a3 2d60 	strh.w	r2, [r3, #3424]	@ 0xd60
            i += 10;
 8001d3c:	8bfb      	ldrh	r3, [r7, #30]
 8001d3e:	330a      	adds	r3, #10
 8001d40:	83fb      	strh	r3, [r7, #30]

            // Initialisation de l'indice
            h_LIDAR->processing.idx = 1;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2d62 	strb.w	r2, [r3, #3426]	@ 0xd62

            // Traitement des points
            uint16_t index;
            float Distance, Angle;

            for (uint16_t j = 0; j < h_LIDAR->processing.LSN; ++j)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	83bb      	strh	r3, [r7, #28]
 8001d4e:	e04a      	b.n	8001de6 <process+0x1a6>
            {
                // Lecture des distances
                Distance = ((h_LIDAR->data_buff[i + 1] << 8) | h_LIDAR->data_buff[i]) / 4.0f;
 8001d50:	8bfb      	ldrh	r3, [r7, #30]
 8001d52:	3301      	adds	r3, #1
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	4413      	add	r3, r2
 8001d58:	f893 3b64 	ldrb.w	r3, [r3, #2916]	@ 0xb64
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	8bfa      	ldrh	r2, [r7, #30]
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	440a      	add	r2, r1
 8001d64:	f892 2b64 	ldrb.w	r2, [r2, #2916]	@ 0xb64
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	ee07 3a90 	vmov	s15, r3
 8001d6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d72:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001d76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d7a:	edc7 7a05 	vstr	s15, [r7, #20]

                // Calcul des angles avec `idx`
                Angle = calculAngle(h_LIDAR, Distance);
 8001d7e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fe90 	bl	8001aa8 <calculAngle>
 8001d88:	ed87 0a04 	vstr	s0, [r7, #16]
                index = (uint16_t)(Angle) % 360;
 8001d8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d94:	ee17 3a90 	vmov	r3, s15
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	08da      	lsrs	r2, r3, #3
 8001d9c:	491c      	ldr	r1, [pc, #112]	@ (8001e10 <process+0x1d0>)
 8001d9e:	fba1 1202 	umull	r1, r2, r1, r2
 8001da2:	0892      	lsrs	r2, r2, #2
 8001da4:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001da8:	fb01 f202 	mul.w	r2, r1, r2
 8001dac:	1a9b      	subs	r3, r3, r2
 8001dae:	81fb      	strh	r3, [r7, #14]

                // Mise à jour des données des points
                h_LIDAR->point[index].Distance = Distance;
 8001db0:	89fb      	ldrh	r3, [r7, #14]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4413      	add	r3, r2
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	601a      	str	r2, [r3, #0]
                h_LIDAR->point[index].Angle = Angle;
 8001dbc:	89fb      	ldrh	r3, [r7, #14]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	601a      	str	r2, [r3, #0]

                // Avancer dans le buffer
                i += 2;
 8001dca:	8bfb      	ldrh	r3, [r7, #30]
 8001dcc:	3302      	adds	r3, #2
 8001dce:	83fb      	strh	r3, [r7, #30]

                // Mise à jour de l'indice
                h_LIDAR->processing.idx++;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3d62 	ldrb.w	r3, [r3, #3426]	@ 0xd62
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f883 2d62 	strb.w	r2, [r3, #3426]	@ 0xd62
            for (uint16_t j = 0; j < h_LIDAR->processing.LSN; ++j)
 8001de0:	8bbb      	ldrh	r3, [r7, #28]
 8001de2:	3301      	adds	r3, #1
 8001de4:	83bb      	strh	r3, [r7, #28]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3d5b 	ldrb.w	r3, [r3, #3419]	@ 0xd5b
 8001dec:	461a      	mov	r2, r3
 8001dee:	8bbb      	ldrh	r3, [r7, #28]
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d3ad      	bcc.n	8001d50 <process+0x110>
 8001df4:	e002      	b.n	8001dfc <process+0x1bc>
            }
        }
        else
        {
            i++; // Si aucun des cas ne correspond, passer au prochain octet
 8001df6:	8bfb      	ldrh	r3, [r7, #30]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	83fb      	strh	r3, [r7, #30]
    for (uint16_t i = start; i < end;)
 8001dfc:	8bfa      	ldrh	r2, [r7, #30]
 8001dfe:	883b      	ldrh	r3, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	f4ff af28 	bcc.w	8001c56 <process+0x16>
        }
    }
}
 8001e06:	bf00      	nop
 8001e08:	bf00      	nop
 8001e0a:	3720      	adds	r7, #32
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	16c16c17 	.word	0x16c16c17

08001e14 <LIDAR_process_frame>:


void LIDAR_process_frame(h_LIDAR_t *LIDAR)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	if(flagDMA==1)
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <LIDAR_process_frame+0x3c>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d104      	bne.n	8001e2e <LIDAR_process_frame+0x1a>
	{
		process(LIDAR, 0, DATA_BUFF_SIZE/2) ;
 8001e24:	22fa      	movs	r2, #250	@ 0xfa
 8001e26:	2100      	movs	r1, #0
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ff09 	bl	8001c40 <process>
	}
	if (flagDMA==2)
 8001e2e:	4b08      	ldr	r3, [pc, #32]	@ (8001e50 <LIDAR_process_frame+0x3c>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d108      	bne.n	8001e48 <LIDAR_process_frame+0x34>
	{
		process(LIDAR, DATA_BUFF_SIZE/2,DATA_BUFF_SIZE) ;
 8001e36:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001e3a:	21fa      	movs	r1, #250	@ 0xfa
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff feff 	bl	8001c40 <process>
		flagDMA = 0 ;
 8001e42:	4b03      	ldr	r3, [pc, #12]	@ (8001e50 <LIDAR_process_frame+0x3c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
	}
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	200003c9 	.word	0x200003c9

08001e54 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001e54:	b5b0      	push	{r4, r5, r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001e5a:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <MX_FREERTOS_Init+0x2c>)
 8001e5c:	1d3c      	adds	r4, r7, #4
 8001e5e:	461d      	mov	r5, r3
 8001e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e64:	682b      	ldr	r3, [r5, #0]
 8001e66:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f007 fa30 	bl	80092d2 <osThreadCreate>
 8001e72:	4603      	mov	r3, r0
 8001e74:	4a03      	ldr	r2, [pc, #12]	@ (8001e84 <MX_FREERTOS_Init+0x30>)
 8001e76:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001e78:	bf00      	nop
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e80:	0800fb28 	.word	0x0800fb28
 8001e84:	200003cc 	.word	0x200003cc

08001e88 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e90:	2001      	movs	r0, #1
 8001e92:	f007 fa45 	bl	8009320 <osDelay>
 8001e96:	e7fb      	b.n	8001e90 <StartDefaultTask+0x8>

08001e98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001e9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <MX_DMA_Init+0x50>)
 8001ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ea2:	4a11      	ldr	r2, [pc, #68]	@ (8001ee8 <MX_DMA_Init+0x50>)
 8001ea4:	f043 0304 	orr.w	r3, r3, #4
 8001ea8:	6493      	str	r3, [r2, #72]	@ 0x48
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee8 <MX_DMA_Init+0x50>)
 8001eac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee8 <MX_DMA_Init+0x50>)
 8001eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eba:	4a0b      	ldr	r2, [pc, #44]	@ (8001ee8 <MX_DMA_Init+0x50>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ec2:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <MX_DMA_Init+0x50>)
 8001ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2105      	movs	r1, #5
 8001ed2:	200b      	movs	r0, #11
 8001ed4:	f001 fb2c 	bl	8003530 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ed8:	200b      	movs	r0, #11
 8001eda:	f001 fb43 	bl	8003564 <HAL_NVIC_EnableIRQ>

}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000

08001eec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	@ 0x28
 8001ef0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f02:	4b53      	ldr	r3, [pc, #332]	@ (8002050 <MX_GPIO_Init+0x164>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f06:	4a52      	ldr	r2, [pc, #328]	@ (8002050 <MX_GPIO_Init+0x164>)
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f0e:	4b50      	ldr	r3, [pc, #320]	@ (8002050 <MX_GPIO_Init+0x164>)
 8001f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f1a:	4b4d      	ldr	r3, [pc, #308]	@ (8002050 <MX_GPIO_Init+0x164>)
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1e:	4a4c      	ldr	r2, [pc, #304]	@ (8002050 <MX_GPIO_Init+0x164>)
 8001f20:	f043 0320 	orr.w	r3, r3, #32
 8001f24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f26:	4b4a      	ldr	r3, [pc, #296]	@ (8002050 <MX_GPIO_Init+0x164>)
 8001f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2a:	f003 0320 	and.w	r3, r3, #32
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f32:	4b47      	ldr	r3, [pc, #284]	@ (8002050 <MX_GPIO_Init+0x164>)
 8001f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f36:	4a46      	ldr	r2, [pc, #280]	@ (8002050 <MX_GPIO_Init+0x164>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f3e:	4b44      	ldr	r3, [pc, #272]	@ (8002050 <MX_GPIO_Init+0x164>)
 8001f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4a:	4b41      	ldr	r3, [pc, #260]	@ (8002050 <MX_GPIO_Init+0x164>)
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4e:	4a40      	ldr	r2, [pc, #256]	@ (8002050 <MX_GPIO_Init+0x164>)
 8001f50:	f043 0302 	orr.w	r3, r3, #2
 8001f54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f56:	4b3e      	ldr	r3, [pc, #248]	@ (8002050 <MX_GPIO_Init+0x164>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001f62:	2200      	movs	r2, #0
 8001f64:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001f68:	483a      	ldr	r0, [pc, #232]	@ (8002054 <MX_GPIO_Init+0x168>)
 8001f6a:	f001 ffbd 	bl	8003ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CB_IN_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2190      	movs	r1, #144	@ 0x90
 8001f72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f76:	f001 ffb7 	bl	8003ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f80:	4835      	ldr	r0, [pc, #212]	@ (8002058 <MX_GPIO_Init+0x16c>)
 8001f82:	f001 ffb1 	bl	8003ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001f86:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f94:	2300      	movs	r3, #0
 8001f96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	482d      	ldr	r0, [pc, #180]	@ (8002054 <MX_GPIO_Init+0x168>)
 8001fa0:	f001 fe20 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CB_OUT1_Pin|CB_OUT2_Pin|CHAT_SOURIS_Pin;
 8001fa4:	232c      	movs	r3, #44	@ 0x2c
 8001fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fa8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fbc:	f001 fe12 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CB_IN_Pin|DEV_EN_LIDAR_Pin;
 8001fc0:	2390      	movs	r3, #144	@ 0x90
 8001fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fda:	f001 fe03 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin;
 8001fde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M_EN_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4818      	ldr	r0, [pc, #96]	@ (8002058 <MX_GPIO_Init+0x16c>)
 8001ff8:	f001 fdf4 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 8001ffc:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002002:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	4619      	mov	r1, r3
 8002012:	4811      	ldr	r0, [pc, #68]	@ (8002058 <MX_GPIO_Init+0x16c>)
 8002014:	f001 fde6 	bl	8003be4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002018:	2200      	movs	r2, #0
 800201a:	2105      	movs	r1, #5
 800201c:	2008      	movs	r0, #8
 800201e:	f001 fa87 	bl	8003530 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002022:	2008      	movs	r0, #8
 8002024:	f001 fa9e 	bl	8003564 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002028:	2200      	movs	r2, #0
 800202a:	2105      	movs	r1, #5
 800202c:	2009      	movs	r0, #9
 800202e:	f001 fa7f 	bl	8003530 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002032:	2009      	movs	r0, #9
 8002034:	f001 fa96 	bl	8003564 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002038:	2200      	movs	r2, #0
 800203a:	2105      	movs	r1, #5
 800203c:	2017      	movs	r0, #23
 800203e:	f001 fa77 	bl	8003530 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002042:	2017      	movs	r0, #23
 8002044:	f001 fa8e 	bl	8003564 <HAL_NVIC_EnableIRQ>

}
 8002048:	bf00      	nop
 800204a:	3728      	adds	r7, #40	@ 0x28
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	48000800 	.word	0x48000800
 8002058:	48000400 	.word	0x48000400

0800205c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002060:	4b1b      	ldr	r3, [pc, #108]	@ (80020d0 <MX_I2C1_Init+0x74>)
 8002062:	4a1c      	ldr	r2, [pc, #112]	@ (80020d4 <MX_I2C1_Init+0x78>)
 8002064:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xA0623C56;
 8002066:	4b1a      	ldr	r3, [pc, #104]	@ (80020d0 <MX_I2C1_Init+0x74>)
 8002068:	4a1b      	ldr	r2, [pc, #108]	@ (80020d8 <MX_I2C1_Init+0x7c>)
 800206a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800206c:	4b18      	ldr	r3, [pc, #96]	@ (80020d0 <MX_I2C1_Init+0x74>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002072:	4b17      	ldr	r3, [pc, #92]	@ (80020d0 <MX_I2C1_Init+0x74>)
 8002074:	2201      	movs	r2, #1
 8002076:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002078:	4b15      	ldr	r3, [pc, #84]	@ (80020d0 <MX_I2C1_Init+0x74>)
 800207a:	2200      	movs	r2, #0
 800207c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800207e:	4b14      	ldr	r3, [pc, #80]	@ (80020d0 <MX_I2C1_Init+0x74>)
 8002080:	2200      	movs	r2, #0
 8002082:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002084:	4b12      	ldr	r3, [pc, #72]	@ (80020d0 <MX_I2C1_Init+0x74>)
 8002086:	2200      	movs	r2, #0
 8002088:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800208a:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <MX_I2C1_Init+0x74>)
 800208c:	2200      	movs	r2, #0
 800208e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002090:	4b0f      	ldr	r3, [pc, #60]	@ (80020d0 <MX_I2C1_Init+0x74>)
 8002092:	2200      	movs	r2, #0
 8002094:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002096:	480e      	ldr	r0, [pc, #56]	@ (80020d0 <MX_I2C1_Init+0x74>)
 8002098:	f001 ff70 	bl	8003f7c <HAL_I2C_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80020a2:	f000 faad 	bl	8002600 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020a6:	2100      	movs	r1, #0
 80020a8:	4809      	ldr	r0, [pc, #36]	@ (80020d0 <MX_I2C1_Init+0x74>)
 80020aa:	f002 fcf3 	bl	8004a94 <HAL_I2CEx_ConfigAnalogFilter>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80020b4:	f000 faa4 	bl	8002600 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020b8:	2100      	movs	r1, #0
 80020ba:	4805      	ldr	r0, [pc, #20]	@ (80020d0 <MX_I2C1_Init+0x74>)
 80020bc:	f002 fd35 	bl	8004b2a <HAL_I2CEx_ConfigDigitalFilter>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80020c6:	f000 fa9b 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200003d0 	.word	0x200003d0
 80020d4:	40005400 	.word	0x40005400
 80020d8:	a0623c56 	.word	0xa0623c56

080020dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b09a      	sub	sp, #104	@ 0x68
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020f4:	f107 0310 	add.w	r3, r7, #16
 80020f8:	2244      	movs	r2, #68	@ 0x44
 80020fa:	2100      	movs	r1, #0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f009 fe59 	bl	800bdb4 <memset>
  if(i2cHandle->Instance==I2C1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a1f      	ldr	r2, [pc, #124]	@ (8002184 <HAL_I2C_MspInit+0xa8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d136      	bne.n	800217a <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800210c:	2340      	movs	r3, #64	@ 0x40
 800210e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002110:	2300      	movs	r3, #0
 8002112:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002114:	f107 0310 	add.w	r3, r7, #16
 8002118:	4618      	mov	r0, r3
 800211a:	f003 fb63 	bl	80057e4 <HAL_RCCEx_PeriphCLKConfig>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002124:	f000 fa6c 	bl	8002600 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002128:	4b17      	ldr	r3, [pc, #92]	@ (8002188 <HAL_I2C_MspInit+0xac>)
 800212a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212c:	4a16      	ldr	r2, [pc, #88]	@ (8002188 <HAL_I2C_MspInit+0xac>)
 800212e:	f043 0302 	orr.w	r3, r3, #2
 8002132:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002134:	4b14      	ldr	r3, [pc, #80]	@ (8002188 <HAL_I2C_MspInit+0xac>)
 8002136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002140:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002144:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002146:	2312      	movs	r3, #18
 8002148:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002152:	2304      	movs	r3, #4
 8002154:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800215a:	4619      	mov	r1, r3
 800215c:	480b      	ldr	r0, [pc, #44]	@ (800218c <HAL_I2C_MspInit+0xb0>)
 800215e:	f001 fd41 	bl	8003be4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002162:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <HAL_I2C_MspInit+0xac>)
 8002164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002166:	4a08      	ldr	r2, [pc, #32]	@ (8002188 <HAL_I2C_MspInit+0xac>)
 8002168:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800216c:	6593      	str	r3, [r2, #88]	@ 0x58
 800216e:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <HAL_I2C_MspInit+0xac>)
 8002170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002172:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800217a:	bf00      	nop
 800217c:	3768      	adds	r7, #104	@ 0x68
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40005400 	.word	0x40005400
 8002188:	40021000 	.word	0x40021000
 800218c:	48000400 	.word	0x48000400

08002190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002196:	f001 f8ba 	bl	800330e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800219a:	f000 f8a7 	bl	80022ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800219e:	f7ff fea5 	bl	8001eec <MX_GPIO_Init>
  MX_DMA_Init();
 80021a2:	f7ff fe79 	bl	8001e98 <MX_DMA_Init>
  MX_TIM1_Init();
 80021a6:	f000 fbf9 	bl	800299c <MX_TIM1_Init>
  MX_TIM3_Init();
 80021aa:	f000 fcb5 	bl	8002b18 <MX_TIM3_Init>
  MX_TIM4_Init();
 80021ae:	f000 fd09 	bl	8002bc4 <MX_TIM4_Init>
  MX_TIM16_Init();
 80021b2:	f000 fd5d 	bl	8002c70 <MX_TIM16_Init>
  MX_UART4_Init();
 80021b6:	f000 ff19 	bl	8002fec <MX_UART4_Init>
  MX_USART3_UART_Init();
 80021ba:	f000 ff63 	bl	8003084 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80021be:	f7ff ff4d 	bl	800205c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	// Peripheral Initialization
	LIDAR_Init(&lidar, &huart4);
 80021c2:	4931      	ldr	r1, [pc, #196]	@ (8002288 <main+0xf8>)
 80021c4:	4831      	ldr	r0, [pc, #196]	@ (800228c <main+0xfc>)
 80021c6:	f7ff fc45 	bl	8001a54 <LIDAR_Init>
	LIDAR_start(&lidar);
 80021ca:	4830      	ldr	r0, [pc, #192]	@ (800228c <main+0xfc>)
 80021cc:	f7ff fd1e 	bl	8001c0c <LIDAR_start>
	Moteur_init(&moteur_droit, &htim1, TIM_CHANNEL_1);
 80021d0:	2200      	movs	r2, #0
 80021d2:	492f      	ldr	r1, [pc, #188]	@ (8002290 <main+0x100>)
 80021d4:	482f      	ldr	r0, [pc, #188]	@ (8002294 <main+0x104>)
 80021d6:	f7ff f8c7 	bl	8001368 <Moteur_init>
	Moteur_init(&moteur_gauche, &htim1, TIM_CHANNEL_2);
 80021da:	2204      	movs	r2, #4
 80021dc:	492c      	ldr	r1, [pc, #176]	@ (8002290 <main+0x100>)
 80021de:	482e      	ldr	r0, [pc, #184]	@ (8002298 <main+0x108>)
 80021e0:	f7ff f8c2 	bl	8001368 <Moteur_init>
	Robot_Init(&robot, &moteur_droit, &moteur_gauche);
 80021e4:	4a2c      	ldr	r2, [pc, #176]	@ (8002298 <main+0x108>)
 80021e6:	492b      	ldr	r1, [pc, #172]	@ (8002294 <main+0x104>)
 80021e8:	482c      	ldr	r0, [pc, #176]	@ (800229c <main+0x10c>)
 80021ea:	f7ff fa38 	bl	800165e <Robot_Init>
	Robot_Start(&robot);
 80021ee:	482b      	ldr	r0, [pc, #172]	@ (800229c <main+0x10c>)
 80021f0:	f7ff f9f6 	bl	80015e0 <Robot_Start>
	Moustache_Init();
 80021f4:	f7ff fb6a 	bl	80018cc <Moustache_Init>
	ADXL343_Init(&ADXL343, &hi2c1);
 80021f8:	4929      	ldr	r1, [pc, #164]	@ (80022a0 <main+0x110>)
 80021fa:	482a      	ldr	r0, [pc, #168]	@ (80022a4 <main+0x114>)
 80021fc:	f7fe ff76 	bl	80010ec <ADXL343_Init>

	// Start DMA transmission
	HAL_UART_Transmit_DMA(&huart4, sendTab, TABLE_SIZE);
 8002200:	f240 12c9 	movw	r2, #457	@ 0x1c9
 8002204:	4928      	ldr	r1, [pc, #160]	@ (80022a8 <main+0x118>)
 8002206:	4820      	ldr	r0, [pc, #128]	@ (8002288 <main+0xf8>)
 8002208:	f005 fb80 	bl	800790c <HAL_UART_Transmit_DMA>
	printf("Transmission Start ... \n");
 800220c:	4827      	ldr	r0, [pc, #156]	@ (80022ac <main+0x11c>)
 800220e:	f009 fcd1 	bl	800bbb4 <puts>

	// Create FreeRTOS tasks
	xTaskCreate(lidarTask, "Lidar Task", 256, NULL, 2, &lidarTaskHandle);
 8002212:	4b27      	ldr	r3, [pc, #156]	@ (80022b0 <main+0x120>)
 8002214:	9301      	str	r3, [sp, #4]
 8002216:	2302      	movs	r3, #2
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	2300      	movs	r3, #0
 800221c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002220:	4924      	ldr	r1, [pc, #144]	@ (80022b4 <main+0x124>)
 8002222:	4825      	ldr	r0, [pc, #148]	@ (80022b8 <main+0x128>)
 8002224:	f007 f944 	bl	80094b0 <xTaskCreate>
	xTaskCreate(ledBlinkTask, "LED Blink Task", 128, NULL, 3, &ledBlinkTaskHandle);
 8002228:	4b24      	ldr	r3, [pc, #144]	@ (80022bc <main+0x12c>)
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	2303      	movs	r3, #3
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	2300      	movs	r3, #0
 8002232:	2280      	movs	r2, #128	@ 0x80
 8002234:	4922      	ldr	r1, [pc, #136]	@ (80022c0 <main+0x130>)
 8002236:	4823      	ldr	r0, [pc, #140]	@ (80022c4 <main+0x134>)
 8002238:	f007 f93a 	bl	80094b0 <xTaskCreate>
	xTaskCreate(task_angle, "Angle Task", 256, NULL, 4, &h_task_angle);
 800223c:	4b22      	ldr	r3, [pc, #136]	@ (80022c8 <main+0x138>)
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	2304      	movs	r3, #4
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	2300      	movs	r3, #0
 8002246:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800224a:	4920      	ldr	r1, [pc, #128]	@ (80022cc <main+0x13c>)
 800224c:	4820      	ldr	r0, [pc, #128]	@ (80022d0 <main+0x140>)
 800224e:	f007 f92f 	bl	80094b0 <xTaskCreate>
	xTaskCreate(modeChange, "mode", 128, NULL, 5, &modeTaskHandle);
 8002252:	4b20      	ldr	r3, [pc, #128]	@ (80022d4 <main+0x144>)
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	2305      	movs	r3, #5
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	2300      	movs	r3, #0
 800225c:	2280      	movs	r2, #128	@ 0x80
 800225e:	491e      	ldr	r1, [pc, #120]	@ (80022d8 <main+0x148>)
 8002260:	481e      	ldr	r0, [pc, #120]	@ (80022dc <main+0x14c>)
 8002262:	f007 f925 	bl	80094b0 <xTaskCreate>
	xTaskCreate(TapDetected, "TapDetected", 128, NULL, 5, &TapDetected_task);
 8002266:	4b1e      	ldr	r3, [pc, #120]	@ (80022e0 <main+0x150>)
 8002268:	9301      	str	r3, [sp, #4]
 800226a:	2305      	movs	r3, #5
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2300      	movs	r3, #0
 8002270:	2280      	movs	r2, #128	@ 0x80
 8002272:	491c      	ldr	r1, [pc, #112]	@ (80022e4 <main+0x154>)
 8002274:	481c      	ldr	r0, [pc, #112]	@ (80022e8 <main+0x158>)
 8002276:	f007 f91b 	bl	80094b0 <xTaskCreate>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800227a:	f7ff fdeb 	bl	8001e54 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800227e:	f007 f821 	bl	80092c4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
 8002282:	bf00      	nop
 8002284:	e7fd      	b.n	8002282 <main+0xf2>
 8002286:	bf00      	nop
 8002288:	20001370 	.word	0x20001370
 800228c:	20000424 	.word	0x20000424
 8002290:	20001240 	.word	0x20001240
 8002294:	2000119c 	.word	0x2000119c
 8002298:	200011ac 	.word	0x200011ac
 800229c:	200011bc 	.word	0x200011bc
 80022a0:	200003d0 	.word	0x200003d0
 80022a4:	200011dc 	.word	0x200011dc
 80022a8:	20000000 	.word	0x20000000
 80022ac:	0800fb3c 	.word	0x0800fb3c
 80022b0:	20001188 	.word	0x20001188
 80022b4:	0800fb54 	.word	0x0800fb54
 80022b8:	08002381 	.word	0x08002381
 80022bc:	2000118c 	.word	0x2000118c
 80022c0:	0800fb60 	.word	0x0800fb60
 80022c4:	080023c5 	.word	0x080023c5
 80022c8:	20001190 	.word	0x20001190
 80022cc:	0800fb70 	.word	0x0800fb70
 80022d0:	080023fd 	.word	0x080023fd
 80022d4:	20001198 	.word	0x20001198
 80022d8:	0800fb7c 	.word	0x0800fb7c
 80022dc:	080024a1 	.word	0x080024a1
 80022e0:	20001194 	.word	0x20001194
 80022e4:	0800fb84 	.word	0x0800fb84
 80022e8:	080024d9 	.word	0x080024d9

080022ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b094      	sub	sp, #80	@ 0x50
 80022f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022f2:	f107 0318 	add.w	r3, r7, #24
 80022f6:	2238      	movs	r2, #56	@ 0x38
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f009 fd5a 	bl	800bdb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]
 800230c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800230e:	2000      	movs	r0, #0
 8002310:	f002 fc58 	bl	8004bc4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002314:	2301      	movs	r3, #1
 8002316:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002318:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800231c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800231e:	2302      	movs	r3, #2
 8002320:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002322:	2303      	movs	r3, #3
 8002324:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002326:	2304      	movs	r3, #4
 8002328:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800232a:	2355      	movs	r3, #85	@ 0x55
 800232c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800232e:	2302      	movs	r3, #2
 8002330:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002332:	2302      	movs	r3, #2
 8002334:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002336:	2302      	movs	r3, #2
 8002338:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800233a:	f107 0318 	add.w	r3, r7, #24
 800233e:	4618      	mov	r0, r3
 8002340:	f002 fcf4 	bl	8004d2c <HAL_RCC_OscConfig>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800234a:	f000 f959 	bl	8002600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800234e:	230f      	movs	r3, #15
 8002350:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002352:	2303      	movs	r3, #3
 8002354:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	2104      	movs	r1, #4
 8002366:	4618      	mov	r0, r3
 8002368:	f002 fff2 	bl	8005350 <HAL_RCC_ClockConfig>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002372:	f000 f945 	bl	8002600 <Error_Handler>
  }
}
 8002376:	bf00      	nop
 8002378:	3750      	adds	r7, #80	@ 0x50
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <lidarTask>:

/* USER CODE BEGIN 4 */

/* Lidar Task */
void lidarTask(void *pvParameters) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	for (;;) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002388:	f04f 31ff 	mov.w	r1, #4294967295
 800238c:	2001      	movs	r0, #1
 800238e:	f007 fce9 	bl	8009d64 <ulTaskNotifyTake>
		flagDMA++;
 8002392:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <lidarTask+0x38>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	3301      	adds	r3, #1
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4b07      	ldr	r3, [pc, #28]	@ (80023b8 <lidarTask+0x38>)
 800239c:	701a      	strb	r2, [r3, #0]
		LIDAR_process_frame(&lidar);
 800239e:	4807      	ldr	r0, [pc, #28]	@ (80023bc <lidarTask+0x3c>)
 80023a0:	f7ff fd38 	bl	8001e14 <LIDAR_process_frame>
		xTaskNotifyGive(h_task_angle);
 80023a4:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <lidarTask+0x40>)
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	2300      	movs	r3, #0
 80023aa:	2202      	movs	r2, #2
 80023ac:	2100      	movs	r1, #0
 80023ae:	f007 fd85 	bl	8009ebc <xTaskGenericNotify>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80023b2:	bf00      	nop
 80023b4:	e7e8      	b.n	8002388 <lidarTask+0x8>
 80023b6:	bf00      	nop
 80023b8:	200003c9 	.word	0x200003c9
 80023bc:	20000424 	.word	0x20000424
 80023c0:	20001190 	.word	0x20001190

080023c4 <ledBlinkTask>:
	}
}

/* LED Blink Task */
void ledBlinkTask(void *pvParameters) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
	for (;;) {
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80023cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023d0:	4809      	ldr	r0, [pc, #36]	@ (80023f8 <ledBlinkTask+0x34>)
 80023d2:	f001 fda1 	bl	8003f18 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80023d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023da:	4807      	ldr	r0, [pc, #28]	@ (80023f8 <ledBlinkTask+0x34>)
 80023dc:	f001 fd9c 	bl	8003f18 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80023e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023e4:	4804      	ldr	r0, [pc, #16]	@ (80023f8 <ledBlinkTask+0x34>)
 80023e6:	f001 fd97 	bl	8003f18 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(500));
 80023ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80023ee:	f007 f9ab 	bl	8009748 <vTaskDelay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80023f2:	bf00      	nop
 80023f4:	e7ea      	b.n	80023cc <ledBlinkTask+0x8>
 80023f6:	bf00      	nop
 80023f8:	48000800 	.word	0x48000800

080023fc <task_angle>:
	}
}

/* Task to process LIDAR angles */
void task_angle(void *unused) {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	for (;;) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002404:	f04f 31ff 	mov.w	r1, #4294967295
 8002408:	2001      	movs	r0, #1
 800240a:	f007 fcab 	bl	8009d64 <ulTaskNotifyTake>

		float angleSum = 0.0f;
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
		uint16_t validPoints = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	817b      	strh	r3, [r7, #10]

		for (uint16_t i = 0; i < 360; ++i) {
 8002418:	2300      	movs	r3, #0
 800241a:	813b      	strh	r3, [r7, #8]
 800241c:	e01d      	b.n	800245a <task_angle+0x5e>
			if (lidar.point[i].Distance > 0) {
 800241e:	893b      	ldrh	r3, [r7, #8]
 8002420:	4a1c      	ldr	r2, [pc, #112]	@ (8002494 <task_angle+0x98>)
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4413      	add	r3, r2
 8002426:	edd3 7a00 	vldr	s15, [r3]
 800242a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800242e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002432:	dd0f      	ble.n	8002454 <task_angle+0x58>
				angleSum += lidar.point[i].Angle;
 8002434:	893b      	ldrh	r3, [r7, #8]
 8002436:	4a17      	ldr	r2, [pc, #92]	@ (8002494 <task_angle+0x98>)
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4413      	add	r3, r2
 800243c:	3304      	adds	r3, #4
 800243e:	edd3 7a00 	vldr	s15, [r3]
 8002442:	ed97 7a03 	vldr	s14, [r7, #12]
 8002446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800244a:	edc7 7a03 	vstr	s15, [r7, #12]
				validPoints++;
 800244e:	897b      	ldrh	r3, [r7, #10]
 8002450:	3301      	adds	r3, #1
 8002452:	817b      	strh	r3, [r7, #10]
		for (uint16_t i = 0; i < 360; ++i) {
 8002454:	893b      	ldrh	r3, [r7, #8]
 8002456:	3301      	adds	r3, #1
 8002458:	813b      	strh	r3, [r7, #8]
 800245a:	893b      	ldrh	r3, [r7, #8]
 800245c:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8002460:	d3dd      	bcc.n	800241e <task_angle+0x22>
			}
		}

		if (validPoints > 0) {
 8002462:	897b      	ldrh	r3, [r7, #10]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00b      	beq.n	8002480 <task_angle+0x84>
			angle = angleSum / validPoints;
 8002468:	897b      	ldrh	r3, [r7, #10]
 800246a:	ee07 3a90 	vmov	s15, r3
 800246e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002472:	edd7 6a03 	vldr	s13, [r7, #12]
 8002476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800247a:	4b07      	ldr	r3, [pc, #28]	@ (8002498 <task_angle+0x9c>)
 800247c:	edc3 7a00 	vstr	s15, [r3]
		}
		Robot_setAngle(&robot, angle);
 8002480:	4b05      	ldr	r3, [pc, #20]	@ (8002498 <task_angle+0x9c>)
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	eeb0 0a67 	vmov.f32	s0, s15
 800248a:	4804      	ldr	r0, [pc, #16]	@ (800249c <task_angle+0xa0>)
 800248c:	f7ff f90c 	bl	80016a8 <Robot_setAngle>
	for (;;) {
 8002490:	e7b8      	b.n	8002404 <task_angle+0x8>
 8002492:	bf00      	nop
 8002494:	20000424 	.word	0x20000424
 8002498:	200011d8 	.word	0x200011d8
 800249c:	200011bc 	.word	0x200011bc

080024a0 <modeChange>:
	}
}

/* mode change Task */
void modeChange(void *param) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
	uint32_t ulNotificationValue;

	for(;;) {
		ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80024a8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ac:	2001      	movs	r0, #1
 80024ae:	f007 fc59 	bl	8009d64 <ulTaskNotifyTake>
 80024b2:	60f8      	str	r0, [r7, #12]
		if (ulNotificationValue != 0){
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f6      	beq.n	80024a8 <modeChange+0x8>
			if(robot.mode == 1)
 80024ba:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <modeChange+0x34>)
 80024bc:	7c1b      	ldrb	r3, [r3, #16]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d103      	bne.n	80024ca <modeChange+0x2a>
			{
				robot.mode = 1;
 80024c2:	4b04      	ldr	r3, [pc, #16]	@ (80024d4 <modeChange+0x34>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	741a      	strb	r2, [r3, #16]
 80024c8:	e7ee      	b.n	80024a8 <modeChange+0x8>
			}
			else
			{
				robot.mode = 0;
 80024ca:	4b02      	ldr	r3, [pc, #8]	@ (80024d4 <modeChange+0x34>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	741a      	strb	r2, [r3, #16]
		ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80024d0:	e7ea      	b.n	80024a8 <modeChange+0x8>
 80024d2:	bf00      	nop
 80024d4:	200011bc 	.word	0x200011bc

080024d8 <TapDetected>:
			}
		}
	}
}
/* Tap Detection Task */
void TapDetected(void *param) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af04      	add	r7, sp, #16
 80024de:	6078      	str	r0, [r7, #4]
	uint32_t ulNotificationValue;

	for(;;) {
		ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80024e0:	f04f 31ff 	mov.w	r1, #4294967295
 80024e4:	2001      	movs	r0, #1
 80024e6:	f007 fc3d 	bl	8009d64 <ulTaskNotifyTake>
 80024ea:	60f8      	str	r0, [r7, #12]
		if (ulNotificationValue != 0) {
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f6      	beq.n	80024e0 <TapDetected+0x8>
			uint8_t buf;
			HAL_I2C_Mem_Read(&hi2c1, ADXL343_ADDRESS, ADXL343_REG_INT_SOURCE,
 80024f2:	f04f 33ff 	mov.w	r3, #4294967295
 80024f6:	9302      	str	r3, [sp, #8]
 80024f8:	2301      	movs	r3, #1
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	f107 030b 	add.w	r3, r7, #11
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	2301      	movs	r3, #1
 8002504:	2230      	movs	r2, #48	@ 0x30
 8002506:	21a6      	movs	r1, #166	@ 0xa6
 8002508:	4803      	ldr	r0, [pc, #12]	@ (8002518 <TapDetected+0x40>)
 800250a:	f001 fee7 	bl	80042dc <HAL_I2C_Mem_Read>
					I2C_MEMADD_SIZE_8BIT, &buf, 1, HAL_MAX_DELAY);
			Robot_Stop(&robot);
 800250e:	4803      	ldr	r0, [pc, #12]	@ (800251c <TapDetected+0x44>)
 8002510:	f7ff f87b 	bl	800160a <Robot_Stop>
		ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002514:	e7e4      	b.n	80024e0 <TapDetected+0x8>
 8002516:	bf00      	nop
 8002518:	200003d0 	.word	0x200003d0
 800251c:	200011bc 	.word	0x200011bc

08002520 <HAL_GPIO_EXTI_Callback>:
}

/*Fonctions CALLBACK*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==CHAT_SOURIS_Pin)
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	2b20      	cmp	r3, #32
 800252e:	d114      	bne.n	800255a <HAL_GPIO_EXTI_Callback+0x3a>
	{
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
		vTaskNotifyGiveFromISR(modeTaskHandle, &xHigherPriorityTaskWoken);
 8002534:	4b0d      	ldr	r3, [pc, #52]	@ (800256c <HAL_GPIO_EXTI_Callback+0x4c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f107 020c 	add.w	r2, r7, #12
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f007 fe64 	bl	800a20c <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <HAL_GPIO_EXTI_Callback+0x3a>
 800254a:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <HAL_GPIO_EXTI_Callback+0x50>)
 800254c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	f3bf 8f4f 	dsb	sy
 8002556:	f3bf 8f6f 	isb	sy
	}
	Moustache_HandleInterrupt(GPIO_Pin);
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff f9db 	bl	8001918 <Moustache_HandleInterrupt>
}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20001198 	.word	0x20001198
 8002570:	e000ed04 	.word	0xe000ed04

08002574 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
	vTaskNotifyGiveFromISR(lidarTaskHandle, &xHigherPriorityTaskWoken);
 8002580:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <HAL_UART_RxCpltCallback+0x3c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f107 020c 	add.w	r2, r7, #12
 8002588:	4611      	mov	r1, r2
 800258a:	4618      	mov	r0, r3
 800258c:	f007 fe3e 	bl	800a20c <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d007      	beq.n	80025a6 <HAL_UART_RxCpltCallback+0x32>
 8002596:	4b07      	ldr	r3, [pc, #28]	@ (80025b4 <HAL_UART_RxCpltCallback+0x40>)
 8002598:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	f3bf 8f4f 	dsb	sy
 80025a2:	f3bf 8f6f 	isb	sy
}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20001188 	.word	0x20001188
 80025b4:	e000ed04 	.word	0xe000ed04

080025b8 <__io_putchar>:
int __io_putchar(int chr)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 80025c0:	1d39      	adds	r1, r7, #4
 80025c2:	f04f 33ff 	mov.w	r3, #4294967295
 80025c6:	2201      	movs	r2, #1
 80025c8:	4803      	ldr	r0, [pc, #12]	@ (80025d8 <__io_putchar+0x20>)
 80025ca:	f005 f910 	bl	80077ee <HAL_UART_Transmit>
	return chr;
 80025ce:	687b      	ldr	r3, [r7, #4]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20001404 	.word	0x20001404

080025dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a04      	ldr	r2, [pc, #16]	@ (80025fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d101      	bne.n	80025f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80025ee:	f000 fea7 	bl	8003340 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40001000 	.word	0x40001000

08002600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002604:	b672      	cpsid	i
}
 8002606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002608:	bf00      	nop
 800260a:	e7fd      	b.n	8002608 <Error_Handler+0x8>

0800260c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002612:	4b12      	ldr	r3, [pc, #72]	@ (800265c <HAL_MspInit+0x50>)
 8002614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002616:	4a11      	ldr	r2, [pc, #68]	@ (800265c <HAL_MspInit+0x50>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6613      	str	r3, [r2, #96]	@ 0x60
 800261e:	4b0f      	ldr	r3, [pc, #60]	@ (800265c <HAL_MspInit+0x50>)
 8002620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800262a:	4b0c      	ldr	r3, [pc, #48]	@ (800265c <HAL_MspInit+0x50>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262e:	4a0b      	ldr	r2, [pc, #44]	@ (800265c <HAL_MspInit+0x50>)
 8002630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002634:	6593      	str	r3, [r2, #88]	@ 0x58
 8002636:	4b09      	ldr	r3, [pc, #36]	@ (800265c <HAL_MspInit+0x50>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002642:	2200      	movs	r2, #0
 8002644:	210f      	movs	r1, #15
 8002646:	f06f 0001 	mvn.w	r0, #1
 800264a:	f000 ff71 	bl	8003530 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800264e:	f002 fb5d 	bl	8004d0c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000

08002660 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08c      	sub	sp, #48	@ 0x30
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002670:	4b2c      	ldr	r3, [pc, #176]	@ (8002724 <HAL_InitTick+0xc4>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002674:	4a2b      	ldr	r2, [pc, #172]	@ (8002724 <HAL_InitTick+0xc4>)
 8002676:	f043 0310 	orr.w	r3, r3, #16
 800267a:	6593      	str	r3, [r2, #88]	@ 0x58
 800267c:	4b29      	ldr	r3, [pc, #164]	@ (8002724 <HAL_InitTick+0xc4>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002688:	f107 020c 	add.w	r2, r7, #12
 800268c:	f107 0310 	add.w	r3, r7, #16
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f003 f830 	bl	80056f8 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002698:	f003 f802 	bl	80056a0 <HAL_RCC_GetPCLK1Freq>
 800269c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800269e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a0:	4a21      	ldr	r2, [pc, #132]	@ (8002728 <HAL_InitTick+0xc8>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	0c9b      	lsrs	r3, r3, #18
 80026a8:	3b01      	subs	r3, #1
 80026aa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80026ac:	4b1f      	ldr	r3, [pc, #124]	@ (800272c <HAL_InitTick+0xcc>)
 80026ae:	4a20      	ldr	r2, [pc, #128]	@ (8002730 <HAL_InitTick+0xd0>)
 80026b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80026b2:	4b1e      	ldr	r3, [pc, #120]	@ (800272c <HAL_InitTick+0xcc>)
 80026b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80026b8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80026ba:	4a1c      	ldr	r2, [pc, #112]	@ (800272c <HAL_InitTick+0xcc>)
 80026bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026be:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80026c0:	4b1a      	ldr	r3, [pc, #104]	@ (800272c <HAL_InitTick+0xcc>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c6:	4b19      	ldr	r3, [pc, #100]	@ (800272c <HAL_InitTick+0xcc>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80026cc:	4817      	ldr	r0, [pc, #92]	@ (800272c <HAL_InitTick+0xcc>)
 80026ce:	f003 fa79 	bl	8005bc4 <HAL_TIM_Base_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80026d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d11b      	bne.n	8002718 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80026e0:	4812      	ldr	r0, [pc, #72]	@ (800272c <HAL_InitTick+0xcc>)
 80026e2:	f003 fac7 	bl	8005c74 <HAL_TIM_Base_Start_IT>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80026ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d111      	bne.n	8002718 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026f4:	2036      	movs	r0, #54	@ 0x36
 80026f6:	f000 ff35 	bl	8003564 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b0f      	cmp	r3, #15
 80026fe:	d808      	bhi.n	8002712 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002700:	2200      	movs	r2, #0
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	2036      	movs	r0, #54	@ 0x36
 8002706:	f000 ff13 	bl	8003530 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800270a:	4a0a      	ldr	r2, [pc, #40]	@ (8002734 <HAL_InitTick+0xd4>)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	e002      	b.n	8002718 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002718:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800271c:	4618      	mov	r0, r3
 800271e:	3730      	adds	r7, #48	@ 0x30
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40021000 	.word	0x40021000
 8002728:	431bde83 	.word	0x431bde83
 800272c:	200011f0 	.word	0x200011f0
 8002730:	40001000 	.word	0x40001000
 8002734:	200001d0 	.word	0x200001d0

08002738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800273c:	bf00      	nop
 800273e:	e7fd      	b.n	800273c <NMI_Handler+0x4>

08002740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002744:	bf00      	nop
 8002746:	e7fd      	b.n	8002744 <HardFault_Handler+0x4>

08002748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800274c:	bf00      	nop
 800274e:	e7fd      	b.n	800274c <MemManage_Handler+0x4>

08002750 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002754:	bf00      	nop
 8002756:	e7fd      	b.n	8002754 <BusFault_Handler+0x4>

08002758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800275c:	bf00      	nop
 800275e:	e7fd      	b.n	800275c <UsageFault_Handler+0x4>

08002760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CB_OUT1_Pin);
 8002772:	2004      	movs	r0, #4
 8002774:	f001 fbea 	bl	8003f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}

0800277c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CB_OUT2_Pin);
 8002780:	2008      	movs	r0, #8
 8002782:	f001 fbe3 	bl	8003f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002790:	4802      	ldr	r0, [pc, #8]	@ (800279c <DMA1_Channel1_IRQHandler+0x10>)
 8002792:	f001 f8d8 	bl	8003946 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20001498 	.word	0x20001498

080027a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CHAT_SOURIS_Pin);
 80027a4:	2020      	movs	r0, #32
 80027a6:	f001 fbd1 	bl	8003f4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT1_Pin);
 80027aa:	2040      	movs	r0, #64	@ 0x40
 80027ac:	f001 fbce 	bl	8003f4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT2_Pin);
 80027b0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80027b4:	f001 fbca 	bl	8003f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}

080027bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80027c0:	4802      	ldr	r0, [pc, #8]	@ (80027cc <USART3_IRQHandler+0x10>)
 80027c2:	f005 f96f 	bl	8007aa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20001404 	.word	0x20001404

080027d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027d4:	4802      	ldr	r0, [pc, #8]	@ (80027e0 <TIM6_DAC_IRQHandler+0x10>)
 80027d6:	f003 fd55 	bl	8006284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200011f0 	.word	0x200011f0

080027e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return 1;
 80027e8:	2301      	movs	r3, #1
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <_kill>:

int _kill(int pid, int sig)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027fe:	f009 fb81 	bl	800bf04 <__errno>
 8002802:	4603      	mov	r3, r0
 8002804:	2216      	movs	r2, #22
 8002806:	601a      	str	r2, [r3, #0]
  return -1;
 8002808:	f04f 33ff 	mov.w	r3, #4294967295
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <_exit>:

void _exit (int status)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800281c:	f04f 31ff 	mov.w	r1, #4294967295
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff ffe7 	bl	80027f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002826:	bf00      	nop
 8002828:	e7fd      	b.n	8002826 <_exit+0x12>

0800282a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b086      	sub	sp, #24
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	e00a      	b.n	8002852 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800283c:	f3af 8000 	nop.w
 8002840:	4601      	mov	r1, r0
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	60ba      	str	r2, [r7, #8]
 8002848:	b2ca      	uxtb	r2, r1
 800284a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	3301      	adds	r3, #1
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	429a      	cmp	r2, r3
 8002858:	dbf0      	blt.n	800283c <_read+0x12>
  }

  return len;
 800285a:	687b      	ldr	r3, [r7, #4]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	e009      	b.n	800288a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	60ba      	str	r2, [r7, #8]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fe9a 	bl	80025b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	3301      	adds	r3, #1
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	429a      	cmp	r2, r3
 8002890:	dbf1      	blt.n	8002876 <_write+0x12>
  }
  return len;
 8002892:	687b      	ldr	r3, [r7, #4]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <_close>:

int _close(int file)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028c4:	605a      	str	r2, [r3, #4]
  return 0;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <_isatty>:

int _isatty(int file)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028dc:	2301      	movs	r3, #1
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b085      	sub	sp, #20
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800290c:	4a14      	ldr	r2, [pc, #80]	@ (8002960 <_sbrk+0x5c>)
 800290e:	4b15      	ldr	r3, [pc, #84]	@ (8002964 <_sbrk+0x60>)
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002918:	4b13      	ldr	r3, [pc, #76]	@ (8002968 <_sbrk+0x64>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d102      	bne.n	8002926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002920:	4b11      	ldr	r3, [pc, #68]	@ (8002968 <_sbrk+0x64>)
 8002922:	4a12      	ldr	r2, [pc, #72]	@ (800296c <_sbrk+0x68>)
 8002924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002926:	4b10      	ldr	r3, [pc, #64]	@ (8002968 <_sbrk+0x64>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	429a      	cmp	r2, r3
 8002932:	d207      	bcs.n	8002944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002934:	f009 fae6 	bl	800bf04 <__errno>
 8002938:	4603      	mov	r3, r0
 800293a:	220c      	movs	r2, #12
 800293c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800293e:	f04f 33ff 	mov.w	r3, #4294967295
 8002942:	e009      	b.n	8002958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002944:	4b08      	ldr	r3, [pc, #32]	@ (8002968 <_sbrk+0x64>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800294a:	4b07      	ldr	r3, [pc, #28]	@ (8002968 <_sbrk+0x64>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4413      	add	r3, r2
 8002952:	4a05      	ldr	r2, [pc, #20]	@ (8002968 <_sbrk+0x64>)
 8002954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002956:	68fb      	ldr	r3, [r7, #12]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	20008000 	.word	0x20008000
 8002964:	00000400 	.word	0x00000400
 8002968:	2000123c 	.word	0x2000123c
 800296c:	200023a0 	.word	0x200023a0

08002970 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002974:	4b08      	ldr	r3, [pc, #32]	@ (8002998 <SystemInit+0x28>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297a:	4a07      	ldr	r2, [pc, #28]	@ (8002998 <SystemInit+0x28>)
 800297c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8002984:	4b04      	ldr	r3, [pc, #16]	@ (8002998 <SystemInit+0x28>)
 8002986:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800298a:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b09c      	sub	sp, #112	@ 0x70
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	609a      	str	r2, [r3, #8]
 80029ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
 80029cc:	615a      	str	r2, [r3, #20]
 80029ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029d0:	1d3b      	adds	r3, r7, #4
 80029d2:	2234      	movs	r2, #52	@ 0x34
 80029d4:	2100      	movs	r1, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f009 f9ec 	bl	800bdb4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002b10 <MX_TIM1_Init+0x174>)
 80029de:	4a4d      	ldr	r2, [pc, #308]	@ (8002b14 <MX_TIM1_Init+0x178>)
 80029e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80029e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002b10 <MX_TIM1_Init+0x174>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e8:	4b49      	ldr	r3, [pc, #292]	@ (8002b10 <MX_TIM1_Init+0x174>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 80029ee:	4b48      	ldr	r3, [pc, #288]	@ (8002b10 <MX_TIM1_Init+0x174>)
 80029f0:	f242 1233 	movw	r2, #8499	@ 0x2133
 80029f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029f6:	4b46      	ldr	r3, [pc, #280]	@ (8002b10 <MX_TIM1_Init+0x174>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029fc:	4b44      	ldr	r3, [pc, #272]	@ (8002b10 <MX_TIM1_Init+0x174>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a02:	4b43      	ldr	r3, [pc, #268]	@ (8002b10 <MX_TIM1_Init+0x174>)
 8002a04:	2280      	movs	r2, #128	@ 0x80
 8002a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a08:	4841      	ldr	r0, [pc, #260]	@ (8002b10 <MX_TIM1_Init+0x174>)
 8002a0a:	f003 f8db 	bl	8005bc4 <HAL_TIM_Base_Init>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002a14:	f7ff fdf4 	bl	8002600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a1c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a1e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002a22:	4619      	mov	r1, r3
 8002a24:	483a      	ldr	r0, [pc, #232]	@ (8002b10 <MX_TIM1_Init+0x174>)
 8002a26:	f003 fe91 	bl	800674c <HAL_TIM_ConfigClockSource>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002a30:	f7ff fde6 	bl	8002600 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a34:	4836      	ldr	r0, [pc, #216]	@ (8002b10 <MX_TIM1_Init+0x174>)
 8002a36:	f003 f987 	bl	8005d48 <HAL_TIM_PWM_Init>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002a40:	f7ff fdde 	bl	8002600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a44:	2300      	movs	r3, #0
 8002a46:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a54:	4619      	mov	r1, r3
 8002a56:	482e      	ldr	r0, [pc, #184]	@ (8002b10 <MX_TIM1_Init+0x174>)
 8002a58:	f004 fd00 	bl	800745c <HAL_TIMEx_MasterConfigSynchronization>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002a62:	f7ff fdcd 	bl	8002600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a66:	2360      	movs	r3, #96	@ 0x60
 8002a68:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 3400;
 8002a6a:	f640 5348 	movw	r3, #3400	@ 0xd48
 8002a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a70:	2300      	movs	r3, #0
 8002a72:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a74:	2300      	movs	r3, #0
 8002a76:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a80:	2300      	movs	r3, #0
 8002a82:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a84:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a88:	2200      	movs	r2, #0
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4820      	ldr	r0, [pc, #128]	@ (8002b10 <MX_TIM1_Init+0x174>)
 8002a8e:	f003 fd49 	bl	8006524 <HAL_TIM_PWM_ConfigChannel>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002a98:	f7ff fdb2 	bl	8002600 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a9c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002aa0:	2204      	movs	r2, #4
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	481a      	ldr	r0, [pc, #104]	@ (8002b10 <MX_TIM1_Init+0x174>)
 8002aa6:	f003 fd3d 	bl	8006524 <HAL_TIM_PWM_ConfigChannel>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8002ab0:	f7ff fda6 	bl	8002600 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 8002ac0:	230a      	movs	r3, #10
 8002ac2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ac8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002acc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002ada:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002aec:	1d3b      	adds	r3, r7, #4
 8002aee:	4619      	mov	r1, r3
 8002af0:	4807      	ldr	r0, [pc, #28]	@ (8002b10 <MX_TIM1_Init+0x174>)
 8002af2:	f004 fd35 	bl	8007560 <HAL_TIMEx_ConfigBreakDeadTime>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8002afc:	f7ff fd80 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b00:	4803      	ldr	r0, [pc, #12]	@ (8002b10 <MX_TIM1_Init+0x174>)
 8002b02:	f000 f9f7 	bl	8002ef4 <HAL_TIM_MspPostInit>

}
 8002b06:	bf00      	nop
 8002b08:	3770      	adds	r7, #112	@ 0x70
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20001240 	.word	0x20001240
 8002b14:	40012c00 	.word	0x40012c00

08002b18 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08c      	sub	sp, #48	@ 0x30
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b1e:	f107 030c 	add.w	r3, r7, #12
 8002b22:	2224      	movs	r2, #36	@ 0x24
 8002b24:	2100      	movs	r1, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f009 f944 	bl	800bdb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b2c:	463b      	mov	r3, r7
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b36:	4b21      	ldr	r3, [pc, #132]	@ (8002bbc <MX_TIM3_Init+0xa4>)
 8002b38:	4a21      	ldr	r2, [pc, #132]	@ (8002bc0 <MX_TIM3_Init+0xa8>)
 8002b3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bbc <MX_TIM3_Init+0xa4>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b42:	4b1e      	ldr	r3, [pc, #120]	@ (8002bbc <MX_TIM3_Init+0xa4>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b48:	4b1c      	ldr	r3, [pc, #112]	@ (8002bbc <MX_TIM3_Init+0xa4>)
 8002b4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b50:	4b1a      	ldr	r3, [pc, #104]	@ (8002bbc <MX_TIM3_Init+0xa4>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b56:	4b19      	ldr	r3, [pc, #100]	@ (8002bbc <MX_TIM3_Init+0xa4>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b60:	2300      	movs	r3, #0
 8002b62:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b64:	2301      	movs	r3, #1
 8002b66:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b70:	2300      	movs	r3, #0
 8002b72:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b74:	2301      	movs	r3, #1
 8002b76:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002b80:	f107 030c 	add.w	r3, r7, #12
 8002b84:	4619      	mov	r1, r3
 8002b86:	480d      	ldr	r0, [pc, #52]	@ (8002bbc <MX_TIM3_Init+0xa4>)
 8002b88:	f003 fad6 	bl	8006138 <HAL_TIM_Encoder_Init>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002b92:	f7ff fd35 	bl	8002600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b96:	2300      	movs	r3, #0
 8002b98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b9e:	463b      	mov	r3, r7
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4806      	ldr	r0, [pc, #24]	@ (8002bbc <MX_TIM3_Init+0xa4>)
 8002ba4:	f004 fc5a 	bl	800745c <HAL_TIMEx_MasterConfigSynchronization>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002bae:	f7ff fd27 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bb2:	bf00      	nop
 8002bb4:	3730      	adds	r7, #48	@ 0x30
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	2000128c 	.word	0x2000128c
 8002bc0:	40000400 	.word	0x40000400

08002bc4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08c      	sub	sp, #48	@ 0x30
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002bca:	f107 030c 	add.w	r3, r7, #12
 8002bce:	2224      	movs	r2, #36	@ 0x24
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f009 f8ee 	bl	800bdb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bd8:	463b      	mov	r3, r7
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002be2:	4b21      	ldr	r3, [pc, #132]	@ (8002c68 <MX_TIM4_Init+0xa4>)
 8002be4:	4a21      	ldr	r2, [pc, #132]	@ (8002c6c <MX_TIM4_Init+0xa8>)
 8002be6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002be8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c68 <MX_TIM4_Init+0xa4>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bee:	4b1e      	ldr	r3, [pc, #120]	@ (8002c68 <MX_TIM4_Init+0xa4>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8002c68 <MX_TIM4_Init+0xa4>)
 8002bf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bfa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c68 <MX_TIM4_Init+0xa4>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c02:	4b19      	ldr	r3, [pc, #100]	@ (8002c68 <MX_TIM4_Init+0xa4>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c10:	2301      	movs	r3, #1
 8002c12:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c20:	2301      	movs	r3, #1
 8002c22:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c24:	2300      	movs	r3, #0
 8002c26:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002c2c:	f107 030c 	add.w	r3, r7, #12
 8002c30:	4619      	mov	r1, r3
 8002c32:	480d      	ldr	r0, [pc, #52]	@ (8002c68 <MX_TIM4_Init+0xa4>)
 8002c34:	f003 fa80 	bl	8006138 <HAL_TIM_Encoder_Init>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002c3e:	f7ff fcdf 	bl	8002600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c42:	2300      	movs	r3, #0
 8002c44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c4a:	463b      	mov	r3, r7
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4806      	ldr	r0, [pc, #24]	@ (8002c68 <MX_TIM4_Init+0xa4>)
 8002c50:	f004 fc04 	bl	800745c <HAL_TIMEx_MasterConfigSynchronization>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002c5a:	f7ff fcd1 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c5e:	bf00      	nop
 8002c60:	3730      	adds	r7, #48	@ 0x30
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	200012d8 	.word	0x200012d8
 8002c6c:	40000800 	.word	0x40000800

08002c70 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b094      	sub	sp, #80	@ 0x50
 8002c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c76:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	605a      	str	r2, [r3, #4]
 8002c80:	609a      	str	r2, [r3, #8]
 8002c82:	60da      	str	r2, [r3, #12]
 8002c84:	611a      	str	r2, [r3, #16]
 8002c86:	615a      	str	r2, [r3, #20]
 8002c88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c8a:	463b      	mov	r3, r7
 8002c8c:	2234      	movs	r2, #52	@ 0x34
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f009 f88f 	bl	800bdb4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002c96:	4b31      	ldr	r3, [pc, #196]	@ (8002d5c <MX_TIM16_Init+0xec>)
 8002c98:	4a31      	ldr	r2, [pc, #196]	@ (8002d60 <MX_TIM16_Init+0xf0>)
 8002c9a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8002d5c <MX_TIM16_Init+0xec>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca2:	4b2e      	ldr	r3, [pc, #184]	@ (8002d5c <MX_TIM16_Init+0xec>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002ca8:	4b2c      	ldr	r3, [pc, #176]	@ (8002d5c <MX_TIM16_Init+0xec>)
 8002caa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cae:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d5c <MX_TIM16_Init+0xec>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002cb6:	4b29      	ldr	r3, [pc, #164]	@ (8002d5c <MX_TIM16_Init+0xec>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cbc:	4b27      	ldr	r3, [pc, #156]	@ (8002d5c <MX_TIM16_Init+0xec>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002cc2:	4826      	ldr	r0, [pc, #152]	@ (8002d5c <MX_TIM16_Init+0xec>)
 8002cc4:	f002 ff7e 	bl	8005bc4 <HAL_TIM_Base_Init>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002cce:	f7ff fc97 	bl	8002600 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002cd2:	4822      	ldr	r0, [pc, #136]	@ (8002d5c <MX_TIM16_Init+0xec>)
 8002cd4:	f003 f838 	bl	8005d48 <HAL_TIM_PWM_Init>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002cde:	f7ff fc8f 	bl	8002600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ce2:	2360      	movs	r3, #96	@ 0x60
 8002ce4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cea:	2300      	movs	r3, #0
 8002cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cfe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d02:	2200      	movs	r2, #0
 8002d04:	4619      	mov	r1, r3
 8002d06:	4815      	ldr	r0, [pc, #84]	@ (8002d5c <MX_TIM16_Init+0xec>)
 8002d08:	f003 fc0c 	bl	8006524 <HAL_TIM_PWM_ConfigChannel>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8002d12:	f7ff fc75 	bl	8002600 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d2e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d34:	2300      	movs	r3, #0
 8002d36:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002d38:	463b      	mov	r3, r7
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4807      	ldr	r0, [pc, #28]	@ (8002d5c <MX_TIM16_Init+0xec>)
 8002d3e:	f004 fc0f 	bl	8007560 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8002d48:	f7ff fc5a 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002d4c:	4803      	ldr	r0, [pc, #12]	@ (8002d5c <MX_TIM16_Init+0xec>)
 8002d4e:	f000 f8d1 	bl	8002ef4 <HAL_TIM_MspPostInit>

}
 8002d52:	bf00      	nop
 8002d54:	3750      	adds	r7, #80	@ 0x50
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20001324 	.word	0x20001324
 8002d60:	40014400 	.word	0x40014400

08002d64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a13      	ldr	r2, [pc, #76]	@ (8002dc0 <HAL_TIM_Base_MspInit+0x5c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d10c      	bne.n	8002d90 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d76:	4b13      	ldr	r3, [pc, #76]	@ (8002dc4 <HAL_TIM_Base_MspInit+0x60>)
 8002d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d7a:	4a12      	ldr	r2, [pc, #72]	@ (8002dc4 <HAL_TIM_Base_MspInit+0x60>)
 8002d7c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d80:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d82:	4b10      	ldr	r3, [pc, #64]	@ (8002dc4 <HAL_TIM_Base_MspInit+0x60>)
 8002d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002d8e:	e010      	b.n	8002db2 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM16)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a0c      	ldr	r2, [pc, #48]	@ (8002dc8 <HAL_TIM_Base_MspInit+0x64>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d10b      	bne.n	8002db2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc4 <HAL_TIM_Base_MspInit+0x60>)
 8002d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d9e:	4a09      	ldr	r2, [pc, #36]	@ (8002dc4 <HAL_TIM_Base_MspInit+0x60>)
 8002da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002da4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002da6:	4b07      	ldr	r3, [pc, #28]	@ (8002dc4 <HAL_TIM_Base_MspInit+0x60>)
 8002da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	68bb      	ldr	r3, [r7, #8]
}
 8002db2:	bf00      	nop
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40014400 	.word	0x40014400

08002dcc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08c      	sub	sp, #48	@ 0x30
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd4:	f107 031c 	add.w	r3, r7, #28
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a3d      	ldr	r2, [pc, #244]	@ (8002ee0 <HAL_TIM_Encoder_MspInit+0x114>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d144      	bne.n	8002e78 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dee:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df2:	4a3c      	ldr	r2, [pc, #240]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002df4:	f043 0302 	orr.w	r3, r3, #2
 8002df8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dfa:	4b3a      	ldr	r3, [pc, #232]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	61bb      	str	r3, [r7, #24]
 8002e04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e06:	4b37      	ldr	r3, [pc, #220]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e0a:	4a36      	ldr	r2, [pc, #216]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002e0c:	f043 0304 	orr.w	r3, r3, #4
 8002e10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e12:	4b34      	ldr	r3, [pc, #208]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1e:	4b31      	ldr	r3, [pc, #196]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e22:	4a30      	ldr	r2, [pc, #192]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002e24:	f043 0302 	orr.w	r3, r3, #2
 8002e28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e2a:	4b2e      	ldr	r3, [pc, #184]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PHASEB2_Pin;
 8002e36:	2340      	movs	r3, #64	@ 0x40
 8002e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e42:	2300      	movs	r3, #0
 8002e44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e46:	2302      	movs	r3, #2
 8002e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PHASEB2_GPIO_Port, &GPIO_InitStruct);
 8002e4a:	f107 031c 	add.w	r3, r7, #28
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4825      	ldr	r0, [pc, #148]	@ (8002ee8 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002e52:	f000 fec7 	bl	8003be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PHASEA2_Pin;
 8002e56:	2320      	movs	r3, #32
 8002e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e62:	2300      	movs	r3, #0
 8002e64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e66:	2302      	movs	r3, #2
 8002e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PHASEA2_GPIO_Port, &GPIO_InitStruct);
 8002e6a:	f107 031c 	add.w	r3, r7, #28
 8002e6e:	4619      	mov	r1, r3
 8002e70:	481e      	ldr	r0, [pc, #120]	@ (8002eec <HAL_TIM_Encoder_MspInit+0x120>)
 8002e72:	f000 feb7 	bl	8003be4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002e76:	e02e      	b.n	8002ed6 <HAL_TIM_Encoder_MspInit+0x10a>
  else if(tim_encoderHandle->Instance==TIM4)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ef0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d129      	bne.n	8002ed6 <HAL_TIM_Encoder_MspInit+0x10a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e82:	4b18      	ldr	r3, [pc, #96]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e86:	4a17      	ldr	r2, [pc, #92]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002e88:	f043 0304 	orr.w	r3, r3, #4
 8002e8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9a:	4b12      	ldr	r3, [pc, #72]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e9e:	4a11      	ldr	r2, [pc, #68]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PHASEB1_Pin|PHASEA1_Pin;
 8002eb2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002ec4:	230a      	movs	r3, #10
 8002ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec8:	f107 031c 	add.w	r3, r7, #28
 8002ecc:	4619      	mov	r1, r3
 8002ece:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ed2:	f000 fe87 	bl	8003be4 <HAL_GPIO_Init>
}
 8002ed6:	bf00      	nop
 8002ed8:	3730      	adds	r7, #48	@ 0x30
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40000400 	.word	0x40000400
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	48000800 	.word	0x48000800
 8002eec:	48000400 	.word	0x48000400
 8002ef0:	40000800 	.word	0x40000800

08002ef4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08a      	sub	sp, #40	@ 0x28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efc:	f107 0314 	add.w	r3, r7, #20
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	605a      	str	r2, [r3, #4]
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	60da      	str	r2, [r3, #12]
 8002f0a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a32      	ldr	r2, [pc, #200]	@ (8002fdc <HAL_TIM_MspPostInit+0xe8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d13b      	bne.n	8002f8e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f16:	4b32      	ldr	r3, [pc, #200]	@ (8002fe0 <HAL_TIM_MspPostInit+0xec>)
 8002f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f1a:	4a31      	ldr	r2, [pc, #196]	@ (8002fe0 <HAL_TIM_MspPostInit+0xec>)
 8002f1c:	f043 0302 	orr.w	r3, r3, #2
 8002f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f22:	4b2f      	ldr	r3, [pc, #188]	@ (8002fe0 <HAL_TIM_MspPostInit+0xec>)
 8002f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8002fe0 <HAL_TIM_MspPostInit+0xec>)
 8002f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f32:	4a2b      	ldr	r2, [pc, #172]	@ (8002fe0 <HAL_TIM_MspPostInit+0xec>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f3a:	4b29      	ldr	r3, [pc, #164]	@ (8002fe0 <HAL_TIM_MspPostInit+0xec>)
 8002f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002f46:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f54:	2300      	movs	r3, #0
 8002f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002f58:	2306      	movs	r3, #6
 8002f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5c:	f107 0314 	add.w	r3, r7, #20
 8002f60:	4619      	mov	r1, r3
 8002f62:	4820      	ldr	r0, [pc, #128]	@ (8002fe4 <HAL_TIM_MspPostInit+0xf0>)
 8002f64:	f000 fe3e 	bl	8003be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f68:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f76:	2300      	movs	r3, #0
 8002f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002f7a:	2306      	movs	r3, #6
 8002f7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7e:	f107 0314 	add.w	r3, r7, #20
 8002f82:	4619      	mov	r1, r3
 8002f84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f88:	f000 fe2c 	bl	8003be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8002f8c:	e021      	b.n	8002fd2 <HAL_TIM_MspPostInit+0xde>
  else if(timHandle->Instance==TIM16)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a15      	ldr	r2, [pc, #84]	@ (8002fe8 <HAL_TIM_MspPostInit+0xf4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d11c      	bne.n	8002fd2 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f98:	4b11      	ldr	r3, [pc, #68]	@ (8002fe0 <HAL_TIM_MspPostInit+0xec>)
 8002f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f9c:	4a10      	ldr	r2, [pc, #64]	@ (8002fe0 <HAL_TIM_MspPostInit+0xec>)
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe0 <HAL_TIM_MspPostInit+0xec>)
 8002fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M_SCTR_LIDAR_Pin;
 8002fb0:	2340      	movs	r3, #64	@ 0x40
 8002fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8002fc4:	f107 0314 	add.w	r3, r7, #20
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fce:	f000 fe09 	bl	8003be4 <HAL_GPIO_Init>
}
 8002fd2:	bf00      	nop
 8002fd4:	3728      	adds	r7, #40	@ 0x28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40012c00 	.word	0x40012c00
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	48000400 	.word	0x48000400
 8002fe8:	40014400 	.word	0x40014400

08002fec <MX_UART4_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002ff0:	4b22      	ldr	r3, [pc, #136]	@ (800307c <MX_UART4_Init+0x90>)
 8002ff2:	4a23      	ldr	r2, [pc, #140]	@ (8003080 <MX_UART4_Init+0x94>)
 8002ff4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002ff6:	4b21      	ldr	r3, [pc, #132]	@ (800307c <MX_UART4_Init+0x90>)
 8002ff8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ffc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800307c <MX_UART4_Init+0x90>)
 8003000:	2200      	movs	r2, #0
 8003002:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003004:	4b1d      	ldr	r3, [pc, #116]	@ (800307c <MX_UART4_Init+0x90>)
 8003006:	2200      	movs	r2, #0
 8003008:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800300a:	4b1c      	ldr	r3, [pc, #112]	@ (800307c <MX_UART4_Init+0x90>)
 800300c:	2200      	movs	r2, #0
 800300e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003010:	4b1a      	ldr	r3, [pc, #104]	@ (800307c <MX_UART4_Init+0x90>)
 8003012:	220c      	movs	r2, #12
 8003014:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003016:	4b19      	ldr	r3, [pc, #100]	@ (800307c <MX_UART4_Init+0x90>)
 8003018:	2200      	movs	r2, #0
 800301a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800301c:	4b17      	ldr	r3, [pc, #92]	@ (800307c <MX_UART4_Init+0x90>)
 800301e:	2200      	movs	r2, #0
 8003020:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003022:	4b16      	ldr	r3, [pc, #88]	@ (800307c <MX_UART4_Init+0x90>)
 8003024:	2200      	movs	r2, #0
 8003026:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003028:	4b14      	ldr	r3, [pc, #80]	@ (800307c <MX_UART4_Init+0x90>)
 800302a:	2200      	movs	r2, #0
 800302c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800302e:	4b13      	ldr	r3, [pc, #76]	@ (800307c <MX_UART4_Init+0x90>)
 8003030:	2200      	movs	r2, #0
 8003032:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003034:	4811      	ldr	r0, [pc, #68]	@ (800307c <MX_UART4_Init+0x90>)
 8003036:	f004 fb8a 	bl	800774e <HAL_UART_Init>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003040:	f7ff fade 	bl	8002600 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003044:	2100      	movs	r1, #0
 8003046:	480d      	ldr	r0, [pc, #52]	@ (800307c <MX_UART4_Init+0x90>)
 8003048:	f006 f859 	bl	80090fe <HAL_UARTEx_SetTxFifoThreshold>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003052:	f7ff fad5 	bl	8002600 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003056:	2100      	movs	r1, #0
 8003058:	4808      	ldr	r0, [pc, #32]	@ (800307c <MX_UART4_Init+0x90>)
 800305a:	f006 f88e 	bl	800917a <HAL_UARTEx_SetRxFifoThreshold>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003064:	f7ff facc 	bl	8002600 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003068:	4804      	ldr	r0, [pc, #16]	@ (800307c <MX_UART4_Init+0x90>)
 800306a:	f006 f80f 	bl	800908c <HAL_UARTEx_DisableFifoMode>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003074:	f7ff fac4 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003078:	bf00      	nop
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20001370 	.word	0x20001370
 8003080:	40004c00 	.word	0x40004c00

08003084 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003088:	4b22      	ldr	r3, [pc, #136]	@ (8003114 <MX_USART3_UART_Init+0x90>)
 800308a:	4a23      	ldr	r2, [pc, #140]	@ (8003118 <MX_USART3_UART_Init+0x94>)
 800308c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800308e:	4b21      	ldr	r3, [pc, #132]	@ (8003114 <MX_USART3_UART_Init+0x90>)
 8003090:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003094:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003096:	4b1f      	ldr	r3, [pc, #124]	@ (8003114 <MX_USART3_UART_Init+0x90>)
 8003098:	2200      	movs	r2, #0
 800309a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800309c:	4b1d      	ldr	r3, [pc, #116]	@ (8003114 <MX_USART3_UART_Init+0x90>)
 800309e:	2200      	movs	r2, #0
 80030a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003114 <MX_USART3_UART_Init+0x90>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003114 <MX_USART3_UART_Init+0x90>)
 80030aa:	220c      	movs	r2, #12
 80030ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ae:	4b19      	ldr	r3, [pc, #100]	@ (8003114 <MX_USART3_UART_Init+0x90>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030b4:	4b17      	ldr	r3, [pc, #92]	@ (8003114 <MX_USART3_UART_Init+0x90>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030ba:	4b16      	ldr	r3, [pc, #88]	@ (8003114 <MX_USART3_UART_Init+0x90>)
 80030bc:	2200      	movs	r2, #0
 80030be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030c0:	4b14      	ldr	r3, [pc, #80]	@ (8003114 <MX_USART3_UART_Init+0x90>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030c6:	4b13      	ldr	r3, [pc, #76]	@ (8003114 <MX_USART3_UART_Init+0x90>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030cc:	4811      	ldr	r0, [pc, #68]	@ (8003114 <MX_USART3_UART_Init+0x90>)
 80030ce:	f004 fb3e 	bl	800774e <HAL_UART_Init>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80030d8:	f7ff fa92 	bl	8002600 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030dc:	2100      	movs	r1, #0
 80030de:	480d      	ldr	r0, [pc, #52]	@ (8003114 <MX_USART3_UART_Init+0x90>)
 80030e0:	f006 f80d 	bl	80090fe <HAL_UARTEx_SetTxFifoThreshold>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80030ea:	f7ff fa89 	bl	8002600 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030ee:	2100      	movs	r1, #0
 80030f0:	4808      	ldr	r0, [pc, #32]	@ (8003114 <MX_USART3_UART_Init+0x90>)
 80030f2:	f006 f842 	bl	800917a <HAL_UARTEx_SetRxFifoThreshold>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80030fc:	f7ff fa80 	bl	8002600 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003100:	4804      	ldr	r0, [pc, #16]	@ (8003114 <MX_USART3_UART_Init+0x90>)
 8003102:	f005 ffc3 	bl	800908c <HAL_UARTEx_DisableFifoMode>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800310c:	f7ff fa78 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003110:	bf00      	nop
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20001404 	.word	0x20001404
 8003118:	40004800 	.word	0x40004800

0800311c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b09c      	sub	sp, #112	@ 0x70
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003124:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	60da      	str	r2, [r3, #12]
 8003132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003134:	f107 0318 	add.w	r3, r7, #24
 8003138:	2244      	movs	r2, #68	@ 0x44
 800313a:	2100      	movs	r1, #0
 800313c:	4618      	mov	r0, r3
 800313e:	f008 fe39 	bl	800bdb4 <memset>
  if(uartHandle->Instance==UART4)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a56      	ldr	r2, [pc, #344]	@ (80032a0 <HAL_UART_MspInit+0x184>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d137      	bne.n	80031bc <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800314c:	2308      	movs	r3, #8
 800314e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003150:	2300      	movs	r3, #0
 8003152:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003154:	f107 0318 	add.w	r3, r7, #24
 8003158:	4618      	mov	r0, r3
 800315a:	f002 fb43 	bl	80057e4 <HAL_RCCEx_PeriphCLKConfig>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003164:	f7ff fa4c 	bl	8002600 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003168:	4b4e      	ldr	r3, [pc, #312]	@ (80032a4 <HAL_UART_MspInit+0x188>)
 800316a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316c:	4a4d      	ldr	r2, [pc, #308]	@ (80032a4 <HAL_UART_MspInit+0x188>)
 800316e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003172:	6593      	str	r3, [r2, #88]	@ 0x58
 8003174:	4b4b      	ldr	r3, [pc, #300]	@ (80032a4 <HAL_UART_MspInit+0x188>)
 8003176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003178:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003180:	4b48      	ldr	r3, [pc, #288]	@ (80032a4 <HAL_UART_MspInit+0x188>)
 8003182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003184:	4a47      	ldr	r2, [pc, #284]	@ (80032a4 <HAL_UART_MspInit+0x188>)
 8003186:	f043 0304 	orr.w	r3, r3, #4
 800318a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800318c:	4b45      	ldr	r3, [pc, #276]	@ (80032a4 <HAL_UART_MspInit+0x188>)
 800318e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_SWD_Pin|RX_SWD_Pin;
 8003198:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800319c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319e:	2302      	movs	r3, #2
 80031a0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a6:	2300      	movs	r3, #0
 80031a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80031aa:	2305      	movs	r3, #5
 80031ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ae:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80031b2:	4619      	mov	r1, r3
 80031b4:	483c      	ldr	r0, [pc, #240]	@ (80032a8 <HAL_UART_MspInit+0x18c>)
 80031b6:	f000 fd15 	bl	8003be4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80031ba:	e06d      	b.n	8003298 <HAL_UART_MspInit+0x17c>
  else if(uartHandle->Instance==USART3)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a3a      	ldr	r2, [pc, #232]	@ (80032ac <HAL_UART_MspInit+0x190>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d168      	bne.n	8003298 <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80031c6:	2304      	movs	r3, #4
 80031c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80031ca:	2300      	movs	r3, #0
 80031cc:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031ce:	f107 0318 	add.w	r3, r7, #24
 80031d2:	4618      	mov	r0, r3
 80031d4:	f002 fb06 	bl	80057e4 <HAL_RCCEx_PeriphCLKConfig>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80031de:	f7ff fa0f 	bl	8002600 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031e2:	4b30      	ldr	r3, [pc, #192]	@ (80032a4 <HAL_UART_MspInit+0x188>)
 80031e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e6:	4a2f      	ldr	r2, [pc, #188]	@ (80032a4 <HAL_UART_MspInit+0x188>)
 80031e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80031ee:	4b2d      	ldr	r3, [pc, #180]	@ (80032a4 <HAL_UART_MspInit+0x188>)
 80031f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031fa:	4b2a      	ldr	r3, [pc, #168]	@ (80032a4 <HAL_UART_MspInit+0x188>)
 80031fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031fe:	4a29      	ldr	r2, [pc, #164]	@ (80032a4 <HAL_UART_MspInit+0x188>)
 8003200:	f043 0302 	orr.w	r3, r3, #2
 8003204:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003206:	4b27      	ldr	r3, [pc, #156]	@ (80032a4 <HAL_UART_MspInit+0x188>)
 8003208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LIDAR_RX_Pin|LIDAR_TX_Pin;
 8003212:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003216:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003218:	2302      	movs	r3, #2
 800321a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	2300      	movs	r3, #0
 800321e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003220:	2300      	movs	r3, #0
 8003222:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003224:	2307      	movs	r3, #7
 8003226:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003228:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800322c:	4619      	mov	r1, r3
 800322e:	4820      	ldr	r0, [pc, #128]	@ (80032b0 <HAL_UART_MspInit+0x194>)
 8003230:	f000 fcd8 	bl	8003be4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel1;
 8003234:	4b1f      	ldr	r3, [pc, #124]	@ (80032b4 <HAL_UART_MspInit+0x198>)
 8003236:	4a20      	ldr	r2, [pc, #128]	@ (80032b8 <HAL_UART_MspInit+0x19c>)
 8003238:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800323a:	4b1e      	ldr	r3, [pc, #120]	@ (80032b4 <HAL_UART_MspInit+0x198>)
 800323c:	221c      	movs	r2, #28
 800323e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003240:	4b1c      	ldr	r3, [pc, #112]	@ (80032b4 <HAL_UART_MspInit+0x198>)
 8003242:	2200      	movs	r2, #0
 8003244:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003246:	4b1b      	ldr	r3, [pc, #108]	@ (80032b4 <HAL_UART_MspInit+0x198>)
 8003248:	2200      	movs	r2, #0
 800324a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800324c:	4b19      	ldr	r3, [pc, #100]	@ (80032b4 <HAL_UART_MspInit+0x198>)
 800324e:	2280      	movs	r2, #128	@ 0x80
 8003250:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003252:	4b18      	ldr	r3, [pc, #96]	@ (80032b4 <HAL_UART_MspInit+0x198>)
 8003254:	2200      	movs	r2, #0
 8003256:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003258:	4b16      	ldr	r3, [pc, #88]	@ (80032b4 <HAL_UART_MspInit+0x198>)
 800325a:	2200      	movs	r2, #0
 800325c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800325e:	4b15      	ldr	r3, [pc, #84]	@ (80032b4 <HAL_UART_MspInit+0x198>)
 8003260:	2220      	movs	r2, #32
 8003262:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003264:	4b13      	ldr	r3, [pc, #76]	@ (80032b4 <HAL_UART_MspInit+0x198>)
 8003266:	2200      	movs	r2, #0
 8003268:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800326a:	4812      	ldr	r0, [pc, #72]	@ (80032b4 <HAL_UART_MspInit+0x198>)
 800326c:	f000 f988 	bl	8003580 <HAL_DMA_Init>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_UART_MspInit+0x15e>
      Error_Handler();
 8003276:	f7ff f9c3 	bl	8002600 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a0d      	ldr	r2, [pc, #52]	@ (80032b4 <HAL_UART_MspInit+0x198>)
 800327e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003282:	4a0c      	ldr	r2, [pc, #48]	@ (80032b4 <HAL_UART_MspInit+0x198>)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003288:	2200      	movs	r2, #0
 800328a:	2105      	movs	r1, #5
 800328c:	2027      	movs	r0, #39	@ 0x27
 800328e:	f000 f94f 	bl	8003530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003292:	2027      	movs	r0, #39	@ 0x27
 8003294:	f000 f966 	bl	8003564 <HAL_NVIC_EnableIRQ>
}
 8003298:	bf00      	nop
 800329a:	3770      	adds	r7, #112	@ 0x70
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40004c00 	.word	0x40004c00
 80032a4:	40021000 	.word	0x40021000
 80032a8:	48000800 	.word	0x48000800
 80032ac:	40004800 	.word	0x40004800
 80032b0:	48000400 	.word	0x48000400
 80032b4:	20001498 	.word	0x20001498
 80032b8:	40020008 	.word	0x40020008

080032bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032bc:	480d      	ldr	r0, [pc, #52]	@ (80032f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032be:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80032c0:	f7ff fb56 	bl	8002970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032c4:	480c      	ldr	r0, [pc, #48]	@ (80032f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80032c6:	490d      	ldr	r1, [pc, #52]	@ (80032fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80032c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003300 <LoopForever+0xe>)
  movs r3, #0
 80032ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80032cc:	e002      	b.n	80032d4 <LoopCopyDataInit>

080032ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032d2:	3304      	adds	r3, #4

080032d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032d8:	d3f9      	bcc.n	80032ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032da:	4a0a      	ldr	r2, [pc, #40]	@ (8003304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032dc:	4c0a      	ldr	r4, [pc, #40]	@ (8003308 <LoopForever+0x16>)
  movs r3, #0
 80032de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032e0:	e001      	b.n	80032e6 <LoopFillZerobss>

080032e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032e4:	3204      	adds	r2, #4

080032e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032e8:	d3fb      	bcc.n	80032e2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80032ea:	f008 fe11 	bl	800bf10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032ee:	f7fe ff4f 	bl	8002190 <main>

080032f2 <LoopForever>:

LoopForever:
    b LoopForever
 80032f2:	e7fe      	b.n	80032f2 <LoopForever>
  ldr   r0, =_estack
 80032f4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80032f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032fc:	200003a4 	.word	0x200003a4
  ldr r2, =_sidata
 8003300:	08010058 	.word	0x08010058
  ldr r2, =_sbss
 8003304:	200003a4 	.word	0x200003a4
  ldr r4, =_ebss
 8003308:	2000239c 	.word	0x2000239c

0800330c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800330c:	e7fe      	b.n	800330c <ADC1_2_IRQHandler>

0800330e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003318:	2003      	movs	r0, #3
 800331a:	f000 f8fe 	bl	800351a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800331e:	200f      	movs	r0, #15
 8003320:	f7ff f99e 	bl	8002660 <HAL_InitTick>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	71fb      	strb	r3, [r7, #7]
 800332e:	e001      	b.n	8003334 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003330:	f7ff f96c 	bl	800260c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003334:	79fb      	ldrb	r3, [r7, #7]

}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003344:	4b05      	ldr	r3, [pc, #20]	@ (800335c <HAL_IncTick+0x1c>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4b05      	ldr	r3, [pc, #20]	@ (8003360 <HAL_IncTick+0x20>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4413      	add	r3, r2
 800334e:	4a03      	ldr	r2, [pc, #12]	@ (800335c <HAL_IncTick+0x1c>)
 8003350:	6013      	str	r3, [r2, #0]
}
 8003352:	bf00      	nop
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	200014f8 	.word	0x200014f8
 8003360:	200001d4 	.word	0x200001d4

08003364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return uwTick;
 8003368:	4b03      	ldr	r3, [pc, #12]	@ (8003378 <HAL_GetTick+0x14>)
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	4618      	mov	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	200014f8 	.word	0x200014f8

0800337c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003384:	f7ff ffee 	bl	8003364 <HAL_GetTick>
 8003388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d004      	beq.n	80033a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003396:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <HAL_Delay+0x40>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033a0:	bf00      	nop
 80033a2:	f7ff ffdf 	bl	8003364 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d8f7      	bhi.n	80033a2 <HAL_Delay+0x26>
  {
  }
}
 80033b2:	bf00      	nop
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	200001d4 	.word	0x200001d4

080033c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003404 <__NVIC_SetPriorityGrouping+0x44>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033dc:	4013      	ands	r3, r2
 80033de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033f2:	4a04      	ldr	r2, [pc, #16]	@ (8003404 <__NVIC_SetPriorityGrouping+0x44>)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	60d3      	str	r3, [r2, #12]
}
 80033f8:	bf00      	nop
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800340c:	4b04      	ldr	r3, [pc, #16]	@ (8003420 <__NVIC_GetPriorityGrouping+0x18>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	0a1b      	lsrs	r3, r3, #8
 8003412:	f003 0307 	and.w	r3, r3, #7
}
 8003416:	4618      	mov	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	2b00      	cmp	r3, #0
 8003434:	db0b      	blt.n	800344e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	f003 021f 	and.w	r2, r3, #31
 800343c:	4907      	ldr	r1, [pc, #28]	@ (800345c <__NVIC_EnableIRQ+0x38>)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	2001      	movs	r0, #1
 8003446:	fa00 f202 	lsl.w	r2, r0, r2
 800344a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	e000e100 	.word	0xe000e100

08003460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	6039      	str	r1, [r7, #0]
 800346a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800346c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003470:	2b00      	cmp	r3, #0
 8003472:	db0a      	blt.n	800348a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	b2da      	uxtb	r2, r3
 8003478:	490c      	ldr	r1, [pc, #48]	@ (80034ac <__NVIC_SetPriority+0x4c>)
 800347a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347e:	0112      	lsls	r2, r2, #4
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	440b      	add	r3, r1
 8003484:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003488:	e00a      	b.n	80034a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	4908      	ldr	r1, [pc, #32]	@ (80034b0 <__NVIC_SetPriority+0x50>)
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	3b04      	subs	r3, #4
 8003498:	0112      	lsls	r2, r2, #4
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	440b      	add	r3, r1
 800349e:	761a      	strb	r2, [r3, #24]
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	e000e100 	.word	0xe000e100
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b089      	sub	sp, #36	@ 0x24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f1c3 0307 	rsb	r3, r3, #7
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	bf28      	it	cs
 80034d2:	2304      	movcs	r3, #4
 80034d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3304      	adds	r3, #4
 80034da:	2b06      	cmp	r3, #6
 80034dc:	d902      	bls.n	80034e4 <NVIC_EncodePriority+0x30>
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3b03      	subs	r3, #3
 80034e2:	e000      	b.n	80034e6 <NVIC_EncodePriority+0x32>
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43da      	mvns	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	401a      	ands	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	fa01 f303 	lsl.w	r3, r1, r3
 8003506:	43d9      	mvns	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800350c:	4313      	orrs	r3, r2
         );
}
 800350e:	4618      	mov	r0, r3
 8003510:	3724      	adds	r7, #36	@ 0x24
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff ff4c 	bl	80033c0 <__NVIC_SetPriorityGrouping>
}
 8003528:	bf00      	nop
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800353e:	f7ff ff63 	bl	8003408 <__NVIC_GetPriorityGrouping>
 8003542:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	68b9      	ldr	r1, [r7, #8]
 8003548:	6978      	ldr	r0, [r7, #20]
 800354a:	f7ff ffb3 	bl	80034b4 <NVIC_EncodePriority>
 800354e:	4602      	mov	r2, r0
 8003550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003554:	4611      	mov	r1, r2
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff ff82 	bl	8003460 <__NVIC_SetPriority>
}
 800355c:	bf00      	nop
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800356e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff ff56 	bl	8003424 <__NVIC_EnableIRQ>
}
 8003578:	bf00      	nop
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e08d      	b.n	80036ae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	4b47      	ldr	r3, [pc, #284]	@ (80036b8 <HAL_DMA_Init+0x138>)
 800359a:	429a      	cmp	r2, r3
 800359c:	d80f      	bhi.n	80035be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	4b45      	ldr	r3, [pc, #276]	@ (80036bc <HAL_DMA_Init+0x13c>)
 80035a6:	4413      	add	r3, r2
 80035a8:	4a45      	ldr	r2, [pc, #276]	@ (80036c0 <HAL_DMA_Init+0x140>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	091b      	lsrs	r3, r3, #4
 80035b0:	009a      	lsls	r2, r3, #2
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a42      	ldr	r2, [pc, #264]	@ (80036c4 <HAL_DMA_Init+0x144>)
 80035ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80035bc:	e00e      	b.n	80035dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	4b40      	ldr	r3, [pc, #256]	@ (80036c8 <HAL_DMA_Init+0x148>)
 80035c6:	4413      	add	r3, r2
 80035c8:	4a3d      	ldr	r2, [pc, #244]	@ (80036c0 <HAL_DMA_Init+0x140>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	009a      	lsls	r2, r3, #2
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a3c      	ldr	r2, [pc, #240]	@ (80036cc <HAL_DMA_Init+0x14c>)
 80035da:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80035f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003600:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800360c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003618:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fa76 	bl	8003b20 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800363c:	d102      	bne.n	8003644 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003658:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d010      	beq.n	8003684 <HAL_DMA_Init+0x104>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b04      	cmp	r3, #4
 8003668:	d80c      	bhi.n	8003684 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fa96 	bl	8003b9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	e008      	b.n	8003696 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40020407 	.word	0x40020407
 80036bc:	bffdfff8 	.word	0xbffdfff8
 80036c0:	cccccccd 	.word	0xcccccccd
 80036c4:	40020000 	.word	0x40020000
 80036c8:	bffdfbf8 	.word	0xbffdfbf8
 80036cc:	40020400 	.word	0x40020400

080036d0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_DMA_Start_IT+0x20>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e066      	b.n	80037be <HAL_DMA_Start_IT+0xee>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b01      	cmp	r3, #1
 8003702:	d155      	bne.n	80037b0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0201 	bic.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f9bb 	bl	8003aa4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 020e 	orr.w	r2, r2, #14
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	e00f      	b.n	8003768 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0204 	bic.w	r2, r2, #4
 8003756:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 020a 	orr.w	r2, r2, #10
 8003766:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d007      	beq.n	8003786 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003780:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003784:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003798:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800379c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0201 	orr.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	e005      	b.n	80037bc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80037b8:	2302      	movs	r3, #2
 80037ba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b085      	sub	sp, #20
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d005      	beq.n	80037ea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2204      	movs	r2, #4
 80037e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
 80037e8:	e037      	b.n	800385a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 020e 	bic.w	r2, r2, #14
 80037f8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003804:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003808:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0201 	bic.w	r2, r2, #1
 8003818:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381e:	f003 021f 	and.w	r2, r3, #31
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003826:	2101      	movs	r1, #1
 8003828:	fa01 f202 	lsl.w	r2, r1, r2
 800382c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003836:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00c      	beq.n	800385a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800384e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003858:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800386a:	7bfb      	ldrb	r3, [r7, #15]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d00d      	beq.n	80038ac <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2204      	movs	r2, #4
 8003894:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	73fb      	strb	r3, [r7, #15]
 80038aa:	e047      	b.n	800393c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 020e 	bic.w	r2, r2, #14
 80038ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0201 	bic.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e0:	f003 021f 	and.w	r2, r3, #31
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	2101      	movs	r1, #1
 80038ea:	fa01 f202 	lsl.w	r2, r1, r2
 80038ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00c      	beq.n	800391c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003910:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800391a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	4798      	blx	r3
    }
  }
  return status;
 800393c:	7bfb      	ldrb	r3, [r7, #15]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	2204      	movs	r2, #4
 8003968:	409a      	lsls	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4013      	ands	r3, r2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d026      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x7a>
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d021      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b00      	cmp	r3, #0
 8003988:	d107      	bne.n	800399a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0204 	bic.w	r2, r2, #4
 8003998:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399e:	f003 021f 	and.w	r2, r3, #31
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a6:	2104      	movs	r1, #4
 80039a8:	fa01 f202 	lsl.w	r2, r1, r2
 80039ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d071      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80039be:	e06c      	b.n	8003a9a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c4:	f003 031f 	and.w	r3, r3, #31
 80039c8:	2202      	movs	r2, #2
 80039ca:	409a      	lsls	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d02e      	beq.n	8003a32 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d029      	beq.n	8003a32 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10b      	bne.n	8003a04 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 020a 	bic.w	r2, r2, #10
 80039fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a08:	f003 021f 	and.w	r2, r3, #31
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a10:	2102      	movs	r1, #2
 8003a12:	fa01 f202 	lsl.w	r2, r1, r2
 8003a16:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d038      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a30:	e033      	b.n	8003a9a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a36:	f003 031f 	and.w	r3, r3, #31
 8003a3a:	2208      	movs	r2, #8
 8003a3c:	409a      	lsls	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d02a      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d025      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 020e 	bic.w	r2, r2, #14
 8003a5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a64:	f003 021f 	and.w	r2, r3, #31
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d004      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a9a:	bf00      	nop
 8003a9c:	bf00      	nop
}
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003aba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d004      	beq.n	8003ace <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003acc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad2:	f003 021f 	and.w	r2, r3, #31
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ada:	2101      	movs	r1, #1
 8003adc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b10      	cmp	r3, #16
 8003af0:	d108      	bne.n	8003b04 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b02:	e007      	b.n	8003b14 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	60da      	str	r2, [r3, #12]
}
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4b16      	ldr	r3, [pc, #88]	@ (8003b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d802      	bhi.n	8003b3a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003b34:	4b15      	ldr	r3, [pc, #84]	@ (8003b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	e001      	b.n	8003b3e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003b3a:	4b15      	ldr	r3, [pc, #84]	@ (8003b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b3c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	3b08      	subs	r3, #8
 8003b4a:	4a12      	ldr	r2, [pc, #72]	@ (8003b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b58:	089b      	lsrs	r3, r3, #2
 8003b5a:	009a      	lsls	r2, r3, #2
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	4413      	add	r3, r2
 8003b60:	461a      	mov	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a0b      	ldr	r2, [pc, #44]	@ (8003b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b6a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 031f 	and.w	r3, r3, #31
 8003b72:	2201      	movs	r2, #1
 8003b74:	409a      	lsls	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b7a:	bf00      	nop
 8003b7c:	371c      	adds	r7, #28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40020407 	.word	0x40020407
 8003b8c:	40020800 	.word	0x40020800
 8003b90:	40020820 	.word	0x40020820
 8003b94:	cccccccd 	.word	0xcccccccd
 8003b98:	40020880 	.word	0x40020880

08003b9c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4b0b      	ldr	r3, [pc, #44]	@ (8003bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a08      	ldr	r2, [pc, #32]	@ (8003be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003bbe:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	2201      	movs	r2, #1
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003bd0:	bf00      	nop
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	1000823f 	.word	0x1000823f
 8003be0:	40020940 	.word	0x40020940

08003be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003bf2:	e15a      	b.n	8003eaa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003c00:	4013      	ands	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 814c 	beq.w	8003ea4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d005      	beq.n	8003c24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d130      	bne.n	8003c86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	2203      	movs	r2, #3
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	43db      	mvns	r3, r3
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4013      	ands	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	091b      	lsrs	r3, r3, #4
 8003c70:	f003 0201 	and.w	r2, r3, #1
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d017      	beq.n	8003cc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d123      	bne.n	8003d16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	08da      	lsrs	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3208      	adds	r2, #8
 8003cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	220f      	movs	r2, #15
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	08da      	lsrs	r2, r3, #3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3208      	adds	r2, #8
 8003d10:	6939      	ldr	r1, [r7, #16]
 8003d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	2203      	movs	r2, #3
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43db      	mvns	r3, r3
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f003 0203 	and.w	r2, r3, #3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 80a6 	beq.w	8003ea4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d58:	4b5b      	ldr	r3, [pc, #364]	@ (8003ec8 <HAL_GPIO_Init+0x2e4>)
 8003d5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d5c:	4a5a      	ldr	r2, [pc, #360]	@ (8003ec8 <HAL_GPIO_Init+0x2e4>)
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d64:	4b58      	ldr	r3, [pc, #352]	@ (8003ec8 <HAL_GPIO_Init+0x2e4>)
 8003d66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d70:	4a56      	ldr	r2, [pc, #344]	@ (8003ecc <HAL_GPIO_Init+0x2e8>)
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	089b      	lsrs	r3, r3, #2
 8003d76:	3302      	adds	r3, #2
 8003d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	220f      	movs	r2, #15
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4013      	ands	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d9a:	d01f      	beq.n	8003ddc <HAL_GPIO_Init+0x1f8>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a4c      	ldr	r2, [pc, #304]	@ (8003ed0 <HAL_GPIO_Init+0x2ec>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d019      	beq.n	8003dd8 <HAL_GPIO_Init+0x1f4>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a4b      	ldr	r2, [pc, #300]	@ (8003ed4 <HAL_GPIO_Init+0x2f0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d013      	beq.n	8003dd4 <HAL_GPIO_Init+0x1f0>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a4a      	ldr	r2, [pc, #296]	@ (8003ed8 <HAL_GPIO_Init+0x2f4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00d      	beq.n	8003dd0 <HAL_GPIO_Init+0x1ec>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a49      	ldr	r2, [pc, #292]	@ (8003edc <HAL_GPIO_Init+0x2f8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d007      	beq.n	8003dcc <HAL_GPIO_Init+0x1e8>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a48      	ldr	r2, [pc, #288]	@ (8003ee0 <HAL_GPIO_Init+0x2fc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d101      	bne.n	8003dc8 <HAL_GPIO_Init+0x1e4>
 8003dc4:	2305      	movs	r3, #5
 8003dc6:	e00a      	b.n	8003dde <HAL_GPIO_Init+0x1fa>
 8003dc8:	2306      	movs	r3, #6
 8003dca:	e008      	b.n	8003dde <HAL_GPIO_Init+0x1fa>
 8003dcc:	2304      	movs	r3, #4
 8003dce:	e006      	b.n	8003dde <HAL_GPIO_Init+0x1fa>
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e004      	b.n	8003dde <HAL_GPIO_Init+0x1fa>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e002      	b.n	8003dde <HAL_GPIO_Init+0x1fa>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <HAL_GPIO_Init+0x1fa>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	f002 0203 	and.w	r2, r2, #3
 8003de4:	0092      	lsls	r2, r2, #2
 8003de6:	4093      	lsls	r3, r2
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dee:	4937      	ldr	r1, [pc, #220]	@ (8003ecc <HAL_GPIO_Init+0x2e8>)
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	089b      	lsrs	r3, r3, #2
 8003df4:	3302      	adds	r3, #2
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dfc:	4b39      	ldr	r3, [pc, #228]	@ (8003ee4 <HAL_GPIO_Init+0x300>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e20:	4a30      	ldr	r2, [pc, #192]	@ (8003ee4 <HAL_GPIO_Init+0x300>)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e26:	4b2f      	ldr	r3, [pc, #188]	@ (8003ee4 <HAL_GPIO_Init+0x300>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4013      	ands	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e4a:	4a26      	ldr	r2, [pc, #152]	@ (8003ee4 <HAL_GPIO_Init+0x300>)
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003e50:	4b24      	ldr	r3, [pc, #144]	@ (8003ee4 <HAL_GPIO_Init+0x300>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e74:	4a1b      	ldr	r2, [pc, #108]	@ (8003ee4 <HAL_GPIO_Init+0x300>)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee4 <HAL_GPIO_Init+0x300>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	43db      	mvns	r3, r3
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4013      	ands	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e9e:	4a11      	ldr	r2, [pc, #68]	@ (8003ee4 <HAL_GPIO_Init+0x300>)
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f47f ae9d 	bne.w	8003bf4 <HAL_GPIO_Init+0x10>
  }
}
 8003eba:	bf00      	nop
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	40010000 	.word	0x40010000
 8003ed0:	48000400 	.word	0x48000400
 8003ed4:	48000800 	.word	0x48000800
 8003ed8:	48000c00 	.word	0x48000c00
 8003edc:	48001000 	.word	0x48001000
 8003ee0:	48001400 	.word	0x48001400
 8003ee4:	40010400 	.word	0x40010400

08003ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	807b      	strh	r3, [r7, #2]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ef8:	787b      	ldrb	r3, [r7, #1]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003efe:	887a      	ldrh	r2, [r7, #2]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f04:	e002      	b.n	8003f0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f06:	887a      	ldrh	r2, [r7, #2]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f2a:	887a      	ldrh	r2, [r7, #2]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	041a      	lsls	r2, r3, #16
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	43d9      	mvns	r1, r3
 8003f36:	887b      	ldrh	r3, [r7, #2]
 8003f38:	400b      	ands	r3, r1
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	619a      	str	r2, [r3, #24]
}
 8003f40:	bf00      	nop
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f56:	4b08      	ldr	r3, [pc, #32]	@ (8003f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f58:	695a      	ldr	r2, [r3, #20]
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d006      	beq.n	8003f70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f62:	4a05      	ldr	r2, [pc, #20]	@ (8003f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f64:	88fb      	ldrh	r3, [r7, #6]
 8003f66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f68:	88fb      	ldrh	r3, [r7, #6]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fe fad8 	bl	8002520 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f70:	bf00      	nop
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40010400 	.word	0x40010400

08003f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e08d      	b.n	80040aa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fe f89a 	bl	80020dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2224      	movs	r2, #36	@ 0x24
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0201 	bic.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003fcc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d107      	bne.n	8003ff6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	e006      	b.n	8004004 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004002:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	2b02      	cmp	r3, #2
 800400a:	d108      	bne.n	800401e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800401a:	605a      	str	r2, [r3, #4]
 800401c:	e007      	b.n	800402e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800402c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800403c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004040:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004050:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	69d9      	ldr	r1, [r3, #28]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1a      	ldr	r2, [r3, #32]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2220      	movs	r2, #32
 8004096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
	...

080040b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	4608      	mov	r0, r1
 80040be:	4611      	mov	r1, r2
 80040c0:	461a      	mov	r2, r3
 80040c2:	4603      	mov	r3, r0
 80040c4:	817b      	strh	r3, [r7, #10]
 80040c6:	460b      	mov	r3, r1
 80040c8:	813b      	strh	r3, [r7, #8]
 80040ca:	4613      	mov	r3, r2
 80040cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	f040 80f9 	bne.w	80042ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <HAL_I2C_Mem_Write+0x34>
 80040e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d105      	bne.n	80040f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040ee:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0ed      	b.n	80042d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <HAL_I2C_Mem_Write+0x4e>
 80040fe:	2302      	movs	r3, #2
 8004100:	e0e6      	b.n	80042d0 <HAL_I2C_Mem_Write+0x21c>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800410a:	f7ff f92b 	bl	8003364 <HAL_GetTick>
 800410e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	2319      	movs	r3, #25
 8004116:	2201      	movs	r2, #1
 8004118:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 fac3 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0d1      	b.n	80042d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2221      	movs	r2, #33	@ 0x21
 8004130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2240      	movs	r2, #64	@ 0x40
 8004138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a3a      	ldr	r2, [r7, #32]
 8004146:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800414c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004154:	88f8      	ldrh	r0, [r7, #6]
 8004156:	893a      	ldrh	r2, [r7, #8]
 8004158:	8979      	ldrh	r1, [r7, #10]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	9301      	str	r3, [sp, #4]
 800415e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	4603      	mov	r3, r0
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f9d3 	bl	8004510 <I2C_RequestMemoryWrite>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d005      	beq.n	800417c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e0a9      	b.n	80042d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004180:	b29b      	uxth	r3, r3
 8004182:	2bff      	cmp	r3, #255	@ 0xff
 8004184:	d90e      	bls.n	80041a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	22ff      	movs	r2, #255	@ 0xff
 800418a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004190:	b2da      	uxtb	r2, r3
 8004192:	8979      	ldrh	r1, [r7, #10]
 8004194:	2300      	movs	r3, #0
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 fc47 	bl	8004a30 <I2C_TransferConfig>
 80041a2:	e00f      	b.n	80041c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	8979      	ldrh	r1, [r7, #10]
 80041b6:	2300      	movs	r3, #0
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 fc36 	bl	8004a30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 fac6 	bl	800475a <I2C_WaitOnTXISFlagUntilTimeout>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e07b      	b.n	80042d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041dc:	781a      	ldrb	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d034      	beq.n	800427c <HAL_I2C_Mem_Write+0x1c8>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004216:	2b00      	cmp	r3, #0
 8004218:	d130      	bne.n	800427c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004220:	2200      	movs	r2, #0
 8004222:	2180      	movs	r1, #128	@ 0x80
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 fa3f 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e04d      	b.n	80042d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004238:	b29b      	uxth	r3, r3
 800423a:	2bff      	cmp	r3, #255	@ 0xff
 800423c:	d90e      	bls.n	800425c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	22ff      	movs	r2, #255	@ 0xff
 8004242:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004248:	b2da      	uxtb	r2, r3
 800424a:	8979      	ldrh	r1, [r7, #10]
 800424c:	2300      	movs	r3, #0
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 fbeb 	bl	8004a30 <I2C_TransferConfig>
 800425a:	e00f      	b.n	800427c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800426a:	b2da      	uxtb	r2, r3
 800426c:	8979      	ldrh	r1, [r7, #10]
 800426e:	2300      	movs	r3, #0
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 fbda 	bl	8004a30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d19e      	bne.n	80041c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 faac 	bl	80047e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e01a      	b.n	80042d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2220      	movs	r2, #32
 80042a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6859      	ldr	r1, [r3, #4]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	4b0a      	ldr	r3, [pc, #40]	@ (80042d8 <HAL_I2C_Mem_Write+0x224>)
 80042ae:	400b      	ands	r3, r1
 80042b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	e000      	b.n	80042d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80042ce:	2302      	movs	r3, #2
  }
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	fe00e800 	.word	0xfe00e800

080042dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af02      	add	r7, sp, #8
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	4608      	mov	r0, r1
 80042e6:	4611      	mov	r1, r2
 80042e8:	461a      	mov	r2, r3
 80042ea:	4603      	mov	r3, r0
 80042ec:	817b      	strh	r3, [r7, #10]
 80042ee:	460b      	mov	r3, r1
 80042f0:	813b      	strh	r3, [r7, #8]
 80042f2:	4613      	mov	r3, r2
 80042f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b20      	cmp	r3, #32
 8004300:	f040 80fd 	bne.w	80044fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <HAL_I2C_Mem_Read+0x34>
 800430a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800430c:	2b00      	cmp	r3, #0
 800430e:	d105      	bne.n	800431c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004316:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e0f1      	b.n	8004500 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_I2C_Mem_Read+0x4e>
 8004326:	2302      	movs	r3, #2
 8004328:	e0ea      	b.n	8004500 <HAL_I2C_Mem_Read+0x224>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004332:	f7ff f817 	bl	8003364 <HAL_GetTick>
 8004336:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	2319      	movs	r3, #25
 800433e:	2201      	movs	r2, #1
 8004340:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f9af 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0d5      	b.n	8004500 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2222      	movs	r2, #34	@ 0x22
 8004358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2240      	movs	r2, #64	@ 0x40
 8004360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a3a      	ldr	r2, [r7, #32]
 800436e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004374:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800437c:	88f8      	ldrh	r0, [r7, #6]
 800437e:	893a      	ldrh	r2, [r7, #8]
 8004380:	8979      	ldrh	r1, [r7, #10]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	9301      	str	r3, [sp, #4]
 8004386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	4603      	mov	r3, r0
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f913 	bl	80045b8 <I2C_RequestMemoryRead>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0ad      	b.n	8004500 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2bff      	cmp	r3, #255	@ 0xff
 80043ac:	d90e      	bls.n	80043cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	22ff      	movs	r2, #255	@ 0xff
 80043b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	8979      	ldrh	r1, [r7, #10]
 80043bc:	4b52      	ldr	r3, [pc, #328]	@ (8004508 <HAL_I2C_Mem_Read+0x22c>)
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 fb33 	bl	8004a30 <I2C_TransferConfig>
 80043ca:	e00f      	b.n	80043ec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	8979      	ldrh	r1, [r7, #10]
 80043de:	4b4a      	ldr	r3, [pc, #296]	@ (8004508 <HAL_I2C_Mem_Read+0x22c>)
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 fb22 	bl	8004a30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f2:	2200      	movs	r2, #0
 80043f4:	2104      	movs	r1, #4
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f956 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e07c      	b.n	8004500 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b01      	subs	r3, #1
 8004432:	b29a      	uxth	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800443c:	b29b      	uxth	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d034      	beq.n	80044ac <HAL_I2C_Mem_Read+0x1d0>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004446:	2b00      	cmp	r3, #0
 8004448:	d130      	bne.n	80044ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004450:	2200      	movs	r2, #0
 8004452:	2180      	movs	r1, #128	@ 0x80
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 f927 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e04d      	b.n	8004500 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004468:	b29b      	uxth	r3, r3
 800446a:	2bff      	cmp	r3, #255	@ 0xff
 800446c:	d90e      	bls.n	800448c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	22ff      	movs	r2, #255	@ 0xff
 8004472:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004478:	b2da      	uxtb	r2, r3
 800447a:	8979      	ldrh	r1, [r7, #10]
 800447c:	2300      	movs	r3, #0
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 fad3 	bl	8004a30 <I2C_TransferConfig>
 800448a:	e00f      	b.n	80044ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449a:	b2da      	uxtb	r2, r3
 800449c:	8979      	ldrh	r1, [r7, #10]
 800449e:	2300      	movs	r3, #0
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 fac2 	bl	8004a30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d19a      	bne.n	80043ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 f994 	bl	80047e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e01a      	b.n	8004500 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2220      	movs	r2, #32
 80044d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6859      	ldr	r1, [r3, #4]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	4b0b      	ldr	r3, [pc, #44]	@ (800450c <HAL_I2C_Mem_Read+0x230>)
 80044de:	400b      	ands	r3, r1
 80044e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e000      	b.n	8004500 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80044fe:	2302      	movs	r3, #2
  }
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	80002400 	.word	0x80002400
 800450c:	fe00e800 	.word	0xfe00e800

08004510 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af02      	add	r7, sp, #8
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	4608      	mov	r0, r1
 800451a:	4611      	mov	r1, r2
 800451c:	461a      	mov	r2, r3
 800451e:	4603      	mov	r3, r0
 8004520:	817b      	strh	r3, [r7, #10]
 8004522:	460b      	mov	r3, r1
 8004524:	813b      	strh	r3, [r7, #8]
 8004526:	4613      	mov	r3, r2
 8004528:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800452a:	88fb      	ldrh	r3, [r7, #6]
 800452c:	b2da      	uxtb	r2, r3
 800452e:	8979      	ldrh	r1, [r7, #10]
 8004530:	4b20      	ldr	r3, [pc, #128]	@ (80045b4 <I2C_RequestMemoryWrite+0xa4>)
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 fa79 	bl	8004a30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	69b9      	ldr	r1, [r7, #24]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f909 	bl	800475a <I2C_WaitOnTXISFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e02c      	b.n	80045ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004552:	88fb      	ldrh	r3, [r7, #6]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d105      	bne.n	8004564 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004558:	893b      	ldrh	r3, [r7, #8]
 800455a:	b2da      	uxtb	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	629a      	str	r2, [r3, #40]	@ 0x28
 8004562:	e015      	b.n	8004590 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004564:	893b      	ldrh	r3, [r7, #8]
 8004566:	0a1b      	lsrs	r3, r3, #8
 8004568:	b29b      	uxth	r3, r3
 800456a:	b2da      	uxtb	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	69b9      	ldr	r1, [r7, #24]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f8ef 	bl	800475a <I2C_WaitOnTXISFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e012      	b.n	80045ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004586:	893b      	ldrh	r3, [r7, #8]
 8004588:	b2da      	uxtb	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	2200      	movs	r2, #0
 8004598:	2180      	movs	r1, #128	@ 0x80
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 f884 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e000      	b.n	80045ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	80002000 	.word	0x80002000

080045b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af02      	add	r7, sp, #8
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	4608      	mov	r0, r1
 80045c2:	4611      	mov	r1, r2
 80045c4:	461a      	mov	r2, r3
 80045c6:	4603      	mov	r3, r0
 80045c8:	817b      	strh	r3, [r7, #10]
 80045ca:	460b      	mov	r3, r1
 80045cc:	813b      	strh	r3, [r7, #8]
 80045ce:	4613      	mov	r3, r2
 80045d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80045d2:	88fb      	ldrh	r3, [r7, #6]
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	8979      	ldrh	r1, [r7, #10]
 80045d8:	4b20      	ldr	r3, [pc, #128]	@ (800465c <I2C_RequestMemoryRead+0xa4>)
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	2300      	movs	r3, #0
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 fa26 	bl	8004a30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	69b9      	ldr	r1, [r7, #24]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 f8b6 	bl	800475a <I2C_WaitOnTXISFlagUntilTimeout>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e02c      	b.n	8004652 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045f8:	88fb      	ldrh	r3, [r7, #6]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d105      	bne.n	800460a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045fe:	893b      	ldrh	r3, [r7, #8]
 8004600:	b2da      	uxtb	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	629a      	str	r2, [r3, #40]	@ 0x28
 8004608:	e015      	b.n	8004636 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800460a:	893b      	ldrh	r3, [r7, #8]
 800460c:	0a1b      	lsrs	r3, r3, #8
 800460e:	b29b      	uxth	r3, r3
 8004610:	b2da      	uxtb	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004618:	69fa      	ldr	r2, [r7, #28]
 800461a:	69b9      	ldr	r1, [r7, #24]
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f89c 	bl	800475a <I2C_WaitOnTXISFlagUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e012      	b.n	8004652 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800462c:	893b      	ldrh	r3, [r7, #8]
 800462e:	b2da      	uxtb	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	2200      	movs	r2, #0
 800463e:	2140      	movs	r1, #64	@ 0x40
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 f831 	bl	80046a8 <I2C_WaitOnFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	80002000 	.word	0x80002000

08004660 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b02      	cmp	r3, #2
 8004674:	d103      	bne.n	800467e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2200      	movs	r2, #0
 800467c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b01      	cmp	r3, #1
 800468a:	d007      	beq.n	800469c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699a      	ldr	r2, [r3, #24]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0201 	orr.w	r2, r2, #1
 800469a:	619a      	str	r2, [r3, #24]
  }
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	603b      	str	r3, [r7, #0]
 80046b4:	4613      	mov	r3, r2
 80046b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046b8:	e03b      	b.n	8004732 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	6839      	ldr	r1, [r7, #0]
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f8d6 	bl	8004870 <I2C_IsErrorOccurred>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e041      	b.n	8004752 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d4:	d02d      	beq.n	8004732 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d6:	f7fe fe45 	bl	8003364 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d302      	bcc.n	80046ec <I2C_WaitOnFlagUntilTimeout+0x44>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d122      	bne.n	8004732 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	4013      	ands	r3, r2
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	bf0c      	ite	eq
 80046fc:	2301      	moveq	r3, #1
 80046fe:	2300      	movne	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	461a      	mov	r2, r3
 8004704:	79fb      	ldrb	r3, [r7, #7]
 8004706:	429a      	cmp	r2, r3
 8004708:	d113      	bne.n	8004732 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470e:	f043 0220 	orr.w	r2, r3, #32
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e00f      	b.n	8004752 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699a      	ldr	r2, [r3, #24]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	4013      	ands	r3, r2
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	429a      	cmp	r2, r3
 8004740:	bf0c      	ite	eq
 8004742:	2301      	moveq	r3, #1
 8004744:	2300      	movne	r3, #0
 8004746:	b2db      	uxtb	r3, r3
 8004748:	461a      	mov	r2, r3
 800474a:	79fb      	ldrb	r3, [r7, #7]
 800474c:	429a      	cmp	r2, r3
 800474e:	d0b4      	beq.n	80046ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004766:	e033      	b.n	80047d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 f87f 	bl	8004870 <I2C_IsErrorOccurred>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e031      	b.n	80047e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004782:	d025      	beq.n	80047d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004784:	f7fe fdee 	bl	8003364 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	429a      	cmp	r2, r3
 8004792:	d302      	bcc.n	800479a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d11a      	bne.n	80047d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d013      	beq.n	80047d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ac:	f043 0220 	orr.w	r2, r3, #32
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e007      	b.n	80047e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d1c4      	bne.n	8004768 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047f4:	e02f      	b.n	8004856 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	68b9      	ldr	r1, [r7, #8]
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f838 	bl	8004870 <I2C_IsErrorOccurred>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e02d      	b.n	8004866 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480a:	f7fe fdab 	bl	8003364 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	429a      	cmp	r2, r3
 8004818:	d302      	bcc.n	8004820 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d11a      	bne.n	8004856 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	f003 0320 	and.w	r3, r3, #32
 800482a:	2b20      	cmp	r3, #32
 800482c:	d013      	beq.n	8004856 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004832:	f043 0220 	orr.w	r2, r3, #32
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e007      	b.n	8004866 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b20      	cmp	r3, #32
 8004862:	d1c8      	bne.n	80047f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08a      	sub	sp, #40	@ 0x28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800488a:	2300      	movs	r3, #0
 800488c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b00      	cmp	r3, #0
 800489a:	d068      	beq.n	800496e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2210      	movs	r2, #16
 80048a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048a4:	e049      	b.n	800493a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ac:	d045      	beq.n	800493a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048ae:	f7fe fd59 	bl	8003364 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d302      	bcc.n	80048c4 <I2C_IsErrorOccurred+0x54>
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d13a      	bne.n	800493a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048e6:	d121      	bne.n	800492c <I2C_IsErrorOccurred+0xbc>
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048ee:	d01d      	beq.n	800492c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80048f0:	7cfb      	ldrb	r3, [r7, #19]
 80048f2:	2b20      	cmp	r3, #32
 80048f4:	d01a      	beq.n	800492c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004904:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004906:	f7fe fd2d 	bl	8003364 <HAL_GetTick>
 800490a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800490c:	e00e      	b.n	800492c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800490e:	f7fe fd29 	bl	8003364 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b19      	cmp	r3, #25
 800491a:	d907      	bls.n	800492c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	f043 0320 	orr.w	r3, r3, #32
 8004922:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800492a:	e006      	b.n	800493a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b20      	cmp	r3, #32
 8004938:	d1e9      	bne.n	800490e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	2b20      	cmp	r3, #32
 8004946:	d003      	beq.n	8004950 <I2C_IsErrorOccurred+0xe0>
 8004948:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0aa      	beq.n	80048a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004950:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004954:	2b00      	cmp	r3, #0
 8004956:	d103      	bne.n	8004960 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2220      	movs	r2, #32
 800495e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	f043 0304 	orr.w	r3, r3, #4
 8004966:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00b      	beq.n	8004998 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004990:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00b      	beq.n	80049ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	f043 0308 	orr.w	r3, r3, #8
 80049a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00b      	beq.n	80049dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	f043 0302 	orr.w	r3, r3, #2
 80049ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80049dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d01c      	beq.n	8004a1e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f7ff fe3b 	bl	8004660 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6859      	ldr	r1, [r3, #4]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	4b0d      	ldr	r3, [pc, #52]	@ (8004a2c <I2C_IsErrorOccurred+0x1bc>)
 80049f6:	400b      	ands	r3, r1
 80049f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	431a      	orrs	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3728      	adds	r7, #40	@ 0x28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	fe00e800 	.word	0xfe00e800

08004a30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	607b      	str	r3, [r7, #4]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	817b      	strh	r3, [r7, #10]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a42:	897b      	ldrh	r3, [r7, #10]
 8004a44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a48:	7a7b      	ldrb	r3, [r7, #9]
 8004a4a:	041b      	lsls	r3, r3, #16
 8004a4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	0d5b      	lsrs	r3, r3, #21
 8004a6a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004a6e:	4b08      	ldr	r3, [pc, #32]	@ (8004a90 <I2C_TransferConfig+0x60>)
 8004a70:	430b      	orrs	r3, r1
 8004a72:	43db      	mvns	r3, r3
 8004a74:	ea02 0103 	and.w	r1, r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a82:	bf00      	nop
 8004a84:	371c      	adds	r7, #28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	03ff63ff 	.word	0x03ff63ff

08004a94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b20      	cmp	r3, #32
 8004aa8:	d138      	bne.n	8004b1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e032      	b.n	8004b1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2224      	movs	r2, #36	@ 0x24
 8004ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0201 	bic.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ae6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6819      	ldr	r1, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	e000      	b.n	8004b1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b1c:	2302      	movs	r3, #2
  }
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	d139      	bne.n	8004bb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e033      	b.n	8004bb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2224      	movs	r2, #36	@ 0x24
 8004b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0201 	bic.w	r2, r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	021b      	lsls	r3, r3, #8
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0201 	orr.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	e000      	b.n	8004bb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004bb4:	2302      	movs	r3, #2
  }
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
	...

08004bc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d141      	bne.n	8004c56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bd2:	4b4b      	ldr	r3, [pc, #300]	@ (8004d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004bda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bde:	d131      	bne.n	8004c44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004be0:	4b47      	ldr	r3, [pc, #284]	@ (8004d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004be6:	4a46      	ldr	r2, [pc, #280]	@ (8004d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bf0:	4b43      	ldr	r3, [pc, #268]	@ (8004d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004bf8:	4a41      	ldr	r2, [pc, #260]	@ (8004d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c00:	4b40      	ldr	r3, [pc, #256]	@ (8004d04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2232      	movs	r2, #50	@ 0x32
 8004c06:	fb02 f303 	mul.w	r3, r2, r3
 8004c0a:	4a3f      	ldr	r2, [pc, #252]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c10:	0c9b      	lsrs	r3, r3, #18
 8004c12:	3301      	adds	r3, #1
 8004c14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c16:	e002      	b.n	8004c1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c1e:	4b38      	ldr	r3, [pc, #224]	@ (8004d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c2a:	d102      	bne.n	8004c32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1f2      	bne.n	8004c18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c32:	4b33      	ldr	r3, [pc, #204]	@ (8004d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c3e:	d158      	bne.n	8004cf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e057      	b.n	8004cf4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c44:	4b2e      	ldr	r3, [pc, #184]	@ (8004d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c4a:	4a2d      	ldr	r2, [pc, #180]	@ (8004d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c54:	e04d      	b.n	8004cf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c5c:	d141      	bne.n	8004ce2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c5e:	4b28      	ldr	r3, [pc, #160]	@ (8004d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c6a:	d131      	bne.n	8004cd0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c6c:	4b24      	ldr	r3, [pc, #144]	@ (8004d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c72:	4a23      	ldr	r2, [pc, #140]	@ (8004d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c7c:	4b20      	ldr	r3, [pc, #128]	@ (8004d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c84:	4a1e      	ldr	r2, [pc, #120]	@ (8004d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004d04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2232      	movs	r2, #50	@ 0x32
 8004c92:	fb02 f303 	mul.w	r3, r2, r3
 8004c96:	4a1c      	ldr	r2, [pc, #112]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c98:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9c:	0c9b      	lsrs	r3, r3, #18
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ca2:	e002      	b.n	8004caa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004caa:	4b15      	ldr	r3, [pc, #84]	@ (8004d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb6:	d102      	bne.n	8004cbe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1f2      	bne.n	8004ca4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cbe:	4b10      	ldr	r3, [pc, #64]	@ (8004d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cca:	d112      	bne.n	8004cf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e011      	b.n	8004cf4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8004d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ce0:	e007      	b.n	8004cf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ce2:	4b07      	ldr	r3, [pc, #28]	@ (8004d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004cea:	4a05      	ldr	r2, [pc, #20]	@ (8004d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004cf0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	40007000 	.word	0x40007000
 8004d04:	200001cc 	.word	0x200001cc
 8004d08:	431bde83 	.word	0x431bde83

08004d0c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004d10:	4b05      	ldr	r3, [pc, #20]	@ (8004d28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	4a04      	ldr	r2, [pc, #16]	@ (8004d28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d1a:	6093      	str	r3, [r2, #8]
}
 8004d1c:	bf00      	nop
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40007000 	.word	0x40007000

08004d2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e2fe      	b.n	800533c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d075      	beq.n	8004e36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d4a:	4b97      	ldr	r3, [pc, #604]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 030c 	and.w	r3, r3, #12
 8004d52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d54:	4b94      	ldr	r3, [pc, #592]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f003 0303 	and.w	r3, r3, #3
 8004d5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	2b0c      	cmp	r3, #12
 8004d62:	d102      	bne.n	8004d6a <HAL_RCC_OscConfig+0x3e>
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d002      	beq.n	8004d70 <HAL_RCC_OscConfig+0x44>
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d10b      	bne.n	8004d88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d70:	4b8d      	ldr	r3, [pc, #564]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d05b      	beq.n	8004e34 <HAL_RCC_OscConfig+0x108>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d157      	bne.n	8004e34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e2d9      	b.n	800533c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d90:	d106      	bne.n	8004da0 <HAL_RCC_OscConfig+0x74>
 8004d92:	4b85      	ldr	r3, [pc, #532]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a84      	ldr	r2, [pc, #528]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	e01d      	b.n	8004ddc <HAL_RCC_OscConfig+0xb0>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004da8:	d10c      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x98>
 8004daa:	4b7f      	ldr	r3, [pc, #508]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a7e      	ldr	r2, [pc, #504]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004db0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	4b7c      	ldr	r3, [pc, #496]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a7b      	ldr	r2, [pc, #492]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	e00b      	b.n	8004ddc <HAL_RCC_OscConfig+0xb0>
 8004dc4:	4b78      	ldr	r3, [pc, #480]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a77      	ldr	r2, [pc, #476]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004dca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	4b75      	ldr	r3, [pc, #468]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a74      	ldr	r2, [pc, #464]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004dd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d013      	beq.n	8004e0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de4:	f7fe fabe 	bl	8003364 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dec:	f7fe faba 	bl	8003364 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b64      	cmp	r3, #100	@ 0x64
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e29e      	b.n	800533c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dfe:	4b6a      	ldr	r3, [pc, #424]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0f0      	beq.n	8004dec <HAL_RCC_OscConfig+0xc0>
 8004e0a:	e014      	b.n	8004e36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0c:	f7fe faaa 	bl	8003364 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e14:	f7fe faa6 	bl	8003364 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b64      	cmp	r3, #100	@ 0x64
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e28a      	b.n	800533c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e26:	4b60      	ldr	r3, [pc, #384]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f0      	bne.n	8004e14 <HAL_RCC_OscConfig+0xe8>
 8004e32:	e000      	b.n	8004e36 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d075      	beq.n	8004f2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e42:	4b59      	ldr	r3, [pc, #356]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 030c 	and.w	r3, r3, #12
 8004e4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e4c:	4b56      	ldr	r3, [pc, #344]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f003 0303 	and.w	r3, r3, #3
 8004e54:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	2b0c      	cmp	r3, #12
 8004e5a:	d102      	bne.n	8004e62 <HAL_RCC_OscConfig+0x136>
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d002      	beq.n	8004e68 <HAL_RCC_OscConfig+0x13c>
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d11f      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e68:	4b4f      	ldr	r3, [pc, #316]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <HAL_RCC_OscConfig+0x154>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e25d      	b.n	800533c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e80:	4b49      	ldr	r3, [pc, #292]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	061b      	lsls	r3, r3, #24
 8004e8e:	4946      	ldr	r1, [pc, #280]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e94:	4b45      	ldr	r3, [pc, #276]	@ (8004fac <HAL_RCC_OscConfig+0x280>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fd fbe1 	bl	8002660 <HAL_InitTick>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d043      	beq.n	8004f2c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e249      	b.n	800533c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d023      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eb0:	4b3d      	ldr	r3, [pc, #244]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a3c      	ldr	r2, [pc, #240]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebc:	f7fe fa52 	bl	8003364 <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ec4:	f7fe fa4e 	bl	8003364 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e232      	b.n	800533c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ed6:	4b34      	ldr	r3, [pc, #208]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0f0      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee2:	4b31      	ldr	r3, [pc, #196]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	061b      	lsls	r3, r3, #24
 8004ef0:	492d      	ldr	r1, [pc, #180]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	604b      	str	r3, [r1, #4]
 8004ef6:	e01a      	b.n	8004f2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a2a      	ldr	r2, [pc, #168]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004efe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f04:	f7fe fa2e 	bl	8003364 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f0c:	f7fe fa2a 	bl	8003364 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e20e      	b.n	800533c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f1e:	4b22      	ldr	r3, [pc, #136]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f0      	bne.n	8004f0c <HAL_RCC_OscConfig+0x1e0>
 8004f2a:	e000      	b.n	8004f2e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d041      	beq.n	8004fbe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d01c      	beq.n	8004f7c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f42:	4b19      	ldr	r3, [pc, #100]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f48:	4a17      	ldr	r2, [pc, #92]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004f4a:	f043 0301 	orr.w	r3, r3, #1
 8004f4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f52:	f7fe fa07 	bl	8003364 <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f5a:	f7fe fa03 	bl	8003364 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e1e7      	b.n	800533c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0ef      	beq.n	8004f5a <HAL_RCC_OscConfig+0x22e>
 8004f7a:	e020      	b.n	8004fbe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f82:	4a09      	ldr	r2, [pc, #36]	@ (8004fa8 <HAL_RCC_OscConfig+0x27c>)
 8004f84:	f023 0301 	bic.w	r3, r3, #1
 8004f88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f8c:	f7fe f9ea 	bl	8003364 <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f92:	e00d      	b.n	8004fb0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f94:	f7fe f9e6 	bl	8003364 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d906      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e1ca      	b.n	800533c <HAL_RCC_OscConfig+0x610>
 8004fa6:	bf00      	nop
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	200001d0 	.word	0x200001d0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fb0:	4b8c      	ldr	r3, [pc, #560]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 8004fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1ea      	bne.n	8004f94 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 80a6 	beq.w	8005118 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fd0:	4b84      	ldr	r3, [pc, #528]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 8004fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x2b4>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <HAL_RCC_OscConfig+0x2b6>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00d      	beq.n	8005002 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fe6:	4b7f      	ldr	r3, [pc, #508]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 8004fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fea:	4a7e      	ldr	r2, [pc, #504]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 8004fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ff0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ff2:	4b7c      	ldr	r3, [pc, #496]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 8004ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ffe:	2301      	movs	r3, #1
 8005000:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005002:	4b79      	ldr	r3, [pc, #484]	@ (80051e8 <HAL_RCC_OscConfig+0x4bc>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d118      	bne.n	8005040 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800500e:	4b76      	ldr	r3, [pc, #472]	@ (80051e8 <HAL_RCC_OscConfig+0x4bc>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a75      	ldr	r2, [pc, #468]	@ (80051e8 <HAL_RCC_OscConfig+0x4bc>)
 8005014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800501a:	f7fe f9a3 	bl	8003364 <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005020:	e008      	b.n	8005034 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005022:	f7fe f99f 	bl	8003364 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e183      	b.n	800533c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005034:	4b6c      	ldr	r3, [pc, #432]	@ (80051e8 <HAL_RCC_OscConfig+0x4bc>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0f0      	beq.n	8005022 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d108      	bne.n	800505a <HAL_RCC_OscConfig+0x32e>
 8005048:	4b66      	ldr	r3, [pc, #408]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 800504a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800504e:	4a65      	ldr	r2, [pc, #404]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 8005050:	f043 0301 	orr.w	r3, r3, #1
 8005054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005058:	e024      	b.n	80050a4 <HAL_RCC_OscConfig+0x378>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	2b05      	cmp	r3, #5
 8005060:	d110      	bne.n	8005084 <HAL_RCC_OscConfig+0x358>
 8005062:	4b60      	ldr	r3, [pc, #384]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 8005064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005068:	4a5e      	ldr	r2, [pc, #376]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 800506a:	f043 0304 	orr.w	r3, r3, #4
 800506e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005072:	4b5c      	ldr	r3, [pc, #368]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 8005074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005078:	4a5a      	ldr	r2, [pc, #360]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005082:	e00f      	b.n	80050a4 <HAL_RCC_OscConfig+0x378>
 8005084:	4b57      	ldr	r3, [pc, #348]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 8005086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800508a:	4a56      	ldr	r2, [pc, #344]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 800508c:	f023 0301 	bic.w	r3, r3, #1
 8005090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005094:	4b53      	ldr	r3, [pc, #332]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 8005096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800509a:	4a52      	ldr	r2, [pc, #328]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 800509c:	f023 0304 	bic.w	r3, r3, #4
 80050a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d016      	beq.n	80050da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ac:	f7fe f95a 	bl	8003364 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050b2:	e00a      	b.n	80050ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b4:	f7fe f956 	bl	8003364 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e138      	b.n	800533c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ca:	4b46      	ldr	r3, [pc, #280]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 80050cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0ed      	beq.n	80050b4 <HAL_RCC_OscConfig+0x388>
 80050d8:	e015      	b.n	8005106 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050da:	f7fe f943 	bl	8003364 <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050e0:	e00a      	b.n	80050f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050e2:	f7fe f93f 	bl	8003364 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e121      	b.n	800533c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050f8:	4b3a      	ldr	r3, [pc, #232]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1ed      	bne.n	80050e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005106:	7ffb      	ldrb	r3, [r7, #31]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d105      	bne.n	8005118 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800510c:	4b35      	ldr	r3, [pc, #212]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 800510e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005110:	4a34      	ldr	r2, [pc, #208]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 8005112:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005116:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0320 	and.w	r3, r3, #32
 8005120:	2b00      	cmp	r3, #0
 8005122:	d03c      	beq.n	800519e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01c      	beq.n	8005166 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800512c:	4b2d      	ldr	r3, [pc, #180]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 800512e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005132:	4a2c      	ldr	r2, [pc, #176]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 8005134:	f043 0301 	orr.w	r3, r3, #1
 8005138:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800513c:	f7fe f912 	bl	8003364 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005144:	f7fe f90e 	bl	8003364 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e0f2      	b.n	800533c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005156:	4b23      	ldr	r3, [pc, #140]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 8005158:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0ef      	beq.n	8005144 <HAL_RCC_OscConfig+0x418>
 8005164:	e01b      	b.n	800519e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005166:	4b1f      	ldr	r3, [pc, #124]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 8005168:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800516c:	4a1d      	ldr	r2, [pc, #116]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 800516e:	f023 0301 	bic.w	r3, r3, #1
 8005172:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005176:	f7fe f8f5 	bl	8003364 <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800517c:	e008      	b.n	8005190 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800517e:	f7fe f8f1 	bl	8003364 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e0d5      	b.n	800533c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005190:	4b14      	ldr	r3, [pc, #80]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 8005192:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1ef      	bne.n	800517e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 80c9 	beq.w	800533a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051a8:	4b0e      	ldr	r3, [pc, #56]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f003 030c 	and.w	r3, r3, #12
 80051b0:	2b0c      	cmp	r3, #12
 80051b2:	f000 8083 	beq.w	80052bc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d15e      	bne.n	800527c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051be:	4b09      	ldr	r3, [pc, #36]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a08      	ldr	r2, [pc, #32]	@ (80051e4 <HAL_RCC_OscConfig+0x4b8>)
 80051c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ca:	f7fe f8cb 	bl	8003364 <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051d0:	e00c      	b.n	80051ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d2:	f7fe f8c7 	bl	8003364 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d905      	bls.n	80051ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e0ab      	b.n	800533c <HAL_RCC_OscConfig+0x610>
 80051e4:	40021000 	.word	0x40021000
 80051e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ec:	4b55      	ldr	r3, [pc, #340]	@ (8005344 <HAL_RCC_OscConfig+0x618>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1ec      	bne.n	80051d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051f8:	4b52      	ldr	r3, [pc, #328]	@ (8005344 <HAL_RCC_OscConfig+0x618>)
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	4b52      	ldr	r3, [pc, #328]	@ (8005348 <HAL_RCC_OscConfig+0x61c>)
 80051fe:	4013      	ands	r3, r2
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6a11      	ldr	r1, [r2, #32]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005208:	3a01      	subs	r2, #1
 800520a:	0112      	lsls	r2, r2, #4
 800520c:	4311      	orrs	r1, r2
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005212:	0212      	lsls	r2, r2, #8
 8005214:	4311      	orrs	r1, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800521a:	0852      	lsrs	r2, r2, #1
 800521c:	3a01      	subs	r2, #1
 800521e:	0552      	lsls	r2, r2, #21
 8005220:	4311      	orrs	r1, r2
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005226:	0852      	lsrs	r2, r2, #1
 8005228:	3a01      	subs	r2, #1
 800522a:	0652      	lsls	r2, r2, #25
 800522c:	4311      	orrs	r1, r2
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005232:	06d2      	lsls	r2, r2, #27
 8005234:	430a      	orrs	r2, r1
 8005236:	4943      	ldr	r1, [pc, #268]	@ (8005344 <HAL_RCC_OscConfig+0x618>)
 8005238:	4313      	orrs	r3, r2
 800523a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800523c:	4b41      	ldr	r3, [pc, #260]	@ (8005344 <HAL_RCC_OscConfig+0x618>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a40      	ldr	r2, [pc, #256]	@ (8005344 <HAL_RCC_OscConfig+0x618>)
 8005242:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005246:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005248:	4b3e      	ldr	r3, [pc, #248]	@ (8005344 <HAL_RCC_OscConfig+0x618>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	4a3d      	ldr	r2, [pc, #244]	@ (8005344 <HAL_RCC_OscConfig+0x618>)
 800524e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005252:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005254:	f7fe f886 	bl	8003364 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800525c:	f7fe f882 	bl	8003364 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e066      	b.n	800533c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800526e:	4b35      	ldr	r3, [pc, #212]	@ (8005344 <HAL_RCC_OscConfig+0x618>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0f0      	beq.n	800525c <HAL_RCC_OscConfig+0x530>
 800527a:	e05e      	b.n	800533a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800527c:	4b31      	ldr	r3, [pc, #196]	@ (8005344 <HAL_RCC_OscConfig+0x618>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a30      	ldr	r2, [pc, #192]	@ (8005344 <HAL_RCC_OscConfig+0x618>)
 8005282:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fe f86c 	bl	8003364 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005290:	f7fe f868 	bl	8003364 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e04c      	b.n	800533c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052a2:	4b28      	ldr	r3, [pc, #160]	@ (8005344 <HAL_RCC_OscConfig+0x618>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f0      	bne.n	8005290 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80052ae:	4b25      	ldr	r3, [pc, #148]	@ (8005344 <HAL_RCC_OscConfig+0x618>)
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	4924      	ldr	r1, [pc, #144]	@ (8005344 <HAL_RCC_OscConfig+0x618>)
 80052b4:	4b25      	ldr	r3, [pc, #148]	@ (800534c <HAL_RCC_OscConfig+0x620>)
 80052b6:	4013      	ands	r3, r2
 80052b8:	60cb      	str	r3, [r1, #12]
 80052ba:	e03e      	b.n	800533a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e039      	b.n	800533c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80052c8:	4b1e      	ldr	r3, [pc, #120]	@ (8005344 <HAL_RCC_OscConfig+0x618>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f003 0203 	and.w	r2, r3, #3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d12c      	bne.n	8005336 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e6:	3b01      	subs	r3, #1
 80052e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d123      	bne.n	8005336 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d11b      	bne.n	8005336 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005308:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800530a:	429a      	cmp	r2, r3
 800530c:	d113      	bne.n	8005336 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005318:	085b      	lsrs	r3, r3, #1
 800531a:	3b01      	subs	r3, #1
 800531c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800531e:	429a      	cmp	r2, r3
 8005320:	d109      	bne.n	8005336 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800532c:	085b      	lsrs	r3, r3, #1
 800532e:	3b01      	subs	r3, #1
 8005330:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005332:	429a      	cmp	r2, r3
 8005334:	d001      	beq.n	800533a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e000      	b.n	800533c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3720      	adds	r7, #32
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	40021000 	.word	0x40021000
 8005348:	019f800c 	.word	0x019f800c
 800534c:	feeefffc 	.word	0xfeeefffc

08005350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800535a:	2300      	movs	r3, #0
 800535c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e11e      	b.n	80055a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005368:	4b91      	ldr	r3, [pc, #580]	@ (80055b0 <HAL_RCC_ClockConfig+0x260>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 030f 	and.w	r3, r3, #15
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d910      	bls.n	8005398 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005376:	4b8e      	ldr	r3, [pc, #568]	@ (80055b0 <HAL_RCC_ClockConfig+0x260>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f023 020f 	bic.w	r2, r3, #15
 800537e:	498c      	ldr	r1, [pc, #560]	@ (80055b0 <HAL_RCC_ClockConfig+0x260>)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	4313      	orrs	r3, r2
 8005384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005386:	4b8a      	ldr	r3, [pc, #552]	@ (80055b0 <HAL_RCC_ClockConfig+0x260>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d001      	beq.n	8005398 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e106      	b.n	80055a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d073      	beq.n	800548c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d129      	bne.n	8005400 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053ac:	4b81      	ldr	r3, [pc, #516]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e0f4      	b.n	80055a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80053bc:	f000 f9ce 	bl	800575c <RCC_GetSysClockFreqFromPLLSource>
 80053c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	4a7c      	ldr	r2, [pc, #496]	@ (80055b8 <HAL_RCC_ClockConfig+0x268>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d93f      	bls.n	800544a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053ca:	4b7a      	ldr	r3, [pc, #488]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d033      	beq.n	800544a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d12f      	bne.n	800544a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053ea:	4b72      	ldr	r3, [pc, #456]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053f2:	4a70      	ldr	r2, [pc, #448]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 80053f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80053fa:	2380      	movs	r3, #128	@ 0x80
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	e024      	b.n	800544a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2b02      	cmp	r3, #2
 8005406:	d107      	bne.n	8005418 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005408:	4b6a      	ldr	r3, [pc, #424]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d109      	bne.n	8005428 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e0c6      	b.n	80055a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005418:	4b66      	ldr	r3, [pc, #408]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e0be      	b.n	80055a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005428:	f000 f8ce 	bl	80055c8 <HAL_RCC_GetSysClockFreq>
 800542c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	4a61      	ldr	r2, [pc, #388]	@ (80055b8 <HAL_RCC_ClockConfig+0x268>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d909      	bls.n	800544a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005436:	4b5f      	ldr	r3, [pc, #380]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800543e:	4a5d      	ldr	r2, [pc, #372]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 8005440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005444:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005446:	2380      	movs	r3, #128	@ 0x80
 8005448:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800544a:	4b5a      	ldr	r3, [pc, #360]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f023 0203 	bic.w	r2, r3, #3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	4957      	ldr	r1, [pc, #348]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 8005458:	4313      	orrs	r3, r2
 800545a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800545c:	f7fd ff82 	bl	8003364 <HAL_GetTick>
 8005460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005462:	e00a      	b.n	800547a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005464:	f7fd ff7e 	bl	8003364 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005472:	4293      	cmp	r3, r2
 8005474:	d901      	bls.n	800547a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e095      	b.n	80055a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800547a:	4b4e      	ldr	r3, [pc, #312]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 020c 	and.w	r2, r3, #12
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	429a      	cmp	r2, r3
 800548a:	d1eb      	bne.n	8005464 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d023      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d005      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054a4:	4b43      	ldr	r3, [pc, #268]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	4a42      	ldr	r2, [pc, #264]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 80054aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80054ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d007      	beq.n	80054cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80054bc:	4b3d      	ldr	r3, [pc, #244]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80054c4:	4a3b      	ldr	r2, [pc, #236]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 80054c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80054ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054cc:	4b39      	ldr	r3, [pc, #228]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	4936      	ldr	r1, [pc, #216]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	608b      	str	r3, [r1, #8]
 80054de:	e008      	b.n	80054f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	2b80      	cmp	r3, #128	@ 0x80
 80054e4:	d105      	bne.n	80054f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80054e6:	4b33      	ldr	r3, [pc, #204]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	4a32      	ldr	r2, [pc, #200]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 80054ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054f2:	4b2f      	ldr	r3, [pc, #188]	@ (80055b0 <HAL_RCC_ClockConfig+0x260>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d21d      	bcs.n	800553c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005500:	4b2b      	ldr	r3, [pc, #172]	@ (80055b0 <HAL_RCC_ClockConfig+0x260>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f023 020f 	bic.w	r2, r3, #15
 8005508:	4929      	ldr	r1, [pc, #164]	@ (80055b0 <HAL_RCC_ClockConfig+0x260>)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	4313      	orrs	r3, r2
 800550e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005510:	f7fd ff28 	bl	8003364 <HAL_GetTick>
 8005514:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005516:	e00a      	b.n	800552e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005518:	f7fd ff24 	bl	8003364 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005526:	4293      	cmp	r3, r2
 8005528:	d901      	bls.n	800552e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e03b      	b.n	80055a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800552e:	4b20      	ldr	r3, [pc, #128]	@ (80055b0 <HAL_RCC_ClockConfig+0x260>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 030f 	and.w	r3, r3, #15
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	d1ed      	bne.n	8005518 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b00      	cmp	r3, #0
 8005546:	d008      	beq.n	800555a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005548:	4b1a      	ldr	r3, [pc, #104]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	4917      	ldr	r1, [pc, #92]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 8005556:	4313      	orrs	r3, r2
 8005558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0308 	and.w	r3, r3, #8
 8005562:	2b00      	cmp	r3, #0
 8005564:	d009      	beq.n	800557a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005566:	4b13      	ldr	r3, [pc, #76]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	490f      	ldr	r1, [pc, #60]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 8005576:	4313      	orrs	r3, r2
 8005578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800557a:	f000 f825 	bl	80055c8 <HAL_RCC_GetSysClockFreq>
 800557e:	4602      	mov	r2, r0
 8005580:	4b0c      	ldr	r3, [pc, #48]	@ (80055b4 <HAL_RCC_ClockConfig+0x264>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	091b      	lsrs	r3, r3, #4
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	490c      	ldr	r1, [pc, #48]	@ (80055bc <HAL_RCC_ClockConfig+0x26c>)
 800558c:	5ccb      	ldrb	r3, [r1, r3]
 800558e:	f003 031f 	and.w	r3, r3, #31
 8005592:	fa22 f303 	lsr.w	r3, r2, r3
 8005596:	4a0a      	ldr	r2, [pc, #40]	@ (80055c0 <HAL_RCC_ClockConfig+0x270>)
 8005598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800559a:	4b0a      	ldr	r3, [pc, #40]	@ (80055c4 <HAL_RCC_ClockConfig+0x274>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fd f85e 	bl	8002660 <HAL_InitTick>
 80055a4:	4603      	mov	r3, r0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	40022000 	.word	0x40022000
 80055b4:	40021000 	.word	0x40021000
 80055b8:	04c4b400 	.word	0x04c4b400
 80055bc:	0800fb98 	.word	0x0800fb98
 80055c0:	200001cc 	.word	0x200001cc
 80055c4:	200001d0 	.word	0x200001d0

080055c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80055ce:	4b2c      	ldr	r3, [pc, #176]	@ (8005680 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 030c 	and.w	r3, r3, #12
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d102      	bne.n	80055e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055da:	4b2a      	ldr	r3, [pc, #168]	@ (8005684 <HAL_RCC_GetSysClockFreq+0xbc>)
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	e047      	b.n	8005670 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80055e0:	4b27      	ldr	r3, [pc, #156]	@ (8005680 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 030c 	and.w	r3, r3, #12
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d102      	bne.n	80055f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055ec:	4b25      	ldr	r3, [pc, #148]	@ (8005684 <HAL_RCC_GetSysClockFreq+0xbc>)
 80055ee:	613b      	str	r3, [r7, #16]
 80055f0:	e03e      	b.n	8005670 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80055f2:	4b23      	ldr	r3, [pc, #140]	@ (8005680 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 030c 	and.w	r3, r3, #12
 80055fa:	2b0c      	cmp	r3, #12
 80055fc:	d136      	bne.n	800566c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055fe:	4b20      	ldr	r3, [pc, #128]	@ (8005680 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005608:	4b1d      	ldr	r3, [pc, #116]	@ (8005680 <HAL_RCC_GetSysClockFreq+0xb8>)
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	091b      	lsrs	r3, r3, #4
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	3301      	adds	r3, #1
 8005614:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b03      	cmp	r3, #3
 800561a:	d10c      	bne.n	8005636 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800561c:	4a19      	ldr	r2, [pc, #100]	@ (8005684 <HAL_RCC_GetSysClockFreq+0xbc>)
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	fbb2 f3f3 	udiv	r3, r2, r3
 8005624:	4a16      	ldr	r2, [pc, #88]	@ (8005680 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005626:	68d2      	ldr	r2, [r2, #12]
 8005628:	0a12      	lsrs	r2, r2, #8
 800562a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800562e:	fb02 f303 	mul.w	r3, r2, r3
 8005632:	617b      	str	r3, [r7, #20]
      break;
 8005634:	e00c      	b.n	8005650 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005636:	4a13      	ldr	r2, [pc, #76]	@ (8005684 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	fbb2 f3f3 	udiv	r3, r2, r3
 800563e:	4a10      	ldr	r2, [pc, #64]	@ (8005680 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005640:	68d2      	ldr	r2, [r2, #12]
 8005642:	0a12      	lsrs	r2, r2, #8
 8005644:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005648:	fb02 f303 	mul.w	r3, r2, r3
 800564c:	617b      	str	r3, [r7, #20]
      break;
 800564e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005650:	4b0b      	ldr	r3, [pc, #44]	@ (8005680 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	0e5b      	lsrs	r3, r3, #25
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	3301      	adds	r3, #1
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	fbb2 f3f3 	udiv	r3, r2, r3
 8005668:	613b      	str	r3, [r7, #16]
 800566a:	e001      	b.n	8005670 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005670:	693b      	ldr	r3, [r7, #16]
}
 8005672:	4618      	mov	r0, r3
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40021000 	.word	0x40021000
 8005684:	00f42400 	.word	0x00f42400

08005688 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800568c:	4b03      	ldr	r3, [pc, #12]	@ (800569c <HAL_RCC_GetHCLKFreq+0x14>)
 800568e:	681b      	ldr	r3, [r3, #0]
}
 8005690:	4618      	mov	r0, r3
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	200001cc 	.word	0x200001cc

080056a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80056a4:	f7ff fff0 	bl	8005688 <HAL_RCC_GetHCLKFreq>
 80056a8:	4602      	mov	r2, r0
 80056aa:	4b06      	ldr	r3, [pc, #24]	@ (80056c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	0a1b      	lsrs	r3, r3, #8
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	4904      	ldr	r1, [pc, #16]	@ (80056c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80056b6:	5ccb      	ldrb	r3, [r1, r3]
 80056b8:	f003 031f 	and.w	r3, r3, #31
 80056bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40021000 	.word	0x40021000
 80056c8:	0800fba8 	.word	0x0800fba8

080056cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056d0:	f7ff ffda 	bl	8005688 <HAL_RCC_GetHCLKFreq>
 80056d4:	4602      	mov	r2, r0
 80056d6:	4b06      	ldr	r3, [pc, #24]	@ (80056f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	0adb      	lsrs	r3, r3, #11
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	4904      	ldr	r1, [pc, #16]	@ (80056f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056e2:	5ccb      	ldrb	r3, [r1, r3]
 80056e4:	f003 031f 	and.w	r3, r3, #31
 80056e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40021000 	.word	0x40021000
 80056f4:	0800fba8 	.word	0x0800fba8

080056f8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	220f      	movs	r2, #15
 8005706:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005708:	4b12      	ldr	r3, [pc, #72]	@ (8005754 <HAL_RCC_GetClockConfig+0x5c>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f003 0203 	and.w	r2, r3, #3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005714:	4b0f      	ldr	r3, [pc, #60]	@ (8005754 <HAL_RCC_GetClockConfig+0x5c>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005720:	4b0c      	ldr	r3, [pc, #48]	@ (8005754 <HAL_RCC_GetClockConfig+0x5c>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800572c:	4b09      	ldr	r3, [pc, #36]	@ (8005754 <HAL_RCC_GetClockConfig+0x5c>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	08db      	lsrs	r3, r3, #3
 8005732:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800573a:	4b07      	ldr	r3, [pc, #28]	@ (8005758 <HAL_RCC_GetClockConfig+0x60>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 020f 	and.w	r2, r3, #15
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	601a      	str	r2, [r3, #0]
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40021000 	.word	0x40021000
 8005758:	40022000 	.word	0x40022000

0800575c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005762:	4b1e      	ldr	r3, [pc, #120]	@ (80057dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800576c:	4b1b      	ldr	r3, [pc, #108]	@ (80057dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	091b      	lsrs	r3, r3, #4
 8005772:	f003 030f 	and.w	r3, r3, #15
 8005776:	3301      	adds	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	2b03      	cmp	r3, #3
 800577e:	d10c      	bne.n	800579a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005780:	4a17      	ldr	r2, [pc, #92]	@ (80057e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	fbb2 f3f3 	udiv	r3, r2, r3
 8005788:	4a14      	ldr	r2, [pc, #80]	@ (80057dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800578a:	68d2      	ldr	r2, [r2, #12]
 800578c:	0a12      	lsrs	r2, r2, #8
 800578e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005792:	fb02 f303 	mul.w	r3, r2, r3
 8005796:	617b      	str	r3, [r7, #20]
    break;
 8005798:	e00c      	b.n	80057b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800579a:	4a11      	ldr	r2, [pc, #68]	@ (80057e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a2:	4a0e      	ldr	r2, [pc, #56]	@ (80057dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057a4:	68d2      	ldr	r2, [r2, #12]
 80057a6:	0a12      	lsrs	r2, r2, #8
 80057a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057ac:	fb02 f303 	mul.w	r3, r2, r3
 80057b0:	617b      	str	r3, [r7, #20]
    break;
 80057b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057b4:	4b09      	ldr	r3, [pc, #36]	@ (80057dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	0e5b      	lsrs	r3, r3, #25
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	3301      	adds	r3, #1
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80057ce:	687b      	ldr	r3, [r7, #4]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	371c      	adds	r7, #28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	40021000 	.word	0x40021000
 80057e0:	00f42400 	.word	0x00f42400

080057e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057ec:	2300      	movs	r3, #0
 80057ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057f0:	2300      	movs	r3, #0
 80057f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 8098 	beq.w	8005932 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005802:	2300      	movs	r3, #0
 8005804:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005806:	4b43      	ldr	r3, [pc, #268]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800580a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10d      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005812:	4b40      	ldr	r3, [pc, #256]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005816:	4a3f      	ldr	r2, [pc, #252]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800581c:	6593      	str	r3, [r2, #88]	@ 0x58
 800581e:	4b3d      	ldr	r3, [pc, #244]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005826:	60bb      	str	r3, [r7, #8]
 8005828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800582a:	2301      	movs	r3, #1
 800582c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800582e:	4b3a      	ldr	r3, [pc, #232]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a39      	ldr	r2, [pc, #228]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005838:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800583a:	f7fd fd93 	bl	8003364 <HAL_GetTick>
 800583e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005840:	e009      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005842:	f7fd fd8f 	bl	8003364 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b02      	cmp	r3, #2
 800584e:	d902      	bls.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	74fb      	strb	r3, [r7, #19]
        break;
 8005854:	e005      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005856:	4b30      	ldr	r3, [pc, #192]	@ (8005918 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0ef      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005862:	7cfb      	ldrb	r3, [r7, #19]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d159      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005868:	4b2a      	ldr	r3, [pc, #168]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800586a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800586e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005872:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d01e      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	429a      	cmp	r2, r3
 8005882:	d019      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005884:	4b23      	ldr	r3, [pc, #140]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800588a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800588e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005890:	4b20      	ldr	r3, [pc, #128]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005896:	4a1f      	ldr	r2, [pc, #124]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800589c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058b0:	4a18      	ldr	r2, [pc, #96]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d016      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c2:	f7fd fd4f 	bl	8003364 <HAL_GetTick>
 80058c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058c8:	e00b      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ca:	f7fd fd4b 	bl	8003364 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058d8:	4293      	cmp	r3, r2
 80058da:	d902      	bls.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	74fb      	strb	r3, [r7, #19]
            break;
 80058e0:	e006      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0ec      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80058f0:	7cfb      	ldrb	r3, [r7, #19]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10b      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058f6:	4b07      	ldr	r3, [pc, #28]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005904:	4903      	ldr	r1, [pc, #12]	@ (8005914 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800590c:	e008      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800590e:	7cfb      	ldrb	r3, [r7, #19]
 8005910:	74bb      	strb	r3, [r7, #18]
 8005912:	e005      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005914:	40021000 	.word	0x40021000
 8005918:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591c:	7cfb      	ldrb	r3, [r7, #19]
 800591e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005920:	7c7b      	ldrb	r3, [r7, #17]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d105      	bne.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005926:	4ba6      	ldr	r3, [pc, #664]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800592a:	4aa5      	ldr	r2, [pc, #660]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800592c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005930:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800593e:	4ba0      	ldr	r3, [pc, #640]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005944:	f023 0203 	bic.w	r2, r3, #3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	499c      	ldr	r1, [pc, #624]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005960:	4b97      	ldr	r3, [pc, #604]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005966:	f023 020c 	bic.w	r2, r3, #12
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	4994      	ldr	r1, [pc, #592]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005982:	4b8f      	ldr	r3, [pc, #572]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005988:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	498b      	ldr	r1, [pc, #556]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0308 	and.w	r3, r3, #8
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059a4:	4b86      	ldr	r3, [pc, #536]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	4983      	ldr	r1, [pc, #524]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059c6:	4b7e      	ldr	r3, [pc, #504]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059cc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	497a      	ldr	r1, [pc, #488]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059e8:	4b75      	ldr	r3, [pc, #468]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	4972      	ldr	r1, [pc, #456]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a0a:	4b6d      	ldr	r3, [pc, #436]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a10:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	4969      	ldr	r1, [pc, #420]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a2c:	4b64      	ldr	r3, [pc, #400]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a32:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	4961      	ldr	r1, [pc, #388]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a4e:	4b5c      	ldr	r3, [pc, #368]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5c:	4958      	ldr	r1, [pc, #352]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d015      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a70:	4b53      	ldr	r3, [pc, #332]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7e:	4950      	ldr	r1, [pc, #320]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a8e:	d105      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a90:	4b4b      	ldr	r3, [pc, #300]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	4a4a      	ldr	r2, [pc, #296]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a9a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d015      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005aa8:	4b45      	ldr	r3, [pc, #276]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab6:	4942      	ldr	r1, [pc, #264]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ac6:	d105      	bne.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ac8:	4b3d      	ldr	r3, [pc, #244]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	4a3c      	ldr	r2, [pc, #240]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ace:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ad2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d015      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ae0:	4b37      	ldr	r3, [pc, #220]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aee:	4934      	ldr	r1, [pc, #208]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005afe:	d105      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b00:	4b2f      	ldr	r3, [pc, #188]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	4a2e      	ldr	r2, [pc, #184]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b0a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d015      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b18:	4b29      	ldr	r3, [pc, #164]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b26:	4926      	ldr	r1, [pc, #152]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b36:	d105      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b38:	4b21      	ldr	r3, [pc, #132]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	4a20      	ldr	r2, [pc, #128]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b42:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d015      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b50:	4b1b      	ldr	r3, [pc, #108]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5e:	4918      	ldr	r1, [pc, #96]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b6e:	d105      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b70:	4b13      	ldr	r3, [pc, #76]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	4a12      	ldr	r2, [pc, #72]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d015      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b88:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b96:	490a      	ldr	r1, [pc, #40]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ba6:	d105      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ba8:	4b05      	ldr	r3, [pc, #20]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	4a04      	ldr	r2, [pc, #16]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bb2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005bb4:	7cbb      	ldrb	r3, [r7, #18]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	40021000 	.word	0x40021000

08005bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e049      	b.n	8005c6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d106      	bne.n	8005bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7fd f8ba 	bl	8002d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	3304      	adds	r3, #4
 8005c00:	4619      	mov	r1, r3
 8005c02:	4610      	mov	r0, r2
 8005c04:	f000 fec4 	bl	8006990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d001      	beq.n	8005c8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e04a      	b.n	8005d22 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0201 	orr.w	r2, r2, #1
 8005ca2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a21      	ldr	r2, [pc, #132]	@ (8005d30 <HAL_TIM_Base_Start_IT+0xbc>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d018      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x6c>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cb6:	d013      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x6c>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a1d      	ldr	r2, [pc, #116]	@ (8005d34 <HAL_TIM_Base_Start_IT+0xc0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00e      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x6c>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a1c      	ldr	r2, [pc, #112]	@ (8005d38 <HAL_TIM_Base_Start_IT+0xc4>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d009      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x6c>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8005d3c <HAL_TIM_Base_Start_IT+0xc8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d004      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x6c>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a19      	ldr	r2, [pc, #100]	@ (8005d40 <HAL_TIM_Base_Start_IT+0xcc>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d115      	bne.n	8005d0c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	4b17      	ldr	r3, [pc, #92]	@ (8005d44 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ce8:	4013      	ands	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b06      	cmp	r3, #6
 8005cf0:	d015      	beq.n	8005d1e <HAL_TIM_Base_Start_IT+0xaa>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cf8:	d011      	beq.n	8005d1e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f042 0201 	orr.w	r2, r2, #1
 8005d08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d0a:	e008      	b.n	8005d1e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	e000      	b.n	8005d20 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40000400 	.word	0x40000400
 8005d38:	40000800 	.word	0x40000800
 8005d3c:	40013400 	.word	0x40013400
 8005d40:	40014000 	.word	0x40014000
 8005d44:	00010007 	.word	0x00010007

08005d48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e049      	b.n	8005dee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d106      	bne.n	8005d74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f841 	bl	8005df6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2202      	movs	r2, #2
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3304      	adds	r3, #4
 8005d84:	4619      	mov	r1, r3
 8005d86:	4610      	mov	r0, r2
 8005d88:	f000 fe02 	bl	8006990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005dfe:	bf00      	nop
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
	...

08005e0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d109      	bne.n	8005e30 <HAL_TIM_PWM_Start+0x24>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	bf14      	ite	ne
 8005e28:	2301      	movne	r3, #1
 8005e2a:	2300      	moveq	r3, #0
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	e03c      	b.n	8005eaa <HAL_TIM_PWM_Start+0x9e>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d109      	bne.n	8005e4a <HAL_TIM_PWM_Start+0x3e>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	bf14      	ite	ne
 8005e42:	2301      	movne	r3, #1
 8005e44:	2300      	moveq	r3, #0
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	e02f      	b.n	8005eaa <HAL_TIM_PWM_Start+0x9e>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d109      	bne.n	8005e64 <HAL_TIM_PWM_Start+0x58>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	bf14      	ite	ne
 8005e5c:	2301      	movne	r3, #1
 8005e5e:	2300      	moveq	r3, #0
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	e022      	b.n	8005eaa <HAL_TIM_PWM_Start+0x9e>
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2b0c      	cmp	r3, #12
 8005e68:	d109      	bne.n	8005e7e <HAL_TIM_PWM_Start+0x72>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	bf14      	ite	ne
 8005e76:	2301      	movne	r3, #1
 8005e78:	2300      	moveq	r3, #0
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	e015      	b.n	8005eaa <HAL_TIM_PWM_Start+0x9e>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b10      	cmp	r3, #16
 8005e82:	d109      	bne.n	8005e98 <HAL_TIM_PWM_Start+0x8c>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	bf14      	ite	ne
 8005e90:	2301      	movne	r3, #1
 8005e92:	2300      	moveq	r3, #0
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	e008      	b.n	8005eaa <HAL_TIM_PWM_Start+0x9e>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	bf14      	ite	ne
 8005ea4:	2301      	movne	r3, #1
 8005ea6:	2300      	moveq	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e097      	b.n	8005fe2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d104      	bne.n	8005ec2 <HAL_TIM_PWM_Start+0xb6>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ec0:	e023      	b.n	8005f0a <HAL_TIM_PWM_Start+0xfe>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d104      	bne.n	8005ed2 <HAL_TIM_PWM_Start+0xc6>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ed0:	e01b      	b.n	8005f0a <HAL_TIM_PWM_Start+0xfe>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d104      	bne.n	8005ee2 <HAL_TIM_PWM_Start+0xd6>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ee0:	e013      	b.n	8005f0a <HAL_TIM_PWM_Start+0xfe>
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b0c      	cmp	r3, #12
 8005ee6:	d104      	bne.n	8005ef2 <HAL_TIM_PWM_Start+0xe6>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ef0:	e00b      	b.n	8005f0a <HAL_TIM_PWM_Start+0xfe>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b10      	cmp	r3, #16
 8005ef6:	d104      	bne.n	8005f02 <HAL_TIM_PWM_Start+0xf6>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f00:	e003      	b.n	8005f0a <HAL_TIM_PWM_Start+0xfe>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2202      	movs	r2, #2
 8005f06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	6839      	ldr	r1, [r7, #0]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f001 f96a 	bl	80071ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a33      	ldr	r2, [pc, #204]	@ (8005fec <HAL_TIM_PWM_Start+0x1e0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d013      	beq.n	8005f4a <HAL_TIM_PWM_Start+0x13e>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a32      	ldr	r2, [pc, #200]	@ (8005ff0 <HAL_TIM_PWM_Start+0x1e4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d00e      	beq.n	8005f4a <HAL_TIM_PWM_Start+0x13e>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a30      	ldr	r2, [pc, #192]	@ (8005ff4 <HAL_TIM_PWM_Start+0x1e8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d009      	beq.n	8005f4a <HAL_TIM_PWM_Start+0x13e>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8005ff8 <HAL_TIM_PWM_Start+0x1ec>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d004      	beq.n	8005f4a <HAL_TIM_PWM_Start+0x13e>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a2d      	ldr	r2, [pc, #180]	@ (8005ffc <HAL_TIM_PWM_Start+0x1f0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d101      	bne.n	8005f4e <HAL_TIM_PWM_Start+0x142>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e000      	b.n	8005f50 <HAL_TIM_PWM_Start+0x144>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d007      	beq.n	8005f64 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f62:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a20      	ldr	r2, [pc, #128]	@ (8005fec <HAL_TIM_PWM_Start+0x1e0>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d018      	beq.n	8005fa0 <HAL_TIM_PWM_Start+0x194>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f76:	d013      	beq.n	8005fa0 <HAL_TIM_PWM_Start+0x194>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a20      	ldr	r2, [pc, #128]	@ (8006000 <HAL_TIM_PWM_Start+0x1f4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d00e      	beq.n	8005fa0 <HAL_TIM_PWM_Start+0x194>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a1f      	ldr	r2, [pc, #124]	@ (8006004 <HAL_TIM_PWM_Start+0x1f8>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d009      	beq.n	8005fa0 <HAL_TIM_PWM_Start+0x194>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a17      	ldr	r2, [pc, #92]	@ (8005ff0 <HAL_TIM_PWM_Start+0x1e4>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d004      	beq.n	8005fa0 <HAL_TIM_PWM_Start+0x194>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a16      	ldr	r2, [pc, #88]	@ (8005ff4 <HAL_TIM_PWM_Start+0x1e8>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d115      	bne.n	8005fcc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689a      	ldr	r2, [r3, #8]
 8005fa6:	4b18      	ldr	r3, [pc, #96]	@ (8006008 <HAL_TIM_PWM_Start+0x1fc>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2b06      	cmp	r3, #6
 8005fb0:	d015      	beq.n	8005fde <HAL_TIM_PWM_Start+0x1d2>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fb8:	d011      	beq.n	8005fde <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f042 0201 	orr.w	r2, r2, #1
 8005fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fca:	e008      	b.n	8005fde <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0201 	orr.w	r2, r2, #1
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	e000      	b.n	8005fe0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	40012c00 	.word	0x40012c00
 8005ff0:	40013400 	.word	0x40013400
 8005ff4:	40014000 	.word	0x40014000
 8005ff8:	40014400 	.word	0x40014400
 8005ffc:	40014800 	.word	0x40014800
 8006000:	40000400 	.word	0x40000400
 8006004:	40000800 	.word	0x40000800
 8006008:	00010007 	.word	0x00010007

0800600c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2200      	movs	r2, #0
 800601c:	6839      	ldr	r1, [r7, #0]
 800601e:	4618      	mov	r0, r3
 8006020:	f001 f8e4 	bl	80071ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a3e      	ldr	r2, [pc, #248]	@ (8006124 <HAL_TIM_PWM_Stop+0x118>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d013      	beq.n	8006056 <HAL_TIM_PWM_Stop+0x4a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a3d      	ldr	r2, [pc, #244]	@ (8006128 <HAL_TIM_PWM_Stop+0x11c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d00e      	beq.n	8006056 <HAL_TIM_PWM_Stop+0x4a>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a3b      	ldr	r2, [pc, #236]	@ (800612c <HAL_TIM_PWM_Stop+0x120>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d009      	beq.n	8006056 <HAL_TIM_PWM_Stop+0x4a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a3a      	ldr	r2, [pc, #232]	@ (8006130 <HAL_TIM_PWM_Stop+0x124>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d004      	beq.n	8006056 <HAL_TIM_PWM_Stop+0x4a>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a38      	ldr	r2, [pc, #224]	@ (8006134 <HAL_TIM_PWM_Stop+0x128>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d101      	bne.n	800605a <HAL_TIM_PWM_Stop+0x4e>
 8006056:	2301      	movs	r3, #1
 8006058:	e000      	b.n	800605c <HAL_TIM_PWM_Stop+0x50>
 800605a:	2300      	movs	r3, #0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d017      	beq.n	8006090 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6a1a      	ldr	r2, [r3, #32]
 8006066:	f241 1311 	movw	r3, #4369	@ 0x1111
 800606a:	4013      	ands	r3, r2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10f      	bne.n	8006090 <HAL_TIM_PWM_Stop+0x84>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6a1a      	ldr	r2, [r3, #32]
 8006076:	f244 4344 	movw	r3, #17476	@ 0x4444
 800607a:	4013      	ands	r3, r2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d107      	bne.n	8006090 <HAL_TIM_PWM_Stop+0x84>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800608e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6a1a      	ldr	r2, [r3, #32]
 8006096:	f241 1311 	movw	r3, #4369	@ 0x1111
 800609a:	4013      	ands	r3, r2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10f      	bne.n	80060c0 <HAL_TIM_PWM_Stop+0xb4>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6a1a      	ldr	r2, [r3, #32]
 80060a6:	f244 4344 	movw	r3, #17476	@ 0x4444
 80060aa:	4013      	ands	r3, r2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d107      	bne.n	80060c0 <HAL_TIM_PWM_Stop+0xb4>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0201 	bic.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d104      	bne.n	80060d0 <HAL_TIM_PWM_Stop+0xc4>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060ce:	e023      	b.n	8006118 <HAL_TIM_PWM_Stop+0x10c>
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d104      	bne.n	80060e0 <HAL_TIM_PWM_Stop+0xd4>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060de:	e01b      	b.n	8006118 <HAL_TIM_PWM_Stop+0x10c>
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	d104      	bne.n	80060f0 <HAL_TIM_PWM_Stop+0xe4>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060ee:	e013      	b.n	8006118 <HAL_TIM_PWM_Stop+0x10c>
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	2b0c      	cmp	r3, #12
 80060f4:	d104      	bne.n	8006100 <HAL_TIM_PWM_Stop+0xf4>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060fe:	e00b      	b.n	8006118 <HAL_TIM_PWM_Stop+0x10c>
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2b10      	cmp	r3, #16
 8006104:	d104      	bne.n	8006110 <HAL_TIM_PWM_Stop+0x104>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800610e:	e003      	b.n	8006118 <HAL_TIM_PWM_Stop+0x10c>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	40012c00 	.word	0x40012c00
 8006128:	40013400 	.word	0x40013400
 800612c:	40014000 	.word	0x40014000
 8006130:	40014400 	.word	0x40014400
 8006134:	40014800 	.word	0x40014800

08006138 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e097      	b.n	800627c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	d106      	bne.n	8006166 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7fc fe33 	bl	8002dcc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2202      	movs	r2, #2
 800616a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	6812      	ldr	r2, [r2, #0]
 8006178:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800617c:	f023 0307 	bic.w	r3, r3, #7
 8006180:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	3304      	adds	r3, #4
 800618a:	4619      	mov	r1, r3
 800618c:	4610      	mov	r0, r2
 800618e:	f000 fbff 	bl	8006990 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ba:	f023 0303 	bic.w	r3, r3, #3
 80061be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	021b      	lsls	r3, r3, #8
 80061ca:	4313      	orrs	r3, r2
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80061d8:	f023 030c 	bic.w	r3, r3, #12
 80061dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	021b      	lsls	r3, r3, #8
 80061f4:	4313      	orrs	r3, r2
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	011a      	lsls	r2, r3, #4
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	031b      	lsls	r3, r3, #12
 8006208:	4313      	orrs	r3, r2
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	4313      	orrs	r3, r2
 800620e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006216:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800621e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	011b      	lsls	r3, r3, #4
 800622a:	4313      	orrs	r3, r2
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4313      	orrs	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d020      	beq.n	80062e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01b      	beq.n	80062e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f06f 0202 	mvn.w	r2, #2
 80062b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	f003 0303 	and.w	r3, r3, #3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fb40 	bl	8006954 <HAL_TIM_IC_CaptureCallback>
 80062d4:	e005      	b.n	80062e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fb32 	bl	8006940 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fb43 	bl	8006968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f003 0304 	and.w	r3, r3, #4
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d020      	beq.n	8006334 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d01b      	beq.n	8006334 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f06f 0204 	mvn.w	r2, #4
 8006304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2202      	movs	r2, #2
 800630a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fb1a 	bl	8006954 <HAL_TIM_IC_CaptureCallback>
 8006320:	e005      	b.n	800632e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fb0c 	bl	8006940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fb1d 	bl	8006968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f003 0308 	and.w	r3, r3, #8
 800633a:	2b00      	cmp	r3, #0
 800633c:	d020      	beq.n	8006380 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f003 0308 	and.w	r3, r3, #8
 8006344:	2b00      	cmp	r3, #0
 8006346:	d01b      	beq.n	8006380 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f06f 0208 	mvn.w	r2, #8
 8006350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2204      	movs	r2, #4
 8006356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	f003 0303 	and.w	r3, r3, #3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 faf4 	bl	8006954 <HAL_TIM_IC_CaptureCallback>
 800636c:	e005      	b.n	800637a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fae6 	bl	8006940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 faf7 	bl	8006968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f003 0310 	and.w	r3, r3, #16
 8006386:	2b00      	cmp	r3, #0
 8006388:	d020      	beq.n	80063cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f003 0310 	and.w	r3, r3, #16
 8006390:	2b00      	cmp	r3, #0
 8006392:	d01b      	beq.n	80063cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f06f 0210 	mvn.w	r2, #16
 800639c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2208      	movs	r2, #8
 80063a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 face 	bl	8006954 <HAL_TIM_IC_CaptureCallback>
 80063b8:	e005      	b.n	80063c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fac0 	bl	8006940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fad1 	bl	8006968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00c      	beq.n	80063f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d007      	beq.n	80063f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f06f 0201 	mvn.w	r2, #1
 80063e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7fc f8f6 	bl	80025dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d104      	bne.n	8006404 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00c      	beq.n	800641e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800640a:	2b00      	cmp	r3, #0
 800640c:	d007      	beq.n	800641e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f001 f937 	bl	800768c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00c      	beq.n	8006442 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800642e:	2b00      	cmp	r3, #0
 8006430:	d007      	beq.n	8006442 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800643a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 f92f 	bl	80076a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00c      	beq.n	8006466 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800645e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fa8b 	bl	800697c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f003 0320 	and.w	r3, r3, #32
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00c      	beq.n	800648a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f003 0320 	and.w	r3, r3, #32
 8006476:	2b00      	cmp	r3, #0
 8006478:	d007      	beq.n	800648a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f06f 0220 	mvn.w	r2, #32
 8006482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f001 f8f7 	bl	8007678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00c      	beq.n	80064ae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d007      	beq.n	80064ae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80064a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f001 f903 	bl	80076b4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00c      	beq.n	80064d2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d007      	beq.n	80064d2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80064ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f001 f8fb 	bl	80076c8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00c      	beq.n	80064f6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d007      	beq.n	80064f6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80064ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f001 f8f3 	bl	80076dc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00c      	beq.n	800651a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d007      	beq.n	800651a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f001 f8eb 	bl	80076f0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800651a:	bf00      	nop
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
	...

08006524 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006530:	2300      	movs	r3, #0
 8006532:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800653e:	2302      	movs	r3, #2
 8006540:	e0ff      	b.n	8006742 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b14      	cmp	r3, #20
 800654e:	f200 80f0 	bhi.w	8006732 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006552:	a201      	add	r2, pc, #4	@ (adr r2, 8006558 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006558:	080065ad 	.word	0x080065ad
 800655c:	08006733 	.word	0x08006733
 8006560:	08006733 	.word	0x08006733
 8006564:	08006733 	.word	0x08006733
 8006568:	080065ed 	.word	0x080065ed
 800656c:	08006733 	.word	0x08006733
 8006570:	08006733 	.word	0x08006733
 8006574:	08006733 	.word	0x08006733
 8006578:	0800662f 	.word	0x0800662f
 800657c:	08006733 	.word	0x08006733
 8006580:	08006733 	.word	0x08006733
 8006584:	08006733 	.word	0x08006733
 8006588:	0800666f 	.word	0x0800666f
 800658c:	08006733 	.word	0x08006733
 8006590:	08006733 	.word	0x08006733
 8006594:	08006733 	.word	0x08006733
 8006598:	080066b1 	.word	0x080066b1
 800659c:	08006733 	.word	0x08006733
 80065a0:	08006733 	.word	0x08006733
 80065a4:	08006733 	.word	0x08006733
 80065a8:	080066f1 	.word	0x080066f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68b9      	ldr	r1, [r7, #8]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 fa88 	bl	8006ac8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699a      	ldr	r2, [r3, #24]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f042 0208 	orr.w	r2, r2, #8
 80065c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	699a      	ldr	r2, [r3, #24]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0204 	bic.w	r2, r2, #4
 80065d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6999      	ldr	r1, [r3, #24]
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	691a      	ldr	r2, [r3, #16]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	619a      	str	r2, [r3, #24]
      break;
 80065ea:	e0a5      	b.n	8006738 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68b9      	ldr	r1, [r7, #8]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 faf8 	bl	8006be8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	699a      	ldr	r2, [r3, #24]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	699a      	ldr	r2, [r3, #24]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6999      	ldr	r1, [r3, #24]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	021a      	lsls	r2, r3, #8
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	619a      	str	r2, [r3, #24]
      break;
 800662c:	e084      	b.n	8006738 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68b9      	ldr	r1, [r7, #8]
 8006634:	4618      	mov	r0, r3
 8006636:	f000 fb61 	bl	8006cfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	69da      	ldr	r2, [r3, #28]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f042 0208 	orr.w	r2, r2, #8
 8006648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	69da      	ldr	r2, [r3, #28]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0204 	bic.w	r2, r2, #4
 8006658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	69d9      	ldr	r1, [r3, #28]
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	691a      	ldr	r2, [r3, #16]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	430a      	orrs	r2, r1
 800666a:	61da      	str	r2, [r3, #28]
      break;
 800666c:	e064      	b.n	8006738 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68b9      	ldr	r1, [r7, #8]
 8006674:	4618      	mov	r0, r3
 8006676:	f000 fbc9 	bl	8006e0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	69da      	ldr	r2, [r3, #28]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	69da      	ldr	r2, [r3, #28]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69d9      	ldr	r1, [r3, #28]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	021a      	lsls	r2, r3, #8
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	61da      	str	r2, [r3, #28]
      break;
 80066ae:	e043      	b.n	8006738 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68b9      	ldr	r1, [r7, #8]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fc32 	bl	8006f20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0208 	orr.w	r2, r2, #8
 80066ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0204 	bic.w	r2, r2, #4
 80066da:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	691a      	ldr	r2, [r3, #16]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80066ee:	e023      	b.n	8006738 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68b9      	ldr	r1, [r7, #8]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 fc76 	bl	8006fe8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800670a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800671a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	021a      	lsls	r2, r3, #8
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006730:	e002      	b.n	8006738 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	75fb      	strb	r3, [r7, #23]
      break;
 8006736:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006740:	7dfb      	ldrb	r3, [r7, #23]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3718      	adds	r7, #24
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop

0800674c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006760:	2b01      	cmp	r3, #1
 8006762:	d101      	bne.n	8006768 <HAL_TIM_ConfigClockSource+0x1c>
 8006764:	2302      	movs	r3, #2
 8006766:	e0de      	b.n	8006926 <HAL_TIM_ConfigClockSource+0x1da>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006786:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800678a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006792:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a63      	ldr	r2, [pc, #396]	@ (8006930 <HAL_TIM_ConfigClockSource+0x1e4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	f000 80a9 	beq.w	80068fa <HAL_TIM_ConfigClockSource+0x1ae>
 80067a8:	4a61      	ldr	r2, [pc, #388]	@ (8006930 <HAL_TIM_ConfigClockSource+0x1e4>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	f200 80ae 	bhi.w	800690c <HAL_TIM_ConfigClockSource+0x1c0>
 80067b0:	4a60      	ldr	r2, [pc, #384]	@ (8006934 <HAL_TIM_ConfigClockSource+0x1e8>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	f000 80a1 	beq.w	80068fa <HAL_TIM_ConfigClockSource+0x1ae>
 80067b8:	4a5e      	ldr	r2, [pc, #376]	@ (8006934 <HAL_TIM_ConfigClockSource+0x1e8>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	f200 80a6 	bhi.w	800690c <HAL_TIM_ConfigClockSource+0x1c0>
 80067c0:	4a5d      	ldr	r2, [pc, #372]	@ (8006938 <HAL_TIM_ConfigClockSource+0x1ec>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	f000 8099 	beq.w	80068fa <HAL_TIM_ConfigClockSource+0x1ae>
 80067c8:	4a5b      	ldr	r2, [pc, #364]	@ (8006938 <HAL_TIM_ConfigClockSource+0x1ec>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	f200 809e 	bhi.w	800690c <HAL_TIM_ConfigClockSource+0x1c0>
 80067d0:	4a5a      	ldr	r2, [pc, #360]	@ (800693c <HAL_TIM_ConfigClockSource+0x1f0>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	f000 8091 	beq.w	80068fa <HAL_TIM_ConfigClockSource+0x1ae>
 80067d8:	4a58      	ldr	r2, [pc, #352]	@ (800693c <HAL_TIM_ConfigClockSource+0x1f0>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	f200 8096 	bhi.w	800690c <HAL_TIM_ConfigClockSource+0x1c0>
 80067e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80067e4:	f000 8089 	beq.w	80068fa <HAL_TIM_ConfigClockSource+0x1ae>
 80067e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80067ec:	f200 808e 	bhi.w	800690c <HAL_TIM_ConfigClockSource+0x1c0>
 80067f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067f4:	d03e      	beq.n	8006874 <HAL_TIM_ConfigClockSource+0x128>
 80067f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067fa:	f200 8087 	bhi.w	800690c <HAL_TIM_ConfigClockSource+0x1c0>
 80067fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006802:	f000 8086 	beq.w	8006912 <HAL_TIM_ConfigClockSource+0x1c6>
 8006806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800680a:	d87f      	bhi.n	800690c <HAL_TIM_ConfigClockSource+0x1c0>
 800680c:	2b70      	cmp	r3, #112	@ 0x70
 800680e:	d01a      	beq.n	8006846 <HAL_TIM_ConfigClockSource+0xfa>
 8006810:	2b70      	cmp	r3, #112	@ 0x70
 8006812:	d87b      	bhi.n	800690c <HAL_TIM_ConfigClockSource+0x1c0>
 8006814:	2b60      	cmp	r3, #96	@ 0x60
 8006816:	d050      	beq.n	80068ba <HAL_TIM_ConfigClockSource+0x16e>
 8006818:	2b60      	cmp	r3, #96	@ 0x60
 800681a:	d877      	bhi.n	800690c <HAL_TIM_ConfigClockSource+0x1c0>
 800681c:	2b50      	cmp	r3, #80	@ 0x50
 800681e:	d03c      	beq.n	800689a <HAL_TIM_ConfigClockSource+0x14e>
 8006820:	2b50      	cmp	r3, #80	@ 0x50
 8006822:	d873      	bhi.n	800690c <HAL_TIM_ConfigClockSource+0x1c0>
 8006824:	2b40      	cmp	r3, #64	@ 0x40
 8006826:	d058      	beq.n	80068da <HAL_TIM_ConfigClockSource+0x18e>
 8006828:	2b40      	cmp	r3, #64	@ 0x40
 800682a:	d86f      	bhi.n	800690c <HAL_TIM_ConfigClockSource+0x1c0>
 800682c:	2b30      	cmp	r3, #48	@ 0x30
 800682e:	d064      	beq.n	80068fa <HAL_TIM_ConfigClockSource+0x1ae>
 8006830:	2b30      	cmp	r3, #48	@ 0x30
 8006832:	d86b      	bhi.n	800690c <HAL_TIM_ConfigClockSource+0x1c0>
 8006834:	2b20      	cmp	r3, #32
 8006836:	d060      	beq.n	80068fa <HAL_TIM_ConfigClockSource+0x1ae>
 8006838:	2b20      	cmp	r3, #32
 800683a:	d867      	bhi.n	800690c <HAL_TIM_ConfigClockSource+0x1c0>
 800683c:	2b00      	cmp	r3, #0
 800683e:	d05c      	beq.n	80068fa <HAL_TIM_ConfigClockSource+0x1ae>
 8006840:	2b10      	cmp	r3, #16
 8006842:	d05a      	beq.n	80068fa <HAL_TIM_ConfigClockSource+0x1ae>
 8006844:	e062      	b.n	800690c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006856:	f000 fca9 	bl	80071ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006868:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	609a      	str	r2, [r3, #8]
      break;
 8006872:	e04f      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006884:	f000 fc92 	bl	80071ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689a      	ldr	r2, [r3, #8]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006896:	609a      	str	r2, [r3, #8]
      break;
 8006898:	e03c      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068a6:	461a      	mov	r2, r3
 80068a8:	f000 fc04 	bl	80070b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2150      	movs	r1, #80	@ 0x50
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fc5d 	bl	8007172 <TIM_ITRx_SetConfig>
      break;
 80068b8:	e02c      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068c6:	461a      	mov	r2, r3
 80068c8:	f000 fc23 	bl	8007112 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2160      	movs	r1, #96	@ 0x60
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fc4d 	bl	8007172 <TIM_ITRx_SetConfig>
      break;
 80068d8:	e01c      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068e6:	461a      	mov	r2, r3
 80068e8:	f000 fbe4 	bl	80070b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2140      	movs	r1, #64	@ 0x40
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 fc3d 	bl	8007172 <TIM_ITRx_SetConfig>
      break;
 80068f8:	e00c      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4619      	mov	r1, r3
 8006904:	4610      	mov	r0, r2
 8006906:	f000 fc34 	bl	8007172 <TIM_ITRx_SetConfig>
      break;
 800690a:	e003      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	73fb      	strb	r3, [r7, #15]
      break;
 8006910:	e000      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006912:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006924:	7bfb      	ldrb	r3, [r7, #15]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	00100070 	.word	0x00100070
 8006934:	00100040 	.word	0x00100040
 8006938:	00100030 	.word	0x00100030
 800693c:	00100020 	.word	0x00100020

08006940 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a42      	ldr	r2, [pc, #264]	@ (8006aac <TIM_Base_SetConfig+0x11c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d00f      	beq.n	80069c8 <TIM_Base_SetConfig+0x38>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ae:	d00b      	beq.n	80069c8 <TIM_Base_SetConfig+0x38>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a3f      	ldr	r2, [pc, #252]	@ (8006ab0 <TIM_Base_SetConfig+0x120>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d007      	beq.n	80069c8 <TIM_Base_SetConfig+0x38>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a3e      	ldr	r2, [pc, #248]	@ (8006ab4 <TIM_Base_SetConfig+0x124>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d003      	beq.n	80069c8 <TIM_Base_SetConfig+0x38>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a3d      	ldr	r2, [pc, #244]	@ (8006ab8 <TIM_Base_SetConfig+0x128>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d108      	bne.n	80069da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a33      	ldr	r2, [pc, #204]	@ (8006aac <TIM_Base_SetConfig+0x11c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d01b      	beq.n	8006a1a <TIM_Base_SetConfig+0x8a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069e8:	d017      	beq.n	8006a1a <TIM_Base_SetConfig+0x8a>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a30      	ldr	r2, [pc, #192]	@ (8006ab0 <TIM_Base_SetConfig+0x120>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d013      	beq.n	8006a1a <TIM_Base_SetConfig+0x8a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a2f      	ldr	r2, [pc, #188]	@ (8006ab4 <TIM_Base_SetConfig+0x124>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00f      	beq.n	8006a1a <TIM_Base_SetConfig+0x8a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a2e      	ldr	r2, [pc, #184]	@ (8006ab8 <TIM_Base_SetConfig+0x128>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d00b      	beq.n	8006a1a <TIM_Base_SetConfig+0x8a>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a2d      	ldr	r2, [pc, #180]	@ (8006abc <TIM_Base_SetConfig+0x12c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d007      	beq.n	8006a1a <TIM_Base_SetConfig+0x8a>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a2c      	ldr	r2, [pc, #176]	@ (8006ac0 <TIM_Base_SetConfig+0x130>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d003      	beq.n	8006a1a <TIM_Base_SetConfig+0x8a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a2b      	ldr	r2, [pc, #172]	@ (8006ac4 <TIM_Base_SetConfig+0x134>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d108      	bne.n	8006a2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a16      	ldr	r2, [pc, #88]	@ (8006aac <TIM_Base_SetConfig+0x11c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00f      	beq.n	8006a78 <TIM_Base_SetConfig+0xe8>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a17      	ldr	r2, [pc, #92]	@ (8006ab8 <TIM_Base_SetConfig+0x128>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00b      	beq.n	8006a78 <TIM_Base_SetConfig+0xe8>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a16      	ldr	r2, [pc, #88]	@ (8006abc <TIM_Base_SetConfig+0x12c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d007      	beq.n	8006a78 <TIM_Base_SetConfig+0xe8>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a15      	ldr	r2, [pc, #84]	@ (8006ac0 <TIM_Base_SetConfig+0x130>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d003      	beq.n	8006a78 <TIM_Base_SetConfig+0xe8>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a14      	ldr	r2, [pc, #80]	@ (8006ac4 <TIM_Base_SetConfig+0x134>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d103      	bne.n	8006a80 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	691a      	ldr	r2, [r3, #16]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d105      	bne.n	8006a9e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	f023 0201 	bic.w	r2, r3, #1
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	611a      	str	r2, [r3, #16]
  }
}
 8006a9e:	bf00      	nop
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	40012c00 	.word	0x40012c00
 8006ab0:	40000400 	.word	0x40000400
 8006ab4:	40000800 	.word	0x40000800
 8006ab8:	40013400 	.word	0x40013400
 8006abc:	40014000 	.word	0x40014000
 8006ac0:	40014400 	.word	0x40014400
 8006ac4:	40014800 	.word	0x40014800

08006ac8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	f023 0201 	bic.w	r2, r3, #1
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0303 	bic.w	r3, r3, #3
 8006b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f023 0302 	bic.w	r3, r3, #2
 8006b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a2c      	ldr	r2, [pc, #176]	@ (8006bd4 <TIM_OC1_SetConfig+0x10c>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d00f      	beq.n	8006b48 <TIM_OC1_SetConfig+0x80>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a2b      	ldr	r2, [pc, #172]	@ (8006bd8 <TIM_OC1_SetConfig+0x110>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00b      	beq.n	8006b48 <TIM_OC1_SetConfig+0x80>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a2a      	ldr	r2, [pc, #168]	@ (8006bdc <TIM_OC1_SetConfig+0x114>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d007      	beq.n	8006b48 <TIM_OC1_SetConfig+0x80>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a29      	ldr	r2, [pc, #164]	@ (8006be0 <TIM_OC1_SetConfig+0x118>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d003      	beq.n	8006b48 <TIM_OC1_SetConfig+0x80>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a28      	ldr	r2, [pc, #160]	@ (8006be4 <TIM_OC1_SetConfig+0x11c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d10c      	bne.n	8006b62 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	f023 0308 	bic.w	r3, r3, #8
 8006b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f023 0304 	bic.w	r3, r3, #4
 8006b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a1b      	ldr	r2, [pc, #108]	@ (8006bd4 <TIM_OC1_SetConfig+0x10c>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d00f      	beq.n	8006b8a <TIM_OC1_SetConfig+0xc2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8006bd8 <TIM_OC1_SetConfig+0x110>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d00b      	beq.n	8006b8a <TIM_OC1_SetConfig+0xc2>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a19      	ldr	r2, [pc, #100]	@ (8006bdc <TIM_OC1_SetConfig+0x114>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d007      	beq.n	8006b8a <TIM_OC1_SetConfig+0xc2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a18      	ldr	r2, [pc, #96]	@ (8006be0 <TIM_OC1_SetConfig+0x118>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d003      	beq.n	8006b8a <TIM_OC1_SetConfig+0xc2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a17      	ldr	r2, [pc, #92]	@ (8006be4 <TIM_OC1_SetConfig+0x11c>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d111      	bne.n	8006bae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	621a      	str	r2, [r3, #32]
}
 8006bc8:	bf00      	nop
 8006bca:	371c      	adds	r7, #28
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	40012c00 	.word	0x40012c00
 8006bd8:	40013400 	.word	0x40013400
 8006bdc:	40014000 	.word	0x40014000
 8006be0:	40014400 	.word	0x40014400
 8006be4:	40014800 	.word	0x40014800

08006be8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	f023 0210 	bic.w	r2, r3, #16
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	021b      	lsls	r3, r3, #8
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f023 0320 	bic.w	r3, r3, #32
 8006c36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	011b      	lsls	r3, r3, #4
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a28      	ldr	r2, [pc, #160]	@ (8006ce8 <TIM_OC2_SetConfig+0x100>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d003      	beq.n	8006c54 <TIM_OC2_SetConfig+0x6c>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a27      	ldr	r2, [pc, #156]	@ (8006cec <TIM_OC2_SetConfig+0x104>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d10d      	bne.n	8006c70 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	011b      	lsls	r3, r3, #4
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a1d      	ldr	r2, [pc, #116]	@ (8006ce8 <TIM_OC2_SetConfig+0x100>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d00f      	beq.n	8006c98 <TIM_OC2_SetConfig+0xb0>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8006cec <TIM_OC2_SetConfig+0x104>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00b      	beq.n	8006c98 <TIM_OC2_SetConfig+0xb0>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a1b      	ldr	r2, [pc, #108]	@ (8006cf0 <TIM_OC2_SetConfig+0x108>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d007      	beq.n	8006c98 <TIM_OC2_SetConfig+0xb0>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a1a      	ldr	r2, [pc, #104]	@ (8006cf4 <TIM_OC2_SetConfig+0x10c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d003      	beq.n	8006c98 <TIM_OC2_SetConfig+0xb0>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a19      	ldr	r2, [pc, #100]	@ (8006cf8 <TIM_OC2_SetConfig+0x110>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d113      	bne.n	8006cc0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	621a      	str	r2, [r3, #32]
}
 8006cda:	bf00      	nop
 8006cdc:	371c      	adds	r7, #28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	40012c00 	.word	0x40012c00
 8006cec:	40013400 	.word	0x40013400
 8006cf0:	40014000 	.word	0x40014000
 8006cf4:	40014400 	.word	0x40014400
 8006cf8:	40014800 	.word	0x40014800

08006cfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a1b      	ldr	r3, [r3, #32]
 8006d10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f023 0303 	bic.w	r3, r3, #3
 8006d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	021b      	lsls	r3, r3, #8
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a27      	ldr	r2, [pc, #156]	@ (8006df8 <TIM_OC3_SetConfig+0xfc>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d003      	beq.n	8006d66 <TIM_OC3_SetConfig+0x6a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a26      	ldr	r2, [pc, #152]	@ (8006dfc <TIM_OC3_SetConfig+0x100>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d10d      	bne.n	8006d82 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	021b      	lsls	r3, r3, #8
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a1c      	ldr	r2, [pc, #112]	@ (8006df8 <TIM_OC3_SetConfig+0xfc>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d00f      	beq.n	8006daa <TIM_OC3_SetConfig+0xae>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8006dfc <TIM_OC3_SetConfig+0x100>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d00b      	beq.n	8006daa <TIM_OC3_SetConfig+0xae>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a1a      	ldr	r2, [pc, #104]	@ (8006e00 <TIM_OC3_SetConfig+0x104>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d007      	beq.n	8006daa <TIM_OC3_SetConfig+0xae>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a19      	ldr	r2, [pc, #100]	@ (8006e04 <TIM_OC3_SetConfig+0x108>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d003      	beq.n	8006daa <TIM_OC3_SetConfig+0xae>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a18      	ldr	r2, [pc, #96]	@ (8006e08 <TIM_OC3_SetConfig+0x10c>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d113      	bne.n	8006dd2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	011b      	lsls	r3, r3, #4
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	011b      	lsls	r3, r3, #4
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	621a      	str	r2, [r3, #32]
}
 8006dec:	bf00      	nop
 8006dee:	371c      	adds	r7, #28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	40012c00 	.word	0x40012c00
 8006dfc:	40013400 	.word	0x40013400
 8006e00:	40014000 	.word	0x40014000
 8006e04:	40014400 	.word	0x40014400
 8006e08:	40014800 	.word	0x40014800

08006e0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b087      	sub	sp, #28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	021b      	lsls	r3, r3, #8
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	031b      	lsls	r3, r3, #12
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a28      	ldr	r2, [pc, #160]	@ (8006f0c <TIM_OC4_SetConfig+0x100>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d003      	beq.n	8006e78 <TIM_OC4_SetConfig+0x6c>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a27      	ldr	r2, [pc, #156]	@ (8006f10 <TIM_OC4_SetConfig+0x104>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d10d      	bne.n	8006e94 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	031b      	lsls	r3, r3, #12
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a1d      	ldr	r2, [pc, #116]	@ (8006f0c <TIM_OC4_SetConfig+0x100>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d00f      	beq.n	8006ebc <TIM_OC4_SetConfig+0xb0>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8006f10 <TIM_OC4_SetConfig+0x104>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d00b      	beq.n	8006ebc <TIM_OC4_SetConfig+0xb0>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a1b      	ldr	r2, [pc, #108]	@ (8006f14 <TIM_OC4_SetConfig+0x108>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d007      	beq.n	8006ebc <TIM_OC4_SetConfig+0xb0>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a1a      	ldr	r2, [pc, #104]	@ (8006f18 <TIM_OC4_SetConfig+0x10c>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d003      	beq.n	8006ebc <TIM_OC4_SetConfig+0xb0>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a19      	ldr	r2, [pc, #100]	@ (8006f1c <TIM_OC4_SetConfig+0x110>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d113      	bne.n	8006ee4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ec2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006eca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	019b      	lsls	r3, r3, #6
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	019b      	lsls	r3, r3, #6
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	621a      	str	r2, [r3, #32]
}
 8006efe:	bf00      	nop
 8006f00:	371c      	adds	r7, #28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	40012c00 	.word	0x40012c00
 8006f10:	40013400 	.word	0x40013400
 8006f14:	40014000 	.word	0x40014000
 8006f18:	40014400 	.word	0x40014400
 8006f1c:	40014800 	.word	0x40014800

08006f20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006f64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	041b      	lsls	r3, r3, #16
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a17      	ldr	r2, [pc, #92]	@ (8006fd4 <TIM_OC5_SetConfig+0xb4>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00f      	beq.n	8006f9a <TIM_OC5_SetConfig+0x7a>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a16      	ldr	r2, [pc, #88]	@ (8006fd8 <TIM_OC5_SetConfig+0xb8>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d00b      	beq.n	8006f9a <TIM_OC5_SetConfig+0x7a>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a15      	ldr	r2, [pc, #84]	@ (8006fdc <TIM_OC5_SetConfig+0xbc>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d007      	beq.n	8006f9a <TIM_OC5_SetConfig+0x7a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a14      	ldr	r2, [pc, #80]	@ (8006fe0 <TIM_OC5_SetConfig+0xc0>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d003      	beq.n	8006f9a <TIM_OC5_SetConfig+0x7a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a13      	ldr	r2, [pc, #76]	@ (8006fe4 <TIM_OC5_SetConfig+0xc4>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d109      	bne.n	8006fae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	021b      	lsls	r3, r3, #8
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	621a      	str	r2, [r3, #32]
}
 8006fc8:	bf00      	nop
 8006fca:	371c      	adds	r7, #28
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	40012c00 	.word	0x40012c00
 8006fd8:	40013400 	.word	0x40013400
 8006fdc:	40014000 	.word	0x40014000
 8006fe0:	40014400 	.word	0x40014400
 8006fe4:	40014800 	.word	0x40014800

08006fe8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800700e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007016:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800701a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	021b      	lsls	r3, r3, #8
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800702e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	051b      	lsls	r3, r3, #20
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	4313      	orrs	r3, r2
 800703a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a18      	ldr	r2, [pc, #96]	@ (80070a0 <TIM_OC6_SetConfig+0xb8>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d00f      	beq.n	8007064 <TIM_OC6_SetConfig+0x7c>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a17      	ldr	r2, [pc, #92]	@ (80070a4 <TIM_OC6_SetConfig+0xbc>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d00b      	beq.n	8007064 <TIM_OC6_SetConfig+0x7c>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a16      	ldr	r2, [pc, #88]	@ (80070a8 <TIM_OC6_SetConfig+0xc0>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d007      	beq.n	8007064 <TIM_OC6_SetConfig+0x7c>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a15      	ldr	r2, [pc, #84]	@ (80070ac <TIM_OC6_SetConfig+0xc4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d003      	beq.n	8007064 <TIM_OC6_SetConfig+0x7c>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a14      	ldr	r2, [pc, #80]	@ (80070b0 <TIM_OC6_SetConfig+0xc8>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d109      	bne.n	8007078 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800706a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	029b      	lsls	r3, r3, #10
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	4313      	orrs	r3, r2
 8007076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	621a      	str	r2, [r3, #32]
}
 8007092:	bf00      	nop
 8007094:	371c      	adds	r7, #28
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	40012c00 	.word	0x40012c00
 80070a4:	40013400 	.word	0x40013400
 80070a8:	40014000 	.word	0x40014000
 80070ac:	40014400 	.word	0x40014400
 80070b0:	40014800 	.word	0x40014800

080070b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	f023 0201 	bic.w	r2, r3, #1
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	011b      	lsls	r3, r3, #4
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f023 030a 	bic.w	r3, r3, #10
 80070f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	621a      	str	r2, [r3, #32]
}
 8007106:	bf00      	nop
 8007108:	371c      	adds	r7, #28
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007112:	b480      	push	{r7}
 8007114:	b087      	sub	sp, #28
 8007116:	af00      	add	r7, sp, #0
 8007118:	60f8      	str	r0, [r7, #12]
 800711a:	60b9      	str	r1, [r7, #8]
 800711c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	f023 0210 	bic.w	r2, r3, #16
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800713c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	031b      	lsls	r3, r3, #12
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	4313      	orrs	r3, r2
 8007146:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800714e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	011b      	lsls	r3, r3, #4
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	4313      	orrs	r3, r2
 8007158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	621a      	str	r2, [r3, #32]
}
 8007166:	bf00      	nop
 8007168:	371c      	adds	r7, #28
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007172:	b480      	push	{r7}
 8007174:	b085      	sub	sp, #20
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007188:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800718c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4313      	orrs	r3, r2
 8007194:	f043 0307 	orr.w	r3, r3, #7
 8007198:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	609a      	str	r2, [r3, #8]
}
 80071a0:	bf00      	nop
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
 80071b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	021a      	lsls	r2, r3, #8
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	431a      	orrs	r2, r3
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	609a      	str	r2, [r3, #8]
}
 80071e0:	bf00      	nop
 80071e2:	371c      	adds	r7, #28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b087      	sub	sp, #28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f003 031f 	and.w	r3, r3, #31
 80071fe:	2201      	movs	r2, #1
 8007200:	fa02 f303 	lsl.w	r3, r2, r3
 8007204:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6a1a      	ldr	r2, [r3, #32]
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	43db      	mvns	r3, r3
 800720e:	401a      	ands	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6a1a      	ldr	r2, [r3, #32]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	f003 031f 	and.w	r3, r3, #31
 800721e:	6879      	ldr	r1, [r7, #4]
 8007220:	fa01 f303 	lsl.w	r3, r1, r3
 8007224:	431a      	orrs	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	621a      	str	r2, [r3, #32]
}
 800722a:	bf00      	nop
 800722c:	371c      	adds	r7, #28
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
	...

08007238 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d109      	bne.n	800725c <HAL_TIMEx_PWMN_Start+0x24>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b01      	cmp	r3, #1
 8007252:	bf14      	ite	ne
 8007254:	2301      	movne	r3, #1
 8007256:	2300      	moveq	r3, #0
 8007258:	b2db      	uxtb	r3, r3
 800725a:	e022      	b.n	80072a2 <HAL_TIMEx_PWMN_Start+0x6a>
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	2b04      	cmp	r3, #4
 8007260:	d109      	bne.n	8007276 <HAL_TIMEx_PWMN_Start+0x3e>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b01      	cmp	r3, #1
 800726c:	bf14      	ite	ne
 800726e:	2301      	movne	r3, #1
 8007270:	2300      	moveq	r3, #0
 8007272:	b2db      	uxtb	r3, r3
 8007274:	e015      	b.n	80072a2 <HAL_TIMEx_PWMN_Start+0x6a>
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b08      	cmp	r3, #8
 800727a:	d109      	bne.n	8007290 <HAL_TIMEx_PWMN_Start+0x58>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b01      	cmp	r3, #1
 8007286:	bf14      	ite	ne
 8007288:	2301      	movne	r3, #1
 800728a:	2300      	moveq	r3, #0
 800728c:	b2db      	uxtb	r3, r3
 800728e:	e008      	b.n	80072a2 <HAL_TIMEx_PWMN_Start+0x6a>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b01      	cmp	r3, #1
 800729a:	bf14      	ite	ne
 800729c:	2301      	movne	r3, #1
 800729e:	2300      	moveq	r3, #0
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e069      	b.n	800737e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d104      	bne.n	80072ba <HAL_TIMEx_PWMN_Start+0x82>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072b8:	e013      	b.n	80072e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b04      	cmp	r3, #4
 80072be:	d104      	bne.n	80072ca <HAL_TIMEx_PWMN_Start+0x92>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2202      	movs	r2, #2
 80072c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072c8:	e00b      	b.n	80072e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b08      	cmp	r3, #8
 80072ce:	d104      	bne.n	80072da <HAL_TIMEx_PWMN_Start+0xa2>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80072d8:	e003      	b.n	80072e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2202      	movs	r2, #2
 80072de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2204      	movs	r2, #4
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 fa0a 	bl	8007704 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80072fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a20      	ldr	r2, [pc, #128]	@ (8007388 <HAL_TIMEx_PWMN_Start+0x150>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d018      	beq.n	800733c <HAL_TIMEx_PWMN_Start+0x104>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007312:	d013      	beq.n	800733c <HAL_TIMEx_PWMN_Start+0x104>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a1c      	ldr	r2, [pc, #112]	@ (800738c <HAL_TIMEx_PWMN_Start+0x154>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00e      	beq.n	800733c <HAL_TIMEx_PWMN_Start+0x104>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a1b      	ldr	r2, [pc, #108]	@ (8007390 <HAL_TIMEx_PWMN_Start+0x158>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d009      	beq.n	800733c <HAL_TIMEx_PWMN_Start+0x104>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a19      	ldr	r2, [pc, #100]	@ (8007394 <HAL_TIMEx_PWMN_Start+0x15c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d004      	beq.n	800733c <HAL_TIMEx_PWMN_Start+0x104>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a18      	ldr	r2, [pc, #96]	@ (8007398 <HAL_TIMEx_PWMN_Start+0x160>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d115      	bne.n	8007368 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689a      	ldr	r2, [r3, #8]
 8007342:	4b16      	ldr	r3, [pc, #88]	@ (800739c <HAL_TIMEx_PWMN_Start+0x164>)
 8007344:	4013      	ands	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2b06      	cmp	r3, #6
 800734c:	d015      	beq.n	800737a <HAL_TIMEx_PWMN_Start+0x142>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007354:	d011      	beq.n	800737a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f042 0201 	orr.w	r2, r2, #1
 8007364:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007366:	e008      	b.n	800737a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f042 0201 	orr.w	r2, r2, #1
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	e000      	b.n	800737c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800737a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	40012c00 	.word	0x40012c00
 800738c:	40000400 	.word	0x40000400
 8007390:	40000800 	.word	0x40000800
 8007394:	40013400 	.word	0x40013400
 8007398:	40014000 	.word	0x40014000
 800739c:	00010007 	.word	0x00010007

080073a0 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2200      	movs	r2, #0
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 f9a6 	bl	8007704 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6a1a      	ldr	r2, [r3, #32]
 80073be:	f241 1311 	movw	r3, #4369	@ 0x1111
 80073c2:	4013      	ands	r3, r2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10f      	bne.n	80073e8 <HAL_TIMEx_PWMN_Stop+0x48>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6a1a      	ldr	r2, [r3, #32]
 80073ce:	f244 4344 	movw	r3, #17476	@ 0x4444
 80073d2:	4013      	ands	r3, r2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d107      	bne.n	80073e8 <HAL_TIMEx_PWMN_Stop+0x48>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80073e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6a1a      	ldr	r2, [r3, #32]
 80073ee:	f241 1311 	movw	r3, #4369	@ 0x1111
 80073f2:	4013      	ands	r3, r2
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10f      	bne.n	8007418 <HAL_TIMEx_PWMN_Stop+0x78>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6a1a      	ldr	r2, [r3, #32]
 80073fe:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007402:	4013      	ands	r3, r2
 8007404:	2b00      	cmp	r3, #0
 8007406:	d107      	bne.n	8007418 <HAL_TIMEx_PWMN_Stop+0x78>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f022 0201 	bic.w	r2, r2, #1
 8007416:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d104      	bne.n	8007428 <HAL_TIMEx_PWMN_Stop+0x88>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007426:	e013      	b.n	8007450 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	2b04      	cmp	r3, #4
 800742c:	d104      	bne.n	8007438 <HAL_TIMEx_PWMN_Stop+0x98>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007436:	e00b      	b.n	8007450 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b08      	cmp	r3, #8
 800743c:	d104      	bne.n	8007448 <HAL_TIMEx_PWMN_Stop+0xa8>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007446:	e003      	b.n	8007450 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
	...

0800745c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007470:	2302      	movs	r3, #2
 8007472:	e065      	b.n	8007540 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a2c      	ldr	r2, [pc, #176]	@ (800754c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d004      	beq.n	80074a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a2b      	ldr	r2, [pc, #172]	@ (8007550 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d108      	bne.n	80074ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80074ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80074c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a1b      	ldr	r2, [pc, #108]	@ (800754c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d018      	beq.n	8007514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074ea:	d013      	beq.n	8007514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a18      	ldr	r2, [pc, #96]	@ (8007554 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d00e      	beq.n	8007514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a17      	ldr	r2, [pc, #92]	@ (8007558 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d009      	beq.n	8007514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a12      	ldr	r2, [pc, #72]	@ (8007550 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d004      	beq.n	8007514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a13      	ldr	r2, [pc, #76]	@ (800755c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d10c      	bne.n	800752e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800751a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	4313      	orrs	r3, r2
 8007524:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	40012c00 	.word	0x40012c00
 8007550:	40013400 	.word	0x40013400
 8007554:	40000400 	.word	0x40000400
 8007558:	40000800 	.word	0x40000800
 800755c:	40014000 	.word	0x40014000

08007560 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800756a:	2300      	movs	r3, #0
 800756c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007574:	2b01      	cmp	r3, #1
 8007576:	d101      	bne.n	800757c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007578:	2302      	movs	r3, #2
 800757a:	e073      	b.n	8007664 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	4313      	orrs	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	4313      	orrs	r3, r2
 800759e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e2:	4313      	orrs	r3, r2
 80075e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	041b      	lsls	r3, r3, #16
 80075f2:	4313      	orrs	r3, r2
 80075f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	4313      	orrs	r3, r2
 8007602:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a19      	ldr	r2, [pc, #100]	@ (8007670 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d004      	beq.n	8007618 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a18      	ldr	r2, [pc, #96]	@ (8007674 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d11c      	bne.n	8007652 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007622:	051b      	lsls	r3, r3, #20
 8007624:	4313      	orrs	r3, r2
 8007626:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	4313      	orrs	r3, r2
 8007634:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007640:	4313      	orrs	r3, r2
 8007642:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800764e:	4313      	orrs	r3, r2
 8007650:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	40012c00 	.word	0x40012c00
 8007674:	40013400 	.word	0x40013400

08007678 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007704:	b480      	push	{r7}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	f003 030f 	and.w	r3, r3, #15
 8007716:	2204      	movs	r2, #4
 8007718:	fa02 f303 	lsl.w	r3, r2, r3
 800771c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6a1a      	ldr	r2, [r3, #32]
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	43db      	mvns	r3, r3
 8007726:	401a      	ands	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6a1a      	ldr	r2, [r3, #32]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	f003 030f 	and.w	r3, r3, #15
 8007736:	6879      	ldr	r1, [r7, #4]
 8007738:	fa01 f303 	lsl.w	r3, r1, r3
 800773c:	431a      	orrs	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	621a      	str	r2, [r3, #32]
}
 8007742:	bf00      	nop
 8007744:	371c      	adds	r7, #28
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b082      	sub	sp, #8
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e042      	b.n	80077e6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007766:	2b00      	cmp	r3, #0
 8007768:	d106      	bne.n	8007778 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7fb fcd2 	bl	800311c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2224      	movs	r2, #36	@ 0x24
 800777c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f022 0201 	bic.w	r2, r2, #1
 800778e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007794:	2b00      	cmp	r3, #0
 8007796:	d002      	beq.n	800779e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 ffc5 	bl	8008728 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fcf6 	bl	8008190 <UART_SetConfig>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d101      	bne.n	80077ae <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e01b      	b.n	80077e6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80077bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	689a      	ldr	r2, [r3, #8]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80077cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f042 0201 	orr.w	r2, r2, #1
 80077dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f001 f844 	bl	800886c <UART_CheckIdleState>
 80077e4:	4603      	mov	r3, r0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b08a      	sub	sp, #40	@ 0x28
 80077f2:	af02      	add	r7, sp, #8
 80077f4:	60f8      	str	r0, [r7, #12]
 80077f6:	60b9      	str	r1, [r7, #8]
 80077f8:	603b      	str	r3, [r7, #0]
 80077fa:	4613      	mov	r3, r2
 80077fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007804:	2b20      	cmp	r3, #32
 8007806:	d17b      	bne.n	8007900 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <HAL_UART_Transmit+0x26>
 800780e:	88fb      	ldrh	r3, [r7, #6]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e074      	b.n	8007902 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2221      	movs	r2, #33	@ 0x21
 8007824:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007828:	f7fb fd9c 	bl	8003364 <HAL_GetTick>
 800782c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	88fa      	ldrh	r2, [r7, #6]
 8007832:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	88fa      	ldrh	r2, [r7, #6]
 800783a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007846:	d108      	bne.n	800785a <HAL_UART_Transmit+0x6c>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d104      	bne.n	800785a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007850:	2300      	movs	r3, #0
 8007852:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	61bb      	str	r3, [r7, #24]
 8007858:	e003      	b.n	8007862 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800785e:	2300      	movs	r3, #0
 8007860:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007862:	e030      	b.n	80078c6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	2200      	movs	r2, #0
 800786c:	2180      	movs	r1, #128	@ 0x80
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f001 f8a6 	bl	80089c0 <UART_WaitOnFlagUntilTimeout>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d005      	beq.n	8007886 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2220      	movs	r2, #32
 800787e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e03d      	b.n	8007902 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10b      	bne.n	80078a4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	461a      	mov	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800789a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	3302      	adds	r3, #2
 80078a0:	61bb      	str	r3, [r7, #24]
 80078a2:	e007      	b.n	80078b4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	781a      	ldrb	r2, [r3, #0]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	3301      	adds	r3, #1
 80078b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	3b01      	subs	r3, #1
 80078be:	b29a      	uxth	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1c8      	bne.n	8007864 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2200      	movs	r2, #0
 80078da:	2140      	movs	r1, #64	@ 0x40
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f001 f86f 	bl	80089c0 <UART_WaitOnFlagUntilTimeout>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d005      	beq.n	80078f4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2220      	movs	r2, #32
 80078ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e006      	b.n	8007902 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2220      	movs	r2, #32
 80078f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80078fc:	2300      	movs	r3, #0
 80078fe:	e000      	b.n	8007902 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007900:	2302      	movs	r3, #2
  }
}
 8007902:	4618      	mov	r0, r3
 8007904:	3720      	adds	r7, #32
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
	...

0800790c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b08a      	sub	sp, #40	@ 0x28
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	4613      	mov	r3, r2
 8007918:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007920:	2b20      	cmp	r3, #32
 8007922:	d167      	bne.n	80079f4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d002      	beq.n	8007930 <HAL_UART_Transmit_DMA+0x24>
 800792a:	88fb      	ldrh	r3, [r7, #6]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d101      	bne.n	8007934 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e060      	b.n	80079f6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	88fa      	ldrh	r2, [r7, #6]
 800793e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	88fa      	ldrh	r2, [r7, #6]
 8007946:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2221      	movs	r2, #33	@ 0x21
 8007956:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800795e:	2b00      	cmp	r3, #0
 8007960:	d028      	beq.n	80079b4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007966:	4a26      	ldr	r2, [pc, #152]	@ (8007a00 <HAL_UART_Transmit_DMA+0xf4>)
 8007968:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800796e:	4a25      	ldr	r2, [pc, #148]	@ (8007a04 <HAL_UART_Transmit_DMA+0xf8>)
 8007970:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007976:	4a24      	ldr	r2, [pc, #144]	@ (8007a08 <HAL_UART_Transmit_DMA+0xfc>)
 8007978:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800797e:	2200      	movs	r2, #0
 8007980:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800798a:	4619      	mov	r1, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3328      	adds	r3, #40	@ 0x28
 8007992:	461a      	mov	r2, r3
 8007994:	88fb      	ldrh	r3, [r7, #6]
 8007996:	f7fb fe9b 	bl	80036d0 <HAL_DMA_Start_IT>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d009      	beq.n	80079b4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2210      	movs	r2, #16
 80079a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2220      	movs	r2, #32
 80079ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e020      	b.n	80079f6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2240      	movs	r2, #64	@ 0x40
 80079ba:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3308      	adds	r3, #8
 80079c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	e853 3f00 	ldrex	r3, [r3]
 80079ca:	613b      	str	r3, [r7, #16]
   return(result);
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3308      	adds	r3, #8
 80079da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079dc:	623a      	str	r2, [r7, #32]
 80079de:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	69f9      	ldr	r1, [r7, #28]
 80079e2:	6a3a      	ldr	r2, [r7, #32]
 80079e4:	e841 2300 	strex	r3, r2, [r1]
 80079e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e5      	bne.n	80079bc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	e000      	b.n	80079f6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80079f4:	2302      	movs	r3, #2
  }
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3728      	adds	r7, #40	@ 0x28
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	08008d37 	.word	0x08008d37
 8007a04:	08008dd1 	.word	0x08008dd1
 8007a08:	08008f57 	.word	0x08008f57

08007a0c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b08a      	sub	sp, #40	@ 0x28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	4613      	mov	r3, r2
 8007a18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a20:	2b20      	cmp	r3, #32
 8007a22:	d137      	bne.n	8007a94 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d002      	beq.n	8007a30 <HAL_UART_Receive_DMA+0x24>
 8007a2a:	88fb      	ldrh	r3, [r7, #6]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d101      	bne.n	8007a34 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e030      	b.n	8007a96 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a18      	ldr	r2, [pc, #96]	@ (8007aa0 <HAL_UART_Receive_DMA+0x94>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d01f      	beq.n	8007a84 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d018      	beq.n	8007a84 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	e853 3f00 	ldrex	r3, [r3]
 8007a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a70:	623b      	str	r3, [r7, #32]
 8007a72:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a74:	69f9      	ldr	r1, [r7, #28]
 8007a76:	6a3a      	ldr	r2, [r7, #32]
 8007a78:	e841 2300 	strex	r3, r2, [r1]
 8007a7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1e6      	bne.n	8007a52 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007a84:	88fb      	ldrh	r3, [r7, #6]
 8007a86:	461a      	mov	r2, r3
 8007a88:	68b9      	ldr	r1, [r7, #8]
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f001 f806 	bl	8008a9c <UART_Start_Receive_DMA>
 8007a90:	4603      	mov	r3, r0
 8007a92:	e000      	b.n	8007a96 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a94:	2302      	movs	r3, #2
  }
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3728      	adds	r7, #40	@ 0x28
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	40008000 	.word	0x40008000

08007aa4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b0ba      	sub	sp, #232	@ 0xe8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007aca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007ace:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007ad8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d11b      	bne.n	8007b18 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ae4:	f003 0320 	and.w	r3, r3, #32
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d015      	beq.n	8007b18 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007af0:	f003 0320 	and.w	r3, r3, #32
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d105      	bne.n	8007b04 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d009      	beq.n	8007b18 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f000 8300 	beq.w	800810e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	4798      	blx	r3
      }
      return;
 8007b16:	e2fa      	b.n	800810e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007b18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 8123 	beq.w	8007d68 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007b22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007b26:	4b8d      	ldr	r3, [pc, #564]	@ (8007d5c <HAL_UART_IRQHandler+0x2b8>)
 8007b28:	4013      	ands	r3, r2
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d106      	bne.n	8007b3c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007b2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007b32:	4b8b      	ldr	r3, [pc, #556]	@ (8007d60 <HAL_UART_IRQHandler+0x2bc>)
 8007b34:	4013      	ands	r3, r2
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f000 8116 	beq.w	8007d68 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d011      	beq.n	8007b6c <HAL_UART_IRQHandler+0xc8>
 8007b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00b      	beq.n	8007b6c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b62:	f043 0201 	orr.w	r2, r3, #1
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b70:	f003 0302 	and.w	r3, r3, #2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d011      	beq.n	8007b9c <HAL_UART_IRQHandler+0xf8>
 8007b78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b7c:	f003 0301 	and.w	r3, r3, #1
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00b      	beq.n	8007b9c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2202      	movs	r2, #2
 8007b8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b92:	f043 0204 	orr.w	r2, r3, #4
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ba0:	f003 0304 	and.w	r3, r3, #4
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d011      	beq.n	8007bcc <HAL_UART_IRQHandler+0x128>
 8007ba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bac:	f003 0301 	and.w	r3, r3, #1
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00b      	beq.n	8007bcc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2204      	movs	r2, #4
 8007bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bc2:	f043 0202 	orr.w	r2, r3, #2
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bd0:	f003 0308 	and.w	r3, r3, #8
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d017      	beq.n	8007c08 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bdc:	f003 0320 	and.w	r3, r3, #32
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d105      	bne.n	8007bf0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007be4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007be8:	4b5c      	ldr	r3, [pc, #368]	@ (8007d5c <HAL_UART_IRQHandler+0x2b8>)
 8007bea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00b      	beq.n	8007c08 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2208      	movs	r2, #8
 8007bf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bfe:	f043 0208 	orr.w	r2, r3, #8
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d012      	beq.n	8007c3a <HAL_UART_IRQHandler+0x196>
 8007c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00c      	beq.n	8007c3a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c30:	f043 0220 	orr.w	r2, r3, #32
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 8266 	beq.w	8008112 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c4a:	f003 0320 	and.w	r3, r3, #32
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d013      	beq.n	8007c7a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c56:	f003 0320 	and.w	r3, r3, #32
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d105      	bne.n	8007c6a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d007      	beq.n	8007c7a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d003      	beq.n	8007c7a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c8e:	2b40      	cmp	r3, #64	@ 0x40
 8007c90:	d005      	beq.n	8007c9e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d054      	beq.n	8007d48 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 ffe3 	bl	8008c6a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cae:	2b40      	cmp	r3, #64	@ 0x40
 8007cb0:	d146      	bne.n	8007d40 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007cc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ccc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3308      	adds	r3, #8
 8007cda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007cde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007cea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007cf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1d9      	bne.n	8007cb2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d017      	beq.n	8007d38 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d0e:	4a15      	ldr	r2, [pc, #84]	@ (8007d64 <HAL_UART_IRQHandler+0x2c0>)
 8007d10:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7fb fdad 	bl	8003878 <HAL_DMA_Abort_IT>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d019      	beq.n	8007d58 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007d32:	4610      	mov	r0, r2
 8007d34:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d36:	e00f      	b.n	8007d58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fa13 	bl	8008164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d3e:	e00b      	b.n	8007d58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fa0f 	bl	8008164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d46:	e007      	b.n	8007d58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fa0b 	bl	8008164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007d56:	e1dc      	b.n	8008112 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d58:	bf00      	nop
    return;
 8007d5a:	e1da      	b.n	8008112 <HAL_UART_IRQHandler+0x66e>
 8007d5c:	10000001 	.word	0x10000001
 8007d60:	04000120 	.word	0x04000120
 8007d64:	08008fd7 	.word	0x08008fd7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	f040 8170 	bne.w	8008052 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d76:	f003 0310 	and.w	r3, r3, #16
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f000 8169 	beq.w	8008052 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d84:	f003 0310 	and.w	r3, r3, #16
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 8162 	beq.w	8008052 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2210      	movs	r2, #16
 8007d94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007da0:	2b40      	cmp	r3, #64	@ 0x40
 8007da2:	f040 80d8 	bne.w	8007f56 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007db4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 80af 	beq.w	8007f1c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007dc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	f080 80a7 	bcs.w	8007f1c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007dd4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0320 	and.w	r3, r3, #32
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f040 8087 	bne.w	8007efa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007df8:	e853 3f00 	ldrex	r3, [r3]
 8007dfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	461a      	mov	r2, r3
 8007e12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e1a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007e22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e26:	e841 2300 	strex	r3, r2, [r1]
 8007e2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007e2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1da      	bne.n	8007dec <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3308      	adds	r3, #8
 8007e3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e40:	e853 3f00 	ldrex	r3, [r3]
 8007e44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e48:	f023 0301 	bic.w	r3, r3, #1
 8007e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3308      	adds	r3, #8
 8007e56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007e5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007e5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007e66:	e841 2300 	strex	r3, r2, [r1]
 8007e6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007e6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1e1      	bne.n	8007e36 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	3308      	adds	r3, #8
 8007e78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e7c:	e853 3f00 	ldrex	r3, [r3]
 8007e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007e82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3308      	adds	r3, #8
 8007e92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007e96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e9e:	e841 2300 	strex	r3, r2, [r1]
 8007ea2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ea4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1e3      	bne.n	8007e72 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ec0:	e853 3f00 	ldrex	r3, [r3]
 8007ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ec8:	f023 0310 	bic.w	r3, r3, #16
 8007ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007eda:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007edc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ede:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ee0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ee2:	e841 2300 	strex	r3, r2, [r1]
 8007ee6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ee8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1e4      	bne.n	8007eb8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fb fc66 	bl	80037c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2202      	movs	r2, #2
 8007efe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	4619      	mov	r1, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f92f 	bl	8008178 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007f1a:	e0fc      	b.n	8008116 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f26:	429a      	cmp	r2, r3
 8007f28:	f040 80f5 	bne.w	8008116 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0320 	and.w	r3, r3, #32
 8007f3a:	2b20      	cmp	r3, #32
 8007f3c:	f040 80eb 	bne.w	8008116 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2202      	movs	r2, #2
 8007f44:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f912 	bl	8008178 <HAL_UARTEx_RxEventCallback>
      return;
 8007f54:	e0df      	b.n	8008116 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 80d1 	beq.w	800811a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007f78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 80cc 	beq.w	800811a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8a:	e853 3f00 	ldrex	r3, [r3]
 8007f8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007fa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fa6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007faa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fac:	e841 2300 	strex	r3, r2, [r1]
 8007fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1e4      	bne.n	8007f82 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3308      	adds	r3, #8
 8007fbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc2:	e853 3f00 	ldrex	r3, [r3]
 8007fc6:	623b      	str	r3, [r7, #32]
   return(result);
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fce:	f023 0301 	bic.w	r3, r3, #1
 8007fd2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3308      	adds	r3, #8
 8007fdc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007fe0:	633a      	str	r2, [r7, #48]	@ 0x30
 8007fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e1      	bne.n	8007fb8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	e853 3f00 	ldrex	r3, [r3]
 8008014:	60fb      	str	r3, [r7, #12]
   return(result);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f023 0310 	bic.w	r3, r3, #16
 800801c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	461a      	mov	r2, r3
 8008026:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800802a:	61fb      	str	r3, [r7, #28]
 800802c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802e:	69b9      	ldr	r1, [r7, #24]
 8008030:	69fa      	ldr	r2, [r7, #28]
 8008032:	e841 2300 	strex	r3, r2, [r1]
 8008036:	617b      	str	r3, [r7, #20]
   return(result);
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e4      	bne.n	8008008 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2202      	movs	r2, #2
 8008042:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008044:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008048:	4619      	mov	r1, r3
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f894 	bl	8008178 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008050:	e063      	b.n	800811a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008056:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00e      	beq.n	800807c <HAL_UART_IRQHandler+0x5d8>
 800805e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d008      	beq.n	800807c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008072:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 ffeb 	bl	8009050 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800807a:	e051      	b.n	8008120 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800807c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008084:	2b00      	cmp	r3, #0
 8008086:	d014      	beq.n	80080b2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800808c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008090:	2b00      	cmp	r3, #0
 8008092:	d105      	bne.n	80080a0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008098:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800809c:	2b00      	cmp	r3, #0
 800809e:	d008      	beq.n	80080b2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d03a      	beq.n	800811e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	4798      	blx	r3
    }
    return;
 80080b0:	e035      	b.n	800811e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80080b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d009      	beq.n	80080d2 <HAL_UART_IRQHandler+0x62e>
 80080be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 ff95 	bl	8008ffa <UART_EndTransmit_IT>
    return;
 80080d0:	e026      	b.n	8008120 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80080d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d009      	beq.n	80080f2 <HAL_UART_IRQHandler+0x64e>
 80080de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080e2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 ffc4 	bl	8009078 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080f0:	e016      	b.n	8008120 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80080f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d010      	beq.n	8008120 <HAL_UART_IRQHandler+0x67c>
 80080fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008102:	2b00      	cmp	r3, #0
 8008104:	da0c      	bge.n	8008120 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 ffac 	bl	8009064 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800810c:	e008      	b.n	8008120 <HAL_UART_IRQHandler+0x67c>
      return;
 800810e:	bf00      	nop
 8008110:	e006      	b.n	8008120 <HAL_UART_IRQHandler+0x67c>
    return;
 8008112:	bf00      	nop
 8008114:	e004      	b.n	8008120 <HAL_UART_IRQHandler+0x67c>
      return;
 8008116:	bf00      	nop
 8008118:	e002      	b.n	8008120 <HAL_UART_IRQHandler+0x67c>
      return;
 800811a:	bf00      	nop
 800811c:	e000      	b.n	8008120 <HAL_UART_IRQHandler+0x67c>
    return;
 800811e:	bf00      	nop
  }
}
 8008120:	37e8      	adds	r7, #232	@ 0xe8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop

08008128 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	460b      	mov	r3, r1
 8008182:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008194:	b08c      	sub	sp, #48	@ 0x30
 8008196:	af00      	add	r7, sp, #0
 8008198:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	689a      	ldr	r2, [r3, #8]
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	431a      	orrs	r2, r3
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	431a      	orrs	r2, r3
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	4bab      	ldr	r3, [pc, #684]	@ (800846c <UART_SetConfig+0x2dc>)
 80081c0:	4013      	ands	r3, r2
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	6812      	ldr	r2, [r2, #0]
 80081c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081c8:	430b      	orrs	r3, r1
 80081ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	68da      	ldr	r2, [r3, #12]
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	430a      	orrs	r2, r1
 80081e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4aa0      	ldr	r2, [pc, #640]	@ (8008470 <UART_SetConfig+0x2e0>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d004      	beq.n	80081fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081f8:	4313      	orrs	r3, r2
 80081fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008206:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	6812      	ldr	r2, [r2, #0]
 800820e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008210:	430b      	orrs	r3, r1
 8008212:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821a:	f023 010f 	bic.w	r1, r3, #15
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	430a      	orrs	r2, r1
 8008228:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a91      	ldr	r2, [pc, #580]	@ (8008474 <UART_SetConfig+0x2e4>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d125      	bne.n	8008280 <UART_SetConfig+0xf0>
 8008234:	4b90      	ldr	r3, [pc, #576]	@ (8008478 <UART_SetConfig+0x2e8>)
 8008236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800823a:	f003 0303 	and.w	r3, r3, #3
 800823e:	2b03      	cmp	r3, #3
 8008240:	d81a      	bhi.n	8008278 <UART_SetConfig+0xe8>
 8008242:	a201      	add	r2, pc, #4	@ (adr r2, 8008248 <UART_SetConfig+0xb8>)
 8008244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008248:	08008259 	.word	0x08008259
 800824c:	08008269 	.word	0x08008269
 8008250:	08008261 	.word	0x08008261
 8008254:	08008271 	.word	0x08008271
 8008258:	2301      	movs	r3, #1
 800825a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800825e:	e0d6      	b.n	800840e <UART_SetConfig+0x27e>
 8008260:	2302      	movs	r3, #2
 8008262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008266:	e0d2      	b.n	800840e <UART_SetConfig+0x27e>
 8008268:	2304      	movs	r3, #4
 800826a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800826e:	e0ce      	b.n	800840e <UART_SetConfig+0x27e>
 8008270:	2308      	movs	r3, #8
 8008272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008276:	e0ca      	b.n	800840e <UART_SetConfig+0x27e>
 8008278:	2310      	movs	r3, #16
 800827a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800827e:	e0c6      	b.n	800840e <UART_SetConfig+0x27e>
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a7d      	ldr	r2, [pc, #500]	@ (800847c <UART_SetConfig+0x2ec>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d138      	bne.n	80082fc <UART_SetConfig+0x16c>
 800828a:	4b7b      	ldr	r3, [pc, #492]	@ (8008478 <UART_SetConfig+0x2e8>)
 800828c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008290:	f003 030c 	and.w	r3, r3, #12
 8008294:	2b0c      	cmp	r3, #12
 8008296:	d82d      	bhi.n	80082f4 <UART_SetConfig+0x164>
 8008298:	a201      	add	r2, pc, #4	@ (adr r2, 80082a0 <UART_SetConfig+0x110>)
 800829a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829e:	bf00      	nop
 80082a0:	080082d5 	.word	0x080082d5
 80082a4:	080082f5 	.word	0x080082f5
 80082a8:	080082f5 	.word	0x080082f5
 80082ac:	080082f5 	.word	0x080082f5
 80082b0:	080082e5 	.word	0x080082e5
 80082b4:	080082f5 	.word	0x080082f5
 80082b8:	080082f5 	.word	0x080082f5
 80082bc:	080082f5 	.word	0x080082f5
 80082c0:	080082dd 	.word	0x080082dd
 80082c4:	080082f5 	.word	0x080082f5
 80082c8:	080082f5 	.word	0x080082f5
 80082cc:	080082f5 	.word	0x080082f5
 80082d0:	080082ed 	.word	0x080082ed
 80082d4:	2300      	movs	r3, #0
 80082d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082da:	e098      	b.n	800840e <UART_SetConfig+0x27e>
 80082dc:	2302      	movs	r3, #2
 80082de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082e2:	e094      	b.n	800840e <UART_SetConfig+0x27e>
 80082e4:	2304      	movs	r3, #4
 80082e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082ea:	e090      	b.n	800840e <UART_SetConfig+0x27e>
 80082ec:	2308      	movs	r3, #8
 80082ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082f2:	e08c      	b.n	800840e <UART_SetConfig+0x27e>
 80082f4:	2310      	movs	r3, #16
 80082f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082fa:	e088      	b.n	800840e <UART_SetConfig+0x27e>
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a5f      	ldr	r2, [pc, #380]	@ (8008480 <UART_SetConfig+0x2f0>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d125      	bne.n	8008352 <UART_SetConfig+0x1c2>
 8008306:	4b5c      	ldr	r3, [pc, #368]	@ (8008478 <UART_SetConfig+0x2e8>)
 8008308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800830c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008310:	2b30      	cmp	r3, #48	@ 0x30
 8008312:	d016      	beq.n	8008342 <UART_SetConfig+0x1b2>
 8008314:	2b30      	cmp	r3, #48	@ 0x30
 8008316:	d818      	bhi.n	800834a <UART_SetConfig+0x1ba>
 8008318:	2b20      	cmp	r3, #32
 800831a:	d00a      	beq.n	8008332 <UART_SetConfig+0x1a2>
 800831c:	2b20      	cmp	r3, #32
 800831e:	d814      	bhi.n	800834a <UART_SetConfig+0x1ba>
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <UART_SetConfig+0x19a>
 8008324:	2b10      	cmp	r3, #16
 8008326:	d008      	beq.n	800833a <UART_SetConfig+0x1aa>
 8008328:	e00f      	b.n	800834a <UART_SetConfig+0x1ba>
 800832a:	2300      	movs	r3, #0
 800832c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008330:	e06d      	b.n	800840e <UART_SetConfig+0x27e>
 8008332:	2302      	movs	r3, #2
 8008334:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008338:	e069      	b.n	800840e <UART_SetConfig+0x27e>
 800833a:	2304      	movs	r3, #4
 800833c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008340:	e065      	b.n	800840e <UART_SetConfig+0x27e>
 8008342:	2308      	movs	r3, #8
 8008344:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008348:	e061      	b.n	800840e <UART_SetConfig+0x27e>
 800834a:	2310      	movs	r3, #16
 800834c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008350:	e05d      	b.n	800840e <UART_SetConfig+0x27e>
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a4b      	ldr	r2, [pc, #300]	@ (8008484 <UART_SetConfig+0x2f4>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d125      	bne.n	80083a8 <UART_SetConfig+0x218>
 800835c:	4b46      	ldr	r3, [pc, #280]	@ (8008478 <UART_SetConfig+0x2e8>)
 800835e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008362:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008366:	2bc0      	cmp	r3, #192	@ 0xc0
 8008368:	d016      	beq.n	8008398 <UART_SetConfig+0x208>
 800836a:	2bc0      	cmp	r3, #192	@ 0xc0
 800836c:	d818      	bhi.n	80083a0 <UART_SetConfig+0x210>
 800836e:	2b80      	cmp	r3, #128	@ 0x80
 8008370:	d00a      	beq.n	8008388 <UART_SetConfig+0x1f8>
 8008372:	2b80      	cmp	r3, #128	@ 0x80
 8008374:	d814      	bhi.n	80083a0 <UART_SetConfig+0x210>
 8008376:	2b00      	cmp	r3, #0
 8008378:	d002      	beq.n	8008380 <UART_SetConfig+0x1f0>
 800837a:	2b40      	cmp	r3, #64	@ 0x40
 800837c:	d008      	beq.n	8008390 <UART_SetConfig+0x200>
 800837e:	e00f      	b.n	80083a0 <UART_SetConfig+0x210>
 8008380:	2300      	movs	r3, #0
 8008382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008386:	e042      	b.n	800840e <UART_SetConfig+0x27e>
 8008388:	2302      	movs	r3, #2
 800838a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800838e:	e03e      	b.n	800840e <UART_SetConfig+0x27e>
 8008390:	2304      	movs	r3, #4
 8008392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008396:	e03a      	b.n	800840e <UART_SetConfig+0x27e>
 8008398:	2308      	movs	r3, #8
 800839a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800839e:	e036      	b.n	800840e <UART_SetConfig+0x27e>
 80083a0:	2310      	movs	r3, #16
 80083a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083a6:	e032      	b.n	800840e <UART_SetConfig+0x27e>
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a30      	ldr	r2, [pc, #192]	@ (8008470 <UART_SetConfig+0x2e0>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d12a      	bne.n	8008408 <UART_SetConfig+0x278>
 80083b2:	4b31      	ldr	r3, [pc, #196]	@ (8008478 <UART_SetConfig+0x2e8>)
 80083b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80083bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083c0:	d01a      	beq.n	80083f8 <UART_SetConfig+0x268>
 80083c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083c6:	d81b      	bhi.n	8008400 <UART_SetConfig+0x270>
 80083c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083cc:	d00c      	beq.n	80083e8 <UART_SetConfig+0x258>
 80083ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083d2:	d815      	bhi.n	8008400 <UART_SetConfig+0x270>
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d003      	beq.n	80083e0 <UART_SetConfig+0x250>
 80083d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083dc:	d008      	beq.n	80083f0 <UART_SetConfig+0x260>
 80083de:	e00f      	b.n	8008400 <UART_SetConfig+0x270>
 80083e0:	2300      	movs	r3, #0
 80083e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083e6:	e012      	b.n	800840e <UART_SetConfig+0x27e>
 80083e8:	2302      	movs	r3, #2
 80083ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ee:	e00e      	b.n	800840e <UART_SetConfig+0x27e>
 80083f0:	2304      	movs	r3, #4
 80083f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083f6:	e00a      	b.n	800840e <UART_SetConfig+0x27e>
 80083f8:	2308      	movs	r3, #8
 80083fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083fe:	e006      	b.n	800840e <UART_SetConfig+0x27e>
 8008400:	2310      	movs	r3, #16
 8008402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008406:	e002      	b.n	800840e <UART_SetConfig+0x27e>
 8008408:	2310      	movs	r3, #16
 800840a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a17      	ldr	r2, [pc, #92]	@ (8008470 <UART_SetConfig+0x2e0>)
 8008414:	4293      	cmp	r3, r2
 8008416:	f040 80a8 	bne.w	800856a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800841a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800841e:	2b08      	cmp	r3, #8
 8008420:	d834      	bhi.n	800848c <UART_SetConfig+0x2fc>
 8008422:	a201      	add	r2, pc, #4	@ (adr r2, 8008428 <UART_SetConfig+0x298>)
 8008424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008428:	0800844d 	.word	0x0800844d
 800842c:	0800848d 	.word	0x0800848d
 8008430:	08008455 	.word	0x08008455
 8008434:	0800848d 	.word	0x0800848d
 8008438:	0800845b 	.word	0x0800845b
 800843c:	0800848d 	.word	0x0800848d
 8008440:	0800848d 	.word	0x0800848d
 8008444:	0800848d 	.word	0x0800848d
 8008448:	08008463 	.word	0x08008463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800844c:	f7fd f928 	bl	80056a0 <HAL_RCC_GetPCLK1Freq>
 8008450:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008452:	e021      	b.n	8008498 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008454:	4b0c      	ldr	r3, [pc, #48]	@ (8008488 <UART_SetConfig+0x2f8>)
 8008456:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008458:	e01e      	b.n	8008498 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800845a:	f7fd f8b5 	bl	80055c8 <HAL_RCC_GetSysClockFreq>
 800845e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008460:	e01a      	b.n	8008498 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008466:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008468:	e016      	b.n	8008498 <UART_SetConfig+0x308>
 800846a:	bf00      	nop
 800846c:	cfff69f3 	.word	0xcfff69f3
 8008470:	40008000 	.word	0x40008000
 8008474:	40013800 	.word	0x40013800
 8008478:	40021000 	.word	0x40021000
 800847c:	40004400 	.word	0x40004400
 8008480:	40004800 	.word	0x40004800
 8008484:	40004c00 	.word	0x40004c00
 8008488:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800848c:	2300      	movs	r3, #0
 800848e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008496:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849a:	2b00      	cmp	r3, #0
 800849c:	f000 812a 	beq.w	80086f4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a4:	4a9e      	ldr	r2, [pc, #632]	@ (8008720 <UART_SetConfig+0x590>)
 80084a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084aa:	461a      	mov	r2, r3
 80084ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80084b2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	4613      	mov	r3, r2
 80084ba:	005b      	lsls	r3, r3, #1
 80084bc:	4413      	add	r3, r2
 80084be:	69ba      	ldr	r2, [r7, #24]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d305      	bcc.n	80084d0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084ca:	69ba      	ldr	r2, [r7, #24]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d903      	bls.n	80084d8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80084d6:	e10d      	b.n	80086f4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084da:	2200      	movs	r2, #0
 80084dc:	60bb      	str	r3, [r7, #8]
 80084de:	60fa      	str	r2, [r7, #12]
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e4:	4a8e      	ldr	r2, [pc, #568]	@ (8008720 <UART_SetConfig+0x590>)
 80084e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	2200      	movs	r2, #0
 80084ee:	603b      	str	r3, [r7, #0]
 80084f0:	607a      	str	r2, [r7, #4]
 80084f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084fa:	f7f8 fbed 	bl	8000cd8 <__aeabi_uldivmod>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	4610      	mov	r0, r2
 8008504:	4619      	mov	r1, r3
 8008506:	f04f 0200 	mov.w	r2, #0
 800850a:	f04f 0300 	mov.w	r3, #0
 800850e:	020b      	lsls	r3, r1, #8
 8008510:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008514:	0202      	lsls	r2, r0, #8
 8008516:	6979      	ldr	r1, [r7, #20]
 8008518:	6849      	ldr	r1, [r1, #4]
 800851a:	0849      	lsrs	r1, r1, #1
 800851c:	2000      	movs	r0, #0
 800851e:	460c      	mov	r4, r1
 8008520:	4605      	mov	r5, r0
 8008522:	eb12 0804 	adds.w	r8, r2, r4
 8008526:	eb43 0905 	adc.w	r9, r3, r5
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	469a      	mov	sl, r3
 8008532:	4693      	mov	fp, r2
 8008534:	4652      	mov	r2, sl
 8008536:	465b      	mov	r3, fp
 8008538:	4640      	mov	r0, r8
 800853a:	4649      	mov	r1, r9
 800853c:	f7f8 fbcc 	bl	8000cd8 <__aeabi_uldivmod>
 8008540:	4602      	mov	r2, r0
 8008542:	460b      	mov	r3, r1
 8008544:	4613      	mov	r3, r2
 8008546:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800854e:	d308      	bcc.n	8008562 <UART_SetConfig+0x3d2>
 8008550:	6a3b      	ldr	r3, [r7, #32]
 8008552:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008556:	d204      	bcs.n	8008562 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6a3a      	ldr	r2, [r7, #32]
 800855e:	60da      	str	r2, [r3, #12]
 8008560:	e0c8      	b.n	80086f4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008568:	e0c4      	b.n	80086f4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	69db      	ldr	r3, [r3, #28]
 800856e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008572:	d167      	bne.n	8008644 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008574:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008578:	2b08      	cmp	r3, #8
 800857a:	d828      	bhi.n	80085ce <UART_SetConfig+0x43e>
 800857c:	a201      	add	r2, pc, #4	@ (adr r2, 8008584 <UART_SetConfig+0x3f4>)
 800857e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008582:	bf00      	nop
 8008584:	080085a9 	.word	0x080085a9
 8008588:	080085b1 	.word	0x080085b1
 800858c:	080085b9 	.word	0x080085b9
 8008590:	080085cf 	.word	0x080085cf
 8008594:	080085bf 	.word	0x080085bf
 8008598:	080085cf 	.word	0x080085cf
 800859c:	080085cf 	.word	0x080085cf
 80085a0:	080085cf 	.word	0x080085cf
 80085a4:	080085c7 	.word	0x080085c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085a8:	f7fd f87a 	bl	80056a0 <HAL_RCC_GetPCLK1Freq>
 80085ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085ae:	e014      	b.n	80085da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085b0:	f7fd f88c 	bl	80056cc <HAL_RCC_GetPCLK2Freq>
 80085b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085b6:	e010      	b.n	80085da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085b8:	4b5a      	ldr	r3, [pc, #360]	@ (8008724 <UART_SetConfig+0x594>)
 80085ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085bc:	e00d      	b.n	80085da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085be:	f7fd f803 	bl	80055c8 <HAL_RCC_GetSysClockFreq>
 80085c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085c4:	e009      	b.n	80085da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085cc:	e005      	b.n	80085da <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80085ce:	2300      	movs	r3, #0
 80085d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80085d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 8089 	beq.w	80086f4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e6:	4a4e      	ldr	r2, [pc, #312]	@ (8008720 <UART_SetConfig+0x590>)
 80085e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085ec:	461a      	mov	r2, r3
 80085ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80085f4:	005a      	lsls	r2, r3, #1
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	085b      	lsrs	r3, r3, #1
 80085fc:	441a      	add	r2, r3
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	fbb2 f3f3 	udiv	r3, r2, r3
 8008606:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	2b0f      	cmp	r3, #15
 800860c:	d916      	bls.n	800863c <UART_SetConfig+0x4ac>
 800860e:	6a3b      	ldr	r3, [r7, #32]
 8008610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008614:	d212      	bcs.n	800863c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	b29b      	uxth	r3, r3
 800861a:	f023 030f 	bic.w	r3, r3, #15
 800861e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008620:	6a3b      	ldr	r3, [r7, #32]
 8008622:	085b      	lsrs	r3, r3, #1
 8008624:	b29b      	uxth	r3, r3
 8008626:	f003 0307 	and.w	r3, r3, #7
 800862a:	b29a      	uxth	r2, r3
 800862c:	8bfb      	ldrh	r3, [r7, #30]
 800862e:	4313      	orrs	r3, r2
 8008630:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	8bfa      	ldrh	r2, [r7, #30]
 8008638:	60da      	str	r2, [r3, #12]
 800863a:	e05b      	b.n	80086f4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008642:	e057      	b.n	80086f4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008644:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008648:	2b08      	cmp	r3, #8
 800864a:	d828      	bhi.n	800869e <UART_SetConfig+0x50e>
 800864c:	a201      	add	r2, pc, #4	@ (adr r2, 8008654 <UART_SetConfig+0x4c4>)
 800864e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008652:	bf00      	nop
 8008654:	08008679 	.word	0x08008679
 8008658:	08008681 	.word	0x08008681
 800865c:	08008689 	.word	0x08008689
 8008660:	0800869f 	.word	0x0800869f
 8008664:	0800868f 	.word	0x0800868f
 8008668:	0800869f 	.word	0x0800869f
 800866c:	0800869f 	.word	0x0800869f
 8008670:	0800869f 	.word	0x0800869f
 8008674:	08008697 	.word	0x08008697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008678:	f7fd f812 	bl	80056a0 <HAL_RCC_GetPCLK1Freq>
 800867c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800867e:	e014      	b.n	80086aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008680:	f7fd f824 	bl	80056cc <HAL_RCC_GetPCLK2Freq>
 8008684:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008686:	e010      	b.n	80086aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008688:	4b26      	ldr	r3, [pc, #152]	@ (8008724 <UART_SetConfig+0x594>)
 800868a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800868c:	e00d      	b.n	80086aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800868e:	f7fc ff9b 	bl	80055c8 <HAL_RCC_GetSysClockFreq>
 8008692:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008694:	e009      	b.n	80086aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800869a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800869c:	e005      	b.n	80086aa <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800869e:	2300      	movs	r3, #0
 80086a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80086a8:	bf00      	nop
    }

    if (pclk != 0U)
 80086aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d021      	beq.n	80086f4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086b4:	4a1a      	ldr	r2, [pc, #104]	@ (8008720 <UART_SetConfig+0x590>)
 80086b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086ba:	461a      	mov	r2, r3
 80086bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086be:	fbb3 f2f2 	udiv	r2, r3, r2
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	085b      	lsrs	r3, r3, #1
 80086c8:	441a      	add	r2, r3
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086d4:	6a3b      	ldr	r3, [r7, #32]
 80086d6:	2b0f      	cmp	r3, #15
 80086d8:	d909      	bls.n	80086ee <UART_SetConfig+0x55e>
 80086da:	6a3b      	ldr	r3, [r7, #32]
 80086dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086e0:	d205      	bcs.n	80086ee <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	60da      	str	r2, [r3, #12]
 80086ec:	e002      	b.n	80086f4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	2201      	movs	r2, #1
 8008700:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	2200      	movs	r2, #0
 8008708:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	2200      	movs	r2, #0
 800870e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008710:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008714:	4618      	mov	r0, r3
 8008716:	3730      	adds	r7, #48	@ 0x30
 8008718:	46bd      	mov	sp, r7
 800871a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800871e:	bf00      	nop
 8008720:	0800fbb0 	.word	0x0800fbb0
 8008724:	00f42400 	.word	0x00f42400

08008728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008734:	f003 0308 	and.w	r3, r3, #8
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00a      	beq.n	8008752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	430a      	orrs	r2, r1
 8008750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	430a      	orrs	r2, r1
 8008772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008778:	f003 0302 	and.w	r3, r3, #2
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00a      	beq.n	8008796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	430a      	orrs	r2, r1
 8008794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800879a:	f003 0304 	and.w	r3, r3, #4
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00a      	beq.n	80087b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	430a      	orrs	r2, r1
 80087b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087bc:	f003 0310 	and.w	r3, r3, #16
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00a      	beq.n	80087da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	430a      	orrs	r2, r1
 80087d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087de:	f003 0320 	and.w	r3, r3, #32
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00a      	beq.n	80087fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	430a      	orrs	r2, r1
 80087fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008804:	2b00      	cmp	r3, #0
 8008806:	d01a      	beq.n	800883e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008822:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008826:	d10a      	bne.n	800883e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	430a      	orrs	r2, r1
 800883c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00a      	beq.n	8008860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	430a      	orrs	r2, r1
 800885e:	605a      	str	r2, [r3, #4]
  }
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b098      	sub	sp, #96	@ 0x60
 8008870:	af02      	add	r7, sp, #8
 8008872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800887c:	f7fa fd72 	bl	8003364 <HAL_GetTick>
 8008880:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 0308 	and.w	r3, r3, #8
 800888c:	2b08      	cmp	r3, #8
 800888e:	d12f      	bne.n	80088f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008890:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008898:	2200      	movs	r2, #0
 800889a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f88e 	bl	80089c0 <UART_WaitOnFlagUntilTimeout>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d022      	beq.n	80088f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b2:	e853 3f00 	ldrex	r3, [r3]
 80088b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088be:	653b      	str	r3, [r7, #80]	@ 0x50
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	461a      	mov	r2, r3
 80088c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80088ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088d0:	e841 2300 	strex	r3, r2, [r1]
 80088d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1e6      	bne.n	80088aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2220      	movs	r2, #32
 80088e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e063      	b.n	80089b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 0304 	and.w	r3, r3, #4
 80088fa:	2b04      	cmp	r3, #4
 80088fc:	d149      	bne.n	8008992 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008906:	2200      	movs	r2, #0
 8008908:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f857 	bl	80089c0 <UART_WaitOnFlagUntilTimeout>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d03c      	beq.n	8008992 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008920:	e853 3f00 	ldrex	r3, [r3]
 8008924:	623b      	str	r3, [r7, #32]
   return(result);
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800892c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	461a      	mov	r2, r3
 8008934:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008936:	633b      	str	r3, [r7, #48]	@ 0x30
 8008938:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800893c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800893e:	e841 2300 	strex	r3, r2, [r1]
 8008942:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1e6      	bne.n	8008918 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	3308      	adds	r3, #8
 8008950:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	e853 3f00 	ldrex	r3, [r3]
 8008958:	60fb      	str	r3, [r7, #12]
   return(result);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f023 0301 	bic.w	r3, r3, #1
 8008960:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	3308      	adds	r3, #8
 8008968:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800896a:	61fa      	str	r2, [r7, #28]
 800896c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896e:	69b9      	ldr	r1, [r7, #24]
 8008970:	69fa      	ldr	r2, [r7, #28]
 8008972:	e841 2300 	strex	r3, r2, [r1]
 8008976:	617b      	str	r3, [r7, #20]
   return(result);
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1e5      	bne.n	800894a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2220      	movs	r2, #32
 8008982:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e012      	b.n	80089b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2220      	movs	r2, #32
 8008996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2220      	movs	r2, #32
 800899e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3758      	adds	r7, #88	@ 0x58
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	603b      	str	r3, [r7, #0]
 80089cc:	4613      	mov	r3, r2
 80089ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089d0:	e04f      	b.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d8:	d04b      	beq.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089da:	f7fa fcc3 	bl	8003364 <HAL_GetTick>
 80089de:	4602      	mov	r2, r0
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	69ba      	ldr	r2, [r7, #24]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d302      	bcc.n	80089f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d101      	bne.n	80089f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80089f0:	2303      	movs	r3, #3
 80089f2:	e04e      	b.n	8008a92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 0304 	and.w	r3, r3, #4
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d037      	beq.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	2b80      	cmp	r3, #128	@ 0x80
 8008a06:	d034      	beq.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	2b40      	cmp	r3, #64	@ 0x40
 8008a0c:	d031      	beq.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	f003 0308 	and.w	r3, r3, #8
 8008a18:	2b08      	cmp	r3, #8
 8008a1a:	d110      	bne.n	8008a3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2208      	movs	r2, #8
 8008a22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 f920 	bl	8008c6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2208      	movs	r2, #8
 8008a2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e029      	b.n	8008a92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	69db      	ldr	r3, [r3, #28]
 8008a44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a4c:	d111      	bne.n	8008a72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f000 f906 	bl	8008c6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2220      	movs	r2, #32
 8008a62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e00f      	b.n	8008a92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	69da      	ldr	r2, [r3, #28]
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	bf0c      	ite	eq
 8008a82:	2301      	moveq	r3, #1
 8008a84:	2300      	movne	r3, #0
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	461a      	mov	r2, r3
 8008a8a:	79fb      	ldrb	r3, [r7, #7]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d0a0      	beq.n	80089d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
	...

08008a9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b096      	sub	sp, #88	@ 0x58
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	88fa      	ldrh	r2, [r7, #6]
 8008ab4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2222      	movs	r2, #34	@ 0x22
 8008ac4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d02d      	beq.n	8008b2e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ad8:	4a40      	ldr	r2, [pc, #256]	@ (8008bdc <UART_Start_Receive_DMA+0x140>)
 8008ada:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ae2:	4a3f      	ldr	r2, [pc, #252]	@ (8008be0 <UART_Start_Receive_DMA+0x144>)
 8008ae4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008aec:	4a3d      	ldr	r2, [pc, #244]	@ (8008be4 <UART_Start_Receive_DMA+0x148>)
 8008aee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008af6:	2200      	movs	r2, #0
 8008af8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3324      	adds	r3, #36	@ 0x24
 8008b06:	4619      	mov	r1, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	88fb      	ldrh	r3, [r7, #6]
 8008b10:	f7fa fdde 	bl	80036d0 <HAL_DMA_Start_IT>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d009      	beq.n	8008b2e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2210      	movs	r2, #16
 8008b1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2220      	movs	r2, #32
 8008b26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e051      	b.n	8008bd2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d018      	beq.n	8008b68 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b3e:	e853 3f00 	ldrex	r3, [r3]
 8008b42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	461a      	mov	r2, r3
 8008b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b56:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b58:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008b5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b5c:	e841 2300 	strex	r3, r2, [r1]
 8008b60:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1e6      	bne.n	8008b36 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3308      	adds	r3, #8
 8008b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b72:	e853 3f00 	ldrex	r3, [r3]
 8008b76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7a:	f043 0301 	orr.w	r3, r3, #1
 8008b7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3308      	adds	r3, #8
 8008b86:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008b88:	637a      	str	r2, [r7, #52]	@ 0x34
 8008b8a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008b8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b90:	e841 2300 	strex	r3, r2, [r1]
 8008b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1e5      	bne.n	8008b68 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	3308      	adds	r3, #8
 8008ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	e853 3f00 	ldrex	r3, [r3]
 8008baa:	613b      	str	r3, [r7, #16]
   return(result);
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	3308      	adds	r3, #8
 8008bba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008bbc:	623a      	str	r2, [r7, #32]
 8008bbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc0:	69f9      	ldr	r1, [r7, #28]
 8008bc2:	6a3a      	ldr	r2, [r7, #32]
 8008bc4:	e841 2300 	strex	r3, r2, [r1]
 8008bc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1e5      	bne.n	8008b9c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3758      	adds	r7, #88	@ 0x58
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	08008ded 	.word	0x08008ded
 8008be0:	08008f19 	.word	0x08008f19
 8008be4:	08008f57 	.word	0x08008f57

08008be8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b08f      	sub	sp, #60	@ 0x3c
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf6:	6a3b      	ldr	r3, [r7, #32]
 8008bf8:	e853 3f00 	ldrex	r3, [r3]
 8008bfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c10:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c16:	e841 2300 	strex	r3, r2, [r1]
 8008c1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1e6      	bne.n	8008bf0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	3308      	adds	r3, #8
 8008c28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	e853 3f00 	ldrex	r3, [r3]
 8008c30:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008c38:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3308      	adds	r3, #8
 8008c40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c42:	61ba      	str	r2, [r7, #24]
 8008c44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c46:	6979      	ldr	r1, [r7, #20]
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	e841 2300 	strex	r3, r2, [r1]
 8008c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1e5      	bne.n	8008c22 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2220      	movs	r2, #32
 8008c5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008c5e:	bf00      	nop
 8008c60:	373c      	adds	r7, #60	@ 0x3c
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr

08008c6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b095      	sub	sp, #84	@ 0x54
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c7a:	e853 3f00 	ldrex	r3, [r3]
 8008c7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c90:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c98:	e841 2300 	strex	r3, r2, [r1]
 8008c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1e6      	bne.n	8008c72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	3308      	adds	r3, #8
 8008caa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	e853 3f00 	ldrex	r3, [r3]
 8008cb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008cba:	f023 0301 	bic.w	r3, r3, #1
 8008cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	3308      	adds	r3, #8
 8008cc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008cca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ccc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cd0:	e841 2300 	strex	r3, r2, [r1]
 8008cd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1e3      	bne.n	8008ca4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d118      	bne.n	8008d16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	e853 3f00 	ldrex	r3, [r3]
 8008cf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	f023 0310 	bic.w	r3, r3, #16
 8008cf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d02:	61bb      	str	r3, [r7, #24]
 8008d04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d06:	6979      	ldr	r1, [r7, #20]
 8008d08:	69ba      	ldr	r2, [r7, #24]
 8008d0a:	e841 2300 	strex	r3, r2, [r1]
 8008d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1e6      	bne.n	8008ce4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2220      	movs	r2, #32
 8008d1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008d2a:	bf00      	nop
 8008d2c:	3754      	adds	r7, #84	@ 0x54
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b090      	sub	sp, #64	@ 0x40
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d42:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0320 	and.w	r3, r3, #32
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d137      	bne.n	8008dc2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d54:	2200      	movs	r2, #0
 8008d56:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3308      	adds	r3, #8
 8008d60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d64:	e853 3f00 	ldrex	r3, [r3]
 8008d68:	623b      	str	r3, [r7, #32]
   return(result);
 8008d6a:	6a3b      	ldr	r3, [r7, #32]
 8008d6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	3308      	adds	r3, #8
 8008d78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d82:	e841 2300 	strex	r3, r2, [r1]
 8008d86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1e5      	bne.n	8008d5a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	e853 3f00 	ldrex	r3, [r3]
 8008d9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008da2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	461a      	mov	r2, r3
 8008daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dac:	61fb      	str	r3, [r7, #28]
 8008dae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db0:	69b9      	ldr	r1, [r7, #24]
 8008db2:	69fa      	ldr	r2, [r7, #28]
 8008db4:	e841 2300 	strex	r3, r2, [r1]
 8008db8:	617b      	str	r3, [r7, #20]
   return(result);
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e6      	bne.n	8008d8e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008dc0:	e002      	b.n	8008dc8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008dc2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008dc4:	f7ff f9b0 	bl	8008128 <HAL_UART_TxCpltCallback>
}
 8008dc8:	bf00      	nop
 8008dca:	3740      	adds	r7, #64	@ 0x40
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ddc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f7ff f9ac 	bl	800813c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008de4:	bf00      	nop
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b09c      	sub	sp, #112	@ 0x70
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008df8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 0320 	and.w	r3, r3, #32
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d171      	bne.n	8008eec <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008e08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e18:	e853 3f00 	ldrex	r3, [r3]
 8008e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e30:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e36:	e841 2300 	strex	r3, r2, [r1]
 8008e3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1e6      	bne.n	8008e10 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	3308      	adds	r3, #8
 8008e48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e4c:	e853 3f00 	ldrex	r3, [r3]
 8008e50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e54:	f023 0301 	bic.w	r3, r3, #1
 8008e58:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	3308      	adds	r3, #8
 8008e60:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008e62:	647a      	str	r2, [r7, #68]	@ 0x44
 8008e64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e6a:	e841 2300 	strex	r3, r2, [r1]
 8008e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d1e5      	bne.n	8008e42 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	3308      	adds	r3, #8
 8008e7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e80:	e853 3f00 	ldrex	r3, [r3]
 8008e84:	623b      	str	r3, [r7, #32]
   return(result);
 8008e86:	6a3b      	ldr	r3, [r7, #32]
 8008e88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3308      	adds	r3, #8
 8008e94:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e96:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e9e:	e841 2300 	strex	r3, r2, [r1]
 8008ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1e5      	bne.n	8008e76 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008eaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008eac:	2220      	movs	r2, #32
 8008eae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d118      	bne.n	8008eec <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	e853 3f00 	ldrex	r3, [r3]
 8008ec6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f023 0310 	bic.w	r3, r3, #16
 8008ece:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ed0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ed8:	61fb      	str	r3, [r7, #28]
 8008eda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008edc:	69b9      	ldr	r1, [r7, #24]
 8008ede:	69fa      	ldr	r2, [r7, #28]
 8008ee0:	e841 2300 	strex	r3, r2, [r1]
 8008ee4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1e6      	bne.n	8008eba <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008eec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008eee:	2200      	movs	r2, #0
 8008ef0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ef2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ef4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d107      	bne.n	8008f0a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008efa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008efc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f00:	4619      	mov	r1, r3
 8008f02:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008f04:	f7ff f938 	bl	8008178 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f08:	e002      	b.n	8008f10 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008f0a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008f0c:	f7f9 fb32 	bl	8002574 <HAL_UART_RxCpltCallback>
}
 8008f10:	bf00      	nop
 8008f12:	3770      	adds	r7, #112	@ 0x70
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f24:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d109      	bne.n	8008f48 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f3a:	085b      	lsrs	r3, r3, #1
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	4619      	mov	r1, r3
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f7ff f919 	bl	8008178 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f46:	e002      	b.n	8008f4e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f7ff f901 	bl	8008150 <HAL_UART_RxHalfCpltCallback>
}
 8008f4e:	bf00      	nop
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b086      	sub	sp, #24
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f62:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f6a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f72:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f7e:	2b80      	cmp	r3, #128	@ 0x80
 8008f80:	d109      	bne.n	8008f96 <UART_DMAError+0x40>
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	2b21      	cmp	r3, #33	@ 0x21
 8008f86:	d106      	bne.n	8008f96 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008f90:	6978      	ldr	r0, [r7, #20]
 8008f92:	f7ff fe29 	bl	8008be8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fa0:	2b40      	cmp	r3, #64	@ 0x40
 8008fa2:	d109      	bne.n	8008fb8 <UART_DMAError+0x62>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2b22      	cmp	r3, #34	@ 0x22
 8008fa8:	d106      	bne.n	8008fb8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008fb2:	6978      	ldr	r0, [r7, #20]
 8008fb4:	f7ff fe59 	bl	8008c6a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fbe:	f043 0210 	orr.w	r2, r3, #16
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fc8:	6978      	ldr	r0, [r7, #20]
 8008fca:	f7ff f8cb 	bl	8008164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fce:	bf00      	nop
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b084      	sub	sp, #16
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f7ff f8b9 	bl	8008164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ff2:	bf00      	nop
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b088      	sub	sp, #32
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	e853 3f00 	ldrex	r3, [r3]
 800900e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009016:	61fb      	str	r3, [r7, #28]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	461a      	mov	r2, r3
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	61bb      	str	r3, [r7, #24]
 8009022:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009024:	6979      	ldr	r1, [r7, #20]
 8009026:	69ba      	ldr	r2, [r7, #24]
 8009028:	e841 2300 	strex	r3, r2, [r1]
 800902c:	613b      	str	r3, [r7, #16]
   return(result);
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1e6      	bne.n	8009002 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2220      	movs	r2, #32
 8009038:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7ff f870 	bl	8008128 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009048:	bf00      	nop
 800904a:	3720      	adds	r7, #32
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009058:	bf00      	nop
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009080:	bf00      	nop
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800909a:	2b01      	cmp	r3, #1
 800909c:	d101      	bne.n	80090a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800909e:	2302      	movs	r3, #2
 80090a0:	e027      	b.n	80090f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2224      	movs	r2, #36	@ 0x24
 80090ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f022 0201 	bic.w	r2, r2, #1
 80090c8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80090d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2220      	movs	r2, #32
 80090e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr

080090fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b084      	sub	sp, #16
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800910e:	2b01      	cmp	r3, #1
 8009110:	d101      	bne.n	8009116 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009112:	2302      	movs	r3, #2
 8009114:	e02d      	b.n	8009172 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2201      	movs	r2, #1
 800911a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2224      	movs	r2, #36	@ 0x24
 8009122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f022 0201 	bic.w	r2, r2, #1
 800913c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	683a      	ldr	r2, [r7, #0]
 800914e:	430a      	orrs	r2, r1
 8009150:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 f850 	bl	80091f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2220      	movs	r2, #32
 8009164:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b084      	sub	sp, #16
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
 8009182:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800918a:	2b01      	cmp	r3, #1
 800918c:	d101      	bne.n	8009192 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800918e:	2302      	movs	r3, #2
 8009190:	e02d      	b.n	80091ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2201      	movs	r2, #1
 8009196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2224      	movs	r2, #36	@ 0x24
 800919e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f022 0201 	bic.w	r2, r2, #1
 80091b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	683a      	ldr	r2, [r7, #0]
 80091ca:	430a      	orrs	r2, r1
 80091cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f812 	bl	80091f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2220      	movs	r2, #32
 80091e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
	...

080091f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009204:	2b00      	cmp	r3, #0
 8009206:	d108      	bne.n	800921a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009218:	e031      	b.n	800927e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800921a:	2308      	movs	r3, #8
 800921c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800921e:	2308      	movs	r3, #8
 8009220:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	0e5b      	lsrs	r3, r3, #25
 800922a:	b2db      	uxtb	r3, r3
 800922c:	f003 0307 	and.w	r3, r3, #7
 8009230:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	0f5b      	lsrs	r3, r3, #29
 800923a:	b2db      	uxtb	r3, r3
 800923c:	f003 0307 	and.w	r3, r3, #7
 8009240:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009242:	7bbb      	ldrb	r3, [r7, #14]
 8009244:	7b3a      	ldrb	r2, [r7, #12]
 8009246:	4911      	ldr	r1, [pc, #68]	@ (800928c <UARTEx_SetNbDataToProcess+0x94>)
 8009248:	5c8a      	ldrb	r2, [r1, r2]
 800924a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800924e:	7b3a      	ldrb	r2, [r7, #12]
 8009250:	490f      	ldr	r1, [pc, #60]	@ (8009290 <UARTEx_SetNbDataToProcess+0x98>)
 8009252:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009254:	fb93 f3f2 	sdiv	r3, r3, r2
 8009258:	b29a      	uxth	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009260:	7bfb      	ldrb	r3, [r7, #15]
 8009262:	7b7a      	ldrb	r2, [r7, #13]
 8009264:	4909      	ldr	r1, [pc, #36]	@ (800928c <UARTEx_SetNbDataToProcess+0x94>)
 8009266:	5c8a      	ldrb	r2, [r1, r2]
 8009268:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800926c:	7b7a      	ldrb	r2, [r7, #13]
 800926e:	4908      	ldr	r1, [pc, #32]	@ (8009290 <UARTEx_SetNbDataToProcess+0x98>)
 8009270:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009272:	fb93 f3f2 	sdiv	r3, r3, r2
 8009276:	b29a      	uxth	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800927e:	bf00      	nop
 8009280:	3714      	adds	r7, #20
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	0800fbc8 	.word	0x0800fbc8
 8009290:	0800fbd0 	.word	0x0800fbd0

08009294 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800929e:	2300      	movs	r3, #0
 80092a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80092a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80092a6:	2b84      	cmp	r3, #132	@ 0x84
 80092a8:	d005      	beq.n	80092b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80092aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	4413      	add	r3, r2
 80092b2:	3303      	adds	r3, #3
 80092b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80092b6:	68fb      	ldr	r3, [r7, #12]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80092c8:	f000 fa74 	bl	80097b4 <vTaskStartScheduler>
  
  return osOK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80092d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092d4:	b087      	sub	sp, #28
 80092d6:	af02      	add	r7, sp, #8
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	685c      	ldr	r4, [r3, #4]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092e8:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7ff ffcf 	bl	8009294 <makeFreeRtosPriority>
 80092f6:	4602      	mov	r2, r0
 80092f8:	f107 030c 	add.w	r3, r7, #12
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	9200      	str	r2, [sp, #0]
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	4632      	mov	r2, r6
 8009304:	4629      	mov	r1, r5
 8009306:	4620      	mov	r0, r4
 8009308:	f000 f8d2 	bl	80094b0 <xTaskCreate>
 800930c:	4603      	mov	r3, r0
 800930e:	2b01      	cmp	r3, #1
 8009310:	d001      	beq.n	8009316 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8009312:	2300      	movs	r3, #0
 8009314:	e000      	b.n	8009318 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8009316:	68fb      	ldr	r3, [r7, #12]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3714      	adds	r7, #20
 800931c:	46bd      	mov	sp, r7
 800931e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009320 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d001      	beq.n	8009336 <osDelay+0x16>
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	e000      	b.n	8009338 <osDelay+0x18>
 8009336:	2301      	movs	r3, #1
 8009338:	4618      	mov	r0, r3
 800933a:	f000 fa05 	bl	8009748 <vTaskDelay>
  
  return osOK;
 800933e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f103 0208 	add.w	r2, r3, #8
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f04f 32ff 	mov.w	r2, #4294967295
 8009360:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f103 0208 	add.w	r2, r3, #8
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f103 0208 	add.w	r2, r3, #8
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009396:	bf00      	nop
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr

080093a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093a2:	b480      	push	{r7}
 80093a4:	b085      	sub	sp, #20
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	689a      	ldr	r2, [r3, #8]
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	683a      	ldr	r2, [r7, #0]
 80093c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	683a      	ldr	r2, [r7, #0]
 80093cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	1c5a      	adds	r2, r3, #1
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	601a      	str	r2, [r3, #0]
}
 80093de:	bf00      	nop
 80093e0:	3714      	adds	r7, #20
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093ea:	b480      	push	{r7}
 80093ec:	b085      	sub	sp, #20
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009400:	d103      	bne.n	800940a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	60fb      	str	r3, [r7, #12]
 8009408:	e00c      	b.n	8009424 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	3308      	adds	r3, #8
 800940e:	60fb      	str	r3, [r7, #12]
 8009410:	e002      	b.n	8009418 <vListInsert+0x2e>
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	60fb      	str	r3, [r7, #12]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	429a      	cmp	r2, r3
 8009422:	d2f6      	bcs.n	8009412 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	685a      	ldr	r2, [r3, #4]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	683a      	ldr	r2, [r7, #0]
 800943e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	1c5a      	adds	r2, r3, #1
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	601a      	str	r2, [r3, #0]
}
 8009450:	bf00      	nop
 8009452:	3714      	adds	r7, #20
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	6892      	ldr	r2, [r2, #8]
 8009472:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	6852      	ldr	r2, [r2, #4]
 800947c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	429a      	cmp	r2, r3
 8009486:	d103      	bne.n	8009490 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	689a      	ldr	r2, [r3, #8]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	1e5a      	subs	r2, r3, #1
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3714      	adds	r7, #20
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b08c      	sub	sp, #48	@ 0x30
 80094b4:	af04      	add	r7, sp, #16
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	603b      	str	r3, [r7, #0]
 80094bc:	4613      	mov	r3, r2
 80094be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80094c0:	88fb      	ldrh	r3, [r7, #6]
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	4618      	mov	r0, r3
 80094c6:	f001 f9f1 	bl	800a8ac <pvPortMalloc>
 80094ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00e      	beq.n	80094f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80094d2:	20a0      	movs	r0, #160	@ 0xa0
 80094d4:	f001 f9ea 	bl	800a8ac <pvPortMalloc>
 80094d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d003      	beq.n	80094e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80094e6:	e005      	b.n	80094f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80094e8:	6978      	ldr	r0, [r7, #20]
 80094ea:	f001 faad 	bl	800aa48 <vPortFree>
 80094ee:	e001      	b.n	80094f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80094f0:	2300      	movs	r3, #0
 80094f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d013      	beq.n	8009522 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80094fa:	88fa      	ldrh	r2, [r7, #6]
 80094fc:	2300      	movs	r3, #0
 80094fe:	9303      	str	r3, [sp, #12]
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	9302      	str	r3, [sp, #8]
 8009504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009506:	9301      	str	r3, [sp, #4]
 8009508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	68b9      	ldr	r1, [r7, #8]
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f000 f80f 	bl	8009534 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009516:	69f8      	ldr	r0, [r7, #28]
 8009518:	f000 f8ac 	bl	8009674 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800951c:	2301      	movs	r3, #1
 800951e:	61bb      	str	r3, [r7, #24]
 8009520:	e002      	b.n	8009528 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009522:	f04f 33ff 	mov.w	r3, #4294967295
 8009526:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009528:	69bb      	ldr	r3, [r7, #24]
	}
 800952a:	4618      	mov	r0, r3
 800952c:	3720      	adds	r7, #32
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
	...

08009534 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b088      	sub	sp, #32
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
 8009540:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009544:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800954c:	3b01      	subs	r3, #1
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	f023 0307 	bic.w	r3, r3, #7
 800955a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	f003 0307 	and.w	r3, r3, #7
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00b      	beq.n	800957e <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009578:	bf00      	nop
 800957a:	bf00      	nop
 800957c:	e7fd      	b.n	800957a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d01f      	beq.n	80095c4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009584:	2300      	movs	r3, #0
 8009586:	61fb      	str	r3, [r7, #28]
 8009588:	e012      	b.n	80095b0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	4413      	add	r3, r2
 8009590:	7819      	ldrb	r1, [r3, #0]
 8009592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	4413      	add	r3, r2
 8009598:	3334      	adds	r3, #52	@ 0x34
 800959a:	460a      	mov	r2, r1
 800959c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	4413      	add	r3, r2
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d006      	beq.n	80095b8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	3301      	adds	r3, #1
 80095ae:	61fb      	str	r3, [r7, #28]
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	2b0f      	cmp	r3, #15
 80095b4:	d9e9      	bls.n	800958a <prvInitialiseNewTask+0x56>
 80095b6:	e000      	b.n	80095ba <prvInitialiseNewTask+0x86>
			{
				break;
 80095b8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80095ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80095c2:	e003      	b.n	80095cc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80095c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c6:	2200      	movs	r2, #0
 80095c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80095cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ce:	2b06      	cmp	r3, #6
 80095d0:	d901      	bls.n	80095d6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80095d2:	2306      	movs	r3, #6
 80095d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80095d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095da:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80095dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095e0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80095e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e4:	2200      	movs	r2, #0
 80095e6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80095e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ea:	3304      	adds	r3, #4
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7ff fecb 	bl	8009388 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80095f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f4:	3318      	adds	r3, #24
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7ff fec6 	bl	8009388 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80095fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009600:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009604:	f1c3 0207 	rsb	r2, r3, #7
 8009608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800960c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009610:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009614:	2200      	movs	r2, #0
 8009616:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800961a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961c:	2200      	movs	r2, #0
 800961e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009624:	334c      	adds	r3, #76	@ 0x4c
 8009626:	224c      	movs	r2, #76	@ 0x4c
 8009628:	2100      	movs	r1, #0
 800962a:	4618      	mov	r0, r3
 800962c:	f002 fbc2 	bl	800bdb4 <memset>
 8009630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009632:	4a0d      	ldr	r2, [pc, #52]	@ (8009668 <prvInitialiseNewTask+0x134>)
 8009634:	651a      	str	r2, [r3, #80]	@ 0x50
 8009636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009638:	4a0c      	ldr	r2, [pc, #48]	@ (800966c <prvInitialiseNewTask+0x138>)
 800963a:	655a      	str	r2, [r3, #84]	@ 0x54
 800963c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963e:	4a0c      	ldr	r2, [pc, #48]	@ (8009670 <prvInitialiseNewTask+0x13c>)
 8009640:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	68f9      	ldr	r1, [r7, #12]
 8009646:	69b8      	ldr	r0, [r7, #24]
 8009648:	f000 fedc 	bl	800a404 <pxPortInitialiseStack>
 800964c:	4602      	mov	r2, r0
 800964e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009650:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009654:	2b00      	cmp	r3, #0
 8009656:	d002      	beq.n	800965e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800965a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800965c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800965e:	bf00      	nop
 8009660:	3720      	adds	r7, #32
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	20002250 	.word	0x20002250
 800966c:	200022b8 	.word	0x200022b8
 8009670:	20002320 	.word	0x20002320

08009674 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800967c:	f000 fff4 	bl	800a668 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009680:	4b2a      	ldr	r3, [pc, #168]	@ (800972c <prvAddNewTaskToReadyList+0xb8>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	3301      	adds	r3, #1
 8009686:	4a29      	ldr	r2, [pc, #164]	@ (800972c <prvAddNewTaskToReadyList+0xb8>)
 8009688:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800968a:	4b29      	ldr	r3, [pc, #164]	@ (8009730 <prvAddNewTaskToReadyList+0xbc>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d109      	bne.n	80096a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009692:	4a27      	ldr	r2, [pc, #156]	@ (8009730 <prvAddNewTaskToReadyList+0xbc>)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009698:	4b24      	ldr	r3, [pc, #144]	@ (800972c <prvAddNewTaskToReadyList+0xb8>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d110      	bne.n	80096c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80096a0:	f000 fabc 	bl	8009c1c <prvInitialiseTaskLists>
 80096a4:	e00d      	b.n	80096c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80096a6:	4b23      	ldr	r3, [pc, #140]	@ (8009734 <prvAddNewTaskToReadyList+0xc0>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d109      	bne.n	80096c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80096ae:	4b20      	ldr	r3, [pc, #128]	@ (8009730 <prvAddNewTaskToReadyList+0xbc>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d802      	bhi.n	80096c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80096bc:	4a1c      	ldr	r2, [pc, #112]	@ (8009730 <prvAddNewTaskToReadyList+0xbc>)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80096c2:	4b1d      	ldr	r3, [pc, #116]	@ (8009738 <prvAddNewTaskToReadyList+0xc4>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	3301      	adds	r3, #1
 80096c8:	4a1b      	ldr	r2, [pc, #108]	@ (8009738 <prvAddNewTaskToReadyList+0xc4>)
 80096ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096d0:	2201      	movs	r2, #1
 80096d2:	409a      	lsls	r2, r3
 80096d4:	4b19      	ldr	r3, [pc, #100]	@ (800973c <prvAddNewTaskToReadyList+0xc8>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4313      	orrs	r3, r2
 80096da:	4a18      	ldr	r2, [pc, #96]	@ (800973c <prvAddNewTaskToReadyList+0xc8>)
 80096dc:	6013      	str	r3, [r2, #0]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096e2:	4613      	mov	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4a15      	ldr	r2, [pc, #84]	@ (8009740 <prvAddNewTaskToReadyList+0xcc>)
 80096ec:	441a      	add	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	3304      	adds	r3, #4
 80096f2:	4619      	mov	r1, r3
 80096f4:	4610      	mov	r0, r2
 80096f6:	f7ff fe54 	bl	80093a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80096fa:	f000 ffe7 	bl	800a6cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80096fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009734 <prvAddNewTaskToReadyList+0xc0>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00e      	beq.n	8009724 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009706:	4b0a      	ldr	r3, [pc, #40]	@ (8009730 <prvAddNewTaskToReadyList+0xbc>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009710:	429a      	cmp	r2, r3
 8009712:	d207      	bcs.n	8009724 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009714:	4b0b      	ldr	r3, [pc, #44]	@ (8009744 <prvAddNewTaskToReadyList+0xd0>)
 8009716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009724:	bf00      	nop
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	200015fc 	.word	0x200015fc
 8009730:	200014fc 	.word	0x200014fc
 8009734:	20001608 	.word	0x20001608
 8009738:	20001618 	.word	0x20001618
 800973c:	20001604 	.word	0x20001604
 8009740:	20001500 	.word	0x20001500
 8009744:	e000ed04 	.word	0xe000ed04

08009748 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009750:	2300      	movs	r3, #0
 8009752:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d018      	beq.n	800978c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800975a:	4b14      	ldr	r3, [pc, #80]	@ (80097ac <vTaskDelay+0x64>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00b      	beq.n	800977a <vTaskDelay+0x32>
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	60bb      	str	r3, [r7, #8]
}
 8009774:	bf00      	nop
 8009776:	bf00      	nop
 8009778:	e7fd      	b.n	8009776 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800977a:	f000 f86d 	bl	8009858 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800977e:	2100      	movs	r1, #0
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 fdd9 	bl	800a338 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009786:	f000 f875 	bl	8009874 <xTaskResumeAll>
 800978a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d107      	bne.n	80097a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009792:	4b07      	ldr	r3, [pc, #28]	@ (80097b0 <vTaskDelay+0x68>)
 8009794:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009798:	601a      	str	r2, [r3, #0]
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80097a2:	bf00      	nop
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	20001624 	.word	0x20001624
 80097b0:	e000ed04 	.word	0xe000ed04

080097b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80097ba:	4b1f      	ldr	r3, [pc, #124]	@ (8009838 <vTaskStartScheduler+0x84>)
 80097bc:	9301      	str	r3, [sp, #4]
 80097be:	2300      	movs	r3, #0
 80097c0:	9300      	str	r3, [sp, #0]
 80097c2:	2300      	movs	r3, #0
 80097c4:	2280      	movs	r2, #128	@ 0x80
 80097c6:	491d      	ldr	r1, [pc, #116]	@ (800983c <vTaskStartScheduler+0x88>)
 80097c8:	481d      	ldr	r0, [pc, #116]	@ (8009840 <vTaskStartScheduler+0x8c>)
 80097ca:	f7ff fe71 	bl	80094b0 <xTaskCreate>
 80097ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d11b      	bne.n	800980e <vTaskStartScheduler+0x5a>
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	60bb      	str	r3, [r7, #8]
}
 80097e8:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80097ea:	4b16      	ldr	r3, [pc, #88]	@ (8009844 <vTaskStartScheduler+0x90>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	334c      	adds	r3, #76	@ 0x4c
 80097f0:	4a15      	ldr	r2, [pc, #84]	@ (8009848 <vTaskStartScheduler+0x94>)
 80097f2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80097f4:	4b15      	ldr	r3, [pc, #84]	@ (800984c <vTaskStartScheduler+0x98>)
 80097f6:	f04f 32ff 	mov.w	r2, #4294967295
 80097fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80097fc:	4b14      	ldr	r3, [pc, #80]	@ (8009850 <vTaskStartScheduler+0x9c>)
 80097fe:	2201      	movs	r2, #1
 8009800:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009802:	4b14      	ldr	r3, [pc, #80]	@ (8009854 <vTaskStartScheduler+0xa0>)
 8009804:	2200      	movs	r2, #0
 8009806:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009808:	f000 fe8a 	bl	800a520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800980c:	e00f      	b.n	800982e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009814:	d10b      	bne.n	800982e <vTaskStartScheduler+0x7a>
	__asm volatile
 8009816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981a:	f383 8811 	msr	BASEPRI, r3
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	f3bf 8f4f 	dsb	sy
 8009826:	607b      	str	r3, [r7, #4]
}
 8009828:	bf00      	nop
 800982a:	bf00      	nop
 800982c:	e7fd      	b.n	800982a <vTaskStartScheduler+0x76>
}
 800982e:	bf00      	nop
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	20001620 	.word	0x20001620
 800983c:	0800fb90 	.word	0x0800fb90
 8009840:	08009bed 	.word	0x08009bed
 8009844:	200014fc 	.word	0x200014fc
 8009848:	200001e8 	.word	0x200001e8
 800984c:	2000161c 	.word	0x2000161c
 8009850:	20001608 	.word	0x20001608
 8009854:	20001600 	.word	0x20001600

08009858 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009858:	b480      	push	{r7}
 800985a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800985c:	4b04      	ldr	r3, [pc, #16]	@ (8009870 <vTaskSuspendAll+0x18>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3301      	adds	r3, #1
 8009862:	4a03      	ldr	r2, [pc, #12]	@ (8009870 <vTaskSuspendAll+0x18>)
 8009864:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009866:	bf00      	nop
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr
 8009870:	20001624 	.word	0x20001624

08009874 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800987a:	2300      	movs	r3, #0
 800987c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800987e:	2300      	movs	r3, #0
 8009880:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009882:	4b42      	ldr	r3, [pc, #264]	@ (800998c <xTaskResumeAll+0x118>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d10b      	bne.n	80098a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	603b      	str	r3, [r7, #0]
}
 800989c:	bf00      	nop
 800989e:	bf00      	nop
 80098a0:	e7fd      	b.n	800989e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80098a2:	f000 fee1 	bl	800a668 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80098a6:	4b39      	ldr	r3, [pc, #228]	@ (800998c <xTaskResumeAll+0x118>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3b01      	subs	r3, #1
 80098ac:	4a37      	ldr	r2, [pc, #220]	@ (800998c <xTaskResumeAll+0x118>)
 80098ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098b0:	4b36      	ldr	r3, [pc, #216]	@ (800998c <xTaskResumeAll+0x118>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d161      	bne.n	800997c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80098b8:	4b35      	ldr	r3, [pc, #212]	@ (8009990 <xTaskResumeAll+0x11c>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d05d      	beq.n	800997c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098c0:	e02e      	b.n	8009920 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098c2:	4b34      	ldr	r3, [pc, #208]	@ (8009994 <xTaskResumeAll+0x120>)
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3318      	adds	r3, #24
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7ff fdc4 	bl	800945c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	3304      	adds	r3, #4
 80098d8:	4618      	mov	r0, r3
 80098da:	f7ff fdbf 	bl	800945c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e2:	2201      	movs	r2, #1
 80098e4:	409a      	lsls	r2, r3
 80098e6:	4b2c      	ldr	r3, [pc, #176]	@ (8009998 <xTaskResumeAll+0x124>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	4a2a      	ldr	r2, [pc, #168]	@ (8009998 <xTaskResumeAll+0x124>)
 80098ee:	6013      	str	r3, [r2, #0]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098f4:	4613      	mov	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4a27      	ldr	r2, [pc, #156]	@ (800999c <xTaskResumeAll+0x128>)
 80098fe:	441a      	add	r2, r3
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	3304      	adds	r3, #4
 8009904:	4619      	mov	r1, r3
 8009906:	4610      	mov	r0, r2
 8009908:	f7ff fd4b 	bl	80093a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009910:	4b23      	ldr	r3, [pc, #140]	@ (80099a0 <xTaskResumeAll+0x12c>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009916:	429a      	cmp	r2, r3
 8009918:	d302      	bcc.n	8009920 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800991a:	4b22      	ldr	r3, [pc, #136]	@ (80099a4 <xTaskResumeAll+0x130>)
 800991c:	2201      	movs	r2, #1
 800991e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009920:	4b1c      	ldr	r3, [pc, #112]	@ (8009994 <xTaskResumeAll+0x120>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d1cc      	bne.n	80098c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800992e:	f000 f9f9 	bl	8009d24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009932:	4b1d      	ldr	r3, [pc, #116]	@ (80099a8 <xTaskResumeAll+0x134>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d010      	beq.n	8009960 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800993e:	f000 f837 	bl	80099b0 <xTaskIncrementTick>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d002      	beq.n	800994e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009948:	4b16      	ldr	r3, [pc, #88]	@ (80099a4 <xTaskResumeAll+0x130>)
 800994a:	2201      	movs	r2, #1
 800994c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	3b01      	subs	r3, #1
 8009952:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1f1      	bne.n	800993e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800995a:	4b13      	ldr	r3, [pc, #76]	@ (80099a8 <xTaskResumeAll+0x134>)
 800995c:	2200      	movs	r2, #0
 800995e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009960:	4b10      	ldr	r3, [pc, #64]	@ (80099a4 <xTaskResumeAll+0x130>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d009      	beq.n	800997c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009968:	2301      	movs	r3, #1
 800996a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800996c:	4b0f      	ldr	r3, [pc, #60]	@ (80099ac <xTaskResumeAll+0x138>)
 800996e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	f3bf 8f4f 	dsb	sy
 8009978:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800997c:	f000 fea6 	bl	800a6cc <vPortExitCritical>

	return xAlreadyYielded;
 8009980:	68bb      	ldr	r3, [r7, #8]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	20001624 	.word	0x20001624
 8009990:	200015fc 	.word	0x200015fc
 8009994:	200015bc 	.word	0x200015bc
 8009998:	20001604 	.word	0x20001604
 800999c:	20001500 	.word	0x20001500
 80099a0:	200014fc 	.word	0x200014fc
 80099a4:	20001610 	.word	0x20001610
 80099a8:	2000160c 	.word	0x2000160c
 80099ac:	e000ed04 	.word	0xe000ed04

080099b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80099b6:	2300      	movs	r3, #0
 80099b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099ba:	4b4f      	ldr	r3, [pc, #316]	@ (8009af8 <xTaskIncrementTick+0x148>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f040 808f 	bne.w	8009ae2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80099c4:	4b4d      	ldr	r3, [pc, #308]	@ (8009afc <xTaskIncrementTick+0x14c>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3301      	adds	r3, #1
 80099ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80099cc:	4a4b      	ldr	r2, [pc, #300]	@ (8009afc <xTaskIncrementTick+0x14c>)
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d121      	bne.n	8009a1c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80099d8:	4b49      	ldr	r3, [pc, #292]	@ (8009b00 <xTaskIncrementTick+0x150>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00b      	beq.n	80099fa <xTaskIncrementTick+0x4a>
	__asm volatile
 80099e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e6:	f383 8811 	msr	BASEPRI, r3
 80099ea:	f3bf 8f6f 	isb	sy
 80099ee:	f3bf 8f4f 	dsb	sy
 80099f2:	603b      	str	r3, [r7, #0]
}
 80099f4:	bf00      	nop
 80099f6:	bf00      	nop
 80099f8:	e7fd      	b.n	80099f6 <xTaskIncrementTick+0x46>
 80099fa:	4b41      	ldr	r3, [pc, #260]	@ (8009b00 <xTaskIncrementTick+0x150>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	60fb      	str	r3, [r7, #12]
 8009a00:	4b40      	ldr	r3, [pc, #256]	@ (8009b04 <xTaskIncrementTick+0x154>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a3e      	ldr	r2, [pc, #248]	@ (8009b00 <xTaskIncrementTick+0x150>)
 8009a06:	6013      	str	r3, [r2, #0]
 8009a08:	4a3e      	ldr	r2, [pc, #248]	@ (8009b04 <xTaskIncrementTick+0x154>)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6013      	str	r3, [r2, #0]
 8009a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8009b08 <xTaskIncrementTick+0x158>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3301      	adds	r3, #1
 8009a14:	4a3c      	ldr	r2, [pc, #240]	@ (8009b08 <xTaskIncrementTick+0x158>)
 8009a16:	6013      	str	r3, [r2, #0]
 8009a18:	f000 f984 	bl	8009d24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8009b0c <xTaskIncrementTick+0x15c>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	693a      	ldr	r2, [r7, #16]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d348      	bcc.n	8009ab8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a26:	4b36      	ldr	r3, [pc, #216]	@ (8009b00 <xTaskIncrementTick+0x150>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d104      	bne.n	8009a3a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a30:	4b36      	ldr	r3, [pc, #216]	@ (8009b0c <xTaskIncrementTick+0x15c>)
 8009a32:	f04f 32ff 	mov.w	r2, #4294967295
 8009a36:	601a      	str	r2, [r3, #0]
					break;
 8009a38:	e03e      	b.n	8009ab8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a3a:	4b31      	ldr	r3, [pc, #196]	@ (8009b00 <xTaskIncrementTick+0x150>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009a4a:	693a      	ldr	r2, [r7, #16]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d203      	bcs.n	8009a5a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009a52:	4a2e      	ldr	r2, [pc, #184]	@ (8009b0c <xTaskIncrementTick+0x15c>)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009a58:	e02e      	b.n	8009ab8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7ff fcfc 	bl	800945c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d004      	beq.n	8009a76 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	3318      	adds	r3, #24
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7ff fcf3 	bl	800945c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	409a      	lsls	r2, r3
 8009a7e:	4b24      	ldr	r3, [pc, #144]	@ (8009b10 <xTaskIncrementTick+0x160>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	4a22      	ldr	r2, [pc, #136]	@ (8009b10 <xTaskIncrementTick+0x160>)
 8009a86:	6013      	str	r3, [r2, #0]
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	4413      	add	r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	4a1f      	ldr	r2, [pc, #124]	@ (8009b14 <xTaskIncrementTick+0x164>)
 8009a96:	441a      	add	r2, r3
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	4610      	mov	r0, r2
 8009aa0:	f7ff fc7f 	bl	80093a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8009b18 <xTaskIncrementTick+0x168>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d3b9      	bcc.n	8009a26 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ab6:	e7b6      	b.n	8009a26 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ab8:	4b17      	ldr	r3, [pc, #92]	@ (8009b18 <xTaskIncrementTick+0x168>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009abe:	4915      	ldr	r1, [pc, #84]	@ (8009b14 <xTaskIncrementTick+0x164>)
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4413      	add	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	440b      	add	r3, r1
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d901      	bls.n	8009ad4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009ad4:	4b11      	ldr	r3, [pc, #68]	@ (8009b1c <xTaskIncrementTick+0x16c>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d007      	beq.n	8009aec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009adc:	2301      	movs	r3, #1
 8009ade:	617b      	str	r3, [r7, #20]
 8009ae0:	e004      	b.n	8009aec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8009b20 <xTaskIncrementTick+0x170>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8009b20 <xTaskIncrementTick+0x170>)
 8009aea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009aec:	697b      	ldr	r3, [r7, #20]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3718      	adds	r7, #24
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	20001624 	.word	0x20001624
 8009afc:	20001600 	.word	0x20001600
 8009b00:	200015b4 	.word	0x200015b4
 8009b04:	200015b8 	.word	0x200015b8
 8009b08:	20001614 	.word	0x20001614
 8009b0c:	2000161c 	.word	0x2000161c
 8009b10:	20001604 	.word	0x20001604
 8009b14:	20001500 	.word	0x20001500
 8009b18:	200014fc 	.word	0x200014fc
 8009b1c:	20001610 	.word	0x20001610
 8009b20:	2000160c 	.word	0x2000160c

08009b24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009b24:	b480      	push	{r7}
 8009b26:	b087      	sub	sp, #28
 8009b28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8009bd4 <vTaskSwitchContext+0xb0>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d003      	beq.n	8009b3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009b32:	4b29      	ldr	r3, [pc, #164]	@ (8009bd8 <vTaskSwitchContext+0xb4>)
 8009b34:	2201      	movs	r2, #1
 8009b36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009b38:	e045      	b.n	8009bc6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8009b3a:	4b27      	ldr	r3, [pc, #156]	@ (8009bd8 <vTaskSwitchContext+0xb4>)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b40:	4b26      	ldr	r3, [pc, #152]	@ (8009bdc <vTaskSwitchContext+0xb8>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	fab3 f383 	clz	r3, r3
 8009b4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009b4e:	7afb      	ldrb	r3, [r7, #11]
 8009b50:	f1c3 031f 	rsb	r3, r3, #31
 8009b54:	617b      	str	r3, [r7, #20]
 8009b56:	4922      	ldr	r1, [pc, #136]	@ (8009be0 <vTaskSwitchContext+0xbc>)
 8009b58:	697a      	ldr	r2, [r7, #20]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	440b      	add	r3, r1
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d10b      	bne.n	8009b82 <vTaskSwitchContext+0x5e>
	__asm volatile
 8009b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	607b      	str	r3, [r7, #4]
}
 8009b7c:	bf00      	nop
 8009b7e:	bf00      	nop
 8009b80:	e7fd      	b.n	8009b7e <vTaskSwitchContext+0x5a>
 8009b82:	697a      	ldr	r2, [r7, #20]
 8009b84:	4613      	mov	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4a14      	ldr	r2, [pc, #80]	@ (8009be0 <vTaskSwitchContext+0xbc>)
 8009b8e:	4413      	add	r3, r2
 8009b90:	613b      	str	r3, [r7, #16]
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	685a      	ldr	r2, [r3, #4]
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	605a      	str	r2, [r3, #4]
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	685a      	ldr	r2, [r3, #4]
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	3308      	adds	r3, #8
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d104      	bne.n	8009bb2 <vTaskSwitchContext+0x8e>
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	685a      	ldr	r2, [r3, #4]
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	605a      	str	r2, [r3, #4]
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8009be4 <vTaskSwitchContext+0xc0>)
 8009bba:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009bbc:	4b09      	ldr	r3, [pc, #36]	@ (8009be4 <vTaskSwitchContext+0xc0>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	334c      	adds	r3, #76	@ 0x4c
 8009bc2:	4a09      	ldr	r2, [pc, #36]	@ (8009be8 <vTaskSwitchContext+0xc4>)
 8009bc4:	6013      	str	r3, [r2, #0]
}
 8009bc6:	bf00      	nop
 8009bc8:	371c      	adds	r7, #28
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	20001624 	.word	0x20001624
 8009bd8:	20001610 	.word	0x20001610
 8009bdc:	20001604 	.word	0x20001604
 8009be0:	20001500 	.word	0x20001500
 8009be4:	200014fc 	.word	0x200014fc
 8009be8:	200001e8 	.word	0x200001e8

08009bec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009bf4:	f000 f852 	bl	8009c9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009bf8:	4b06      	ldr	r3, [pc, #24]	@ (8009c14 <prvIdleTask+0x28>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d9f9      	bls.n	8009bf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c00:	4b05      	ldr	r3, [pc, #20]	@ (8009c18 <prvIdleTask+0x2c>)
 8009c02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c06:	601a      	str	r2, [r3, #0]
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c10:	e7f0      	b.n	8009bf4 <prvIdleTask+0x8>
 8009c12:	bf00      	nop
 8009c14:	20001500 	.word	0x20001500
 8009c18:	e000ed04 	.word	0xe000ed04

08009c1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c22:	2300      	movs	r3, #0
 8009c24:	607b      	str	r3, [r7, #4]
 8009c26:	e00c      	b.n	8009c42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4413      	add	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	4a12      	ldr	r2, [pc, #72]	@ (8009c7c <prvInitialiseTaskLists+0x60>)
 8009c34:	4413      	add	r3, r2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7ff fb86 	bl	8009348 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	607b      	str	r3, [r7, #4]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b06      	cmp	r3, #6
 8009c46:	d9ef      	bls.n	8009c28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c48:	480d      	ldr	r0, [pc, #52]	@ (8009c80 <prvInitialiseTaskLists+0x64>)
 8009c4a:	f7ff fb7d 	bl	8009348 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c4e:	480d      	ldr	r0, [pc, #52]	@ (8009c84 <prvInitialiseTaskLists+0x68>)
 8009c50:	f7ff fb7a 	bl	8009348 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c54:	480c      	ldr	r0, [pc, #48]	@ (8009c88 <prvInitialiseTaskLists+0x6c>)
 8009c56:	f7ff fb77 	bl	8009348 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c5a:	480c      	ldr	r0, [pc, #48]	@ (8009c8c <prvInitialiseTaskLists+0x70>)
 8009c5c:	f7ff fb74 	bl	8009348 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c60:	480b      	ldr	r0, [pc, #44]	@ (8009c90 <prvInitialiseTaskLists+0x74>)
 8009c62:	f7ff fb71 	bl	8009348 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c66:	4b0b      	ldr	r3, [pc, #44]	@ (8009c94 <prvInitialiseTaskLists+0x78>)
 8009c68:	4a05      	ldr	r2, [pc, #20]	@ (8009c80 <prvInitialiseTaskLists+0x64>)
 8009c6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009c98 <prvInitialiseTaskLists+0x7c>)
 8009c6e:	4a05      	ldr	r2, [pc, #20]	@ (8009c84 <prvInitialiseTaskLists+0x68>)
 8009c70:	601a      	str	r2, [r3, #0]
}
 8009c72:	bf00      	nop
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20001500 	.word	0x20001500
 8009c80:	2000158c 	.word	0x2000158c
 8009c84:	200015a0 	.word	0x200015a0
 8009c88:	200015bc 	.word	0x200015bc
 8009c8c:	200015d0 	.word	0x200015d0
 8009c90:	200015e8 	.word	0x200015e8
 8009c94:	200015b4 	.word	0x200015b4
 8009c98:	200015b8 	.word	0x200015b8

08009c9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ca2:	e019      	b.n	8009cd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ca4:	f000 fce0 	bl	800a668 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ca8:	4b10      	ldr	r3, [pc, #64]	@ (8009cec <prvCheckTasksWaitingTermination+0x50>)
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	3304      	adds	r3, #4
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7ff fbd1 	bl	800945c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009cba:	4b0d      	ldr	r3, [pc, #52]	@ (8009cf0 <prvCheckTasksWaitingTermination+0x54>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	3b01      	subs	r3, #1
 8009cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8009cf0 <prvCheckTasksWaitingTermination+0x54>)
 8009cc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8009cf4 <prvCheckTasksWaitingTermination+0x58>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	4a0a      	ldr	r2, [pc, #40]	@ (8009cf4 <prvCheckTasksWaitingTermination+0x58>)
 8009ccc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009cce:	f000 fcfd 	bl	800a6cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 f810 	bl	8009cf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cd8:	4b06      	ldr	r3, [pc, #24]	@ (8009cf4 <prvCheckTasksWaitingTermination+0x58>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d1e1      	bne.n	8009ca4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ce0:	bf00      	nop
 8009ce2:	bf00      	nop
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	200015d0 	.word	0x200015d0
 8009cf0:	200015fc 	.word	0x200015fc
 8009cf4:	200015e4 	.word	0x200015e4

08009cf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	334c      	adds	r3, #76	@ 0x4c
 8009d04:	4618      	mov	r0, r3
 8009d06:	f002 f871 	bl	800bdec <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 fe9a 	bl	800aa48 <vPortFree>
			vPortFree( pxTCB );
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fe97 	bl	800aa48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d1a:	bf00      	nop
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
	...

08009d24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8009d5c <prvResetNextTaskUnblockTime+0x38>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d104      	bne.n	8009d3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d34:	4b0a      	ldr	r3, [pc, #40]	@ (8009d60 <prvResetNextTaskUnblockTime+0x3c>)
 8009d36:	f04f 32ff 	mov.w	r2, #4294967295
 8009d3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d3c:	e008      	b.n	8009d50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d3e:	4b07      	ldr	r3, [pc, #28]	@ (8009d5c <prvResetNextTaskUnblockTime+0x38>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	4a04      	ldr	r2, [pc, #16]	@ (8009d60 <prvResetNextTaskUnblockTime+0x3c>)
 8009d4e:	6013      	str	r3, [r2, #0]
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	200015b4 	.word	0x200015b4
 8009d60:	2000161c 	.word	0x2000161c

08009d64 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8009d6e:	f000 fc7b 	bl	800a668 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8009d72:	4b20      	ldr	r3, [pc, #128]	@ (8009df4 <ulTaskNotifyTake+0x90>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d113      	bne.n	8009da6 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8009df4 <ulTaskNotifyTake+0x90>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2201      	movs	r2, #1
 8009d84:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00b      	beq.n	8009da6 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d8e:	2101      	movs	r1, #1
 8009d90:	6838      	ldr	r0, [r7, #0]
 8009d92:	f000 fad1 	bl	800a338 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009d96:	4b18      	ldr	r3, [pc, #96]	@ (8009df8 <ulTaskNotifyTake+0x94>)
 8009d98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d9c:	601a      	str	r2, [r3, #0]
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009da6:	f000 fc91 	bl	800a6cc <vPortExitCritical>

		taskENTER_CRITICAL();
 8009daa:	f000 fc5d 	bl	800a668 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8009dae:	4b11      	ldr	r3, [pc, #68]	@ (8009df4 <ulTaskNotifyTake+0x90>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009db6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00e      	beq.n	8009ddc <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d005      	beq.n	8009dd0 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8009dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8009df4 <ulTaskNotifyTake+0x90>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8009dce:	e005      	b.n	8009ddc <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8009dd0:	4b08      	ldr	r3, [pc, #32]	@ (8009df4 <ulTaskNotifyTake+0x90>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	3a01      	subs	r2, #1
 8009dd8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ddc:	4b05      	ldr	r3, [pc, #20]	@ (8009df4 <ulTaskNotifyTake+0x90>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8009de6:	f000 fc71 	bl	800a6cc <vPortExitCritical>

		return ulReturn;
 8009dea:	68fb      	ldr	r3, [r7, #12]
	}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	200014fc 	.word	0x200014fc
 8009df8:	e000ed04 	.word	0xe000ed04

08009dfc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b086      	sub	sp, #24
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
 8009e08:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009e0a:	f000 fc2d 	bl	800a668 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009e0e:	4b29      	ldr	r3, [pc, #164]	@ (8009eb4 <xTaskNotifyWait+0xb8>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	d01c      	beq.n	8009e56 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009e1c:	4b25      	ldr	r3, [pc, #148]	@ (8009eb4 <xTaskNotifyWait+0xb8>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	43d2      	mvns	r2, r2
 8009e28:	400a      	ands	r2, r1
 8009e2a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009e2e:	4b21      	ldr	r3, [pc, #132]	@ (8009eb4 <xTaskNotifyWait+0xb8>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00b      	beq.n	8009e56 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e3e:	2101      	movs	r1, #1
 8009e40:	6838      	ldr	r0, [r7, #0]
 8009e42:	f000 fa79 	bl	800a338 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009e46:	4b1c      	ldr	r3, [pc, #112]	@ (8009eb8 <xTaskNotifyWait+0xbc>)
 8009e48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e4c:	601a      	str	r2, [r3, #0]
 8009e4e:	f3bf 8f4f 	dsb	sy
 8009e52:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009e56:	f000 fc39 	bl	800a6cc <vPortExitCritical>

		taskENTER_CRITICAL();
 8009e5a:	f000 fc05 	bl	800a668 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d005      	beq.n	8009e70 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009e64:	4b13      	ldr	r3, [pc, #76]	@ (8009eb4 <xTaskNotifyWait+0xb8>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009e70:	4b10      	ldr	r3, [pc, #64]	@ (8009eb4 <xTaskNotifyWait+0xb8>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d002      	beq.n	8009e84 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	617b      	str	r3, [r7, #20]
 8009e82:	e00a      	b.n	8009e9a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009e84:	4b0b      	ldr	r3, [pc, #44]	@ (8009eb4 <xTaskNotifyWait+0xb8>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8009e8c:	68ba      	ldr	r2, [r7, #8]
 8009e8e:	43d2      	mvns	r2, r2
 8009e90:	400a      	ands	r2, r1
 8009e92:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 8009e96:	2301      	movs	r3, #1
 8009e98:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e9a:	4b06      	ldr	r3, [pc, #24]	@ (8009eb4 <xTaskNotifyWait+0xb8>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8009ea4:	f000 fc12 	bl	800a6cc <vPortExitCritical>

		return xReturn;
 8009ea8:	697b      	ldr	r3, [r7, #20]
	}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3718      	adds	r7, #24
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	200014fc 	.word	0x200014fc
 8009eb8:	e000ed04 	.word	0xe000ed04

08009ebc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b08a      	sub	sp, #40	@ 0x28
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	603b      	str	r3, [r7, #0]
 8009ec8:	4613      	mov	r3, r2
 8009eca:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d10b      	bne.n	8009eee <xTaskGenericNotify+0x32>
	__asm volatile
 8009ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eda:	f383 8811 	msr	BASEPRI, r3
 8009ede:	f3bf 8f6f 	isb	sy
 8009ee2:	f3bf 8f4f 	dsb	sy
 8009ee6:	61bb      	str	r3, [r7, #24]
}
 8009ee8:	bf00      	nop
 8009eea:	bf00      	nop
 8009eec:	e7fd      	b.n	8009eea <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009ef2:	f000 fbb9 	bl	800a668 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d004      	beq.n	8009f06 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009efc:	6a3b      	ldr	r3, [r7, #32]
 8009efe:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009f06:	6a3b      	ldr	r3, [r7, #32]
 8009f08:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8009f0c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009f0e:	6a3b      	ldr	r3, [r7, #32]
 8009f10:	2202      	movs	r2, #2
 8009f12:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8009f16:	79fb      	ldrb	r3, [r7, #7]
 8009f18:	2b04      	cmp	r3, #4
 8009f1a:	d82e      	bhi.n	8009f7a <xTaskGenericNotify+0xbe>
 8009f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f24 <xTaskGenericNotify+0x68>)
 8009f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f22:	bf00      	nop
 8009f24:	08009f9f 	.word	0x08009f9f
 8009f28:	08009f39 	.word	0x08009f39
 8009f2c:	08009f4b 	.word	0x08009f4b
 8009f30:	08009f5b 	.word	0x08009f5b
 8009f34:	08009f65 	.word	0x08009f65
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009f38:	6a3b      	ldr	r3, [r7, #32]
 8009f3a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	431a      	orrs	r2, r3
 8009f42:	6a3b      	ldr	r3, [r7, #32]
 8009f44:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009f48:	e02c      	b.n	8009fa4 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009f4a:	6a3b      	ldr	r3, [r7, #32]
 8009f4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f50:	1c5a      	adds	r2, r3, #1
 8009f52:	6a3b      	ldr	r3, [r7, #32]
 8009f54:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009f58:	e024      	b.n	8009fa4 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009f5a:	6a3b      	ldr	r3, [r7, #32]
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009f62:	e01f      	b.n	8009fa4 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009f64:	7ffb      	ldrb	r3, [r7, #31]
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	d004      	beq.n	8009f74 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009f6a:	6a3b      	ldr	r3, [r7, #32]
 8009f6c:	68ba      	ldr	r2, [r7, #8]
 8009f6e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009f72:	e017      	b.n	8009fa4 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8009f74:	2300      	movs	r3, #0
 8009f76:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8009f78:	e014      	b.n	8009fa4 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009f7a:	6a3b      	ldr	r3, [r7, #32]
 8009f7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f84:	d00d      	beq.n	8009fa2 <xTaskGenericNotify+0xe6>
	__asm volatile
 8009f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f8a:	f383 8811 	msr	BASEPRI, r3
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f3bf 8f4f 	dsb	sy
 8009f96:	617b      	str	r3, [r7, #20]
}
 8009f98:	bf00      	nop
 8009f9a:	bf00      	nop
 8009f9c:	e7fd      	b.n	8009f9a <xTaskGenericNotify+0xde>
					break;
 8009f9e:	bf00      	nop
 8009fa0:	e000      	b.n	8009fa4 <xTaskGenericNotify+0xe8>

					break;
 8009fa2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009fa4:	7ffb      	ldrb	r3, [r7, #31]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d13a      	bne.n	800a020 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009faa:	6a3b      	ldr	r3, [r7, #32]
 8009fac:	3304      	adds	r3, #4
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7ff fa54 	bl	800945c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009fb4:	6a3b      	ldr	r3, [r7, #32]
 8009fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fb8:	2201      	movs	r2, #1
 8009fba:	409a      	lsls	r2, r3
 8009fbc:	4b1c      	ldr	r3, [pc, #112]	@ (800a030 <xTaskGenericNotify+0x174>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	4a1b      	ldr	r2, [pc, #108]	@ (800a030 <xTaskGenericNotify+0x174>)
 8009fc4:	6013      	str	r3, [r2, #0]
 8009fc6:	6a3b      	ldr	r3, [r7, #32]
 8009fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fca:	4613      	mov	r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4413      	add	r3, r2
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4a18      	ldr	r2, [pc, #96]	@ (800a034 <xTaskGenericNotify+0x178>)
 8009fd4:	441a      	add	r2, r3
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	3304      	adds	r3, #4
 8009fda:	4619      	mov	r1, r3
 8009fdc:	4610      	mov	r0, r2
 8009fde:	f7ff f9e0 	bl	80093a2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009fe2:	6a3b      	ldr	r3, [r7, #32]
 8009fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00b      	beq.n	800a002 <xTaskGenericNotify+0x146>
	__asm volatile
 8009fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fee:	f383 8811 	msr	BASEPRI, r3
 8009ff2:	f3bf 8f6f 	isb	sy
 8009ff6:	f3bf 8f4f 	dsb	sy
 8009ffa:	613b      	str	r3, [r7, #16]
}
 8009ffc:	bf00      	nop
 8009ffe:	bf00      	nop
 800a000:	e7fd      	b.n	8009ffe <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a002:	6a3b      	ldr	r3, [r7, #32]
 800a004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a006:	4b0c      	ldr	r3, [pc, #48]	@ (800a038 <xTaskGenericNotify+0x17c>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d907      	bls.n	800a020 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a010:	4b0a      	ldr	r3, [pc, #40]	@ (800a03c <xTaskGenericNotify+0x180>)
 800a012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a016:	601a      	str	r2, [r3, #0]
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a020:	f000 fb54 	bl	800a6cc <vPortExitCritical>

		return xReturn;
 800a024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800a026:	4618      	mov	r0, r3
 800a028:	3728      	adds	r7, #40	@ 0x28
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	20001604 	.word	0x20001604
 800a034:	20001500 	.word	0x20001500
 800a038:	200014fc 	.word	0x200014fc
 800a03c:	e000ed04 	.word	0xe000ed04

0800a040 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a040:	b580      	push	{r7, lr}
 800a042:	b08e      	sub	sp, #56	@ 0x38
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	603b      	str	r3, [r7, #0]
 800a04c:	4613      	mov	r3, r2
 800a04e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a050:	2301      	movs	r3, #1
 800a052:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10b      	bne.n	800a072 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800a05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a05e:	f383 8811 	msr	BASEPRI, r3
 800a062:	f3bf 8f6f 	isb	sy
 800a066:	f3bf 8f4f 	dsb	sy
 800a06a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a06c:	bf00      	nop
 800a06e:	bf00      	nop
 800a070:	e7fd      	b.n	800a06e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a072:	f000 fbd9 	bl	800a828 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a07a:	f3ef 8211 	mrs	r2, BASEPRI
 800a07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	623a      	str	r2, [r7, #32]
 800a090:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a092:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a094:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d004      	beq.n	800a0a6 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a8:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800a0ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b2:	2202      	movs	r2, #2
 800a0b4:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 800a0b8:	79fb      	ldrb	r3, [r7, #7]
 800a0ba:	2b04      	cmp	r3, #4
 800a0bc:	d82e      	bhi.n	800a11c <xTaskGenericNotifyFromISR+0xdc>
 800a0be:	a201      	add	r2, pc, #4	@ (adr r2, 800a0c4 <xTaskGenericNotifyFromISR+0x84>)
 800a0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c4:	0800a141 	.word	0x0800a141
 800a0c8:	0800a0d9 	.word	0x0800a0d9
 800a0cc:	0800a0eb 	.word	0x0800a0eb
 800a0d0:	0800a0fb 	.word	0x0800a0fb
 800a0d4:	0800a105 	.word	0x0800a105
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0da:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	431a      	orrs	r2, r3
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800a0e8:	e02d      	b.n	800a146 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a0f0:	1c5a      	adds	r2, r3, #1
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800a0f8:	e025      	b.n	800a146 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0fc:	68ba      	ldr	r2, [r7, #8]
 800a0fe:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800a102:	e020      	b.n	800a146 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a104:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a108:	2b02      	cmp	r3, #2
 800a10a:	d004      	beq.n	800a116 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a10e:	68ba      	ldr	r2, [r7, #8]
 800a110:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a114:	e017      	b.n	800a146 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800a116:	2300      	movs	r3, #0
 800a118:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800a11a:	e014      	b.n	800a146 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a126:	d00d      	beq.n	800a144 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800a128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a12c:	f383 8811 	msr	BASEPRI, r3
 800a130:	f3bf 8f6f 	isb	sy
 800a134:	f3bf 8f4f 	dsb	sy
 800a138:	61bb      	str	r3, [r7, #24]
}
 800a13a:	bf00      	nop
 800a13c:	bf00      	nop
 800a13e:	e7fd      	b.n	800a13c <xTaskGenericNotifyFromISR+0xfc>
					break;
 800a140:	bf00      	nop
 800a142:	e000      	b.n	800a146 <xTaskGenericNotifyFromISR+0x106>
					break;
 800a144:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a146:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d146      	bne.n	800a1dc <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00b      	beq.n	800a16e <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800a156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a15a:	f383 8811 	msr	BASEPRI, r3
 800a15e:	f3bf 8f6f 	isb	sy
 800a162:	f3bf 8f4f 	dsb	sy
 800a166:	617b      	str	r3, [r7, #20]
}
 800a168:	bf00      	nop
 800a16a:	bf00      	nop
 800a16c:	e7fd      	b.n	800a16a <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a16e:	4b21      	ldr	r3, [pc, #132]	@ (800a1f4 <xTaskGenericNotifyFromISR+0x1b4>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d11c      	bne.n	800a1b0 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a178:	3304      	adds	r3, #4
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7ff f96e 	bl	800945c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a184:	2201      	movs	r2, #1
 800a186:	409a      	lsls	r2, r3
 800a188:	4b1b      	ldr	r3, [pc, #108]	@ (800a1f8 <xTaskGenericNotifyFromISR+0x1b8>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	4a1a      	ldr	r2, [pc, #104]	@ (800a1f8 <xTaskGenericNotifyFromISR+0x1b8>)
 800a190:	6013      	str	r3, [r2, #0]
 800a192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a196:	4613      	mov	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4413      	add	r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	4a17      	ldr	r2, [pc, #92]	@ (800a1fc <xTaskGenericNotifyFromISR+0x1bc>)
 800a1a0:	441a      	add	r2, r3
 800a1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a4:	3304      	adds	r3, #4
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	4610      	mov	r0, r2
 800a1aa:	f7ff f8fa 	bl	80093a2 <vListInsertEnd>
 800a1ae:	e005      	b.n	800a1bc <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b2:	3318      	adds	r3, #24
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	4812      	ldr	r0, [pc, #72]	@ (800a200 <xTaskGenericNotifyFromISR+0x1c0>)
 800a1b8:	f7ff f8f3 	bl	80093a2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1c0:	4b10      	ldr	r3, [pc, #64]	@ (800a204 <xTaskGenericNotifyFromISR+0x1c4>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d908      	bls.n	800a1dc <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a1ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d002      	beq.n	800a1d6 <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a1d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a1d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a208 <xTaskGenericNotifyFromISR+0x1c8>)
 800a1d8:	2201      	movs	r2, #1
 800a1da:	601a      	str	r2, [r3, #0]
 800a1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1de:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a1e6:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800a1e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3738      	adds	r7, #56	@ 0x38
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	20001624 	.word	0x20001624
 800a1f8:	20001604 	.word	0x20001604
 800a1fc:	20001500 	.word	0x20001500
 800a200:	200015bc 	.word	0x200015bc
 800a204:	200014fc 	.word	0x200014fc
 800a208:	20001610 	.word	0x20001610

0800a20c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b08a      	sub	sp, #40	@ 0x28
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d10b      	bne.n	800a234 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800a21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a220:	f383 8811 	msr	BASEPRI, r3
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	61bb      	str	r3, [r7, #24]
}
 800a22e:	bf00      	nop
 800a230:	bf00      	nop
 800a232:	e7fd      	b.n	800a230 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a234:	f000 faf8 	bl	800a828 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800a23c:	f3ef 8211 	mrs	r2, BASEPRI
 800a240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a244:	f383 8811 	msr	BASEPRI, r3
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	617a      	str	r2, [r7, #20]
 800a252:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a254:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a256:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a25a:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800a25e:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a262:	2202      	movs	r2, #2
 800a264:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800a268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a26e:	1c5a      	adds	r2, r3, #1
 800a270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a272:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a276:	7ffb      	ldrb	r3, [r7, #31]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d146      	bne.n	800a30a <vTaskNotifyGiveFromISR+0xfe>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00b      	beq.n	800a29c <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800a284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	60fb      	str	r3, [r7, #12]
}
 800a296:	bf00      	nop
 800a298:	bf00      	nop
 800a29a:	e7fd      	b.n	800a298 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a29c:	4b20      	ldr	r3, [pc, #128]	@ (800a320 <vTaskNotifyGiveFromISR+0x114>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d11c      	bne.n	800a2de <vTaskNotifyGiveFromISR+0xd2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a6:	3304      	adds	r3, #4
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7ff f8d7 	bl	800945c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	409a      	lsls	r2, r3
 800a2b6:	4b1b      	ldr	r3, [pc, #108]	@ (800a324 <vTaskNotifyGiveFromISR+0x118>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	4a19      	ldr	r2, [pc, #100]	@ (800a324 <vTaskNotifyGiveFromISR+0x118>)
 800a2be:	6013      	str	r3, [r2, #0]
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	4413      	add	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4a16      	ldr	r2, [pc, #88]	@ (800a328 <vTaskNotifyGiveFromISR+0x11c>)
 800a2ce:	441a      	add	r2, r3
 800a2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d2:	3304      	adds	r3, #4
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	4610      	mov	r0, r2
 800a2d8:	f7ff f863 	bl	80093a2 <vListInsertEnd>
 800a2dc:	e005      	b.n	800a2ea <vTaskNotifyGiveFromISR+0xde>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e0:	3318      	adds	r3, #24
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	4811      	ldr	r0, [pc, #68]	@ (800a32c <vTaskNotifyGiveFromISR+0x120>)
 800a2e6:	f7ff f85c 	bl	80093a2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2ee:	4b10      	ldr	r3, [pc, #64]	@ (800a330 <vTaskNotifyGiveFromISR+0x124>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d908      	bls.n	800a30a <vTaskNotifyGiveFromISR+0xfe>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d002      	beq.n	800a304 <vTaskNotifyGiveFromISR+0xf8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	2201      	movs	r2, #1
 800a302:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a304:	4b0b      	ldr	r3, [pc, #44]	@ (800a334 <vTaskNotifyGiveFromISR+0x128>)
 800a306:	2201      	movs	r2, #1
 800a308:	601a      	str	r2, [r3, #0]
 800a30a:	6a3b      	ldr	r3, [r7, #32]
 800a30c:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	f383 8811 	msr	BASEPRI, r3
}
 800a314:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800a316:	bf00      	nop
 800a318:	3728      	adds	r7, #40	@ 0x28
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	20001624 	.word	0x20001624
 800a324:	20001604 	.word	0x20001604
 800a328:	20001500 	.word	0x20001500
 800a32c:	200015bc 	.word	0x200015bc
 800a330:	200014fc 	.word	0x200014fc
 800a334:	20001610 	.word	0x20001610

0800a338 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a342:	4b29      	ldr	r3, [pc, #164]	@ (800a3e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a348:	4b28      	ldr	r3, [pc, #160]	@ (800a3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3304      	adds	r3, #4
 800a34e:	4618      	mov	r0, r3
 800a350:	f7ff f884 	bl	800945c <uxListRemove>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d10b      	bne.n	800a372 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a35a:	4b24      	ldr	r3, [pc, #144]	@ (800a3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a360:	2201      	movs	r2, #1
 800a362:	fa02 f303 	lsl.w	r3, r2, r3
 800a366:	43da      	mvns	r2, r3
 800a368:	4b21      	ldr	r3, [pc, #132]	@ (800a3f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4013      	ands	r3, r2
 800a36e:	4a20      	ldr	r2, [pc, #128]	@ (800a3f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a370:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a378:	d10a      	bne.n	800a390 <prvAddCurrentTaskToDelayedList+0x58>
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d007      	beq.n	800a390 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a380:	4b1a      	ldr	r3, [pc, #104]	@ (800a3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	3304      	adds	r3, #4
 800a386:	4619      	mov	r1, r3
 800a388:	481a      	ldr	r0, [pc, #104]	@ (800a3f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a38a:	f7ff f80a 	bl	80093a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a38e:	e026      	b.n	800a3de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4413      	add	r3, r2
 800a396:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a398:	4b14      	ldr	r3, [pc, #80]	@ (800a3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d209      	bcs.n	800a3bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3a8:	4b13      	ldr	r3, [pc, #76]	@ (800a3f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	4b0f      	ldr	r3, [pc, #60]	@ (800a3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	4610      	mov	r0, r2
 800a3b6:	f7ff f818 	bl	80093ea <vListInsert>
}
 800a3ba:	e010      	b.n	800a3de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3bc:	4b0f      	ldr	r3, [pc, #60]	@ (800a3fc <prvAddCurrentTaskToDelayedList+0xc4>)
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	4b0a      	ldr	r3, [pc, #40]	@ (800a3ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	4610      	mov	r0, r2
 800a3ca:	f7ff f80e 	bl	80093ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3ce:	4b0c      	ldr	r3, [pc, #48]	@ (800a400 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d202      	bcs.n	800a3de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a3d8:	4a09      	ldr	r2, [pc, #36]	@ (800a400 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	6013      	str	r3, [r2, #0]
}
 800a3de:	bf00      	nop
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20001600 	.word	0x20001600
 800a3ec:	200014fc 	.word	0x200014fc
 800a3f0:	20001604 	.word	0x20001604
 800a3f4:	200015e8 	.word	0x200015e8
 800a3f8:	200015b8 	.word	0x200015b8
 800a3fc:	200015b4 	.word	0x200015b4
 800a400:	2000161c 	.word	0x2000161c

0800a404 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	3b04      	subs	r3, #4
 800a414:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a41c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	3b04      	subs	r3, #4
 800a422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	f023 0201 	bic.w	r2, r3, #1
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	3b04      	subs	r3, #4
 800a432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a434:	4a0c      	ldr	r2, [pc, #48]	@ (800a468 <pxPortInitialiseStack+0x64>)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	3b14      	subs	r3, #20
 800a43e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	3b04      	subs	r3, #4
 800a44a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f06f 0202 	mvn.w	r2, #2
 800a452:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	3b20      	subs	r3, #32
 800a458:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a45a:	68fb      	ldr	r3, [r7, #12]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3714      	adds	r7, #20
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr
 800a468:	0800a46d 	.word	0x0800a46d

0800a46c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a472:	2300      	movs	r3, #0
 800a474:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a476:	4b13      	ldr	r3, [pc, #76]	@ (800a4c4 <prvTaskExitError+0x58>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47e:	d00b      	beq.n	800a498 <prvTaskExitError+0x2c>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	60fb      	str	r3, [r7, #12]
}
 800a492:	bf00      	nop
 800a494:	bf00      	nop
 800a496:	e7fd      	b.n	800a494 <prvTaskExitError+0x28>
	__asm volatile
 800a498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a49c:	f383 8811 	msr	BASEPRI, r3
 800a4a0:	f3bf 8f6f 	isb	sy
 800a4a4:	f3bf 8f4f 	dsb	sy
 800a4a8:	60bb      	str	r3, [r7, #8]
}
 800a4aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a4ac:	bf00      	nop
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d0fc      	beq.n	800a4ae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a4b4:	bf00      	nop
 800a4b6:	bf00      	nop
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	200001d8 	.word	0x200001d8
	...

0800a4d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a4d0:	4b07      	ldr	r3, [pc, #28]	@ (800a4f0 <pxCurrentTCBConst2>)
 800a4d2:	6819      	ldr	r1, [r3, #0]
 800a4d4:	6808      	ldr	r0, [r1, #0]
 800a4d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4da:	f380 8809 	msr	PSP, r0
 800a4de:	f3bf 8f6f 	isb	sy
 800a4e2:	f04f 0000 	mov.w	r0, #0
 800a4e6:	f380 8811 	msr	BASEPRI, r0
 800a4ea:	4770      	bx	lr
 800a4ec:	f3af 8000 	nop.w

0800a4f0 <pxCurrentTCBConst2>:
 800a4f0:	200014fc 	.word	0x200014fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a4f4:	bf00      	nop
 800a4f6:	bf00      	nop

0800a4f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a4f8:	4808      	ldr	r0, [pc, #32]	@ (800a51c <prvPortStartFirstTask+0x24>)
 800a4fa:	6800      	ldr	r0, [r0, #0]
 800a4fc:	6800      	ldr	r0, [r0, #0]
 800a4fe:	f380 8808 	msr	MSP, r0
 800a502:	f04f 0000 	mov.w	r0, #0
 800a506:	f380 8814 	msr	CONTROL, r0
 800a50a:	b662      	cpsie	i
 800a50c:	b661      	cpsie	f
 800a50e:	f3bf 8f4f 	dsb	sy
 800a512:	f3bf 8f6f 	isb	sy
 800a516:	df00      	svc	0
 800a518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a51a:	bf00      	nop
 800a51c:	e000ed08 	.word	0xe000ed08

0800a520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a526:	4b47      	ldr	r3, [pc, #284]	@ (800a644 <xPortStartScheduler+0x124>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a47      	ldr	r2, [pc, #284]	@ (800a648 <xPortStartScheduler+0x128>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d10b      	bne.n	800a548 <xPortStartScheduler+0x28>
	__asm volatile
 800a530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a534:	f383 8811 	msr	BASEPRI, r3
 800a538:	f3bf 8f6f 	isb	sy
 800a53c:	f3bf 8f4f 	dsb	sy
 800a540:	613b      	str	r3, [r7, #16]
}
 800a542:	bf00      	nop
 800a544:	bf00      	nop
 800a546:	e7fd      	b.n	800a544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a548:	4b3e      	ldr	r3, [pc, #248]	@ (800a644 <xPortStartScheduler+0x124>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a3f      	ldr	r2, [pc, #252]	@ (800a64c <xPortStartScheduler+0x12c>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d10b      	bne.n	800a56a <xPortStartScheduler+0x4a>
	__asm volatile
 800a552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a556:	f383 8811 	msr	BASEPRI, r3
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	60fb      	str	r3, [r7, #12]
}
 800a564:	bf00      	nop
 800a566:	bf00      	nop
 800a568:	e7fd      	b.n	800a566 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a56a:	4b39      	ldr	r3, [pc, #228]	@ (800a650 <xPortStartScheduler+0x130>)
 800a56c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	b2db      	uxtb	r3, r3
 800a574:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	22ff      	movs	r2, #255	@ 0xff
 800a57a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	b2db      	uxtb	r3, r3
 800a582:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a584:	78fb      	ldrb	r3, [r7, #3]
 800a586:	b2db      	uxtb	r3, r3
 800a588:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a58c:	b2da      	uxtb	r2, r3
 800a58e:	4b31      	ldr	r3, [pc, #196]	@ (800a654 <xPortStartScheduler+0x134>)
 800a590:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a592:	4b31      	ldr	r3, [pc, #196]	@ (800a658 <xPortStartScheduler+0x138>)
 800a594:	2207      	movs	r2, #7
 800a596:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a598:	e009      	b.n	800a5ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a59a:	4b2f      	ldr	r3, [pc, #188]	@ (800a658 <xPortStartScheduler+0x138>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	4a2d      	ldr	r2, [pc, #180]	@ (800a658 <xPortStartScheduler+0x138>)
 800a5a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a5a4:	78fb      	ldrb	r3, [r7, #3]
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	005b      	lsls	r3, r3, #1
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5ae:	78fb      	ldrb	r3, [r7, #3]
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5b6:	2b80      	cmp	r3, #128	@ 0x80
 800a5b8:	d0ef      	beq.n	800a59a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a5ba:	4b27      	ldr	r3, [pc, #156]	@ (800a658 <xPortStartScheduler+0x138>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f1c3 0307 	rsb	r3, r3, #7
 800a5c2:	2b04      	cmp	r3, #4
 800a5c4:	d00b      	beq.n	800a5de <xPortStartScheduler+0xbe>
	__asm volatile
 800a5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ca:	f383 8811 	msr	BASEPRI, r3
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	60bb      	str	r3, [r7, #8]
}
 800a5d8:	bf00      	nop
 800a5da:	bf00      	nop
 800a5dc:	e7fd      	b.n	800a5da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a5de:	4b1e      	ldr	r3, [pc, #120]	@ (800a658 <xPortStartScheduler+0x138>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	021b      	lsls	r3, r3, #8
 800a5e4:	4a1c      	ldr	r2, [pc, #112]	@ (800a658 <xPortStartScheduler+0x138>)
 800a5e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a5e8:	4b1b      	ldr	r3, [pc, #108]	@ (800a658 <xPortStartScheduler+0x138>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a5f0:	4a19      	ldr	r2, [pc, #100]	@ (800a658 <xPortStartScheduler+0x138>)
 800a5f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a5fc:	4b17      	ldr	r3, [pc, #92]	@ (800a65c <xPortStartScheduler+0x13c>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a16      	ldr	r2, [pc, #88]	@ (800a65c <xPortStartScheduler+0x13c>)
 800a602:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a606:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a608:	4b14      	ldr	r3, [pc, #80]	@ (800a65c <xPortStartScheduler+0x13c>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a13      	ldr	r2, [pc, #76]	@ (800a65c <xPortStartScheduler+0x13c>)
 800a60e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a612:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a614:	f000 f8da 	bl	800a7cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a618:	4b11      	ldr	r3, [pc, #68]	@ (800a660 <xPortStartScheduler+0x140>)
 800a61a:	2200      	movs	r2, #0
 800a61c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a61e:	f000 f8f9 	bl	800a814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a622:	4b10      	ldr	r3, [pc, #64]	@ (800a664 <xPortStartScheduler+0x144>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a0f      	ldr	r2, [pc, #60]	@ (800a664 <xPortStartScheduler+0x144>)
 800a628:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a62c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a62e:	f7ff ff63 	bl	800a4f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a632:	f7ff fa77 	bl	8009b24 <vTaskSwitchContext>
	prvTaskExitError();
 800a636:	f7ff ff19 	bl	800a46c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3718      	adds	r7, #24
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	e000ed00 	.word	0xe000ed00
 800a648:	410fc271 	.word	0x410fc271
 800a64c:	410fc270 	.word	0x410fc270
 800a650:	e000e400 	.word	0xe000e400
 800a654:	20001628 	.word	0x20001628
 800a658:	2000162c 	.word	0x2000162c
 800a65c:	e000ed20 	.word	0xe000ed20
 800a660:	200001d8 	.word	0x200001d8
 800a664:	e000ef34 	.word	0xe000ef34

0800a668 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	607b      	str	r3, [r7, #4]
}
 800a680:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a682:	4b10      	ldr	r3, [pc, #64]	@ (800a6c4 <vPortEnterCritical+0x5c>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	3301      	adds	r3, #1
 800a688:	4a0e      	ldr	r2, [pc, #56]	@ (800a6c4 <vPortEnterCritical+0x5c>)
 800a68a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a68c:	4b0d      	ldr	r3, [pc, #52]	@ (800a6c4 <vPortEnterCritical+0x5c>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d110      	bne.n	800a6b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a694:	4b0c      	ldr	r3, [pc, #48]	@ (800a6c8 <vPortEnterCritical+0x60>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00b      	beq.n	800a6b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a2:	f383 8811 	msr	BASEPRI, r3
 800a6a6:	f3bf 8f6f 	isb	sy
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	603b      	str	r3, [r7, #0]
}
 800a6b0:	bf00      	nop
 800a6b2:	bf00      	nop
 800a6b4:	e7fd      	b.n	800a6b2 <vPortEnterCritical+0x4a>
	}
}
 800a6b6:	bf00      	nop
 800a6b8:	370c      	adds	r7, #12
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	200001d8 	.word	0x200001d8
 800a6c8:	e000ed04 	.word	0xe000ed04

0800a6cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a6d2:	4b12      	ldr	r3, [pc, #72]	@ (800a71c <vPortExitCritical+0x50>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d10b      	bne.n	800a6f2 <vPortExitCritical+0x26>
	__asm volatile
 800a6da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6de:	f383 8811 	msr	BASEPRI, r3
 800a6e2:	f3bf 8f6f 	isb	sy
 800a6e6:	f3bf 8f4f 	dsb	sy
 800a6ea:	607b      	str	r3, [r7, #4]
}
 800a6ec:	bf00      	nop
 800a6ee:	bf00      	nop
 800a6f0:	e7fd      	b.n	800a6ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a6f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a71c <vPortExitCritical+0x50>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	4a08      	ldr	r2, [pc, #32]	@ (800a71c <vPortExitCritical+0x50>)
 800a6fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a6fc:	4b07      	ldr	r3, [pc, #28]	@ (800a71c <vPortExitCritical+0x50>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d105      	bne.n	800a710 <vPortExitCritical+0x44>
 800a704:	2300      	movs	r3, #0
 800a706:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	f383 8811 	msr	BASEPRI, r3
}
 800a70e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	200001d8 	.word	0x200001d8

0800a720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a720:	f3ef 8009 	mrs	r0, PSP
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	4b15      	ldr	r3, [pc, #84]	@ (800a780 <pxCurrentTCBConst>)
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	f01e 0f10 	tst.w	lr, #16
 800a730:	bf08      	it	eq
 800a732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a73a:	6010      	str	r0, [r2, #0]
 800a73c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a740:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a744:	f380 8811 	msr	BASEPRI, r0
 800a748:	f3bf 8f4f 	dsb	sy
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f7ff f9e8 	bl	8009b24 <vTaskSwitchContext>
 800a754:	f04f 0000 	mov.w	r0, #0
 800a758:	f380 8811 	msr	BASEPRI, r0
 800a75c:	bc09      	pop	{r0, r3}
 800a75e:	6819      	ldr	r1, [r3, #0]
 800a760:	6808      	ldr	r0, [r1, #0]
 800a762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a766:	f01e 0f10 	tst.w	lr, #16
 800a76a:	bf08      	it	eq
 800a76c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a770:	f380 8809 	msr	PSP, r0
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	f3af 8000 	nop.w

0800a780 <pxCurrentTCBConst>:
 800a780:	200014fc 	.word	0x200014fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a784:	bf00      	nop
 800a786:	bf00      	nop

0800a788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
	__asm volatile
 800a78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a792:	f383 8811 	msr	BASEPRI, r3
 800a796:	f3bf 8f6f 	isb	sy
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	607b      	str	r3, [r7, #4]
}
 800a7a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a7a2:	f7ff f905 	bl	80099b0 <xTaskIncrementTick>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d003      	beq.n	800a7b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a7ac:	4b06      	ldr	r3, [pc, #24]	@ (800a7c8 <SysTick_Handler+0x40>)
 800a7ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7b2:	601a      	str	r2, [r3, #0]
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	f383 8811 	msr	BASEPRI, r3
}
 800a7be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a7c0:	bf00      	nop
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	e000ed04 	.word	0xe000ed04

0800a7cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a7d0:	4b0b      	ldr	r3, [pc, #44]	@ (800a800 <vPortSetupTimerInterrupt+0x34>)
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a7d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a804 <vPortSetupTimerInterrupt+0x38>)
 800a7d8:	2200      	movs	r2, #0
 800a7da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a7dc:	4b0a      	ldr	r3, [pc, #40]	@ (800a808 <vPortSetupTimerInterrupt+0x3c>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a0a      	ldr	r2, [pc, #40]	@ (800a80c <vPortSetupTimerInterrupt+0x40>)
 800a7e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7e6:	099b      	lsrs	r3, r3, #6
 800a7e8:	4a09      	ldr	r2, [pc, #36]	@ (800a810 <vPortSetupTimerInterrupt+0x44>)
 800a7ea:	3b01      	subs	r3, #1
 800a7ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a7ee:	4b04      	ldr	r3, [pc, #16]	@ (800a800 <vPortSetupTimerInterrupt+0x34>)
 800a7f0:	2207      	movs	r2, #7
 800a7f2:	601a      	str	r2, [r3, #0]
}
 800a7f4:	bf00      	nop
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	e000e010 	.word	0xe000e010
 800a804:	e000e018 	.word	0xe000e018
 800a808:	200001cc 	.word	0x200001cc
 800a80c:	10624dd3 	.word	0x10624dd3
 800a810:	e000e014 	.word	0xe000e014

0800a814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a814:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a824 <vPortEnableVFP+0x10>
 800a818:	6801      	ldr	r1, [r0, #0]
 800a81a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a81e:	6001      	str	r1, [r0, #0]
 800a820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a822:	bf00      	nop
 800a824:	e000ed88 	.word	0xe000ed88

0800a828 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a82e:	f3ef 8305 	mrs	r3, IPSR
 800a832:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2b0f      	cmp	r3, #15
 800a838:	d915      	bls.n	800a866 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a83a:	4a18      	ldr	r2, [pc, #96]	@ (800a89c <vPortValidateInterruptPriority+0x74>)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	4413      	add	r3, r2
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a844:	4b16      	ldr	r3, [pc, #88]	@ (800a8a0 <vPortValidateInterruptPriority+0x78>)
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	7afa      	ldrb	r2, [r7, #11]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d20b      	bcs.n	800a866 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a852:	f383 8811 	msr	BASEPRI, r3
 800a856:	f3bf 8f6f 	isb	sy
 800a85a:	f3bf 8f4f 	dsb	sy
 800a85e:	607b      	str	r3, [r7, #4]
}
 800a860:	bf00      	nop
 800a862:	bf00      	nop
 800a864:	e7fd      	b.n	800a862 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a866:	4b0f      	ldr	r3, [pc, #60]	@ (800a8a4 <vPortValidateInterruptPriority+0x7c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a86e:	4b0e      	ldr	r3, [pc, #56]	@ (800a8a8 <vPortValidateInterruptPriority+0x80>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	429a      	cmp	r2, r3
 800a874:	d90b      	bls.n	800a88e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a87a:	f383 8811 	msr	BASEPRI, r3
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f3bf 8f4f 	dsb	sy
 800a886:	603b      	str	r3, [r7, #0]
}
 800a888:	bf00      	nop
 800a88a:	bf00      	nop
 800a88c:	e7fd      	b.n	800a88a <vPortValidateInterruptPriority+0x62>
	}
 800a88e:	bf00      	nop
 800a890:	3714      	adds	r7, #20
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	e000e3f0 	.word	0xe000e3f0
 800a8a0:	20001628 	.word	0x20001628
 800a8a4:	e000ed0c 	.word	0xe000ed0c
 800a8a8:	2000162c 	.word	0x2000162c

0800a8ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b08a      	sub	sp, #40	@ 0x28
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a8b8:	f7fe ffce 	bl	8009858 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a8bc:	4b5c      	ldr	r3, [pc, #368]	@ (800aa30 <pvPortMalloc+0x184>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d101      	bne.n	800a8c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a8c4:	f000 f924 	bl	800ab10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a8c8:	4b5a      	ldr	r3, [pc, #360]	@ (800aa34 <pvPortMalloc+0x188>)
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4013      	ands	r3, r2
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f040 8095 	bne.w	800aa00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d01e      	beq.n	800a91a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a8dc:	2208      	movs	r2, #8
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f003 0307 	and.w	r3, r3, #7
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d015      	beq.n	800a91a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f023 0307 	bic.w	r3, r3, #7
 800a8f4:	3308      	adds	r3, #8
 800a8f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f003 0307 	and.w	r3, r3, #7
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d00b      	beq.n	800a91a <pvPortMalloc+0x6e>
	__asm volatile
 800a902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a906:	f383 8811 	msr	BASEPRI, r3
 800a90a:	f3bf 8f6f 	isb	sy
 800a90e:	f3bf 8f4f 	dsb	sy
 800a912:	617b      	str	r3, [r7, #20]
}
 800a914:	bf00      	nop
 800a916:	bf00      	nop
 800a918:	e7fd      	b.n	800a916 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d06f      	beq.n	800aa00 <pvPortMalloc+0x154>
 800a920:	4b45      	ldr	r3, [pc, #276]	@ (800aa38 <pvPortMalloc+0x18c>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	429a      	cmp	r2, r3
 800a928:	d86a      	bhi.n	800aa00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a92a:	4b44      	ldr	r3, [pc, #272]	@ (800aa3c <pvPortMalloc+0x190>)
 800a92c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a92e:	4b43      	ldr	r3, [pc, #268]	@ (800aa3c <pvPortMalloc+0x190>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a934:	e004      	b.n	800a940 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a938:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	429a      	cmp	r2, r3
 800a948:	d903      	bls.n	800a952 <pvPortMalloc+0xa6>
 800a94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1f1      	bne.n	800a936 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a952:	4b37      	ldr	r3, [pc, #220]	@ (800aa30 <pvPortMalloc+0x184>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a958:	429a      	cmp	r2, r3
 800a95a:	d051      	beq.n	800aa00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a95c:	6a3b      	ldr	r3, [r7, #32]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2208      	movs	r2, #8
 800a962:	4413      	add	r3, r2
 800a964:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a970:	685a      	ldr	r2, [r3, #4]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	1ad2      	subs	r2, r2, r3
 800a976:	2308      	movs	r3, #8
 800a978:	005b      	lsls	r3, r3, #1
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d920      	bls.n	800a9c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a97e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	4413      	add	r3, r2
 800a984:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	f003 0307 	and.w	r3, r3, #7
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d00b      	beq.n	800a9a8 <pvPortMalloc+0xfc>
	__asm volatile
 800a990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a994:	f383 8811 	msr	BASEPRI, r3
 800a998:	f3bf 8f6f 	isb	sy
 800a99c:	f3bf 8f4f 	dsb	sy
 800a9a0:	613b      	str	r3, [r7, #16]
}
 800a9a2:	bf00      	nop
 800a9a4:	bf00      	nop
 800a9a6:	e7fd      	b.n	800a9a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	1ad2      	subs	r2, r2, r3
 800a9b0:	69bb      	ldr	r3, [r7, #24]
 800a9b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a9ba:	69b8      	ldr	r0, [r7, #24]
 800a9bc:	f000 f90a 	bl	800abd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a9c0:	4b1d      	ldr	r3, [pc, #116]	@ (800aa38 <pvPortMalloc+0x18c>)
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	1ad3      	subs	r3, r2, r3
 800a9ca:	4a1b      	ldr	r2, [pc, #108]	@ (800aa38 <pvPortMalloc+0x18c>)
 800a9cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a9ce:	4b1a      	ldr	r3, [pc, #104]	@ (800aa38 <pvPortMalloc+0x18c>)
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	4b1b      	ldr	r3, [pc, #108]	@ (800aa40 <pvPortMalloc+0x194>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d203      	bcs.n	800a9e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a9da:	4b17      	ldr	r3, [pc, #92]	@ (800aa38 <pvPortMalloc+0x18c>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a18      	ldr	r2, [pc, #96]	@ (800aa40 <pvPortMalloc+0x194>)
 800a9e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	4b13      	ldr	r3, [pc, #76]	@ (800aa34 <pvPortMalloc+0x188>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	431a      	orrs	r2, r3
 800a9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a9f6:	4b13      	ldr	r3, [pc, #76]	@ (800aa44 <pvPortMalloc+0x198>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	4a11      	ldr	r2, [pc, #68]	@ (800aa44 <pvPortMalloc+0x198>)
 800a9fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa00:	f7fe ff38 	bl	8009874 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	f003 0307 	and.w	r3, r3, #7
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00b      	beq.n	800aa26 <pvPortMalloc+0x17a>
	__asm volatile
 800aa0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa12:	f383 8811 	msr	BASEPRI, r3
 800aa16:	f3bf 8f6f 	isb	sy
 800aa1a:	f3bf 8f4f 	dsb	sy
 800aa1e:	60fb      	str	r3, [r7, #12]
}
 800aa20:	bf00      	nop
 800aa22:	bf00      	nop
 800aa24:	e7fd      	b.n	800aa22 <pvPortMalloc+0x176>
	return pvReturn;
 800aa26:	69fb      	ldr	r3, [r7, #28]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3728      	adds	r7, #40	@ 0x28
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	20002238 	.word	0x20002238
 800aa34:	2000224c 	.word	0x2000224c
 800aa38:	2000223c 	.word	0x2000223c
 800aa3c:	20002230 	.word	0x20002230
 800aa40:	20002240 	.word	0x20002240
 800aa44:	20002244 	.word	0x20002244

0800aa48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d04f      	beq.n	800aafa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa5a:	2308      	movs	r3, #8
 800aa5c:	425b      	negs	r3, r3
 800aa5e:	697a      	ldr	r2, [r7, #20]
 800aa60:	4413      	add	r3, r2
 800aa62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	685a      	ldr	r2, [r3, #4]
 800aa6c:	4b25      	ldr	r3, [pc, #148]	@ (800ab04 <vPortFree+0xbc>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4013      	ands	r3, r2
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d10b      	bne.n	800aa8e <vPortFree+0x46>
	__asm volatile
 800aa76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	60fb      	str	r3, [r7, #12]
}
 800aa88:	bf00      	nop
 800aa8a:	bf00      	nop
 800aa8c:	e7fd      	b.n	800aa8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00b      	beq.n	800aaae <vPortFree+0x66>
	__asm volatile
 800aa96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa9a:	f383 8811 	msr	BASEPRI, r3
 800aa9e:	f3bf 8f6f 	isb	sy
 800aaa2:	f3bf 8f4f 	dsb	sy
 800aaa6:	60bb      	str	r3, [r7, #8]
}
 800aaa8:	bf00      	nop
 800aaaa:	bf00      	nop
 800aaac:	e7fd      	b.n	800aaaa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	685a      	ldr	r2, [r3, #4]
 800aab2:	4b14      	ldr	r3, [pc, #80]	@ (800ab04 <vPortFree+0xbc>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4013      	ands	r3, r2
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d01e      	beq.n	800aafa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d11a      	bne.n	800aafa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	685a      	ldr	r2, [r3, #4]
 800aac8:	4b0e      	ldr	r3, [pc, #56]	@ (800ab04 <vPortFree+0xbc>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	43db      	mvns	r3, r3
 800aace:	401a      	ands	r2, r3
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aad4:	f7fe fec0 	bl	8009858 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	685a      	ldr	r2, [r3, #4]
 800aadc:	4b0a      	ldr	r3, [pc, #40]	@ (800ab08 <vPortFree+0xc0>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4413      	add	r3, r2
 800aae2:	4a09      	ldr	r2, [pc, #36]	@ (800ab08 <vPortFree+0xc0>)
 800aae4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aae6:	6938      	ldr	r0, [r7, #16]
 800aae8:	f000 f874 	bl	800abd4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aaec:	4b07      	ldr	r3, [pc, #28]	@ (800ab0c <vPortFree+0xc4>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	4a06      	ldr	r2, [pc, #24]	@ (800ab0c <vPortFree+0xc4>)
 800aaf4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aaf6:	f7fe febd 	bl	8009874 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aafa:	bf00      	nop
 800aafc:	3718      	adds	r7, #24
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	2000224c 	.word	0x2000224c
 800ab08:	2000223c 	.word	0x2000223c
 800ab0c:	20002248 	.word	0x20002248

0800ab10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab16:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800ab1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab1c:	4b27      	ldr	r3, [pc, #156]	@ (800abbc <prvHeapInit+0xac>)
 800ab1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f003 0307 	and.w	r3, r3, #7
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d00c      	beq.n	800ab44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	3307      	adds	r3, #7
 800ab2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f023 0307 	bic.w	r3, r3, #7
 800ab36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab38:	68ba      	ldr	r2, [r7, #8]
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	1ad3      	subs	r3, r2, r3
 800ab3e:	4a1f      	ldr	r2, [pc, #124]	@ (800abbc <prvHeapInit+0xac>)
 800ab40:	4413      	add	r3, r2
 800ab42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab48:	4a1d      	ldr	r2, [pc, #116]	@ (800abc0 <prvHeapInit+0xb0>)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab4e:	4b1c      	ldr	r3, [pc, #112]	@ (800abc0 <prvHeapInit+0xb0>)
 800ab50:	2200      	movs	r2, #0
 800ab52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	68ba      	ldr	r2, [r7, #8]
 800ab58:	4413      	add	r3, r2
 800ab5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab5c:	2208      	movs	r2, #8
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	1a9b      	subs	r3, r3, r2
 800ab62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f023 0307 	bic.w	r3, r3, #7
 800ab6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	4a15      	ldr	r2, [pc, #84]	@ (800abc4 <prvHeapInit+0xb4>)
 800ab70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ab72:	4b14      	ldr	r3, [pc, #80]	@ (800abc4 <prvHeapInit+0xb4>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2200      	movs	r2, #0
 800ab78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab7a:	4b12      	ldr	r3, [pc, #72]	@ (800abc4 <prvHeapInit+0xb4>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	1ad2      	subs	r2, r2, r3
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab90:	4b0c      	ldr	r3, [pc, #48]	@ (800abc4 <prvHeapInit+0xb4>)
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	4a0a      	ldr	r2, [pc, #40]	@ (800abc8 <prvHeapInit+0xb8>)
 800ab9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	4a09      	ldr	r2, [pc, #36]	@ (800abcc <prvHeapInit+0xbc>)
 800aba6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aba8:	4b09      	ldr	r3, [pc, #36]	@ (800abd0 <prvHeapInit+0xc0>)
 800abaa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800abae:	601a      	str	r2, [r3, #0]
}
 800abb0:	bf00      	nop
 800abb2:	3714      	adds	r7, #20
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr
 800abbc:	20001630 	.word	0x20001630
 800abc0:	20002230 	.word	0x20002230
 800abc4:	20002238 	.word	0x20002238
 800abc8:	20002240 	.word	0x20002240
 800abcc:	2000223c 	.word	0x2000223c
 800abd0:	2000224c 	.word	0x2000224c

0800abd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800abdc:	4b28      	ldr	r3, [pc, #160]	@ (800ac80 <prvInsertBlockIntoFreeList+0xac>)
 800abde:	60fb      	str	r3, [r7, #12]
 800abe0:	e002      	b.n	800abe8 <prvInsertBlockIntoFreeList+0x14>
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	60fb      	str	r3, [r7, #12]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d8f7      	bhi.n	800abe2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	68ba      	ldr	r2, [r7, #8]
 800abfc:	4413      	add	r3, r2
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d108      	bne.n	800ac16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	685a      	ldr	r2, [r3, #4]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	441a      	add	r2, r3
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	68ba      	ldr	r2, [r7, #8]
 800ac20:	441a      	add	r2, r3
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d118      	bne.n	800ac5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	4b15      	ldr	r3, [pc, #84]	@ (800ac84 <prvInsertBlockIntoFreeList+0xb0>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d00d      	beq.n	800ac52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	685a      	ldr	r2, [r3, #4]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	441a      	add	r2, r3
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	601a      	str	r2, [r3, #0]
 800ac50:	e008      	b.n	800ac64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac52:	4b0c      	ldr	r3, [pc, #48]	@ (800ac84 <prvInsertBlockIntoFreeList+0xb0>)
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	601a      	str	r2, [r3, #0]
 800ac5a:	e003      	b.n	800ac64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d002      	beq.n	800ac72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac72:	bf00      	nop
 800ac74:	3714      	adds	r7, #20
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr
 800ac7e:	bf00      	nop
 800ac80:	20002230 	.word	0x20002230
 800ac84:	20002238 	.word	0x20002238

0800ac88 <__cvt>:
 800ac88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac8c:	ec57 6b10 	vmov	r6, r7, d0
 800ac90:	2f00      	cmp	r7, #0
 800ac92:	460c      	mov	r4, r1
 800ac94:	4619      	mov	r1, r3
 800ac96:	463b      	mov	r3, r7
 800ac98:	bfbb      	ittet	lt
 800ac9a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ac9e:	461f      	movlt	r7, r3
 800aca0:	2300      	movge	r3, #0
 800aca2:	232d      	movlt	r3, #45	@ 0x2d
 800aca4:	700b      	strb	r3, [r1, #0]
 800aca6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aca8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800acac:	4691      	mov	r9, r2
 800acae:	f023 0820 	bic.w	r8, r3, #32
 800acb2:	bfbc      	itt	lt
 800acb4:	4632      	movlt	r2, r6
 800acb6:	4616      	movlt	r6, r2
 800acb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800acbc:	d005      	beq.n	800acca <__cvt+0x42>
 800acbe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800acc2:	d100      	bne.n	800acc6 <__cvt+0x3e>
 800acc4:	3401      	adds	r4, #1
 800acc6:	2102      	movs	r1, #2
 800acc8:	e000      	b.n	800accc <__cvt+0x44>
 800acca:	2103      	movs	r1, #3
 800accc:	ab03      	add	r3, sp, #12
 800acce:	9301      	str	r3, [sp, #4]
 800acd0:	ab02      	add	r3, sp, #8
 800acd2:	9300      	str	r3, [sp, #0]
 800acd4:	ec47 6b10 	vmov	d0, r6, r7
 800acd8:	4653      	mov	r3, sl
 800acda:	4622      	mov	r2, r4
 800acdc:	f001 f9dc 	bl	800c098 <_dtoa_r>
 800ace0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ace4:	4605      	mov	r5, r0
 800ace6:	d119      	bne.n	800ad1c <__cvt+0x94>
 800ace8:	f019 0f01 	tst.w	r9, #1
 800acec:	d00e      	beq.n	800ad0c <__cvt+0x84>
 800acee:	eb00 0904 	add.w	r9, r0, r4
 800acf2:	2200      	movs	r2, #0
 800acf4:	2300      	movs	r3, #0
 800acf6:	4630      	mov	r0, r6
 800acf8:	4639      	mov	r1, r7
 800acfa:	f7f5 ff0d 	bl	8000b18 <__aeabi_dcmpeq>
 800acfe:	b108      	cbz	r0, 800ad04 <__cvt+0x7c>
 800ad00:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad04:	2230      	movs	r2, #48	@ 0x30
 800ad06:	9b03      	ldr	r3, [sp, #12]
 800ad08:	454b      	cmp	r3, r9
 800ad0a:	d31e      	bcc.n	800ad4a <__cvt+0xc2>
 800ad0c:	9b03      	ldr	r3, [sp, #12]
 800ad0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad10:	1b5b      	subs	r3, r3, r5
 800ad12:	4628      	mov	r0, r5
 800ad14:	6013      	str	r3, [r2, #0]
 800ad16:	b004      	add	sp, #16
 800ad18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad20:	eb00 0904 	add.w	r9, r0, r4
 800ad24:	d1e5      	bne.n	800acf2 <__cvt+0x6a>
 800ad26:	7803      	ldrb	r3, [r0, #0]
 800ad28:	2b30      	cmp	r3, #48	@ 0x30
 800ad2a:	d10a      	bne.n	800ad42 <__cvt+0xba>
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	2300      	movs	r3, #0
 800ad30:	4630      	mov	r0, r6
 800ad32:	4639      	mov	r1, r7
 800ad34:	f7f5 fef0 	bl	8000b18 <__aeabi_dcmpeq>
 800ad38:	b918      	cbnz	r0, 800ad42 <__cvt+0xba>
 800ad3a:	f1c4 0401 	rsb	r4, r4, #1
 800ad3e:	f8ca 4000 	str.w	r4, [sl]
 800ad42:	f8da 3000 	ldr.w	r3, [sl]
 800ad46:	4499      	add	r9, r3
 800ad48:	e7d3      	b.n	800acf2 <__cvt+0x6a>
 800ad4a:	1c59      	adds	r1, r3, #1
 800ad4c:	9103      	str	r1, [sp, #12]
 800ad4e:	701a      	strb	r2, [r3, #0]
 800ad50:	e7d9      	b.n	800ad06 <__cvt+0x7e>

0800ad52 <__exponent>:
 800ad52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad54:	2900      	cmp	r1, #0
 800ad56:	bfba      	itte	lt
 800ad58:	4249      	neglt	r1, r1
 800ad5a:	232d      	movlt	r3, #45	@ 0x2d
 800ad5c:	232b      	movge	r3, #43	@ 0x2b
 800ad5e:	2909      	cmp	r1, #9
 800ad60:	7002      	strb	r2, [r0, #0]
 800ad62:	7043      	strb	r3, [r0, #1]
 800ad64:	dd29      	ble.n	800adba <__exponent+0x68>
 800ad66:	f10d 0307 	add.w	r3, sp, #7
 800ad6a:	461d      	mov	r5, r3
 800ad6c:	270a      	movs	r7, #10
 800ad6e:	461a      	mov	r2, r3
 800ad70:	fbb1 f6f7 	udiv	r6, r1, r7
 800ad74:	fb07 1416 	mls	r4, r7, r6, r1
 800ad78:	3430      	adds	r4, #48	@ 0x30
 800ad7a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ad7e:	460c      	mov	r4, r1
 800ad80:	2c63      	cmp	r4, #99	@ 0x63
 800ad82:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad86:	4631      	mov	r1, r6
 800ad88:	dcf1      	bgt.n	800ad6e <__exponent+0x1c>
 800ad8a:	3130      	adds	r1, #48	@ 0x30
 800ad8c:	1e94      	subs	r4, r2, #2
 800ad8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ad92:	1c41      	adds	r1, r0, #1
 800ad94:	4623      	mov	r3, r4
 800ad96:	42ab      	cmp	r3, r5
 800ad98:	d30a      	bcc.n	800adb0 <__exponent+0x5e>
 800ad9a:	f10d 0309 	add.w	r3, sp, #9
 800ad9e:	1a9b      	subs	r3, r3, r2
 800ada0:	42ac      	cmp	r4, r5
 800ada2:	bf88      	it	hi
 800ada4:	2300      	movhi	r3, #0
 800ada6:	3302      	adds	r3, #2
 800ada8:	4403      	add	r3, r0
 800adaa:	1a18      	subs	r0, r3, r0
 800adac:	b003      	add	sp, #12
 800adae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adb0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800adb4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800adb8:	e7ed      	b.n	800ad96 <__exponent+0x44>
 800adba:	2330      	movs	r3, #48	@ 0x30
 800adbc:	3130      	adds	r1, #48	@ 0x30
 800adbe:	7083      	strb	r3, [r0, #2]
 800adc0:	70c1      	strb	r1, [r0, #3]
 800adc2:	1d03      	adds	r3, r0, #4
 800adc4:	e7f1      	b.n	800adaa <__exponent+0x58>
	...

0800adc8 <_printf_float>:
 800adc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adcc:	b08d      	sub	sp, #52	@ 0x34
 800adce:	460c      	mov	r4, r1
 800add0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800add4:	4616      	mov	r6, r2
 800add6:	461f      	mov	r7, r3
 800add8:	4605      	mov	r5, r0
 800adda:	f000 fff3 	bl	800bdc4 <_localeconv_r>
 800adde:	6803      	ldr	r3, [r0, #0]
 800ade0:	9304      	str	r3, [sp, #16]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7f5 fa6c 	bl	80002c0 <strlen>
 800ade8:	2300      	movs	r3, #0
 800adea:	930a      	str	r3, [sp, #40]	@ 0x28
 800adec:	f8d8 3000 	ldr.w	r3, [r8]
 800adf0:	9005      	str	r0, [sp, #20]
 800adf2:	3307      	adds	r3, #7
 800adf4:	f023 0307 	bic.w	r3, r3, #7
 800adf8:	f103 0208 	add.w	r2, r3, #8
 800adfc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ae00:	f8d4 b000 	ldr.w	fp, [r4]
 800ae04:	f8c8 2000 	str.w	r2, [r8]
 800ae08:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ae10:	9307      	str	r3, [sp, #28]
 800ae12:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ae1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae1e:	4b9c      	ldr	r3, [pc, #624]	@ (800b090 <_printf_float+0x2c8>)
 800ae20:	f04f 32ff 	mov.w	r2, #4294967295
 800ae24:	f7f5 feaa 	bl	8000b7c <__aeabi_dcmpun>
 800ae28:	bb70      	cbnz	r0, 800ae88 <_printf_float+0xc0>
 800ae2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae2e:	4b98      	ldr	r3, [pc, #608]	@ (800b090 <_printf_float+0x2c8>)
 800ae30:	f04f 32ff 	mov.w	r2, #4294967295
 800ae34:	f7f5 fe84 	bl	8000b40 <__aeabi_dcmple>
 800ae38:	bb30      	cbnz	r0, 800ae88 <_printf_float+0xc0>
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	4640      	mov	r0, r8
 800ae40:	4649      	mov	r1, r9
 800ae42:	f7f5 fe73 	bl	8000b2c <__aeabi_dcmplt>
 800ae46:	b110      	cbz	r0, 800ae4e <_printf_float+0x86>
 800ae48:	232d      	movs	r3, #45	@ 0x2d
 800ae4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae4e:	4a91      	ldr	r2, [pc, #580]	@ (800b094 <_printf_float+0x2cc>)
 800ae50:	4b91      	ldr	r3, [pc, #580]	@ (800b098 <_printf_float+0x2d0>)
 800ae52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ae56:	bf94      	ite	ls
 800ae58:	4690      	movls	r8, r2
 800ae5a:	4698      	movhi	r8, r3
 800ae5c:	2303      	movs	r3, #3
 800ae5e:	6123      	str	r3, [r4, #16]
 800ae60:	f02b 0304 	bic.w	r3, fp, #4
 800ae64:	6023      	str	r3, [r4, #0]
 800ae66:	f04f 0900 	mov.w	r9, #0
 800ae6a:	9700      	str	r7, [sp, #0]
 800ae6c:	4633      	mov	r3, r6
 800ae6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ae70:	4621      	mov	r1, r4
 800ae72:	4628      	mov	r0, r5
 800ae74:	f000 f9d2 	bl	800b21c <_printf_common>
 800ae78:	3001      	adds	r0, #1
 800ae7a:	f040 808d 	bne.w	800af98 <_printf_float+0x1d0>
 800ae7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae82:	b00d      	add	sp, #52	@ 0x34
 800ae84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae88:	4642      	mov	r2, r8
 800ae8a:	464b      	mov	r3, r9
 800ae8c:	4640      	mov	r0, r8
 800ae8e:	4649      	mov	r1, r9
 800ae90:	f7f5 fe74 	bl	8000b7c <__aeabi_dcmpun>
 800ae94:	b140      	cbz	r0, 800aea8 <_printf_float+0xe0>
 800ae96:	464b      	mov	r3, r9
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	bfbc      	itt	lt
 800ae9c:	232d      	movlt	r3, #45	@ 0x2d
 800ae9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aea2:	4a7e      	ldr	r2, [pc, #504]	@ (800b09c <_printf_float+0x2d4>)
 800aea4:	4b7e      	ldr	r3, [pc, #504]	@ (800b0a0 <_printf_float+0x2d8>)
 800aea6:	e7d4      	b.n	800ae52 <_printf_float+0x8a>
 800aea8:	6863      	ldr	r3, [r4, #4]
 800aeaa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800aeae:	9206      	str	r2, [sp, #24]
 800aeb0:	1c5a      	adds	r2, r3, #1
 800aeb2:	d13b      	bne.n	800af2c <_printf_float+0x164>
 800aeb4:	2306      	movs	r3, #6
 800aeb6:	6063      	str	r3, [r4, #4]
 800aeb8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800aebc:	2300      	movs	r3, #0
 800aebe:	6022      	str	r2, [r4, #0]
 800aec0:	9303      	str	r3, [sp, #12]
 800aec2:	ab0a      	add	r3, sp, #40	@ 0x28
 800aec4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800aec8:	ab09      	add	r3, sp, #36	@ 0x24
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	6861      	ldr	r1, [r4, #4]
 800aece:	ec49 8b10 	vmov	d0, r8, r9
 800aed2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800aed6:	4628      	mov	r0, r5
 800aed8:	f7ff fed6 	bl	800ac88 <__cvt>
 800aedc:	9b06      	ldr	r3, [sp, #24]
 800aede:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aee0:	2b47      	cmp	r3, #71	@ 0x47
 800aee2:	4680      	mov	r8, r0
 800aee4:	d129      	bne.n	800af3a <_printf_float+0x172>
 800aee6:	1cc8      	adds	r0, r1, #3
 800aee8:	db02      	blt.n	800aef0 <_printf_float+0x128>
 800aeea:	6863      	ldr	r3, [r4, #4]
 800aeec:	4299      	cmp	r1, r3
 800aeee:	dd41      	ble.n	800af74 <_printf_float+0x1ac>
 800aef0:	f1aa 0a02 	sub.w	sl, sl, #2
 800aef4:	fa5f fa8a 	uxtb.w	sl, sl
 800aef8:	3901      	subs	r1, #1
 800aefa:	4652      	mov	r2, sl
 800aefc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800af00:	9109      	str	r1, [sp, #36]	@ 0x24
 800af02:	f7ff ff26 	bl	800ad52 <__exponent>
 800af06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af08:	1813      	adds	r3, r2, r0
 800af0a:	2a01      	cmp	r2, #1
 800af0c:	4681      	mov	r9, r0
 800af0e:	6123      	str	r3, [r4, #16]
 800af10:	dc02      	bgt.n	800af18 <_printf_float+0x150>
 800af12:	6822      	ldr	r2, [r4, #0]
 800af14:	07d2      	lsls	r2, r2, #31
 800af16:	d501      	bpl.n	800af1c <_printf_float+0x154>
 800af18:	3301      	adds	r3, #1
 800af1a:	6123      	str	r3, [r4, #16]
 800af1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800af20:	2b00      	cmp	r3, #0
 800af22:	d0a2      	beq.n	800ae6a <_printf_float+0xa2>
 800af24:	232d      	movs	r3, #45	@ 0x2d
 800af26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af2a:	e79e      	b.n	800ae6a <_printf_float+0xa2>
 800af2c:	9a06      	ldr	r2, [sp, #24]
 800af2e:	2a47      	cmp	r2, #71	@ 0x47
 800af30:	d1c2      	bne.n	800aeb8 <_printf_float+0xf0>
 800af32:	2b00      	cmp	r3, #0
 800af34:	d1c0      	bne.n	800aeb8 <_printf_float+0xf0>
 800af36:	2301      	movs	r3, #1
 800af38:	e7bd      	b.n	800aeb6 <_printf_float+0xee>
 800af3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800af3e:	d9db      	bls.n	800aef8 <_printf_float+0x130>
 800af40:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800af44:	d118      	bne.n	800af78 <_printf_float+0x1b0>
 800af46:	2900      	cmp	r1, #0
 800af48:	6863      	ldr	r3, [r4, #4]
 800af4a:	dd0b      	ble.n	800af64 <_printf_float+0x19c>
 800af4c:	6121      	str	r1, [r4, #16]
 800af4e:	b913      	cbnz	r3, 800af56 <_printf_float+0x18e>
 800af50:	6822      	ldr	r2, [r4, #0]
 800af52:	07d0      	lsls	r0, r2, #31
 800af54:	d502      	bpl.n	800af5c <_printf_float+0x194>
 800af56:	3301      	adds	r3, #1
 800af58:	440b      	add	r3, r1
 800af5a:	6123      	str	r3, [r4, #16]
 800af5c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800af5e:	f04f 0900 	mov.w	r9, #0
 800af62:	e7db      	b.n	800af1c <_printf_float+0x154>
 800af64:	b913      	cbnz	r3, 800af6c <_printf_float+0x1a4>
 800af66:	6822      	ldr	r2, [r4, #0]
 800af68:	07d2      	lsls	r2, r2, #31
 800af6a:	d501      	bpl.n	800af70 <_printf_float+0x1a8>
 800af6c:	3302      	adds	r3, #2
 800af6e:	e7f4      	b.n	800af5a <_printf_float+0x192>
 800af70:	2301      	movs	r3, #1
 800af72:	e7f2      	b.n	800af5a <_printf_float+0x192>
 800af74:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800af78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af7a:	4299      	cmp	r1, r3
 800af7c:	db05      	blt.n	800af8a <_printf_float+0x1c2>
 800af7e:	6823      	ldr	r3, [r4, #0]
 800af80:	6121      	str	r1, [r4, #16]
 800af82:	07d8      	lsls	r0, r3, #31
 800af84:	d5ea      	bpl.n	800af5c <_printf_float+0x194>
 800af86:	1c4b      	adds	r3, r1, #1
 800af88:	e7e7      	b.n	800af5a <_printf_float+0x192>
 800af8a:	2900      	cmp	r1, #0
 800af8c:	bfd4      	ite	le
 800af8e:	f1c1 0202 	rsble	r2, r1, #2
 800af92:	2201      	movgt	r2, #1
 800af94:	4413      	add	r3, r2
 800af96:	e7e0      	b.n	800af5a <_printf_float+0x192>
 800af98:	6823      	ldr	r3, [r4, #0]
 800af9a:	055a      	lsls	r2, r3, #21
 800af9c:	d407      	bmi.n	800afae <_printf_float+0x1e6>
 800af9e:	6923      	ldr	r3, [r4, #16]
 800afa0:	4642      	mov	r2, r8
 800afa2:	4631      	mov	r1, r6
 800afa4:	4628      	mov	r0, r5
 800afa6:	47b8      	blx	r7
 800afa8:	3001      	adds	r0, #1
 800afaa:	d12b      	bne.n	800b004 <_printf_float+0x23c>
 800afac:	e767      	b.n	800ae7e <_printf_float+0xb6>
 800afae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800afb2:	f240 80dd 	bls.w	800b170 <_printf_float+0x3a8>
 800afb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800afba:	2200      	movs	r2, #0
 800afbc:	2300      	movs	r3, #0
 800afbe:	f7f5 fdab 	bl	8000b18 <__aeabi_dcmpeq>
 800afc2:	2800      	cmp	r0, #0
 800afc4:	d033      	beq.n	800b02e <_printf_float+0x266>
 800afc6:	4a37      	ldr	r2, [pc, #220]	@ (800b0a4 <_printf_float+0x2dc>)
 800afc8:	2301      	movs	r3, #1
 800afca:	4631      	mov	r1, r6
 800afcc:	4628      	mov	r0, r5
 800afce:	47b8      	blx	r7
 800afd0:	3001      	adds	r0, #1
 800afd2:	f43f af54 	beq.w	800ae7e <_printf_float+0xb6>
 800afd6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800afda:	4543      	cmp	r3, r8
 800afdc:	db02      	blt.n	800afe4 <_printf_float+0x21c>
 800afde:	6823      	ldr	r3, [r4, #0]
 800afe0:	07d8      	lsls	r0, r3, #31
 800afe2:	d50f      	bpl.n	800b004 <_printf_float+0x23c>
 800afe4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afe8:	4631      	mov	r1, r6
 800afea:	4628      	mov	r0, r5
 800afec:	47b8      	blx	r7
 800afee:	3001      	adds	r0, #1
 800aff0:	f43f af45 	beq.w	800ae7e <_printf_float+0xb6>
 800aff4:	f04f 0900 	mov.w	r9, #0
 800aff8:	f108 38ff 	add.w	r8, r8, #4294967295
 800affc:	f104 0a1a 	add.w	sl, r4, #26
 800b000:	45c8      	cmp	r8, r9
 800b002:	dc09      	bgt.n	800b018 <_printf_float+0x250>
 800b004:	6823      	ldr	r3, [r4, #0]
 800b006:	079b      	lsls	r3, r3, #30
 800b008:	f100 8103 	bmi.w	800b212 <_printf_float+0x44a>
 800b00c:	68e0      	ldr	r0, [r4, #12]
 800b00e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b010:	4298      	cmp	r0, r3
 800b012:	bfb8      	it	lt
 800b014:	4618      	movlt	r0, r3
 800b016:	e734      	b.n	800ae82 <_printf_float+0xba>
 800b018:	2301      	movs	r3, #1
 800b01a:	4652      	mov	r2, sl
 800b01c:	4631      	mov	r1, r6
 800b01e:	4628      	mov	r0, r5
 800b020:	47b8      	blx	r7
 800b022:	3001      	adds	r0, #1
 800b024:	f43f af2b 	beq.w	800ae7e <_printf_float+0xb6>
 800b028:	f109 0901 	add.w	r9, r9, #1
 800b02c:	e7e8      	b.n	800b000 <_printf_float+0x238>
 800b02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b030:	2b00      	cmp	r3, #0
 800b032:	dc39      	bgt.n	800b0a8 <_printf_float+0x2e0>
 800b034:	4a1b      	ldr	r2, [pc, #108]	@ (800b0a4 <_printf_float+0x2dc>)
 800b036:	2301      	movs	r3, #1
 800b038:	4631      	mov	r1, r6
 800b03a:	4628      	mov	r0, r5
 800b03c:	47b8      	blx	r7
 800b03e:	3001      	adds	r0, #1
 800b040:	f43f af1d 	beq.w	800ae7e <_printf_float+0xb6>
 800b044:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b048:	ea59 0303 	orrs.w	r3, r9, r3
 800b04c:	d102      	bne.n	800b054 <_printf_float+0x28c>
 800b04e:	6823      	ldr	r3, [r4, #0]
 800b050:	07d9      	lsls	r1, r3, #31
 800b052:	d5d7      	bpl.n	800b004 <_printf_float+0x23c>
 800b054:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b058:	4631      	mov	r1, r6
 800b05a:	4628      	mov	r0, r5
 800b05c:	47b8      	blx	r7
 800b05e:	3001      	adds	r0, #1
 800b060:	f43f af0d 	beq.w	800ae7e <_printf_float+0xb6>
 800b064:	f04f 0a00 	mov.w	sl, #0
 800b068:	f104 0b1a 	add.w	fp, r4, #26
 800b06c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b06e:	425b      	negs	r3, r3
 800b070:	4553      	cmp	r3, sl
 800b072:	dc01      	bgt.n	800b078 <_printf_float+0x2b0>
 800b074:	464b      	mov	r3, r9
 800b076:	e793      	b.n	800afa0 <_printf_float+0x1d8>
 800b078:	2301      	movs	r3, #1
 800b07a:	465a      	mov	r2, fp
 800b07c:	4631      	mov	r1, r6
 800b07e:	4628      	mov	r0, r5
 800b080:	47b8      	blx	r7
 800b082:	3001      	adds	r0, #1
 800b084:	f43f aefb 	beq.w	800ae7e <_printf_float+0xb6>
 800b088:	f10a 0a01 	add.w	sl, sl, #1
 800b08c:	e7ee      	b.n	800b06c <_printf_float+0x2a4>
 800b08e:	bf00      	nop
 800b090:	7fefffff 	.word	0x7fefffff
 800b094:	0800fbd8 	.word	0x0800fbd8
 800b098:	0800fbdc 	.word	0x0800fbdc
 800b09c:	0800fbe0 	.word	0x0800fbe0
 800b0a0:	0800fbe4 	.word	0x0800fbe4
 800b0a4:	0800fbe8 	.word	0x0800fbe8
 800b0a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b0aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b0ae:	4553      	cmp	r3, sl
 800b0b0:	bfa8      	it	ge
 800b0b2:	4653      	movge	r3, sl
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	4699      	mov	r9, r3
 800b0b8:	dc36      	bgt.n	800b128 <_printf_float+0x360>
 800b0ba:	f04f 0b00 	mov.w	fp, #0
 800b0be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0c2:	f104 021a 	add.w	r2, r4, #26
 800b0c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b0c8:	9306      	str	r3, [sp, #24]
 800b0ca:	eba3 0309 	sub.w	r3, r3, r9
 800b0ce:	455b      	cmp	r3, fp
 800b0d0:	dc31      	bgt.n	800b136 <_printf_float+0x36e>
 800b0d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0d4:	459a      	cmp	sl, r3
 800b0d6:	dc3a      	bgt.n	800b14e <_printf_float+0x386>
 800b0d8:	6823      	ldr	r3, [r4, #0]
 800b0da:	07da      	lsls	r2, r3, #31
 800b0dc:	d437      	bmi.n	800b14e <_printf_float+0x386>
 800b0de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0e0:	ebaa 0903 	sub.w	r9, sl, r3
 800b0e4:	9b06      	ldr	r3, [sp, #24]
 800b0e6:	ebaa 0303 	sub.w	r3, sl, r3
 800b0ea:	4599      	cmp	r9, r3
 800b0ec:	bfa8      	it	ge
 800b0ee:	4699      	movge	r9, r3
 800b0f0:	f1b9 0f00 	cmp.w	r9, #0
 800b0f4:	dc33      	bgt.n	800b15e <_printf_float+0x396>
 800b0f6:	f04f 0800 	mov.w	r8, #0
 800b0fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0fe:	f104 0b1a 	add.w	fp, r4, #26
 800b102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b104:	ebaa 0303 	sub.w	r3, sl, r3
 800b108:	eba3 0309 	sub.w	r3, r3, r9
 800b10c:	4543      	cmp	r3, r8
 800b10e:	f77f af79 	ble.w	800b004 <_printf_float+0x23c>
 800b112:	2301      	movs	r3, #1
 800b114:	465a      	mov	r2, fp
 800b116:	4631      	mov	r1, r6
 800b118:	4628      	mov	r0, r5
 800b11a:	47b8      	blx	r7
 800b11c:	3001      	adds	r0, #1
 800b11e:	f43f aeae 	beq.w	800ae7e <_printf_float+0xb6>
 800b122:	f108 0801 	add.w	r8, r8, #1
 800b126:	e7ec      	b.n	800b102 <_printf_float+0x33a>
 800b128:	4642      	mov	r2, r8
 800b12a:	4631      	mov	r1, r6
 800b12c:	4628      	mov	r0, r5
 800b12e:	47b8      	blx	r7
 800b130:	3001      	adds	r0, #1
 800b132:	d1c2      	bne.n	800b0ba <_printf_float+0x2f2>
 800b134:	e6a3      	b.n	800ae7e <_printf_float+0xb6>
 800b136:	2301      	movs	r3, #1
 800b138:	4631      	mov	r1, r6
 800b13a:	4628      	mov	r0, r5
 800b13c:	9206      	str	r2, [sp, #24]
 800b13e:	47b8      	blx	r7
 800b140:	3001      	adds	r0, #1
 800b142:	f43f ae9c 	beq.w	800ae7e <_printf_float+0xb6>
 800b146:	9a06      	ldr	r2, [sp, #24]
 800b148:	f10b 0b01 	add.w	fp, fp, #1
 800b14c:	e7bb      	b.n	800b0c6 <_printf_float+0x2fe>
 800b14e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b152:	4631      	mov	r1, r6
 800b154:	4628      	mov	r0, r5
 800b156:	47b8      	blx	r7
 800b158:	3001      	adds	r0, #1
 800b15a:	d1c0      	bne.n	800b0de <_printf_float+0x316>
 800b15c:	e68f      	b.n	800ae7e <_printf_float+0xb6>
 800b15e:	9a06      	ldr	r2, [sp, #24]
 800b160:	464b      	mov	r3, r9
 800b162:	4442      	add	r2, r8
 800b164:	4631      	mov	r1, r6
 800b166:	4628      	mov	r0, r5
 800b168:	47b8      	blx	r7
 800b16a:	3001      	adds	r0, #1
 800b16c:	d1c3      	bne.n	800b0f6 <_printf_float+0x32e>
 800b16e:	e686      	b.n	800ae7e <_printf_float+0xb6>
 800b170:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b174:	f1ba 0f01 	cmp.w	sl, #1
 800b178:	dc01      	bgt.n	800b17e <_printf_float+0x3b6>
 800b17a:	07db      	lsls	r3, r3, #31
 800b17c:	d536      	bpl.n	800b1ec <_printf_float+0x424>
 800b17e:	2301      	movs	r3, #1
 800b180:	4642      	mov	r2, r8
 800b182:	4631      	mov	r1, r6
 800b184:	4628      	mov	r0, r5
 800b186:	47b8      	blx	r7
 800b188:	3001      	adds	r0, #1
 800b18a:	f43f ae78 	beq.w	800ae7e <_printf_float+0xb6>
 800b18e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b192:	4631      	mov	r1, r6
 800b194:	4628      	mov	r0, r5
 800b196:	47b8      	blx	r7
 800b198:	3001      	adds	r0, #1
 800b19a:	f43f ae70 	beq.w	800ae7e <_printf_float+0xb6>
 800b19e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1aa:	f7f5 fcb5 	bl	8000b18 <__aeabi_dcmpeq>
 800b1ae:	b9c0      	cbnz	r0, 800b1e2 <_printf_float+0x41a>
 800b1b0:	4653      	mov	r3, sl
 800b1b2:	f108 0201 	add.w	r2, r8, #1
 800b1b6:	4631      	mov	r1, r6
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	47b8      	blx	r7
 800b1bc:	3001      	adds	r0, #1
 800b1be:	d10c      	bne.n	800b1da <_printf_float+0x412>
 800b1c0:	e65d      	b.n	800ae7e <_printf_float+0xb6>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	465a      	mov	r2, fp
 800b1c6:	4631      	mov	r1, r6
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	47b8      	blx	r7
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	f43f ae56 	beq.w	800ae7e <_printf_float+0xb6>
 800b1d2:	f108 0801 	add.w	r8, r8, #1
 800b1d6:	45d0      	cmp	r8, sl
 800b1d8:	dbf3      	blt.n	800b1c2 <_printf_float+0x3fa>
 800b1da:	464b      	mov	r3, r9
 800b1dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b1e0:	e6df      	b.n	800afa2 <_printf_float+0x1da>
 800b1e2:	f04f 0800 	mov.w	r8, #0
 800b1e6:	f104 0b1a 	add.w	fp, r4, #26
 800b1ea:	e7f4      	b.n	800b1d6 <_printf_float+0x40e>
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	4642      	mov	r2, r8
 800b1f0:	e7e1      	b.n	800b1b6 <_printf_float+0x3ee>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	464a      	mov	r2, r9
 800b1f6:	4631      	mov	r1, r6
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	47b8      	blx	r7
 800b1fc:	3001      	adds	r0, #1
 800b1fe:	f43f ae3e 	beq.w	800ae7e <_printf_float+0xb6>
 800b202:	f108 0801 	add.w	r8, r8, #1
 800b206:	68e3      	ldr	r3, [r4, #12]
 800b208:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b20a:	1a5b      	subs	r3, r3, r1
 800b20c:	4543      	cmp	r3, r8
 800b20e:	dcf0      	bgt.n	800b1f2 <_printf_float+0x42a>
 800b210:	e6fc      	b.n	800b00c <_printf_float+0x244>
 800b212:	f04f 0800 	mov.w	r8, #0
 800b216:	f104 0919 	add.w	r9, r4, #25
 800b21a:	e7f4      	b.n	800b206 <_printf_float+0x43e>

0800b21c <_printf_common>:
 800b21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b220:	4616      	mov	r6, r2
 800b222:	4698      	mov	r8, r3
 800b224:	688a      	ldr	r2, [r1, #8]
 800b226:	690b      	ldr	r3, [r1, #16]
 800b228:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b22c:	4293      	cmp	r3, r2
 800b22e:	bfb8      	it	lt
 800b230:	4613      	movlt	r3, r2
 800b232:	6033      	str	r3, [r6, #0]
 800b234:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b238:	4607      	mov	r7, r0
 800b23a:	460c      	mov	r4, r1
 800b23c:	b10a      	cbz	r2, 800b242 <_printf_common+0x26>
 800b23e:	3301      	adds	r3, #1
 800b240:	6033      	str	r3, [r6, #0]
 800b242:	6823      	ldr	r3, [r4, #0]
 800b244:	0699      	lsls	r1, r3, #26
 800b246:	bf42      	ittt	mi
 800b248:	6833      	ldrmi	r3, [r6, #0]
 800b24a:	3302      	addmi	r3, #2
 800b24c:	6033      	strmi	r3, [r6, #0]
 800b24e:	6825      	ldr	r5, [r4, #0]
 800b250:	f015 0506 	ands.w	r5, r5, #6
 800b254:	d106      	bne.n	800b264 <_printf_common+0x48>
 800b256:	f104 0a19 	add.w	sl, r4, #25
 800b25a:	68e3      	ldr	r3, [r4, #12]
 800b25c:	6832      	ldr	r2, [r6, #0]
 800b25e:	1a9b      	subs	r3, r3, r2
 800b260:	42ab      	cmp	r3, r5
 800b262:	dc26      	bgt.n	800b2b2 <_printf_common+0x96>
 800b264:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b268:	6822      	ldr	r2, [r4, #0]
 800b26a:	3b00      	subs	r3, #0
 800b26c:	bf18      	it	ne
 800b26e:	2301      	movne	r3, #1
 800b270:	0692      	lsls	r2, r2, #26
 800b272:	d42b      	bmi.n	800b2cc <_printf_common+0xb0>
 800b274:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b278:	4641      	mov	r1, r8
 800b27a:	4638      	mov	r0, r7
 800b27c:	47c8      	blx	r9
 800b27e:	3001      	adds	r0, #1
 800b280:	d01e      	beq.n	800b2c0 <_printf_common+0xa4>
 800b282:	6823      	ldr	r3, [r4, #0]
 800b284:	6922      	ldr	r2, [r4, #16]
 800b286:	f003 0306 	and.w	r3, r3, #6
 800b28a:	2b04      	cmp	r3, #4
 800b28c:	bf02      	ittt	eq
 800b28e:	68e5      	ldreq	r5, [r4, #12]
 800b290:	6833      	ldreq	r3, [r6, #0]
 800b292:	1aed      	subeq	r5, r5, r3
 800b294:	68a3      	ldr	r3, [r4, #8]
 800b296:	bf0c      	ite	eq
 800b298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b29c:	2500      	movne	r5, #0
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	bfc4      	itt	gt
 800b2a2:	1a9b      	subgt	r3, r3, r2
 800b2a4:	18ed      	addgt	r5, r5, r3
 800b2a6:	2600      	movs	r6, #0
 800b2a8:	341a      	adds	r4, #26
 800b2aa:	42b5      	cmp	r5, r6
 800b2ac:	d11a      	bne.n	800b2e4 <_printf_common+0xc8>
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	e008      	b.n	800b2c4 <_printf_common+0xa8>
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	4652      	mov	r2, sl
 800b2b6:	4641      	mov	r1, r8
 800b2b8:	4638      	mov	r0, r7
 800b2ba:	47c8      	blx	r9
 800b2bc:	3001      	adds	r0, #1
 800b2be:	d103      	bne.n	800b2c8 <_printf_common+0xac>
 800b2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2c8:	3501      	adds	r5, #1
 800b2ca:	e7c6      	b.n	800b25a <_printf_common+0x3e>
 800b2cc:	18e1      	adds	r1, r4, r3
 800b2ce:	1c5a      	adds	r2, r3, #1
 800b2d0:	2030      	movs	r0, #48	@ 0x30
 800b2d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b2d6:	4422      	add	r2, r4
 800b2d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b2dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b2e0:	3302      	adds	r3, #2
 800b2e2:	e7c7      	b.n	800b274 <_printf_common+0x58>
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	4622      	mov	r2, r4
 800b2e8:	4641      	mov	r1, r8
 800b2ea:	4638      	mov	r0, r7
 800b2ec:	47c8      	blx	r9
 800b2ee:	3001      	adds	r0, #1
 800b2f0:	d0e6      	beq.n	800b2c0 <_printf_common+0xa4>
 800b2f2:	3601      	adds	r6, #1
 800b2f4:	e7d9      	b.n	800b2aa <_printf_common+0x8e>
	...

0800b2f8 <_printf_i>:
 800b2f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2fc:	7e0f      	ldrb	r7, [r1, #24]
 800b2fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b300:	2f78      	cmp	r7, #120	@ 0x78
 800b302:	4691      	mov	r9, r2
 800b304:	4680      	mov	r8, r0
 800b306:	460c      	mov	r4, r1
 800b308:	469a      	mov	sl, r3
 800b30a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b30e:	d807      	bhi.n	800b320 <_printf_i+0x28>
 800b310:	2f62      	cmp	r7, #98	@ 0x62
 800b312:	d80a      	bhi.n	800b32a <_printf_i+0x32>
 800b314:	2f00      	cmp	r7, #0
 800b316:	f000 80d2 	beq.w	800b4be <_printf_i+0x1c6>
 800b31a:	2f58      	cmp	r7, #88	@ 0x58
 800b31c:	f000 80b9 	beq.w	800b492 <_printf_i+0x19a>
 800b320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b324:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b328:	e03a      	b.n	800b3a0 <_printf_i+0xa8>
 800b32a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b32e:	2b15      	cmp	r3, #21
 800b330:	d8f6      	bhi.n	800b320 <_printf_i+0x28>
 800b332:	a101      	add	r1, pc, #4	@ (adr r1, 800b338 <_printf_i+0x40>)
 800b334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b338:	0800b391 	.word	0x0800b391
 800b33c:	0800b3a5 	.word	0x0800b3a5
 800b340:	0800b321 	.word	0x0800b321
 800b344:	0800b321 	.word	0x0800b321
 800b348:	0800b321 	.word	0x0800b321
 800b34c:	0800b321 	.word	0x0800b321
 800b350:	0800b3a5 	.word	0x0800b3a5
 800b354:	0800b321 	.word	0x0800b321
 800b358:	0800b321 	.word	0x0800b321
 800b35c:	0800b321 	.word	0x0800b321
 800b360:	0800b321 	.word	0x0800b321
 800b364:	0800b4a5 	.word	0x0800b4a5
 800b368:	0800b3cf 	.word	0x0800b3cf
 800b36c:	0800b45f 	.word	0x0800b45f
 800b370:	0800b321 	.word	0x0800b321
 800b374:	0800b321 	.word	0x0800b321
 800b378:	0800b4c7 	.word	0x0800b4c7
 800b37c:	0800b321 	.word	0x0800b321
 800b380:	0800b3cf 	.word	0x0800b3cf
 800b384:	0800b321 	.word	0x0800b321
 800b388:	0800b321 	.word	0x0800b321
 800b38c:	0800b467 	.word	0x0800b467
 800b390:	6833      	ldr	r3, [r6, #0]
 800b392:	1d1a      	adds	r2, r3, #4
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	6032      	str	r2, [r6, #0]
 800b398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b39c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e09d      	b.n	800b4e0 <_printf_i+0x1e8>
 800b3a4:	6833      	ldr	r3, [r6, #0]
 800b3a6:	6820      	ldr	r0, [r4, #0]
 800b3a8:	1d19      	adds	r1, r3, #4
 800b3aa:	6031      	str	r1, [r6, #0]
 800b3ac:	0606      	lsls	r6, r0, #24
 800b3ae:	d501      	bpl.n	800b3b4 <_printf_i+0xbc>
 800b3b0:	681d      	ldr	r5, [r3, #0]
 800b3b2:	e003      	b.n	800b3bc <_printf_i+0xc4>
 800b3b4:	0645      	lsls	r5, r0, #25
 800b3b6:	d5fb      	bpl.n	800b3b0 <_printf_i+0xb8>
 800b3b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3bc:	2d00      	cmp	r5, #0
 800b3be:	da03      	bge.n	800b3c8 <_printf_i+0xd0>
 800b3c0:	232d      	movs	r3, #45	@ 0x2d
 800b3c2:	426d      	negs	r5, r5
 800b3c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3c8:	4859      	ldr	r0, [pc, #356]	@ (800b530 <_printf_i+0x238>)
 800b3ca:	230a      	movs	r3, #10
 800b3cc:	e011      	b.n	800b3f2 <_printf_i+0xfa>
 800b3ce:	6821      	ldr	r1, [r4, #0]
 800b3d0:	6833      	ldr	r3, [r6, #0]
 800b3d2:	0608      	lsls	r0, r1, #24
 800b3d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b3d8:	d402      	bmi.n	800b3e0 <_printf_i+0xe8>
 800b3da:	0649      	lsls	r1, r1, #25
 800b3dc:	bf48      	it	mi
 800b3de:	b2ad      	uxthmi	r5, r5
 800b3e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b3e2:	4853      	ldr	r0, [pc, #332]	@ (800b530 <_printf_i+0x238>)
 800b3e4:	6033      	str	r3, [r6, #0]
 800b3e6:	bf14      	ite	ne
 800b3e8:	230a      	movne	r3, #10
 800b3ea:	2308      	moveq	r3, #8
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b3f2:	6866      	ldr	r6, [r4, #4]
 800b3f4:	60a6      	str	r6, [r4, #8]
 800b3f6:	2e00      	cmp	r6, #0
 800b3f8:	bfa2      	ittt	ge
 800b3fa:	6821      	ldrge	r1, [r4, #0]
 800b3fc:	f021 0104 	bicge.w	r1, r1, #4
 800b400:	6021      	strge	r1, [r4, #0]
 800b402:	b90d      	cbnz	r5, 800b408 <_printf_i+0x110>
 800b404:	2e00      	cmp	r6, #0
 800b406:	d04b      	beq.n	800b4a0 <_printf_i+0x1a8>
 800b408:	4616      	mov	r6, r2
 800b40a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b40e:	fb03 5711 	mls	r7, r3, r1, r5
 800b412:	5dc7      	ldrb	r7, [r0, r7]
 800b414:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b418:	462f      	mov	r7, r5
 800b41a:	42bb      	cmp	r3, r7
 800b41c:	460d      	mov	r5, r1
 800b41e:	d9f4      	bls.n	800b40a <_printf_i+0x112>
 800b420:	2b08      	cmp	r3, #8
 800b422:	d10b      	bne.n	800b43c <_printf_i+0x144>
 800b424:	6823      	ldr	r3, [r4, #0]
 800b426:	07df      	lsls	r7, r3, #31
 800b428:	d508      	bpl.n	800b43c <_printf_i+0x144>
 800b42a:	6923      	ldr	r3, [r4, #16]
 800b42c:	6861      	ldr	r1, [r4, #4]
 800b42e:	4299      	cmp	r1, r3
 800b430:	bfde      	ittt	le
 800b432:	2330      	movle	r3, #48	@ 0x30
 800b434:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b438:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b43c:	1b92      	subs	r2, r2, r6
 800b43e:	6122      	str	r2, [r4, #16]
 800b440:	f8cd a000 	str.w	sl, [sp]
 800b444:	464b      	mov	r3, r9
 800b446:	aa03      	add	r2, sp, #12
 800b448:	4621      	mov	r1, r4
 800b44a:	4640      	mov	r0, r8
 800b44c:	f7ff fee6 	bl	800b21c <_printf_common>
 800b450:	3001      	adds	r0, #1
 800b452:	d14a      	bne.n	800b4ea <_printf_i+0x1f2>
 800b454:	f04f 30ff 	mov.w	r0, #4294967295
 800b458:	b004      	add	sp, #16
 800b45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b45e:	6823      	ldr	r3, [r4, #0]
 800b460:	f043 0320 	orr.w	r3, r3, #32
 800b464:	6023      	str	r3, [r4, #0]
 800b466:	4833      	ldr	r0, [pc, #204]	@ (800b534 <_printf_i+0x23c>)
 800b468:	2778      	movs	r7, #120	@ 0x78
 800b46a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b46e:	6823      	ldr	r3, [r4, #0]
 800b470:	6831      	ldr	r1, [r6, #0]
 800b472:	061f      	lsls	r7, r3, #24
 800b474:	f851 5b04 	ldr.w	r5, [r1], #4
 800b478:	d402      	bmi.n	800b480 <_printf_i+0x188>
 800b47a:	065f      	lsls	r7, r3, #25
 800b47c:	bf48      	it	mi
 800b47e:	b2ad      	uxthmi	r5, r5
 800b480:	6031      	str	r1, [r6, #0]
 800b482:	07d9      	lsls	r1, r3, #31
 800b484:	bf44      	itt	mi
 800b486:	f043 0320 	orrmi.w	r3, r3, #32
 800b48a:	6023      	strmi	r3, [r4, #0]
 800b48c:	b11d      	cbz	r5, 800b496 <_printf_i+0x19e>
 800b48e:	2310      	movs	r3, #16
 800b490:	e7ac      	b.n	800b3ec <_printf_i+0xf4>
 800b492:	4827      	ldr	r0, [pc, #156]	@ (800b530 <_printf_i+0x238>)
 800b494:	e7e9      	b.n	800b46a <_printf_i+0x172>
 800b496:	6823      	ldr	r3, [r4, #0]
 800b498:	f023 0320 	bic.w	r3, r3, #32
 800b49c:	6023      	str	r3, [r4, #0]
 800b49e:	e7f6      	b.n	800b48e <_printf_i+0x196>
 800b4a0:	4616      	mov	r6, r2
 800b4a2:	e7bd      	b.n	800b420 <_printf_i+0x128>
 800b4a4:	6833      	ldr	r3, [r6, #0]
 800b4a6:	6825      	ldr	r5, [r4, #0]
 800b4a8:	6961      	ldr	r1, [r4, #20]
 800b4aa:	1d18      	adds	r0, r3, #4
 800b4ac:	6030      	str	r0, [r6, #0]
 800b4ae:	062e      	lsls	r6, r5, #24
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	d501      	bpl.n	800b4b8 <_printf_i+0x1c0>
 800b4b4:	6019      	str	r1, [r3, #0]
 800b4b6:	e002      	b.n	800b4be <_printf_i+0x1c6>
 800b4b8:	0668      	lsls	r0, r5, #25
 800b4ba:	d5fb      	bpl.n	800b4b4 <_printf_i+0x1bc>
 800b4bc:	8019      	strh	r1, [r3, #0]
 800b4be:	2300      	movs	r3, #0
 800b4c0:	6123      	str	r3, [r4, #16]
 800b4c2:	4616      	mov	r6, r2
 800b4c4:	e7bc      	b.n	800b440 <_printf_i+0x148>
 800b4c6:	6833      	ldr	r3, [r6, #0]
 800b4c8:	1d1a      	adds	r2, r3, #4
 800b4ca:	6032      	str	r2, [r6, #0]
 800b4cc:	681e      	ldr	r6, [r3, #0]
 800b4ce:	6862      	ldr	r2, [r4, #4]
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	f7f4 fea4 	bl	8000220 <memchr>
 800b4d8:	b108      	cbz	r0, 800b4de <_printf_i+0x1e6>
 800b4da:	1b80      	subs	r0, r0, r6
 800b4dc:	6060      	str	r0, [r4, #4]
 800b4de:	6863      	ldr	r3, [r4, #4]
 800b4e0:	6123      	str	r3, [r4, #16]
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4e8:	e7aa      	b.n	800b440 <_printf_i+0x148>
 800b4ea:	6923      	ldr	r3, [r4, #16]
 800b4ec:	4632      	mov	r2, r6
 800b4ee:	4649      	mov	r1, r9
 800b4f0:	4640      	mov	r0, r8
 800b4f2:	47d0      	blx	sl
 800b4f4:	3001      	adds	r0, #1
 800b4f6:	d0ad      	beq.n	800b454 <_printf_i+0x15c>
 800b4f8:	6823      	ldr	r3, [r4, #0]
 800b4fa:	079b      	lsls	r3, r3, #30
 800b4fc:	d413      	bmi.n	800b526 <_printf_i+0x22e>
 800b4fe:	68e0      	ldr	r0, [r4, #12]
 800b500:	9b03      	ldr	r3, [sp, #12]
 800b502:	4298      	cmp	r0, r3
 800b504:	bfb8      	it	lt
 800b506:	4618      	movlt	r0, r3
 800b508:	e7a6      	b.n	800b458 <_printf_i+0x160>
 800b50a:	2301      	movs	r3, #1
 800b50c:	4632      	mov	r2, r6
 800b50e:	4649      	mov	r1, r9
 800b510:	4640      	mov	r0, r8
 800b512:	47d0      	blx	sl
 800b514:	3001      	adds	r0, #1
 800b516:	d09d      	beq.n	800b454 <_printf_i+0x15c>
 800b518:	3501      	adds	r5, #1
 800b51a:	68e3      	ldr	r3, [r4, #12]
 800b51c:	9903      	ldr	r1, [sp, #12]
 800b51e:	1a5b      	subs	r3, r3, r1
 800b520:	42ab      	cmp	r3, r5
 800b522:	dcf2      	bgt.n	800b50a <_printf_i+0x212>
 800b524:	e7eb      	b.n	800b4fe <_printf_i+0x206>
 800b526:	2500      	movs	r5, #0
 800b528:	f104 0619 	add.w	r6, r4, #25
 800b52c:	e7f5      	b.n	800b51a <_printf_i+0x222>
 800b52e:	bf00      	nop
 800b530:	0800fbea 	.word	0x0800fbea
 800b534:	0800fbfb 	.word	0x0800fbfb

0800b538 <_scanf_float>:
 800b538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53c:	b087      	sub	sp, #28
 800b53e:	4617      	mov	r7, r2
 800b540:	9303      	str	r3, [sp, #12]
 800b542:	688b      	ldr	r3, [r1, #8]
 800b544:	1e5a      	subs	r2, r3, #1
 800b546:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b54a:	bf81      	itttt	hi
 800b54c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b550:	eb03 0b05 	addhi.w	fp, r3, r5
 800b554:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b558:	608b      	strhi	r3, [r1, #8]
 800b55a:	680b      	ldr	r3, [r1, #0]
 800b55c:	460a      	mov	r2, r1
 800b55e:	f04f 0500 	mov.w	r5, #0
 800b562:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b566:	f842 3b1c 	str.w	r3, [r2], #28
 800b56a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b56e:	4680      	mov	r8, r0
 800b570:	460c      	mov	r4, r1
 800b572:	bf98      	it	ls
 800b574:	f04f 0b00 	movls.w	fp, #0
 800b578:	9201      	str	r2, [sp, #4]
 800b57a:	4616      	mov	r6, r2
 800b57c:	46aa      	mov	sl, r5
 800b57e:	46a9      	mov	r9, r5
 800b580:	9502      	str	r5, [sp, #8]
 800b582:	68a2      	ldr	r2, [r4, #8]
 800b584:	b152      	cbz	r2, 800b59c <_scanf_float+0x64>
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	2b4e      	cmp	r3, #78	@ 0x4e
 800b58c:	d864      	bhi.n	800b658 <_scanf_float+0x120>
 800b58e:	2b40      	cmp	r3, #64	@ 0x40
 800b590:	d83c      	bhi.n	800b60c <_scanf_float+0xd4>
 800b592:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b596:	b2c8      	uxtb	r0, r1
 800b598:	280e      	cmp	r0, #14
 800b59a:	d93a      	bls.n	800b612 <_scanf_float+0xda>
 800b59c:	f1b9 0f00 	cmp.w	r9, #0
 800b5a0:	d003      	beq.n	800b5aa <_scanf_float+0x72>
 800b5a2:	6823      	ldr	r3, [r4, #0]
 800b5a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5a8:	6023      	str	r3, [r4, #0]
 800b5aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b5ae:	f1ba 0f01 	cmp.w	sl, #1
 800b5b2:	f200 8117 	bhi.w	800b7e4 <_scanf_float+0x2ac>
 800b5b6:	9b01      	ldr	r3, [sp, #4]
 800b5b8:	429e      	cmp	r6, r3
 800b5ba:	f200 8108 	bhi.w	800b7ce <_scanf_float+0x296>
 800b5be:	2001      	movs	r0, #1
 800b5c0:	b007      	add	sp, #28
 800b5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b5ca:	2a0d      	cmp	r2, #13
 800b5cc:	d8e6      	bhi.n	800b59c <_scanf_float+0x64>
 800b5ce:	a101      	add	r1, pc, #4	@ (adr r1, 800b5d4 <_scanf_float+0x9c>)
 800b5d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b5d4:	0800b71b 	.word	0x0800b71b
 800b5d8:	0800b59d 	.word	0x0800b59d
 800b5dc:	0800b59d 	.word	0x0800b59d
 800b5e0:	0800b59d 	.word	0x0800b59d
 800b5e4:	0800b77b 	.word	0x0800b77b
 800b5e8:	0800b753 	.word	0x0800b753
 800b5ec:	0800b59d 	.word	0x0800b59d
 800b5f0:	0800b59d 	.word	0x0800b59d
 800b5f4:	0800b729 	.word	0x0800b729
 800b5f8:	0800b59d 	.word	0x0800b59d
 800b5fc:	0800b59d 	.word	0x0800b59d
 800b600:	0800b59d 	.word	0x0800b59d
 800b604:	0800b59d 	.word	0x0800b59d
 800b608:	0800b6e1 	.word	0x0800b6e1
 800b60c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b610:	e7db      	b.n	800b5ca <_scanf_float+0x92>
 800b612:	290e      	cmp	r1, #14
 800b614:	d8c2      	bhi.n	800b59c <_scanf_float+0x64>
 800b616:	a001      	add	r0, pc, #4	@ (adr r0, 800b61c <_scanf_float+0xe4>)
 800b618:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b61c:	0800b6d1 	.word	0x0800b6d1
 800b620:	0800b59d 	.word	0x0800b59d
 800b624:	0800b6d1 	.word	0x0800b6d1
 800b628:	0800b767 	.word	0x0800b767
 800b62c:	0800b59d 	.word	0x0800b59d
 800b630:	0800b679 	.word	0x0800b679
 800b634:	0800b6b7 	.word	0x0800b6b7
 800b638:	0800b6b7 	.word	0x0800b6b7
 800b63c:	0800b6b7 	.word	0x0800b6b7
 800b640:	0800b6b7 	.word	0x0800b6b7
 800b644:	0800b6b7 	.word	0x0800b6b7
 800b648:	0800b6b7 	.word	0x0800b6b7
 800b64c:	0800b6b7 	.word	0x0800b6b7
 800b650:	0800b6b7 	.word	0x0800b6b7
 800b654:	0800b6b7 	.word	0x0800b6b7
 800b658:	2b6e      	cmp	r3, #110	@ 0x6e
 800b65a:	d809      	bhi.n	800b670 <_scanf_float+0x138>
 800b65c:	2b60      	cmp	r3, #96	@ 0x60
 800b65e:	d8b2      	bhi.n	800b5c6 <_scanf_float+0x8e>
 800b660:	2b54      	cmp	r3, #84	@ 0x54
 800b662:	d07b      	beq.n	800b75c <_scanf_float+0x224>
 800b664:	2b59      	cmp	r3, #89	@ 0x59
 800b666:	d199      	bne.n	800b59c <_scanf_float+0x64>
 800b668:	2d07      	cmp	r5, #7
 800b66a:	d197      	bne.n	800b59c <_scanf_float+0x64>
 800b66c:	2508      	movs	r5, #8
 800b66e:	e02c      	b.n	800b6ca <_scanf_float+0x192>
 800b670:	2b74      	cmp	r3, #116	@ 0x74
 800b672:	d073      	beq.n	800b75c <_scanf_float+0x224>
 800b674:	2b79      	cmp	r3, #121	@ 0x79
 800b676:	e7f6      	b.n	800b666 <_scanf_float+0x12e>
 800b678:	6821      	ldr	r1, [r4, #0]
 800b67a:	05c8      	lsls	r0, r1, #23
 800b67c:	d51b      	bpl.n	800b6b6 <_scanf_float+0x17e>
 800b67e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b682:	6021      	str	r1, [r4, #0]
 800b684:	f109 0901 	add.w	r9, r9, #1
 800b688:	f1bb 0f00 	cmp.w	fp, #0
 800b68c:	d003      	beq.n	800b696 <_scanf_float+0x15e>
 800b68e:	3201      	adds	r2, #1
 800b690:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b694:	60a2      	str	r2, [r4, #8]
 800b696:	68a3      	ldr	r3, [r4, #8]
 800b698:	3b01      	subs	r3, #1
 800b69a:	60a3      	str	r3, [r4, #8]
 800b69c:	6923      	ldr	r3, [r4, #16]
 800b69e:	3301      	adds	r3, #1
 800b6a0:	6123      	str	r3, [r4, #16]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	607b      	str	r3, [r7, #4]
 800b6aa:	f340 8087 	ble.w	800b7bc <_scanf_float+0x284>
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	603b      	str	r3, [r7, #0]
 800b6b4:	e765      	b.n	800b582 <_scanf_float+0x4a>
 800b6b6:	eb1a 0105 	adds.w	r1, sl, r5
 800b6ba:	f47f af6f 	bne.w	800b59c <_scanf_float+0x64>
 800b6be:	6822      	ldr	r2, [r4, #0]
 800b6c0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b6c4:	6022      	str	r2, [r4, #0]
 800b6c6:	460d      	mov	r5, r1
 800b6c8:	468a      	mov	sl, r1
 800b6ca:	f806 3b01 	strb.w	r3, [r6], #1
 800b6ce:	e7e2      	b.n	800b696 <_scanf_float+0x15e>
 800b6d0:	6822      	ldr	r2, [r4, #0]
 800b6d2:	0610      	lsls	r0, r2, #24
 800b6d4:	f57f af62 	bpl.w	800b59c <_scanf_float+0x64>
 800b6d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b6dc:	6022      	str	r2, [r4, #0]
 800b6de:	e7f4      	b.n	800b6ca <_scanf_float+0x192>
 800b6e0:	f1ba 0f00 	cmp.w	sl, #0
 800b6e4:	d10e      	bne.n	800b704 <_scanf_float+0x1cc>
 800b6e6:	f1b9 0f00 	cmp.w	r9, #0
 800b6ea:	d10e      	bne.n	800b70a <_scanf_float+0x1d2>
 800b6ec:	6822      	ldr	r2, [r4, #0]
 800b6ee:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b6f2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b6f6:	d108      	bne.n	800b70a <_scanf_float+0x1d2>
 800b6f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b6fc:	6022      	str	r2, [r4, #0]
 800b6fe:	f04f 0a01 	mov.w	sl, #1
 800b702:	e7e2      	b.n	800b6ca <_scanf_float+0x192>
 800b704:	f1ba 0f02 	cmp.w	sl, #2
 800b708:	d055      	beq.n	800b7b6 <_scanf_float+0x27e>
 800b70a:	2d01      	cmp	r5, #1
 800b70c:	d002      	beq.n	800b714 <_scanf_float+0x1dc>
 800b70e:	2d04      	cmp	r5, #4
 800b710:	f47f af44 	bne.w	800b59c <_scanf_float+0x64>
 800b714:	3501      	adds	r5, #1
 800b716:	b2ed      	uxtb	r5, r5
 800b718:	e7d7      	b.n	800b6ca <_scanf_float+0x192>
 800b71a:	f1ba 0f01 	cmp.w	sl, #1
 800b71e:	f47f af3d 	bne.w	800b59c <_scanf_float+0x64>
 800b722:	f04f 0a02 	mov.w	sl, #2
 800b726:	e7d0      	b.n	800b6ca <_scanf_float+0x192>
 800b728:	b97d      	cbnz	r5, 800b74a <_scanf_float+0x212>
 800b72a:	f1b9 0f00 	cmp.w	r9, #0
 800b72e:	f47f af38 	bne.w	800b5a2 <_scanf_float+0x6a>
 800b732:	6822      	ldr	r2, [r4, #0]
 800b734:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b738:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b73c:	f040 8108 	bne.w	800b950 <_scanf_float+0x418>
 800b740:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b744:	6022      	str	r2, [r4, #0]
 800b746:	2501      	movs	r5, #1
 800b748:	e7bf      	b.n	800b6ca <_scanf_float+0x192>
 800b74a:	2d03      	cmp	r5, #3
 800b74c:	d0e2      	beq.n	800b714 <_scanf_float+0x1dc>
 800b74e:	2d05      	cmp	r5, #5
 800b750:	e7de      	b.n	800b710 <_scanf_float+0x1d8>
 800b752:	2d02      	cmp	r5, #2
 800b754:	f47f af22 	bne.w	800b59c <_scanf_float+0x64>
 800b758:	2503      	movs	r5, #3
 800b75a:	e7b6      	b.n	800b6ca <_scanf_float+0x192>
 800b75c:	2d06      	cmp	r5, #6
 800b75e:	f47f af1d 	bne.w	800b59c <_scanf_float+0x64>
 800b762:	2507      	movs	r5, #7
 800b764:	e7b1      	b.n	800b6ca <_scanf_float+0x192>
 800b766:	6822      	ldr	r2, [r4, #0]
 800b768:	0591      	lsls	r1, r2, #22
 800b76a:	f57f af17 	bpl.w	800b59c <_scanf_float+0x64>
 800b76e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b772:	6022      	str	r2, [r4, #0]
 800b774:	f8cd 9008 	str.w	r9, [sp, #8]
 800b778:	e7a7      	b.n	800b6ca <_scanf_float+0x192>
 800b77a:	6822      	ldr	r2, [r4, #0]
 800b77c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b780:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b784:	d006      	beq.n	800b794 <_scanf_float+0x25c>
 800b786:	0550      	lsls	r0, r2, #21
 800b788:	f57f af08 	bpl.w	800b59c <_scanf_float+0x64>
 800b78c:	f1b9 0f00 	cmp.w	r9, #0
 800b790:	f000 80de 	beq.w	800b950 <_scanf_float+0x418>
 800b794:	0591      	lsls	r1, r2, #22
 800b796:	bf58      	it	pl
 800b798:	9902      	ldrpl	r1, [sp, #8]
 800b79a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b79e:	bf58      	it	pl
 800b7a0:	eba9 0101 	subpl.w	r1, r9, r1
 800b7a4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b7a8:	bf58      	it	pl
 800b7aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b7ae:	6022      	str	r2, [r4, #0]
 800b7b0:	f04f 0900 	mov.w	r9, #0
 800b7b4:	e789      	b.n	800b6ca <_scanf_float+0x192>
 800b7b6:	f04f 0a03 	mov.w	sl, #3
 800b7ba:	e786      	b.n	800b6ca <_scanf_float+0x192>
 800b7bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b7c0:	4639      	mov	r1, r7
 800b7c2:	4640      	mov	r0, r8
 800b7c4:	4798      	blx	r3
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	f43f aedb 	beq.w	800b582 <_scanf_float+0x4a>
 800b7cc:	e6e6      	b.n	800b59c <_scanf_float+0x64>
 800b7ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b7d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b7d6:	463a      	mov	r2, r7
 800b7d8:	4640      	mov	r0, r8
 800b7da:	4798      	blx	r3
 800b7dc:	6923      	ldr	r3, [r4, #16]
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	6123      	str	r3, [r4, #16]
 800b7e2:	e6e8      	b.n	800b5b6 <_scanf_float+0x7e>
 800b7e4:	1e6b      	subs	r3, r5, #1
 800b7e6:	2b06      	cmp	r3, #6
 800b7e8:	d824      	bhi.n	800b834 <_scanf_float+0x2fc>
 800b7ea:	2d02      	cmp	r5, #2
 800b7ec:	d836      	bhi.n	800b85c <_scanf_float+0x324>
 800b7ee:	9b01      	ldr	r3, [sp, #4]
 800b7f0:	429e      	cmp	r6, r3
 800b7f2:	f67f aee4 	bls.w	800b5be <_scanf_float+0x86>
 800b7f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b7fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b7fe:	463a      	mov	r2, r7
 800b800:	4640      	mov	r0, r8
 800b802:	4798      	blx	r3
 800b804:	6923      	ldr	r3, [r4, #16]
 800b806:	3b01      	subs	r3, #1
 800b808:	6123      	str	r3, [r4, #16]
 800b80a:	e7f0      	b.n	800b7ee <_scanf_float+0x2b6>
 800b80c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b810:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b814:	463a      	mov	r2, r7
 800b816:	4640      	mov	r0, r8
 800b818:	4798      	blx	r3
 800b81a:	6923      	ldr	r3, [r4, #16]
 800b81c:	3b01      	subs	r3, #1
 800b81e:	6123      	str	r3, [r4, #16]
 800b820:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b824:	fa5f fa8a 	uxtb.w	sl, sl
 800b828:	f1ba 0f02 	cmp.w	sl, #2
 800b82c:	d1ee      	bne.n	800b80c <_scanf_float+0x2d4>
 800b82e:	3d03      	subs	r5, #3
 800b830:	b2ed      	uxtb	r5, r5
 800b832:	1b76      	subs	r6, r6, r5
 800b834:	6823      	ldr	r3, [r4, #0]
 800b836:	05da      	lsls	r2, r3, #23
 800b838:	d530      	bpl.n	800b89c <_scanf_float+0x364>
 800b83a:	055b      	lsls	r3, r3, #21
 800b83c:	d511      	bpl.n	800b862 <_scanf_float+0x32a>
 800b83e:	9b01      	ldr	r3, [sp, #4]
 800b840:	429e      	cmp	r6, r3
 800b842:	f67f aebc 	bls.w	800b5be <_scanf_float+0x86>
 800b846:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b84a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b84e:	463a      	mov	r2, r7
 800b850:	4640      	mov	r0, r8
 800b852:	4798      	blx	r3
 800b854:	6923      	ldr	r3, [r4, #16]
 800b856:	3b01      	subs	r3, #1
 800b858:	6123      	str	r3, [r4, #16]
 800b85a:	e7f0      	b.n	800b83e <_scanf_float+0x306>
 800b85c:	46aa      	mov	sl, r5
 800b85e:	46b3      	mov	fp, r6
 800b860:	e7de      	b.n	800b820 <_scanf_float+0x2e8>
 800b862:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b866:	6923      	ldr	r3, [r4, #16]
 800b868:	2965      	cmp	r1, #101	@ 0x65
 800b86a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b86e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b872:	6123      	str	r3, [r4, #16]
 800b874:	d00c      	beq.n	800b890 <_scanf_float+0x358>
 800b876:	2945      	cmp	r1, #69	@ 0x45
 800b878:	d00a      	beq.n	800b890 <_scanf_float+0x358>
 800b87a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b87e:	463a      	mov	r2, r7
 800b880:	4640      	mov	r0, r8
 800b882:	4798      	blx	r3
 800b884:	6923      	ldr	r3, [r4, #16]
 800b886:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b88a:	3b01      	subs	r3, #1
 800b88c:	1eb5      	subs	r5, r6, #2
 800b88e:	6123      	str	r3, [r4, #16]
 800b890:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b894:	463a      	mov	r2, r7
 800b896:	4640      	mov	r0, r8
 800b898:	4798      	blx	r3
 800b89a:	462e      	mov	r6, r5
 800b89c:	6822      	ldr	r2, [r4, #0]
 800b89e:	f012 0210 	ands.w	r2, r2, #16
 800b8a2:	d001      	beq.n	800b8a8 <_scanf_float+0x370>
 800b8a4:	2000      	movs	r0, #0
 800b8a6:	e68b      	b.n	800b5c0 <_scanf_float+0x88>
 800b8a8:	7032      	strb	r2, [r6, #0]
 800b8aa:	6823      	ldr	r3, [r4, #0]
 800b8ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b8b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b8b4:	d11c      	bne.n	800b8f0 <_scanf_float+0x3b8>
 800b8b6:	9b02      	ldr	r3, [sp, #8]
 800b8b8:	454b      	cmp	r3, r9
 800b8ba:	eba3 0209 	sub.w	r2, r3, r9
 800b8be:	d123      	bne.n	800b908 <_scanf_float+0x3d0>
 800b8c0:	9901      	ldr	r1, [sp, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	4640      	mov	r0, r8
 800b8c6:	f002 fd5f 	bl	800e388 <_strtod_r>
 800b8ca:	9b03      	ldr	r3, [sp, #12]
 800b8cc:	6821      	ldr	r1, [r4, #0]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f011 0f02 	tst.w	r1, #2
 800b8d4:	ec57 6b10 	vmov	r6, r7, d0
 800b8d8:	f103 0204 	add.w	r2, r3, #4
 800b8dc:	d01f      	beq.n	800b91e <_scanf_float+0x3e6>
 800b8de:	9903      	ldr	r1, [sp, #12]
 800b8e0:	600a      	str	r2, [r1, #0]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	e9c3 6700 	strd	r6, r7, [r3]
 800b8e8:	68e3      	ldr	r3, [r4, #12]
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	60e3      	str	r3, [r4, #12]
 800b8ee:	e7d9      	b.n	800b8a4 <_scanf_float+0x36c>
 800b8f0:	9b04      	ldr	r3, [sp, #16]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d0e4      	beq.n	800b8c0 <_scanf_float+0x388>
 800b8f6:	9905      	ldr	r1, [sp, #20]
 800b8f8:	230a      	movs	r3, #10
 800b8fa:	3101      	adds	r1, #1
 800b8fc:	4640      	mov	r0, r8
 800b8fe:	f002 fdc3 	bl	800e488 <_strtol_r>
 800b902:	9b04      	ldr	r3, [sp, #16]
 800b904:	9e05      	ldr	r6, [sp, #20]
 800b906:	1ac2      	subs	r2, r0, r3
 800b908:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b90c:	429e      	cmp	r6, r3
 800b90e:	bf28      	it	cs
 800b910:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b914:	4910      	ldr	r1, [pc, #64]	@ (800b958 <_scanf_float+0x420>)
 800b916:	4630      	mov	r0, r6
 800b918:	f000 f954 	bl	800bbc4 <siprintf>
 800b91c:	e7d0      	b.n	800b8c0 <_scanf_float+0x388>
 800b91e:	f011 0f04 	tst.w	r1, #4
 800b922:	9903      	ldr	r1, [sp, #12]
 800b924:	600a      	str	r2, [r1, #0]
 800b926:	d1dc      	bne.n	800b8e2 <_scanf_float+0x3aa>
 800b928:	681d      	ldr	r5, [r3, #0]
 800b92a:	4632      	mov	r2, r6
 800b92c:	463b      	mov	r3, r7
 800b92e:	4630      	mov	r0, r6
 800b930:	4639      	mov	r1, r7
 800b932:	f7f5 f923 	bl	8000b7c <__aeabi_dcmpun>
 800b936:	b128      	cbz	r0, 800b944 <_scanf_float+0x40c>
 800b938:	4808      	ldr	r0, [pc, #32]	@ (800b95c <_scanf_float+0x424>)
 800b93a:	f000 fb1f 	bl	800bf7c <nanf>
 800b93e:	ed85 0a00 	vstr	s0, [r5]
 800b942:	e7d1      	b.n	800b8e8 <_scanf_float+0x3b0>
 800b944:	4630      	mov	r0, r6
 800b946:	4639      	mov	r1, r7
 800b948:	f7f5 f976 	bl	8000c38 <__aeabi_d2f>
 800b94c:	6028      	str	r0, [r5, #0]
 800b94e:	e7cb      	b.n	800b8e8 <_scanf_float+0x3b0>
 800b950:	f04f 0900 	mov.w	r9, #0
 800b954:	e629      	b.n	800b5aa <_scanf_float+0x72>
 800b956:	bf00      	nop
 800b958:	0800fc0c 	.word	0x0800fc0c
 800b95c:	0800ffa5 	.word	0x0800ffa5

0800b960 <std>:
 800b960:	2300      	movs	r3, #0
 800b962:	b510      	push	{r4, lr}
 800b964:	4604      	mov	r4, r0
 800b966:	e9c0 3300 	strd	r3, r3, [r0]
 800b96a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b96e:	6083      	str	r3, [r0, #8]
 800b970:	8181      	strh	r1, [r0, #12]
 800b972:	6643      	str	r3, [r0, #100]	@ 0x64
 800b974:	81c2      	strh	r2, [r0, #14]
 800b976:	6183      	str	r3, [r0, #24]
 800b978:	4619      	mov	r1, r3
 800b97a:	2208      	movs	r2, #8
 800b97c:	305c      	adds	r0, #92	@ 0x5c
 800b97e:	f000 fa19 	bl	800bdb4 <memset>
 800b982:	4b0d      	ldr	r3, [pc, #52]	@ (800b9b8 <std+0x58>)
 800b984:	6263      	str	r3, [r4, #36]	@ 0x24
 800b986:	4b0d      	ldr	r3, [pc, #52]	@ (800b9bc <std+0x5c>)
 800b988:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b98a:	4b0d      	ldr	r3, [pc, #52]	@ (800b9c0 <std+0x60>)
 800b98c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b98e:	4b0d      	ldr	r3, [pc, #52]	@ (800b9c4 <std+0x64>)
 800b990:	6323      	str	r3, [r4, #48]	@ 0x30
 800b992:	4b0d      	ldr	r3, [pc, #52]	@ (800b9c8 <std+0x68>)
 800b994:	6224      	str	r4, [r4, #32]
 800b996:	429c      	cmp	r4, r3
 800b998:	d006      	beq.n	800b9a8 <std+0x48>
 800b99a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b99e:	4294      	cmp	r4, r2
 800b9a0:	d002      	beq.n	800b9a8 <std+0x48>
 800b9a2:	33d0      	adds	r3, #208	@ 0xd0
 800b9a4:	429c      	cmp	r4, r3
 800b9a6:	d105      	bne.n	800b9b4 <std+0x54>
 800b9a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b9ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9b0:	f000 bad2 	b.w	800bf58 <__retarget_lock_init_recursive>
 800b9b4:	bd10      	pop	{r4, pc}
 800b9b6:	bf00      	nop
 800b9b8:	0800bc05 	.word	0x0800bc05
 800b9bc:	0800bc27 	.word	0x0800bc27
 800b9c0:	0800bc5f 	.word	0x0800bc5f
 800b9c4:	0800bc83 	.word	0x0800bc83
 800b9c8:	20002250 	.word	0x20002250

0800b9cc <stdio_exit_handler>:
 800b9cc:	4a02      	ldr	r2, [pc, #8]	@ (800b9d8 <stdio_exit_handler+0xc>)
 800b9ce:	4903      	ldr	r1, [pc, #12]	@ (800b9dc <stdio_exit_handler+0x10>)
 800b9d0:	4803      	ldr	r0, [pc, #12]	@ (800b9e0 <stdio_exit_handler+0x14>)
 800b9d2:	f000 b869 	b.w	800baa8 <_fwalk_sglue>
 800b9d6:	bf00      	nop
 800b9d8:	200001dc 	.word	0x200001dc
 800b9dc:	0800eac9 	.word	0x0800eac9
 800b9e0:	200001ec 	.word	0x200001ec

0800b9e4 <cleanup_stdio>:
 800b9e4:	6841      	ldr	r1, [r0, #4]
 800b9e6:	4b0c      	ldr	r3, [pc, #48]	@ (800ba18 <cleanup_stdio+0x34>)
 800b9e8:	4299      	cmp	r1, r3
 800b9ea:	b510      	push	{r4, lr}
 800b9ec:	4604      	mov	r4, r0
 800b9ee:	d001      	beq.n	800b9f4 <cleanup_stdio+0x10>
 800b9f0:	f003 f86a 	bl	800eac8 <_fflush_r>
 800b9f4:	68a1      	ldr	r1, [r4, #8]
 800b9f6:	4b09      	ldr	r3, [pc, #36]	@ (800ba1c <cleanup_stdio+0x38>)
 800b9f8:	4299      	cmp	r1, r3
 800b9fa:	d002      	beq.n	800ba02 <cleanup_stdio+0x1e>
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f003 f863 	bl	800eac8 <_fflush_r>
 800ba02:	68e1      	ldr	r1, [r4, #12]
 800ba04:	4b06      	ldr	r3, [pc, #24]	@ (800ba20 <cleanup_stdio+0x3c>)
 800ba06:	4299      	cmp	r1, r3
 800ba08:	d004      	beq.n	800ba14 <cleanup_stdio+0x30>
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba10:	f003 b85a 	b.w	800eac8 <_fflush_r>
 800ba14:	bd10      	pop	{r4, pc}
 800ba16:	bf00      	nop
 800ba18:	20002250 	.word	0x20002250
 800ba1c:	200022b8 	.word	0x200022b8
 800ba20:	20002320 	.word	0x20002320

0800ba24 <global_stdio_init.part.0>:
 800ba24:	b510      	push	{r4, lr}
 800ba26:	4b0b      	ldr	r3, [pc, #44]	@ (800ba54 <global_stdio_init.part.0+0x30>)
 800ba28:	4c0b      	ldr	r4, [pc, #44]	@ (800ba58 <global_stdio_init.part.0+0x34>)
 800ba2a:	4a0c      	ldr	r2, [pc, #48]	@ (800ba5c <global_stdio_init.part.0+0x38>)
 800ba2c:	601a      	str	r2, [r3, #0]
 800ba2e:	4620      	mov	r0, r4
 800ba30:	2200      	movs	r2, #0
 800ba32:	2104      	movs	r1, #4
 800ba34:	f7ff ff94 	bl	800b960 <std>
 800ba38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	2109      	movs	r1, #9
 800ba40:	f7ff ff8e 	bl	800b960 <std>
 800ba44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ba48:	2202      	movs	r2, #2
 800ba4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba4e:	2112      	movs	r1, #18
 800ba50:	f7ff bf86 	b.w	800b960 <std>
 800ba54:	20002388 	.word	0x20002388
 800ba58:	20002250 	.word	0x20002250
 800ba5c:	0800b9cd 	.word	0x0800b9cd

0800ba60 <__sfp_lock_acquire>:
 800ba60:	4801      	ldr	r0, [pc, #4]	@ (800ba68 <__sfp_lock_acquire+0x8>)
 800ba62:	f000 ba7a 	b.w	800bf5a <__retarget_lock_acquire_recursive>
 800ba66:	bf00      	nop
 800ba68:	20002391 	.word	0x20002391

0800ba6c <__sfp_lock_release>:
 800ba6c:	4801      	ldr	r0, [pc, #4]	@ (800ba74 <__sfp_lock_release+0x8>)
 800ba6e:	f000 ba75 	b.w	800bf5c <__retarget_lock_release_recursive>
 800ba72:	bf00      	nop
 800ba74:	20002391 	.word	0x20002391

0800ba78 <__sinit>:
 800ba78:	b510      	push	{r4, lr}
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	f7ff fff0 	bl	800ba60 <__sfp_lock_acquire>
 800ba80:	6a23      	ldr	r3, [r4, #32]
 800ba82:	b11b      	cbz	r3, 800ba8c <__sinit+0x14>
 800ba84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba88:	f7ff bff0 	b.w	800ba6c <__sfp_lock_release>
 800ba8c:	4b04      	ldr	r3, [pc, #16]	@ (800baa0 <__sinit+0x28>)
 800ba8e:	6223      	str	r3, [r4, #32]
 800ba90:	4b04      	ldr	r3, [pc, #16]	@ (800baa4 <__sinit+0x2c>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d1f5      	bne.n	800ba84 <__sinit+0xc>
 800ba98:	f7ff ffc4 	bl	800ba24 <global_stdio_init.part.0>
 800ba9c:	e7f2      	b.n	800ba84 <__sinit+0xc>
 800ba9e:	bf00      	nop
 800baa0:	0800b9e5 	.word	0x0800b9e5
 800baa4:	20002388 	.word	0x20002388

0800baa8 <_fwalk_sglue>:
 800baa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baac:	4607      	mov	r7, r0
 800baae:	4688      	mov	r8, r1
 800bab0:	4614      	mov	r4, r2
 800bab2:	2600      	movs	r6, #0
 800bab4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bab8:	f1b9 0901 	subs.w	r9, r9, #1
 800babc:	d505      	bpl.n	800baca <_fwalk_sglue+0x22>
 800babe:	6824      	ldr	r4, [r4, #0]
 800bac0:	2c00      	cmp	r4, #0
 800bac2:	d1f7      	bne.n	800bab4 <_fwalk_sglue+0xc>
 800bac4:	4630      	mov	r0, r6
 800bac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baca:	89ab      	ldrh	r3, [r5, #12]
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d907      	bls.n	800bae0 <_fwalk_sglue+0x38>
 800bad0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bad4:	3301      	adds	r3, #1
 800bad6:	d003      	beq.n	800bae0 <_fwalk_sglue+0x38>
 800bad8:	4629      	mov	r1, r5
 800bada:	4638      	mov	r0, r7
 800badc:	47c0      	blx	r8
 800bade:	4306      	orrs	r6, r0
 800bae0:	3568      	adds	r5, #104	@ 0x68
 800bae2:	e7e9      	b.n	800bab8 <_fwalk_sglue+0x10>

0800bae4 <iprintf>:
 800bae4:	b40f      	push	{r0, r1, r2, r3}
 800bae6:	b507      	push	{r0, r1, r2, lr}
 800bae8:	4906      	ldr	r1, [pc, #24]	@ (800bb04 <iprintf+0x20>)
 800baea:	ab04      	add	r3, sp, #16
 800baec:	6808      	ldr	r0, [r1, #0]
 800baee:	f853 2b04 	ldr.w	r2, [r3], #4
 800baf2:	6881      	ldr	r1, [r0, #8]
 800baf4:	9301      	str	r3, [sp, #4]
 800baf6:	f002 fe4b 	bl	800e790 <_vfiprintf_r>
 800bafa:	b003      	add	sp, #12
 800bafc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb00:	b004      	add	sp, #16
 800bb02:	4770      	bx	lr
 800bb04:	200001e8 	.word	0x200001e8

0800bb08 <_puts_r>:
 800bb08:	6a03      	ldr	r3, [r0, #32]
 800bb0a:	b570      	push	{r4, r5, r6, lr}
 800bb0c:	6884      	ldr	r4, [r0, #8]
 800bb0e:	4605      	mov	r5, r0
 800bb10:	460e      	mov	r6, r1
 800bb12:	b90b      	cbnz	r3, 800bb18 <_puts_r+0x10>
 800bb14:	f7ff ffb0 	bl	800ba78 <__sinit>
 800bb18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb1a:	07db      	lsls	r3, r3, #31
 800bb1c:	d405      	bmi.n	800bb2a <_puts_r+0x22>
 800bb1e:	89a3      	ldrh	r3, [r4, #12]
 800bb20:	0598      	lsls	r0, r3, #22
 800bb22:	d402      	bmi.n	800bb2a <_puts_r+0x22>
 800bb24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb26:	f000 fa18 	bl	800bf5a <__retarget_lock_acquire_recursive>
 800bb2a:	89a3      	ldrh	r3, [r4, #12]
 800bb2c:	0719      	lsls	r1, r3, #28
 800bb2e:	d502      	bpl.n	800bb36 <_puts_r+0x2e>
 800bb30:	6923      	ldr	r3, [r4, #16]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d135      	bne.n	800bba2 <_puts_r+0x9a>
 800bb36:	4621      	mov	r1, r4
 800bb38:	4628      	mov	r0, r5
 800bb3a:	f000 f8e5 	bl	800bd08 <__swsetup_r>
 800bb3e:	b380      	cbz	r0, 800bba2 <_puts_r+0x9a>
 800bb40:	f04f 35ff 	mov.w	r5, #4294967295
 800bb44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb46:	07da      	lsls	r2, r3, #31
 800bb48:	d405      	bmi.n	800bb56 <_puts_r+0x4e>
 800bb4a:	89a3      	ldrh	r3, [r4, #12]
 800bb4c:	059b      	lsls	r3, r3, #22
 800bb4e:	d402      	bmi.n	800bb56 <_puts_r+0x4e>
 800bb50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb52:	f000 fa03 	bl	800bf5c <__retarget_lock_release_recursive>
 800bb56:	4628      	mov	r0, r5
 800bb58:	bd70      	pop	{r4, r5, r6, pc}
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	da04      	bge.n	800bb68 <_puts_r+0x60>
 800bb5e:	69a2      	ldr	r2, [r4, #24]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	dc17      	bgt.n	800bb94 <_puts_r+0x8c>
 800bb64:	290a      	cmp	r1, #10
 800bb66:	d015      	beq.n	800bb94 <_puts_r+0x8c>
 800bb68:	6823      	ldr	r3, [r4, #0]
 800bb6a:	1c5a      	adds	r2, r3, #1
 800bb6c:	6022      	str	r2, [r4, #0]
 800bb6e:	7019      	strb	r1, [r3, #0]
 800bb70:	68a3      	ldr	r3, [r4, #8]
 800bb72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bb76:	3b01      	subs	r3, #1
 800bb78:	60a3      	str	r3, [r4, #8]
 800bb7a:	2900      	cmp	r1, #0
 800bb7c:	d1ed      	bne.n	800bb5a <_puts_r+0x52>
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	da11      	bge.n	800bba6 <_puts_r+0x9e>
 800bb82:	4622      	mov	r2, r4
 800bb84:	210a      	movs	r1, #10
 800bb86:	4628      	mov	r0, r5
 800bb88:	f000 f87f 	bl	800bc8a <__swbuf_r>
 800bb8c:	3001      	adds	r0, #1
 800bb8e:	d0d7      	beq.n	800bb40 <_puts_r+0x38>
 800bb90:	250a      	movs	r5, #10
 800bb92:	e7d7      	b.n	800bb44 <_puts_r+0x3c>
 800bb94:	4622      	mov	r2, r4
 800bb96:	4628      	mov	r0, r5
 800bb98:	f000 f877 	bl	800bc8a <__swbuf_r>
 800bb9c:	3001      	adds	r0, #1
 800bb9e:	d1e7      	bne.n	800bb70 <_puts_r+0x68>
 800bba0:	e7ce      	b.n	800bb40 <_puts_r+0x38>
 800bba2:	3e01      	subs	r6, #1
 800bba4:	e7e4      	b.n	800bb70 <_puts_r+0x68>
 800bba6:	6823      	ldr	r3, [r4, #0]
 800bba8:	1c5a      	adds	r2, r3, #1
 800bbaa:	6022      	str	r2, [r4, #0]
 800bbac:	220a      	movs	r2, #10
 800bbae:	701a      	strb	r2, [r3, #0]
 800bbb0:	e7ee      	b.n	800bb90 <_puts_r+0x88>
	...

0800bbb4 <puts>:
 800bbb4:	4b02      	ldr	r3, [pc, #8]	@ (800bbc0 <puts+0xc>)
 800bbb6:	4601      	mov	r1, r0
 800bbb8:	6818      	ldr	r0, [r3, #0]
 800bbba:	f7ff bfa5 	b.w	800bb08 <_puts_r>
 800bbbe:	bf00      	nop
 800bbc0:	200001e8 	.word	0x200001e8

0800bbc4 <siprintf>:
 800bbc4:	b40e      	push	{r1, r2, r3}
 800bbc6:	b500      	push	{lr}
 800bbc8:	b09c      	sub	sp, #112	@ 0x70
 800bbca:	ab1d      	add	r3, sp, #116	@ 0x74
 800bbcc:	9002      	str	r0, [sp, #8]
 800bbce:	9006      	str	r0, [sp, #24]
 800bbd0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bbd4:	4809      	ldr	r0, [pc, #36]	@ (800bbfc <siprintf+0x38>)
 800bbd6:	9107      	str	r1, [sp, #28]
 800bbd8:	9104      	str	r1, [sp, #16]
 800bbda:	4909      	ldr	r1, [pc, #36]	@ (800bc00 <siprintf+0x3c>)
 800bbdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbe0:	9105      	str	r1, [sp, #20]
 800bbe2:	6800      	ldr	r0, [r0, #0]
 800bbe4:	9301      	str	r3, [sp, #4]
 800bbe6:	a902      	add	r1, sp, #8
 800bbe8:	f002 fcac 	bl	800e544 <_svfiprintf_r>
 800bbec:	9b02      	ldr	r3, [sp, #8]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	701a      	strb	r2, [r3, #0]
 800bbf2:	b01c      	add	sp, #112	@ 0x70
 800bbf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbf8:	b003      	add	sp, #12
 800bbfa:	4770      	bx	lr
 800bbfc:	200001e8 	.word	0x200001e8
 800bc00:	ffff0208 	.word	0xffff0208

0800bc04 <__sread>:
 800bc04:	b510      	push	{r4, lr}
 800bc06:	460c      	mov	r4, r1
 800bc08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc0c:	f000 f956 	bl	800bebc <_read_r>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	bfab      	itete	ge
 800bc14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bc16:	89a3      	ldrhlt	r3, [r4, #12]
 800bc18:	181b      	addge	r3, r3, r0
 800bc1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bc1e:	bfac      	ite	ge
 800bc20:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bc22:	81a3      	strhlt	r3, [r4, #12]
 800bc24:	bd10      	pop	{r4, pc}

0800bc26 <__swrite>:
 800bc26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc2a:	461f      	mov	r7, r3
 800bc2c:	898b      	ldrh	r3, [r1, #12]
 800bc2e:	05db      	lsls	r3, r3, #23
 800bc30:	4605      	mov	r5, r0
 800bc32:	460c      	mov	r4, r1
 800bc34:	4616      	mov	r6, r2
 800bc36:	d505      	bpl.n	800bc44 <__swrite+0x1e>
 800bc38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc3c:	2302      	movs	r3, #2
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f000 f92a 	bl	800be98 <_lseek_r>
 800bc44:	89a3      	ldrh	r3, [r4, #12]
 800bc46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bc4e:	81a3      	strh	r3, [r4, #12]
 800bc50:	4632      	mov	r2, r6
 800bc52:	463b      	mov	r3, r7
 800bc54:	4628      	mov	r0, r5
 800bc56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc5a:	f000 b941 	b.w	800bee0 <_write_r>

0800bc5e <__sseek>:
 800bc5e:	b510      	push	{r4, lr}
 800bc60:	460c      	mov	r4, r1
 800bc62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc66:	f000 f917 	bl	800be98 <_lseek_r>
 800bc6a:	1c43      	adds	r3, r0, #1
 800bc6c:	89a3      	ldrh	r3, [r4, #12]
 800bc6e:	bf15      	itete	ne
 800bc70:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bc72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bc76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bc7a:	81a3      	strheq	r3, [r4, #12]
 800bc7c:	bf18      	it	ne
 800bc7e:	81a3      	strhne	r3, [r4, #12]
 800bc80:	bd10      	pop	{r4, pc}

0800bc82 <__sclose>:
 800bc82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc86:	f000 b8a1 	b.w	800bdcc <_close_r>

0800bc8a <__swbuf_r>:
 800bc8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc8c:	460e      	mov	r6, r1
 800bc8e:	4614      	mov	r4, r2
 800bc90:	4605      	mov	r5, r0
 800bc92:	b118      	cbz	r0, 800bc9c <__swbuf_r+0x12>
 800bc94:	6a03      	ldr	r3, [r0, #32]
 800bc96:	b90b      	cbnz	r3, 800bc9c <__swbuf_r+0x12>
 800bc98:	f7ff feee 	bl	800ba78 <__sinit>
 800bc9c:	69a3      	ldr	r3, [r4, #24]
 800bc9e:	60a3      	str	r3, [r4, #8]
 800bca0:	89a3      	ldrh	r3, [r4, #12]
 800bca2:	071a      	lsls	r2, r3, #28
 800bca4:	d501      	bpl.n	800bcaa <__swbuf_r+0x20>
 800bca6:	6923      	ldr	r3, [r4, #16]
 800bca8:	b943      	cbnz	r3, 800bcbc <__swbuf_r+0x32>
 800bcaa:	4621      	mov	r1, r4
 800bcac:	4628      	mov	r0, r5
 800bcae:	f000 f82b 	bl	800bd08 <__swsetup_r>
 800bcb2:	b118      	cbz	r0, 800bcbc <__swbuf_r+0x32>
 800bcb4:	f04f 37ff 	mov.w	r7, #4294967295
 800bcb8:	4638      	mov	r0, r7
 800bcba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcbc:	6823      	ldr	r3, [r4, #0]
 800bcbe:	6922      	ldr	r2, [r4, #16]
 800bcc0:	1a98      	subs	r0, r3, r2
 800bcc2:	6963      	ldr	r3, [r4, #20]
 800bcc4:	b2f6      	uxtb	r6, r6
 800bcc6:	4283      	cmp	r3, r0
 800bcc8:	4637      	mov	r7, r6
 800bcca:	dc05      	bgt.n	800bcd8 <__swbuf_r+0x4e>
 800bccc:	4621      	mov	r1, r4
 800bcce:	4628      	mov	r0, r5
 800bcd0:	f002 fefa 	bl	800eac8 <_fflush_r>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	d1ed      	bne.n	800bcb4 <__swbuf_r+0x2a>
 800bcd8:	68a3      	ldr	r3, [r4, #8]
 800bcda:	3b01      	subs	r3, #1
 800bcdc:	60a3      	str	r3, [r4, #8]
 800bcde:	6823      	ldr	r3, [r4, #0]
 800bce0:	1c5a      	adds	r2, r3, #1
 800bce2:	6022      	str	r2, [r4, #0]
 800bce4:	701e      	strb	r6, [r3, #0]
 800bce6:	6962      	ldr	r2, [r4, #20]
 800bce8:	1c43      	adds	r3, r0, #1
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d004      	beq.n	800bcf8 <__swbuf_r+0x6e>
 800bcee:	89a3      	ldrh	r3, [r4, #12]
 800bcf0:	07db      	lsls	r3, r3, #31
 800bcf2:	d5e1      	bpl.n	800bcb8 <__swbuf_r+0x2e>
 800bcf4:	2e0a      	cmp	r6, #10
 800bcf6:	d1df      	bne.n	800bcb8 <__swbuf_r+0x2e>
 800bcf8:	4621      	mov	r1, r4
 800bcfa:	4628      	mov	r0, r5
 800bcfc:	f002 fee4 	bl	800eac8 <_fflush_r>
 800bd00:	2800      	cmp	r0, #0
 800bd02:	d0d9      	beq.n	800bcb8 <__swbuf_r+0x2e>
 800bd04:	e7d6      	b.n	800bcb4 <__swbuf_r+0x2a>
	...

0800bd08 <__swsetup_r>:
 800bd08:	b538      	push	{r3, r4, r5, lr}
 800bd0a:	4b29      	ldr	r3, [pc, #164]	@ (800bdb0 <__swsetup_r+0xa8>)
 800bd0c:	4605      	mov	r5, r0
 800bd0e:	6818      	ldr	r0, [r3, #0]
 800bd10:	460c      	mov	r4, r1
 800bd12:	b118      	cbz	r0, 800bd1c <__swsetup_r+0x14>
 800bd14:	6a03      	ldr	r3, [r0, #32]
 800bd16:	b90b      	cbnz	r3, 800bd1c <__swsetup_r+0x14>
 800bd18:	f7ff feae 	bl	800ba78 <__sinit>
 800bd1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd20:	0719      	lsls	r1, r3, #28
 800bd22:	d422      	bmi.n	800bd6a <__swsetup_r+0x62>
 800bd24:	06da      	lsls	r2, r3, #27
 800bd26:	d407      	bmi.n	800bd38 <__swsetup_r+0x30>
 800bd28:	2209      	movs	r2, #9
 800bd2a:	602a      	str	r2, [r5, #0]
 800bd2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd30:	81a3      	strh	r3, [r4, #12]
 800bd32:	f04f 30ff 	mov.w	r0, #4294967295
 800bd36:	e033      	b.n	800bda0 <__swsetup_r+0x98>
 800bd38:	0758      	lsls	r0, r3, #29
 800bd3a:	d512      	bpl.n	800bd62 <__swsetup_r+0x5a>
 800bd3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd3e:	b141      	cbz	r1, 800bd52 <__swsetup_r+0x4a>
 800bd40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd44:	4299      	cmp	r1, r3
 800bd46:	d002      	beq.n	800bd4e <__swsetup_r+0x46>
 800bd48:	4628      	mov	r0, r5
 800bd4a:	f000 ff69 	bl	800cc20 <_free_r>
 800bd4e:	2300      	movs	r3, #0
 800bd50:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd52:	89a3      	ldrh	r3, [r4, #12]
 800bd54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bd58:	81a3      	strh	r3, [r4, #12]
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	6063      	str	r3, [r4, #4]
 800bd5e:	6923      	ldr	r3, [r4, #16]
 800bd60:	6023      	str	r3, [r4, #0]
 800bd62:	89a3      	ldrh	r3, [r4, #12]
 800bd64:	f043 0308 	orr.w	r3, r3, #8
 800bd68:	81a3      	strh	r3, [r4, #12]
 800bd6a:	6923      	ldr	r3, [r4, #16]
 800bd6c:	b94b      	cbnz	r3, 800bd82 <__swsetup_r+0x7a>
 800bd6e:	89a3      	ldrh	r3, [r4, #12]
 800bd70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bd74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd78:	d003      	beq.n	800bd82 <__swsetup_r+0x7a>
 800bd7a:	4621      	mov	r1, r4
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	f002 fef1 	bl	800eb64 <__smakebuf_r>
 800bd82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd86:	f013 0201 	ands.w	r2, r3, #1
 800bd8a:	d00a      	beq.n	800bda2 <__swsetup_r+0x9a>
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	60a2      	str	r2, [r4, #8]
 800bd90:	6962      	ldr	r2, [r4, #20]
 800bd92:	4252      	negs	r2, r2
 800bd94:	61a2      	str	r2, [r4, #24]
 800bd96:	6922      	ldr	r2, [r4, #16]
 800bd98:	b942      	cbnz	r2, 800bdac <__swsetup_r+0xa4>
 800bd9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bd9e:	d1c5      	bne.n	800bd2c <__swsetup_r+0x24>
 800bda0:	bd38      	pop	{r3, r4, r5, pc}
 800bda2:	0799      	lsls	r1, r3, #30
 800bda4:	bf58      	it	pl
 800bda6:	6962      	ldrpl	r2, [r4, #20]
 800bda8:	60a2      	str	r2, [r4, #8]
 800bdaa:	e7f4      	b.n	800bd96 <__swsetup_r+0x8e>
 800bdac:	2000      	movs	r0, #0
 800bdae:	e7f7      	b.n	800bda0 <__swsetup_r+0x98>
 800bdb0:	200001e8 	.word	0x200001e8

0800bdb4 <memset>:
 800bdb4:	4402      	add	r2, r0
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d100      	bne.n	800bdbe <memset+0xa>
 800bdbc:	4770      	bx	lr
 800bdbe:	f803 1b01 	strb.w	r1, [r3], #1
 800bdc2:	e7f9      	b.n	800bdb8 <memset+0x4>

0800bdc4 <_localeconv_r>:
 800bdc4:	4800      	ldr	r0, [pc, #0]	@ (800bdc8 <_localeconv_r+0x4>)
 800bdc6:	4770      	bx	lr
 800bdc8:	20000328 	.word	0x20000328

0800bdcc <_close_r>:
 800bdcc:	b538      	push	{r3, r4, r5, lr}
 800bdce:	4d06      	ldr	r5, [pc, #24]	@ (800bde8 <_close_r+0x1c>)
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	4608      	mov	r0, r1
 800bdd6:	602b      	str	r3, [r5, #0]
 800bdd8:	f7f6 fd60 	bl	800289c <_close>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d102      	bne.n	800bde6 <_close_r+0x1a>
 800bde0:	682b      	ldr	r3, [r5, #0]
 800bde2:	b103      	cbz	r3, 800bde6 <_close_r+0x1a>
 800bde4:	6023      	str	r3, [r4, #0]
 800bde6:	bd38      	pop	{r3, r4, r5, pc}
 800bde8:	2000238c 	.word	0x2000238c

0800bdec <_reclaim_reent>:
 800bdec:	4b29      	ldr	r3, [pc, #164]	@ (800be94 <_reclaim_reent+0xa8>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4283      	cmp	r3, r0
 800bdf2:	b570      	push	{r4, r5, r6, lr}
 800bdf4:	4604      	mov	r4, r0
 800bdf6:	d04b      	beq.n	800be90 <_reclaim_reent+0xa4>
 800bdf8:	69c3      	ldr	r3, [r0, #28]
 800bdfa:	b1ab      	cbz	r3, 800be28 <_reclaim_reent+0x3c>
 800bdfc:	68db      	ldr	r3, [r3, #12]
 800bdfe:	b16b      	cbz	r3, 800be1c <_reclaim_reent+0x30>
 800be00:	2500      	movs	r5, #0
 800be02:	69e3      	ldr	r3, [r4, #28]
 800be04:	68db      	ldr	r3, [r3, #12]
 800be06:	5959      	ldr	r1, [r3, r5]
 800be08:	2900      	cmp	r1, #0
 800be0a:	d13b      	bne.n	800be84 <_reclaim_reent+0x98>
 800be0c:	3504      	adds	r5, #4
 800be0e:	2d80      	cmp	r5, #128	@ 0x80
 800be10:	d1f7      	bne.n	800be02 <_reclaim_reent+0x16>
 800be12:	69e3      	ldr	r3, [r4, #28]
 800be14:	4620      	mov	r0, r4
 800be16:	68d9      	ldr	r1, [r3, #12]
 800be18:	f000 ff02 	bl	800cc20 <_free_r>
 800be1c:	69e3      	ldr	r3, [r4, #28]
 800be1e:	6819      	ldr	r1, [r3, #0]
 800be20:	b111      	cbz	r1, 800be28 <_reclaim_reent+0x3c>
 800be22:	4620      	mov	r0, r4
 800be24:	f000 fefc 	bl	800cc20 <_free_r>
 800be28:	6961      	ldr	r1, [r4, #20]
 800be2a:	b111      	cbz	r1, 800be32 <_reclaim_reent+0x46>
 800be2c:	4620      	mov	r0, r4
 800be2e:	f000 fef7 	bl	800cc20 <_free_r>
 800be32:	69e1      	ldr	r1, [r4, #28]
 800be34:	b111      	cbz	r1, 800be3c <_reclaim_reent+0x50>
 800be36:	4620      	mov	r0, r4
 800be38:	f000 fef2 	bl	800cc20 <_free_r>
 800be3c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800be3e:	b111      	cbz	r1, 800be46 <_reclaim_reent+0x5a>
 800be40:	4620      	mov	r0, r4
 800be42:	f000 feed 	bl	800cc20 <_free_r>
 800be46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be48:	b111      	cbz	r1, 800be50 <_reclaim_reent+0x64>
 800be4a:	4620      	mov	r0, r4
 800be4c:	f000 fee8 	bl	800cc20 <_free_r>
 800be50:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800be52:	b111      	cbz	r1, 800be5a <_reclaim_reent+0x6e>
 800be54:	4620      	mov	r0, r4
 800be56:	f000 fee3 	bl	800cc20 <_free_r>
 800be5a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800be5c:	b111      	cbz	r1, 800be64 <_reclaim_reent+0x78>
 800be5e:	4620      	mov	r0, r4
 800be60:	f000 fede 	bl	800cc20 <_free_r>
 800be64:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800be66:	b111      	cbz	r1, 800be6e <_reclaim_reent+0x82>
 800be68:	4620      	mov	r0, r4
 800be6a:	f000 fed9 	bl	800cc20 <_free_r>
 800be6e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800be70:	b111      	cbz	r1, 800be78 <_reclaim_reent+0x8c>
 800be72:	4620      	mov	r0, r4
 800be74:	f000 fed4 	bl	800cc20 <_free_r>
 800be78:	6a23      	ldr	r3, [r4, #32]
 800be7a:	b14b      	cbz	r3, 800be90 <_reclaim_reent+0xa4>
 800be7c:	4620      	mov	r0, r4
 800be7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be82:	4718      	bx	r3
 800be84:	680e      	ldr	r6, [r1, #0]
 800be86:	4620      	mov	r0, r4
 800be88:	f000 feca 	bl	800cc20 <_free_r>
 800be8c:	4631      	mov	r1, r6
 800be8e:	e7bb      	b.n	800be08 <_reclaim_reent+0x1c>
 800be90:	bd70      	pop	{r4, r5, r6, pc}
 800be92:	bf00      	nop
 800be94:	200001e8 	.word	0x200001e8

0800be98 <_lseek_r>:
 800be98:	b538      	push	{r3, r4, r5, lr}
 800be9a:	4d07      	ldr	r5, [pc, #28]	@ (800beb8 <_lseek_r+0x20>)
 800be9c:	4604      	mov	r4, r0
 800be9e:	4608      	mov	r0, r1
 800bea0:	4611      	mov	r1, r2
 800bea2:	2200      	movs	r2, #0
 800bea4:	602a      	str	r2, [r5, #0]
 800bea6:	461a      	mov	r2, r3
 800bea8:	f7f6 fd1f 	bl	80028ea <_lseek>
 800beac:	1c43      	adds	r3, r0, #1
 800beae:	d102      	bne.n	800beb6 <_lseek_r+0x1e>
 800beb0:	682b      	ldr	r3, [r5, #0]
 800beb2:	b103      	cbz	r3, 800beb6 <_lseek_r+0x1e>
 800beb4:	6023      	str	r3, [r4, #0]
 800beb6:	bd38      	pop	{r3, r4, r5, pc}
 800beb8:	2000238c 	.word	0x2000238c

0800bebc <_read_r>:
 800bebc:	b538      	push	{r3, r4, r5, lr}
 800bebe:	4d07      	ldr	r5, [pc, #28]	@ (800bedc <_read_r+0x20>)
 800bec0:	4604      	mov	r4, r0
 800bec2:	4608      	mov	r0, r1
 800bec4:	4611      	mov	r1, r2
 800bec6:	2200      	movs	r2, #0
 800bec8:	602a      	str	r2, [r5, #0]
 800beca:	461a      	mov	r2, r3
 800becc:	f7f6 fcad 	bl	800282a <_read>
 800bed0:	1c43      	adds	r3, r0, #1
 800bed2:	d102      	bne.n	800beda <_read_r+0x1e>
 800bed4:	682b      	ldr	r3, [r5, #0]
 800bed6:	b103      	cbz	r3, 800beda <_read_r+0x1e>
 800bed8:	6023      	str	r3, [r4, #0]
 800beda:	bd38      	pop	{r3, r4, r5, pc}
 800bedc:	2000238c 	.word	0x2000238c

0800bee0 <_write_r>:
 800bee0:	b538      	push	{r3, r4, r5, lr}
 800bee2:	4d07      	ldr	r5, [pc, #28]	@ (800bf00 <_write_r+0x20>)
 800bee4:	4604      	mov	r4, r0
 800bee6:	4608      	mov	r0, r1
 800bee8:	4611      	mov	r1, r2
 800beea:	2200      	movs	r2, #0
 800beec:	602a      	str	r2, [r5, #0]
 800beee:	461a      	mov	r2, r3
 800bef0:	f7f6 fcb8 	bl	8002864 <_write>
 800bef4:	1c43      	adds	r3, r0, #1
 800bef6:	d102      	bne.n	800befe <_write_r+0x1e>
 800bef8:	682b      	ldr	r3, [r5, #0]
 800befa:	b103      	cbz	r3, 800befe <_write_r+0x1e>
 800befc:	6023      	str	r3, [r4, #0]
 800befe:	bd38      	pop	{r3, r4, r5, pc}
 800bf00:	2000238c 	.word	0x2000238c

0800bf04 <__errno>:
 800bf04:	4b01      	ldr	r3, [pc, #4]	@ (800bf0c <__errno+0x8>)
 800bf06:	6818      	ldr	r0, [r3, #0]
 800bf08:	4770      	bx	lr
 800bf0a:	bf00      	nop
 800bf0c:	200001e8 	.word	0x200001e8

0800bf10 <__libc_init_array>:
 800bf10:	b570      	push	{r4, r5, r6, lr}
 800bf12:	4d0d      	ldr	r5, [pc, #52]	@ (800bf48 <__libc_init_array+0x38>)
 800bf14:	4c0d      	ldr	r4, [pc, #52]	@ (800bf4c <__libc_init_array+0x3c>)
 800bf16:	1b64      	subs	r4, r4, r5
 800bf18:	10a4      	asrs	r4, r4, #2
 800bf1a:	2600      	movs	r6, #0
 800bf1c:	42a6      	cmp	r6, r4
 800bf1e:	d109      	bne.n	800bf34 <__libc_init_array+0x24>
 800bf20:	4d0b      	ldr	r5, [pc, #44]	@ (800bf50 <__libc_init_array+0x40>)
 800bf22:	4c0c      	ldr	r4, [pc, #48]	@ (800bf54 <__libc_init_array+0x44>)
 800bf24:	f003 fc80 	bl	800f828 <_init>
 800bf28:	1b64      	subs	r4, r4, r5
 800bf2a:	10a4      	asrs	r4, r4, #2
 800bf2c:	2600      	movs	r6, #0
 800bf2e:	42a6      	cmp	r6, r4
 800bf30:	d105      	bne.n	800bf3e <__libc_init_array+0x2e>
 800bf32:	bd70      	pop	{r4, r5, r6, pc}
 800bf34:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf38:	4798      	blx	r3
 800bf3a:	3601      	adds	r6, #1
 800bf3c:	e7ee      	b.n	800bf1c <__libc_init_array+0xc>
 800bf3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf42:	4798      	blx	r3
 800bf44:	3601      	adds	r6, #1
 800bf46:	e7f2      	b.n	800bf2e <__libc_init_array+0x1e>
 800bf48:	08010050 	.word	0x08010050
 800bf4c:	08010050 	.word	0x08010050
 800bf50:	08010050 	.word	0x08010050
 800bf54:	08010054 	.word	0x08010054

0800bf58 <__retarget_lock_init_recursive>:
 800bf58:	4770      	bx	lr

0800bf5a <__retarget_lock_acquire_recursive>:
 800bf5a:	4770      	bx	lr

0800bf5c <__retarget_lock_release_recursive>:
 800bf5c:	4770      	bx	lr

0800bf5e <memcpy>:
 800bf5e:	440a      	add	r2, r1
 800bf60:	4291      	cmp	r1, r2
 800bf62:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf66:	d100      	bne.n	800bf6a <memcpy+0xc>
 800bf68:	4770      	bx	lr
 800bf6a:	b510      	push	{r4, lr}
 800bf6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf70:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf74:	4291      	cmp	r1, r2
 800bf76:	d1f9      	bne.n	800bf6c <memcpy+0xe>
 800bf78:	bd10      	pop	{r4, pc}
	...

0800bf7c <nanf>:
 800bf7c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bf84 <nanf+0x8>
 800bf80:	4770      	bx	lr
 800bf82:	bf00      	nop
 800bf84:	7fc00000 	.word	0x7fc00000

0800bf88 <quorem>:
 800bf88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf8c:	6903      	ldr	r3, [r0, #16]
 800bf8e:	690c      	ldr	r4, [r1, #16]
 800bf90:	42a3      	cmp	r3, r4
 800bf92:	4607      	mov	r7, r0
 800bf94:	db7e      	blt.n	800c094 <quorem+0x10c>
 800bf96:	3c01      	subs	r4, #1
 800bf98:	f101 0814 	add.w	r8, r1, #20
 800bf9c:	00a3      	lsls	r3, r4, #2
 800bf9e:	f100 0514 	add.w	r5, r0, #20
 800bfa2:	9300      	str	r3, [sp, #0]
 800bfa4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfa8:	9301      	str	r3, [sp, #4]
 800bfaa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bfae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bfba:	fbb2 f6f3 	udiv	r6, r2, r3
 800bfbe:	d32e      	bcc.n	800c01e <quorem+0x96>
 800bfc0:	f04f 0a00 	mov.w	sl, #0
 800bfc4:	46c4      	mov	ip, r8
 800bfc6:	46ae      	mov	lr, r5
 800bfc8:	46d3      	mov	fp, sl
 800bfca:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bfce:	b298      	uxth	r0, r3
 800bfd0:	fb06 a000 	mla	r0, r6, r0, sl
 800bfd4:	0c02      	lsrs	r2, r0, #16
 800bfd6:	0c1b      	lsrs	r3, r3, #16
 800bfd8:	fb06 2303 	mla	r3, r6, r3, r2
 800bfdc:	f8de 2000 	ldr.w	r2, [lr]
 800bfe0:	b280      	uxth	r0, r0
 800bfe2:	b292      	uxth	r2, r2
 800bfe4:	1a12      	subs	r2, r2, r0
 800bfe6:	445a      	add	r2, fp
 800bfe8:	f8de 0000 	ldr.w	r0, [lr]
 800bfec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bff6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bffa:	b292      	uxth	r2, r2
 800bffc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c000:	45e1      	cmp	r9, ip
 800c002:	f84e 2b04 	str.w	r2, [lr], #4
 800c006:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c00a:	d2de      	bcs.n	800bfca <quorem+0x42>
 800c00c:	9b00      	ldr	r3, [sp, #0]
 800c00e:	58eb      	ldr	r3, [r5, r3]
 800c010:	b92b      	cbnz	r3, 800c01e <quorem+0x96>
 800c012:	9b01      	ldr	r3, [sp, #4]
 800c014:	3b04      	subs	r3, #4
 800c016:	429d      	cmp	r5, r3
 800c018:	461a      	mov	r2, r3
 800c01a:	d32f      	bcc.n	800c07c <quorem+0xf4>
 800c01c:	613c      	str	r4, [r7, #16]
 800c01e:	4638      	mov	r0, r7
 800c020:	f001 f9c2 	bl	800d3a8 <__mcmp>
 800c024:	2800      	cmp	r0, #0
 800c026:	db25      	blt.n	800c074 <quorem+0xec>
 800c028:	4629      	mov	r1, r5
 800c02a:	2000      	movs	r0, #0
 800c02c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c030:	f8d1 c000 	ldr.w	ip, [r1]
 800c034:	fa1f fe82 	uxth.w	lr, r2
 800c038:	fa1f f38c 	uxth.w	r3, ip
 800c03c:	eba3 030e 	sub.w	r3, r3, lr
 800c040:	4403      	add	r3, r0
 800c042:	0c12      	lsrs	r2, r2, #16
 800c044:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c048:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c052:	45c1      	cmp	r9, r8
 800c054:	f841 3b04 	str.w	r3, [r1], #4
 800c058:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c05c:	d2e6      	bcs.n	800c02c <quorem+0xa4>
 800c05e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c062:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c066:	b922      	cbnz	r2, 800c072 <quorem+0xea>
 800c068:	3b04      	subs	r3, #4
 800c06a:	429d      	cmp	r5, r3
 800c06c:	461a      	mov	r2, r3
 800c06e:	d30b      	bcc.n	800c088 <quorem+0x100>
 800c070:	613c      	str	r4, [r7, #16]
 800c072:	3601      	adds	r6, #1
 800c074:	4630      	mov	r0, r6
 800c076:	b003      	add	sp, #12
 800c078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c07c:	6812      	ldr	r2, [r2, #0]
 800c07e:	3b04      	subs	r3, #4
 800c080:	2a00      	cmp	r2, #0
 800c082:	d1cb      	bne.n	800c01c <quorem+0x94>
 800c084:	3c01      	subs	r4, #1
 800c086:	e7c6      	b.n	800c016 <quorem+0x8e>
 800c088:	6812      	ldr	r2, [r2, #0]
 800c08a:	3b04      	subs	r3, #4
 800c08c:	2a00      	cmp	r2, #0
 800c08e:	d1ef      	bne.n	800c070 <quorem+0xe8>
 800c090:	3c01      	subs	r4, #1
 800c092:	e7ea      	b.n	800c06a <quorem+0xe2>
 800c094:	2000      	movs	r0, #0
 800c096:	e7ee      	b.n	800c076 <quorem+0xee>

0800c098 <_dtoa_r>:
 800c098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c09c:	69c7      	ldr	r7, [r0, #28]
 800c09e:	b099      	sub	sp, #100	@ 0x64
 800c0a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c0a4:	ec55 4b10 	vmov	r4, r5, d0
 800c0a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c0aa:	9109      	str	r1, [sp, #36]	@ 0x24
 800c0ac:	4683      	mov	fp, r0
 800c0ae:	920e      	str	r2, [sp, #56]	@ 0x38
 800c0b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c0b2:	b97f      	cbnz	r7, 800c0d4 <_dtoa_r+0x3c>
 800c0b4:	2010      	movs	r0, #16
 800c0b6:	f000 fdfd 	bl	800ccb4 <malloc>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	f8cb 001c 	str.w	r0, [fp, #28]
 800c0c0:	b920      	cbnz	r0, 800c0cc <_dtoa_r+0x34>
 800c0c2:	4ba7      	ldr	r3, [pc, #668]	@ (800c360 <_dtoa_r+0x2c8>)
 800c0c4:	21ef      	movs	r1, #239	@ 0xef
 800c0c6:	48a7      	ldr	r0, [pc, #668]	@ (800c364 <_dtoa_r+0x2cc>)
 800c0c8:	f002 fdee 	bl	800eca8 <__assert_func>
 800c0cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c0d0:	6007      	str	r7, [r0, #0]
 800c0d2:	60c7      	str	r7, [r0, #12]
 800c0d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c0d8:	6819      	ldr	r1, [r3, #0]
 800c0da:	b159      	cbz	r1, 800c0f4 <_dtoa_r+0x5c>
 800c0dc:	685a      	ldr	r2, [r3, #4]
 800c0de:	604a      	str	r2, [r1, #4]
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	4093      	lsls	r3, r2
 800c0e4:	608b      	str	r3, [r1, #8]
 800c0e6:	4658      	mov	r0, fp
 800c0e8:	f000 feda 	bl	800cea0 <_Bfree>
 800c0ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	601a      	str	r2, [r3, #0]
 800c0f4:	1e2b      	subs	r3, r5, #0
 800c0f6:	bfb9      	ittee	lt
 800c0f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c0fc:	9303      	strlt	r3, [sp, #12]
 800c0fe:	2300      	movge	r3, #0
 800c100:	6033      	strge	r3, [r6, #0]
 800c102:	9f03      	ldr	r7, [sp, #12]
 800c104:	4b98      	ldr	r3, [pc, #608]	@ (800c368 <_dtoa_r+0x2d0>)
 800c106:	bfbc      	itt	lt
 800c108:	2201      	movlt	r2, #1
 800c10a:	6032      	strlt	r2, [r6, #0]
 800c10c:	43bb      	bics	r3, r7
 800c10e:	d112      	bne.n	800c136 <_dtoa_r+0x9e>
 800c110:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c112:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c116:	6013      	str	r3, [r2, #0]
 800c118:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c11c:	4323      	orrs	r3, r4
 800c11e:	f000 854d 	beq.w	800cbbc <_dtoa_r+0xb24>
 800c122:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c124:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c37c <_dtoa_r+0x2e4>
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f000 854f 	beq.w	800cbcc <_dtoa_r+0xb34>
 800c12e:	f10a 0303 	add.w	r3, sl, #3
 800c132:	f000 bd49 	b.w	800cbc8 <_dtoa_r+0xb30>
 800c136:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c13a:	2200      	movs	r2, #0
 800c13c:	ec51 0b17 	vmov	r0, r1, d7
 800c140:	2300      	movs	r3, #0
 800c142:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c146:	f7f4 fce7 	bl	8000b18 <__aeabi_dcmpeq>
 800c14a:	4680      	mov	r8, r0
 800c14c:	b158      	cbz	r0, 800c166 <_dtoa_r+0xce>
 800c14e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c150:	2301      	movs	r3, #1
 800c152:	6013      	str	r3, [r2, #0]
 800c154:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c156:	b113      	cbz	r3, 800c15e <_dtoa_r+0xc6>
 800c158:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c15a:	4b84      	ldr	r3, [pc, #528]	@ (800c36c <_dtoa_r+0x2d4>)
 800c15c:	6013      	str	r3, [r2, #0]
 800c15e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c380 <_dtoa_r+0x2e8>
 800c162:	f000 bd33 	b.w	800cbcc <_dtoa_r+0xb34>
 800c166:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c16a:	aa16      	add	r2, sp, #88	@ 0x58
 800c16c:	a917      	add	r1, sp, #92	@ 0x5c
 800c16e:	4658      	mov	r0, fp
 800c170:	f001 fa3a 	bl	800d5e8 <__d2b>
 800c174:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c178:	4681      	mov	r9, r0
 800c17a:	2e00      	cmp	r6, #0
 800c17c:	d077      	beq.n	800c26e <_dtoa_r+0x1d6>
 800c17e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c180:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c188:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c18c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c190:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c194:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c198:	4619      	mov	r1, r3
 800c19a:	2200      	movs	r2, #0
 800c19c:	4b74      	ldr	r3, [pc, #464]	@ (800c370 <_dtoa_r+0x2d8>)
 800c19e:	f7f4 f89b 	bl	80002d8 <__aeabi_dsub>
 800c1a2:	a369      	add	r3, pc, #420	@ (adr r3, 800c348 <_dtoa_r+0x2b0>)
 800c1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a8:	f7f4 fa4e 	bl	8000648 <__aeabi_dmul>
 800c1ac:	a368      	add	r3, pc, #416	@ (adr r3, 800c350 <_dtoa_r+0x2b8>)
 800c1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b2:	f7f4 f893 	bl	80002dc <__adddf3>
 800c1b6:	4604      	mov	r4, r0
 800c1b8:	4630      	mov	r0, r6
 800c1ba:	460d      	mov	r5, r1
 800c1bc:	f7f4 f9da 	bl	8000574 <__aeabi_i2d>
 800c1c0:	a365      	add	r3, pc, #404	@ (adr r3, 800c358 <_dtoa_r+0x2c0>)
 800c1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c6:	f7f4 fa3f 	bl	8000648 <__aeabi_dmul>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	4629      	mov	r1, r5
 800c1d2:	f7f4 f883 	bl	80002dc <__adddf3>
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	460d      	mov	r5, r1
 800c1da:	f7f4 fce5 	bl	8000ba8 <__aeabi_d2iz>
 800c1de:	2200      	movs	r2, #0
 800c1e0:	4607      	mov	r7, r0
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	4629      	mov	r1, r5
 800c1e8:	f7f4 fca0 	bl	8000b2c <__aeabi_dcmplt>
 800c1ec:	b140      	cbz	r0, 800c200 <_dtoa_r+0x168>
 800c1ee:	4638      	mov	r0, r7
 800c1f0:	f7f4 f9c0 	bl	8000574 <__aeabi_i2d>
 800c1f4:	4622      	mov	r2, r4
 800c1f6:	462b      	mov	r3, r5
 800c1f8:	f7f4 fc8e 	bl	8000b18 <__aeabi_dcmpeq>
 800c1fc:	b900      	cbnz	r0, 800c200 <_dtoa_r+0x168>
 800c1fe:	3f01      	subs	r7, #1
 800c200:	2f16      	cmp	r7, #22
 800c202:	d851      	bhi.n	800c2a8 <_dtoa_r+0x210>
 800c204:	4b5b      	ldr	r3, [pc, #364]	@ (800c374 <_dtoa_r+0x2dc>)
 800c206:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c212:	f7f4 fc8b 	bl	8000b2c <__aeabi_dcmplt>
 800c216:	2800      	cmp	r0, #0
 800c218:	d048      	beq.n	800c2ac <_dtoa_r+0x214>
 800c21a:	3f01      	subs	r7, #1
 800c21c:	2300      	movs	r3, #0
 800c21e:	9312      	str	r3, [sp, #72]	@ 0x48
 800c220:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c222:	1b9b      	subs	r3, r3, r6
 800c224:	1e5a      	subs	r2, r3, #1
 800c226:	bf44      	itt	mi
 800c228:	f1c3 0801 	rsbmi	r8, r3, #1
 800c22c:	2300      	movmi	r3, #0
 800c22e:	9208      	str	r2, [sp, #32]
 800c230:	bf54      	ite	pl
 800c232:	f04f 0800 	movpl.w	r8, #0
 800c236:	9308      	strmi	r3, [sp, #32]
 800c238:	2f00      	cmp	r7, #0
 800c23a:	db39      	blt.n	800c2b0 <_dtoa_r+0x218>
 800c23c:	9b08      	ldr	r3, [sp, #32]
 800c23e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c240:	443b      	add	r3, r7
 800c242:	9308      	str	r3, [sp, #32]
 800c244:	2300      	movs	r3, #0
 800c246:	930a      	str	r3, [sp, #40]	@ 0x28
 800c248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c24a:	2b09      	cmp	r3, #9
 800c24c:	d864      	bhi.n	800c318 <_dtoa_r+0x280>
 800c24e:	2b05      	cmp	r3, #5
 800c250:	bfc4      	itt	gt
 800c252:	3b04      	subgt	r3, #4
 800c254:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c258:	f1a3 0302 	sub.w	r3, r3, #2
 800c25c:	bfcc      	ite	gt
 800c25e:	2400      	movgt	r4, #0
 800c260:	2401      	movle	r4, #1
 800c262:	2b03      	cmp	r3, #3
 800c264:	d863      	bhi.n	800c32e <_dtoa_r+0x296>
 800c266:	e8df f003 	tbb	[pc, r3]
 800c26a:	372a      	.short	0x372a
 800c26c:	5535      	.short	0x5535
 800c26e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c272:	441e      	add	r6, r3
 800c274:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c278:	2b20      	cmp	r3, #32
 800c27a:	bfc1      	itttt	gt
 800c27c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c280:	409f      	lslgt	r7, r3
 800c282:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c286:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c28a:	bfd6      	itet	le
 800c28c:	f1c3 0320 	rsble	r3, r3, #32
 800c290:	ea47 0003 	orrgt.w	r0, r7, r3
 800c294:	fa04 f003 	lslle.w	r0, r4, r3
 800c298:	f7f4 f95c 	bl	8000554 <__aeabi_ui2d>
 800c29c:	2201      	movs	r2, #1
 800c29e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c2a2:	3e01      	subs	r6, #1
 800c2a4:	9214      	str	r2, [sp, #80]	@ 0x50
 800c2a6:	e777      	b.n	800c198 <_dtoa_r+0x100>
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	e7b8      	b.n	800c21e <_dtoa_r+0x186>
 800c2ac:	9012      	str	r0, [sp, #72]	@ 0x48
 800c2ae:	e7b7      	b.n	800c220 <_dtoa_r+0x188>
 800c2b0:	427b      	negs	r3, r7
 800c2b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	eba8 0807 	sub.w	r8, r8, r7
 800c2ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c2bc:	e7c4      	b.n	800c248 <_dtoa_r+0x1b0>
 800c2be:	2300      	movs	r3, #0
 800c2c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	dc35      	bgt.n	800c334 <_dtoa_r+0x29c>
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	9300      	str	r3, [sp, #0]
 800c2cc:	9307      	str	r3, [sp, #28]
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c2d2:	e00b      	b.n	800c2ec <_dtoa_r+0x254>
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e7f3      	b.n	800c2c0 <_dtoa_r+0x228>
 800c2d8:	2300      	movs	r3, #0
 800c2da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2de:	18fb      	adds	r3, r7, r3
 800c2e0:	9300      	str	r3, [sp, #0]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	9307      	str	r3, [sp, #28]
 800c2e8:	bfb8      	it	lt
 800c2ea:	2301      	movlt	r3, #1
 800c2ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c2f0:	2100      	movs	r1, #0
 800c2f2:	2204      	movs	r2, #4
 800c2f4:	f102 0514 	add.w	r5, r2, #20
 800c2f8:	429d      	cmp	r5, r3
 800c2fa:	d91f      	bls.n	800c33c <_dtoa_r+0x2a4>
 800c2fc:	6041      	str	r1, [r0, #4]
 800c2fe:	4658      	mov	r0, fp
 800c300:	f000 fd8e 	bl	800ce20 <_Balloc>
 800c304:	4682      	mov	sl, r0
 800c306:	2800      	cmp	r0, #0
 800c308:	d13c      	bne.n	800c384 <_dtoa_r+0x2ec>
 800c30a:	4b1b      	ldr	r3, [pc, #108]	@ (800c378 <_dtoa_r+0x2e0>)
 800c30c:	4602      	mov	r2, r0
 800c30e:	f240 11af 	movw	r1, #431	@ 0x1af
 800c312:	e6d8      	b.n	800c0c6 <_dtoa_r+0x2e>
 800c314:	2301      	movs	r3, #1
 800c316:	e7e0      	b.n	800c2da <_dtoa_r+0x242>
 800c318:	2401      	movs	r4, #1
 800c31a:	2300      	movs	r3, #0
 800c31c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c31e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c320:	f04f 33ff 	mov.w	r3, #4294967295
 800c324:	9300      	str	r3, [sp, #0]
 800c326:	9307      	str	r3, [sp, #28]
 800c328:	2200      	movs	r2, #0
 800c32a:	2312      	movs	r3, #18
 800c32c:	e7d0      	b.n	800c2d0 <_dtoa_r+0x238>
 800c32e:	2301      	movs	r3, #1
 800c330:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c332:	e7f5      	b.n	800c320 <_dtoa_r+0x288>
 800c334:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c336:	9300      	str	r3, [sp, #0]
 800c338:	9307      	str	r3, [sp, #28]
 800c33a:	e7d7      	b.n	800c2ec <_dtoa_r+0x254>
 800c33c:	3101      	adds	r1, #1
 800c33e:	0052      	lsls	r2, r2, #1
 800c340:	e7d8      	b.n	800c2f4 <_dtoa_r+0x25c>
 800c342:	bf00      	nop
 800c344:	f3af 8000 	nop.w
 800c348:	636f4361 	.word	0x636f4361
 800c34c:	3fd287a7 	.word	0x3fd287a7
 800c350:	8b60c8b3 	.word	0x8b60c8b3
 800c354:	3fc68a28 	.word	0x3fc68a28
 800c358:	509f79fb 	.word	0x509f79fb
 800c35c:	3fd34413 	.word	0x3fd34413
 800c360:	0800fc1e 	.word	0x0800fc1e
 800c364:	0800fc35 	.word	0x0800fc35
 800c368:	7ff00000 	.word	0x7ff00000
 800c36c:	0800fbe9 	.word	0x0800fbe9
 800c370:	3ff80000 	.word	0x3ff80000
 800c374:	0800fd30 	.word	0x0800fd30
 800c378:	0800fc8d 	.word	0x0800fc8d
 800c37c:	0800fc1a 	.word	0x0800fc1a
 800c380:	0800fbe8 	.word	0x0800fbe8
 800c384:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c388:	6018      	str	r0, [r3, #0]
 800c38a:	9b07      	ldr	r3, [sp, #28]
 800c38c:	2b0e      	cmp	r3, #14
 800c38e:	f200 80a4 	bhi.w	800c4da <_dtoa_r+0x442>
 800c392:	2c00      	cmp	r4, #0
 800c394:	f000 80a1 	beq.w	800c4da <_dtoa_r+0x442>
 800c398:	2f00      	cmp	r7, #0
 800c39a:	dd33      	ble.n	800c404 <_dtoa_r+0x36c>
 800c39c:	4bad      	ldr	r3, [pc, #692]	@ (800c654 <_dtoa_r+0x5bc>)
 800c39e:	f007 020f 	and.w	r2, r7, #15
 800c3a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3a6:	ed93 7b00 	vldr	d7, [r3]
 800c3aa:	05f8      	lsls	r0, r7, #23
 800c3ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c3b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c3b4:	d516      	bpl.n	800c3e4 <_dtoa_r+0x34c>
 800c3b6:	4ba8      	ldr	r3, [pc, #672]	@ (800c658 <_dtoa_r+0x5c0>)
 800c3b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c3c0:	f7f4 fa6c 	bl	800089c <__aeabi_ddiv>
 800c3c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3c8:	f004 040f 	and.w	r4, r4, #15
 800c3cc:	2603      	movs	r6, #3
 800c3ce:	4da2      	ldr	r5, [pc, #648]	@ (800c658 <_dtoa_r+0x5c0>)
 800c3d0:	b954      	cbnz	r4, 800c3e8 <_dtoa_r+0x350>
 800c3d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3da:	f7f4 fa5f 	bl	800089c <__aeabi_ddiv>
 800c3de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3e2:	e028      	b.n	800c436 <_dtoa_r+0x39e>
 800c3e4:	2602      	movs	r6, #2
 800c3e6:	e7f2      	b.n	800c3ce <_dtoa_r+0x336>
 800c3e8:	07e1      	lsls	r1, r4, #31
 800c3ea:	d508      	bpl.n	800c3fe <_dtoa_r+0x366>
 800c3ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c3f4:	f7f4 f928 	bl	8000648 <__aeabi_dmul>
 800c3f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c3fc:	3601      	adds	r6, #1
 800c3fe:	1064      	asrs	r4, r4, #1
 800c400:	3508      	adds	r5, #8
 800c402:	e7e5      	b.n	800c3d0 <_dtoa_r+0x338>
 800c404:	f000 80d2 	beq.w	800c5ac <_dtoa_r+0x514>
 800c408:	427c      	negs	r4, r7
 800c40a:	4b92      	ldr	r3, [pc, #584]	@ (800c654 <_dtoa_r+0x5bc>)
 800c40c:	4d92      	ldr	r5, [pc, #584]	@ (800c658 <_dtoa_r+0x5c0>)
 800c40e:	f004 020f 	and.w	r2, r4, #15
 800c412:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c41e:	f7f4 f913 	bl	8000648 <__aeabi_dmul>
 800c422:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c426:	1124      	asrs	r4, r4, #4
 800c428:	2300      	movs	r3, #0
 800c42a:	2602      	movs	r6, #2
 800c42c:	2c00      	cmp	r4, #0
 800c42e:	f040 80b2 	bne.w	800c596 <_dtoa_r+0x4fe>
 800c432:	2b00      	cmp	r3, #0
 800c434:	d1d3      	bne.n	800c3de <_dtoa_r+0x346>
 800c436:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c438:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f000 80b7 	beq.w	800c5b0 <_dtoa_r+0x518>
 800c442:	4b86      	ldr	r3, [pc, #536]	@ (800c65c <_dtoa_r+0x5c4>)
 800c444:	2200      	movs	r2, #0
 800c446:	4620      	mov	r0, r4
 800c448:	4629      	mov	r1, r5
 800c44a:	f7f4 fb6f 	bl	8000b2c <__aeabi_dcmplt>
 800c44e:	2800      	cmp	r0, #0
 800c450:	f000 80ae 	beq.w	800c5b0 <_dtoa_r+0x518>
 800c454:	9b07      	ldr	r3, [sp, #28]
 800c456:	2b00      	cmp	r3, #0
 800c458:	f000 80aa 	beq.w	800c5b0 <_dtoa_r+0x518>
 800c45c:	9b00      	ldr	r3, [sp, #0]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	dd37      	ble.n	800c4d2 <_dtoa_r+0x43a>
 800c462:	1e7b      	subs	r3, r7, #1
 800c464:	9304      	str	r3, [sp, #16]
 800c466:	4620      	mov	r0, r4
 800c468:	4b7d      	ldr	r3, [pc, #500]	@ (800c660 <_dtoa_r+0x5c8>)
 800c46a:	2200      	movs	r2, #0
 800c46c:	4629      	mov	r1, r5
 800c46e:	f7f4 f8eb 	bl	8000648 <__aeabi_dmul>
 800c472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c476:	9c00      	ldr	r4, [sp, #0]
 800c478:	3601      	adds	r6, #1
 800c47a:	4630      	mov	r0, r6
 800c47c:	f7f4 f87a 	bl	8000574 <__aeabi_i2d>
 800c480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c484:	f7f4 f8e0 	bl	8000648 <__aeabi_dmul>
 800c488:	4b76      	ldr	r3, [pc, #472]	@ (800c664 <_dtoa_r+0x5cc>)
 800c48a:	2200      	movs	r2, #0
 800c48c:	f7f3 ff26 	bl	80002dc <__adddf3>
 800c490:	4605      	mov	r5, r0
 800c492:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c496:	2c00      	cmp	r4, #0
 800c498:	f040 808d 	bne.w	800c5b6 <_dtoa_r+0x51e>
 800c49c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4a0:	4b71      	ldr	r3, [pc, #452]	@ (800c668 <_dtoa_r+0x5d0>)
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f7f3 ff18 	bl	80002d8 <__aeabi_dsub>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c4b0:	462a      	mov	r2, r5
 800c4b2:	4633      	mov	r3, r6
 800c4b4:	f7f4 fb58 	bl	8000b68 <__aeabi_dcmpgt>
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	f040 828b 	bne.w	800c9d4 <_dtoa_r+0x93c>
 800c4be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4c2:	462a      	mov	r2, r5
 800c4c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c4c8:	f7f4 fb30 	bl	8000b2c <__aeabi_dcmplt>
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	f040 8128 	bne.w	800c722 <_dtoa_r+0x68a>
 800c4d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c4d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c4da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f2c0 815a 	blt.w	800c796 <_dtoa_r+0x6fe>
 800c4e2:	2f0e      	cmp	r7, #14
 800c4e4:	f300 8157 	bgt.w	800c796 <_dtoa_r+0x6fe>
 800c4e8:	4b5a      	ldr	r3, [pc, #360]	@ (800c654 <_dtoa_r+0x5bc>)
 800c4ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c4ee:	ed93 7b00 	vldr	d7, [r3]
 800c4f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	ed8d 7b00 	vstr	d7, [sp]
 800c4fa:	da03      	bge.n	800c504 <_dtoa_r+0x46c>
 800c4fc:	9b07      	ldr	r3, [sp, #28]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	f340 8101 	ble.w	800c706 <_dtoa_r+0x66e>
 800c504:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c508:	4656      	mov	r6, sl
 800c50a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c50e:	4620      	mov	r0, r4
 800c510:	4629      	mov	r1, r5
 800c512:	f7f4 f9c3 	bl	800089c <__aeabi_ddiv>
 800c516:	f7f4 fb47 	bl	8000ba8 <__aeabi_d2iz>
 800c51a:	4680      	mov	r8, r0
 800c51c:	f7f4 f82a 	bl	8000574 <__aeabi_i2d>
 800c520:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c524:	f7f4 f890 	bl	8000648 <__aeabi_dmul>
 800c528:	4602      	mov	r2, r0
 800c52a:	460b      	mov	r3, r1
 800c52c:	4620      	mov	r0, r4
 800c52e:	4629      	mov	r1, r5
 800c530:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c534:	f7f3 fed0 	bl	80002d8 <__aeabi_dsub>
 800c538:	f806 4b01 	strb.w	r4, [r6], #1
 800c53c:	9d07      	ldr	r5, [sp, #28]
 800c53e:	eba6 040a 	sub.w	r4, r6, sl
 800c542:	42a5      	cmp	r5, r4
 800c544:	4602      	mov	r2, r0
 800c546:	460b      	mov	r3, r1
 800c548:	f040 8117 	bne.w	800c77a <_dtoa_r+0x6e2>
 800c54c:	f7f3 fec6 	bl	80002dc <__adddf3>
 800c550:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c554:	4604      	mov	r4, r0
 800c556:	460d      	mov	r5, r1
 800c558:	f7f4 fb06 	bl	8000b68 <__aeabi_dcmpgt>
 800c55c:	2800      	cmp	r0, #0
 800c55e:	f040 80f9 	bne.w	800c754 <_dtoa_r+0x6bc>
 800c562:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c566:	4620      	mov	r0, r4
 800c568:	4629      	mov	r1, r5
 800c56a:	f7f4 fad5 	bl	8000b18 <__aeabi_dcmpeq>
 800c56e:	b118      	cbz	r0, 800c578 <_dtoa_r+0x4e0>
 800c570:	f018 0f01 	tst.w	r8, #1
 800c574:	f040 80ee 	bne.w	800c754 <_dtoa_r+0x6bc>
 800c578:	4649      	mov	r1, r9
 800c57a:	4658      	mov	r0, fp
 800c57c:	f000 fc90 	bl	800cea0 <_Bfree>
 800c580:	2300      	movs	r3, #0
 800c582:	7033      	strb	r3, [r6, #0]
 800c584:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c586:	3701      	adds	r7, #1
 800c588:	601f      	str	r7, [r3, #0]
 800c58a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f000 831d 	beq.w	800cbcc <_dtoa_r+0xb34>
 800c592:	601e      	str	r6, [r3, #0]
 800c594:	e31a      	b.n	800cbcc <_dtoa_r+0xb34>
 800c596:	07e2      	lsls	r2, r4, #31
 800c598:	d505      	bpl.n	800c5a6 <_dtoa_r+0x50e>
 800c59a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c59e:	f7f4 f853 	bl	8000648 <__aeabi_dmul>
 800c5a2:	3601      	adds	r6, #1
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	1064      	asrs	r4, r4, #1
 800c5a8:	3508      	adds	r5, #8
 800c5aa:	e73f      	b.n	800c42c <_dtoa_r+0x394>
 800c5ac:	2602      	movs	r6, #2
 800c5ae:	e742      	b.n	800c436 <_dtoa_r+0x39e>
 800c5b0:	9c07      	ldr	r4, [sp, #28]
 800c5b2:	9704      	str	r7, [sp, #16]
 800c5b4:	e761      	b.n	800c47a <_dtoa_r+0x3e2>
 800c5b6:	4b27      	ldr	r3, [pc, #156]	@ (800c654 <_dtoa_r+0x5bc>)
 800c5b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c5ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c5be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c5c2:	4454      	add	r4, sl
 800c5c4:	2900      	cmp	r1, #0
 800c5c6:	d053      	beq.n	800c670 <_dtoa_r+0x5d8>
 800c5c8:	4928      	ldr	r1, [pc, #160]	@ (800c66c <_dtoa_r+0x5d4>)
 800c5ca:	2000      	movs	r0, #0
 800c5cc:	f7f4 f966 	bl	800089c <__aeabi_ddiv>
 800c5d0:	4633      	mov	r3, r6
 800c5d2:	462a      	mov	r2, r5
 800c5d4:	f7f3 fe80 	bl	80002d8 <__aeabi_dsub>
 800c5d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c5dc:	4656      	mov	r6, sl
 800c5de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5e2:	f7f4 fae1 	bl	8000ba8 <__aeabi_d2iz>
 800c5e6:	4605      	mov	r5, r0
 800c5e8:	f7f3 ffc4 	bl	8000574 <__aeabi_i2d>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	460b      	mov	r3, r1
 800c5f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5f4:	f7f3 fe70 	bl	80002d8 <__aeabi_dsub>
 800c5f8:	3530      	adds	r5, #48	@ 0x30
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c602:	f806 5b01 	strb.w	r5, [r6], #1
 800c606:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c60a:	f7f4 fa8f 	bl	8000b2c <__aeabi_dcmplt>
 800c60e:	2800      	cmp	r0, #0
 800c610:	d171      	bne.n	800c6f6 <_dtoa_r+0x65e>
 800c612:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c616:	4911      	ldr	r1, [pc, #68]	@ (800c65c <_dtoa_r+0x5c4>)
 800c618:	2000      	movs	r0, #0
 800c61a:	f7f3 fe5d 	bl	80002d8 <__aeabi_dsub>
 800c61e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c622:	f7f4 fa83 	bl	8000b2c <__aeabi_dcmplt>
 800c626:	2800      	cmp	r0, #0
 800c628:	f040 8095 	bne.w	800c756 <_dtoa_r+0x6be>
 800c62c:	42a6      	cmp	r6, r4
 800c62e:	f43f af50 	beq.w	800c4d2 <_dtoa_r+0x43a>
 800c632:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c636:	4b0a      	ldr	r3, [pc, #40]	@ (800c660 <_dtoa_r+0x5c8>)
 800c638:	2200      	movs	r2, #0
 800c63a:	f7f4 f805 	bl	8000648 <__aeabi_dmul>
 800c63e:	4b08      	ldr	r3, [pc, #32]	@ (800c660 <_dtoa_r+0x5c8>)
 800c640:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c644:	2200      	movs	r2, #0
 800c646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c64a:	f7f3 fffd 	bl	8000648 <__aeabi_dmul>
 800c64e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c652:	e7c4      	b.n	800c5de <_dtoa_r+0x546>
 800c654:	0800fd30 	.word	0x0800fd30
 800c658:	0800fd08 	.word	0x0800fd08
 800c65c:	3ff00000 	.word	0x3ff00000
 800c660:	40240000 	.word	0x40240000
 800c664:	401c0000 	.word	0x401c0000
 800c668:	40140000 	.word	0x40140000
 800c66c:	3fe00000 	.word	0x3fe00000
 800c670:	4631      	mov	r1, r6
 800c672:	4628      	mov	r0, r5
 800c674:	f7f3 ffe8 	bl	8000648 <__aeabi_dmul>
 800c678:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c67c:	9415      	str	r4, [sp, #84]	@ 0x54
 800c67e:	4656      	mov	r6, sl
 800c680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c684:	f7f4 fa90 	bl	8000ba8 <__aeabi_d2iz>
 800c688:	4605      	mov	r5, r0
 800c68a:	f7f3 ff73 	bl	8000574 <__aeabi_i2d>
 800c68e:	4602      	mov	r2, r0
 800c690:	460b      	mov	r3, r1
 800c692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c696:	f7f3 fe1f 	bl	80002d8 <__aeabi_dsub>
 800c69a:	3530      	adds	r5, #48	@ 0x30
 800c69c:	f806 5b01 	strb.w	r5, [r6], #1
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	42a6      	cmp	r6, r4
 800c6a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c6aa:	f04f 0200 	mov.w	r2, #0
 800c6ae:	d124      	bne.n	800c6fa <_dtoa_r+0x662>
 800c6b0:	4bac      	ldr	r3, [pc, #688]	@ (800c964 <_dtoa_r+0x8cc>)
 800c6b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c6b6:	f7f3 fe11 	bl	80002dc <__adddf3>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	460b      	mov	r3, r1
 800c6be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6c2:	f7f4 fa51 	bl	8000b68 <__aeabi_dcmpgt>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	d145      	bne.n	800c756 <_dtoa_r+0x6be>
 800c6ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c6ce:	49a5      	ldr	r1, [pc, #660]	@ (800c964 <_dtoa_r+0x8cc>)
 800c6d0:	2000      	movs	r0, #0
 800c6d2:	f7f3 fe01 	bl	80002d8 <__aeabi_dsub>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	460b      	mov	r3, r1
 800c6da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6de:	f7f4 fa25 	bl	8000b2c <__aeabi_dcmplt>
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	f43f aef5 	beq.w	800c4d2 <_dtoa_r+0x43a>
 800c6e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c6ea:	1e73      	subs	r3, r6, #1
 800c6ec:	9315      	str	r3, [sp, #84]	@ 0x54
 800c6ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c6f2:	2b30      	cmp	r3, #48	@ 0x30
 800c6f4:	d0f8      	beq.n	800c6e8 <_dtoa_r+0x650>
 800c6f6:	9f04      	ldr	r7, [sp, #16]
 800c6f8:	e73e      	b.n	800c578 <_dtoa_r+0x4e0>
 800c6fa:	4b9b      	ldr	r3, [pc, #620]	@ (800c968 <_dtoa_r+0x8d0>)
 800c6fc:	f7f3 ffa4 	bl	8000648 <__aeabi_dmul>
 800c700:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c704:	e7bc      	b.n	800c680 <_dtoa_r+0x5e8>
 800c706:	d10c      	bne.n	800c722 <_dtoa_r+0x68a>
 800c708:	4b98      	ldr	r3, [pc, #608]	@ (800c96c <_dtoa_r+0x8d4>)
 800c70a:	2200      	movs	r2, #0
 800c70c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c710:	f7f3 ff9a 	bl	8000648 <__aeabi_dmul>
 800c714:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c718:	f7f4 fa1c 	bl	8000b54 <__aeabi_dcmpge>
 800c71c:	2800      	cmp	r0, #0
 800c71e:	f000 8157 	beq.w	800c9d0 <_dtoa_r+0x938>
 800c722:	2400      	movs	r4, #0
 800c724:	4625      	mov	r5, r4
 800c726:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c728:	43db      	mvns	r3, r3
 800c72a:	9304      	str	r3, [sp, #16]
 800c72c:	4656      	mov	r6, sl
 800c72e:	2700      	movs	r7, #0
 800c730:	4621      	mov	r1, r4
 800c732:	4658      	mov	r0, fp
 800c734:	f000 fbb4 	bl	800cea0 <_Bfree>
 800c738:	2d00      	cmp	r5, #0
 800c73a:	d0dc      	beq.n	800c6f6 <_dtoa_r+0x65e>
 800c73c:	b12f      	cbz	r7, 800c74a <_dtoa_r+0x6b2>
 800c73e:	42af      	cmp	r7, r5
 800c740:	d003      	beq.n	800c74a <_dtoa_r+0x6b2>
 800c742:	4639      	mov	r1, r7
 800c744:	4658      	mov	r0, fp
 800c746:	f000 fbab 	bl	800cea0 <_Bfree>
 800c74a:	4629      	mov	r1, r5
 800c74c:	4658      	mov	r0, fp
 800c74e:	f000 fba7 	bl	800cea0 <_Bfree>
 800c752:	e7d0      	b.n	800c6f6 <_dtoa_r+0x65e>
 800c754:	9704      	str	r7, [sp, #16]
 800c756:	4633      	mov	r3, r6
 800c758:	461e      	mov	r6, r3
 800c75a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c75e:	2a39      	cmp	r2, #57	@ 0x39
 800c760:	d107      	bne.n	800c772 <_dtoa_r+0x6da>
 800c762:	459a      	cmp	sl, r3
 800c764:	d1f8      	bne.n	800c758 <_dtoa_r+0x6c0>
 800c766:	9a04      	ldr	r2, [sp, #16]
 800c768:	3201      	adds	r2, #1
 800c76a:	9204      	str	r2, [sp, #16]
 800c76c:	2230      	movs	r2, #48	@ 0x30
 800c76e:	f88a 2000 	strb.w	r2, [sl]
 800c772:	781a      	ldrb	r2, [r3, #0]
 800c774:	3201      	adds	r2, #1
 800c776:	701a      	strb	r2, [r3, #0]
 800c778:	e7bd      	b.n	800c6f6 <_dtoa_r+0x65e>
 800c77a:	4b7b      	ldr	r3, [pc, #492]	@ (800c968 <_dtoa_r+0x8d0>)
 800c77c:	2200      	movs	r2, #0
 800c77e:	f7f3 ff63 	bl	8000648 <__aeabi_dmul>
 800c782:	2200      	movs	r2, #0
 800c784:	2300      	movs	r3, #0
 800c786:	4604      	mov	r4, r0
 800c788:	460d      	mov	r5, r1
 800c78a:	f7f4 f9c5 	bl	8000b18 <__aeabi_dcmpeq>
 800c78e:	2800      	cmp	r0, #0
 800c790:	f43f aebb 	beq.w	800c50a <_dtoa_r+0x472>
 800c794:	e6f0      	b.n	800c578 <_dtoa_r+0x4e0>
 800c796:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c798:	2a00      	cmp	r2, #0
 800c79a:	f000 80db 	beq.w	800c954 <_dtoa_r+0x8bc>
 800c79e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7a0:	2a01      	cmp	r2, #1
 800c7a2:	f300 80bf 	bgt.w	800c924 <_dtoa_r+0x88c>
 800c7a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c7a8:	2a00      	cmp	r2, #0
 800c7aa:	f000 80b7 	beq.w	800c91c <_dtoa_r+0x884>
 800c7ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c7b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c7b4:	4646      	mov	r6, r8
 800c7b6:	9a08      	ldr	r2, [sp, #32]
 800c7b8:	2101      	movs	r1, #1
 800c7ba:	441a      	add	r2, r3
 800c7bc:	4658      	mov	r0, fp
 800c7be:	4498      	add	r8, r3
 800c7c0:	9208      	str	r2, [sp, #32]
 800c7c2:	f000 fc6b 	bl	800d09c <__i2b>
 800c7c6:	4605      	mov	r5, r0
 800c7c8:	b15e      	cbz	r6, 800c7e2 <_dtoa_r+0x74a>
 800c7ca:	9b08      	ldr	r3, [sp, #32]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	dd08      	ble.n	800c7e2 <_dtoa_r+0x74a>
 800c7d0:	42b3      	cmp	r3, r6
 800c7d2:	9a08      	ldr	r2, [sp, #32]
 800c7d4:	bfa8      	it	ge
 800c7d6:	4633      	movge	r3, r6
 800c7d8:	eba8 0803 	sub.w	r8, r8, r3
 800c7dc:	1af6      	subs	r6, r6, r3
 800c7de:	1ad3      	subs	r3, r2, r3
 800c7e0:	9308      	str	r3, [sp, #32]
 800c7e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7e4:	b1f3      	cbz	r3, 800c824 <_dtoa_r+0x78c>
 800c7e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	f000 80b7 	beq.w	800c95c <_dtoa_r+0x8c4>
 800c7ee:	b18c      	cbz	r4, 800c814 <_dtoa_r+0x77c>
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	4622      	mov	r2, r4
 800c7f4:	4658      	mov	r0, fp
 800c7f6:	f000 fd11 	bl	800d21c <__pow5mult>
 800c7fa:	464a      	mov	r2, r9
 800c7fc:	4601      	mov	r1, r0
 800c7fe:	4605      	mov	r5, r0
 800c800:	4658      	mov	r0, fp
 800c802:	f000 fc61 	bl	800d0c8 <__multiply>
 800c806:	4649      	mov	r1, r9
 800c808:	9004      	str	r0, [sp, #16]
 800c80a:	4658      	mov	r0, fp
 800c80c:	f000 fb48 	bl	800cea0 <_Bfree>
 800c810:	9b04      	ldr	r3, [sp, #16]
 800c812:	4699      	mov	r9, r3
 800c814:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c816:	1b1a      	subs	r2, r3, r4
 800c818:	d004      	beq.n	800c824 <_dtoa_r+0x78c>
 800c81a:	4649      	mov	r1, r9
 800c81c:	4658      	mov	r0, fp
 800c81e:	f000 fcfd 	bl	800d21c <__pow5mult>
 800c822:	4681      	mov	r9, r0
 800c824:	2101      	movs	r1, #1
 800c826:	4658      	mov	r0, fp
 800c828:	f000 fc38 	bl	800d09c <__i2b>
 800c82c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c82e:	4604      	mov	r4, r0
 800c830:	2b00      	cmp	r3, #0
 800c832:	f000 81cf 	beq.w	800cbd4 <_dtoa_r+0xb3c>
 800c836:	461a      	mov	r2, r3
 800c838:	4601      	mov	r1, r0
 800c83a:	4658      	mov	r0, fp
 800c83c:	f000 fcee 	bl	800d21c <__pow5mult>
 800c840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c842:	2b01      	cmp	r3, #1
 800c844:	4604      	mov	r4, r0
 800c846:	f300 8095 	bgt.w	800c974 <_dtoa_r+0x8dc>
 800c84a:	9b02      	ldr	r3, [sp, #8]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	f040 8087 	bne.w	800c960 <_dtoa_r+0x8c8>
 800c852:	9b03      	ldr	r3, [sp, #12]
 800c854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c858:	2b00      	cmp	r3, #0
 800c85a:	f040 8089 	bne.w	800c970 <_dtoa_r+0x8d8>
 800c85e:	9b03      	ldr	r3, [sp, #12]
 800c860:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c864:	0d1b      	lsrs	r3, r3, #20
 800c866:	051b      	lsls	r3, r3, #20
 800c868:	b12b      	cbz	r3, 800c876 <_dtoa_r+0x7de>
 800c86a:	9b08      	ldr	r3, [sp, #32]
 800c86c:	3301      	adds	r3, #1
 800c86e:	9308      	str	r3, [sp, #32]
 800c870:	f108 0801 	add.w	r8, r8, #1
 800c874:	2301      	movs	r3, #1
 800c876:	930a      	str	r3, [sp, #40]	@ 0x28
 800c878:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	f000 81b0 	beq.w	800cbe0 <_dtoa_r+0xb48>
 800c880:	6923      	ldr	r3, [r4, #16]
 800c882:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c886:	6918      	ldr	r0, [r3, #16]
 800c888:	f000 fbbc 	bl	800d004 <__hi0bits>
 800c88c:	f1c0 0020 	rsb	r0, r0, #32
 800c890:	9b08      	ldr	r3, [sp, #32]
 800c892:	4418      	add	r0, r3
 800c894:	f010 001f 	ands.w	r0, r0, #31
 800c898:	d077      	beq.n	800c98a <_dtoa_r+0x8f2>
 800c89a:	f1c0 0320 	rsb	r3, r0, #32
 800c89e:	2b04      	cmp	r3, #4
 800c8a0:	dd6b      	ble.n	800c97a <_dtoa_r+0x8e2>
 800c8a2:	9b08      	ldr	r3, [sp, #32]
 800c8a4:	f1c0 001c 	rsb	r0, r0, #28
 800c8a8:	4403      	add	r3, r0
 800c8aa:	4480      	add	r8, r0
 800c8ac:	4406      	add	r6, r0
 800c8ae:	9308      	str	r3, [sp, #32]
 800c8b0:	f1b8 0f00 	cmp.w	r8, #0
 800c8b4:	dd05      	ble.n	800c8c2 <_dtoa_r+0x82a>
 800c8b6:	4649      	mov	r1, r9
 800c8b8:	4642      	mov	r2, r8
 800c8ba:	4658      	mov	r0, fp
 800c8bc:	f000 fd08 	bl	800d2d0 <__lshift>
 800c8c0:	4681      	mov	r9, r0
 800c8c2:	9b08      	ldr	r3, [sp, #32]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	dd05      	ble.n	800c8d4 <_dtoa_r+0x83c>
 800c8c8:	4621      	mov	r1, r4
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	4658      	mov	r0, fp
 800c8ce:	f000 fcff 	bl	800d2d0 <__lshift>
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d059      	beq.n	800c98e <_dtoa_r+0x8f6>
 800c8da:	4621      	mov	r1, r4
 800c8dc:	4648      	mov	r0, r9
 800c8de:	f000 fd63 	bl	800d3a8 <__mcmp>
 800c8e2:	2800      	cmp	r0, #0
 800c8e4:	da53      	bge.n	800c98e <_dtoa_r+0x8f6>
 800c8e6:	1e7b      	subs	r3, r7, #1
 800c8e8:	9304      	str	r3, [sp, #16]
 800c8ea:	4649      	mov	r1, r9
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	220a      	movs	r2, #10
 800c8f0:	4658      	mov	r0, fp
 800c8f2:	f000 faf7 	bl	800cee4 <__multadd>
 800c8f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8f8:	4681      	mov	r9, r0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	f000 8172 	beq.w	800cbe4 <_dtoa_r+0xb4c>
 800c900:	2300      	movs	r3, #0
 800c902:	4629      	mov	r1, r5
 800c904:	220a      	movs	r2, #10
 800c906:	4658      	mov	r0, fp
 800c908:	f000 faec 	bl	800cee4 <__multadd>
 800c90c:	9b00      	ldr	r3, [sp, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	4605      	mov	r5, r0
 800c912:	dc67      	bgt.n	800c9e4 <_dtoa_r+0x94c>
 800c914:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c916:	2b02      	cmp	r3, #2
 800c918:	dc41      	bgt.n	800c99e <_dtoa_r+0x906>
 800c91a:	e063      	b.n	800c9e4 <_dtoa_r+0x94c>
 800c91c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c91e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c922:	e746      	b.n	800c7b2 <_dtoa_r+0x71a>
 800c924:	9b07      	ldr	r3, [sp, #28]
 800c926:	1e5c      	subs	r4, r3, #1
 800c928:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c92a:	42a3      	cmp	r3, r4
 800c92c:	bfbf      	itttt	lt
 800c92e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c930:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c932:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c934:	1ae3      	sublt	r3, r4, r3
 800c936:	bfb4      	ite	lt
 800c938:	18d2      	addlt	r2, r2, r3
 800c93a:	1b1c      	subge	r4, r3, r4
 800c93c:	9b07      	ldr	r3, [sp, #28]
 800c93e:	bfbc      	itt	lt
 800c940:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c942:	2400      	movlt	r4, #0
 800c944:	2b00      	cmp	r3, #0
 800c946:	bfb5      	itete	lt
 800c948:	eba8 0603 	sublt.w	r6, r8, r3
 800c94c:	9b07      	ldrge	r3, [sp, #28]
 800c94e:	2300      	movlt	r3, #0
 800c950:	4646      	movge	r6, r8
 800c952:	e730      	b.n	800c7b6 <_dtoa_r+0x71e>
 800c954:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c956:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c958:	4646      	mov	r6, r8
 800c95a:	e735      	b.n	800c7c8 <_dtoa_r+0x730>
 800c95c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c95e:	e75c      	b.n	800c81a <_dtoa_r+0x782>
 800c960:	2300      	movs	r3, #0
 800c962:	e788      	b.n	800c876 <_dtoa_r+0x7de>
 800c964:	3fe00000 	.word	0x3fe00000
 800c968:	40240000 	.word	0x40240000
 800c96c:	40140000 	.word	0x40140000
 800c970:	9b02      	ldr	r3, [sp, #8]
 800c972:	e780      	b.n	800c876 <_dtoa_r+0x7de>
 800c974:	2300      	movs	r3, #0
 800c976:	930a      	str	r3, [sp, #40]	@ 0x28
 800c978:	e782      	b.n	800c880 <_dtoa_r+0x7e8>
 800c97a:	d099      	beq.n	800c8b0 <_dtoa_r+0x818>
 800c97c:	9a08      	ldr	r2, [sp, #32]
 800c97e:	331c      	adds	r3, #28
 800c980:	441a      	add	r2, r3
 800c982:	4498      	add	r8, r3
 800c984:	441e      	add	r6, r3
 800c986:	9208      	str	r2, [sp, #32]
 800c988:	e792      	b.n	800c8b0 <_dtoa_r+0x818>
 800c98a:	4603      	mov	r3, r0
 800c98c:	e7f6      	b.n	800c97c <_dtoa_r+0x8e4>
 800c98e:	9b07      	ldr	r3, [sp, #28]
 800c990:	9704      	str	r7, [sp, #16]
 800c992:	2b00      	cmp	r3, #0
 800c994:	dc20      	bgt.n	800c9d8 <_dtoa_r+0x940>
 800c996:	9300      	str	r3, [sp, #0]
 800c998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c99a:	2b02      	cmp	r3, #2
 800c99c:	dd1e      	ble.n	800c9dc <_dtoa_r+0x944>
 800c99e:	9b00      	ldr	r3, [sp, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	f47f aec0 	bne.w	800c726 <_dtoa_r+0x68e>
 800c9a6:	4621      	mov	r1, r4
 800c9a8:	2205      	movs	r2, #5
 800c9aa:	4658      	mov	r0, fp
 800c9ac:	f000 fa9a 	bl	800cee4 <__multadd>
 800c9b0:	4601      	mov	r1, r0
 800c9b2:	4604      	mov	r4, r0
 800c9b4:	4648      	mov	r0, r9
 800c9b6:	f000 fcf7 	bl	800d3a8 <__mcmp>
 800c9ba:	2800      	cmp	r0, #0
 800c9bc:	f77f aeb3 	ble.w	800c726 <_dtoa_r+0x68e>
 800c9c0:	4656      	mov	r6, sl
 800c9c2:	2331      	movs	r3, #49	@ 0x31
 800c9c4:	f806 3b01 	strb.w	r3, [r6], #1
 800c9c8:	9b04      	ldr	r3, [sp, #16]
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	9304      	str	r3, [sp, #16]
 800c9ce:	e6ae      	b.n	800c72e <_dtoa_r+0x696>
 800c9d0:	9c07      	ldr	r4, [sp, #28]
 800c9d2:	9704      	str	r7, [sp, #16]
 800c9d4:	4625      	mov	r5, r4
 800c9d6:	e7f3      	b.n	800c9c0 <_dtoa_r+0x928>
 800c9d8:	9b07      	ldr	r3, [sp, #28]
 800c9da:	9300      	str	r3, [sp, #0]
 800c9dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	f000 8104 	beq.w	800cbec <_dtoa_r+0xb54>
 800c9e4:	2e00      	cmp	r6, #0
 800c9e6:	dd05      	ble.n	800c9f4 <_dtoa_r+0x95c>
 800c9e8:	4629      	mov	r1, r5
 800c9ea:	4632      	mov	r2, r6
 800c9ec:	4658      	mov	r0, fp
 800c9ee:	f000 fc6f 	bl	800d2d0 <__lshift>
 800c9f2:	4605      	mov	r5, r0
 800c9f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d05a      	beq.n	800cab0 <_dtoa_r+0xa18>
 800c9fa:	6869      	ldr	r1, [r5, #4]
 800c9fc:	4658      	mov	r0, fp
 800c9fe:	f000 fa0f 	bl	800ce20 <_Balloc>
 800ca02:	4606      	mov	r6, r0
 800ca04:	b928      	cbnz	r0, 800ca12 <_dtoa_r+0x97a>
 800ca06:	4b84      	ldr	r3, [pc, #528]	@ (800cc18 <_dtoa_r+0xb80>)
 800ca08:	4602      	mov	r2, r0
 800ca0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ca0e:	f7ff bb5a 	b.w	800c0c6 <_dtoa_r+0x2e>
 800ca12:	692a      	ldr	r2, [r5, #16]
 800ca14:	3202      	adds	r2, #2
 800ca16:	0092      	lsls	r2, r2, #2
 800ca18:	f105 010c 	add.w	r1, r5, #12
 800ca1c:	300c      	adds	r0, #12
 800ca1e:	f7ff fa9e 	bl	800bf5e <memcpy>
 800ca22:	2201      	movs	r2, #1
 800ca24:	4631      	mov	r1, r6
 800ca26:	4658      	mov	r0, fp
 800ca28:	f000 fc52 	bl	800d2d0 <__lshift>
 800ca2c:	f10a 0301 	add.w	r3, sl, #1
 800ca30:	9307      	str	r3, [sp, #28]
 800ca32:	9b00      	ldr	r3, [sp, #0]
 800ca34:	4453      	add	r3, sl
 800ca36:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca38:	9b02      	ldr	r3, [sp, #8]
 800ca3a:	f003 0301 	and.w	r3, r3, #1
 800ca3e:	462f      	mov	r7, r5
 800ca40:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca42:	4605      	mov	r5, r0
 800ca44:	9b07      	ldr	r3, [sp, #28]
 800ca46:	4621      	mov	r1, r4
 800ca48:	3b01      	subs	r3, #1
 800ca4a:	4648      	mov	r0, r9
 800ca4c:	9300      	str	r3, [sp, #0]
 800ca4e:	f7ff fa9b 	bl	800bf88 <quorem>
 800ca52:	4639      	mov	r1, r7
 800ca54:	9002      	str	r0, [sp, #8]
 800ca56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ca5a:	4648      	mov	r0, r9
 800ca5c:	f000 fca4 	bl	800d3a8 <__mcmp>
 800ca60:	462a      	mov	r2, r5
 800ca62:	9008      	str	r0, [sp, #32]
 800ca64:	4621      	mov	r1, r4
 800ca66:	4658      	mov	r0, fp
 800ca68:	f000 fcba 	bl	800d3e0 <__mdiff>
 800ca6c:	68c2      	ldr	r2, [r0, #12]
 800ca6e:	4606      	mov	r6, r0
 800ca70:	bb02      	cbnz	r2, 800cab4 <_dtoa_r+0xa1c>
 800ca72:	4601      	mov	r1, r0
 800ca74:	4648      	mov	r0, r9
 800ca76:	f000 fc97 	bl	800d3a8 <__mcmp>
 800ca7a:	4602      	mov	r2, r0
 800ca7c:	4631      	mov	r1, r6
 800ca7e:	4658      	mov	r0, fp
 800ca80:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca82:	f000 fa0d 	bl	800cea0 <_Bfree>
 800ca86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca8a:	9e07      	ldr	r6, [sp, #28]
 800ca8c:	ea43 0102 	orr.w	r1, r3, r2
 800ca90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca92:	4319      	orrs	r1, r3
 800ca94:	d110      	bne.n	800cab8 <_dtoa_r+0xa20>
 800ca96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ca9a:	d029      	beq.n	800caf0 <_dtoa_r+0xa58>
 800ca9c:	9b08      	ldr	r3, [sp, #32]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	dd02      	ble.n	800caa8 <_dtoa_r+0xa10>
 800caa2:	9b02      	ldr	r3, [sp, #8]
 800caa4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800caa8:	9b00      	ldr	r3, [sp, #0]
 800caaa:	f883 8000 	strb.w	r8, [r3]
 800caae:	e63f      	b.n	800c730 <_dtoa_r+0x698>
 800cab0:	4628      	mov	r0, r5
 800cab2:	e7bb      	b.n	800ca2c <_dtoa_r+0x994>
 800cab4:	2201      	movs	r2, #1
 800cab6:	e7e1      	b.n	800ca7c <_dtoa_r+0x9e4>
 800cab8:	9b08      	ldr	r3, [sp, #32]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	db04      	blt.n	800cac8 <_dtoa_r+0xa30>
 800cabe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cac0:	430b      	orrs	r3, r1
 800cac2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cac4:	430b      	orrs	r3, r1
 800cac6:	d120      	bne.n	800cb0a <_dtoa_r+0xa72>
 800cac8:	2a00      	cmp	r2, #0
 800caca:	dded      	ble.n	800caa8 <_dtoa_r+0xa10>
 800cacc:	4649      	mov	r1, r9
 800cace:	2201      	movs	r2, #1
 800cad0:	4658      	mov	r0, fp
 800cad2:	f000 fbfd 	bl	800d2d0 <__lshift>
 800cad6:	4621      	mov	r1, r4
 800cad8:	4681      	mov	r9, r0
 800cada:	f000 fc65 	bl	800d3a8 <__mcmp>
 800cade:	2800      	cmp	r0, #0
 800cae0:	dc03      	bgt.n	800caea <_dtoa_r+0xa52>
 800cae2:	d1e1      	bne.n	800caa8 <_dtoa_r+0xa10>
 800cae4:	f018 0f01 	tst.w	r8, #1
 800cae8:	d0de      	beq.n	800caa8 <_dtoa_r+0xa10>
 800caea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800caee:	d1d8      	bne.n	800caa2 <_dtoa_r+0xa0a>
 800caf0:	9a00      	ldr	r2, [sp, #0]
 800caf2:	2339      	movs	r3, #57	@ 0x39
 800caf4:	7013      	strb	r3, [r2, #0]
 800caf6:	4633      	mov	r3, r6
 800caf8:	461e      	mov	r6, r3
 800cafa:	3b01      	subs	r3, #1
 800cafc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cb00:	2a39      	cmp	r2, #57	@ 0x39
 800cb02:	d052      	beq.n	800cbaa <_dtoa_r+0xb12>
 800cb04:	3201      	adds	r2, #1
 800cb06:	701a      	strb	r2, [r3, #0]
 800cb08:	e612      	b.n	800c730 <_dtoa_r+0x698>
 800cb0a:	2a00      	cmp	r2, #0
 800cb0c:	dd07      	ble.n	800cb1e <_dtoa_r+0xa86>
 800cb0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cb12:	d0ed      	beq.n	800caf0 <_dtoa_r+0xa58>
 800cb14:	9a00      	ldr	r2, [sp, #0]
 800cb16:	f108 0301 	add.w	r3, r8, #1
 800cb1a:	7013      	strb	r3, [r2, #0]
 800cb1c:	e608      	b.n	800c730 <_dtoa_r+0x698>
 800cb1e:	9b07      	ldr	r3, [sp, #28]
 800cb20:	9a07      	ldr	r2, [sp, #28]
 800cb22:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cb26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d028      	beq.n	800cb7e <_dtoa_r+0xae6>
 800cb2c:	4649      	mov	r1, r9
 800cb2e:	2300      	movs	r3, #0
 800cb30:	220a      	movs	r2, #10
 800cb32:	4658      	mov	r0, fp
 800cb34:	f000 f9d6 	bl	800cee4 <__multadd>
 800cb38:	42af      	cmp	r7, r5
 800cb3a:	4681      	mov	r9, r0
 800cb3c:	f04f 0300 	mov.w	r3, #0
 800cb40:	f04f 020a 	mov.w	r2, #10
 800cb44:	4639      	mov	r1, r7
 800cb46:	4658      	mov	r0, fp
 800cb48:	d107      	bne.n	800cb5a <_dtoa_r+0xac2>
 800cb4a:	f000 f9cb 	bl	800cee4 <__multadd>
 800cb4e:	4607      	mov	r7, r0
 800cb50:	4605      	mov	r5, r0
 800cb52:	9b07      	ldr	r3, [sp, #28]
 800cb54:	3301      	adds	r3, #1
 800cb56:	9307      	str	r3, [sp, #28]
 800cb58:	e774      	b.n	800ca44 <_dtoa_r+0x9ac>
 800cb5a:	f000 f9c3 	bl	800cee4 <__multadd>
 800cb5e:	4629      	mov	r1, r5
 800cb60:	4607      	mov	r7, r0
 800cb62:	2300      	movs	r3, #0
 800cb64:	220a      	movs	r2, #10
 800cb66:	4658      	mov	r0, fp
 800cb68:	f000 f9bc 	bl	800cee4 <__multadd>
 800cb6c:	4605      	mov	r5, r0
 800cb6e:	e7f0      	b.n	800cb52 <_dtoa_r+0xaba>
 800cb70:	9b00      	ldr	r3, [sp, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	bfcc      	ite	gt
 800cb76:	461e      	movgt	r6, r3
 800cb78:	2601      	movle	r6, #1
 800cb7a:	4456      	add	r6, sl
 800cb7c:	2700      	movs	r7, #0
 800cb7e:	4649      	mov	r1, r9
 800cb80:	2201      	movs	r2, #1
 800cb82:	4658      	mov	r0, fp
 800cb84:	f000 fba4 	bl	800d2d0 <__lshift>
 800cb88:	4621      	mov	r1, r4
 800cb8a:	4681      	mov	r9, r0
 800cb8c:	f000 fc0c 	bl	800d3a8 <__mcmp>
 800cb90:	2800      	cmp	r0, #0
 800cb92:	dcb0      	bgt.n	800caf6 <_dtoa_r+0xa5e>
 800cb94:	d102      	bne.n	800cb9c <_dtoa_r+0xb04>
 800cb96:	f018 0f01 	tst.w	r8, #1
 800cb9a:	d1ac      	bne.n	800caf6 <_dtoa_r+0xa5e>
 800cb9c:	4633      	mov	r3, r6
 800cb9e:	461e      	mov	r6, r3
 800cba0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cba4:	2a30      	cmp	r2, #48	@ 0x30
 800cba6:	d0fa      	beq.n	800cb9e <_dtoa_r+0xb06>
 800cba8:	e5c2      	b.n	800c730 <_dtoa_r+0x698>
 800cbaa:	459a      	cmp	sl, r3
 800cbac:	d1a4      	bne.n	800caf8 <_dtoa_r+0xa60>
 800cbae:	9b04      	ldr	r3, [sp, #16]
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	9304      	str	r3, [sp, #16]
 800cbb4:	2331      	movs	r3, #49	@ 0x31
 800cbb6:	f88a 3000 	strb.w	r3, [sl]
 800cbba:	e5b9      	b.n	800c730 <_dtoa_r+0x698>
 800cbbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cbbe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cc1c <_dtoa_r+0xb84>
 800cbc2:	b11b      	cbz	r3, 800cbcc <_dtoa_r+0xb34>
 800cbc4:	f10a 0308 	add.w	r3, sl, #8
 800cbc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cbca:	6013      	str	r3, [r2, #0]
 800cbcc:	4650      	mov	r0, sl
 800cbce:	b019      	add	sp, #100	@ 0x64
 800cbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbd6:	2b01      	cmp	r3, #1
 800cbd8:	f77f ae37 	ble.w	800c84a <_dtoa_r+0x7b2>
 800cbdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbde:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbe0:	2001      	movs	r0, #1
 800cbe2:	e655      	b.n	800c890 <_dtoa_r+0x7f8>
 800cbe4:	9b00      	ldr	r3, [sp, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	f77f aed6 	ble.w	800c998 <_dtoa_r+0x900>
 800cbec:	4656      	mov	r6, sl
 800cbee:	4621      	mov	r1, r4
 800cbf0:	4648      	mov	r0, r9
 800cbf2:	f7ff f9c9 	bl	800bf88 <quorem>
 800cbf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cbfa:	f806 8b01 	strb.w	r8, [r6], #1
 800cbfe:	9b00      	ldr	r3, [sp, #0]
 800cc00:	eba6 020a 	sub.w	r2, r6, sl
 800cc04:	4293      	cmp	r3, r2
 800cc06:	ddb3      	ble.n	800cb70 <_dtoa_r+0xad8>
 800cc08:	4649      	mov	r1, r9
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	220a      	movs	r2, #10
 800cc0e:	4658      	mov	r0, fp
 800cc10:	f000 f968 	bl	800cee4 <__multadd>
 800cc14:	4681      	mov	r9, r0
 800cc16:	e7ea      	b.n	800cbee <_dtoa_r+0xb56>
 800cc18:	0800fc8d 	.word	0x0800fc8d
 800cc1c:	0800fc11 	.word	0x0800fc11

0800cc20 <_free_r>:
 800cc20:	b538      	push	{r3, r4, r5, lr}
 800cc22:	4605      	mov	r5, r0
 800cc24:	2900      	cmp	r1, #0
 800cc26:	d041      	beq.n	800ccac <_free_r+0x8c>
 800cc28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc2c:	1f0c      	subs	r4, r1, #4
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	bfb8      	it	lt
 800cc32:	18e4      	addlt	r4, r4, r3
 800cc34:	f000 f8e8 	bl	800ce08 <__malloc_lock>
 800cc38:	4a1d      	ldr	r2, [pc, #116]	@ (800ccb0 <_free_r+0x90>)
 800cc3a:	6813      	ldr	r3, [r2, #0]
 800cc3c:	b933      	cbnz	r3, 800cc4c <_free_r+0x2c>
 800cc3e:	6063      	str	r3, [r4, #4]
 800cc40:	6014      	str	r4, [r2, #0]
 800cc42:	4628      	mov	r0, r5
 800cc44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc48:	f000 b8e4 	b.w	800ce14 <__malloc_unlock>
 800cc4c:	42a3      	cmp	r3, r4
 800cc4e:	d908      	bls.n	800cc62 <_free_r+0x42>
 800cc50:	6820      	ldr	r0, [r4, #0]
 800cc52:	1821      	adds	r1, r4, r0
 800cc54:	428b      	cmp	r3, r1
 800cc56:	bf01      	itttt	eq
 800cc58:	6819      	ldreq	r1, [r3, #0]
 800cc5a:	685b      	ldreq	r3, [r3, #4]
 800cc5c:	1809      	addeq	r1, r1, r0
 800cc5e:	6021      	streq	r1, [r4, #0]
 800cc60:	e7ed      	b.n	800cc3e <_free_r+0x1e>
 800cc62:	461a      	mov	r2, r3
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	b10b      	cbz	r3, 800cc6c <_free_r+0x4c>
 800cc68:	42a3      	cmp	r3, r4
 800cc6a:	d9fa      	bls.n	800cc62 <_free_r+0x42>
 800cc6c:	6811      	ldr	r1, [r2, #0]
 800cc6e:	1850      	adds	r0, r2, r1
 800cc70:	42a0      	cmp	r0, r4
 800cc72:	d10b      	bne.n	800cc8c <_free_r+0x6c>
 800cc74:	6820      	ldr	r0, [r4, #0]
 800cc76:	4401      	add	r1, r0
 800cc78:	1850      	adds	r0, r2, r1
 800cc7a:	4283      	cmp	r3, r0
 800cc7c:	6011      	str	r1, [r2, #0]
 800cc7e:	d1e0      	bne.n	800cc42 <_free_r+0x22>
 800cc80:	6818      	ldr	r0, [r3, #0]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	6053      	str	r3, [r2, #4]
 800cc86:	4408      	add	r0, r1
 800cc88:	6010      	str	r0, [r2, #0]
 800cc8a:	e7da      	b.n	800cc42 <_free_r+0x22>
 800cc8c:	d902      	bls.n	800cc94 <_free_r+0x74>
 800cc8e:	230c      	movs	r3, #12
 800cc90:	602b      	str	r3, [r5, #0]
 800cc92:	e7d6      	b.n	800cc42 <_free_r+0x22>
 800cc94:	6820      	ldr	r0, [r4, #0]
 800cc96:	1821      	adds	r1, r4, r0
 800cc98:	428b      	cmp	r3, r1
 800cc9a:	bf04      	itt	eq
 800cc9c:	6819      	ldreq	r1, [r3, #0]
 800cc9e:	685b      	ldreq	r3, [r3, #4]
 800cca0:	6063      	str	r3, [r4, #4]
 800cca2:	bf04      	itt	eq
 800cca4:	1809      	addeq	r1, r1, r0
 800cca6:	6021      	streq	r1, [r4, #0]
 800cca8:	6054      	str	r4, [r2, #4]
 800ccaa:	e7ca      	b.n	800cc42 <_free_r+0x22>
 800ccac:	bd38      	pop	{r3, r4, r5, pc}
 800ccae:	bf00      	nop
 800ccb0:	20002398 	.word	0x20002398

0800ccb4 <malloc>:
 800ccb4:	4b02      	ldr	r3, [pc, #8]	@ (800ccc0 <malloc+0xc>)
 800ccb6:	4601      	mov	r1, r0
 800ccb8:	6818      	ldr	r0, [r3, #0]
 800ccba:	f000 b825 	b.w	800cd08 <_malloc_r>
 800ccbe:	bf00      	nop
 800ccc0:	200001e8 	.word	0x200001e8

0800ccc4 <sbrk_aligned>:
 800ccc4:	b570      	push	{r4, r5, r6, lr}
 800ccc6:	4e0f      	ldr	r6, [pc, #60]	@ (800cd04 <sbrk_aligned+0x40>)
 800ccc8:	460c      	mov	r4, r1
 800ccca:	6831      	ldr	r1, [r6, #0]
 800cccc:	4605      	mov	r5, r0
 800ccce:	b911      	cbnz	r1, 800ccd6 <sbrk_aligned+0x12>
 800ccd0:	f001 ffd2 	bl	800ec78 <_sbrk_r>
 800ccd4:	6030      	str	r0, [r6, #0]
 800ccd6:	4621      	mov	r1, r4
 800ccd8:	4628      	mov	r0, r5
 800ccda:	f001 ffcd 	bl	800ec78 <_sbrk_r>
 800ccde:	1c43      	adds	r3, r0, #1
 800cce0:	d103      	bne.n	800ccea <sbrk_aligned+0x26>
 800cce2:	f04f 34ff 	mov.w	r4, #4294967295
 800cce6:	4620      	mov	r0, r4
 800cce8:	bd70      	pop	{r4, r5, r6, pc}
 800ccea:	1cc4      	adds	r4, r0, #3
 800ccec:	f024 0403 	bic.w	r4, r4, #3
 800ccf0:	42a0      	cmp	r0, r4
 800ccf2:	d0f8      	beq.n	800cce6 <sbrk_aligned+0x22>
 800ccf4:	1a21      	subs	r1, r4, r0
 800ccf6:	4628      	mov	r0, r5
 800ccf8:	f001 ffbe 	bl	800ec78 <_sbrk_r>
 800ccfc:	3001      	adds	r0, #1
 800ccfe:	d1f2      	bne.n	800cce6 <sbrk_aligned+0x22>
 800cd00:	e7ef      	b.n	800cce2 <sbrk_aligned+0x1e>
 800cd02:	bf00      	nop
 800cd04:	20002394 	.word	0x20002394

0800cd08 <_malloc_r>:
 800cd08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd0c:	1ccd      	adds	r5, r1, #3
 800cd0e:	f025 0503 	bic.w	r5, r5, #3
 800cd12:	3508      	adds	r5, #8
 800cd14:	2d0c      	cmp	r5, #12
 800cd16:	bf38      	it	cc
 800cd18:	250c      	movcc	r5, #12
 800cd1a:	2d00      	cmp	r5, #0
 800cd1c:	4606      	mov	r6, r0
 800cd1e:	db01      	blt.n	800cd24 <_malloc_r+0x1c>
 800cd20:	42a9      	cmp	r1, r5
 800cd22:	d904      	bls.n	800cd2e <_malloc_r+0x26>
 800cd24:	230c      	movs	r3, #12
 800cd26:	6033      	str	r3, [r6, #0]
 800cd28:	2000      	movs	r0, #0
 800cd2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ce04 <_malloc_r+0xfc>
 800cd32:	f000 f869 	bl	800ce08 <__malloc_lock>
 800cd36:	f8d8 3000 	ldr.w	r3, [r8]
 800cd3a:	461c      	mov	r4, r3
 800cd3c:	bb44      	cbnz	r4, 800cd90 <_malloc_r+0x88>
 800cd3e:	4629      	mov	r1, r5
 800cd40:	4630      	mov	r0, r6
 800cd42:	f7ff ffbf 	bl	800ccc4 <sbrk_aligned>
 800cd46:	1c43      	adds	r3, r0, #1
 800cd48:	4604      	mov	r4, r0
 800cd4a:	d158      	bne.n	800cdfe <_malloc_r+0xf6>
 800cd4c:	f8d8 4000 	ldr.w	r4, [r8]
 800cd50:	4627      	mov	r7, r4
 800cd52:	2f00      	cmp	r7, #0
 800cd54:	d143      	bne.n	800cdde <_malloc_r+0xd6>
 800cd56:	2c00      	cmp	r4, #0
 800cd58:	d04b      	beq.n	800cdf2 <_malloc_r+0xea>
 800cd5a:	6823      	ldr	r3, [r4, #0]
 800cd5c:	4639      	mov	r1, r7
 800cd5e:	4630      	mov	r0, r6
 800cd60:	eb04 0903 	add.w	r9, r4, r3
 800cd64:	f001 ff88 	bl	800ec78 <_sbrk_r>
 800cd68:	4581      	cmp	r9, r0
 800cd6a:	d142      	bne.n	800cdf2 <_malloc_r+0xea>
 800cd6c:	6821      	ldr	r1, [r4, #0]
 800cd6e:	1a6d      	subs	r5, r5, r1
 800cd70:	4629      	mov	r1, r5
 800cd72:	4630      	mov	r0, r6
 800cd74:	f7ff ffa6 	bl	800ccc4 <sbrk_aligned>
 800cd78:	3001      	adds	r0, #1
 800cd7a:	d03a      	beq.n	800cdf2 <_malloc_r+0xea>
 800cd7c:	6823      	ldr	r3, [r4, #0]
 800cd7e:	442b      	add	r3, r5
 800cd80:	6023      	str	r3, [r4, #0]
 800cd82:	f8d8 3000 	ldr.w	r3, [r8]
 800cd86:	685a      	ldr	r2, [r3, #4]
 800cd88:	bb62      	cbnz	r2, 800cde4 <_malloc_r+0xdc>
 800cd8a:	f8c8 7000 	str.w	r7, [r8]
 800cd8e:	e00f      	b.n	800cdb0 <_malloc_r+0xa8>
 800cd90:	6822      	ldr	r2, [r4, #0]
 800cd92:	1b52      	subs	r2, r2, r5
 800cd94:	d420      	bmi.n	800cdd8 <_malloc_r+0xd0>
 800cd96:	2a0b      	cmp	r2, #11
 800cd98:	d917      	bls.n	800cdca <_malloc_r+0xc2>
 800cd9a:	1961      	adds	r1, r4, r5
 800cd9c:	42a3      	cmp	r3, r4
 800cd9e:	6025      	str	r5, [r4, #0]
 800cda0:	bf18      	it	ne
 800cda2:	6059      	strne	r1, [r3, #4]
 800cda4:	6863      	ldr	r3, [r4, #4]
 800cda6:	bf08      	it	eq
 800cda8:	f8c8 1000 	streq.w	r1, [r8]
 800cdac:	5162      	str	r2, [r4, r5]
 800cdae:	604b      	str	r3, [r1, #4]
 800cdb0:	4630      	mov	r0, r6
 800cdb2:	f000 f82f 	bl	800ce14 <__malloc_unlock>
 800cdb6:	f104 000b 	add.w	r0, r4, #11
 800cdba:	1d23      	adds	r3, r4, #4
 800cdbc:	f020 0007 	bic.w	r0, r0, #7
 800cdc0:	1ac2      	subs	r2, r0, r3
 800cdc2:	bf1c      	itt	ne
 800cdc4:	1a1b      	subne	r3, r3, r0
 800cdc6:	50a3      	strne	r3, [r4, r2]
 800cdc8:	e7af      	b.n	800cd2a <_malloc_r+0x22>
 800cdca:	6862      	ldr	r2, [r4, #4]
 800cdcc:	42a3      	cmp	r3, r4
 800cdce:	bf0c      	ite	eq
 800cdd0:	f8c8 2000 	streq.w	r2, [r8]
 800cdd4:	605a      	strne	r2, [r3, #4]
 800cdd6:	e7eb      	b.n	800cdb0 <_malloc_r+0xa8>
 800cdd8:	4623      	mov	r3, r4
 800cdda:	6864      	ldr	r4, [r4, #4]
 800cddc:	e7ae      	b.n	800cd3c <_malloc_r+0x34>
 800cdde:	463c      	mov	r4, r7
 800cde0:	687f      	ldr	r7, [r7, #4]
 800cde2:	e7b6      	b.n	800cd52 <_malloc_r+0x4a>
 800cde4:	461a      	mov	r2, r3
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	42a3      	cmp	r3, r4
 800cdea:	d1fb      	bne.n	800cde4 <_malloc_r+0xdc>
 800cdec:	2300      	movs	r3, #0
 800cdee:	6053      	str	r3, [r2, #4]
 800cdf0:	e7de      	b.n	800cdb0 <_malloc_r+0xa8>
 800cdf2:	230c      	movs	r3, #12
 800cdf4:	6033      	str	r3, [r6, #0]
 800cdf6:	4630      	mov	r0, r6
 800cdf8:	f000 f80c 	bl	800ce14 <__malloc_unlock>
 800cdfc:	e794      	b.n	800cd28 <_malloc_r+0x20>
 800cdfe:	6005      	str	r5, [r0, #0]
 800ce00:	e7d6      	b.n	800cdb0 <_malloc_r+0xa8>
 800ce02:	bf00      	nop
 800ce04:	20002398 	.word	0x20002398

0800ce08 <__malloc_lock>:
 800ce08:	4801      	ldr	r0, [pc, #4]	@ (800ce10 <__malloc_lock+0x8>)
 800ce0a:	f7ff b8a6 	b.w	800bf5a <__retarget_lock_acquire_recursive>
 800ce0e:	bf00      	nop
 800ce10:	20002390 	.word	0x20002390

0800ce14 <__malloc_unlock>:
 800ce14:	4801      	ldr	r0, [pc, #4]	@ (800ce1c <__malloc_unlock+0x8>)
 800ce16:	f7ff b8a1 	b.w	800bf5c <__retarget_lock_release_recursive>
 800ce1a:	bf00      	nop
 800ce1c:	20002390 	.word	0x20002390

0800ce20 <_Balloc>:
 800ce20:	b570      	push	{r4, r5, r6, lr}
 800ce22:	69c6      	ldr	r6, [r0, #28]
 800ce24:	4604      	mov	r4, r0
 800ce26:	460d      	mov	r5, r1
 800ce28:	b976      	cbnz	r6, 800ce48 <_Balloc+0x28>
 800ce2a:	2010      	movs	r0, #16
 800ce2c:	f7ff ff42 	bl	800ccb4 <malloc>
 800ce30:	4602      	mov	r2, r0
 800ce32:	61e0      	str	r0, [r4, #28]
 800ce34:	b920      	cbnz	r0, 800ce40 <_Balloc+0x20>
 800ce36:	4b18      	ldr	r3, [pc, #96]	@ (800ce98 <_Balloc+0x78>)
 800ce38:	4818      	ldr	r0, [pc, #96]	@ (800ce9c <_Balloc+0x7c>)
 800ce3a:	216b      	movs	r1, #107	@ 0x6b
 800ce3c:	f001 ff34 	bl	800eca8 <__assert_func>
 800ce40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce44:	6006      	str	r6, [r0, #0]
 800ce46:	60c6      	str	r6, [r0, #12]
 800ce48:	69e6      	ldr	r6, [r4, #28]
 800ce4a:	68f3      	ldr	r3, [r6, #12]
 800ce4c:	b183      	cbz	r3, 800ce70 <_Balloc+0x50>
 800ce4e:	69e3      	ldr	r3, [r4, #28]
 800ce50:	68db      	ldr	r3, [r3, #12]
 800ce52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce56:	b9b8      	cbnz	r0, 800ce88 <_Balloc+0x68>
 800ce58:	2101      	movs	r1, #1
 800ce5a:	fa01 f605 	lsl.w	r6, r1, r5
 800ce5e:	1d72      	adds	r2, r6, #5
 800ce60:	0092      	lsls	r2, r2, #2
 800ce62:	4620      	mov	r0, r4
 800ce64:	f001 ff3e 	bl	800ece4 <_calloc_r>
 800ce68:	b160      	cbz	r0, 800ce84 <_Balloc+0x64>
 800ce6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce6e:	e00e      	b.n	800ce8e <_Balloc+0x6e>
 800ce70:	2221      	movs	r2, #33	@ 0x21
 800ce72:	2104      	movs	r1, #4
 800ce74:	4620      	mov	r0, r4
 800ce76:	f001 ff35 	bl	800ece4 <_calloc_r>
 800ce7a:	69e3      	ldr	r3, [r4, #28]
 800ce7c:	60f0      	str	r0, [r6, #12]
 800ce7e:	68db      	ldr	r3, [r3, #12]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d1e4      	bne.n	800ce4e <_Balloc+0x2e>
 800ce84:	2000      	movs	r0, #0
 800ce86:	bd70      	pop	{r4, r5, r6, pc}
 800ce88:	6802      	ldr	r2, [r0, #0]
 800ce8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce8e:	2300      	movs	r3, #0
 800ce90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce94:	e7f7      	b.n	800ce86 <_Balloc+0x66>
 800ce96:	bf00      	nop
 800ce98:	0800fc1e 	.word	0x0800fc1e
 800ce9c:	0800fc9e 	.word	0x0800fc9e

0800cea0 <_Bfree>:
 800cea0:	b570      	push	{r4, r5, r6, lr}
 800cea2:	69c6      	ldr	r6, [r0, #28]
 800cea4:	4605      	mov	r5, r0
 800cea6:	460c      	mov	r4, r1
 800cea8:	b976      	cbnz	r6, 800cec8 <_Bfree+0x28>
 800ceaa:	2010      	movs	r0, #16
 800ceac:	f7ff ff02 	bl	800ccb4 <malloc>
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	61e8      	str	r0, [r5, #28]
 800ceb4:	b920      	cbnz	r0, 800cec0 <_Bfree+0x20>
 800ceb6:	4b09      	ldr	r3, [pc, #36]	@ (800cedc <_Bfree+0x3c>)
 800ceb8:	4809      	ldr	r0, [pc, #36]	@ (800cee0 <_Bfree+0x40>)
 800ceba:	218f      	movs	r1, #143	@ 0x8f
 800cebc:	f001 fef4 	bl	800eca8 <__assert_func>
 800cec0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cec4:	6006      	str	r6, [r0, #0]
 800cec6:	60c6      	str	r6, [r0, #12]
 800cec8:	b13c      	cbz	r4, 800ceda <_Bfree+0x3a>
 800ceca:	69eb      	ldr	r3, [r5, #28]
 800cecc:	6862      	ldr	r2, [r4, #4]
 800cece:	68db      	ldr	r3, [r3, #12]
 800ced0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ced4:	6021      	str	r1, [r4, #0]
 800ced6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ceda:	bd70      	pop	{r4, r5, r6, pc}
 800cedc:	0800fc1e 	.word	0x0800fc1e
 800cee0:	0800fc9e 	.word	0x0800fc9e

0800cee4 <__multadd>:
 800cee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cee8:	690d      	ldr	r5, [r1, #16]
 800ceea:	4607      	mov	r7, r0
 800ceec:	460c      	mov	r4, r1
 800ceee:	461e      	mov	r6, r3
 800cef0:	f101 0c14 	add.w	ip, r1, #20
 800cef4:	2000      	movs	r0, #0
 800cef6:	f8dc 3000 	ldr.w	r3, [ip]
 800cefa:	b299      	uxth	r1, r3
 800cefc:	fb02 6101 	mla	r1, r2, r1, r6
 800cf00:	0c1e      	lsrs	r6, r3, #16
 800cf02:	0c0b      	lsrs	r3, r1, #16
 800cf04:	fb02 3306 	mla	r3, r2, r6, r3
 800cf08:	b289      	uxth	r1, r1
 800cf0a:	3001      	adds	r0, #1
 800cf0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf10:	4285      	cmp	r5, r0
 800cf12:	f84c 1b04 	str.w	r1, [ip], #4
 800cf16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cf1a:	dcec      	bgt.n	800cef6 <__multadd+0x12>
 800cf1c:	b30e      	cbz	r6, 800cf62 <__multadd+0x7e>
 800cf1e:	68a3      	ldr	r3, [r4, #8]
 800cf20:	42ab      	cmp	r3, r5
 800cf22:	dc19      	bgt.n	800cf58 <__multadd+0x74>
 800cf24:	6861      	ldr	r1, [r4, #4]
 800cf26:	4638      	mov	r0, r7
 800cf28:	3101      	adds	r1, #1
 800cf2a:	f7ff ff79 	bl	800ce20 <_Balloc>
 800cf2e:	4680      	mov	r8, r0
 800cf30:	b928      	cbnz	r0, 800cf3e <__multadd+0x5a>
 800cf32:	4602      	mov	r2, r0
 800cf34:	4b0c      	ldr	r3, [pc, #48]	@ (800cf68 <__multadd+0x84>)
 800cf36:	480d      	ldr	r0, [pc, #52]	@ (800cf6c <__multadd+0x88>)
 800cf38:	21ba      	movs	r1, #186	@ 0xba
 800cf3a:	f001 feb5 	bl	800eca8 <__assert_func>
 800cf3e:	6922      	ldr	r2, [r4, #16]
 800cf40:	3202      	adds	r2, #2
 800cf42:	f104 010c 	add.w	r1, r4, #12
 800cf46:	0092      	lsls	r2, r2, #2
 800cf48:	300c      	adds	r0, #12
 800cf4a:	f7ff f808 	bl	800bf5e <memcpy>
 800cf4e:	4621      	mov	r1, r4
 800cf50:	4638      	mov	r0, r7
 800cf52:	f7ff ffa5 	bl	800cea0 <_Bfree>
 800cf56:	4644      	mov	r4, r8
 800cf58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf5c:	3501      	adds	r5, #1
 800cf5e:	615e      	str	r6, [r3, #20]
 800cf60:	6125      	str	r5, [r4, #16]
 800cf62:	4620      	mov	r0, r4
 800cf64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf68:	0800fc8d 	.word	0x0800fc8d
 800cf6c:	0800fc9e 	.word	0x0800fc9e

0800cf70 <__s2b>:
 800cf70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf74:	460c      	mov	r4, r1
 800cf76:	4615      	mov	r5, r2
 800cf78:	461f      	mov	r7, r3
 800cf7a:	2209      	movs	r2, #9
 800cf7c:	3308      	adds	r3, #8
 800cf7e:	4606      	mov	r6, r0
 800cf80:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf84:	2100      	movs	r1, #0
 800cf86:	2201      	movs	r2, #1
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	db09      	blt.n	800cfa0 <__s2b+0x30>
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	f7ff ff47 	bl	800ce20 <_Balloc>
 800cf92:	b940      	cbnz	r0, 800cfa6 <__s2b+0x36>
 800cf94:	4602      	mov	r2, r0
 800cf96:	4b19      	ldr	r3, [pc, #100]	@ (800cffc <__s2b+0x8c>)
 800cf98:	4819      	ldr	r0, [pc, #100]	@ (800d000 <__s2b+0x90>)
 800cf9a:	21d3      	movs	r1, #211	@ 0xd3
 800cf9c:	f001 fe84 	bl	800eca8 <__assert_func>
 800cfa0:	0052      	lsls	r2, r2, #1
 800cfa2:	3101      	adds	r1, #1
 800cfa4:	e7f0      	b.n	800cf88 <__s2b+0x18>
 800cfa6:	9b08      	ldr	r3, [sp, #32]
 800cfa8:	6143      	str	r3, [r0, #20]
 800cfaa:	2d09      	cmp	r5, #9
 800cfac:	f04f 0301 	mov.w	r3, #1
 800cfb0:	6103      	str	r3, [r0, #16]
 800cfb2:	dd16      	ble.n	800cfe2 <__s2b+0x72>
 800cfb4:	f104 0909 	add.w	r9, r4, #9
 800cfb8:	46c8      	mov	r8, r9
 800cfba:	442c      	add	r4, r5
 800cfbc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cfc0:	4601      	mov	r1, r0
 800cfc2:	3b30      	subs	r3, #48	@ 0x30
 800cfc4:	220a      	movs	r2, #10
 800cfc6:	4630      	mov	r0, r6
 800cfc8:	f7ff ff8c 	bl	800cee4 <__multadd>
 800cfcc:	45a0      	cmp	r8, r4
 800cfce:	d1f5      	bne.n	800cfbc <__s2b+0x4c>
 800cfd0:	f1a5 0408 	sub.w	r4, r5, #8
 800cfd4:	444c      	add	r4, r9
 800cfd6:	1b2d      	subs	r5, r5, r4
 800cfd8:	1963      	adds	r3, r4, r5
 800cfda:	42bb      	cmp	r3, r7
 800cfdc:	db04      	blt.n	800cfe8 <__s2b+0x78>
 800cfde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfe2:	340a      	adds	r4, #10
 800cfe4:	2509      	movs	r5, #9
 800cfe6:	e7f6      	b.n	800cfd6 <__s2b+0x66>
 800cfe8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cfec:	4601      	mov	r1, r0
 800cfee:	3b30      	subs	r3, #48	@ 0x30
 800cff0:	220a      	movs	r2, #10
 800cff2:	4630      	mov	r0, r6
 800cff4:	f7ff ff76 	bl	800cee4 <__multadd>
 800cff8:	e7ee      	b.n	800cfd8 <__s2b+0x68>
 800cffa:	bf00      	nop
 800cffc:	0800fc8d 	.word	0x0800fc8d
 800d000:	0800fc9e 	.word	0x0800fc9e

0800d004 <__hi0bits>:
 800d004:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d008:	4603      	mov	r3, r0
 800d00a:	bf36      	itet	cc
 800d00c:	0403      	lslcc	r3, r0, #16
 800d00e:	2000      	movcs	r0, #0
 800d010:	2010      	movcc	r0, #16
 800d012:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d016:	bf3c      	itt	cc
 800d018:	021b      	lslcc	r3, r3, #8
 800d01a:	3008      	addcc	r0, #8
 800d01c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d020:	bf3c      	itt	cc
 800d022:	011b      	lslcc	r3, r3, #4
 800d024:	3004      	addcc	r0, #4
 800d026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d02a:	bf3c      	itt	cc
 800d02c:	009b      	lslcc	r3, r3, #2
 800d02e:	3002      	addcc	r0, #2
 800d030:	2b00      	cmp	r3, #0
 800d032:	db05      	blt.n	800d040 <__hi0bits+0x3c>
 800d034:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d038:	f100 0001 	add.w	r0, r0, #1
 800d03c:	bf08      	it	eq
 800d03e:	2020      	moveq	r0, #32
 800d040:	4770      	bx	lr

0800d042 <__lo0bits>:
 800d042:	6803      	ldr	r3, [r0, #0]
 800d044:	4602      	mov	r2, r0
 800d046:	f013 0007 	ands.w	r0, r3, #7
 800d04a:	d00b      	beq.n	800d064 <__lo0bits+0x22>
 800d04c:	07d9      	lsls	r1, r3, #31
 800d04e:	d421      	bmi.n	800d094 <__lo0bits+0x52>
 800d050:	0798      	lsls	r0, r3, #30
 800d052:	bf49      	itett	mi
 800d054:	085b      	lsrmi	r3, r3, #1
 800d056:	089b      	lsrpl	r3, r3, #2
 800d058:	2001      	movmi	r0, #1
 800d05a:	6013      	strmi	r3, [r2, #0]
 800d05c:	bf5c      	itt	pl
 800d05e:	6013      	strpl	r3, [r2, #0]
 800d060:	2002      	movpl	r0, #2
 800d062:	4770      	bx	lr
 800d064:	b299      	uxth	r1, r3
 800d066:	b909      	cbnz	r1, 800d06c <__lo0bits+0x2a>
 800d068:	0c1b      	lsrs	r3, r3, #16
 800d06a:	2010      	movs	r0, #16
 800d06c:	b2d9      	uxtb	r1, r3
 800d06e:	b909      	cbnz	r1, 800d074 <__lo0bits+0x32>
 800d070:	3008      	adds	r0, #8
 800d072:	0a1b      	lsrs	r3, r3, #8
 800d074:	0719      	lsls	r1, r3, #28
 800d076:	bf04      	itt	eq
 800d078:	091b      	lsreq	r3, r3, #4
 800d07a:	3004      	addeq	r0, #4
 800d07c:	0799      	lsls	r1, r3, #30
 800d07e:	bf04      	itt	eq
 800d080:	089b      	lsreq	r3, r3, #2
 800d082:	3002      	addeq	r0, #2
 800d084:	07d9      	lsls	r1, r3, #31
 800d086:	d403      	bmi.n	800d090 <__lo0bits+0x4e>
 800d088:	085b      	lsrs	r3, r3, #1
 800d08a:	f100 0001 	add.w	r0, r0, #1
 800d08e:	d003      	beq.n	800d098 <__lo0bits+0x56>
 800d090:	6013      	str	r3, [r2, #0]
 800d092:	4770      	bx	lr
 800d094:	2000      	movs	r0, #0
 800d096:	4770      	bx	lr
 800d098:	2020      	movs	r0, #32
 800d09a:	4770      	bx	lr

0800d09c <__i2b>:
 800d09c:	b510      	push	{r4, lr}
 800d09e:	460c      	mov	r4, r1
 800d0a0:	2101      	movs	r1, #1
 800d0a2:	f7ff febd 	bl	800ce20 <_Balloc>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	b928      	cbnz	r0, 800d0b6 <__i2b+0x1a>
 800d0aa:	4b05      	ldr	r3, [pc, #20]	@ (800d0c0 <__i2b+0x24>)
 800d0ac:	4805      	ldr	r0, [pc, #20]	@ (800d0c4 <__i2b+0x28>)
 800d0ae:	f240 1145 	movw	r1, #325	@ 0x145
 800d0b2:	f001 fdf9 	bl	800eca8 <__assert_func>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	6144      	str	r4, [r0, #20]
 800d0ba:	6103      	str	r3, [r0, #16]
 800d0bc:	bd10      	pop	{r4, pc}
 800d0be:	bf00      	nop
 800d0c0:	0800fc8d 	.word	0x0800fc8d
 800d0c4:	0800fc9e 	.word	0x0800fc9e

0800d0c8 <__multiply>:
 800d0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0cc:	4614      	mov	r4, r2
 800d0ce:	690a      	ldr	r2, [r1, #16]
 800d0d0:	6923      	ldr	r3, [r4, #16]
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	bfa8      	it	ge
 800d0d6:	4623      	movge	r3, r4
 800d0d8:	460f      	mov	r7, r1
 800d0da:	bfa4      	itt	ge
 800d0dc:	460c      	movge	r4, r1
 800d0de:	461f      	movge	r7, r3
 800d0e0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d0e4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d0e8:	68a3      	ldr	r3, [r4, #8]
 800d0ea:	6861      	ldr	r1, [r4, #4]
 800d0ec:	eb0a 0609 	add.w	r6, sl, r9
 800d0f0:	42b3      	cmp	r3, r6
 800d0f2:	b085      	sub	sp, #20
 800d0f4:	bfb8      	it	lt
 800d0f6:	3101      	addlt	r1, #1
 800d0f8:	f7ff fe92 	bl	800ce20 <_Balloc>
 800d0fc:	b930      	cbnz	r0, 800d10c <__multiply+0x44>
 800d0fe:	4602      	mov	r2, r0
 800d100:	4b44      	ldr	r3, [pc, #272]	@ (800d214 <__multiply+0x14c>)
 800d102:	4845      	ldr	r0, [pc, #276]	@ (800d218 <__multiply+0x150>)
 800d104:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d108:	f001 fdce 	bl	800eca8 <__assert_func>
 800d10c:	f100 0514 	add.w	r5, r0, #20
 800d110:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d114:	462b      	mov	r3, r5
 800d116:	2200      	movs	r2, #0
 800d118:	4543      	cmp	r3, r8
 800d11a:	d321      	bcc.n	800d160 <__multiply+0x98>
 800d11c:	f107 0114 	add.w	r1, r7, #20
 800d120:	f104 0214 	add.w	r2, r4, #20
 800d124:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d128:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d12c:	9302      	str	r3, [sp, #8]
 800d12e:	1b13      	subs	r3, r2, r4
 800d130:	3b15      	subs	r3, #21
 800d132:	f023 0303 	bic.w	r3, r3, #3
 800d136:	3304      	adds	r3, #4
 800d138:	f104 0715 	add.w	r7, r4, #21
 800d13c:	42ba      	cmp	r2, r7
 800d13e:	bf38      	it	cc
 800d140:	2304      	movcc	r3, #4
 800d142:	9301      	str	r3, [sp, #4]
 800d144:	9b02      	ldr	r3, [sp, #8]
 800d146:	9103      	str	r1, [sp, #12]
 800d148:	428b      	cmp	r3, r1
 800d14a:	d80c      	bhi.n	800d166 <__multiply+0x9e>
 800d14c:	2e00      	cmp	r6, #0
 800d14e:	dd03      	ble.n	800d158 <__multiply+0x90>
 800d150:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d154:	2b00      	cmp	r3, #0
 800d156:	d05b      	beq.n	800d210 <__multiply+0x148>
 800d158:	6106      	str	r6, [r0, #16]
 800d15a:	b005      	add	sp, #20
 800d15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d160:	f843 2b04 	str.w	r2, [r3], #4
 800d164:	e7d8      	b.n	800d118 <__multiply+0x50>
 800d166:	f8b1 a000 	ldrh.w	sl, [r1]
 800d16a:	f1ba 0f00 	cmp.w	sl, #0
 800d16e:	d024      	beq.n	800d1ba <__multiply+0xf2>
 800d170:	f104 0e14 	add.w	lr, r4, #20
 800d174:	46a9      	mov	r9, r5
 800d176:	f04f 0c00 	mov.w	ip, #0
 800d17a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d17e:	f8d9 3000 	ldr.w	r3, [r9]
 800d182:	fa1f fb87 	uxth.w	fp, r7
 800d186:	b29b      	uxth	r3, r3
 800d188:	fb0a 330b 	mla	r3, sl, fp, r3
 800d18c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d190:	f8d9 7000 	ldr.w	r7, [r9]
 800d194:	4463      	add	r3, ip
 800d196:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d19a:	fb0a c70b 	mla	r7, sl, fp, ip
 800d19e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d1a8:	4572      	cmp	r2, lr
 800d1aa:	f849 3b04 	str.w	r3, [r9], #4
 800d1ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d1b2:	d8e2      	bhi.n	800d17a <__multiply+0xb2>
 800d1b4:	9b01      	ldr	r3, [sp, #4]
 800d1b6:	f845 c003 	str.w	ip, [r5, r3]
 800d1ba:	9b03      	ldr	r3, [sp, #12]
 800d1bc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d1c0:	3104      	adds	r1, #4
 800d1c2:	f1b9 0f00 	cmp.w	r9, #0
 800d1c6:	d021      	beq.n	800d20c <__multiply+0x144>
 800d1c8:	682b      	ldr	r3, [r5, #0]
 800d1ca:	f104 0c14 	add.w	ip, r4, #20
 800d1ce:	46ae      	mov	lr, r5
 800d1d0:	f04f 0a00 	mov.w	sl, #0
 800d1d4:	f8bc b000 	ldrh.w	fp, [ip]
 800d1d8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d1dc:	fb09 770b 	mla	r7, r9, fp, r7
 800d1e0:	4457      	add	r7, sl
 800d1e2:	b29b      	uxth	r3, r3
 800d1e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d1e8:	f84e 3b04 	str.w	r3, [lr], #4
 800d1ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d1f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d1f4:	f8be 3000 	ldrh.w	r3, [lr]
 800d1f8:	fb09 330a 	mla	r3, r9, sl, r3
 800d1fc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d200:	4562      	cmp	r2, ip
 800d202:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d206:	d8e5      	bhi.n	800d1d4 <__multiply+0x10c>
 800d208:	9f01      	ldr	r7, [sp, #4]
 800d20a:	51eb      	str	r3, [r5, r7]
 800d20c:	3504      	adds	r5, #4
 800d20e:	e799      	b.n	800d144 <__multiply+0x7c>
 800d210:	3e01      	subs	r6, #1
 800d212:	e79b      	b.n	800d14c <__multiply+0x84>
 800d214:	0800fc8d 	.word	0x0800fc8d
 800d218:	0800fc9e 	.word	0x0800fc9e

0800d21c <__pow5mult>:
 800d21c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d220:	4615      	mov	r5, r2
 800d222:	f012 0203 	ands.w	r2, r2, #3
 800d226:	4607      	mov	r7, r0
 800d228:	460e      	mov	r6, r1
 800d22a:	d007      	beq.n	800d23c <__pow5mult+0x20>
 800d22c:	4c25      	ldr	r4, [pc, #148]	@ (800d2c4 <__pow5mult+0xa8>)
 800d22e:	3a01      	subs	r2, #1
 800d230:	2300      	movs	r3, #0
 800d232:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d236:	f7ff fe55 	bl	800cee4 <__multadd>
 800d23a:	4606      	mov	r6, r0
 800d23c:	10ad      	asrs	r5, r5, #2
 800d23e:	d03d      	beq.n	800d2bc <__pow5mult+0xa0>
 800d240:	69fc      	ldr	r4, [r7, #28]
 800d242:	b97c      	cbnz	r4, 800d264 <__pow5mult+0x48>
 800d244:	2010      	movs	r0, #16
 800d246:	f7ff fd35 	bl	800ccb4 <malloc>
 800d24a:	4602      	mov	r2, r0
 800d24c:	61f8      	str	r0, [r7, #28]
 800d24e:	b928      	cbnz	r0, 800d25c <__pow5mult+0x40>
 800d250:	4b1d      	ldr	r3, [pc, #116]	@ (800d2c8 <__pow5mult+0xac>)
 800d252:	481e      	ldr	r0, [pc, #120]	@ (800d2cc <__pow5mult+0xb0>)
 800d254:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d258:	f001 fd26 	bl	800eca8 <__assert_func>
 800d25c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d260:	6004      	str	r4, [r0, #0]
 800d262:	60c4      	str	r4, [r0, #12]
 800d264:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d268:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d26c:	b94c      	cbnz	r4, 800d282 <__pow5mult+0x66>
 800d26e:	f240 2171 	movw	r1, #625	@ 0x271
 800d272:	4638      	mov	r0, r7
 800d274:	f7ff ff12 	bl	800d09c <__i2b>
 800d278:	2300      	movs	r3, #0
 800d27a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d27e:	4604      	mov	r4, r0
 800d280:	6003      	str	r3, [r0, #0]
 800d282:	f04f 0900 	mov.w	r9, #0
 800d286:	07eb      	lsls	r3, r5, #31
 800d288:	d50a      	bpl.n	800d2a0 <__pow5mult+0x84>
 800d28a:	4631      	mov	r1, r6
 800d28c:	4622      	mov	r2, r4
 800d28e:	4638      	mov	r0, r7
 800d290:	f7ff ff1a 	bl	800d0c8 <__multiply>
 800d294:	4631      	mov	r1, r6
 800d296:	4680      	mov	r8, r0
 800d298:	4638      	mov	r0, r7
 800d29a:	f7ff fe01 	bl	800cea0 <_Bfree>
 800d29e:	4646      	mov	r6, r8
 800d2a0:	106d      	asrs	r5, r5, #1
 800d2a2:	d00b      	beq.n	800d2bc <__pow5mult+0xa0>
 800d2a4:	6820      	ldr	r0, [r4, #0]
 800d2a6:	b938      	cbnz	r0, 800d2b8 <__pow5mult+0x9c>
 800d2a8:	4622      	mov	r2, r4
 800d2aa:	4621      	mov	r1, r4
 800d2ac:	4638      	mov	r0, r7
 800d2ae:	f7ff ff0b 	bl	800d0c8 <__multiply>
 800d2b2:	6020      	str	r0, [r4, #0]
 800d2b4:	f8c0 9000 	str.w	r9, [r0]
 800d2b8:	4604      	mov	r4, r0
 800d2ba:	e7e4      	b.n	800d286 <__pow5mult+0x6a>
 800d2bc:	4630      	mov	r0, r6
 800d2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2c2:	bf00      	nop
 800d2c4:	0800fcf8 	.word	0x0800fcf8
 800d2c8:	0800fc1e 	.word	0x0800fc1e
 800d2cc:	0800fc9e 	.word	0x0800fc9e

0800d2d0 <__lshift>:
 800d2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2d4:	460c      	mov	r4, r1
 800d2d6:	6849      	ldr	r1, [r1, #4]
 800d2d8:	6923      	ldr	r3, [r4, #16]
 800d2da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d2de:	68a3      	ldr	r3, [r4, #8]
 800d2e0:	4607      	mov	r7, r0
 800d2e2:	4691      	mov	r9, r2
 800d2e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d2e8:	f108 0601 	add.w	r6, r8, #1
 800d2ec:	42b3      	cmp	r3, r6
 800d2ee:	db0b      	blt.n	800d308 <__lshift+0x38>
 800d2f0:	4638      	mov	r0, r7
 800d2f2:	f7ff fd95 	bl	800ce20 <_Balloc>
 800d2f6:	4605      	mov	r5, r0
 800d2f8:	b948      	cbnz	r0, 800d30e <__lshift+0x3e>
 800d2fa:	4602      	mov	r2, r0
 800d2fc:	4b28      	ldr	r3, [pc, #160]	@ (800d3a0 <__lshift+0xd0>)
 800d2fe:	4829      	ldr	r0, [pc, #164]	@ (800d3a4 <__lshift+0xd4>)
 800d300:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d304:	f001 fcd0 	bl	800eca8 <__assert_func>
 800d308:	3101      	adds	r1, #1
 800d30a:	005b      	lsls	r3, r3, #1
 800d30c:	e7ee      	b.n	800d2ec <__lshift+0x1c>
 800d30e:	2300      	movs	r3, #0
 800d310:	f100 0114 	add.w	r1, r0, #20
 800d314:	f100 0210 	add.w	r2, r0, #16
 800d318:	4618      	mov	r0, r3
 800d31a:	4553      	cmp	r3, sl
 800d31c:	db33      	blt.n	800d386 <__lshift+0xb6>
 800d31e:	6920      	ldr	r0, [r4, #16]
 800d320:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d324:	f104 0314 	add.w	r3, r4, #20
 800d328:	f019 091f 	ands.w	r9, r9, #31
 800d32c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d330:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d334:	d02b      	beq.n	800d38e <__lshift+0xbe>
 800d336:	f1c9 0e20 	rsb	lr, r9, #32
 800d33a:	468a      	mov	sl, r1
 800d33c:	2200      	movs	r2, #0
 800d33e:	6818      	ldr	r0, [r3, #0]
 800d340:	fa00 f009 	lsl.w	r0, r0, r9
 800d344:	4310      	orrs	r0, r2
 800d346:	f84a 0b04 	str.w	r0, [sl], #4
 800d34a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d34e:	459c      	cmp	ip, r3
 800d350:	fa22 f20e 	lsr.w	r2, r2, lr
 800d354:	d8f3      	bhi.n	800d33e <__lshift+0x6e>
 800d356:	ebac 0304 	sub.w	r3, ip, r4
 800d35a:	3b15      	subs	r3, #21
 800d35c:	f023 0303 	bic.w	r3, r3, #3
 800d360:	3304      	adds	r3, #4
 800d362:	f104 0015 	add.w	r0, r4, #21
 800d366:	4584      	cmp	ip, r0
 800d368:	bf38      	it	cc
 800d36a:	2304      	movcc	r3, #4
 800d36c:	50ca      	str	r2, [r1, r3]
 800d36e:	b10a      	cbz	r2, 800d374 <__lshift+0xa4>
 800d370:	f108 0602 	add.w	r6, r8, #2
 800d374:	3e01      	subs	r6, #1
 800d376:	4638      	mov	r0, r7
 800d378:	612e      	str	r6, [r5, #16]
 800d37a:	4621      	mov	r1, r4
 800d37c:	f7ff fd90 	bl	800cea0 <_Bfree>
 800d380:	4628      	mov	r0, r5
 800d382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d386:	f842 0f04 	str.w	r0, [r2, #4]!
 800d38a:	3301      	adds	r3, #1
 800d38c:	e7c5      	b.n	800d31a <__lshift+0x4a>
 800d38e:	3904      	subs	r1, #4
 800d390:	f853 2b04 	ldr.w	r2, [r3], #4
 800d394:	f841 2f04 	str.w	r2, [r1, #4]!
 800d398:	459c      	cmp	ip, r3
 800d39a:	d8f9      	bhi.n	800d390 <__lshift+0xc0>
 800d39c:	e7ea      	b.n	800d374 <__lshift+0xa4>
 800d39e:	bf00      	nop
 800d3a0:	0800fc8d 	.word	0x0800fc8d
 800d3a4:	0800fc9e 	.word	0x0800fc9e

0800d3a8 <__mcmp>:
 800d3a8:	690a      	ldr	r2, [r1, #16]
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	6900      	ldr	r0, [r0, #16]
 800d3ae:	1a80      	subs	r0, r0, r2
 800d3b0:	b530      	push	{r4, r5, lr}
 800d3b2:	d10e      	bne.n	800d3d2 <__mcmp+0x2a>
 800d3b4:	3314      	adds	r3, #20
 800d3b6:	3114      	adds	r1, #20
 800d3b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d3bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d3c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d3c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d3c8:	4295      	cmp	r5, r2
 800d3ca:	d003      	beq.n	800d3d4 <__mcmp+0x2c>
 800d3cc:	d205      	bcs.n	800d3da <__mcmp+0x32>
 800d3ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d2:	bd30      	pop	{r4, r5, pc}
 800d3d4:	42a3      	cmp	r3, r4
 800d3d6:	d3f3      	bcc.n	800d3c0 <__mcmp+0x18>
 800d3d8:	e7fb      	b.n	800d3d2 <__mcmp+0x2a>
 800d3da:	2001      	movs	r0, #1
 800d3dc:	e7f9      	b.n	800d3d2 <__mcmp+0x2a>
	...

0800d3e0 <__mdiff>:
 800d3e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3e4:	4689      	mov	r9, r1
 800d3e6:	4606      	mov	r6, r0
 800d3e8:	4611      	mov	r1, r2
 800d3ea:	4648      	mov	r0, r9
 800d3ec:	4614      	mov	r4, r2
 800d3ee:	f7ff ffdb 	bl	800d3a8 <__mcmp>
 800d3f2:	1e05      	subs	r5, r0, #0
 800d3f4:	d112      	bne.n	800d41c <__mdiff+0x3c>
 800d3f6:	4629      	mov	r1, r5
 800d3f8:	4630      	mov	r0, r6
 800d3fa:	f7ff fd11 	bl	800ce20 <_Balloc>
 800d3fe:	4602      	mov	r2, r0
 800d400:	b928      	cbnz	r0, 800d40e <__mdiff+0x2e>
 800d402:	4b3f      	ldr	r3, [pc, #252]	@ (800d500 <__mdiff+0x120>)
 800d404:	f240 2137 	movw	r1, #567	@ 0x237
 800d408:	483e      	ldr	r0, [pc, #248]	@ (800d504 <__mdiff+0x124>)
 800d40a:	f001 fc4d 	bl	800eca8 <__assert_func>
 800d40e:	2301      	movs	r3, #1
 800d410:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d414:	4610      	mov	r0, r2
 800d416:	b003      	add	sp, #12
 800d418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d41c:	bfbc      	itt	lt
 800d41e:	464b      	movlt	r3, r9
 800d420:	46a1      	movlt	r9, r4
 800d422:	4630      	mov	r0, r6
 800d424:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d428:	bfba      	itte	lt
 800d42a:	461c      	movlt	r4, r3
 800d42c:	2501      	movlt	r5, #1
 800d42e:	2500      	movge	r5, #0
 800d430:	f7ff fcf6 	bl	800ce20 <_Balloc>
 800d434:	4602      	mov	r2, r0
 800d436:	b918      	cbnz	r0, 800d440 <__mdiff+0x60>
 800d438:	4b31      	ldr	r3, [pc, #196]	@ (800d500 <__mdiff+0x120>)
 800d43a:	f240 2145 	movw	r1, #581	@ 0x245
 800d43e:	e7e3      	b.n	800d408 <__mdiff+0x28>
 800d440:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d444:	6926      	ldr	r6, [r4, #16]
 800d446:	60c5      	str	r5, [r0, #12]
 800d448:	f109 0310 	add.w	r3, r9, #16
 800d44c:	f109 0514 	add.w	r5, r9, #20
 800d450:	f104 0e14 	add.w	lr, r4, #20
 800d454:	f100 0b14 	add.w	fp, r0, #20
 800d458:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d45c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d460:	9301      	str	r3, [sp, #4]
 800d462:	46d9      	mov	r9, fp
 800d464:	f04f 0c00 	mov.w	ip, #0
 800d468:	9b01      	ldr	r3, [sp, #4]
 800d46a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d46e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d472:	9301      	str	r3, [sp, #4]
 800d474:	fa1f f38a 	uxth.w	r3, sl
 800d478:	4619      	mov	r1, r3
 800d47a:	b283      	uxth	r3, r0
 800d47c:	1acb      	subs	r3, r1, r3
 800d47e:	0c00      	lsrs	r0, r0, #16
 800d480:	4463      	add	r3, ip
 800d482:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d486:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d48a:	b29b      	uxth	r3, r3
 800d48c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d490:	4576      	cmp	r6, lr
 800d492:	f849 3b04 	str.w	r3, [r9], #4
 800d496:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d49a:	d8e5      	bhi.n	800d468 <__mdiff+0x88>
 800d49c:	1b33      	subs	r3, r6, r4
 800d49e:	3b15      	subs	r3, #21
 800d4a0:	f023 0303 	bic.w	r3, r3, #3
 800d4a4:	3415      	adds	r4, #21
 800d4a6:	3304      	adds	r3, #4
 800d4a8:	42a6      	cmp	r6, r4
 800d4aa:	bf38      	it	cc
 800d4ac:	2304      	movcc	r3, #4
 800d4ae:	441d      	add	r5, r3
 800d4b0:	445b      	add	r3, fp
 800d4b2:	461e      	mov	r6, r3
 800d4b4:	462c      	mov	r4, r5
 800d4b6:	4544      	cmp	r4, r8
 800d4b8:	d30e      	bcc.n	800d4d8 <__mdiff+0xf8>
 800d4ba:	f108 0103 	add.w	r1, r8, #3
 800d4be:	1b49      	subs	r1, r1, r5
 800d4c0:	f021 0103 	bic.w	r1, r1, #3
 800d4c4:	3d03      	subs	r5, #3
 800d4c6:	45a8      	cmp	r8, r5
 800d4c8:	bf38      	it	cc
 800d4ca:	2100      	movcc	r1, #0
 800d4cc:	440b      	add	r3, r1
 800d4ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d4d2:	b191      	cbz	r1, 800d4fa <__mdiff+0x11a>
 800d4d4:	6117      	str	r7, [r2, #16]
 800d4d6:	e79d      	b.n	800d414 <__mdiff+0x34>
 800d4d8:	f854 1b04 	ldr.w	r1, [r4], #4
 800d4dc:	46e6      	mov	lr, ip
 800d4de:	0c08      	lsrs	r0, r1, #16
 800d4e0:	fa1c fc81 	uxtah	ip, ip, r1
 800d4e4:	4471      	add	r1, lr
 800d4e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d4ea:	b289      	uxth	r1, r1
 800d4ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d4f0:	f846 1b04 	str.w	r1, [r6], #4
 800d4f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d4f8:	e7dd      	b.n	800d4b6 <__mdiff+0xd6>
 800d4fa:	3f01      	subs	r7, #1
 800d4fc:	e7e7      	b.n	800d4ce <__mdiff+0xee>
 800d4fe:	bf00      	nop
 800d500:	0800fc8d 	.word	0x0800fc8d
 800d504:	0800fc9e 	.word	0x0800fc9e

0800d508 <__ulp>:
 800d508:	b082      	sub	sp, #8
 800d50a:	ed8d 0b00 	vstr	d0, [sp]
 800d50e:	9a01      	ldr	r2, [sp, #4]
 800d510:	4b0f      	ldr	r3, [pc, #60]	@ (800d550 <__ulp+0x48>)
 800d512:	4013      	ands	r3, r2
 800d514:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d518:	2b00      	cmp	r3, #0
 800d51a:	dc08      	bgt.n	800d52e <__ulp+0x26>
 800d51c:	425b      	negs	r3, r3
 800d51e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d522:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d526:	da04      	bge.n	800d532 <__ulp+0x2a>
 800d528:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d52c:	4113      	asrs	r3, r2
 800d52e:	2200      	movs	r2, #0
 800d530:	e008      	b.n	800d544 <__ulp+0x3c>
 800d532:	f1a2 0314 	sub.w	r3, r2, #20
 800d536:	2b1e      	cmp	r3, #30
 800d538:	bfda      	itte	le
 800d53a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d53e:	40da      	lsrle	r2, r3
 800d540:	2201      	movgt	r2, #1
 800d542:	2300      	movs	r3, #0
 800d544:	4619      	mov	r1, r3
 800d546:	4610      	mov	r0, r2
 800d548:	ec41 0b10 	vmov	d0, r0, r1
 800d54c:	b002      	add	sp, #8
 800d54e:	4770      	bx	lr
 800d550:	7ff00000 	.word	0x7ff00000

0800d554 <__b2d>:
 800d554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d558:	6906      	ldr	r6, [r0, #16]
 800d55a:	f100 0814 	add.w	r8, r0, #20
 800d55e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d562:	1f37      	subs	r7, r6, #4
 800d564:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d568:	4610      	mov	r0, r2
 800d56a:	f7ff fd4b 	bl	800d004 <__hi0bits>
 800d56e:	f1c0 0320 	rsb	r3, r0, #32
 800d572:	280a      	cmp	r0, #10
 800d574:	600b      	str	r3, [r1, #0]
 800d576:	491b      	ldr	r1, [pc, #108]	@ (800d5e4 <__b2d+0x90>)
 800d578:	dc15      	bgt.n	800d5a6 <__b2d+0x52>
 800d57a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d57e:	fa22 f30c 	lsr.w	r3, r2, ip
 800d582:	45b8      	cmp	r8, r7
 800d584:	ea43 0501 	orr.w	r5, r3, r1
 800d588:	bf34      	ite	cc
 800d58a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d58e:	2300      	movcs	r3, #0
 800d590:	3015      	adds	r0, #21
 800d592:	fa02 f000 	lsl.w	r0, r2, r0
 800d596:	fa23 f30c 	lsr.w	r3, r3, ip
 800d59a:	4303      	orrs	r3, r0
 800d59c:	461c      	mov	r4, r3
 800d59e:	ec45 4b10 	vmov	d0, r4, r5
 800d5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5a6:	45b8      	cmp	r8, r7
 800d5a8:	bf3a      	itte	cc
 800d5aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d5ae:	f1a6 0708 	subcc.w	r7, r6, #8
 800d5b2:	2300      	movcs	r3, #0
 800d5b4:	380b      	subs	r0, #11
 800d5b6:	d012      	beq.n	800d5de <__b2d+0x8a>
 800d5b8:	f1c0 0120 	rsb	r1, r0, #32
 800d5bc:	fa23 f401 	lsr.w	r4, r3, r1
 800d5c0:	4082      	lsls	r2, r0
 800d5c2:	4322      	orrs	r2, r4
 800d5c4:	4547      	cmp	r7, r8
 800d5c6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d5ca:	bf8c      	ite	hi
 800d5cc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d5d0:	2200      	movls	r2, #0
 800d5d2:	4083      	lsls	r3, r0
 800d5d4:	40ca      	lsrs	r2, r1
 800d5d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d5da:	4313      	orrs	r3, r2
 800d5dc:	e7de      	b.n	800d59c <__b2d+0x48>
 800d5de:	ea42 0501 	orr.w	r5, r2, r1
 800d5e2:	e7db      	b.n	800d59c <__b2d+0x48>
 800d5e4:	3ff00000 	.word	0x3ff00000

0800d5e8 <__d2b>:
 800d5e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d5ec:	460f      	mov	r7, r1
 800d5ee:	2101      	movs	r1, #1
 800d5f0:	ec59 8b10 	vmov	r8, r9, d0
 800d5f4:	4616      	mov	r6, r2
 800d5f6:	f7ff fc13 	bl	800ce20 <_Balloc>
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	b930      	cbnz	r0, 800d60c <__d2b+0x24>
 800d5fe:	4602      	mov	r2, r0
 800d600:	4b23      	ldr	r3, [pc, #140]	@ (800d690 <__d2b+0xa8>)
 800d602:	4824      	ldr	r0, [pc, #144]	@ (800d694 <__d2b+0xac>)
 800d604:	f240 310f 	movw	r1, #783	@ 0x30f
 800d608:	f001 fb4e 	bl	800eca8 <__assert_func>
 800d60c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d610:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d614:	b10d      	cbz	r5, 800d61a <__d2b+0x32>
 800d616:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d61a:	9301      	str	r3, [sp, #4]
 800d61c:	f1b8 0300 	subs.w	r3, r8, #0
 800d620:	d023      	beq.n	800d66a <__d2b+0x82>
 800d622:	4668      	mov	r0, sp
 800d624:	9300      	str	r3, [sp, #0]
 800d626:	f7ff fd0c 	bl	800d042 <__lo0bits>
 800d62a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d62e:	b1d0      	cbz	r0, 800d666 <__d2b+0x7e>
 800d630:	f1c0 0320 	rsb	r3, r0, #32
 800d634:	fa02 f303 	lsl.w	r3, r2, r3
 800d638:	430b      	orrs	r3, r1
 800d63a:	40c2      	lsrs	r2, r0
 800d63c:	6163      	str	r3, [r4, #20]
 800d63e:	9201      	str	r2, [sp, #4]
 800d640:	9b01      	ldr	r3, [sp, #4]
 800d642:	61a3      	str	r3, [r4, #24]
 800d644:	2b00      	cmp	r3, #0
 800d646:	bf0c      	ite	eq
 800d648:	2201      	moveq	r2, #1
 800d64a:	2202      	movne	r2, #2
 800d64c:	6122      	str	r2, [r4, #16]
 800d64e:	b1a5      	cbz	r5, 800d67a <__d2b+0x92>
 800d650:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d654:	4405      	add	r5, r0
 800d656:	603d      	str	r5, [r7, #0]
 800d658:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d65c:	6030      	str	r0, [r6, #0]
 800d65e:	4620      	mov	r0, r4
 800d660:	b003      	add	sp, #12
 800d662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d666:	6161      	str	r1, [r4, #20]
 800d668:	e7ea      	b.n	800d640 <__d2b+0x58>
 800d66a:	a801      	add	r0, sp, #4
 800d66c:	f7ff fce9 	bl	800d042 <__lo0bits>
 800d670:	9b01      	ldr	r3, [sp, #4]
 800d672:	6163      	str	r3, [r4, #20]
 800d674:	3020      	adds	r0, #32
 800d676:	2201      	movs	r2, #1
 800d678:	e7e8      	b.n	800d64c <__d2b+0x64>
 800d67a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d67e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d682:	6038      	str	r0, [r7, #0]
 800d684:	6918      	ldr	r0, [r3, #16]
 800d686:	f7ff fcbd 	bl	800d004 <__hi0bits>
 800d68a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d68e:	e7e5      	b.n	800d65c <__d2b+0x74>
 800d690:	0800fc8d 	.word	0x0800fc8d
 800d694:	0800fc9e 	.word	0x0800fc9e

0800d698 <__ratio>:
 800d698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d69c:	b085      	sub	sp, #20
 800d69e:	e9cd 1000 	strd	r1, r0, [sp]
 800d6a2:	a902      	add	r1, sp, #8
 800d6a4:	f7ff ff56 	bl	800d554 <__b2d>
 800d6a8:	9800      	ldr	r0, [sp, #0]
 800d6aa:	a903      	add	r1, sp, #12
 800d6ac:	ec55 4b10 	vmov	r4, r5, d0
 800d6b0:	f7ff ff50 	bl	800d554 <__b2d>
 800d6b4:	9b01      	ldr	r3, [sp, #4]
 800d6b6:	6919      	ldr	r1, [r3, #16]
 800d6b8:	9b00      	ldr	r3, [sp, #0]
 800d6ba:	691b      	ldr	r3, [r3, #16]
 800d6bc:	1ac9      	subs	r1, r1, r3
 800d6be:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d6c2:	1a9b      	subs	r3, r3, r2
 800d6c4:	ec5b ab10 	vmov	sl, fp, d0
 800d6c8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	bfce      	itee	gt
 800d6d0:	462a      	movgt	r2, r5
 800d6d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d6d6:	465a      	movle	r2, fp
 800d6d8:	462f      	mov	r7, r5
 800d6da:	46d9      	mov	r9, fp
 800d6dc:	bfcc      	ite	gt
 800d6de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d6e2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d6e6:	464b      	mov	r3, r9
 800d6e8:	4652      	mov	r2, sl
 800d6ea:	4620      	mov	r0, r4
 800d6ec:	4639      	mov	r1, r7
 800d6ee:	f7f3 f8d5 	bl	800089c <__aeabi_ddiv>
 800d6f2:	ec41 0b10 	vmov	d0, r0, r1
 800d6f6:	b005      	add	sp, #20
 800d6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6fc <__copybits>:
 800d6fc:	3901      	subs	r1, #1
 800d6fe:	b570      	push	{r4, r5, r6, lr}
 800d700:	1149      	asrs	r1, r1, #5
 800d702:	6914      	ldr	r4, [r2, #16]
 800d704:	3101      	adds	r1, #1
 800d706:	f102 0314 	add.w	r3, r2, #20
 800d70a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d70e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d712:	1f05      	subs	r5, r0, #4
 800d714:	42a3      	cmp	r3, r4
 800d716:	d30c      	bcc.n	800d732 <__copybits+0x36>
 800d718:	1aa3      	subs	r3, r4, r2
 800d71a:	3b11      	subs	r3, #17
 800d71c:	f023 0303 	bic.w	r3, r3, #3
 800d720:	3211      	adds	r2, #17
 800d722:	42a2      	cmp	r2, r4
 800d724:	bf88      	it	hi
 800d726:	2300      	movhi	r3, #0
 800d728:	4418      	add	r0, r3
 800d72a:	2300      	movs	r3, #0
 800d72c:	4288      	cmp	r0, r1
 800d72e:	d305      	bcc.n	800d73c <__copybits+0x40>
 800d730:	bd70      	pop	{r4, r5, r6, pc}
 800d732:	f853 6b04 	ldr.w	r6, [r3], #4
 800d736:	f845 6f04 	str.w	r6, [r5, #4]!
 800d73a:	e7eb      	b.n	800d714 <__copybits+0x18>
 800d73c:	f840 3b04 	str.w	r3, [r0], #4
 800d740:	e7f4      	b.n	800d72c <__copybits+0x30>

0800d742 <__any_on>:
 800d742:	f100 0214 	add.w	r2, r0, #20
 800d746:	6900      	ldr	r0, [r0, #16]
 800d748:	114b      	asrs	r3, r1, #5
 800d74a:	4298      	cmp	r0, r3
 800d74c:	b510      	push	{r4, lr}
 800d74e:	db11      	blt.n	800d774 <__any_on+0x32>
 800d750:	dd0a      	ble.n	800d768 <__any_on+0x26>
 800d752:	f011 011f 	ands.w	r1, r1, #31
 800d756:	d007      	beq.n	800d768 <__any_on+0x26>
 800d758:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d75c:	fa24 f001 	lsr.w	r0, r4, r1
 800d760:	fa00 f101 	lsl.w	r1, r0, r1
 800d764:	428c      	cmp	r4, r1
 800d766:	d10b      	bne.n	800d780 <__any_on+0x3e>
 800d768:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d803      	bhi.n	800d778 <__any_on+0x36>
 800d770:	2000      	movs	r0, #0
 800d772:	bd10      	pop	{r4, pc}
 800d774:	4603      	mov	r3, r0
 800d776:	e7f7      	b.n	800d768 <__any_on+0x26>
 800d778:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d77c:	2900      	cmp	r1, #0
 800d77e:	d0f5      	beq.n	800d76c <__any_on+0x2a>
 800d780:	2001      	movs	r0, #1
 800d782:	e7f6      	b.n	800d772 <__any_on+0x30>

0800d784 <sulp>:
 800d784:	b570      	push	{r4, r5, r6, lr}
 800d786:	4604      	mov	r4, r0
 800d788:	460d      	mov	r5, r1
 800d78a:	ec45 4b10 	vmov	d0, r4, r5
 800d78e:	4616      	mov	r6, r2
 800d790:	f7ff feba 	bl	800d508 <__ulp>
 800d794:	ec51 0b10 	vmov	r0, r1, d0
 800d798:	b17e      	cbz	r6, 800d7ba <sulp+0x36>
 800d79a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d79e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	dd09      	ble.n	800d7ba <sulp+0x36>
 800d7a6:	051b      	lsls	r3, r3, #20
 800d7a8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d7ac:	2400      	movs	r4, #0
 800d7ae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d7b2:	4622      	mov	r2, r4
 800d7b4:	462b      	mov	r3, r5
 800d7b6:	f7f2 ff47 	bl	8000648 <__aeabi_dmul>
 800d7ba:	ec41 0b10 	vmov	d0, r0, r1
 800d7be:	bd70      	pop	{r4, r5, r6, pc}

0800d7c0 <_strtod_l>:
 800d7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7c4:	b09f      	sub	sp, #124	@ 0x7c
 800d7c6:	460c      	mov	r4, r1
 800d7c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	921a      	str	r2, [sp, #104]	@ 0x68
 800d7ce:	9005      	str	r0, [sp, #20]
 800d7d0:	f04f 0a00 	mov.w	sl, #0
 800d7d4:	f04f 0b00 	mov.w	fp, #0
 800d7d8:	460a      	mov	r2, r1
 800d7da:	9219      	str	r2, [sp, #100]	@ 0x64
 800d7dc:	7811      	ldrb	r1, [r2, #0]
 800d7de:	292b      	cmp	r1, #43	@ 0x2b
 800d7e0:	d04a      	beq.n	800d878 <_strtod_l+0xb8>
 800d7e2:	d838      	bhi.n	800d856 <_strtod_l+0x96>
 800d7e4:	290d      	cmp	r1, #13
 800d7e6:	d832      	bhi.n	800d84e <_strtod_l+0x8e>
 800d7e8:	2908      	cmp	r1, #8
 800d7ea:	d832      	bhi.n	800d852 <_strtod_l+0x92>
 800d7ec:	2900      	cmp	r1, #0
 800d7ee:	d03b      	beq.n	800d868 <_strtod_l+0xa8>
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d7f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d7f6:	782a      	ldrb	r2, [r5, #0]
 800d7f8:	2a30      	cmp	r2, #48	@ 0x30
 800d7fa:	f040 80b3 	bne.w	800d964 <_strtod_l+0x1a4>
 800d7fe:	786a      	ldrb	r2, [r5, #1]
 800d800:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d804:	2a58      	cmp	r2, #88	@ 0x58
 800d806:	d16e      	bne.n	800d8e6 <_strtod_l+0x126>
 800d808:	9302      	str	r3, [sp, #8]
 800d80a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d80c:	9301      	str	r3, [sp, #4]
 800d80e:	ab1a      	add	r3, sp, #104	@ 0x68
 800d810:	9300      	str	r3, [sp, #0]
 800d812:	4a8e      	ldr	r2, [pc, #568]	@ (800da4c <_strtod_l+0x28c>)
 800d814:	9805      	ldr	r0, [sp, #20]
 800d816:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d818:	a919      	add	r1, sp, #100	@ 0x64
 800d81a:	f001 fadf 	bl	800eddc <__gethex>
 800d81e:	f010 060f 	ands.w	r6, r0, #15
 800d822:	4604      	mov	r4, r0
 800d824:	d005      	beq.n	800d832 <_strtod_l+0x72>
 800d826:	2e06      	cmp	r6, #6
 800d828:	d128      	bne.n	800d87c <_strtod_l+0xbc>
 800d82a:	3501      	adds	r5, #1
 800d82c:	2300      	movs	r3, #0
 800d82e:	9519      	str	r5, [sp, #100]	@ 0x64
 800d830:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d832:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d834:	2b00      	cmp	r3, #0
 800d836:	f040 858e 	bne.w	800e356 <_strtod_l+0xb96>
 800d83a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d83c:	b1cb      	cbz	r3, 800d872 <_strtod_l+0xb2>
 800d83e:	4652      	mov	r2, sl
 800d840:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d844:	ec43 2b10 	vmov	d0, r2, r3
 800d848:	b01f      	add	sp, #124	@ 0x7c
 800d84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d84e:	2920      	cmp	r1, #32
 800d850:	d1ce      	bne.n	800d7f0 <_strtod_l+0x30>
 800d852:	3201      	adds	r2, #1
 800d854:	e7c1      	b.n	800d7da <_strtod_l+0x1a>
 800d856:	292d      	cmp	r1, #45	@ 0x2d
 800d858:	d1ca      	bne.n	800d7f0 <_strtod_l+0x30>
 800d85a:	2101      	movs	r1, #1
 800d85c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d85e:	1c51      	adds	r1, r2, #1
 800d860:	9119      	str	r1, [sp, #100]	@ 0x64
 800d862:	7852      	ldrb	r2, [r2, #1]
 800d864:	2a00      	cmp	r2, #0
 800d866:	d1c5      	bne.n	800d7f4 <_strtod_l+0x34>
 800d868:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d86a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	f040 8570 	bne.w	800e352 <_strtod_l+0xb92>
 800d872:	4652      	mov	r2, sl
 800d874:	465b      	mov	r3, fp
 800d876:	e7e5      	b.n	800d844 <_strtod_l+0x84>
 800d878:	2100      	movs	r1, #0
 800d87a:	e7ef      	b.n	800d85c <_strtod_l+0x9c>
 800d87c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d87e:	b13a      	cbz	r2, 800d890 <_strtod_l+0xd0>
 800d880:	2135      	movs	r1, #53	@ 0x35
 800d882:	a81c      	add	r0, sp, #112	@ 0x70
 800d884:	f7ff ff3a 	bl	800d6fc <__copybits>
 800d888:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d88a:	9805      	ldr	r0, [sp, #20]
 800d88c:	f7ff fb08 	bl	800cea0 <_Bfree>
 800d890:	3e01      	subs	r6, #1
 800d892:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d894:	2e04      	cmp	r6, #4
 800d896:	d806      	bhi.n	800d8a6 <_strtod_l+0xe6>
 800d898:	e8df f006 	tbb	[pc, r6]
 800d89c:	201d0314 	.word	0x201d0314
 800d8a0:	14          	.byte	0x14
 800d8a1:	00          	.byte	0x00
 800d8a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d8a6:	05e1      	lsls	r1, r4, #23
 800d8a8:	bf48      	it	mi
 800d8aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d8ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d8b2:	0d1b      	lsrs	r3, r3, #20
 800d8b4:	051b      	lsls	r3, r3, #20
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d1bb      	bne.n	800d832 <_strtod_l+0x72>
 800d8ba:	f7fe fb23 	bl	800bf04 <__errno>
 800d8be:	2322      	movs	r3, #34	@ 0x22
 800d8c0:	6003      	str	r3, [r0, #0]
 800d8c2:	e7b6      	b.n	800d832 <_strtod_l+0x72>
 800d8c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d8c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d8cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d8d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d8d4:	e7e7      	b.n	800d8a6 <_strtod_l+0xe6>
 800d8d6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800da54 <_strtod_l+0x294>
 800d8da:	e7e4      	b.n	800d8a6 <_strtod_l+0xe6>
 800d8dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d8e0:	f04f 3aff 	mov.w	sl, #4294967295
 800d8e4:	e7df      	b.n	800d8a6 <_strtod_l+0xe6>
 800d8e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d8e8:	1c5a      	adds	r2, r3, #1
 800d8ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800d8ec:	785b      	ldrb	r3, [r3, #1]
 800d8ee:	2b30      	cmp	r3, #48	@ 0x30
 800d8f0:	d0f9      	beq.n	800d8e6 <_strtod_l+0x126>
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d09d      	beq.n	800d832 <_strtod_l+0x72>
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d8fc:	930c      	str	r3, [sp, #48]	@ 0x30
 800d8fe:	2300      	movs	r3, #0
 800d900:	9308      	str	r3, [sp, #32]
 800d902:	930a      	str	r3, [sp, #40]	@ 0x28
 800d904:	461f      	mov	r7, r3
 800d906:	220a      	movs	r2, #10
 800d908:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d90a:	7805      	ldrb	r5, [r0, #0]
 800d90c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d910:	b2d9      	uxtb	r1, r3
 800d912:	2909      	cmp	r1, #9
 800d914:	d928      	bls.n	800d968 <_strtod_l+0x1a8>
 800d916:	494e      	ldr	r1, [pc, #312]	@ (800da50 <_strtod_l+0x290>)
 800d918:	2201      	movs	r2, #1
 800d91a:	f001 f979 	bl	800ec10 <strncmp>
 800d91e:	2800      	cmp	r0, #0
 800d920:	d032      	beq.n	800d988 <_strtod_l+0x1c8>
 800d922:	2000      	movs	r0, #0
 800d924:	462a      	mov	r2, r5
 800d926:	4681      	mov	r9, r0
 800d928:	463d      	mov	r5, r7
 800d92a:	4603      	mov	r3, r0
 800d92c:	2a65      	cmp	r2, #101	@ 0x65
 800d92e:	d001      	beq.n	800d934 <_strtod_l+0x174>
 800d930:	2a45      	cmp	r2, #69	@ 0x45
 800d932:	d114      	bne.n	800d95e <_strtod_l+0x19e>
 800d934:	b91d      	cbnz	r5, 800d93e <_strtod_l+0x17e>
 800d936:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d938:	4302      	orrs	r2, r0
 800d93a:	d095      	beq.n	800d868 <_strtod_l+0xa8>
 800d93c:	2500      	movs	r5, #0
 800d93e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d940:	1c62      	adds	r2, r4, #1
 800d942:	9219      	str	r2, [sp, #100]	@ 0x64
 800d944:	7862      	ldrb	r2, [r4, #1]
 800d946:	2a2b      	cmp	r2, #43	@ 0x2b
 800d948:	d077      	beq.n	800da3a <_strtod_l+0x27a>
 800d94a:	2a2d      	cmp	r2, #45	@ 0x2d
 800d94c:	d07b      	beq.n	800da46 <_strtod_l+0x286>
 800d94e:	f04f 0c00 	mov.w	ip, #0
 800d952:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d956:	2909      	cmp	r1, #9
 800d958:	f240 8082 	bls.w	800da60 <_strtod_l+0x2a0>
 800d95c:	9419      	str	r4, [sp, #100]	@ 0x64
 800d95e:	f04f 0800 	mov.w	r8, #0
 800d962:	e0a2      	b.n	800daaa <_strtod_l+0x2ea>
 800d964:	2300      	movs	r3, #0
 800d966:	e7c7      	b.n	800d8f8 <_strtod_l+0x138>
 800d968:	2f08      	cmp	r7, #8
 800d96a:	bfd5      	itete	le
 800d96c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d96e:	9908      	ldrgt	r1, [sp, #32]
 800d970:	fb02 3301 	mlale	r3, r2, r1, r3
 800d974:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d978:	f100 0001 	add.w	r0, r0, #1
 800d97c:	bfd4      	ite	le
 800d97e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d980:	9308      	strgt	r3, [sp, #32]
 800d982:	3701      	adds	r7, #1
 800d984:	9019      	str	r0, [sp, #100]	@ 0x64
 800d986:	e7bf      	b.n	800d908 <_strtod_l+0x148>
 800d988:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d98a:	1c5a      	adds	r2, r3, #1
 800d98c:	9219      	str	r2, [sp, #100]	@ 0x64
 800d98e:	785a      	ldrb	r2, [r3, #1]
 800d990:	b37f      	cbz	r7, 800d9f2 <_strtod_l+0x232>
 800d992:	4681      	mov	r9, r0
 800d994:	463d      	mov	r5, r7
 800d996:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d99a:	2b09      	cmp	r3, #9
 800d99c:	d912      	bls.n	800d9c4 <_strtod_l+0x204>
 800d99e:	2301      	movs	r3, #1
 800d9a0:	e7c4      	b.n	800d92c <_strtod_l+0x16c>
 800d9a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9a4:	1c5a      	adds	r2, r3, #1
 800d9a6:	9219      	str	r2, [sp, #100]	@ 0x64
 800d9a8:	785a      	ldrb	r2, [r3, #1]
 800d9aa:	3001      	adds	r0, #1
 800d9ac:	2a30      	cmp	r2, #48	@ 0x30
 800d9ae:	d0f8      	beq.n	800d9a2 <_strtod_l+0x1e2>
 800d9b0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d9b4:	2b08      	cmp	r3, #8
 800d9b6:	f200 84d3 	bhi.w	800e360 <_strtod_l+0xba0>
 800d9ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800d9be:	4681      	mov	r9, r0
 800d9c0:	2000      	movs	r0, #0
 800d9c2:	4605      	mov	r5, r0
 800d9c4:	3a30      	subs	r2, #48	@ 0x30
 800d9c6:	f100 0301 	add.w	r3, r0, #1
 800d9ca:	d02a      	beq.n	800da22 <_strtod_l+0x262>
 800d9cc:	4499      	add	r9, r3
 800d9ce:	eb00 0c05 	add.w	ip, r0, r5
 800d9d2:	462b      	mov	r3, r5
 800d9d4:	210a      	movs	r1, #10
 800d9d6:	4563      	cmp	r3, ip
 800d9d8:	d10d      	bne.n	800d9f6 <_strtod_l+0x236>
 800d9da:	1c69      	adds	r1, r5, #1
 800d9dc:	4401      	add	r1, r0
 800d9de:	4428      	add	r0, r5
 800d9e0:	2808      	cmp	r0, #8
 800d9e2:	dc16      	bgt.n	800da12 <_strtod_l+0x252>
 800d9e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d9e6:	230a      	movs	r3, #10
 800d9e8:	fb03 2300 	mla	r3, r3, r0, r2
 800d9ec:	930a      	str	r3, [sp, #40]	@ 0x28
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	e018      	b.n	800da24 <_strtod_l+0x264>
 800d9f2:	4638      	mov	r0, r7
 800d9f4:	e7da      	b.n	800d9ac <_strtod_l+0x1ec>
 800d9f6:	2b08      	cmp	r3, #8
 800d9f8:	f103 0301 	add.w	r3, r3, #1
 800d9fc:	dc03      	bgt.n	800da06 <_strtod_l+0x246>
 800d9fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800da00:	434e      	muls	r6, r1
 800da02:	960a      	str	r6, [sp, #40]	@ 0x28
 800da04:	e7e7      	b.n	800d9d6 <_strtod_l+0x216>
 800da06:	2b10      	cmp	r3, #16
 800da08:	bfde      	ittt	le
 800da0a:	9e08      	ldrle	r6, [sp, #32]
 800da0c:	434e      	mulle	r6, r1
 800da0e:	9608      	strle	r6, [sp, #32]
 800da10:	e7e1      	b.n	800d9d6 <_strtod_l+0x216>
 800da12:	280f      	cmp	r0, #15
 800da14:	dceb      	bgt.n	800d9ee <_strtod_l+0x22e>
 800da16:	9808      	ldr	r0, [sp, #32]
 800da18:	230a      	movs	r3, #10
 800da1a:	fb03 2300 	mla	r3, r3, r0, r2
 800da1e:	9308      	str	r3, [sp, #32]
 800da20:	e7e5      	b.n	800d9ee <_strtod_l+0x22e>
 800da22:	4629      	mov	r1, r5
 800da24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800da26:	1c50      	adds	r0, r2, #1
 800da28:	9019      	str	r0, [sp, #100]	@ 0x64
 800da2a:	7852      	ldrb	r2, [r2, #1]
 800da2c:	4618      	mov	r0, r3
 800da2e:	460d      	mov	r5, r1
 800da30:	e7b1      	b.n	800d996 <_strtod_l+0x1d6>
 800da32:	f04f 0900 	mov.w	r9, #0
 800da36:	2301      	movs	r3, #1
 800da38:	e77d      	b.n	800d936 <_strtod_l+0x176>
 800da3a:	f04f 0c00 	mov.w	ip, #0
 800da3e:	1ca2      	adds	r2, r4, #2
 800da40:	9219      	str	r2, [sp, #100]	@ 0x64
 800da42:	78a2      	ldrb	r2, [r4, #2]
 800da44:	e785      	b.n	800d952 <_strtod_l+0x192>
 800da46:	f04f 0c01 	mov.w	ip, #1
 800da4a:	e7f8      	b.n	800da3e <_strtod_l+0x27e>
 800da4c:	0800fe10 	.word	0x0800fe10
 800da50:	0800fdf8 	.word	0x0800fdf8
 800da54:	7ff00000 	.word	0x7ff00000
 800da58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800da5a:	1c51      	adds	r1, r2, #1
 800da5c:	9119      	str	r1, [sp, #100]	@ 0x64
 800da5e:	7852      	ldrb	r2, [r2, #1]
 800da60:	2a30      	cmp	r2, #48	@ 0x30
 800da62:	d0f9      	beq.n	800da58 <_strtod_l+0x298>
 800da64:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800da68:	2908      	cmp	r1, #8
 800da6a:	f63f af78 	bhi.w	800d95e <_strtod_l+0x19e>
 800da6e:	3a30      	subs	r2, #48	@ 0x30
 800da70:	920e      	str	r2, [sp, #56]	@ 0x38
 800da72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800da74:	920f      	str	r2, [sp, #60]	@ 0x3c
 800da76:	f04f 080a 	mov.w	r8, #10
 800da7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800da7c:	1c56      	adds	r6, r2, #1
 800da7e:	9619      	str	r6, [sp, #100]	@ 0x64
 800da80:	7852      	ldrb	r2, [r2, #1]
 800da82:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800da86:	f1be 0f09 	cmp.w	lr, #9
 800da8a:	d939      	bls.n	800db00 <_strtod_l+0x340>
 800da8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800da8e:	1a76      	subs	r6, r6, r1
 800da90:	2e08      	cmp	r6, #8
 800da92:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800da96:	dc03      	bgt.n	800daa0 <_strtod_l+0x2e0>
 800da98:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800da9a:	4588      	cmp	r8, r1
 800da9c:	bfa8      	it	ge
 800da9e:	4688      	movge	r8, r1
 800daa0:	f1bc 0f00 	cmp.w	ip, #0
 800daa4:	d001      	beq.n	800daaa <_strtod_l+0x2ea>
 800daa6:	f1c8 0800 	rsb	r8, r8, #0
 800daaa:	2d00      	cmp	r5, #0
 800daac:	d14e      	bne.n	800db4c <_strtod_l+0x38c>
 800daae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dab0:	4308      	orrs	r0, r1
 800dab2:	f47f aebe 	bne.w	800d832 <_strtod_l+0x72>
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	f47f aed6 	bne.w	800d868 <_strtod_l+0xa8>
 800dabc:	2a69      	cmp	r2, #105	@ 0x69
 800dabe:	d028      	beq.n	800db12 <_strtod_l+0x352>
 800dac0:	dc25      	bgt.n	800db0e <_strtod_l+0x34e>
 800dac2:	2a49      	cmp	r2, #73	@ 0x49
 800dac4:	d025      	beq.n	800db12 <_strtod_l+0x352>
 800dac6:	2a4e      	cmp	r2, #78	@ 0x4e
 800dac8:	f47f aece 	bne.w	800d868 <_strtod_l+0xa8>
 800dacc:	499b      	ldr	r1, [pc, #620]	@ (800dd3c <_strtod_l+0x57c>)
 800dace:	a819      	add	r0, sp, #100	@ 0x64
 800dad0:	f001 fba6 	bl	800f220 <__match>
 800dad4:	2800      	cmp	r0, #0
 800dad6:	f43f aec7 	beq.w	800d868 <_strtod_l+0xa8>
 800dada:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dadc:	781b      	ldrb	r3, [r3, #0]
 800dade:	2b28      	cmp	r3, #40	@ 0x28
 800dae0:	d12e      	bne.n	800db40 <_strtod_l+0x380>
 800dae2:	4997      	ldr	r1, [pc, #604]	@ (800dd40 <_strtod_l+0x580>)
 800dae4:	aa1c      	add	r2, sp, #112	@ 0x70
 800dae6:	a819      	add	r0, sp, #100	@ 0x64
 800dae8:	f001 fbae 	bl	800f248 <__hexnan>
 800daec:	2805      	cmp	r0, #5
 800daee:	d127      	bne.n	800db40 <_strtod_l+0x380>
 800daf0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800daf2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800daf6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800dafa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800dafe:	e698      	b.n	800d832 <_strtod_l+0x72>
 800db00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800db02:	fb08 2101 	mla	r1, r8, r1, r2
 800db06:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800db0a:	920e      	str	r2, [sp, #56]	@ 0x38
 800db0c:	e7b5      	b.n	800da7a <_strtod_l+0x2ba>
 800db0e:	2a6e      	cmp	r2, #110	@ 0x6e
 800db10:	e7da      	b.n	800dac8 <_strtod_l+0x308>
 800db12:	498c      	ldr	r1, [pc, #560]	@ (800dd44 <_strtod_l+0x584>)
 800db14:	a819      	add	r0, sp, #100	@ 0x64
 800db16:	f001 fb83 	bl	800f220 <__match>
 800db1a:	2800      	cmp	r0, #0
 800db1c:	f43f aea4 	beq.w	800d868 <_strtod_l+0xa8>
 800db20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db22:	4989      	ldr	r1, [pc, #548]	@ (800dd48 <_strtod_l+0x588>)
 800db24:	3b01      	subs	r3, #1
 800db26:	a819      	add	r0, sp, #100	@ 0x64
 800db28:	9319      	str	r3, [sp, #100]	@ 0x64
 800db2a:	f001 fb79 	bl	800f220 <__match>
 800db2e:	b910      	cbnz	r0, 800db36 <_strtod_l+0x376>
 800db30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db32:	3301      	adds	r3, #1
 800db34:	9319      	str	r3, [sp, #100]	@ 0x64
 800db36:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800dd58 <_strtod_l+0x598>
 800db3a:	f04f 0a00 	mov.w	sl, #0
 800db3e:	e678      	b.n	800d832 <_strtod_l+0x72>
 800db40:	4882      	ldr	r0, [pc, #520]	@ (800dd4c <_strtod_l+0x58c>)
 800db42:	f001 f8a9 	bl	800ec98 <nan>
 800db46:	ec5b ab10 	vmov	sl, fp, d0
 800db4a:	e672      	b.n	800d832 <_strtod_l+0x72>
 800db4c:	eba8 0309 	sub.w	r3, r8, r9
 800db50:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800db52:	9309      	str	r3, [sp, #36]	@ 0x24
 800db54:	2f00      	cmp	r7, #0
 800db56:	bf08      	it	eq
 800db58:	462f      	moveq	r7, r5
 800db5a:	2d10      	cmp	r5, #16
 800db5c:	462c      	mov	r4, r5
 800db5e:	bfa8      	it	ge
 800db60:	2410      	movge	r4, #16
 800db62:	f7f2 fcf7 	bl	8000554 <__aeabi_ui2d>
 800db66:	2d09      	cmp	r5, #9
 800db68:	4682      	mov	sl, r0
 800db6a:	468b      	mov	fp, r1
 800db6c:	dc13      	bgt.n	800db96 <_strtod_l+0x3d6>
 800db6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db70:	2b00      	cmp	r3, #0
 800db72:	f43f ae5e 	beq.w	800d832 <_strtod_l+0x72>
 800db76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db78:	dd78      	ble.n	800dc6c <_strtod_l+0x4ac>
 800db7a:	2b16      	cmp	r3, #22
 800db7c:	dc5f      	bgt.n	800dc3e <_strtod_l+0x47e>
 800db7e:	4974      	ldr	r1, [pc, #464]	@ (800dd50 <_strtod_l+0x590>)
 800db80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800db84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db88:	4652      	mov	r2, sl
 800db8a:	465b      	mov	r3, fp
 800db8c:	f7f2 fd5c 	bl	8000648 <__aeabi_dmul>
 800db90:	4682      	mov	sl, r0
 800db92:	468b      	mov	fp, r1
 800db94:	e64d      	b.n	800d832 <_strtod_l+0x72>
 800db96:	4b6e      	ldr	r3, [pc, #440]	@ (800dd50 <_strtod_l+0x590>)
 800db98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800db9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800dba0:	f7f2 fd52 	bl	8000648 <__aeabi_dmul>
 800dba4:	4682      	mov	sl, r0
 800dba6:	9808      	ldr	r0, [sp, #32]
 800dba8:	468b      	mov	fp, r1
 800dbaa:	f7f2 fcd3 	bl	8000554 <__aeabi_ui2d>
 800dbae:	4602      	mov	r2, r0
 800dbb0:	460b      	mov	r3, r1
 800dbb2:	4650      	mov	r0, sl
 800dbb4:	4659      	mov	r1, fp
 800dbb6:	f7f2 fb91 	bl	80002dc <__adddf3>
 800dbba:	2d0f      	cmp	r5, #15
 800dbbc:	4682      	mov	sl, r0
 800dbbe:	468b      	mov	fp, r1
 800dbc0:	ddd5      	ble.n	800db6e <_strtod_l+0x3ae>
 800dbc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbc4:	1b2c      	subs	r4, r5, r4
 800dbc6:	441c      	add	r4, r3
 800dbc8:	2c00      	cmp	r4, #0
 800dbca:	f340 8096 	ble.w	800dcfa <_strtod_l+0x53a>
 800dbce:	f014 030f 	ands.w	r3, r4, #15
 800dbd2:	d00a      	beq.n	800dbea <_strtod_l+0x42a>
 800dbd4:	495e      	ldr	r1, [pc, #376]	@ (800dd50 <_strtod_l+0x590>)
 800dbd6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dbda:	4652      	mov	r2, sl
 800dbdc:	465b      	mov	r3, fp
 800dbde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbe2:	f7f2 fd31 	bl	8000648 <__aeabi_dmul>
 800dbe6:	4682      	mov	sl, r0
 800dbe8:	468b      	mov	fp, r1
 800dbea:	f034 040f 	bics.w	r4, r4, #15
 800dbee:	d073      	beq.n	800dcd8 <_strtod_l+0x518>
 800dbf0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800dbf4:	dd48      	ble.n	800dc88 <_strtod_l+0x4c8>
 800dbf6:	2400      	movs	r4, #0
 800dbf8:	46a0      	mov	r8, r4
 800dbfa:	940a      	str	r4, [sp, #40]	@ 0x28
 800dbfc:	46a1      	mov	r9, r4
 800dbfe:	9a05      	ldr	r2, [sp, #20]
 800dc00:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800dd58 <_strtod_l+0x598>
 800dc04:	2322      	movs	r3, #34	@ 0x22
 800dc06:	6013      	str	r3, [r2, #0]
 800dc08:	f04f 0a00 	mov.w	sl, #0
 800dc0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	f43f ae0f 	beq.w	800d832 <_strtod_l+0x72>
 800dc14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc16:	9805      	ldr	r0, [sp, #20]
 800dc18:	f7ff f942 	bl	800cea0 <_Bfree>
 800dc1c:	9805      	ldr	r0, [sp, #20]
 800dc1e:	4649      	mov	r1, r9
 800dc20:	f7ff f93e 	bl	800cea0 <_Bfree>
 800dc24:	9805      	ldr	r0, [sp, #20]
 800dc26:	4641      	mov	r1, r8
 800dc28:	f7ff f93a 	bl	800cea0 <_Bfree>
 800dc2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dc2e:	9805      	ldr	r0, [sp, #20]
 800dc30:	f7ff f936 	bl	800cea0 <_Bfree>
 800dc34:	9805      	ldr	r0, [sp, #20]
 800dc36:	4621      	mov	r1, r4
 800dc38:	f7ff f932 	bl	800cea0 <_Bfree>
 800dc3c:	e5f9      	b.n	800d832 <_strtod_l+0x72>
 800dc3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc40:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800dc44:	4293      	cmp	r3, r2
 800dc46:	dbbc      	blt.n	800dbc2 <_strtod_l+0x402>
 800dc48:	4c41      	ldr	r4, [pc, #260]	@ (800dd50 <_strtod_l+0x590>)
 800dc4a:	f1c5 050f 	rsb	r5, r5, #15
 800dc4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dc52:	4652      	mov	r2, sl
 800dc54:	465b      	mov	r3, fp
 800dc56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc5a:	f7f2 fcf5 	bl	8000648 <__aeabi_dmul>
 800dc5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc60:	1b5d      	subs	r5, r3, r5
 800dc62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800dc66:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dc6a:	e78f      	b.n	800db8c <_strtod_l+0x3cc>
 800dc6c:	3316      	adds	r3, #22
 800dc6e:	dba8      	blt.n	800dbc2 <_strtod_l+0x402>
 800dc70:	4b37      	ldr	r3, [pc, #220]	@ (800dd50 <_strtod_l+0x590>)
 800dc72:	eba9 0808 	sub.w	r8, r9, r8
 800dc76:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800dc7a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800dc7e:	4650      	mov	r0, sl
 800dc80:	4659      	mov	r1, fp
 800dc82:	f7f2 fe0b 	bl	800089c <__aeabi_ddiv>
 800dc86:	e783      	b.n	800db90 <_strtod_l+0x3d0>
 800dc88:	4b32      	ldr	r3, [pc, #200]	@ (800dd54 <_strtod_l+0x594>)
 800dc8a:	9308      	str	r3, [sp, #32]
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	1124      	asrs	r4, r4, #4
 800dc90:	4650      	mov	r0, sl
 800dc92:	4659      	mov	r1, fp
 800dc94:	461e      	mov	r6, r3
 800dc96:	2c01      	cmp	r4, #1
 800dc98:	dc21      	bgt.n	800dcde <_strtod_l+0x51e>
 800dc9a:	b10b      	cbz	r3, 800dca0 <_strtod_l+0x4e0>
 800dc9c:	4682      	mov	sl, r0
 800dc9e:	468b      	mov	fp, r1
 800dca0:	492c      	ldr	r1, [pc, #176]	@ (800dd54 <_strtod_l+0x594>)
 800dca2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800dca6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800dcaa:	4652      	mov	r2, sl
 800dcac:	465b      	mov	r3, fp
 800dcae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcb2:	f7f2 fcc9 	bl	8000648 <__aeabi_dmul>
 800dcb6:	4b28      	ldr	r3, [pc, #160]	@ (800dd58 <_strtod_l+0x598>)
 800dcb8:	460a      	mov	r2, r1
 800dcba:	400b      	ands	r3, r1
 800dcbc:	4927      	ldr	r1, [pc, #156]	@ (800dd5c <_strtod_l+0x59c>)
 800dcbe:	428b      	cmp	r3, r1
 800dcc0:	4682      	mov	sl, r0
 800dcc2:	d898      	bhi.n	800dbf6 <_strtod_l+0x436>
 800dcc4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800dcc8:	428b      	cmp	r3, r1
 800dcca:	bf86      	itte	hi
 800dccc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800dd60 <_strtod_l+0x5a0>
 800dcd0:	f04f 3aff 	movhi.w	sl, #4294967295
 800dcd4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800dcd8:	2300      	movs	r3, #0
 800dcda:	9308      	str	r3, [sp, #32]
 800dcdc:	e07a      	b.n	800ddd4 <_strtod_l+0x614>
 800dcde:	07e2      	lsls	r2, r4, #31
 800dce0:	d505      	bpl.n	800dcee <_strtod_l+0x52e>
 800dce2:	9b08      	ldr	r3, [sp, #32]
 800dce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce8:	f7f2 fcae 	bl	8000648 <__aeabi_dmul>
 800dcec:	2301      	movs	r3, #1
 800dcee:	9a08      	ldr	r2, [sp, #32]
 800dcf0:	3208      	adds	r2, #8
 800dcf2:	3601      	adds	r6, #1
 800dcf4:	1064      	asrs	r4, r4, #1
 800dcf6:	9208      	str	r2, [sp, #32]
 800dcf8:	e7cd      	b.n	800dc96 <_strtod_l+0x4d6>
 800dcfa:	d0ed      	beq.n	800dcd8 <_strtod_l+0x518>
 800dcfc:	4264      	negs	r4, r4
 800dcfe:	f014 020f 	ands.w	r2, r4, #15
 800dd02:	d00a      	beq.n	800dd1a <_strtod_l+0x55a>
 800dd04:	4b12      	ldr	r3, [pc, #72]	@ (800dd50 <_strtod_l+0x590>)
 800dd06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd0a:	4650      	mov	r0, sl
 800dd0c:	4659      	mov	r1, fp
 800dd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd12:	f7f2 fdc3 	bl	800089c <__aeabi_ddiv>
 800dd16:	4682      	mov	sl, r0
 800dd18:	468b      	mov	fp, r1
 800dd1a:	1124      	asrs	r4, r4, #4
 800dd1c:	d0dc      	beq.n	800dcd8 <_strtod_l+0x518>
 800dd1e:	2c1f      	cmp	r4, #31
 800dd20:	dd20      	ble.n	800dd64 <_strtod_l+0x5a4>
 800dd22:	2400      	movs	r4, #0
 800dd24:	46a0      	mov	r8, r4
 800dd26:	940a      	str	r4, [sp, #40]	@ 0x28
 800dd28:	46a1      	mov	r9, r4
 800dd2a:	9a05      	ldr	r2, [sp, #20]
 800dd2c:	2322      	movs	r3, #34	@ 0x22
 800dd2e:	f04f 0a00 	mov.w	sl, #0
 800dd32:	f04f 0b00 	mov.w	fp, #0
 800dd36:	6013      	str	r3, [r2, #0]
 800dd38:	e768      	b.n	800dc0c <_strtod_l+0x44c>
 800dd3a:	bf00      	nop
 800dd3c:	0800fbe5 	.word	0x0800fbe5
 800dd40:	0800fdfc 	.word	0x0800fdfc
 800dd44:	0800fbdd 	.word	0x0800fbdd
 800dd48:	0800fc14 	.word	0x0800fc14
 800dd4c:	0800ffa5 	.word	0x0800ffa5
 800dd50:	0800fd30 	.word	0x0800fd30
 800dd54:	0800fd08 	.word	0x0800fd08
 800dd58:	7ff00000 	.word	0x7ff00000
 800dd5c:	7ca00000 	.word	0x7ca00000
 800dd60:	7fefffff 	.word	0x7fefffff
 800dd64:	f014 0310 	ands.w	r3, r4, #16
 800dd68:	bf18      	it	ne
 800dd6a:	236a      	movne	r3, #106	@ 0x6a
 800dd6c:	4ea9      	ldr	r6, [pc, #676]	@ (800e014 <_strtod_l+0x854>)
 800dd6e:	9308      	str	r3, [sp, #32]
 800dd70:	4650      	mov	r0, sl
 800dd72:	4659      	mov	r1, fp
 800dd74:	2300      	movs	r3, #0
 800dd76:	07e2      	lsls	r2, r4, #31
 800dd78:	d504      	bpl.n	800dd84 <_strtod_l+0x5c4>
 800dd7a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dd7e:	f7f2 fc63 	bl	8000648 <__aeabi_dmul>
 800dd82:	2301      	movs	r3, #1
 800dd84:	1064      	asrs	r4, r4, #1
 800dd86:	f106 0608 	add.w	r6, r6, #8
 800dd8a:	d1f4      	bne.n	800dd76 <_strtod_l+0x5b6>
 800dd8c:	b10b      	cbz	r3, 800dd92 <_strtod_l+0x5d2>
 800dd8e:	4682      	mov	sl, r0
 800dd90:	468b      	mov	fp, r1
 800dd92:	9b08      	ldr	r3, [sp, #32]
 800dd94:	b1b3      	cbz	r3, 800ddc4 <_strtod_l+0x604>
 800dd96:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800dd9a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	4659      	mov	r1, fp
 800dda2:	dd0f      	ble.n	800ddc4 <_strtod_l+0x604>
 800dda4:	2b1f      	cmp	r3, #31
 800dda6:	dd55      	ble.n	800de54 <_strtod_l+0x694>
 800dda8:	2b34      	cmp	r3, #52	@ 0x34
 800ddaa:	bfde      	ittt	le
 800ddac:	f04f 33ff 	movle.w	r3, #4294967295
 800ddb0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ddb4:	4093      	lslle	r3, r2
 800ddb6:	f04f 0a00 	mov.w	sl, #0
 800ddba:	bfcc      	ite	gt
 800ddbc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ddc0:	ea03 0b01 	andle.w	fp, r3, r1
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	4650      	mov	r0, sl
 800ddca:	4659      	mov	r1, fp
 800ddcc:	f7f2 fea4 	bl	8000b18 <__aeabi_dcmpeq>
 800ddd0:	2800      	cmp	r0, #0
 800ddd2:	d1a6      	bne.n	800dd22 <_strtod_l+0x562>
 800ddd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddd6:	9300      	str	r3, [sp, #0]
 800ddd8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ddda:	9805      	ldr	r0, [sp, #20]
 800dddc:	462b      	mov	r3, r5
 800ddde:	463a      	mov	r2, r7
 800dde0:	f7ff f8c6 	bl	800cf70 <__s2b>
 800dde4:	900a      	str	r0, [sp, #40]	@ 0x28
 800dde6:	2800      	cmp	r0, #0
 800dde8:	f43f af05 	beq.w	800dbf6 <_strtod_l+0x436>
 800ddec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ddee:	2a00      	cmp	r2, #0
 800ddf0:	eba9 0308 	sub.w	r3, r9, r8
 800ddf4:	bfa8      	it	ge
 800ddf6:	2300      	movge	r3, #0
 800ddf8:	9312      	str	r3, [sp, #72]	@ 0x48
 800ddfa:	2400      	movs	r4, #0
 800ddfc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800de00:	9316      	str	r3, [sp, #88]	@ 0x58
 800de02:	46a0      	mov	r8, r4
 800de04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de06:	9805      	ldr	r0, [sp, #20]
 800de08:	6859      	ldr	r1, [r3, #4]
 800de0a:	f7ff f809 	bl	800ce20 <_Balloc>
 800de0e:	4681      	mov	r9, r0
 800de10:	2800      	cmp	r0, #0
 800de12:	f43f aef4 	beq.w	800dbfe <_strtod_l+0x43e>
 800de16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de18:	691a      	ldr	r2, [r3, #16]
 800de1a:	3202      	adds	r2, #2
 800de1c:	f103 010c 	add.w	r1, r3, #12
 800de20:	0092      	lsls	r2, r2, #2
 800de22:	300c      	adds	r0, #12
 800de24:	f7fe f89b 	bl	800bf5e <memcpy>
 800de28:	ec4b ab10 	vmov	d0, sl, fp
 800de2c:	9805      	ldr	r0, [sp, #20]
 800de2e:	aa1c      	add	r2, sp, #112	@ 0x70
 800de30:	a91b      	add	r1, sp, #108	@ 0x6c
 800de32:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800de36:	f7ff fbd7 	bl	800d5e8 <__d2b>
 800de3a:	901a      	str	r0, [sp, #104]	@ 0x68
 800de3c:	2800      	cmp	r0, #0
 800de3e:	f43f aede 	beq.w	800dbfe <_strtod_l+0x43e>
 800de42:	9805      	ldr	r0, [sp, #20]
 800de44:	2101      	movs	r1, #1
 800de46:	f7ff f929 	bl	800d09c <__i2b>
 800de4a:	4680      	mov	r8, r0
 800de4c:	b948      	cbnz	r0, 800de62 <_strtod_l+0x6a2>
 800de4e:	f04f 0800 	mov.w	r8, #0
 800de52:	e6d4      	b.n	800dbfe <_strtod_l+0x43e>
 800de54:	f04f 32ff 	mov.w	r2, #4294967295
 800de58:	fa02 f303 	lsl.w	r3, r2, r3
 800de5c:	ea03 0a0a 	and.w	sl, r3, sl
 800de60:	e7b0      	b.n	800ddc4 <_strtod_l+0x604>
 800de62:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800de64:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800de66:	2d00      	cmp	r5, #0
 800de68:	bfab      	itete	ge
 800de6a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800de6c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800de6e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800de70:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800de72:	bfac      	ite	ge
 800de74:	18ef      	addge	r7, r5, r3
 800de76:	1b5e      	sublt	r6, r3, r5
 800de78:	9b08      	ldr	r3, [sp, #32]
 800de7a:	1aed      	subs	r5, r5, r3
 800de7c:	4415      	add	r5, r2
 800de7e:	4b66      	ldr	r3, [pc, #408]	@ (800e018 <_strtod_l+0x858>)
 800de80:	3d01      	subs	r5, #1
 800de82:	429d      	cmp	r5, r3
 800de84:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800de88:	da50      	bge.n	800df2c <_strtod_l+0x76c>
 800de8a:	1b5b      	subs	r3, r3, r5
 800de8c:	2b1f      	cmp	r3, #31
 800de8e:	eba2 0203 	sub.w	r2, r2, r3
 800de92:	f04f 0101 	mov.w	r1, #1
 800de96:	dc3d      	bgt.n	800df14 <_strtod_l+0x754>
 800de98:	fa01 f303 	lsl.w	r3, r1, r3
 800de9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800de9e:	2300      	movs	r3, #0
 800dea0:	9310      	str	r3, [sp, #64]	@ 0x40
 800dea2:	18bd      	adds	r5, r7, r2
 800dea4:	9b08      	ldr	r3, [sp, #32]
 800dea6:	42af      	cmp	r7, r5
 800dea8:	4416      	add	r6, r2
 800deaa:	441e      	add	r6, r3
 800deac:	463b      	mov	r3, r7
 800deae:	bfa8      	it	ge
 800deb0:	462b      	movge	r3, r5
 800deb2:	42b3      	cmp	r3, r6
 800deb4:	bfa8      	it	ge
 800deb6:	4633      	movge	r3, r6
 800deb8:	2b00      	cmp	r3, #0
 800deba:	bfc2      	ittt	gt
 800debc:	1aed      	subgt	r5, r5, r3
 800debe:	1af6      	subgt	r6, r6, r3
 800dec0:	1aff      	subgt	r7, r7, r3
 800dec2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	dd16      	ble.n	800def6 <_strtod_l+0x736>
 800dec8:	4641      	mov	r1, r8
 800deca:	9805      	ldr	r0, [sp, #20]
 800decc:	461a      	mov	r2, r3
 800dece:	f7ff f9a5 	bl	800d21c <__pow5mult>
 800ded2:	4680      	mov	r8, r0
 800ded4:	2800      	cmp	r0, #0
 800ded6:	d0ba      	beq.n	800de4e <_strtod_l+0x68e>
 800ded8:	4601      	mov	r1, r0
 800deda:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dedc:	9805      	ldr	r0, [sp, #20]
 800dede:	f7ff f8f3 	bl	800d0c8 <__multiply>
 800dee2:	900e      	str	r0, [sp, #56]	@ 0x38
 800dee4:	2800      	cmp	r0, #0
 800dee6:	f43f ae8a 	beq.w	800dbfe <_strtod_l+0x43e>
 800deea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800deec:	9805      	ldr	r0, [sp, #20]
 800deee:	f7fe ffd7 	bl	800cea0 <_Bfree>
 800def2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800def4:	931a      	str	r3, [sp, #104]	@ 0x68
 800def6:	2d00      	cmp	r5, #0
 800def8:	dc1d      	bgt.n	800df36 <_strtod_l+0x776>
 800defa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800defc:	2b00      	cmp	r3, #0
 800defe:	dd23      	ble.n	800df48 <_strtod_l+0x788>
 800df00:	4649      	mov	r1, r9
 800df02:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800df04:	9805      	ldr	r0, [sp, #20]
 800df06:	f7ff f989 	bl	800d21c <__pow5mult>
 800df0a:	4681      	mov	r9, r0
 800df0c:	b9e0      	cbnz	r0, 800df48 <_strtod_l+0x788>
 800df0e:	f04f 0900 	mov.w	r9, #0
 800df12:	e674      	b.n	800dbfe <_strtod_l+0x43e>
 800df14:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800df18:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800df1c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800df20:	35e2      	adds	r5, #226	@ 0xe2
 800df22:	fa01 f305 	lsl.w	r3, r1, r5
 800df26:	9310      	str	r3, [sp, #64]	@ 0x40
 800df28:	9113      	str	r1, [sp, #76]	@ 0x4c
 800df2a:	e7ba      	b.n	800dea2 <_strtod_l+0x6e2>
 800df2c:	2300      	movs	r3, #0
 800df2e:	9310      	str	r3, [sp, #64]	@ 0x40
 800df30:	2301      	movs	r3, #1
 800df32:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df34:	e7b5      	b.n	800dea2 <_strtod_l+0x6e2>
 800df36:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800df38:	9805      	ldr	r0, [sp, #20]
 800df3a:	462a      	mov	r2, r5
 800df3c:	f7ff f9c8 	bl	800d2d0 <__lshift>
 800df40:	901a      	str	r0, [sp, #104]	@ 0x68
 800df42:	2800      	cmp	r0, #0
 800df44:	d1d9      	bne.n	800defa <_strtod_l+0x73a>
 800df46:	e65a      	b.n	800dbfe <_strtod_l+0x43e>
 800df48:	2e00      	cmp	r6, #0
 800df4a:	dd07      	ble.n	800df5c <_strtod_l+0x79c>
 800df4c:	4649      	mov	r1, r9
 800df4e:	9805      	ldr	r0, [sp, #20]
 800df50:	4632      	mov	r2, r6
 800df52:	f7ff f9bd 	bl	800d2d0 <__lshift>
 800df56:	4681      	mov	r9, r0
 800df58:	2800      	cmp	r0, #0
 800df5a:	d0d8      	beq.n	800df0e <_strtod_l+0x74e>
 800df5c:	2f00      	cmp	r7, #0
 800df5e:	dd08      	ble.n	800df72 <_strtod_l+0x7b2>
 800df60:	4641      	mov	r1, r8
 800df62:	9805      	ldr	r0, [sp, #20]
 800df64:	463a      	mov	r2, r7
 800df66:	f7ff f9b3 	bl	800d2d0 <__lshift>
 800df6a:	4680      	mov	r8, r0
 800df6c:	2800      	cmp	r0, #0
 800df6e:	f43f ae46 	beq.w	800dbfe <_strtod_l+0x43e>
 800df72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800df74:	9805      	ldr	r0, [sp, #20]
 800df76:	464a      	mov	r2, r9
 800df78:	f7ff fa32 	bl	800d3e0 <__mdiff>
 800df7c:	4604      	mov	r4, r0
 800df7e:	2800      	cmp	r0, #0
 800df80:	f43f ae3d 	beq.w	800dbfe <_strtod_l+0x43e>
 800df84:	68c3      	ldr	r3, [r0, #12]
 800df86:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df88:	2300      	movs	r3, #0
 800df8a:	60c3      	str	r3, [r0, #12]
 800df8c:	4641      	mov	r1, r8
 800df8e:	f7ff fa0b 	bl	800d3a8 <__mcmp>
 800df92:	2800      	cmp	r0, #0
 800df94:	da46      	bge.n	800e024 <_strtod_l+0x864>
 800df96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df98:	ea53 030a 	orrs.w	r3, r3, sl
 800df9c:	d16c      	bne.n	800e078 <_strtod_l+0x8b8>
 800df9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d168      	bne.n	800e078 <_strtod_l+0x8b8>
 800dfa6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dfaa:	0d1b      	lsrs	r3, r3, #20
 800dfac:	051b      	lsls	r3, r3, #20
 800dfae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dfb2:	d961      	bls.n	800e078 <_strtod_l+0x8b8>
 800dfb4:	6963      	ldr	r3, [r4, #20]
 800dfb6:	b913      	cbnz	r3, 800dfbe <_strtod_l+0x7fe>
 800dfb8:	6923      	ldr	r3, [r4, #16]
 800dfba:	2b01      	cmp	r3, #1
 800dfbc:	dd5c      	ble.n	800e078 <_strtod_l+0x8b8>
 800dfbe:	4621      	mov	r1, r4
 800dfc0:	2201      	movs	r2, #1
 800dfc2:	9805      	ldr	r0, [sp, #20]
 800dfc4:	f7ff f984 	bl	800d2d0 <__lshift>
 800dfc8:	4641      	mov	r1, r8
 800dfca:	4604      	mov	r4, r0
 800dfcc:	f7ff f9ec 	bl	800d3a8 <__mcmp>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	dd51      	ble.n	800e078 <_strtod_l+0x8b8>
 800dfd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dfd8:	9a08      	ldr	r2, [sp, #32]
 800dfda:	0d1b      	lsrs	r3, r3, #20
 800dfdc:	051b      	lsls	r3, r3, #20
 800dfde:	2a00      	cmp	r2, #0
 800dfe0:	d06b      	beq.n	800e0ba <_strtod_l+0x8fa>
 800dfe2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dfe6:	d868      	bhi.n	800e0ba <_strtod_l+0x8fa>
 800dfe8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dfec:	f67f ae9d 	bls.w	800dd2a <_strtod_l+0x56a>
 800dff0:	4b0a      	ldr	r3, [pc, #40]	@ (800e01c <_strtod_l+0x85c>)
 800dff2:	4650      	mov	r0, sl
 800dff4:	4659      	mov	r1, fp
 800dff6:	2200      	movs	r2, #0
 800dff8:	f7f2 fb26 	bl	8000648 <__aeabi_dmul>
 800dffc:	4b08      	ldr	r3, [pc, #32]	@ (800e020 <_strtod_l+0x860>)
 800dffe:	400b      	ands	r3, r1
 800e000:	4682      	mov	sl, r0
 800e002:	468b      	mov	fp, r1
 800e004:	2b00      	cmp	r3, #0
 800e006:	f47f ae05 	bne.w	800dc14 <_strtod_l+0x454>
 800e00a:	9a05      	ldr	r2, [sp, #20]
 800e00c:	2322      	movs	r3, #34	@ 0x22
 800e00e:	6013      	str	r3, [r2, #0]
 800e010:	e600      	b.n	800dc14 <_strtod_l+0x454>
 800e012:	bf00      	nop
 800e014:	0800fe28 	.word	0x0800fe28
 800e018:	fffffc02 	.word	0xfffffc02
 800e01c:	39500000 	.word	0x39500000
 800e020:	7ff00000 	.word	0x7ff00000
 800e024:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e028:	d165      	bne.n	800e0f6 <_strtod_l+0x936>
 800e02a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e02c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e030:	b35a      	cbz	r2, 800e08a <_strtod_l+0x8ca>
 800e032:	4a9f      	ldr	r2, [pc, #636]	@ (800e2b0 <_strtod_l+0xaf0>)
 800e034:	4293      	cmp	r3, r2
 800e036:	d12b      	bne.n	800e090 <_strtod_l+0x8d0>
 800e038:	9b08      	ldr	r3, [sp, #32]
 800e03a:	4651      	mov	r1, sl
 800e03c:	b303      	cbz	r3, 800e080 <_strtod_l+0x8c0>
 800e03e:	4b9d      	ldr	r3, [pc, #628]	@ (800e2b4 <_strtod_l+0xaf4>)
 800e040:	465a      	mov	r2, fp
 800e042:	4013      	ands	r3, r2
 800e044:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e048:	f04f 32ff 	mov.w	r2, #4294967295
 800e04c:	d81b      	bhi.n	800e086 <_strtod_l+0x8c6>
 800e04e:	0d1b      	lsrs	r3, r3, #20
 800e050:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e054:	fa02 f303 	lsl.w	r3, r2, r3
 800e058:	4299      	cmp	r1, r3
 800e05a:	d119      	bne.n	800e090 <_strtod_l+0x8d0>
 800e05c:	4b96      	ldr	r3, [pc, #600]	@ (800e2b8 <_strtod_l+0xaf8>)
 800e05e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e060:	429a      	cmp	r2, r3
 800e062:	d102      	bne.n	800e06a <_strtod_l+0x8aa>
 800e064:	3101      	adds	r1, #1
 800e066:	f43f adca 	beq.w	800dbfe <_strtod_l+0x43e>
 800e06a:	4b92      	ldr	r3, [pc, #584]	@ (800e2b4 <_strtod_l+0xaf4>)
 800e06c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e06e:	401a      	ands	r2, r3
 800e070:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e074:	f04f 0a00 	mov.w	sl, #0
 800e078:	9b08      	ldr	r3, [sp, #32]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d1b8      	bne.n	800dff0 <_strtod_l+0x830>
 800e07e:	e5c9      	b.n	800dc14 <_strtod_l+0x454>
 800e080:	f04f 33ff 	mov.w	r3, #4294967295
 800e084:	e7e8      	b.n	800e058 <_strtod_l+0x898>
 800e086:	4613      	mov	r3, r2
 800e088:	e7e6      	b.n	800e058 <_strtod_l+0x898>
 800e08a:	ea53 030a 	orrs.w	r3, r3, sl
 800e08e:	d0a1      	beq.n	800dfd4 <_strtod_l+0x814>
 800e090:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e092:	b1db      	cbz	r3, 800e0cc <_strtod_l+0x90c>
 800e094:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e096:	4213      	tst	r3, r2
 800e098:	d0ee      	beq.n	800e078 <_strtod_l+0x8b8>
 800e09a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e09c:	9a08      	ldr	r2, [sp, #32]
 800e09e:	4650      	mov	r0, sl
 800e0a0:	4659      	mov	r1, fp
 800e0a2:	b1bb      	cbz	r3, 800e0d4 <_strtod_l+0x914>
 800e0a4:	f7ff fb6e 	bl	800d784 <sulp>
 800e0a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0ac:	ec53 2b10 	vmov	r2, r3, d0
 800e0b0:	f7f2 f914 	bl	80002dc <__adddf3>
 800e0b4:	4682      	mov	sl, r0
 800e0b6:	468b      	mov	fp, r1
 800e0b8:	e7de      	b.n	800e078 <_strtod_l+0x8b8>
 800e0ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e0be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e0c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e0c6:	f04f 3aff 	mov.w	sl, #4294967295
 800e0ca:	e7d5      	b.n	800e078 <_strtod_l+0x8b8>
 800e0cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e0ce:	ea13 0f0a 	tst.w	r3, sl
 800e0d2:	e7e1      	b.n	800e098 <_strtod_l+0x8d8>
 800e0d4:	f7ff fb56 	bl	800d784 <sulp>
 800e0d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0dc:	ec53 2b10 	vmov	r2, r3, d0
 800e0e0:	f7f2 f8fa 	bl	80002d8 <__aeabi_dsub>
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	4682      	mov	sl, r0
 800e0ea:	468b      	mov	fp, r1
 800e0ec:	f7f2 fd14 	bl	8000b18 <__aeabi_dcmpeq>
 800e0f0:	2800      	cmp	r0, #0
 800e0f2:	d0c1      	beq.n	800e078 <_strtod_l+0x8b8>
 800e0f4:	e619      	b.n	800dd2a <_strtod_l+0x56a>
 800e0f6:	4641      	mov	r1, r8
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	f7ff facd 	bl	800d698 <__ratio>
 800e0fe:	ec57 6b10 	vmov	r6, r7, d0
 800e102:	2200      	movs	r2, #0
 800e104:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e108:	4630      	mov	r0, r6
 800e10a:	4639      	mov	r1, r7
 800e10c:	f7f2 fd18 	bl	8000b40 <__aeabi_dcmple>
 800e110:	2800      	cmp	r0, #0
 800e112:	d06f      	beq.n	800e1f4 <_strtod_l+0xa34>
 800e114:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e116:	2b00      	cmp	r3, #0
 800e118:	d17a      	bne.n	800e210 <_strtod_l+0xa50>
 800e11a:	f1ba 0f00 	cmp.w	sl, #0
 800e11e:	d158      	bne.n	800e1d2 <_strtod_l+0xa12>
 800e120:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e122:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e126:	2b00      	cmp	r3, #0
 800e128:	d15a      	bne.n	800e1e0 <_strtod_l+0xa20>
 800e12a:	4b64      	ldr	r3, [pc, #400]	@ (800e2bc <_strtod_l+0xafc>)
 800e12c:	2200      	movs	r2, #0
 800e12e:	4630      	mov	r0, r6
 800e130:	4639      	mov	r1, r7
 800e132:	f7f2 fcfb 	bl	8000b2c <__aeabi_dcmplt>
 800e136:	2800      	cmp	r0, #0
 800e138:	d159      	bne.n	800e1ee <_strtod_l+0xa2e>
 800e13a:	4630      	mov	r0, r6
 800e13c:	4639      	mov	r1, r7
 800e13e:	4b60      	ldr	r3, [pc, #384]	@ (800e2c0 <_strtod_l+0xb00>)
 800e140:	2200      	movs	r2, #0
 800e142:	f7f2 fa81 	bl	8000648 <__aeabi_dmul>
 800e146:	4606      	mov	r6, r0
 800e148:	460f      	mov	r7, r1
 800e14a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e14e:	9606      	str	r6, [sp, #24]
 800e150:	9307      	str	r3, [sp, #28]
 800e152:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e156:	4d57      	ldr	r5, [pc, #348]	@ (800e2b4 <_strtod_l+0xaf4>)
 800e158:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e15c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e15e:	401d      	ands	r5, r3
 800e160:	4b58      	ldr	r3, [pc, #352]	@ (800e2c4 <_strtod_l+0xb04>)
 800e162:	429d      	cmp	r5, r3
 800e164:	f040 80b2 	bne.w	800e2cc <_strtod_l+0xb0c>
 800e168:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e16a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e16e:	ec4b ab10 	vmov	d0, sl, fp
 800e172:	f7ff f9c9 	bl	800d508 <__ulp>
 800e176:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e17a:	ec51 0b10 	vmov	r0, r1, d0
 800e17e:	f7f2 fa63 	bl	8000648 <__aeabi_dmul>
 800e182:	4652      	mov	r2, sl
 800e184:	465b      	mov	r3, fp
 800e186:	f7f2 f8a9 	bl	80002dc <__adddf3>
 800e18a:	460b      	mov	r3, r1
 800e18c:	4949      	ldr	r1, [pc, #292]	@ (800e2b4 <_strtod_l+0xaf4>)
 800e18e:	4a4e      	ldr	r2, [pc, #312]	@ (800e2c8 <_strtod_l+0xb08>)
 800e190:	4019      	ands	r1, r3
 800e192:	4291      	cmp	r1, r2
 800e194:	4682      	mov	sl, r0
 800e196:	d942      	bls.n	800e21e <_strtod_l+0xa5e>
 800e198:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e19a:	4b47      	ldr	r3, [pc, #284]	@ (800e2b8 <_strtod_l+0xaf8>)
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d103      	bne.n	800e1a8 <_strtod_l+0x9e8>
 800e1a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	f43f ad2b 	beq.w	800dbfe <_strtod_l+0x43e>
 800e1a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e2b8 <_strtod_l+0xaf8>
 800e1ac:	f04f 3aff 	mov.w	sl, #4294967295
 800e1b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e1b2:	9805      	ldr	r0, [sp, #20]
 800e1b4:	f7fe fe74 	bl	800cea0 <_Bfree>
 800e1b8:	9805      	ldr	r0, [sp, #20]
 800e1ba:	4649      	mov	r1, r9
 800e1bc:	f7fe fe70 	bl	800cea0 <_Bfree>
 800e1c0:	9805      	ldr	r0, [sp, #20]
 800e1c2:	4641      	mov	r1, r8
 800e1c4:	f7fe fe6c 	bl	800cea0 <_Bfree>
 800e1c8:	9805      	ldr	r0, [sp, #20]
 800e1ca:	4621      	mov	r1, r4
 800e1cc:	f7fe fe68 	bl	800cea0 <_Bfree>
 800e1d0:	e618      	b.n	800de04 <_strtod_l+0x644>
 800e1d2:	f1ba 0f01 	cmp.w	sl, #1
 800e1d6:	d103      	bne.n	800e1e0 <_strtod_l+0xa20>
 800e1d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	f43f ada5 	beq.w	800dd2a <_strtod_l+0x56a>
 800e1e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e290 <_strtod_l+0xad0>
 800e1e4:	4f35      	ldr	r7, [pc, #212]	@ (800e2bc <_strtod_l+0xafc>)
 800e1e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e1ea:	2600      	movs	r6, #0
 800e1ec:	e7b1      	b.n	800e152 <_strtod_l+0x992>
 800e1ee:	4f34      	ldr	r7, [pc, #208]	@ (800e2c0 <_strtod_l+0xb00>)
 800e1f0:	2600      	movs	r6, #0
 800e1f2:	e7aa      	b.n	800e14a <_strtod_l+0x98a>
 800e1f4:	4b32      	ldr	r3, [pc, #200]	@ (800e2c0 <_strtod_l+0xb00>)
 800e1f6:	4630      	mov	r0, r6
 800e1f8:	4639      	mov	r1, r7
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	f7f2 fa24 	bl	8000648 <__aeabi_dmul>
 800e200:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e202:	4606      	mov	r6, r0
 800e204:	460f      	mov	r7, r1
 800e206:	2b00      	cmp	r3, #0
 800e208:	d09f      	beq.n	800e14a <_strtod_l+0x98a>
 800e20a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e20e:	e7a0      	b.n	800e152 <_strtod_l+0x992>
 800e210:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e298 <_strtod_l+0xad8>
 800e214:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e218:	ec57 6b17 	vmov	r6, r7, d7
 800e21c:	e799      	b.n	800e152 <_strtod_l+0x992>
 800e21e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e222:	9b08      	ldr	r3, [sp, #32]
 800e224:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d1c1      	bne.n	800e1b0 <_strtod_l+0x9f0>
 800e22c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e230:	0d1b      	lsrs	r3, r3, #20
 800e232:	051b      	lsls	r3, r3, #20
 800e234:	429d      	cmp	r5, r3
 800e236:	d1bb      	bne.n	800e1b0 <_strtod_l+0x9f0>
 800e238:	4630      	mov	r0, r6
 800e23a:	4639      	mov	r1, r7
 800e23c:	f7f2 fd64 	bl	8000d08 <__aeabi_d2lz>
 800e240:	f7f2 f9d4 	bl	80005ec <__aeabi_l2d>
 800e244:	4602      	mov	r2, r0
 800e246:	460b      	mov	r3, r1
 800e248:	4630      	mov	r0, r6
 800e24a:	4639      	mov	r1, r7
 800e24c:	f7f2 f844 	bl	80002d8 <__aeabi_dsub>
 800e250:	460b      	mov	r3, r1
 800e252:	4602      	mov	r2, r0
 800e254:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e258:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e25c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e25e:	ea46 060a 	orr.w	r6, r6, sl
 800e262:	431e      	orrs	r6, r3
 800e264:	d06f      	beq.n	800e346 <_strtod_l+0xb86>
 800e266:	a30e      	add	r3, pc, #56	@ (adr r3, 800e2a0 <_strtod_l+0xae0>)
 800e268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e26c:	f7f2 fc5e 	bl	8000b2c <__aeabi_dcmplt>
 800e270:	2800      	cmp	r0, #0
 800e272:	f47f accf 	bne.w	800dc14 <_strtod_l+0x454>
 800e276:	a30c      	add	r3, pc, #48	@ (adr r3, 800e2a8 <_strtod_l+0xae8>)
 800e278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e280:	f7f2 fc72 	bl	8000b68 <__aeabi_dcmpgt>
 800e284:	2800      	cmp	r0, #0
 800e286:	d093      	beq.n	800e1b0 <_strtod_l+0x9f0>
 800e288:	e4c4      	b.n	800dc14 <_strtod_l+0x454>
 800e28a:	bf00      	nop
 800e28c:	f3af 8000 	nop.w
 800e290:	00000000 	.word	0x00000000
 800e294:	bff00000 	.word	0xbff00000
 800e298:	00000000 	.word	0x00000000
 800e29c:	3ff00000 	.word	0x3ff00000
 800e2a0:	94a03595 	.word	0x94a03595
 800e2a4:	3fdfffff 	.word	0x3fdfffff
 800e2a8:	35afe535 	.word	0x35afe535
 800e2ac:	3fe00000 	.word	0x3fe00000
 800e2b0:	000fffff 	.word	0x000fffff
 800e2b4:	7ff00000 	.word	0x7ff00000
 800e2b8:	7fefffff 	.word	0x7fefffff
 800e2bc:	3ff00000 	.word	0x3ff00000
 800e2c0:	3fe00000 	.word	0x3fe00000
 800e2c4:	7fe00000 	.word	0x7fe00000
 800e2c8:	7c9fffff 	.word	0x7c9fffff
 800e2cc:	9b08      	ldr	r3, [sp, #32]
 800e2ce:	b323      	cbz	r3, 800e31a <_strtod_l+0xb5a>
 800e2d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e2d4:	d821      	bhi.n	800e31a <_strtod_l+0xb5a>
 800e2d6:	a328      	add	r3, pc, #160	@ (adr r3, 800e378 <_strtod_l+0xbb8>)
 800e2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2dc:	4630      	mov	r0, r6
 800e2de:	4639      	mov	r1, r7
 800e2e0:	f7f2 fc2e 	bl	8000b40 <__aeabi_dcmple>
 800e2e4:	b1a0      	cbz	r0, 800e310 <_strtod_l+0xb50>
 800e2e6:	4639      	mov	r1, r7
 800e2e8:	4630      	mov	r0, r6
 800e2ea:	f7f2 fc85 	bl	8000bf8 <__aeabi_d2uiz>
 800e2ee:	2801      	cmp	r0, #1
 800e2f0:	bf38      	it	cc
 800e2f2:	2001      	movcc	r0, #1
 800e2f4:	f7f2 f92e 	bl	8000554 <__aeabi_ui2d>
 800e2f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2fa:	4606      	mov	r6, r0
 800e2fc:	460f      	mov	r7, r1
 800e2fe:	b9fb      	cbnz	r3, 800e340 <_strtod_l+0xb80>
 800e300:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e304:	9014      	str	r0, [sp, #80]	@ 0x50
 800e306:	9315      	str	r3, [sp, #84]	@ 0x54
 800e308:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e30c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e310:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e312:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e316:	1b5b      	subs	r3, r3, r5
 800e318:	9311      	str	r3, [sp, #68]	@ 0x44
 800e31a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e31e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e322:	f7ff f8f1 	bl	800d508 <__ulp>
 800e326:	4650      	mov	r0, sl
 800e328:	ec53 2b10 	vmov	r2, r3, d0
 800e32c:	4659      	mov	r1, fp
 800e32e:	f7f2 f98b 	bl	8000648 <__aeabi_dmul>
 800e332:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e336:	f7f1 ffd1 	bl	80002dc <__adddf3>
 800e33a:	4682      	mov	sl, r0
 800e33c:	468b      	mov	fp, r1
 800e33e:	e770      	b.n	800e222 <_strtod_l+0xa62>
 800e340:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e344:	e7e0      	b.n	800e308 <_strtod_l+0xb48>
 800e346:	a30e      	add	r3, pc, #56	@ (adr r3, 800e380 <_strtod_l+0xbc0>)
 800e348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e34c:	f7f2 fbee 	bl	8000b2c <__aeabi_dcmplt>
 800e350:	e798      	b.n	800e284 <_strtod_l+0xac4>
 800e352:	2300      	movs	r3, #0
 800e354:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e356:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e358:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e35a:	6013      	str	r3, [r2, #0]
 800e35c:	f7ff ba6d 	b.w	800d83a <_strtod_l+0x7a>
 800e360:	2a65      	cmp	r2, #101	@ 0x65
 800e362:	f43f ab66 	beq.w	800da32 <_strtod_l+0x272>
 800e366:	2a45      	cmp	r2, #69	@ 0x45
 800e368:	f43f ab63 	beq.w	800da32 <_strtod_l+0x272>
 800e36c:	2301      	movs	r3, #1
 800e36e:	f7ff bb9e 	b.w	800daae <_strtod_l+0x2ee>
 800e372:	bf00      	nop
 800e374:	f3af 8000 	nop.w
 800e378:	ffc00000 	.word	0xffc00000
 800e37c:	41dfffff 	.word	0x41dfffff
 800e380:	94a03595 	.word	0x94a03595
 800e384:	3fcfffff 	.word	0x3fcfffff

0800e388 <_strtod_r>:
 800e388:	4b01      	ldr	r3, [pc, #4]	@ (800e390 <_strtod_r+0x8>)
 800e38a:	f7ff ba19 	b.w	800d7c0 <_strtod_l>
 800e38e:	bf00      	nop
 800e390:	20000238 	.word	0x20000238

0800e394 <_strtol_l.constprop.0>:
 800e394:	2b24      	cmp	r3, #36	@ 0x24
 800e396:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e39a:	4686      	mov	lr, r0
 800e39c:	4690      	mov	r8, r2
 800e39e:	d801      	bhi.n	800e3a4 <_strtol_l.constprop.0+0x10>
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	d106      	bne.n	800e3b2 <_strtol_l.constprop.0+0x1e>
 800e3a4:	f7fd fdae 	bl	800bf04 <__errno>
 800e3a8:	2316      	movs	r3, #22
 800e3aa:	6003      	str	r3, [r0, #0]
 800e3ac:	2000      	movs	r0, #0
 800e3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3b2:	4834      	ldr	r0, [pc, #208]	@ (800e484 <_strtol_l.constprop.0+0xf0>)
 800e3b4:	460d      	mov	r5, r1
 800e3b6:	462a      	mov	r2, r5
 800e3b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e3bc:	5d06      	ldrb	r6, [r0, r4]
 800e3be:	f016 0608 	ands.w	r6, r6, #8
 800e3c2:	d1f8      	bne.n	800e3b6 <_strtol_l.constprop.0+0x22>
 800e3c4:	2c2d      	cmp	r4, #45	@ 0x2d
 800e3c6:	d12d      	bne.n	800e424 <_strtol_l.constprop.0+0x90>
 800e3c8:	782c      	ldrb	r4, [r5, #0]
 800e3ca:	2601      	movs	r6, #1
 800e3cc:	1c95      	adds	r5, r2, #2
 800e3ce:	f033 0210 	bics.w	r2, r3, #16
 800e3d2:	d109      	bne.n	800e3e8 <_strtol_l.constprop.0+0x54>
 800e3d4:	2c30      	cmp	r4, #48	@ 0x30
 800e3d6:	d12a      	bne.n	800e42e <_strtol_l.constprop.0+0x9a>
 800e3d8:	782a      	ldrb	r2, [r5, #0]
 800e3da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e3de:	2a58      	cmp	r2, #88	@ 0x58
 800e3e0:	d125      	bne.n	800e42e <_strtol_l.constprop.0+0x9a>
 800e3e2:	786c      	ldrb	r4, [r5, #1]
 800e3e4:	2310      	movs	r3, #16
 800e3e6:	3502      	adds	r5, #2
 800e3e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e3ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	fbbc f9f3 	udiv	r9, ip, r3
 800e3f6:	4610      	mov	r0, r2
 800e3f8:	fb03 ca19 	mls	sl, r3, r9, ip
 800e3fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e400:	2f09      	cmp	r7, #9
 800e402:	d81b      	bhi.n	800e43c <_strtol_l.constprop.0+0xa8>
 800e404:	463c      	mov	r4, r7
 800e406:	42a3      	cmp	r3, r4
 800e408:	dd27      	ble.n	800e45a <_strtol_l.constprop.0+0xc6>
 800e40a:	1c57      	adds	r7, r2, #1
 800e40c:	d007      	beq.n	800e41e <_strtol_l.constprop.0+0x8a>
 800e40e:	4581      	cmp	r9, r0
 800e410:	d320      	bcc.n	800e454 <_strtol_l.constprop.0+0xc0>
 800e412:	d101      	bne.n	800e418 <_strtol_l.constprop.0+0x84>
 800e414:	45a2      	cmp	sl, r4
 800e416:	db1d      	blt.n	800e454 <_strtol_l.constprop.0+0xc0>
 800e418:	fb00 4003 	mla	r0, r0, r3, r4
 800e41c:	2201      	movs	r2, #1
 800e41e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e422:	e7eb      	b.n	800e3fc <_strtol_l.constprop.0+0x68>
 800e424:	2c2b      	cmp	r4, #43	@ 0x2b
 800e426:	bf04      	itt	eq
 800e428:	782c      	ldrbeq	r4, [r5, #0]
 800e42a:	1c95      	addeq	r5, r2, #2
 800e42c:	e7cf      	b.n	800e3ce <_strtol_l.constprop.0+0x3a>
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d1da      	bne.n	800e3e8 <_strtol_l.constprop.0+0x54>
 800e432:	2c30      	cmp	r4, #48	@ 0x30
 800e434:	bf0c      	ite	eq
 800e436:	2308      	moveq	r3, #8
 800e438:	230a      	movne	r3, #10
 800e43a:	e7d5      	b.n	800e3e8 <_strtol_l.constprop.0+0x54>
 800e43c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e440:	2f19      	cmp	r7, #25
 800e442:	d801      	bhi.n	800e448 <_strtol_l.constprop.0+0xb4>
 800e444:	3c37      	subs	r4, #55	@ 0x37
 800e446:	e7de      	b.n	800e406 <_strtol_l.constprop.0+0x72>
 800e448:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e44c:	2f19      	cmp	r7, #25
 800e44e:	d804      	bhi.n	800e45a <_strtol_l.constprop.0+0xc6>
 800e450:	3c57      	subs	r4, #87	@ 0x57
 800e452:	e7d8      	b.n	800e406 <_strtol_l.constprop.0+0x72>
 800e454:	f04f 32ff 	mov.w	r2, #4294967295
 800e458:	e7e1      	b.n	800e41e <_strtol_l.constprop.0+0x8a>
 800e45a:	1c53      	adds	r3, r2, #1
 800e45c:	d108      	bne.n	800e470 <_strtol_l.constprop.0+0xdc>
 800e45e:	2322      	movs	r3, #34	@ 0x22
 800e460:	f8ce 3000 	str.w	r3, [lr]
 800e464:	4660      	mov	r0, ip
 800e466:	f1b8 0f00 	cmp.w	r8, #0
 800e46a:	d0a0      	beq.n	800e3ae <_strtol_l.constprop.0+0x1a>
 800e46c:	1e69      	subs	r1, r5, #1
 800e46e:	e006      	b.n	800e47e <_strtol_l.constprop.0+0xea>
 800e470:	b106      	cbz	r6, 800e474 <_strtol_l.constprop.0+0xe0>
 800e472:	4240      	negs	r0, r0
 800e474:	f1b8 0f00 	cmp.w	r8, #0
 800e478:	d099      	beq.n	800e3ae <_strtol_l.constprop.0+0x1a>
 800e47a:	2a00      	cmp	r2, #0
 800e47c:	d1f6      	bne.n	800e46c <_strtol_l.constprop.0+0xd8>
 800e47e:	f8c8 1000 	str.w	r1, [r8]
 800e482:	e794      	b.n	800e3ae <_strtol_l.constprop.0+0x1a>
 800e484:	0800fe51 	.word	0x0800fe51

0800e488 <_strtol_r>:
 800e488:	f7ff bf84 	b.w	800e394 <_strtol_l.constprop.0>

0800e48c <__ssputs_r>:
 800e48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e490:	688e      	ldr	r6, [r1, #8]
 800e492:	461f      	mov	r7, r3
 800e494:	42be      	cmp	r6, r7
 800e496:	680b      	ldr	r3, [r1, #0]
 800e498:	4682      	mov	sl, r0
 800e49a:	460c      	mov	r4, r1
 800e49c:	4690      	mov	r8, r2
 800e49e:	d82d      	bhi.n	800e4fc <__ssputs_r+0x70>
 800e4a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e4a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e4a8:	d026      	beq.n	800e4f8 <__ssputs_r+0x6c>
 800e4aa:	6965      	ldr	r5, [r4, #20]
 800e4ac:	6909      	ldr	r1, [r1, #16]
 800e4ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e4b2:	eba3 0901 	sub.w	r9, r3, r1
 800e4b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e4ba:	1c7b      	adds	r3, r7, #1
 800e4bc:	444b      	add	r3, r9
 800e4be:	106d      	asrs	r5, r5, #1
 800e4c0:	429d      	cmp	r5, r3
 800e4c2:	bf38      	it	cc
 800e4c4:	461d      	movcc	r5, r3
 800e4c6:	0553      	lsls	r3, r2, #21
 800e4c8:	d527      	bpl.n	800e51a <__ssputs_r+0x8e>
 800e4ca:	4629      	mov	r1, r5
 800e4cc:	f7fe fc1c 	bl	800cd08 <_malloc_r>
 800e4d0:	4606      	mov	r6, r0
 800e4d2:	b360      	cbz	r0, 800e52e <__ssputs_r+0xa2>
 800e4d4:	6921      	ldr	r1, [r4, #16]
 800e4d6:	464a      	mov	r2, r9
 800e4d8:	f7fd fd41 	bl	800bf5e <memcpy>
 800e4dc:	89a3      	ldrh	r3, [r4, #12]
 800e4de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e4e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4e6:	81a3      	strh	r3, [r4, #12]
 800e4e8:	6126      	str	r6, [r4, #16]
 800e4ea:	6165      	str	r5, [r4, #20]
 800e4ec:	444e      	add	r6, r9
 800e4ee:	eba5 0509 	sub.w	r5, r5, r9
 800e4f2:	6026      	str	r6, [r4, #0]
 800e4f4:	60a5      	str	r5, [r4, #8]
 800e4f6:	463e      	mov	r6, r7
 800e4f8:	42be      	cmp	r6, r7
 800e4fa:	d900      	bls.n	800e4fe <__ssputs_r+0x72>
 800e4fc:	463e      	mov	r6, r7
 800e4fe:	6820      	ldr	r0, [r4, #0]
 800e500:	4632      	mov	r2, r6
 800e502:	4641      	mov	r1, r8
 800e504:	f000 fb6a 	bl	800ebdc <memmove>
 800e508:	68a3      	ldr	r3, [r4, #8]
 800e50a:	1b9b      	subs	r3, r3, r6
 800e50c:	60a3      	str	r3, [r4, #8]
 800e50e:	6823      	ldr	r3, [r4, #0]
 800e510:	4433      	add	r3, r6
 800e512:	6023      	str	r3, [r4, #0]
 800e514:	2000      	movs	r0, #0
 800e516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e51a:	462a      	mov	r2, r5
 800e51c:	f000 ff41 	bl	800f3a2 <_realloc_r>
 800e520:	4606      	mov	r6, r0
 800e522:	2800      	cmp	r0, #0
 800e524:	d1e0      	bne.n	800e4e8 <__ssputs_r+0x5c>
 800e526:	6921      	ldr	r1, [r4, #16]
 800e528:	4650      	mov	r0, sl
 800e52a:	f7fe fb79 	bl	800cc20 <_free_r>
 800e52e:	230c      	movs	r3, #12
 800e530:	f8ca 3000 	str.w	r3, [sl]
 800e534:	89a3      	ldrh	r3, [r4, #12]
 800e536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e53a:	81a3      	strh	r3, [r4, #12]
 800e53c:	f04f 30ff 	mov.w	r0, #4294967295
 800e540:	e7e9      	b.n	800e516 <__ssputs_r+0x8a>
	...

0800e544 <_svfiprintf_r>:
 800e544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e548:	4698      	mov	r8, r3
 800e54a:	898b      	ldrh	r3, [r1, #12]
 800e54c:	061b      	lsls	r3, r3, #24
 800e54e:	b09d      	sub	sp, #116	@ 0x74
 800e550:	4607      	mov	r7, r0
 800e552:	460d      	mov	r5, r1
 800e554:	4614      	mov	r4, r2
 800e556:	d510      	bpl.n	800e57a <_svfiprintf_r+0x36>
 800e558:	690b      	ldr	r3, [r1, #16]
 800e55a:	b973      	cbnz	r3, 800e57a <_svfiprintf_r+0x36>
 800e55c:	2140      	movs	r1, #64	@ 0x40
 800e55e:	f7fe fbd3 	bl	800cd08 <_malloc_r>
 800e562:	6028      	str	r0, [r5, #0]
 800e564:	6128      	str	r0, [r5, #16]
 800e566:	b930      	cbnz	r0, 800e576 <_svfiprintf_r+0x32>
 800e568:	230c      	movs	r3, #12
 800e56a:	603b      	str	r3, [r7, #0]
 800e56c:	f04f 30ff 	mov.w	r0, #4294967295
 800e570:	b01d      	add	sp, #116	@ 0x74
 800e572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e576:	2340      	movs	r3, #64	@ 0x40
 800e578:	616b      	str	r3, [r5, #20]
 800e57a:	2300      	movs	r3, #0
 800e57c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e57e:	2320      	movs	r3, #32
 800e580:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e584:	f8cd 800c 	str.w	r8, [sp, #12]
 800e588:	2330      	movs	r3, #48	@ 0x30
 800e58a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e728 <_svfiprintf_r+0x1e4>
 800e58e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e592:	f04f 0901 	mov.w	r9, #1
 800e596:	4623      	mov	r3, r4
 800e598:	469a      	mov	sl, r3
 800e59a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e59e:	b10a      	cbz	r2, 800e5a4 <_svfiprintf_r+0x60>
 800e5a0:	2a25      	cmp	r2, #37	@ 0x25
 800e5a2:	d1f9      	bne.n	800e598 <_svfiprintf_r+0x54>
 800e5a4:	ebba 0b04 	subs.w	fp, sl, r4
 800e5a8:	d00b      	beq.n	800e5c2 <_svfiprintf_r+0x7e>
 800e5aa:	465b      	mov	r3, fp
 800e5ac:	4622      	mov	r2, r4
 800e5ae:	4629      	mov	r1, r5
 800e5b0:	4638      	mov	r0, r7
 800e5b2:	f7ff ff6b 	bl	800e48c <__ssputs_r>
 800e5b6:	3001      	adds	r0, #1
 800e5b8:	f000 80a7 	beq.w	800e70a <_svfiprintf_r+0x1c6>
 800e5bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5be:	445a      	add	r2, fp
 800e5c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800e5c2:	f89a 3000 	ldrb.w	r3, [sl]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	f000 809f 	beq.w	800e70a <_svfiprintf_r+0x1c6>
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	f04f 32ff 	mov.w	r2, #4294967295
 800e5d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5d6:	f10a 0a01 	add.w	sl, sl, #1
 800e5da:	9304      	str	r3, [sp, #16]
 800e5dc:	9307      	str	r3, [sp, #28]
 800e5de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e5e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800e5e4:	4654      	mov	r4, sl
 800e5e6:	2205      	movs	r2, #5
 800e5e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5ec:	484e      	ldr	r0, [pc, #312]	@ (800e728 <_svfiprintf_r+0x1e4>)
 800e5ee:	f7f1 fe17 	bl	8000220 <memchr>
 800e5f2:	9a04      	ldr	r2, [sp, #16]
 800e5f4:	b9d8      	cbnz	r0, 800e62e <_svfiprintf_r+0xea>
 800e5f6:	06d0      	lsls	r0, r2, #27
 800e5f8:	bf44      	itt	mi
 800e5fa:	2320      	movmi	r3, #32
 800e5fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e600:	0711      	lsls	r1, r2, #28
 800e602:	bf44      	itt	mi
 800e604:	232b      	movmi	r3, #43	@ 0x2b
 800e606:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e60a:	f89a 3000 	ldrb.w	r3, [sl]
 800e60e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e610:	d015      	beq.n	800e63e <_svfiprintf_r+0xfa>
 800e612:	9a07      	ldr	r2, [sp, #28]
 800e614:	4654      	mov	r4, sl
 800e616:	2000      	movs	r0, #0
 800e618:	f04f 0c0a 	mov.w	ip, #10
 800e61c:	4621      	mov	r1, r4
 800e61e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e622:	3b30      	subs	r3, #48	@ 0x30
 800e624:	2b09      	cmp	r3, #9
 800e626:	d94b      	bls.n	800e6c0 <_svfiprintf_r+0x17c>
 800e628:	b1b0      	cbz	r0, 800e658 <_svfiprintf_r+0x114>
 800e62a:	9207      	str	r2, [sp, #28]
 800e62c:	e014      	b.n	800e658 <_svfiprintf_r+0x114>
 800e62e:	eba0 0308 	sub.w	r3, r0, r8
 800e632:	fa09 f303 	lsl.w	r3, r9, r3
 800e636:	4313      	orrs	r3, r2
 800e638:	9304      	str	r3, [sp, #16]
 800e63a:	46a2      	mov	sl, r4
 800e63c:	e7d2      	b.n	800e5e4 <_svfiprintf_r+0xa0>
 800e63e:	9b03      	ldr	r3, [sp, #12]
 800e640:	1d19      	adds	r1, r3, #4
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	9103      	str	r1, [sp, #12]
 800e646:	2b00      	cmp	r3, #0
 800e648:	bfbb      	ittet	lt
 800e64a:	425b      	neglt	r3, r3
 800e64c:	f042 0202 	orrlt.w	r2, r2, #2
 800e650:	9307      	strge	r3, [sp, #28]
 800e652:	9307      	strlt	r3, [sp, #28]
 800e654:	bfb8      	it	lt
 800e656:	9204      	strlt	r2, [sp, #16]
 800e658:	7823      	ldrb	r3, [r4, #0]
 800e65a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e65c:	d10a      	bne.n	800e674 <_svfiprintf_r+0x130>
 800e65e:	7863      	ldrb	r3, [r4, #1]
 800e660:	2b2a      	cmp	r3, #42	@ 0x2a
 800e662:	d132      	bne.n	800e6ca <_svfiprintf_r+0x186>
 800e664:	9b03      	ldr	r3, [sp, #12]
 800e666:	1d1a      	adds	r2, r3, #4
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	9203      	str	r2, [sp, #12]
 800e66c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e670:	3402      	adds	r4, #2
 800e672:	9305      	str	r3, [sp, #20]
 800e674:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e738 <_svfiprintf_r+0x1f4>
 800e678:	7821      	ldrb	r1, [r4, #0]
 800e67a:	2203      	movs	r2, #3
 800e67c:	4650      	mov	r0, sl
 800e67e:	f7f1 fdcf 	bl	8000220 <memchr>
 800e682:	b138      	cbz	r0, 800e694 <_svfiprintf_r+0x150>
 800e684:	9b04      	ldr	r3, [sp, #16]
 800e686:	eba0 000a 	sub.w	r0, r0, sl
 800e68a:	2240      	movs	r2, #64	@ 0x40
 800e68c:	4082      	lsls	r2, r0
 800e68e:	4313      	orrs	r3, r2
 800e690:	3401      	adds	r4, #1
 800e692:	9304      	str	r3, [sp, #16]
 800e694:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e698:	4824      	ldr	r0, [pc, #144]	@ (800e72c <_svfiprintf_r+0x1e8>)
 800e69a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e69e:	2206      	movs	r2, #6
 800e6a0:	f7f1 fdbe 	bl	8000220 <memchr>
 800e6a4:	2800      	cmp	r0, #0
 800e6a6:	d036      	beq.n	800e716 <_svfiprintf_r+0x1d2>
 800e6a8:	4b21      	ldr	r3, [pc, #132]	@ (800e730 <_svfiprintf_r+0x1ec>)
 800e6aa:	bb1b      	cbnz	r3, 800e6f4 <_svfiprintf_r+0x1b0>
 800e6ac:	9b03      	ldr	r3, [sp, #12]
 800e6ae:	3307      	adds	r3, #7
 800e6b0:	f023 0307 	bic.w	r3, r3, #7
 800e6b4:	3308      	adds	r3, #8
 800e6b6:	9303      	str	r3, [sp, #12]
 800e6b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6ba:	4433      	add	r3, r6
 800e6bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6be:	e76a      	b.n	800e596 <_svfiprintf_r+0x52>
 800e6c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6c4:	460c      	mov	r4, r1
 800e6c6:	2001      	movs	r0, #1
 800e6c8:	e7a8      	b.n	800e61c <_svfiprintf_r+0xd8>
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	3401      	adds	r4, #1
 800e6ce:	9305      	str	r3, [sp, #20]
 800e6d0:	4619      	mov	r1, r3
 800e6d2:	f04f 0c0a 	mov.w	ip, #10
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6dc:	3a30      	subs	r2, #48	@ 0x30
 800e6de:	2a09      	cmp	r2, #9
 800e6e0:	d903      	bls.n	800e6ea <_svfiprintf_r+0x1a6>
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d0c6      	beq.n	800e674 <_svfiprintf_r+0x130>
 800e6e6:	9105      	str	r1, [sp, #20]
 800e6e8:	e7c4      	b.n	800e674 <_svfiprintf_r+0x130>
 800e6ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6ee:	4604      	mov	r4, r0
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	e7f0      	b.n	800e6d6 <_svfiprintf_r+0x192>
 800e6f4:	ab03      	add	r3, sp, #12
 800e6f6:	9300      	str	r3, [sp, #0]
 800e6f8:	462a      	mov	r2, r5
 800e6fa:	4b0e      	ldr	r3, [pc, #56]	@ (800e734 <_svfiprintf_r+0x1f0>)
 800e6fc:	a904      	add	r1, sp, #16
 800e6fe:	4638      	mov	r0, r7
 800e700:	f7fc fb62 	bl	800adc8 <_printf_float>
 800e704:	1c42      	adds	r2, r0, #1
 800e706:	4606      	mov	r6, r0
 800e708:	d1d6      	bne.n	800e6b8 <_svfiprintf_r+0x174>
 800e70a:	89ab      	ldrh	r3, [r5, #12]
 800e70c:	065b      	lsls	r3, r3, #25
 800e70e:	f53f af2d 	bmi.w	800e56c <_svfiprintf_r+0x28>
 800e712:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e714:	e72c      	b.n	800e570 <_svfiprintf_r+0x2c>
 800e716:	ab03      	add	r3, sp, #12
 800e718:	9300      	str	r3, [sp, #0]
 800e71a:	462a      	mov	r2, r5
 800e71c:	4b05      	ldr	r3, [pc, #20]	@ (800e734 <_svfiprintf_r+0x1f0>)
 800e71e:	a904      	add	r1, sp, #16
 800e720:	4638      	mov	r0, r7
 800e722:	f7fc fde9 	bl	800b2f8 <_printf_i>
 800e726:	e7ed      	b.n	800e704 <_svfiprintf_r+0x1c0>
 800e728:	0800ff51 	.word	0x0800ff51
 800e72c:	0800ff5b 	.word	0x0800ff5b
 800e730:	0800adc9 	.word	0x0800adc9
 800e734:	0800e48d 	.word	0x0800e48d
 800e738:	0800ff57 	.word	0x0800ff57

0800e73c <__sfputc_r>:
 800e73c:	6893      	ldr	r3, [r2, #8]
 800e73e:	3b01      	subs	r3, #1
 800e740:	2b00      	cmp	r3, #0
 800e742:	b410      	push	{r4}
 800e744:	6093      	str	r3, [r2, #8]
 800e746:	da08      	bge.n	800e75a <__sfputc_r+0x1e>
 800e748:	6994      	ldr	r4, [r2, #24]
 800e74a:	42a3      	cmp	r3, r4
 800e74c:	db01      	blt.n	800e752 <__sfputc_r+0x16>
 800e74e:	290a      	cmp	r1, #10
 800e750:	d103      	bne.n	800e75a <__sfputc_r+0x1e>
 800e752:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e756:	f7fd ba98 	b.w	800bc8a <__swbuf_r>
 800e75a:	6813      	ldr	r3, [r2, #0]
 800e75c:	1c58      	adds	r0, r3, #1
 800e75e:	6010      	str	r0, [r2, #0]
 800e760:	7019      	strb	r1, [r3, #0]
 800e762:	4608      	mov	r0, r1
 800e764:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e768:	4770      	bx	lr

0800e76a <__sfputs_r>:
 800e76a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e76c:	4606      	mov	r6, r0
 800e76e:	460f      	mov	r7, r1
 800e770:	4614      	mov	r4, r2
 800e772:	18d5      	adds	r5, r2, r3
 800e774:	42ac      	cmp	r4, r5
 800e776:	d101      	bne.n	800e77c <__sfputs_r+0x12>
 800e778:	2000      	movs	r0, #0
 800e77a:	e007      	b.n	800e78c <__sfputs_r+0x22>
 800e77c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e780:	463a      	mov	r2, r7
 800e782:	4630      	mov	r0, r6
 800e784:	f7ff ffda 	bl	800e73c <__sfputc_r>
 800e788:	1c43      	adds	r3, r0, #1
 800e78a:	d1f3      	bne.n	800e774 <__sfputs_r+0xa>
 800e78c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e790 <_vfiprintf_r>:
 800e790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e794:	460d      	mov	r5, r1
 800e796:	b09d      	sub	sp, #116	@ 0x74
 800e798:	4614      	mov	r4, r2
 800e79a:	4698      	mov	r8, r3
 800e79c:	4606      	mov	r6, r0
 800e79e:	b118      	cbz	r0, 800e7a8 <_vfiprintf_r+0x18>
 800e7a0:	6a03      	ldr	r3, [r0, #32]
 800e7a2:	b90b      	cbnz	r3, 800e7a8 <_vfiprintf_r+0x18>
 800e7a4:	f7fd f968 	bl	800ba78 <__sinit>
 800e7a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e7aa:	07d9      	lsls	r1, r3, #31
 800e7ac:	d405      	bmi.n	800e7ba <_vfiprintf_r+0x2a>
 800e7ae:	89ab      	ldrh	r3, [r5, #12]
 800e7b0:	059a      	lsls	r2, r3, #22
 800e7b2:	d402      	bmi.n	800e7ba <_vfiprintf_r+0x2a>
 800e7b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e7b6:	f7fd fbd0 	bl	800bf5a <__retarget_lock_acquire_recursive>
 800e7ba:	89ab      	ldrh	r3, [r5, #12]
 800e7bc:	071b      	lsls	r3, r3, #28
 800e7be:	d501      	bpl.n	800e7c4 <_vfiprintf_r+0x34>
 800e7c0:	692b      	ldr	r3, [r5, #16]
 800e7c2:	b99b      	cbnz	r3, 800e7ec <_vfiprintf_r+0x5c>
 800e7c4:	4629      	mov	r1, r5
 800e7c6:	4630      	mov	r0, r6
 800e7c8:	f7fd fa9e 	bl	800bd08 <__swsetup_r>
 800e7cc:	b170      	cbz	r0, 800e7ec <_vfiprintf_r+0x5c>
 800e7ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e7d0:	07dc      	lsls	r4, r3, #31
 800e7d2:	d504      	bpl.n	800e7de <_vfiprintf_r+0x4e>
 800e7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7d8:	b01d      	add	sp, #116	@ 0x74
 800e7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7de:	89ab      	ldrh	r3, [r5, #12]
 800e7e0:	0598      	lsls	r0, r3, #22
 800e7e2:	d4f7      	bmi.n	800e7d4 <_vfiprintf_r+0x44>
 800e7e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e7e6:	f7fd fbb9 	bl	800bf5c <__retarget_lock_release_recursive>
 800e7ea:	e7f3      	b.n	800e7d4 <_vfiprintf_r+0x44>
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7f0:	2320      	movs	r3, #32
 800e7f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e7f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7fa:	2330      	movs	r3, #48	@ 0x30
 800e7fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e9ac <_vfiprintf_r+0x21c>
 800e800:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e804:	f04f 0901 	mov.w	r9, #1
 800e808:	4623      	mov	r3, r4
 800e80a:	469a      	mov	sl, r3
 800e80c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e810:	b10a      	cbz	r2, 800e816 <_vfiprintf_r+0x86>
 800e812:	2a25      	cmp	r2, #37	@ 0x25
 800e814:	d1f9      	bne.n	800e80a <_vfiprintf_r+0x7a>
 800e816:	ebba 0b04 	subs.w	fp, sl, r4
 800e81a:	d00b      	beq.n	800e834 <_vfiprintf_r+0xa4>
 800e81c:	465b      	mov	r3, fp
 800e81e:	4622      	mov	r2, r4
 800e820:	4629      	mov	r1, r5
 800e822:	4630      	mov	r0, r6
 800e824:	f7ff ffa1 	bl	800e76a <__sfputs_r>
 800e828:	3001      	adds	r0, #1
 800e82a:	f000 80a7 	beq.w	800e97c <_vfiprintf_r+0x1ec>
 800e82e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e830:	445a      	add	r2, fp
 800e832:	9209      	str	r2, [sp, #36]	@ 0x24
 800e834:	f89a 3000 	ldrb.w	r3, [sl]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	f000 809f 	beq.w	800e97c <_vfiprintf_r+0x1ec>
 800e83e:	2300      	movs	r3, #0
 800e840:	f04f 32ff 	mov.w	r2, #4294967295
 800e844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e848:	f10a 0a01 	add.w	sl, sl, #1
 800e84c:	9304      	str	r3, [sp, #16]
 800e84e:	9307      	str	r3, [sp, #28]
 800e850:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e854:	931a      	str	r3, [sp, #104]	@ 0x68
 800e856:	4654      	mov	r4, sl
 800e858:	2205      	movs	r2, #5
 800e85a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e85e:	4853      	ldr	r0, [pc, #332]	@ (800e9ac <_vfiprintf_r+0x21c>)
 800e860:	f7f1 fcde 	bl	8000220 <memchr>
 800e864:	9a04      	ldr	r2, [sp, #16]
 800e866:	b9d8      	cbnz	r0, 800e8a0 <_vfiprintf_r+0x110>
 800e868:	06d1      	lsls	r1, r2, #27
 800e86a:	bf44      	itt	mi
 800e86c:	2320      	movmi	r3, #32
 800e86e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e872:	0713      	lsls	r3, r2, #28
 800e874:	bf44      	itt	mi
 800e876:	232b      	movmi	r3, #43	@ 0x2b
 800e878:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e87c:	f89a 3000 	ldrb.w	r3, [sl]
 800e880:	2b2a      	cmp	r3, #42	@ 0x2a
 800e882:	d015      	beq.n	800e8b0 <_vfiprintf_r+0x120>
 800e884:	9a07      	ldr	r2, [sp, #28]
 800e886:	4654      	mov	r4, sl
 800e888:	2000      	movs	r0, #0
 800e88a:	f04f 0c0a 	mov.w	ip, #10
 800e88e:	4621      	mov	r1, r4
 800e890:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e894:	3b30      	subs	r3, #48	@ 0x30
 800e896:	2b09      	cmp	r3, #9
 800e898:	d94b      	bls.n	800e932 <_vfiprintf_r+0x1a2>
 800e89a:	b1b0      	cbz	r0, 800e8ca <_vfiprintf_r+0x13a>
 800e89c:	9207      	str	r2, [sp, #28]
 800e89e:	e014      	b.n	800e8ca <_vfiprintf_r+0x13a>
 800e8a0:	eba0 0308 	sub.w	r3, r0, r8
 800e8a4:	fa09 f303 	lsl.w	r3, r9, r3
 800e8a8:	4313      	orrs	r3, r2
 800e8aa:	9304      	str	r3, [sp, #16]
 800e8ac:	46a2      	mov	sl, r4
 800e8ae:	e7d2      	b.n	800e856 <_vfiprintf_r+0xc6>
 800e8b0:	9b03      	ldr	r3, [sp, #12]
 800e8b2:	1d19      	adds	r1, r3, #4
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	9103      	str	r1, [sp, #12]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	bfbb      	ittet	lt
 800e8bc:	425b      	neglt	r3, r3
 800e8be:	f042 0202 	orrlt.w	r2, r2, #2
 800e8c2:	9307      	strge	r3, [sp, #28]
 800e8c4:	9307      	strlt	r3, [sp, #28]
 800e8c6:	bfb8      	it	lt
 800e8c8:	9204      	strlt	r2, [sp, #16]
 800e8ca:	7823      	ldrb	r3, [r4, #0]
 800e8cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800e8ce:	d10a      	bne.n	800e8e6 <_vfiprintf_r+0x156>
 800e8d0:	7863      	ldrb	r3, [r4, #1]
 800e8d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8d4:	d132      	bne.n	800e93c <_vfiprintf_r+0x1ac>
 800e8d6:	9b03      	ldr	r3, [sp, #12]
 800e8d8:	1d1a      	adds	r2, r3, #4
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	9203      	str	r2, [sp, #12]
 800e8de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e8e2:	3402      	adds	r4, #2
 800e8e4:	9305      	str	r3, [sp, #20]
 800e8e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e9bc <_vfiprintf_r+0x22c>
 800e8ea:	7821      	ldrb	r1, [r4, #0]
 800e8ec:	2203      	movs	r2, #3
 800e8ee:	4650      	mov	r0, sl
 800e8f0:	f7f1 fc96 	bl	8000220 <memchr>
 800e8f4:	b138      	cbz	r0, 800e906 <_vfiprintf_r+0x176>
 800e8f6:	9b04      	ldr	r3, [sp, #16]
 800e8f8:	eba0 000a 	sub.w	r0, r0, sl
 800e8fc:	2240      	movs	r2, #64	@ 0x40
 800e8fe:	4082      	lsls	r2, r0
 800e900:	4313      	orrs	r3, r2
 800e902:	3401      	adds	r4, #1
 800e904:	9304      	str	r3, [sp, #16]
 800e906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e90a:	4829      	ldr	r0, [pc, #164]	@ (800e9b0 <_vfiprintf_r+0x220>)
 800e90c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e910:	2206      	movs	r2, #6
 800e912:	f7f1 fc85 	bl	8000220 <memchr>
 800e916:	2800      	cmp	r0, #0
 800e918:	d03f      	beq.n	800e99a <_vfiprintf_r+0x20a>
 800e91a:	4b26      	ldr	r3, [pc, #152]	@ (800e9b4 <_vfiprintf_r+0x224>)
 800e91c:	bb1b      	cbnz	r3, 800e966 <_vfiprintf_r+0x1d6>
 800e91e:	9b03      	ldr	r3, [sp, #12]
 800e920:	3307      	adds	r3, #7
 800e922:	f023 0307 	bic.w	r3, r3, #7
 800e926:	3308      	adds	r3, #8
 800e928:	9303      	str	r3, [sp, #12]
 800e92a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e92c:	443b      	add	r3, r7
 800e92e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e930:	e76a      	b.n	800e808 <_vfiprintf_r+0x78>
 800e932:	fb0c 3202 	mla	r2, ip, r2, r3
 800e936:	460c      	mov	r4, r1
 800e938:	2001      	movs	r0, #1
 800e93a:	e7a8      	b.n	800e88e <_vfiprintf_r+0xfe>
 800e93c:	2300      	movs	r3, #0
 800e93e:	3401      	adds	r4, #1
 800e940:	9305      	str	r3, [sp, #20]
 800e942:	4619      	mov	r1, r3
 800e944:	f04f 0c0a 	mov.w	ip, #10
 800e948:	4620      	mov	r0, r4
 800e94a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e94e:	3a30      	subs	r2, #48	@ 0x30
 800e950:	2a09      	cmp	r2, #9
 800e952:	d903      	bls.n	800e95c <_vfiprintf_r+0x1cc>
 800e954:	2b00      	cmp	r3, #0
 800e956:	d0c6      	beq.n	800e8e6 <_vfiprintf_r+0x156>
 800e958:	9105      	str	r1, [sp, #20]
 800e95a:	e7c4      	b.n	800e8e6 <_vfiprintf_r+0x156>
 800e95c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e960:	4604      	mov	r4, r0
 800e962:	2301      	movs	r3, #1
 800e964:	e7f0      	b.n	800e948 <_vfiprintf_r+0x1b8>
 800e966:	ab03      	add	r3, sp, #12
 800e968:	9300      	str	r3, [sp, #0]
 800e96a:	462a      	mov	r2, r5
 800e96c:	4b12      	ldr	r3, [pc, #72]	@ (800e9b8 <_vfiprintf_r+0x228>)
 800e96e:	a904      	add	r1, sp, #16
 800e970:	4630      	mov	r0, r6
 800e972:	f7fc fa29 	bl	800adc8 <_printf_float>
 800e976:	4607      	mov	r7, r0
 800e978:	1c78      	adds	r0, r7, #1
 800e97a:	d1d6      	bne.n	800e92a <_vfiprintf_r+0x19a>
 800e97c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e97e:	07d9      	lsls	r1, r3, #31
 800e980:	d405      	bmi.n	800e98e <_vfiprintf_r+0x1fe>
 800e982:	89ab      	ldrh	r3, [r5, #12]
 800e984:	059a      	lsls	r2, r3, #22
 800e986:	d402      	bmi.n	800e98e <_vfiprintf_r+0x1fe>
 800e988:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e98a:	f7fd fae7 	bl	800bf5c <__retarget_lock_release_recursive>
 800e98e:	89ab      	ldrh	r3, [r5, #12]
 800e990:	065b      	lsls	r3, r3, #25
 800e992:	f53f af1f 	bmi.w	800e7d4 <_vfiprintf_r+0x44>
 800e996:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e998:	e71e      	b.n	800e7d8 <_vfiprintf_r+0x48>
 800e99a:	ab03      	add	r3, sp, #12
 800e99c:	9300      	str	r3, [sp, #0]
 800e99e:	462a      	mov	r2, r5
 800e9a0:	4b05      	ldr	r3, [pc, #20]	@ (800e9b8 <_vfiprintf_r+0x228>)
 800e9a2:	a904      	add	r1, sp, #16
 800e9a4:	4630      	mov	r0, r6
 800e9a6:	f7fc fca7 	bl	800b2f8 <_printf_i>
 800e9aa:	e7e4      	b.n	800e976 <_vfiprintf_r+0x1e6>
 800e9ac:	0800ff51 	.word	0x0800ff51
 800e9b0:	0800ff5b 	.word	0x0800ff5b
 800e9b4:	0800adc9 	.word	0x0800adc9
 800e9b8:	0800e76b 	.word	0x0800e76b
 800e9bc:	0800ff57 	.word	0x0800ff57

0800e9c0 <__sflush_r>:
 800e9c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9c8:	0716      	lsls	r6, r2, #28
 800e9ca:	4605      	mov	r5, r0
 800e9cc:	460c      	mov	r4, r1
 800e9ce:	d454      	bmi.n	800ea7a <__sflush_r+0xba>
 800e9d0:	684b      	ldr	r3, [r1, #4]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	dc02      	bgt.n	800e9dc <__sflush_r+0x1c>
 800e9d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	dd48      	ble.n	800ea6e <__sflush_r+0xae>
 800e9dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e9de:	2e00      	cmp	r6, #0
 800e9e0:	d045      	beq.n	800ea6e <__sflush_r+0xae>
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e9e8:	682f      	ldr	r7, [r5, #0]
 800e9ea:	6a21      	ldr	r1, [r4, #32]
 800e9ec:	602b      	str	r3, [r5, #0]
 800e9ee:	d030      	beq.n	800ea52 <__sflush_r+0x92>
 800e9f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e9f2:	89a3      	ldrh	r3, [r4, #12]
 800e9f4:	0759      	lsls	r1, r3, #29
 800e9f6:	d505      	bpl.n	800ea04 <__sflush_r+0x44>
 800e9f8:	6863      	ldr	r3, [r4, #4]
 800e9fa:	1ad2      	subs	r2, r2, r3
 800e9fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e9fe:	b10b      	cbz	r3, 800ea04 <__sflush_r+0x44>
 800ea00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ea02:	1ad2      	subs	r2, r2, r3
 800ea04:	2300      	movs	r3, #0
 800ea06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea08:	6a21      	ldr	r1, [r4, #32]
 800ea0a:	4628      	mov	r0, r5
 800ea0c:	47b0      	blx	r6
 800ea0e:	1c43      	adds	r3, r0, #1
 800ea10:	89a3      	ldrh	r3, [r4, #12]
 800ea12:	d106      	bne.n	800ea22 <__sflush_r+0x62>
 800ea14:	6829      	ldr	r1, [r5, #0]
 800ea16:	291d      	cmp	r1, #29
 800ea18:	d82b      	bhi.n	800ea72 <__sflush_r+0xb2>
 800ea1a:	4a2a      	ldr	r2, [pc, #168]	@ (800eac4 <__sflush_r+0x104>)
 800ea1c:	410a      	asrs	r2, r1
 800ea1e:	07d6      	lsls	r6, r2, #31
 800ea20:	d427      	bmi.n	800ea72 <__sflush_r+0xb2>
 800ea22:	2200      	movs	r2, #0
 800ea24:	6062      	str	r2, [r4, #4]
 800ea26:	04d9      	lsls	r1, r3, #19
 800ea28:	6922      	ldr	r2, [r4, #16]
 800ea2a:	6022      	str	r2, [r4, #0]
 800ea2c:	d504      	bpl.n	800ea38 <__sflush_r+0x78>
 800ea2e:	1c42      	adds	r2, r0, #1
 800ea30:	d101      	bne.n	800ea36 <__sflush_r+0x76>
 800ea32:	682b      	ldr	r3, [r5, #0]
 800ea34:	b903      	cbnz	r3, 800ea38 <__sflush_r+0x78>
 800ea36:	6560      	str	r0, [r4, #84]	@ 0x54
 800ea38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea3a:	602f      	str	r7, [r5, #0]
 800ea3c:	b1b9      	cbz	r1, 800ea6e <__sflush_r+0xae>
 800ea3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea42:	4299      	cmp	r1, r3
 800ea44:	d002      	beq.n	800ea4c <__sflush_r+0x8c>
 800ea46:	4628      	mov	r0, r5
 800ea48:	f7fe f8ea 	bl	800cc20 <_free_r>
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea50:	e00d      	b.n	800ea6e <__sflush_r+0xae>
 800ea52:	2301      	movs	r3, #1
 800ea54:	4628      	mov	r0, r5
 800ea56:	47b0      	blx	r6
 800ea58:	4602      	mov	r2, r0
 800ea5a:	1c50      	adds	r0, r2, #1
 800ea5c:	d1c9      	bne.n	800e9f2 <__sflush_r+0x32>
 800ea5e:	682b      	ldr	r3, [r5, #0]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d0c6      	beq.n	800e9f2 <__sflush_r+0x32>
 800ea64:	2b1d      	cmp	r3, #29
 800ea66:	d001      	beq.n	800ea6c <__sflush_r+0xac>
 800ea68:	2b16      	cmp	r3, #22
 800ea6a:	d11e      	bne.n	800eaaa <__sflush_r+0xea>
 800ea6c:	602f      	str	r7, [r5, #0]
 800ea6e:	2000      	movs	r0, #0
 800ea70:	e022      	b.n	800eab8 <__sflush_r+0xf8>
 800ea72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea76:	b21b      	sxth	r3, r3
 800ea78:	e01b      	b.n	800eab2 <__sflush_r+0xf2>
 800ea7a:	690f      	ldr	r7, [r1, #16]
 800ea7c:	2f00      	cmp	r7, #0
 800ea7e:	d0f6      	beq.n	800ea6e <__sflush_r+0xae>
 800ea80:	0793      	lsls	r3, r2, #30
 800ea82:	680e      	ldr	r6, [r1, #0]
 800ea84:	bf08      	it	eq
 800ea86:	694b      	ldreq	r3, [r1, #20]
 800ea88:	600f      	str	r7, [r1, #0]
 800ea8a:	bf18      	it	ne
 800ea8c:	2300      	movne	r3, #0
 800ea8e:	eba6 0807 	sub.w	r8, r6, r7
 800ea92:	608b      	str	r3, [r1, #8]
 800ea94:	f1b8 0f00 	cmp.w	r8, #0
 800ea98:	dde9      	ble.n	800ea6e <__sflush_r+0xae>
 800ea9a:	6a21      	ldr	r1, [r4, #32]
 800ea9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ea9e:	4643      	mov	r3, r8
 800eaa0:	463a      	mov	r2, r7
 800eaa2:	4628      	mov	r0, r5
 800eaa4:	47b0      	blx	r6
 800eaa6:	2800      	cmp	r0, #0
 800eaa8:	dc08      	bgt.n	800eabc <__sflush_r+0xfc>
 800eaaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eaae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eab2:	81a3      	strh	r3, [r4, #12]
 800eab4:	f04f 30ff 	mov.w	r0, #4294967295
 800eab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eabc:	4407      	add	r7, r0
 800eabe:	eba8 0800 	sub.w	r8, r8, r0
 800eac2:	e7e7      	b.n	800ea94 <__sflush_r+0xd4>
 800eac4:	dfbffffe 	.word	0xdfbffffe

0800eac8 <_fflush_r>:
 800eac8:	b538      	push	{r3, r4, r5, lr}
 800eaca:	690b      	ldr	r3, [r1, #16]
 800eacc:	4605      	mov	r5, r0
 800eace:	460c      	mov	r4, r1
 800ead0:	b913      	cbnz	r3, 800ead8 <_fflush_r+0x10>
 800ead2:	2500      	movs	r5, #0
 800ead4:	4628      	mov	r0, r5
 800ead6:	bd38      	pop	{r3, r4, r5, pc}
 800ead8:	b118      	cbz	r0, 800eae2 <_fflush_r+0x1a>
 800eada:	6a03      	ldr	r3, [r0, #32]
 800eadc:	b90b      	cbnz	r3, 800eae2 <_fflush_r+0x1a>
 800eade:	f7fc ffcb 	bl	800ba78 <__sinit>
 800eae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d0f3      	beq.n	800ead2 <_fflush_r+0xa>
 800eaea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eaec:	07d0      	lsls	r0, r2, #31
 800eaee:	d404      	bmi.n	800eafa <_fflush_r+0x32>
 800eaf0:	0599      	lsls	r1, r3, #22
 800eaf2:	d402      	bmi.n	800eafa <_fflush_r+0x32>
 800eaf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eaf6:	f7fd fa30 	bl	800bf5a <__retarget_lock_acquire_recursive>
 800eafa:	4628      	mov	r0, r5
 800eafc:	4621      	mov	r1, r4
 800eafe:	f7ff ff5f 	bl	800e9c0 <__sflush_r>
 800eb02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eb04:	07da      	lsls	r2, r3, #31
 800eb06:	4605      	mov	r5, r0
 800eb08:	d4e4      	bmi.n	800ead4 <_fflush_r+0xc>
 800eb0a:	89a3      	ldrh	r3, [r4, #12]
 800eb0c:	059b      	lsls	r3, r3, #22
 800eb0e:	d4e1      	bmi.n	800ead4 <_fflush_r+0xc>
 800eb10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb12:	f7fd fa23 	bl	800bf5c <__retarget_lock_release_recursive>
 800eb16:	e7dd      	b.n	800ead4 <_fflush_r+0xc>

0800eb18 <__swhatbuf_r>:
 800eb18:	b570      	push	{r4, r5, r6, lr}
 800eb1a:	460c      	mov	r4, r1
 800eb1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb20:	2900      	cmp	r1, #0
 800eb22:	b096      	sub	sp, #88	@ 0x58
 800eb24:	4615      	mov	r5, r2
 800eb26:	461e      	mov	r6, r3
 800eb28:	da0d      	bge.n	800eb46 <__swhatbuf_r+0x2e>
 800eb2a:	89a3      	ldrh	r3, [r4, #12]
 800eb2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eb30:	f04f 0100 	mov.w	r1, #0
 800eb34:	bf14      	ite	ne
 800eb36:	2340      	movne	r3, #64	@ 0x40
 800eb38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800eb3c:	2000      	movs	r0, #0
 800eb3e:	6031      	str	r1, [r6, #0]
 800eb40:	602b      	str	r3, [r5, #0]
 800eb42:	b016      	add	sp, #88	@ 0x58
 800eb44:	bd70      	pop	{r4, r5, r6, pc}
 800eb46:	466a      	mov	r2, sp
 800eb48:	f000 f874 	bl	800ec34 <_fstat_r>
 800eb4c:	2800      	cmp	r0, #0
 800eb4e:	dbec      	blt.n	800eb2a <__swhatbuf_r+0x12>
 800eb50:	9901      	ldr	r1, [sp, #4]
 800eb52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800eb56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800eb5a:	4259      	negs	r1, r3
 800eb5c:	4159      	adcs	r1, r3
 800eb5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eb62:	e7eb      	b.n	800eb3c <__swhatbuf_r+0x24>

0800eb64 <__smakebuf_r>:
 800eb64:	898b      	ldrh	r3, [r1, #12]
 800eb66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb68:	079d      	lsls	r5, r3, #30
 800eb6a:	4606      	mov	r6, r0
 800eb6c:	460c      	mov	r4, r1
 800eb6e:	d507      	bpl.n	800eb80 <__smakebuf_r+0x1c>
 800eb70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800eb74:	6023      	str	r3, [r4, #0]
 800eb76:	6123      	str	r3, [r4, #16]
 800eb78:	2301      	movs	r3, #1
 800eb7a:	6163      	str	r3, [r4, #20]
 800eb7c:	b003      	add	sp, #12
 800eb7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb80:	ab01      	add	r3, sp, #4
 800eb82:	466a      	mov	r2, sp
 800eb84:	f7ff ffc8 	bl	800eb18 <__swhatbuf_r>
 800eb88:	9f00      	ldr	r7, [sp, #0]
 800eb8a:	4605      	mov	r5, r0
 800eb8c:	4639      	mov	r1, r7
 800eb8e:	4630      	mov	r0, r6
 800eb90:	f7fe f8ba 	bl	800cd08 <_malloc_r>
 800eb94:	b948      	cbnz	r0, 800ebaa <__smakebuf_r+0x46>
 800eb96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb9a:	059a      	lsls	r2, r3, #22
 800eb9c:	d4ee      	bmi.n	800eb7c <__smakebuf_r+0x18>
 800eb9e:	f023 0303 	bic.w	r3, r3, #3
 800eba2:	f043 0302 	orr.w	r3, r3, #2
 800eba6:	81a3      	strh	r3, [r4, #12]
 800eba8:	e7e2      	b.n	800eb70 <__smakebuf_r+0xc>
 800ebaa:	89a3      	ldrh	r3, [r4, #12]
 800ebac:	6020      	str	r0, [r4, #0]
 800ebae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ebb2:	81a3      	strh	r3, [r4, #12]
 800ebb4:	9b01      	ldr	r3, [sp, #4]
 800ebb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ebba:	b15b      	cbz	r3, 800ebd4 <__smakebuf_r+0x70>
 800ebbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebc0:	4630      	mov	r0, r6
 800ebc2:	f000 f849 	bl	800ec58 <_isatty_r>
 800ebc6:	b128      	cbz	r0, 800ebd4 <__smakebuf_r+0x70>
 800ebc8:	89a3      	ldrh	r3, [r4, #12]
 800ebca:	f023 0303 	bic.w	r3, r3, #3
 800ebce:	f043 0301 	orr.w	r3, r3, #1
 800ebd2:	81a3      	strh	r3, [r4, #12]
 800ebd4:	89a3      	ldrh	r3, [r4, #12]
 800ebd6:	431d      	orrs	r5, r3
 800ebd8:	81a5      	strh	r5, [r4, #12]
 800ebda:	e7cf      	b.n	800eb7c <__smakebuf_r+0x18>

0800ebdc <memmove>:
 800ebdc:	4288      	cmp	r0, r1
 800ebde:	b510      	push	{r4, lr}
 800ebe0:	eb01 0402 	add.w	r4, r1, r2
 800ebe4:	d902      	bls.n	800ebec <memmove+0x10>
 800ebe6:	4284      	cmp	r4, r0
 800ebe8:	4623      	mov	r3, r4
 800ebea:	d807      	bhi.n	800ebfc <memmove+0x20>
 800ebec:	1e43      	subs	r3, r0, #1
 800ebee:	42a1      	cmp	r1, r4
 800ebf0:	d008      	beq.n	800ec04 <memmove+0x28>
 800ebf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ebfa:	e7f8      	b.n	800ebee <memmove+0x12>
 800ebfc:	4402      	add	r2, r0
 800ebfe:	4601      	mov	r1, r0
 800ec00:	428a      	cmp	r2, r1
 800ec02:	d100      	bne.n	800ec06 <memmove+0x2a>
 800ec04:	bd10      	pop	{r4, pc}
 800ec06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec0e:	e7f7      	b.n	800ec00 <memmove+0x24>

0800ec10 <strncmp>:
 800ec10:	b510      	push	{r4, lr}
 800ec12:	b16a      	cbz	r2, 800ec30 <strncmp+0x20>
 800ec14:	3901      	subs	r1, #1
 800ec16:	1884      	adds	r4, r0, r2
 800ec18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec1c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d103      	bne.n	800ec2c <strncmp+0x1c>
 800ec24:	42a0      	cmp	r0, r4
 800ec26:	d001      	beq.n	800ec2c <strncmp+0x1c>
 800ec28:	2a00      	cmp	r2, #0
 800ec2a:	d1f5      	bne.n	800ec18 <strncmp+0x8>
 800ec2c:	1ad0      	subs	r0, r2, r3
 800ec2e:	bd10      	pop	{r4, pc}
 800ec30:	4610      	mov	r0, r2
 800ec32:	e7fc      	b.n	800ec2e <strncmp+0x1e>

0800ec34 <_fstat_r>:
 800ec34:	b538      	push	{r3, r4, r5, lr}
 800ec36:	4d07      	ldr	r5, [pc, #28]	@ (800ec54 <_fstat_r+0x20>)
 800ec38:	2300      	movs	r3, #0
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	4608      	mov	r0, r1
 800ec3e:	4611      	mov	r1, r2
 800ec40:	602b      	str	r3, [r5, #0]
 800ec42:	f7f3 fe37 	bl	80028b4 <_fstat>
 800ec46:	1c43      	adds	r3, r0, #1
 800ec48:	d102      	bne.n	800ec50 <_fstat_r+0x1c>
 800ec4a:	682b      	ldr	r3, [r5, #0]
 800ec4c:	b103      	cbz	r3, 800ec50 <_fstat_r+0x1c>
 800ec4e:	6023      	str	r3, [r4, #0]
 800ec50:	bd38      	pop	{r3, r4, r5, pc}
 800ec52:	bf00      	nop
 800ec54:	2000238c 	.word	0x2000238c

0800ec58 <_isatty_r>:
 800ec58:	b538      	push	{r3, r4, r5, lr}
 800ec5a:	4d06      	ldr	r5, [pc, #24]	@ (800ec74 <_isatty_r+0x1c>)
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	4604      	mov	r4, r0
 800ec60:	4608      	mov	r0, r1
 800ec62:	602b      	str	r3, [r5, #0]
 800ec64:	f7f3 fe36 	bl	80028d4 <_isatty>
 800ec68:	1c43      	adds	r3, r0, #1
 800ec6a:	d102      	bne.n	800ec72 <_isatty_r+0x1a>
 800ec6c:	682b      	ldr	r3, [r5, #0]
 800ec6e:	b103      	cbz	r3, 800ec72 <_isatty_r+0x1a>
 800ec70:	6023      	str	r3, [r4, #0]
 800ec72:	bd38      	pop	{r3, r4, r5, pc}
 800ec74:	2000238c 	.word	0x2000238c

0800ec78 <_sbrk_r>:
 800ec78:	b538      	push	{r3, r4, r5, lr}
 800ec7a:	4d06      	ldr	r5, [pc, #24]	@ (800ec94 <_sbrk_r+0x1c>)
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	4604      	mov	r4, r0
 800ec80:	4608      	mov	r0, r1
 800ec82:	602b      	str	r3, [r5, #0]
 800ec84:	f7f3 fe3e 	bl	8002904 <_sbrk>
 800ec88:	1c43      	adds	r3, r0, #1
 800ec8a:	d102      	bne.n	800ec92 <_sbrk_r+0x1a>
 800ec8c:	682b      	ldr	r3, [r5, #0]
 800ec8e:	b103      	cbz	r3, 800ec92 <_sbrk_r+0x1a>
 800ec90:	6023      	str	r3, [r4, #0]
 800ec92:	bd38      	pop	{r3, r4, r5, pc}
 800ec94:	2000238c 	.word	0x2000238c

0800ec98 <nan>:
 800ec98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800eca0 <nan+0x8>
 800ec9c:	4770      	bx	lr
 800ec9e:	bf00      	nop
 800eca0:	00000000 	.word	0x00000000
 800eca4:	7ff80000 	.word	0x7ff80000

0800eca8 <__assert_func>:
 800eca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ecaa:	4614      	mov	r4, r2
 800ecac:	461a      	mov	r2, r3
 800ecae:	4b09      	ldr	r3, [pc, #36]	@ (800ecd4 <__assert_func+0x2c>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	4605      	mov	r5, r0
 800ecb4:	68d8      	ldr	r0, [r3, #12]
 800ecb6:	b954      	cbnz	r4, 800ecce <__assert_func+0x26>
 800ecb8:	4b07      	ldr	r3, [pc, #28]	@ (800ecd8 <__assert_func+0x30>)
 800ecba:	461c      	mov	r4, r3
 800ecbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ecc0:	9100      	str	r1, [sp, #0]
 800ecc2:	462b      	mov	r3, r5
 800ecc4:	4905      	ldr	r1, [pc, #20]	@ (800ecdc <__assert_func+0x34>)
 800ecc6:	f000 fba7 	bl	800f418 <fiprintf>
 800ecca:	f000 fbb7 	bl	800f43c <abort>
 800ecce:	4b04      	ldr	r3, [pc, #16]	@ (800ece0 <__assert_func+0x38>)
 800ecd0:	e7f4      	b.n	800ecbc <__assert_func+0x14>
 800ecd2:	bf00      	nop
 800ecd4:	200001e8 	.word	0x200001e8
 800ecd8:	0800ffa5 	.word	0x0800ffa5
 800ecdc:	0800ff77 	.word	0x0800ff77
 800ece0:	0800ff6a 	.word	0x0800ff6a

0800ece4 <_calloc_r>:
 800ece4:	b570      	push	{r4, r5, r6, lr}
 800ece6:	fba1 5402 	umull	r5, r4, r1, r2
 800ecea:	b93c      	cbnz	r4, 800ecfc <_calloc_r+0x18>
 800ecec:	4629      	mov	r1, r5
 800ecee:	f7fe f80b 	bl	800cd08 <_malloc_r>
 800ecf2:	4606      	mov	r6, r0
 800ecf4:	b928      	cbnz	r0, 800ed02 <_calloc_r+0x1e>
 800ecf6:	2600      	movs	r6, #0
 800ecf8:	4630      	mov	r0, r6
 800ecfa:	bd70      	pop	{r4, r5, r6, pc}
 800ecfc:	220c      	movs	r2, #12
 800ecfe:	6002      	str	r2, [r0, #0]
 800ed00:	e7f9      	b.n	800ecf6 <_calloc_r+0x12>
 800ed02:	462a      	mov	r2, r5
 800ed04:	4621      	mov	r1, r4
 800ed06:	f7fd f855 	bl	800bdb4 <memset>
 800ed0a:	e7f5      	b.n	800ecf8 <_calloc_r+0x14>

0800ed0c <rshift>:
 800ed0c:	6903      	ldr	r3, [r0, #16]
 800ed0e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ed12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed16:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ed1a:	f100 0414 	add.w	r4, r0, #20
 800ed1e:	dd45      	ble.n	800edac <rshift+0xa0>
 800ed20:	f011 011f 	ands.w	r1, r1, #31
 800ed24:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ed28:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ed2c:	d10c      	bne.n	800ed48 <rshift+0x3c>
 800ed2e:	f100 0710 	add.w	r7, r0, #16
 800ed32:	4629      	mov	r1, r5
 800ed34:	42b1      	cmp	r1, r6
 800ed36:	d334      	bcc.n	800eda2 <rshift+0x96>
 800ed38:	1a9b      	subs	r3, r3, r2
 800ed3a:	009b      	lsls	r3, r3, #2
 800ed3c:	1eea      	subs	r2, r5, #3
 800ed3e:	4296      	cmp	r6, r2
 800ed40:	bf38      	it	cc
 800ed42:	2300      	movcc	r3, #0
 800ed44:	4423      	add	r3, r4
 800ed46:	e015      	b.n	800ed74 <rshift+0x68>
 800ed48:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ed4c:	f1c1 0820 	rsb	r8, r1, #32
 800ed50:	40cf      	lsrs	r7, r1
 800ed52:	f105 0e04 	add.w	lr, r5, #4
 800ed56:	46a1      	mov	r9, r4
 800ed58:	4576      	cmp	r6, lr
 800ed5a:	46f4      	mov	ip, lr
 800ed5c:	d815      	bhi.n	800ed8a <rshift+0x7e>
 800ed5e:	1a9a      	subs	r2, r3, r2
 800ed60:	0092      	lsls	r2, r2, #2
 800ed62:	3a04      	subs	r2, #4
 800ed64:	3501      	adds	r5, #1
 800ed66:	42ae      	cmp	r6, r5
 800ed68:	bf38      	it	cc
 800ed6a:	2200      	movcc	r2, #0
 800ed6c:	18a3      	adds	r3, r4, r2
 800ed6e:	50a7      	str	r7, [r4, r2]
 800ed70:	b107      	cbz	r7, 800ed74 <rshift+0x68>
 800ed72:	3304      	adds	r3, #4
 800ed74:	1b1a      	subs	r2, r3, r4
 800ed76:	42a3      	cmp	r3, r4
 800ed78:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ed7c:	bf08      	it	eq
 800ed7e:	2300      	moveq	r3, #0
 800ed80:	6102      	str	r2, [r0, #16]
 800ed82:	bf08      	it	eq
 800ed84:	6143      	streq	r3, [r0, #20]
 800ed86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed8a:	f8dc c000 	ldr.w	ip, [ip]
 800ed8e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ed92:	ea4c 0707 	orr.w	r7, ip, r7
 800ed96:	f849 7b04 	str.w	r7, [r9], #4
 800ed9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ed9e:	40cf      	lsrs	r7, r1
 800eda0:	e7da      	b.n	800ed58 <rshift+0x4c>
 800eda2:	f851 cb04 	ldr.w	ip, [r1], #4
 800eda6:	f847 cf04 	str.w	ip, [r7, #4]!
 800edaa:	e7c3      	b.n	800ed34 <rshift+0x28>
 800edac:	4623      	mov	r3, r4
 800edae:	e7e1      	b.n	800ed74 <rshift+0x68>

0800edb0 <__hexdig_fun>:
 800edb0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800edb4:	2b09      	cmp	r3, #9
 800edb6:	d802      	bhi.n	800edbe <__hexdig_fun+0xe>
 800edb8:	3820      	subs	r0, #32
 800edba:	b2c0      	uxtb	r0, r0
 800edbc:	4770      	bx	lr
 800edbe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800edc2:	2b05      	cmp	r3, #5
 800edc4:	d801      	bhi.n	800edca <__hexdig_fun+0x1a>
 800edc6:	3847      	subs	r0, #71	@ 0x47
 800edc8:	e7f7      	b.n	800edba <__hexdig_fun+0xa>
 800edca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800edce:	2b05      	cmp	r3, #5
 800edd0:	d801      	bhi.n	800edd6 <__hexdig_fun+0x26>
 800edd2:	3827      	subs	r0, #39	@ 0x27
 800edd4:	e7f1      	b.n	800edba <__hexdig_fun+0xa>
 800edd6:	2000      	movs	r0, #0
 800edd8:	4770      	bx	lr
	...

0800eddc <__gethex>:
 800eddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede0:	b085      	sub	sp, #20
 800ede2:	468a      	mov	sl, r1
 800ede4:	9302      	str	r3, [sp, #8]
 800ede6:	680b      	ldr	r3, [r1, #0]
 800ede8:	9001      	str	r0, [sp, #4]
 800edea:	4690      	mov	r8, r2
 800edec:	1c9c      	adds	r4, r3, #2
 800edee:	46a1      	mov	r9, r4
 800edf0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800edf4:	2830      	cmp	r0, #48	@ 0x30
 800edf6:	d0fa      	beq.n	800edee <__gethex+0x12>
 800edf8:	eba9 0303 	sub.w	r3, r9, r3
 800edfc:	f1a3 0b02 	sub.w	fp, r3, #2
 800ee00:	f7ff ffd6 	bl	800edb0 <__hexdig_fun>
 800ee04:	4605      	mov	r5, r0
 800ee06:	2800      	cmp	r0, #0
 800ee08:	d168      	bne.n	800eedc <__gethex+0x100>
 800ee0a:	49a0      	ldr	r1, [pc, #640]	@ (800f08c <__gethex+0x2b0>)
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	4648      	mov	r0, r9
 800ee10:	f7ff fefe 	bl	800ec10 <strncmp>
 800ee14:	4607      	mov	r7, r0
 800ee16:	2800      	cmp	r0, #0
 800ee18:	d167      	bne.n	800eeea <__gethex+0x10e>
 800ee1a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ee1e:	4626      	mov	r6, r4
 800ee20:	f7ff ffc6 	bl	800edb0 <__hexdig_fun>
 800ee24:	2800      	cmp	r0, #0
 800ee26:	d062      	beq.n	800eeee <__gethex+0x112>
 800ee28:	4623      	mov	r3, r4
 800ee2a:	7818      	ldrb	r0, [r3, #0]
 800ee2c:	2830      	cmp	r0, #48	@ 0x30
 800ee2e:	4699      	mov	r9, r3
 800ee30:	f103 0301 	add.w	r3, r3, #1
 800ee34:	d0f9      	beq.n	800ee2a <__gethex+0x4e>
 800ee36:	f7ff ffbb 	bl	800edb0 <__hexdig_fun>
 800ee3a:	fab0 f580 	clz	r5, r0
 800ee3e:	096d      	lsrs	r5, r5, #5
 800ee40:	f04f 0b01 	mov.w	fp, #1
 800ee44:	464a      	mov	r2, r9
 800ee46:	4616      	mov	r6, r2
 800ee48:	3201      	adds	r2, #1
 800ee4a:	7830      	ldrb	r0, [r6, #0]
 800ee4c:	f7ff ffb0 	bl	800edb0 <__hexdig_fun>
 800ee50:	2800      	cmp	r0, #0
 800ee52:	d1f8      	bne.n	800ee46 <__gethex+0x6a>
 800ee54:	498d      	ldr	r1, [pc, #564]	@ (800f08c <__gethex+0x2b0>)
 800ee56:	2201      	movs	r2, #1
 800ee58:	4630      	mov	r0, r6
 800ee5a:	f7ff fed9 	bl	800ec10 <strncmp>
 800ee5e:	2800      	cmp	r0, #0
 800ee60:	d13f      	bne.n	800eee2 <__gethex+0x106>
 800ee62:	b944      	cbnz	r4, 800ee76 <__gethex+0x9a>
 800ee64:	1c74      	adds	r4, r6, #1
 800ee66:	4622      	mov	r2, r4
 800ee68:	4616      	mov	r6, r2
 800ee6a:	3201      	adds	r2, #1
 800ee6c:	7830      	ldrb	r0, [r6, #0]
 800ee6e:	f7ff ff9f 	bl	800edb0 <__hexdig_fun>
 800ee72:	2800      	cmp	r0, #0
 800ee74:	d1f8      	bne.n	800ee68 <__gethex+0x8c>
 800ee76:	1ba4      	subs	r4, r4, r6
 800ee78:	00a7      	lsls	r7, r4, #2
 800ee7a:	7833      	ldrb	r3, [r6, #0]
 800ee7c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ee80:	2b50      	cmp	r3, #80	@ 0x50
 800ee82:	d13e      	bne.n	800ef02 <__gethex+0x126>
 800ee84:	7873      	ldrb	r3, [r6, #1]
 800ee86:	2b2b      	cmp	r3, #43	@ 0x2b
 800ee88:	d033      	beq.n	800eef2 <__gethex+0x116>
 800ee8a:	2b2d      	cmp	r3, #45	@ 0x2d
 800ee8c:	d034      	beq.n	800eef8 <__gethex+0x11c>
 800ee8e:	1c71      	adds	r1, r6, #1
 800ee90:	2400      	movs	r4, #0
 800ee92:	7808      	ldrb	r0, [r1, #0]
 800ee94:	f7ff ff8c 	bl	800edb0 <__hexdig_fun>
 800ee98:	1e43      	subs	r3, r0, #1
 800ee9a:	b2db      	uxtb	r3, r3
 800ee9c:	2b18      	cmp	r3, #24
 800ee9e:	d830      	bhi.n	800ef02 <__gethex+0x126>
 800eea0:	f1a0 0210 	sub.w	r2, r0, #16
 800eea4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eea8:	f7ff ff82 	bl	800edb0 <__hexdig_fun>
 800eeac:	f100 3cff 	add.w	ip, r0, #4294967295
 800eeb0:	fa5f fc8c 	uxtb.w	ip, ip
 800eeb4:	f1bc 0f18 	cmp.w	ip, #24
 800eeb8:	f04f 030a 	mov.w	r3, #10
 800eebc:	d91e      	bls.n	800eefc <__gethex+0x120>
 800eebe:	b104      	cbz	r4, 800eec2 <__gethex+0xe6>
 800eec0:	4252      	negs	r2, r2
 800eec2:	4417      	add	r7, r2
 800eec4:	f8ca 1000 	str.w	r1, [sl]
 800eec8:	b1ed      	cbz	r5, 800ef06 <__gethex+0x12a>
 800eeca:	f1bb 0f00 	cmp.w	fp, #0
 800eece:	bf0c      	ite	eq
 800eed0:	2506      	moveq	r5, #6
 800eed2:	2500      	movne	r5, #0
 800eed4:	4628      	mov	r0, r5
 800eed6:	b005      	add	sp, #20
 800eed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eedc:	2500      	movs	r5, #0
 800eede:	462c      	mov	r4, r5
 800eee0:	e7b0      	b.n	800ee44 <__gethex+0x68>
 800eee2:	2c00      	cmp	r4, #0
 800eee4:	d1c7      	bne.n	800ee76 <__gethex+0x9a>
 800eee6:	4627      	mov	r7, r4
 800eee8:	e7c7      	b.n	800ee7a <__gethex+0x9e>
 800eeea:	464e      	mov	r6, r9
 800eeec:	462f      	mov	r7, r5
 800eeee:	2501      	movs	r5, #1
 800eef0:	e7c3      	b.n	800ee7a <__gethex+0x9e>
 800eef2:	2400      	movs	r4, #0
 800eef4:	1cb1      	adds	r1, r6, #2
 800eef6:	e7cc      	b.n	800ee92 <__gethex+0xb6>
 800eef8:	2401      	movs	r4, #1
 800eefa:	e7fb      	b.n	800eef4 <__gethex+0x118>
 800eefc:	fb03 0002 	mla	r0, r3, r2, r0
 800ef00:	e7ce      	b.n	800eea0 <__gethex+0xc4>
 800ef02:	4631      	mov	r1, r6
 800ef04:	e7de      	b.n	800eec4 <__gethex+0xe8>
 800ef06:	eba6 0309 	sub.w	r3, r6, r9
 800ef0a:	3b01      	subs	r3, #1
 800ef0c:	4629      	mov	r1, r5
 800ef0e:	2b07      	cmp	r3, #7
 800ef10:	dc0a      	bgt.n	800ef28 <__gethex+0x14c>
 800ef12:	9801      	ldr	r0, [sp, #4]
 800ef14:	f7fd ff84 	bl	800ce20 <_Balloc>
 800ef18:	4604      	mov	r4, r0
 800ef1a:	b940      	cbnz	r0, 800ef2e <__gethex+0x152>
 800ef1c:	4b5c      	ldr	r3, [pc, #368]	@ (800f090 <__gethex+0x2b4>)
 800ef1e:	4602      	mov	r2, r0
 800ef20:	21e4      	movs	r1, #228	@ 0xe4
 800ef22:	485c      	ldr	r0, [pc, #368]	@ (800f094 <__gethex+0x2b8>)
 800ef24:	f7ff fec0 	bl	800eca8 <__assert_func>
 800ef28:	3101      	adds	r1, #1
 800ef2a:	105b      	asrs	r3, r3, #1
 800ef2c:	e7ef      	b.n	800ef0e <__gethex+0x132>
 800ef2e:	f100 0a14 	add.w	sl, r0, #20
 800ef32:	2300      	movs	r3, #0
 800ef34:	4655      	mov	r5, sl
 800ef36:	469b      	mov	fp, r3
 800ef38:	45b1      	cmp	r9, r6
 800ef3a:	d337      	bcc.n	800efac <__gethex+0x1d0>
 800ef3c:	f845 bb04 	str.w	fp, [r5], #4
 800ef40:	eba5 050a 	sub.w	r5, r5, sl
 800ef44:	10ad      	asrs	r5, r5, #2
 800ef46:	6125      	str	r5, [r4, #16]
 800ef48:	4658      	mov	r0, fp
 800ef4a:	f7fe f85b 	bl	800d004 <__hi0bits>
 800ef4e:	016d      	lsls	r5, r5, #5
 800ef50:	f8d8 6000 	ldr.w	r6, [r8]
 800ef54:	1a2d      	subs	r5, r5, r0
 800ef56:	42b5      	cmp	r5, r6
 800ef58:	dd54      	ble.n	800f004 <__gethex+0x228>
 800ef5a:	1bad      	subs	r5, r5, r6
 800ef5c:	4629      	mov	r1, r5
 800ef5e:	4620      	mov	r0, r4
 800ef60:	f7fe fbef 	bl	800d742 <__any_on>
 800ef64:	4681      	mov	r9, r0
 800ef66:	b178      	cbz	r0, 800ef88 <__gethex+0x1ac>
 800ef68:	1e6b      	subs	r3, r5, #1
 800ef6a:	1159      	asrs	r1, r3, #5
 800ef6c:	f003 021f 	and.w	r2, r3, #31
 800ef70:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ef74:	f04f 0901 	mov.w	r9, #1
 800ef78:	fa09 f202 	lsl.w	r2, r9, r2
 800ef7c:	420a      	tst	r2, r1
 800ef7e:	d003      	beq.n	800ef88 <__gethex+0x1ac>
 800ef80:	454b      	cmp	r3, r9
 800ef82:	dc36      	bgt.n	800eff2 <__gethex+0x216>
 800ef84:	f04f 0902 	mov.w	r9, #2
 800ef88:	4629      	mov	r1, r5
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f7ff febe 	bl	800ed0c <rshift>
 800ef90:	442f      	add	r7, r5
 800ef92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ef96:	42bb      	cmp	r3, r7
 800ef98:	da42      	bge.n	800f020 <__gethex+0x244>
 800ef9a:	9801      	ldr	r0, [sp, #4]
 800ef9c:	4621      	mov	r1, r4
 800ef9e:	f7fd ff7f 	bl	800cea0 <_Bfree>
 800efa2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800efa4:	2300      	movs	r3, #0
 800efa6:	6013      	str	r3, [r2, #0]
 800efa8:	25a3      	movs	r5, #163	@ 0xa3
 800efaa:	e793      	b.n	800eed4 <__gethex+0xf8>
 800efac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800efb0:	2a2e      	cmp	r2, #46	@ 0x2e
 800efb2:	d012      	beq.n	800efda <__gethex+0x1fe>
 800efb4:	2b20      	cmp	r3, #32
 800efb6:	d104      	bne.n	800efc2 <__gethex+0x1e6>
 800efb8:	f845 bb04 	str.w	fp, [r5], #4
 800efbc:	f04f 0b00 	mov.w	fp, #0
 800efc0:	465b      	mov	r3, fp
 800efc2:	7830      	ldrb	r0, [r6, #0]
 800efc4:	9303      	str	r3, [sp, #12]
 800efc6:	f7ff fef3 	bl	800edb0 <__hexdig_fun>
 800efca:	9b03      	ldr	r3, [sp, #12]
 800efcc:	f000 000f 	and.w	r0, r0, #15
 800efd0:	4098      	lsls	r0, r3
 800efd2:	ea4b 0b00 	orr.w	fp, fp, r0
 800efd6:	3304      	adds	r3, #4
 800efd8:	e7ae      	b.n	800ef38 <__gethex+0x15c>
 800efda:	45b1      	cmp	r9, r6
 800efdc:	d8ea      	bhi.n	800efb4 <__gethex+0x1d8>
 800efde:	492b      	ldr	r1, [pc, #172]	@ (800f08c <__gethex+0x2b0>)
 800efe0:	9303      	str	r3, [sp, #12]
 800efe2:	2201      	movs	r2, #1
 800efe4:	4630      	mov	r0, r6
 800efe6:	f7ff fe13 	bl	800ec10 <strncmp>
 800efea:	9b03      	ldr	r3, [sp, #12]
 800efec:	2800      	cmp	r0, #0
 800efee:	d1e1      	bne.n	800efb4 <__gethex+0x1d8>
 800eff0:	e7a2      	b.n	800ef38 <__gethex+0x15c>
 800eff2:	1ea9      	subs	r1, r5, #2
 800eff4:	4620      	mov	r0, r4
 800eff6:	f7fe fba4 	bl	800d742 <__any_on>
 800effa:	2800      	cmp	r0, #0
 800effc:	d0c2      	beq.n	800ef84 <__gethex+0x1a8>
 800effe:	f04f 0903 	mov.w	r9, #3
 800f002:	e7c1      	b.n	800ef88 <__gethex+0x1ac>
 800f004:	da09      	bge.n	800f01a <__gethex+0x23e>
 800f006:	1b75      	subs	r5, r6, r5
 800f008:	4621      	mov	r1, r4
 800f00a:	9801      	ldr	r0, [sp, #4]
 800f00c:	462a      	mov	r2, r5
 800f00e:	f7fe f95f 	bl	800d2d0 <__lshift>
 800f012:	1b7f      	subs	r7, r7, r5
 800f014:	4604      	mov	r4, r0
 800f016:	f100 0a14 	add.w	sl, r0, #20
 800f01a:	f04f 0900 	mov.w	r9, #0
 800f01e:	e7b8      	b.n	800ef92 <__gethex+0x1b6>
 800f020:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f024:	42bd      	cmp	r5, r7
 800f026:	dd6f      	ble.n	800f108 <__gethex+0x32c>
 800f028:	1bed      	subs	r5, r5, r7
 800f02a:	42ae      	cmp	r6, r5
 800f02c:	dc34      	bgt.n	800f098 <__gethex+0x2bc>
 800f02e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f032:	2b02      	cmp	r3, #2
 800f034:	d022      	beq.n	800f07c <__gethex+0x2a0>
 800f036:	2b03      	cmp	r3, #3
 800f038:	d024      	beq.n	800f084 <__gethex+0x2a8>
 800f03a:	2b01      	cmp	r3, #1
 800f03c:	d115      	bne.n	800f06a <__gethex+0x28e>
 800f03e:	42ae      	cmp	r6, r5
 800f040:	d113      	bne.n	800f06a <__gethex+0x28e>
 800f042:	2e01      	cmp	r6, #1
 800f044:	d10b      	bne.n	800f05e <__gethex+0x282>
 800f046:	9a02      	ldr	r2, [sp, #8]
 800f048:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f04c:	6013      	str	r3, [r2, #0]
 800f04e:	2301      	movs	r3, #1
 800f050:	6123      	str	r3, [r4, #16]
 800f052:	f8ca 3000 	str.w	r3, [sl]
 800f056:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f058:	2562      	movs	r5, #98	@ 0x62
 800f05a:	601c      	str	r4, [r3, #0]
 800f05c:	e73a      	b.n	800eed4 <__gethex+0xf8>
 800f05e:	1e71      	subs	r1, r6, #1
 800f060:	4620      	mov	r0, r4
 800f062:	f7fe fb6e 	bl	800d742 <__any_on>
 800f066:	2800      	cmp	r0, #0
 800f068:	d1ed      	bne.n	800f046 <__gethex+0x26a>
 800f06a:	9801      	ldr	r0, [sp, #4]
 800f06c:	4621      	mov	r1, r4
 800f06e:	f7fd ff17 	bl	800cea0 <_Bfree>
 800f072:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f074:	2300      	movs	r3, #0
 800f076:	6013      	str	r3, [r2, #0]
 800f078:	2550      	movs	r5, #80	@ 0x50
 800f07a:	e72b      	b.n	800eed4 <__gethex+0xf8>
 800f07c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d1f3      	bne.n	800f06a <__gethex+0x28e>
 800f082:	e7e0      	b.n	800f046 <__gethex+0x26a>
 800f084:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f086:	2b00      	cmp	r3, #0
 800f088:	d1dd      	bne.n	800f046 <__gethex+0x26a>
 800f08a:	e7ee      	b.n	800f06a <__gethex+0x28e>
 800f08c:	0800fdf8 	.word	0x0800fdf8
 800f090:	0800fc8d 	.word	0x0800fc8d
 800f094:	0800ffa6 	.word	0x0800ffa6
 800f098:	1e6f      	subs	r7, r5, #1
 800f09a:	f1b9 0f00 	cmp.w	r9, #0
 800f09e:	d130      	bne.n	800f102 <__gethex+0x326>
 800f0a0:	b127      	cbz	r7, 800f0ac <__gethex+0x2d0>
 800f0a2:	4639      	mov	r1, r7
 800f0a4:	4620      	mov	r0, r4
 800f0a6:	f7fe fb4c 	bl	800d742 <__any_on>
 800f0aa:	4681      	mov	r9, r0
 800f0ac:	117a      	asrs	r2, r7, #5
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f0b4:	f007 071f 	and.w	r7, r7, #31
 800f0b8:	40bb      	lsls	r3, r7
 800f0ba:	4213      	tst	r3, r2
 800f0bc:	4629      	mov	r1, r5
 800f0be:	4620      	mov	r0, r4
 800f0c0:	bf18      	it	ne
 800f0c2:	f049 0902 	orrne.w	r9, r9, #2
 800f0c6:	f7ff fe21 	bl	800ed0c <rshift>
 800f0ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f0ce:	1b76      	subs	r6, r6, r5
 800f0d0:	2502      	movs	r5, #2
 800f0d2:	f1b9 0f00 	cmp.w	r9, #0
 800f0d6:	d047      	beq.n	800f168 <__gethex+0x38c>
 800f0d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f0dc:	2b02      	cmp	r3, #2
 800f0de:	d015      	beq.n	800f10c <__gethex+0x330>
 800f0e0:	2b03      	cmp	r3, #3
 800f0e2:	d017      	beq.n	800f114 <__gethex+0x338>
 800f0e4:	2b01      	cmp	r3, #1
 800f0e6:	d109      	bne.n	800f0fc <__gethex+0x320>
 800f0e8:	f019 0f02 	tst.w	r9, #2
 800f0ec:	d006      	beq.n	800f0fc <__gethex+0x320>
 800f0ee:	f8da 3000 	ldr.w	r3, [sl]
 800f0f2:	ea49 0903 	orr.w	r9, r9, r3
 800f0f6:	f019 0f01 	tst.w	r9, #1
 800f0fa:	d10e      	bne.n	800f11a <__gethex+0x33e>
 800f0fc:	f045 0510 	orr.w	r5, r5, #16
 800f100:	e032      	b.n	800f168 <__gethex+0x38c>
 800f102:	f04f 0901 	mov.w	r9, #1
 800f106:	e7d1      	b.n	800f0ac <__gethex+0x2d0>
 800f108:	2501      	movs	r5, #1
 800f10a:	e7e2      	b.n	800f0d2 <__gethex+0x2f6>
 800f10c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f10e:	f1c3 0301 	rsb	r3, r3, #1
 800f112:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f114:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f116:	2b00      	cmp	r3, #0
 800f118:	d0f0      	beq.n	800f0fc <__gethex+0x320>
 800f11a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f11e:	f104 0314 	add.w	r3, r4, #20
 800f122:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f126:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f12a:	f04f 0c00 	mov.w	ip, #0
 800f12e:	4618      	mov	r0, r3
 800f130:	f853 2b04 	ldr.w	r2, [r3], #4
 800f134:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f138:	d01b      	beq.n	800f172 <__gethex+0x396>
 800f13a:	3201      	adds	r2, #1
 800f13c:	6002      	str	r2, [r0, #0]
 800f13e:	2d02      	cmp	r5, #2
 800f140:	f104 0314 	add.w	r3, r4, #20
 800f144:	d13c      	bne.n	800f1c0 <__gethex+0x3e4>
 800f146:	f8d8 2000 	ldr.w	r2, [r8]
 800f14a:	3a01      	subs	r2, #1
 800f14c:	42b2      	cmp	r2, r6
 800f14e:	d109      	bne.n	800f164 <__gethex+0x388>
 800f150:	1171      	asrs	r1, r6, #5
 800f152:	2201      	movs	r2, #1
 800f154:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f158:	f006 061f 	and.w	r6, r6, #31
 800f15c:	fa02 f606 	lsl.w	r6, r2, r6
 800f160:	421e      	tst	r6, r3
 800f162:	d13a      	bne.n	800f1da <__gethex+0x3fe>
 800f164:	f045 0520 	orr.w	r5, r5, #32
 800f168:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f16a:	601c      	str	r4, [r3, #0]
 800f16c:	9b02      	ldr	r3, [sp, #8]
 800f16e:	601f      	str	r7, [r3, #0]
 800f170:	e6b0      	b.n	800eed4 <__gethex+0xf8>
 800f172:	4299      	cmp	r1, r3
 800f174:	f843 cc04 	str.w	ip, [r3, #-4]
 800f178:	d8d9      	bhi.n	800f12e <__gethex+0x352>
 800f17a:	68a3      	ldr	r3, [r4, #8]
 800f17c:	459b      	cmp	fp, r3
 800f17e:	db17      	blt.n	800f1b0 <__gethex+0x3d4>
 800f180:	6861      	ldr	r1, [r4, #4]
 800f182:	9801      	ldr	r0, [sp, #4]
 800f184:	3101      	adds	r1, #1
 800f186:	f7fd fe4b 	bl	800ce20 <_Balloc>
 800f18a:	4681      	mov	r9, r0
 800f18c:	b918      	cbnz	r0, 800f196 <__gethex+0x3ba>
 800f18e:	4b1a      	ldr	r3, [pc, #104]	@ (800f1f8 <__gethex+0x41c>)
 800f190:	4602      	mov	r2, r0
 800f192:	2184      	movs	r1, #132	@ 0x84
 800f194:	e6c5      	b.n	800ef22 <__gethex+0x146>
 800f196:	6922      	ldr	r2, [r4, #16]
 800f198:	3202      	adds	r2, #2
 800f19a:	f104 010c 	add.w	r1, r4, #12
 800f19e:	0092      	lsls	r2, r2, #2
 800f1a0:	300c      	adds	r0, #12
 800f1a2:	f7fc fedc 	bl	800bf5e <memcpy>
 800f1a6:	4621      	mov	r1, r4
 800f1a8:	9801      	ldr	r0, [sp, #4]
 800f1aa:	f7fd fe79 	bl	800cea0 <_Bfree>
 800f1ae:	464c      	mov	r4, r9
 800f1b0:	6923      	ldr	r3, [r4, #16]
 800f1b2:	1c5a      	adds	r2, r3, #1
 800f1b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f1b8:	6122      	str	r2, [r4, #16]
 800f1ba:	2201      	movs	r2, #1
 800f1bc:	615a      	str	r2, [r3, #20]
 800f1be:	e7be      	b.n	800f13e <__gethex+0x362>
 800f1c0:	6922      	ldr	r2, [r4, #16]
 800f1c2:	455a      	cmp	r2, fp
 800f1c4:	dd0b      	ble.n	800f1de <__gethex+0x402>
 800f1c6:	2101      	movs	r1, #1
 800f1c8:	4620      	mov	r0, r4
 800f1ca:	f7ff fd9f 	bl	800ed0c <rshift>
 800f1ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f1d2:	3701      	adds	r7, #1
 800f1d4:	42bb      	cmp	r3, r7
 800f1d6:	f6ff aee0 	blt.w	800ef9a <__gethex+0x1be>
 800f1da:	2501      	movs	r5, #1
 800f1dc:	e7c2      	b.n	800f164 <__gethex+0x388>
 800f1de:	f016 061f 	ands.w	r6, r6, #31
 800f1e2:	d0fa      	beq.n	800f1da <__gethex+0x3fe>
 800f1e4:	4453      	add	r3, sl
 800f1e6:	f1c6 0620 	rsb	r6, r6, #32
 800f1ea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f1ee:	f7fd ff09 	bl	800d004 <__hi0bits>
 800f1f2:	42b0      	cmp	r0, r6
 800f1f4:	dbe7      	blt.n	800f1c6 <__gethex+0x3ea>
 800f1f6:	e7f0      	b.n	800f1da <__gethex+0x3fe>
 800f1f8:	0800fc8d 	.word	0x0800fc8d

0800f1fc <L_shift>:
 800f1fc:	f1c2 0208 	rsb	r2, r2, #8
 800f200:	0092      	lsls	r2, r2, #2
 800f202:	b570      	push	{r4, r5, r6, lr}
 800f204:	f1c2 0620 	rsb	r6, r2, #32
 800f208:	6843      	ldr	r3, [r0, #4]
 800f20a:	6804      	ldr	r4, [r0, #0]
 800f20c:	fa03 f506 	lsl.w	r5, r3, r6
 800f210:	432c      	orrs	r4, r5
 800f212:	40d3      	lsrs	r3, r2
 800f214:	6004      	str	r4, [r0, #0]
 800f216:	f840 3f04 	str.w	r3, [r0, #4]!
 800f21a:	4288      	cmp	r0, r1
 800f21c:	d3f4      	bcc.n	800f208 <L_shift+0xc>
 800f21e:	bd70      	pop	{r4, r5, r6, pc}

0800f220 <__match>:
 800f220:	b530      	push	{r4, r5, lr}
 800f222:	6803      	ldr	r3, [r0, #0]
 800f224:	3301      	adds	r3, #1
 800f226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f22a:	b914      	cbnz	r4, 800f232 <__match+0x12>
 800f22c:	6003      	str	r3, [r0, #0]
 800f22e:	2001      	movs	r0, #1
 800f230:	bd30      	pop	{r4, r5, pc}
 800f232:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f236:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f23a:	2d19      	cmp	r5, #25
 800f23c:	bf98      	it	ls
 800f23e:	3220      	addls	r2, #32
 800f240:	42a2      	cmp	r2, r4
 800f242:	d0f0      	beq.n	800f226 <__match+0x6>
 800f244:	2000      	movs	r0, #0
 800f246:	e7f3      	b.n	800f230 <__match+0x10>

0800f248 <__hexnan>:
 800f248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f24c:	680b      	ldr	r3, [r1, #0]
 800f24e:	6801      	ldr	r1, [r0, #0]
 800f250:	115e      	asrs	r6, r3, #5
 800f252:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f256:	f013 031f 	ands.w	r3, r3, #31
 800f25a:	b087      	sub	sp, #28
 800f25c:	bf18      	it	ne
 800f25e:	3604      	addne	r6, #4
 800f260:	2500      	movs	r5, #0
 800f262:	1f37      	subs	r7, r6, #4
 800f264:	4682      	mov	sl, r0
 800f266:	4690      	mov	r8, r2
 800f268:	9301      	str	r3, [sp, #4]
 800f26a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f26e:	46b9      	mov	r9, r7
 800f270:	463c      	mov	r4, r7
 800f272:	9502      	str	r5, [sp, #8]
 800f274:	46ab      	mov	fp, r5
 800f276:	784a      	ldrb	r2, [r1, #1]
 800f278:	1c4b      	adds	r3, r1, #1
 800f27a:	9303      	str	r3, [sp, #12]
 800f27c:	b342      	cbz	r2, 800f2d0 <__hexnan+0x88>
 800f27e:	4610      	mov	r0, r2
 800f280:	9105      	str	r1, [sp, #20]
 800f282:	9204      	str	r2, [sp, #16]
 800f284:	f7ff fd94 	bl	800edb0 <__hexdig_fun>
 800f288:	2800      	cmp	r0, #0
 800f28a:	d151      	bne.n	800f330 <__hexnan+0xe8>
 800f28c:	9a04      	ldr	r2, [sp, #16]
 800f28e:	9905      	ldr	r1, [sp, #20]
 800f290:	2a20      	cmp	r2, #32
 800f292:	d818      	bhi.n	800f2c6 <__hexnan+0x7e>
 800f294:	9b02      	ldr	r3, [sp, #8]
 800f296:	459b      	cmp	fp, r3
 800f298:	dd13      	ble.n	800f2c2 <__hexnan+0x7a>
 800f29a:	454c      	cmp	r4, r9
 800f29c:	d206      	bcs.n	800f2ac <__hexnan+0x64>
 800f29e:	2d07      	cmp	r5, #7
 800f2a0:	dc04      	bgt.n	800f2ac <__hexnan+0x64>
 800f2a2:	462a      	mov	r2, r5
 800f2a4:	4649      	mov	r1, r9
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	f7ff ffa8 	bl	800f1fc <L_shift>
 800f2ac:	4544      	cmp	r4, r8
 800f2ae:	d952      	bls.n	800f356 <__hexnan+0x10e>
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	f1a4 0904 	sub.w	r9, r4, #4
 800f2b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800f2ba:	f8cd b008 	str.w	fp, [sp, #8]
 800f2be:	464c      	mov	r4, r9
 800f2c0:	461d      	mov	r5, r3
 800f2c2:	9903      	ldr	r1, [sp, #12]
 800f2c4:	e7d7      	b.n	800f276 <__hexnan+0x2e>
 800f2c6:	2a29      	cmp	r2, #41	@ 0x29
 800f2c8:	d157      	bne.n	800f37a <__hexnan+0x132>
 800f2ca:	3102      	adds	r1, #2
 800f2cc:	f8ca 1000 	str.w	r1, [sl]
 800f2d0:	f1bb 0f00 	cmp.w	fp, #0
 800f2d4:	d051      	beq.n	800f37a <__hexnan+0x132>
 800f2d6:	454c      	cmp	r4, r9
 800f2d8:	d206      	bcs.n	800f2e8 <__hexnan+0xa0>
 800f2da:	2d07      	cmp	r5, #7
 800f2dc:	dc04      	bgt.n	800f2e8 <__hexnan+0xa0>
 800f2de:	462a      	mov	r2, r5
 800f2e0:	4649      	mov	r1, r9
 800f2e2:	4620      	mov	r0, r4
 800f2e4:	f7ff ff8a 	bl	800f1fc <L_shift>
 800f2e8:	4544      	cmp	r4, r8
 800f2ea:	d936      	bls.n	800f35a <__hexnan+0x112>
 800f2ec:	f1a8 0204 	sub.w	r2, r8, #4
 800f2f0:	4623      	mov	r3, r4
 800f2f2:	f853 1b04 	ldr.w	r1, [r3], #4
 800f2f6:	f842 1f04 	str.w	r1, [r2, #4]!
 800f2fa:	429f      	cmp	r7, r3
 800f2fc:	d2f9      	bcs.n	800f2f2 <__hexnan+0xaa>
 800f2fe:	1b3b      	subs	r3, r7, r4
 800f300:	f023 0303 	bic.w	r3, r3, #3
 800f304:	3304      	adds	r3, #4
 800f306:	3401      	adds	r4, #1
 800f308:	3e03      	subs	r6, #3
 800f30a:	42b4      	cmp	r4, r6
 800f30c:	bf88      	it	hi
 800f30e:	2304      	movhi	r3, #4
 800f310:	4443      	add	r3, r8
 800f312:	2200      	movs	r2, #0
 800f314:	f843 2b04 	str.w	r2, [r3], #4
 800f318:	429f      	cmp	r7, r3
 800f31a:	d2fb      	bcs.n	800f314 <__hexnan+0xcc>
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	b91b      	cbnz	r3, 800f328 <__hexnan+0xe0>
 800f320:	4547      	cmp	r7, r8
 800f322:	d128      	bne.n	800f376 <__hexnan+0x12e>
 800f324:	2301      	movs	r3, #1
 800f326:	603b      	str	r3, [r7, #0]
 800f328:	2005      	movs	r0, #5
 800f32a:	b007      	add	sp, #28
 800f32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f330:	3501      	adds	r5, #1
 800f332:	2d08      	cmp	r5, #8
 800f334:	f10b 0b01 	add.w	fp, fp, #1
 800f338:	dd06      	ble.n	800f348 <__hexnan+0x100>
 800f33a:	4544      	cmp	r4, r8
 800f33c:	d9c1      	bls.n	800f2c2 <__hexnan+0x7a>
 800f33e:	2300      	movs	r3, #0
 800f340:	f844 3c04 	str.w	r3, [r4, #-4]
 800f344:	2501      	movs	r5, #1
 800f346:	3c04      	subs	r4, #4
 800f348:	6822      	ldr	r2, [r4, #0]
 800f34a:	f000 000f 	and.w	r0, r0, #15
 800f34e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f352:	6020      	str	r0, [r4, #0]
 800f354:	e7b5      	b.n	800f2c2 <__hexnan+0x7a>
 800f356:	2508      	movs	r5, #8
 800f358:	e7b3      	b.n	800f2c2 <__hexnan+0x7a>
 800f35a:	9b01      	ldr	r3, [sp, #4]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d0dd      	beq.n	800f31c <__hexnan+0xd4>
 800f360:	f1c3 0320 	rsb	r3, r3, #32
 800f364:	f04f 32ff 	mov.w	r2, #4294967295
 800f368:	40da      	lsrs	r2, r3
 800f36a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f36e:	4013      	ands	r3, r2
 800f370:	f846 3c04 	str.w	r3, [r6, #-4]
 800f374:	e7d2      	b.n	800f31c <__hexnan+0xd4>
 800f376:	3f04      	subs	r7, #4
 800f378:	e7d0      	b.n	800f31c <__hexnan+0xd4>
 800f37a:	2004      	movs	r0, #4
 800f37c:	e7d5      	b.n	800f32a <__hexnan+0xe2>

0800f37e <__ascii_mbtowc>:
 800f37e:	b082      	sub	sp, #8
 800f380:	b901      	cbnz	r1, 800f384 <__ascii_mbtowc+0x6>
 800f382:	a901      	add	r1, sp, #4
 800f384:	b142      	cbz	r2, 800f398 <__ascii_mbtowc+0x1a>
 800f386:	b14b      	cbz	r3, 800f39c <__ascii_mbtowc+0x1e>
 800f388:	7813      	ldrb	r3, [r2, #0]
 800f38a:	600b      	str	r3, [r1, #0]
 800f38c:	7812      	ldrb	r2, [r2, #0]
 800f38e:	1e10      	subs	r0, r2, #0
 800f390:	bf18      	it	ne
 800f392:	2001      	movne	r0, #1
 800f394:	b002      	add	sp, #8
 800f396:	4770      	bx	lr
 800f398:	4610      	mov	r0, r2
 800f39a:	e7fb      	b.n	800f394 <__ascii_mbtowc+0x16>
 800f39c:	f06f 0001 	mvn.w	r0, #1
 800f3a0:	e7f8      	b.n	800f394 <__ascii_mbtowc+0x16>

0800f3a2 <_realloc_r>:
 800f3a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3a6:	4680      	mov	r8, r0
 800f3a8:	4615      	mov	r5, r2
 800f3aa:	460c      	mov	r4, r1
 800f3ac:	b921      	cbnz	r1, 800f3b8 <_realloc_r+0x16>
 800f3ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3b2:	4611      	mov	r1, r2
 800f3b4:	f7fd bca8 	b.w	800cd08 <_malloc_r>
 800f3b8:	b92a      	cbnz	r2, 800f3c6 <_realloc_r+0x24>
 800f3ba:	f7fd fc31 	bl	800cc20 <_free_r>
 800f3be:	2400      	movs	r4, #0
 800f3c0:	4620      	mov	r0, r4
 800f3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3c6:	f000 f840 	bl	800f44a <_malloc_usable_size_r>
 800f3ca:	4285      	cmp	r5, r0
 800f3cc:	4606      	mov	r6, r0
 800f3ce:	d802      	bhi.n	800f3d6 <_realloc_r+0x34>
 800f3d0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f3d4:	d8f4      	bhi.n	800f3c0 <_realloc_r+0x1e>
 800f3d6:	4629      	mov	r1, r5
 800f3d8:	4640      	mov	r0, r8
 800f3da:	f7fd fc95 	bl	800cd08 <_malloc_r>
 800f3de:	4607      	mov	r7, r0
 800f3e0:	2800      	cmp	r0, #0
 800f3e2:	d0ec      	beq.n	800f3be <_realloc_r+0x1c>
 800f3e4:	42b5      	cmp	r5, r6
 800f3e6:	462a      	mov	r2, r5
 800f3e8:	4621      	mov	r1, r4
 800f3ea:	bf28      	it	cs
 800f3ec:	4632      	movcs	r2, r6
 800f3ee:	f7fc fdb6 	bl	800bf5e <memcpy>
 800f3f2:	4621      	mov	r1, r4
 800f3f4:	4640      	mov	r0, r8
 800f3f6:	f7fd fc13 	bl	800cc20 <_free_r>
 800f3fa:	463c      	mov	r4, r7
 800f3fc:	e7e0      	b.n	800f3c0 <_realloc_r+0x1e>

0800f3fe <__ascii_wctomb>:
 800f3fe:	4603      	mov	r3, r0
 800f400:	4608      	mov	r0, r1
 800f402:	b141      	cbz	r1, 800f416 <__ascii_wctomb+0x18>
 800f404:	2aff      	cmp	r2, #255	@ 0xff
 800f406:	d904      	bls.n	800f412 <__ascii_wctomb+0x14>
 800f408:	228a      	movs	r2, #138	@ 0x8a
 800f40a:	601a      	str	r2, [r3, #0]
 800f40c:	f04f 30ff 	mov.w	r0, #4294967295
 800f410:	4770      	bx	lr
 800f412:	700a      	strb	r2, [r1, #0]
 800f414:	2001      	movs	r0, #1
 800f416:	4770      	bx	lr

0800f418 <fiprintf>:
 800f418:	b40e      	push	{r1, r2, r3}
 800f41a:	b503      	push	{r0, r1, lr}
 800f41c:	4601      	mov	r1, r0
 800f41e:	ab03      	add	r3, sp, #12
 800f420:	4805      	ldr	r0, [pc, #20]	@ (800f438 <fiprintf+0x20>)
 800f422:	f853 2b04 	ldr.w	r2, [r3], #4
 800f426:	6800      	ldr	r0, [r0, #0]
 800f428:	9301      	str	r3, [sp, #4]
 800f42a:	f7ff f9b1 	bl	800e790 <_vfiprintf_r>
 800f42e:	b002      	add	sp, #8
 800f430:	f85d eb04 	ldr.w	lr, [sp], #4
 800f434:	b003      	add	sp, #12
 800f436:	4770      	bx	lr
 800f438:	200001e8 	.word	0x200001e8

0800f43c <abort>:
 800f43c:	b508      	push	{r3, lr}
 800f43e:	2006      	movs	r0, #6
 800f440:	f000 f834 	bl	800f4ac <raise>
 800f444:	2001      	movs	r0, #1
 800f446:	f7f3 f9e5 	bl	8002814 <_exit>

0800f44a <_malloc_usable_size_r>:
 800f44a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f44e:	1f18      	subs	r0, r3, #4
 800f450:	2b00      	cmp	r3, #0
 800f452:	bfbc      	itt	lt
 800f454:	580b      	ldrlt	r3, [r1, r0]
 800f456:	18c0      	addlt	r0, r0, r3
 800f458:	4770      	bx	lr

0800f45a <_raise_r>:
 800f45a:	291f      	cmp	r1, #31
 800f45c:	b538      	push	{r3, r4, r5, lr}
 800f45e:	4605      	mov	r5, r0
 800f460:	460c      	mov	r4, r1
 800f462:	d904      	bls.n	800f46e <_raise_r+0x14>
 800f464:	2316      	movs	r3, #22
 800f466:	6003      	str	r3, [r0, #0]
 800f468:	f04f 30ff 	mov.w	r0, #4294967295
 800f46c:	bd38      	pop	{r3, r4, r5, pc}
 800f46e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f470:	b112      	cbz	r2, 800f478 <_raise_r+0x1e>
 800f472:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f476:	b94b      	cbnz	r3, 800f48c <_raise_r+0x32>
 800f478:	4628      	mov	r0, r5
 800f47a:	f000 f831 	bl	800f4e0 <_getpid_r>
 800f47e:	4622      	mov	r2, r4
 800f480:	4601      	mov	r1, r0
 800f482:	4628      	mov	r0, r5
 800f484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f488:	f000 b818 	b.w	800f4bc <_kill_r>
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d00a      	beq.n	800f4a6 <_raise_r+0x4c>
 800f490:	1c59      	adds	r1, r3, #1
 800f492:	d103      	bne.n	800f49c <_raise_r+0x42>
 800f494:	2316      	movs	r3, #22
 800f496:	6003      	str	r3, [r0, #0]
 800f498:	2001      	movs	r0, #1
 800f49a:	e7e7      	b.n	800f46c <_raise_r+0x12>
 800f49c:	2100      	movs	r1, #0
 800f49e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	4798      	blx	r3
 800f4a6:	2000      	movs	r0, #0
 800f4a8:	e7e0      	b.n	800f46c <_raise_r+0x12>
	...

0800f4ac <raise>:
 800f4ac:	4b02      	ldr	r3, [pc, #8]	@ (800f4b8 <raise+0xc>)
 800f4ae:	4601      	mov	r1, r0
 800f4b0:	6818      	ldr	r0, [r3, #0]
 800f4b2:	f7ff bfd2 	b.w	800f45a <_raise_r>
 800f4b6:	bf00      	nop
 800f4b8:	200001e8 	.word	0x200001e8

0800f4bc <_kill_r>:
 800f4bc:	b538      	push	{r3, r4, r5, lr}
 800f4be:	4d07      	ldr	r5, [pc, #28]	@ (800f4dc <_kill_r+0x20>)
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	4604      	mov	r4, r0
 800f4c4:	4608      	mov	r0, r1
 800f4c6:	4611      	mov	r1, r2
 800f4c8:	602b      	str	r3, [r5, #0]
 800f4ca:	f7f3 f993 	bl	80027f4 <_kill>
 800f4ce:	1c43      	adds	r3, r0, #1
 800f4d0:	d102      	bne.n	800f4d8 <_kill_r+0x1c>
 800f4d2:	682b      	ldr	r3, [r5, #0]
 800f4d4:	b103      	cbz	r3, 800f4d8 <_kill_r+0x1c>
 800f4d6:	6023      	str	r3, [r4, #0]
 800f4d8:	bd38      	pop	{r3, r4, r5, pc}
 800f4da:	bf00      	nop
 800f4dc:	2000238c 	.word	0x2000238c

0800f4e0 <_getpid_r>:
 800f4e0:	f7f3 b980 	b.w	80027e4 <_getpid>
 800f4e4:	0000      	movs	r0, r0
	...

0800f4e8 <atan>:
 800f4e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ec:	ec55 4b10 	vmov	r4, r5, d0
 800f4f0:	4bbf      	ldr	r3, [pc, #764]	@ (800f7f0 <atan+0x308>)
 800f4f2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800f4f6:	429e      	cmp	r6, r3
 800f4f8:	46ab      	mov	fp, r5
 800f4fa:	d918      	bls.n	800f52e <atan+0x46>
 800f4fc:	4bbd      	ldr	r3, [pc, #756]	@ (800f7f4 <atan+0x30c>)
 800f4fe:	429e      	cmp	r6, r3
 800f500:	d801      	bhi.n	800f506 <atan+0x1e>
 800f502:	d109      	bne.n	800f518 <atan+0x30>
 800f504:	b144      	cbz	r4, 800f518 <atan+0x30>
 800f506:	4622      	mov	r2, r4
 800f508:	462b      	mov	r3, r5
 800f50a:	4620      	mov	r0, r4
 800f50c:	4629      	mov	r1, r5
 800f50e:	f7f0 fee5 	bl	80002dc <__adddf3>
 800f512:	4604      	mov	r4, r0
 800f514:	460d      	mov	r5, r1
 800f516:	e006      	b.n	800f526 <atan+0x3e>
 800f518:	f1bb 0f00 	cmp.w	fp, #0
 800f51c:	f340 812b 	ble.w	800f776 <atan+0x28e>
 800f520:	a597      	add	r5, pc, #604	@ (adr r5, 800f780 <atan+0x298>)
 800f522:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f526:	ec45 4b10 	vmov	d0, r4, r5
 800f52a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f52e:	4bb2      	ldr	r3, [pc, #712]	@ (800f7f8 <atan+0x310>)
 800f530:	429e      	cmp	r6, r3
 800f532:	d813      	bhi.n	800f55c <atan+0x74>
 800f534:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800f538:	429e      	cmp	r6, r3
 800f53a:	d80c      	bhi.n	800f556 <atan+0x6e>
 800f53c:	a392      	add	r3, pc, #584	@ (adr r3, 800f788 <atan+0x2a0>)
 800f53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f542:	4620      	mov	r0, r4
 800f544:	4629      	mov	r1, r5
 800f546:	f7f0 fec9 	bl	80002dc <__adddf3>
 800f54a:	4bac      	ldr	r3, [pc, #688]	@ (800f7fc <atan+0x314>)
 800f54c:	2200      	movs	r2, #0
 800f54e:	f7f1 fb0b 	bl	8000b68 <__aeabi_dcmpgt>
 800f552:	2800      	cmp	r0, #0
 800f554:	d1e7      	bne.n	800f526 <atan+0x3e>
 800f556:	f04f 3aff 	mov.w	sl, #4294967295
 800f55a:	e029      	b.n	800f5b0 <atan+0xc8>
 800f55c:	f000 f95c 	bl	800f818 <fabs>
 800f560:	4ba7      	ldr	r3, [pc, #668]	@ (800f800 <atan+0x318>)
 800f562:	429e      	cmp	r6, r3
 800f564:	ec55 4b10 	vmov	r4, r5, d0
 800f568:	f200 80bc 	bhi.w	800f6e4 <atan+0x1fc>
 800f56c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800f570:	429e      	cmp	r6, r3
 800f572:	f200 809e 	bhi.w	800f6b2 <atan+0x1ca>
 800f576:	4622      	mov	r2, r4
 800f578:	462b      	mov	r3, r5
 800f57a:	4620      	mov	r0, r4
 800f57c:	4629      	mov	r1, r5
 800f57e:	f7f0 fead 	bl	80002dc <__adddf3>
 800f582:	4b9e      	ldr	r3, [pc, #632]	@ (800f7fc <atan+0x314>)
 800f584:	2200      	movs	r2, #0
 800f586:	f7f0 fea7 	bl	80002d8 <__aeabi_dsub>
 800f58a:	2200      	movs	r2, #0
 800f58c:	4606      	mov	r6, r0
 800f58e:	460f      	mov	r7, r1
 800f590:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f594:	4620      	mov	r0, r4
 800f596:	4629      	mov	r1, r5
 800f598:	f7f0 fea0 	bl	80002dc <__adddf3>
 800f59c:	4602      	mov	r2, r0
 800f59e:	460b      	mov	r3, r1
 800f5a0:	4630      	mov	r0, r6
 800f5a2:	4639      	mov	r1, r7
 800f5a4:	f7f1 f97a 	bl	800089c <__aeabi_ddiv>
 800f5a8:	f04f 0a00 	mov.w	sl, #0
 800f5ac:	4604      	mov	r4, r0
 800f5ae:	460d      	mov	r5, r1
 800f5b0:	4622      	mov	r2, r4
 800f5b2:	462b      	mov	r3, r5
 800f5b4:	4620      	mov	r0, r4
 800f5b6:	4629      	mov	r1, r5
 800f5b8:	f7f1 f846 	bl	8000648 <__aeabi_dmul>
 800f5bc:	4602      	mov	r2, r0
 800f5be:	460b      	mov	r3, r1
 800f5c0:	4680      	mov	r8, r0
 800f5c2:	4689      	mov	r9, r1
 800f5c4:	f7f1 f840 	bl	8000648 <__aeabi_dmul>
 800f5c8:	a371      	add	r3, pc, #452	@ (adr r3, 800f790 <atan+0x2a8>)
 800f5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ce:	4606      	mov	r6, r0
 800f5d0:	460f      	mov	r7, r1
 800f5d2:	f7f1 f839 	bl	8000648 <__aeabi_dmul>
 800f5d6:	a370      	add	r3, pc, #448	@ (adr r3, 800f798 <atan+0x2b0>)
 800f5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5dc:	f7f0 fe7e 	bl	80002dc <__adddf3>
 800f5e0:	4632      	mov	r2, r6
 800f5e2:	463b      	mov	r3, r7
 800f5e4:	f7f1 f830 	bl	8000648 <__aeabi_dmul>
 800f5e8:	a36d      	add	r3, pc, #436	@ (adr r3, 800f7a0 <atan+0x2b8>)
 800f5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ee:	f7f0 fe75 	bl	80002dc <__adddf3>
 800f5f2:	4632      	mov	r2, r6
 800f5f4:	463b      	mov	r3, r7
 800f5f6:	f7f1 f827 	bl	8000648 <__aeabi_dmul>
 800f5fa:	a36b      	add	r3, pc, #428	@ (adr r3, 800f7a8 <atan+0x2c0>)
 800f5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f600:	f7f0 fe6c 	bl	80002dc <__adddf3>
 800f604:	4632      	mov	r2, r6
 800f606:	463b      	mov	r3, r7
 800f608:	f7f1 f81e 	bl	8000648 <__aeabi_dmul>
 800f60c:	a368      	add	r3, pc, #416	@ (adr r3, 800f7b0 <atan+0x2c8>)
 800f60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f612:	f7f0 fe63 	bl	80002dc <__adddf3>
 800f616:	4632      	mov	r2, r6
 800f618:	463b      	mov	r3, r7
 800f61a:	f7f1 f815 	bl	8000648 <__aeabi_dmul>
 800f61e:	a366      	add	r3, pc, #408	@ (adr r3, 800f7b8 <atan+0x2d0>)
 800f620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f624:	f7f0 fe5a 	bl	80002dc <__adddf3>
 800f628:	4642      	mov	r2, r8
 800f62a:	464b      	mov	r3, r9
 800f62c:	f7f1 f80c 	bl	8000648 <__aeabi_dmul>
 800f630:	a363      	add	r3, pc, #396	@ (adr r3, 800f7c0 <atan+0x2d8>)
 800f632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f636:	4680      	mov	r8, r0
 800f638:	4689      	mov	r9, r1
 800f63a:	4630      	mov	r0, r6
 800f63c:	4639      	mov	r1, r7
 800f63e:	f7f1 f803 	bl	8000648 <__aeabi_dmul>
 800f642:	a361      	add	r3, pc, #388	@ (adr r3, 800f7c8 <atan+0x2e0>)
 800f644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f648:	f7f0 fe46 	bl	80002d8 <__aeabi_dsub>
 800f64c:	4632      	mov	r2, r6
 800f64e:	463b      	mov	r3, r7
 800f650:	f7f0 fffa 	bl	8000648 <__aeabi_dmul>
 800f654:	a35e      	add	r3, pc, #376	@ (adr r3, 800f7d0 <atan+0x2e8>)
 800f656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f65a:	f7f0 fe3d 	bl	80002d8 <__aeabi_dsub>
 800f65e:	4632      	mov	r2, r6
 800f660:	463b      	mov	r3, r7
 800f662:	f7f0 fff1 	bl	8000648 <__aeabi_dmul>
 800f666:	a35c      	add	r3, pc, #368	@ (adr r3, 800f7d8 <atan+0x2f0>)
 800f668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f66c:	f7f0 fe34 	bl	80002d8 <__aeabi_dsub>
 800f670:	4632      	mov	r2, r6
 800f672:	463b      	mov	r3, r7
 800f674:	f7f0 ffe8 	bl	8000648 <__aeabi_dmul>
 800f678:	a359      	add	r3, pc, #356	@ (adr r3, 800f7e0 <atan+0x2f8>)
 800f67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f67e:	f7f0 fe2b 	bl	80002d8 <__aeabi_dsub>
 800f682:	4632      	mov	r2, r6
 800f684:	463b      	mov	r3, r7
 800f686:	f7f0 ffdf 	bl	8000648 <__aeabi_dmul>
 800f68a:	4602      	mov	r2, r0
 800f68c:	460b      	mov	r3, r1
 800f68e:	4640      	mov	r0, r8
 800f690:	4649      	mov	r1, r9
 800f692:	f7f0 fe23 	bl	80002dc <__adddf3>
 800f696:	4622      	mov	r2, r4
 800f698:	462b      	mov	r3, r5
 800f69a:	f7f0 ffd5 	bl	8000648 <__aeabi_dmul>
 800f69e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f6a2:	4602      	mov	r2, r0
 800f6a4:	460b      	mov	r3, r1
 800f6a6:	d148      	bne.n	800f73a <atan+0x252>
 800f6a8:	4620      	mov	r0, r4
 800f6aa:	4629      	mov	r1, r5
 800f6ac:	f7f0 fe14 	bl	80002d8 <__aeabi_dsub>
 800f6b0:	e72f      	b.n	800f512 <atan+0x2a>
 800f6b2:	4b52      	ldr	r3, [pc, #328]	@ (800f7fc <atan+0x314>)
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	4629      	mov	r1, r5
 800f6ba:	f7f0 fe0d 	bl	80002d8 <__aeabi_dsub>
 800f6be:	4b4f      	ldr	r3, [pc, #316]	@ (800f7fc <atan+0x314>)
 800f6c0:	4606      	mov	r6, r0
 800f6c2:	460f      	mov	r7, r1
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	4629      	mov	r1, r5
 800f6ca:	f7f0 fe07 	bl	80002dc <__adddf3>
 800f6ce:	4602      	mov	r2, r0
 800f6d0:	460b      	mov	r3, r1
 800f6d2:	4630      	mov	r0, r6
 800f6d4:	4639      	mov	r1, r7
 800f6d6:	f7f1 f8e1 	bl	800089c <__aeabi_ddiv>
 800f6da:	f04f 0a01 	mov.w	sl, #1
 800f6de:	4604      	mov	r4, r0
 800f6e0:	460d      	mov	r5, r1
 800f6e2:	e765      	b.n	800f5b0 <atan+0xc8>
 800f6e4:	4b47      	ldr	r3, [pc, #284]	@ (800f804 <atan+0x31c>)
 800f6e6:	429e      	cmp	r6, r3
 800f6e8:	d21c      	bcs.n	800f724 <atan+0x23c>
 800f6ea:	4b47      	ldr	r3, [pc, #284]	@ (800f808 <atan+0x320>)
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	4629      	mov	r1, r5
 800f6f2:	f7f0 fdf1 	bl	80002d8 <__aeabi_dsub>
 800f6f6:	4b44      	ldr	r3, [pc, #272]	@ (800f808 <atan+0x320>)
 800f6f8:	4606      	mov	r6, r0
 800f6fa:	460f      	mov	r7, r1
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	4620      	mov	r0, r4
 800f700:	4629      	mov	r1, r5
 800f702:	f7f0 ffa1 	bl	8000648 <__aeabi_dmul>
 800f706:	4b3d      	ldr	r3, [pc, #244]	@ (800f7fc <atan+0x314>)
 800f708:	2200      	movs	r2, #0
 800f70a:	f7f0 fde7 	bl	80002dc <__adddf3>
 800f70e:	4602      	mov	r2, r0
 800f710:	460b      	mov	r3, r1
 800f712:	4630      	mov	r0, r6
 800f714:	4639      	mov	r1, r7
 800f716:	f7f1 f8c1 	bl	800089c <__aeabi_ddiv>
 800f71a:	f04f 0a02 	mov.w	sl, #2
 800f71e:	4604      	mov	r4, r0
 800f720:	460d      	mov	r5, r1
 800f722:	e745      	b.n	800f5b0 <atan+0xc8>
 800f724:	4622      	mov	r2, r4
 800f726:	462b      	mov	r3, r5
 800f728:	4938      	ldr	r1, [pc, #224]	@ (800f80c <atan+0x324>)
 800f72a:	2000      	movs	r0, #0
 800f72c:	f7f1 f8b6 	bl	800089c <__aeabi_ddiv>
 800f730:	f04f 0a03 	mov.w	sl, #3
 800f734:	4604      	mov	r4, r0
 800f736:	460d      	mov	r5, r1
 800f738:	e73a      	b.n	800f5b0 <atan+0xc8>
 800f73a:	4b35      	ldr	r3, [pc, #212]	@ (800f810 <atan+0x328>)
 800f73c:	4e35      	ldr	r6, [pc, #212]	@ (800f814 <atan+0x32c>)
 800f73e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f746:	f7f0 fdc7 	bl	80002d8 <__aeabi_dsub>
 800f74a:	4622      	mov	r2, r4
 800f74c:	462b      	mov	r3, r5
 800f74e:	f7f0 fdc3 	bl	80002d8 <__aeabi_dsub>
 800f752:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f756:	4602      	mov	r2, r0
 800f758:	460b      	mov	r3, r1
 800f75a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f75e:	f7f0 fdbb 	bl	80002d8 <__aeabi_dsub>
 800f762:	f1bb 0f00 	cmp.w	fp, #0
 800f766:	4604      	mov	r4, r0
 800f768:	460d      	mov	r5, r1
 800f76a:	f6bf aedc 	bge.w	800f526 <atan+0x3e>
 800f76e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f772:	461d      	mov	r5, r3
 800f774:	e6d7      	b.n	800f526 <atan+0x3e>
 800f776:	a51c      	add	r5, pc, #112	@ (adr r5, 800f7e8 <atan+0x300>)
 800f778:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f77c:	e6d3      	b.n	800f526 <atan+0x3e>
 800f77e:	bf00      	nop
 800f780:	54442d18 	.word	0x54442d18
 800f784:	3ff921fb 	.word	0x3ff921fb
 800f788:	8800759c 	.word	0x8800759c
 800f78c:	7e37e43c 	.word	0x7e37e43c
 800f790:	e322da11 	.word	0xe322da11
 800f794:	3f90ad3a 	.word	0x3f90ad3a
 800f798:	24760deb 	.word	0x24760deb
 800f79c:	3fa97b4b 	.word	0x3fa97b4b
 800f7a0:	a0d03d51 	.word	0xa0d03d51
 800f7a4:	3fb10d66 	.word	0x3fb10d66
 800f7a8:	c54c206e 	.word	0xc54c206e
 800f7ac:	3fb745cd 	.word	0x3fb745cd
 800f7b0:	920083ff 	.word	0x920083ff
 800f7b4:	3fc24924 	.word	0x3fc24924
 800f7b8:	5555550d 	.word	0x5555550d
 800f7bc:	3fd55555 	.word	0x3fd55555
 800f7c0:	2c6a6c2f 	.word	0x2c6a6c2f
 800f7c4:	bfa2b444 	.word	0xbfa2b444
 800f7c8:	52defd9a 	.word	0x52defd9a
 800f7cc:	3fadde2d 	.word	0x3fadde2d
 800f7d0:	af749a6d 	.word	0xaf749a6d
 800f7d4:	3fb3b0f2 	.word	0x3fb3b0f2
 800f7d8:	fe231671 	.word	0xfe231671
 800f7dc:	3fbc71c6 	.word	0x3fbc71c6
 800f7e0:	9998ebc4 	.word	0x9998ebc4
 800f7e4:	3fc99999 	.word	0x3fc99999
 800f7e8:	54442d18 	.word	0x54442d18
 800f7ec:	bff921fb 	.word	0xbff921fb
 800f7f0:	440fffff 	.word	0x440fffff
 800f7f4:	7ff00000 	.word	0x7ff00000
 800f7f8:	3fdbffff 	.word	0x3fdbffff
 800f7fc:	3ff00000 	.word	0x3ff00000
 800f800:	3ff2ffff 	.word	0x3ff2ffff
 800f804:	40038000 	.word	0x40038000
 800f808:	3ff80000 	.word	0x3ff80000
 800f80c:	bff00000 	.word	0xbff00000
 800f810:	08010008 	.word	0x08010008
 800f814:	08010028 	.word	0x08010028

0800f818 <fabs>:
 800f818:	ec51 0b10 	vmov	r0, r1, d0
 800f81c:	4602      	mov	r2, r0
 800f81e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f822:	ec43 2b10 	vmov	d0, r2, r3
 800f826:	4770      	bx	lr

0800f828 <_init>:
 800f828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f82a:	bf00      	nop
 800f82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f82e:	bc08      	pop	{r3}
 800f830:	469e      	mov	lr, r3
 800f832:	4770      	bx	lr

0800f834 <_fini>:
 800f834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f836:	bf00      	nop
 800f838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f83a:	bc08      	pop	{r3}
 800f83c:	469e      	mov	lr, r3
 800f83e:	4770      	bx	lr
