
SOFWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a520  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  0800a700  0800a700  0000b700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab08  0800ab08  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab08  0800ab08  0000bb08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab10  0800ab10  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab10  0800ab10  0000bb10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab14  0800ab14  0000bb14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ab18  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  200001d4  0800acec  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000714  0800acec  0000c714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3eb  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d61  00000000  00000000  0002a5ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001978  00000000  00000000  0002e350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013cd  00000000  00000000  0002fcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a77  00000000  00000000  00031095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020298  00000000  00000000  00035b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0f26  00000000  00000000  00055da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136cca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cb4  00000000  00000000  00136d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0013e9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a6e8 	.word	0x0800a6e8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800a6e8 	.word	0x0800a6e8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <Moteur_init>:
#include "MoteurPWM.h"
#include <stdlib.h>

void Moteur_init(Moteur_HandleTypeDef* moteur, TIM_HandleTypeDef* timer, uint32_t channel)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
    moteur->pwm_timer = timer;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	601a      	str	r2, [r3, #0]
    moteur->channel = channel;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	605a      	str	r2, [r3, #4]
    moteur->direction = MOTEUR_STOP;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2253      	movs	r2, #83	@ 0x53
 8000fa4:	721a      	strb	r2, [r3, #8]
    moteur->speed = 0;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
    moteur->theta = 0;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
    moteur->vitesse = 0;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	615a      	str	r2, [r3, #20]
    moteur->omega = 0;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
    moteur->moteur_droite = NULL;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
    moteur->moteur_gauche = NULL;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <Moteur_setSpeed>:

void Moteur_setSpeed(Moteur_HandleTypeDef* moteur, int speed)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
    int vitesse = (int)(speed * 4250 / 290);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	f241 029a 	movw	r2, #4250	@ 0x109a
 8000fec:	fb02 f303 	mul.w	r3, r2, r3
 8000ff0:	4a56      	ldr	r2, [pc, #344]	@ (800114c <Moteur_setSpeed+0x170>)
 8000ff2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff6:	441a      	add	r2, r3
 8000ff8:	1212      	asrs	r2, r2, #8
 8000ffa:	17db      	asrs	r3, r3, #31
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	60fb      	str	r3, [r7, #12]
    moteur->speed = speed;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	60da      	str	r2, [r3, #12]

    if (speed >= 0)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db3b      	blt.n	8001084 <Moteur_setSpeed+0xa8>
    {
        Moteur_setDirection(moteur, MOTEUR_AVANCER);
 800100c:	2141      	movs	r1, #65	@ 0x41
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f89e 	bl	8001150 <Moteur_setDirection>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, vitesse);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d105      	bne.n	8001028 <Moteur_setSpeed+0x4c>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	635a      	str	r2, [r3, #52]	@ 0x34
    else
    {
        Moteur_setDirection(moteur, MOTEUR_RECULER);
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, 8500-abs(vitesse));
    }
}
 8001026:	e08d      	b.n	8001144 <Moteur_setSpeed+0x168>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, vitesse);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b04      	cmp	r3, #4
 800102e:	d105      	bne.n	800103c <Moteur_setSpeed+0x60>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6393      	str	r3, [r2, #56]	@ 0x38
 800103a:	e083      	b.n	8001144 <Moteur_setSpeed+0x168>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b08      	cmp	r3, #8
 8001042:	d105      	bne.n	8001050 <Moteur_setSpeed+0x74>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800104e:	e079      	b.n	8001144 <Moteur_setSpeed+0x168>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b0c      	cmp	r3, #12
 8001056:	d105      	bne.n	8001064 <Moteur_setSpeed+0x88>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6413      	str	r3, [r2, #64]	@ 0x40
 8001062:	e06f      	b.n	8001144 <Moteur_setSpeed+0x168>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b10      	cmp	r3, #16
 800106a:	d105      	bne.n	8001078 <Moteur_setSpeed+0x9c>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6493      	str	r3, [r2, #72]	@ 0x48
 8001076:	e065      	b.n	8001144 <Moteur_setSpeed+0x168>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001082:	e05f      	b.n	8001144 <Moteur_setSpeed+0x168>
        Moteur_setDirection(moteur, MOTEUR_RECULER);
 8001084:	2152      	movs	r1, #82	@ 0x52
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 f862 	bl	8001150 <Moteur_setDirection>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, 8500-abs(vitesse));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10b      	bne.n	80010ac <Moteur_setSpeed+0xd0>
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	bfb8      	it	lt
 800109a:	425b      	neglt	r3, r3
 800109c:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 80010a0:	3334      	adds	r3, #52	@ 0x34
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	6812      	ldr	r2, [r2, #0]
 80010a6:	6812      	ldr	r2, [r2, #0]
 80010a8:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80010aa:	e04b      	b.n	8001144 <Moteur_setSpeed+0x168>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, 8500-abs(vitesse));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d10b      	bne.n	80010cc <Moteur_setSpeed+0xf0>
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	bfb8      	it	lt
 80010ba:	425b      	neglt	r3, r3
 80010bc:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 80010c0:	3334      	adds	r3, #52	@ 0x34
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	6812      	ldr	r2, [r2, #0]
 80010c6:	6812      	ldr	r2, [r2, #0]
 80010c8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80010ca:	e03b      	b.n	8001144 <Moteur_setSpeed+0x168>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, 8500-abs(vitesse));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b08      	cmp	r3, #8
 80010d2:	d10b      	bne.n	80010ec <Moteur_setSpeed+0x110>
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	bfb8      	it	lt
 80010da:	425b      	neglt	r3, r3
 80010dc:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 80010e0:	3334      	adds	r3, #52	@ 0x34
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	6812      	ldr	r2, [r2, #0]
 80010e6:	6812      	ldr	r2, [r2, #0]
 80010e8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80010ea:	e02b      	b.n	8001144 <Moteur_setSpeed+0x168>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, 8500-abs(vitesse));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b0c      	cmp	r3, #12
 80010f2:	d10b      	bne.n	800110c <Moteur_setSpeed+0x130>
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	bfb8      	it	lt
 80010fa:	425b      	neglt	r3, r3
 80010fc:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 8001100:	3334      	adds	r3, #52	@ 0x34
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	6812      	ldr	r2, [r2, #0]
 8001108:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800110a:	e01b      	b.n	8001144 <Moteur_setSpeed+0x168>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, 8500-abs(vitesse));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b10      	cmp	r3, #16
 8001112:	d10b      	bne.n	800112c <Moteur_setSpeed+0x150>
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	bfb8      	it	lt
 800111a:	425b      	neglt	r3, r3
 800111c:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 8001120:	3334      	adds	r3, #52	@ 0x34
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	6812      	ldr	r2, [r2, #0]
 8001126:	6812      	ldr	r2, [r2, #0]
 8001128:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800112a:	e00b      	b.n	8001144 <Moteur_setSpeed+0x168>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, 8500-abs(vitesse));
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	bfb8      	it	lt
 8001132:	425b      	neglt	r3, r3
 8001134:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 8001138:	3334      	adds	r3, #52	@ 0x34
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	6812      	ldr	r2, [r2, #0]
 800113e:	6812      	ldr	r2, [r2, #0]
 8001140:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001142:	e7ff      	b.n	8001144 <Moteur_setSpeed+0x168>
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	e1fc780f 	.word	0xe1fc780f

08001150 <Moteur_setDirection>:

void Moteur_setDirection(Moteur_HandleTypeDef* moteur, char direction)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
    moteur->direction = direction;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	78fa      	ldrb	r2, [r7, #3]
 8001160:	721a      	strb	r2, [r3, #8]

    switch (direction)
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	2b41      	cmp	r3, #65	@ 0x41
 8001166:	d002      	beq.n	800116e <Moteur_setDirection+0x1e>
 8001168:	2b52      	cmp	r3, #82	@ 0x52
 800116a:	d011      	beq.n	8001190 <Moteur_setDirection+0x40>
 800116c:	e021      	b.n	80011b2 <Moteur_setDirection+0x62>
    {
        case MOTEUR_AVANCER:
            HAL_TIM_PWM_Start(moteur->pwm_timer, moteur->channel);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4619      	mov	r1, r3
 8001178:	4610      	mov	r0, r2
 800117a:	f004 f83f 	bl	80051fc <HAL_TIM_PWM_Start>
            HAL_TIMEx_PWMN_Stop(moteur->pwm_timer, moteur->channel);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	4619      	mov	r1, r3
 8001188:	4610      	mov	r0, r2
 800118a:	f005 f96b 	bl	8006464 <HAL_TIMEx_PWMN_Stop>
            break;
 800118e:	e021      	b.n	80011d4 <Moteur_setDirection+0x84>

        case MOTEUR_RECULER:
            HAL_TIMEx_PWMN_Start(moteur->pwm_timer, moteur->channel);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4619      	mov	r1, r3
 800119a:	4610      	mov	r0, r2
 800119c:	f005 f8ae 	bl	80062fc <HAL_TIMEx_PWMN_Start>
            HAL_TIM_PWM_Stop(moteur->pwm_timer, moteur->channel);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4619      	mov	r1, r3
 80011aa:	4610      	mov	r0, r2
 80011ac:	f004 f926 	bl	80053fc <HAL_TIM_PWM_Stop>
            break;
 80011b0:	e010      	b.n	80011d4 <Moteur_setDirection+0x84>

        case MOTEUR_STOP:
        default:
            HAL_TIM_PWM_Stop(moteur->pwm_timer, moteur->channel);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	4619      	mov	r1, r3
 80011bc:	4610      	mov	r0, r2
 80011be:	f004 f91d 	bl	80053fc <HAL_TIM_PWM_Stop>
            HAL_TIMEx_PWMN_Stop(moteur->pwm_timer, moteur->channel);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	4619      	mov	r1, r3
 80011cc:	4610      	mov	r0, r2
 80011ce:	f005 f949 	bl	8006464 <HAL_TIMEx_PWMN_Stop>
            break;
 80011d2:	bf00      	nop
    }
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <Moteur_start>:

void Moteur_start(Moteur_HandleTypeDef* moteur)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    Moteur_setDirection(moteur, MOTEUR_AVANCER);
 80011e4:	2141      	movs	r1, #65	@ 0x41
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffb2 	bl	8001150 <Moteur_setDirection>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	0000      	movs	r0, r0
	...

080011f8 <Robot_setAngle>:
{
    Moteur_setDirection(moteur, MOTEUR_STOP);
}

void Robot_setAngle(Moteur_HandleTypeDef* robot, float angle)
{
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	ed87 0a00 	vstr	s0, [r7]
    //  Rotation pour atteindre l'angle spécifié
    robot->omega = (2.0 / Ts) * (angle - robot->theta) + robot->omega;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	edd3 7a04 	vldr	s15, [r3, #16]
 800120a:	ed97 7a00 	vldr	s14, [r7]
 800120e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001212:	ee17 0a90 	vmov	r0, s15
 8001216:	f7ff f9bf 	bl	8000598 <__aeabi_f2d>
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	4b68      	ldr	r3, [pc, #416]	@ (80013c0 <Robot_setAngle+0x1c8>)
 8001220:	f7ff fa12 	bl	8000648 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4614      	mov	r4, r2
 800122a:	461d      	mov	r5, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f9b1 	bl	8000598 <__aeabi_f2d>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4620      	mov	r0, r4
 800123c:	4629      	mov	r1, r5
 800123e:	f7ff f84d 	bl	80002dc <__adddf3>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f7ff fcd5 	bl	8000bf8 <__aeabi_d2f>
 800124e:	4602      	mov	r2, r0
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	619a      	str	r2, [r3, #24]
    robot->moteur_droite->vitesse = robot->omega * L / 2.0;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f99d 	bl	8000598 <__aeabi_f2d>
 800125e:	a356      	add	r3, pc, #344	@ (adr r3, 80013b8 <Robot_setAngle+0x1c0>)
 8001260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001264:	f7ff f9f0 	bl	8000648 <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001278:	f7ff fb10 	bl	800089c <__aeabi_ddiv>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69dc      	ldr	r4, [r3, #28]
 8001288:	f7ff fcb6 	bl	8000bf8 <__aeabi_d2f>
 800128c:	4603      	mov	r3, r0
 800128e:	6163      	str	r3, [r4, #20]
    robot->moteur_gauche->vitesse = -robot->omega * L / 2.0;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	edd3 7a06 	vldr	s15, [r3, #24]
 8001296:	eef1 7a67 	vneg.f32	s15, s15
 800129a:	ee17 3a90 	vmov	r3, s15
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f97a 	bl	8000598 <__aeabi_f2d>
 80012a4:	a344      	add	r3, pc, #272	@ (adr r3, 80013b8 <Robot_setAngle+0x1c0>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	f7ff f9cd 	bl	8000648 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012be:	f7ff faed 	bl	800089c <__aeabi_ddiv>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a1c      	ldr	r4, [r3, #32]
 80012ce:	f7ff fc93 	bl	8000bf8 <__aeabi_d2f>
 80012d2:	4603      	mov	r3, r0
 80012d4:	6163      	str	r3, [r4, #20]

    // Limiter les vitesses des moteurs pendant la rotation
    if (robot->moteur_droite->vitesse > 290) robot->moteur_droite->vitesse = 290;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	edd3 7a05 	vldr	s15, [r3, #20]
 80012de:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80013c4 <Robot_setAngle+0x1cc>
 80012e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	dd03      	ble.n	80012f4 <Robot_setAngle+0xfc>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	4a35      	ldr	r2, [pc, #212]	@ (80013c8 <Robot_setAngle+0x1d0>)
 80012f2:	615a      	str	r2, [r3, #20]
    if (robot->moteur_droite->vitesse < -290) robot->moteur_droite->vitesse = -290;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	edd3 7a05 	vldr	s15, [r3, #20]
 80012fc:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80013cc <Robot_setAngle+0x1d4>
 8001300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001308:	d503      	bpl.n	8001312 <Robot_setAngle+0x11a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	4a30      	ldr	r2, [pc, #192]	@ (80013d0 <Robot_setAngle+0x1d8>)
 8001310:	615a      	str	r2, [r3, #20]
    if (robot->moteur_gauche->vitesse > 290) robot->moteur_gauche->vitesse = 290;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	edd3 7a05 	vldr	s15, [r3, #20]
 800131a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80013c4 <Robot_setAngle+0x1cc>
 800131e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001326:	dd03      	ble.n	8001330 <Robot_setAngle+0x138>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4a26      	ldr	r2, [pc, #152]	@ (80013c8 <Robot_setAngle+0x1d0>)
 800132e:	615a      	str	r2, [r3, #20]
    if (robot->moteur_gauche->vitesse < -290) robot->moteur_gauche->vitesse = -290;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	edd3 7a05 	vldr	s15, [r3, #20]
 8001338:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80013cc <Robot_setAngle+0x1d4>
 800133c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001344:	d503      	bpl.n	800134e <Robot_setAngle+0x156>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	4a21      	ldr	r2, [pc, #132]	@ (80013d0 <Robot_setAngle+0x1d8>)
 800134c:	615a      	str	r2, [r3, #20]

    // Appliquer les vitesses des moteurs pour la rotation
    Moteur_setSpeed(robot->moteur_droite, (int)robot->moteur_droite->vitesse);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69da      	ldr	r2, [r3, #28]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	edd3 7a05 	vldr	s15, [r3, #20]
 800135a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800135e:	ee17 1a90 	vmov	r1, s15
 8001362:	4610      	mov	r0, r2
 8001364:	f7ff fe3a 	bl	8000fdc <Moteur_setSpeed>
    Moteur_setSpeed(robot->moteur_gauche, (int)robot->moteur_gauche->vitesse);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a1a      	ldr	r2, [r3, #32]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	edd3 7a05 	vldr	s15, [r3, #20]
 8001374:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001378:	ee17 1a90 	vmov	r1, s15
 800137c:	4610      	mov	r0, r2
 800137e:	f7ff fe2d 	bl	8000fdc <Moteur_setSpeed>

    // Attendre que l'angle soit atteint
    HAL_Delay(500);
 8001382:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001386:	f001 f963 	bl	8002650 <HAL_Delay>

    // Mettre à jour l'angle courant
    robot->theta = angle;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	611a      	str	r2, [r3, #16]

    //  Avancer en ligne droite
    robot->omega = 0;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	619a      	str	r2, [r3, #24]

    // Appliquer les vitesses des moteurs pour avancer
    Moteur_setSpeed(robot->moteur_droite, 120);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	2178      	movs	r1, #120	@ 0x78
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fe1c 	bl	8000fdc <Moteur_setSpeed>
    Moteur_setSpeed(robot->moteur_gauche, 80);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	2150      	movs	r1, #80	@ 0x50
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fe16 	bl	8000fdc <Moteur_setSpeed>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bdb0      	pop	{r4, r5, r7, pc}
 80013b8:	9999999a 	.word	0x9999999a
 80013bc:	3fc99999 	.word	0x3fc99999
 80013c0:	40690000 	.word	0x40690000
 80013c4:	43910000 	.word	0x43910000
 80013c8:	43910000 	.word	0x43910000
 80013cc:	c3910000 	.word	0xc3910000
 80013d0:	c3910000 	.word	0xc3910000

080013d4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	@ 0x30
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2220      	movs	r2, #32
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f007 fba1 	bl	8008b34 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013f2:	4b32      	ldr	r3, [pc, #200]	@ (80014bc <MX_ADC1_Init+0xe8>)
 80013f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80013f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013fa:	4b30      	ldr	r3, [pc, #192]	@ (80014bc <MX_ADC1_Init+0xe8>)
 80013fc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001400:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001402:	4b2e      	ldr	r3, [pc, #184]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001408:	4b2c      	ldr	r3, [pc, #176]	@ (80014bc <MX_ADC1_Init+0xe8>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800140e:	4b2b      	ldr	r3, [pc, #172]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001414:	4b29      	ldr	r3, [pc, #164]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800141a:	4b28      	ldr	r3, [pc, #160]	@ (80014bc <MX_ADC1_Init+0xe8>)
 800141c:	2204      	movs	r2, #4
 800141e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001420:	4b26      	ldr	r3, [pc, #152]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001422:	2200      	movs	r2, #0
 8001424:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001426:	4b25      	ldr	r3, [pc, #148]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001428:	2200      	movs	r2, #0
 800142a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800142c:	4b23      	ldr	r3, [pc, #140]	@ (80014bc <MX_ADC1_Init+0xe8>)
 800142e:	2201      	movs	r2, #1
 8001430:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001432:	4b22      	ldr	r3, [pc, #136]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800143a:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <MX_ADC1_Init+0xe8>)
 800143c:	2200      	movs	r2, #0
 800143e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001440:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001442:	2200      	movs	r2, #0
 8001444:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001446:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800144e:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001450:	2200      	movs	r2, #0
 8001452:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001454:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800145c:	4817      	ldr	r0, [pc, #92]	@ (80014bc <MX_ADC1_Init+0xe8>)
 800145e:	f001 faef 	bl	8002a40 <HAL_ADC_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001468:	f000 fa88 	bl	800197c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001470:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001474:	4619      	mov	r1, r3
 8001476:	4811      	ldr	r0, [pc, #68]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001478:	f002 f87c 	bl	8003574 <HAL_ADCEx_MultiModeConfigChannel>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001482:	f000 fa7b 	bl	800197c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001486:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <MX_ADC1_Init+0xec>)
 8001488:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800148a:	2306      	movs	r3, #6
 800148c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001492:	237f      	movs	r3, #127	@ 0x7f
 8001494:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001496:	2304      	movs	r3, #4
 8001498:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	@ (80014bc <MX_ADC1_Init+0xe8>)
 80014a4:	f001 fc50 	bl	8002d48 <HAL_ADC_ConfigChannel>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80014ae:	f000 fa65 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	3730      	adds	r7, #48	@ 0x30
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200001f0 	.word	0x200001f0
 80014c0:	0c900008 	.word	0x0c900008

080014c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b09a      	sub	sp, #104	@ 0x68
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014dc:	f107 0310 	add.w	r3, r7, #16
 80014e0:	2244      	movs	r2, #68	@ 0x44
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f007 fb25 	bl	8008b34 <memset>
  if(adcHandle->Instance==ADC1)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014f2:	d134      	bne.n	800155e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014fa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80014fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	4618      	mov	r0, r3
 8001506:	f003 fb6f 	bl	8004be8 <HAL_RCCEx_PeriphCLKConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001510:	f000 fa34 	bl	800197c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001514:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <HAL_ADC_MspInit+0xa4>)
 8001516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001518:	4a13      	ldr	r2, [pc, #76]	@ (8001568 <HAL_ADC_MspInit+0xa4>)
 800151a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800151e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001520:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <HAL_ADC_MspInit+0xa4>)
 8001522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001524:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <HAL_ADC_MspInit+0xa4>)
 800152e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001530:	4a0d      	ldr	r2, [pc, #52]	@ (8001568 <HAL_ADC_MspInit+0xa4>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001538:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <HAL_ADC_MspInit+0xa4>)
 800153a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CB_OUT1_Pin|CB_OUT2_Pin;
 8001544:	230c      	movs	r3, #12
 8001546:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001548:	2303      	movs	r3, #3
 800154a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001554:	4619      	mov	r1, r3
 8001556:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800155a:	f002 fa4f 	bl	80039fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800155e:	bf00      	nop
 8001560:	3768      	adds	r7, #104	@ 0x68
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000

0800156c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	@ 0x28
 8001570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
 8001580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	4b46      	ldr	r3, [pc, #280]	@ (800169c <MX_GPIO_Init+0x130>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	4a45      	ldr	r2, [pc, #276]	@ (800169c <MX_GPIO_Init+0x130>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800158e:	4b43      	ldr	r3, [pc, #268]	@ (800169c <MX_GPIO_Init+0x130>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800159a:	4b40      	ldr	r3, [pc, #256]	@ (800169c <MX_GPIO_Init+0x130>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	4a3f      	ldr	r2, [pc, #252]	@ (800169c <MX_GPIO_Init+0x130>)
 80015a0:	f043 0320 	orr.w	r3, r3, #32
 80015a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a6:	4b3d      	ldr	r3, [pc, #244]	@ (800169c <MX_GPIO_Init+0x130>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	f003 0320 	and.w	r3, r3, #32
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	4b3a      	ldr	r3, [pc, #232]	@ (800169c <MX_GPIO_Init+0x130>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	4a39      	ldr	r2, [pc, #228]	@ (800169c <MX_GPIO_Init+0x130>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015be:	4b37      	ldr	r3, [pc, #220]	@ (800169c <MX_GPIO_Init+0x130>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	4b34      	ldr	r3, [pc, #208]	@ (800169c <MX_GPIO_Init+0x130>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	4a33      	ldr	r2, [pc, #204]	@ (800169c <MX_GPIO_Init+0x130>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d6:	4b31      	ldr	r3, [pc, #196]	@ (800169c <MX_GPIO_Init+0x130>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80015e2:	2200      	movs	r2, #0
 80015e4:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80015e8:	482d      	ldr	r0, [pc, #180]	@ (80016a0 <MX_GPIO_Init+0x134>)
 80015ea:	f002 fb89 	bl	8003d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CB_IN_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2190      	movs	r1, #144	@ 0x90
 80015f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f6:	f002 fb83 	bl	8003d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001600:	4828      	ldr	r0, [pc, #160]	@ (80016a4 <MX_GPIO_Init+0x138>)
 8001602:	f002 fb7d 	bl	8003d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001606:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800160a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4820      	ldr	r0, [pc, #128]	@ (80016a0 <MX_GPIO_Init+0x134>)
 8001620:	f002 f9ec 	bl	80039fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CB_IN_Pin|DEV_EN_LIDAR_Pin;
 8001624:	2390      	movs	r3, #144	@ 0x90
 8001626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800163e:	f002 f9dd 	bl	80039fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHAT_SOURIS_Pin;
 8001642:	2320      	movs	r3, #32
 8001644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHAT_SOURIS_GPIO_Port, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001658:	f002 f9d0 	bl	80039fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin;
 800165c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001662:	2301      	movs	r3, #1
 8001664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M_EN_LIDAR_GPIO_Port, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	480b      	ldr	r0, [pc, #44]	@ (80016a4 <MX_GPIO_Init+0x138>)
 8001676:	f002 f9c1 	bl	80039fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 800167a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800167e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	4805      	ldr	r0, [pc, #20]	@ (80016a4 <MX_GPIO_Init+0x138>)
 8001690:	f002 f9b4 	bl	80039fc <HAL_GPIO_Init>

}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	@ 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021000 	.word	0x40021000
 80016a0:	48000800 	.word	0x48000800
 80016a4:	48000400 	.word	0x48000400

080016a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	@ (800171c <MX_I2C1_Init+0x74>)
 80016ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001720 <MX_I2C1_Init+0x78>)
 80016b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xA0623C56;
 80016b2:	4b1a      	ldr	r3, [pc, #104]	@ (800171c <MX_I2C1_Init+0x74>)
 80016b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001724 <MX_I2C1_Init+0x7c>)
 80016b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016b8:	4b18      	ldr	r3, [pc, #96]	@ (800171c <MX_I2C1_Init+0x74>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016be:	4b17      	ldr	r3, [pc, #92]	@ (800171c <MX_I2C1_Init+0x74>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c4:	4b15      	ldr	r3, [pc, #84]	@ (800171c <MX_I2C1_Init+0x74>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016ca:	4b14      	ldr	r3, [pc, #80]	@ (800171c <MX_I2C1_Init+0x74>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016d0:	4b12      	ldr	r3, [pc, #72]	@ (800171c <MX_I2C1_Init+0x74>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016d6:	4b11      	ldr	r3, [pc, #68]	@ (800171c <MX_I2C1_Init+0x74>)
 80016d8:	2200      	movs	r2, #0
 80016da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <MX_I2C1_Init+0x74>)
 80016de:	2200      	movs	r2, #0
 80016e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016e2:	480e      	ldr	r0, [pc, #56]	@ (800171c <MX_I2C1_Init+0x74>)
 80016e4:	f002 fb3e 	bl	8003d64 <HAL_I2C_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016ee:	f000 f945 	bl	800197c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016f2:	2100      	movs	r1, #0
 80016f4:	4809      	ldr	r0, [pc, #36]	@ (800171c <MX_I2C1_Init+0x74>)
 80016f6:	f002 fbd0 	bl	8003e9a <HAL_I2CEx_ConfigAnalogFilter>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001700:	f000 f93c 	bl	800197c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001704:	2100      	movs	r1, #0
 8001706:	4805      	ldr	r0, [pc, #20]	@ (800171c <MX_I2C1_Init+0x74>)
 8001708:	f002 fc12 	bl	8003f30 <HAL_I2CEx_ConfigDigitalFilter>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001712:	f000 f933 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2000025c 	.word	0x2000025c
 8001720:	40005400 	.word	0x40005400
 8001724:	a0623c56 	.word	0xa0623c56

08001728 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b09a      	sub	sp, #104	@ 0x68
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	2244      	movs	r2, #68	@ 0x44
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f007 f9f3 	bl	8008b34 <memset>
  if(i2cHandle->Instance==I2C1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a1f      	ldr	r2, [pc, #124]	@ (80017d0 <HAL_I2C_MspInit+0xa8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d136      	bne.n	80017c6 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001758:	2340      	movs	r3, #64	@ 0x40
 800175a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800175c:	2300      	movs	r3, #0
 800175e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4618      	mov	r0, r3
 8001766:	f003 fa3f 	bl	8004be8 <HAL_RCCEx_PeriphCLKConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001770:	f000 f904 	bl	800197c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001774:	4b17      	ldr	r3, [pc, #92]	@ (80017d4 <HAL_I2C_MspInit+0xac>)
 8001776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001778:	4a16      	ldr	r2, [pc, #88]	@ (80017d4 <HAL_I2C_MspInit+0xac>)
 800177a:	f043 0302 	orr.w	r3, r3, #2
 800177e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001780:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <HAL_I2C_MspInit+0xac>)
 8001782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800178c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001790:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001792:	2312      	movs	r3, #18
 8001794:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800179e:	2304      	movs	r3, #4
 80017a0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017a6:	4619      	mov	r1, r3
 80017a8:	480b      	ldr	r0, [pc, #44]	@ (80017d8 <HAL_I2C_MspInit+0xb0>)
 80017aa:	f002 f927 	bl	80039fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ae:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <HAL_I2C_MspInit+0xac>)
 80017b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b2:	4a08      	ldr	r2, [pc, #32]	@ (80017d4 <HAL_I2C_MspInit+0xac>)
 80017b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_I2C_MspInit+0xac>)
 80017bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017c6:	bf00      	nop
 80017c8:	3768      	adds	r7, #104	@ 0x68
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40005400 	.word	0x40005400
 80017d4:	40021000 	.word	0x40021000
 80017d8:	48000400 	.word	0x48000400

080017dc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart4, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 80017e4:	1d39      	adds	r1, r7, #4
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	2201      	movs	r2, #1
 80017ec:	4803      	ldr	r0, [pc, #12]	@ (80017fc <__io_putchar+0x20>)
 80017ee:	f005 f860 	bl	80068b2 <HAL_UART_Transmit>
  return chr;
 80017f2:	687b      	ldr	r3, [r7, #4]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	2000049c 	.word	0x2000049c

08001800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001804:	f000 feed 	bl	80025e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001808:	f000 f85c 	bl	80018c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800180c:	f7ff feae 	bl	800156c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001810:	f7ff fde0 	bl	80013d4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001814:	f000 fa68 	bl	8001ce8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001818:	f000 fb0a 	bl	8001e30 <MX_TIM3_Init>
  MX_TIM4_Init();
 800181c:	f000 fb5e 	bl	8001edc <MX_TIM4_Init>
  MX_TIM16_Init();
 8001820:	f000 fbb2 	bl	8001f88 <MX_TIM16_Init>
  MX_UART4_Init();
 8001824:	f000 fd7a 	bl	800231c <MX_UART4_Init>
  MX_USART3_UART_Init();
 8001828:	f000 fdc4 	bl	80023b4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800182c:	f7ff ff3c 	bl	80016a8 <MX_I2C1_Init>
 // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);  // Signal complémentaire (CH1N)
  //nbCounter = __HAL_TIM_GET_COUNTER(&htim1);
    //HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);


  Moteur_init(&moteur_droit, &htim1, TIM_CHANNEL_1);
 8001830:	2200      	movs	r2, #0
 8001832:	491d      	ldr	r1, [pc, #116]	@ (80018a8 <main+0xa8>)
 8001834:	481d      	ldr	r0, [pc, #116]	@ (80018ac <main+0xac>)
 8001836:	f7ff fba7 	bl	8000f88 <Moteur_init>
  Moteur_init(&moteur_gauche, &htim1, TIM_CHANNEL_2);
 800183a:	2204      	movs	r2, #4
 800183c:	491a      	ldr	r1, [pc, #104]	@ (80018a8 <main+0xa8>)
 800183e:	481c      	ldr	r0, [pc, #112]	@ (80018b0 <main+0xb0>)
 8001840:	f7ff fba2 	bl	8000f88 <Moteur_init>
  Moteur_start(&moteur_droit);
 8001844:	4819      	ldr	r0, [pc, #100]	@ (80018ac <main+0xac>)
 8001846:	f7ff fcc9 	bl	80011dc <Moteur_start>
  Moteur_start(&moteur_gauche);
 800184a:	4819      	ldr	r0, [pc, #100]	@ (80018b0 <main+0xb0>)
 800184c:	f7ff fcc6 	bl	80011dc <Moteur_start>
  robot.moteur_droite = &moteur_droit;
 8001850:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <main+0xb4>)
 8001852:	4a16      	ldr	r2, [pc, #88]	@ (80018ac <main+0xac>)
 8001854:	61da      	str	r2, [r3, #28]
  robot.moteur_gauche = &moteur_gauche;
 8001856:	4b17      	ldr	r3, [pc, #92]	@ (80018b4 <main+0xb4>)
 8001858:	4a15      	ldr	r2, [pc, #84]	@ (80018b0 <main+0xb0>)
 800185a:	621a      	str	r2, [r3, #32]
  robot.theta = 0;
 800185c:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <main+0xb4>)
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  robot.omega = 0;
 8001864:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <main+0xb4>)
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  robot.vitesse = 0;
 800186c:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <main+0xb4>)
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	615a      	str	r2, [r3, #20]
  Robot_setAngle(&robot, 80);
 8001874:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 80018b8 <main+0xb8>
 8001878:	480e      	ldr	r0, [pc, #56]	@ (80018b4 <main+0xb4>)
 800187a:	f7ff fcbd 	bl	80011f8 <Robot_setAngle>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    printf("hello \r\n");
 800187e:	480f      	ldr	r0, [pc, #60]	@ (80018bc <main+0xbc>)
 8001880:	f007 f878 	bl	8008974 <puts>

      HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001884:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001888:	480d      	ldr	r0, [pc, #52]	@ (80018c0 <main+0xc0>)
 800188a:	f002 fa51 	bl	8003d30 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800188e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001892:	480b      	ldr	r0, [pc, #44]	@ (80018c0 <main+0xc0>)
 8001894:	f002 fa4c 	bl	8003d30 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001898:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800189c:	4808      	ldr	r0, [pc, #32]	@ (80018c0 <main+0xc0>)
 800189e:	f002 fa47 	bl	8003d30 <HAL_GPIO_TogglePin>
    printf("hello \r\n");
 80018a2:	bf00      	nop
 80018a4:	e7eb      	b.n	800187e <main+0x7e>
 80018a6:	bf00      	nop
 80018a8:	2000036c 	.word	0x2000036c
 80018ac:	200002b0 	.word	0x200002b0
 80018b0:	200002d4 	.word	0x200002d4
 80018b4:	200002f8 	.word	0x200002f8
 80018b8:	42a00000 	.word	0x42a00000
 80018bc:	0800a74c 	.word	0x0800a74c
 80018c0:	48000800 	.word	0x48000800

080018c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b094      	sub	sp, #80	@ 0x50
 80018c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ca:	f107 0318 	add.w	r3, r7, #24
 80018ce:	2238      	movs	r2, #56	@ 0x38
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f007 f92e 	bl	8008b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f002 fb6e 	bl	8003fc8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018ec:	2301      	movs	r3, #1
 80018ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018f4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f6:	2302      	movs	r3, #2
 80018f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018fa:	2303      	movs	r3, #3
 80018fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80018fe:	2304      	movs	r3, #4
 8001900:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001902:	2355      	movs	r3, #85	@ 0x55
 8001904:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001906:	2302      	movs	r3, #2
 8001908:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800190a:	2302      	movs	r3, #2
 800190c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800190e:	2302      	movs	r3, #2
 8001910:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001912:	f107 0318 	add.w	r3, r7, #24
 8001916:	4618      	mov	r0, r3
 8001918:	f002 fc0a 	bl	8004130 <HAL_RCC_OscConfig>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001922:	f000 f82b 	bl	800197c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001926:	230f      	movs	r3, #15
 8001928:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800192a:	2303      	movs	r3, #3
 800192c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	2104      	movs	r1, #4
 800193e:	4618      	mov	r0, r3
 8001940:	f002 ff08 	bl	8004754 <HAL_RCC_ClockConfig>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800194a:	f000 f817 	bl	800197c <Error_Handler>
  }
}
 800194e:	bf00      	nop
 8001950:	3750      	adds	r7, #80	@ 0x50
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a04      	ldr	r2, [pc, #16]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d101      	bne.n	800196e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800196a:	f000 fe53 	bl	8002614 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40001000 	.word	0x40001000

0800197c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001980:	b672      	cpsid	i
}
 8001982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001984:	bf00      	nop
 8001986:	e7fd      	b.n	8001984 <Error_Handler+0x8>

08001988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <HAL_MspInit+0x44>)
 8001990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001992:	4a0e      	ldr	r2, [pc, #56]	@ (80019cc <HAL_MspInit+0x44>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6613      	str	r3, [r2, #96]	@ 0x60
 800199a:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <HAL_MspInit+0x44>)
 800199c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <HAL_MspInit+0x44>)
 80019a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019aa:	4a08      	ldr	r2, [pc, #32]	@ (80019cc <HAL_MspInit+0x44>)
 80019ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_MspInit+0x44>)
 80019b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019be:	f002 fba7 	bl	8004110 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000

080019d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08c      	sub	sp, #48	@ 0x30
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a94 <HAL_InitTick+0xc4>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001a94 <HAL_InitTick+0xc4>)
 80019e6:	f043 0310 	orr.w	r3, r3, #16
 80019ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ec:	4b29      	ldr	r3, [pc, #164]	@ (8001a94 <HAL_InitTick+0xc4>)
 80019ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f0:	f003 0310 	and.w	r3, r3, #16
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019f8:	f107 020c 	add.w	r2, r7, #12
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f003 f87a 	bl	8004afc <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a08:	f003 f84c 	bl	8004aa4 <HAL_RCC_GetPCLK1Freq>
 8001a0c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a10:	4a21      	ldr	r2, [pc, #132]	@ (8001a98 <HAL_InitTick+0xc8>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	0c9b      	lsrs	r3, r3, #18
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a9c <HAL_InitTick+0xcc>)
 8001a1e:	4a20      	ldr	r2, [pc, #128]	@ (8001aa0 <HAL_InitTick+0xd0>)
 8001a20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a22:	4b1e      	ldr	r3, [pc, #120]	@ (8001a9c <HAL_InitTick+0xcc>)
 8001a24:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a28:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a9c <HAL_InitTick+0xcc>)
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a30:	4b1a      	ldr	r3, [pc, #104]	@ (8001a9c <HAL_InitTick+0xcc>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a36:	4b19      	ldr	r3, [pc, #100]	@ (8001a9c <HAL_InitTick+0xcc>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001a3c:	4817      	ldr	r0, [pc, #92]	@ (8001a9c <HAL_InitTick+0xcc>)
 8001a3e:	f003 fac3 	bl	8004fc8 <HAL_TIM_Base_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001a48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d11b      	bne.n	8001a88 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a50:	4812      	ldr	r0, [pc, #72]	@ (8001a9c <HAL_InitTick+0xcc>)
 8001a52:	f003 fb11 	bl	8005078 <HAL_TIM_Base_Start_IT>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001a5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d111      	bne.n	8001a88 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a64:	2036      	movs	r0, #54	@ 0x36
 8001a66:	f001 fefb 	bl	8003860 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b0f      	cmp	r3, #15
 8001a6e:	d808      	bhi.n	8001a82 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a70:	2200      	movs	r2, #0
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	2036      	movs	r0, #54	@ 0x36
 8001a76:	f001 fed9 	bl	800382c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa4 <HAL_InitTick+0xd4>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	e002      	b.n	8001a88 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001a88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3730      	adds	r7, #48	@ 0x30
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40021000 	.word	0x40021000
 8001a98:	431bde83 	.word	0x431bde83
 8001a9c:	2000031c 	.word	0x2000031c
 8001aa0:	40001000 	.word	0x40001000
 8001aa4:	20000004 	.word	0x20000004

08001aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <NMI_Handler+0x4>

08001ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <HardFault_Handler+0x4>

08001ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <MemManage_Handler+0x4>

08001ac0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <BusFault_Handler+0x4>

08001ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <UsageFault_Handler+0x4>

08001ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b0c:	4802      	ldr	r0, [pc, #8]	@ (8001b18 <USART3_IRQHandler+0x10>)
 8001b0e:	f004 ff5f 	bl	80069d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000530 	.word	0x20000530

08001b1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b20:	4802      	ldr	r0, [pc, #8]	@ (8001b2c <TIM6_DAC_IRQHandler+0x10>)
 8001b22:	f003 fda7 	bl	8005674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000031c 	.word	0x2000031c

08001b30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return 1;
 8001b34:	2301      	movs	r3, #1
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <_kill>:

int _kill(int pid, int sig)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b4a:	f007 f855 	bl	8008bf8 <__errno>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2216      	movs	r2, #22
 8001b52:	601a      	str	r2, [r3, #0]
  return -1;
 8001b54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <_exit>:

void _exit (int status)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b68:	f04f 31ff 	mov.w	r1, #4294967295
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ffe7 	bl	8001b40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b72:	bf00      	nop
 8001b74:	e7fd      	b.n	8001b72 <_exit+0x12>

08001b76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	60f8      	str	r0, [r7, #12]
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	e00a      	b.n	8001b9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b88:	f3af 8000 	nop.w
 8001b8c:	4601      	mov	r1, r0
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	60ba      	str	r2, [r7, #8]
 8001b94:	b2ca      	uxtb	r2, r1
 8001b96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	dbf0      	blt.n	8001b88 <_read+0x12>
  }

  return len;
 8001ba6:	687b      	ldr	r3, [r7, #4]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	e009      	b.n	8001bd6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	60ba      	str	r2, [r7, #8]
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fe06 	bl	80017dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	dbf1      	blt.n	8001bc2 <_write+0x12>
  }
  return len;
 8001bde:	687b      	ldr	r3, [r7, #4]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <_close>:

int _close(int file)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c10:	605a      	str	r2, [r3, #4]
  return 0;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <_isatty>:

int _isatty(int file)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c28:	2301      	movs	r3, #1
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b085      	sub	sp, #20
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c58:	4a14      	ldr	r2, [pc, #80]	@ (8001cac <_sbrk+0x5c>)
 8001c5a:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <_sbrk+0x60>)
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c64:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <_sbrk+0x64>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d102      	bne.n	8001c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c6c:	4b11      	ldr	r3, [pc, #68]	@ (8001cb4 <_sbrk+0x64>)
 8001c6e:	4a12      	ldr	r2, [pc, #72]	@ (8001cb8 <_sbrk+0x68>)
 8001c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c72:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <_sbrk+0x64>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d207      	bcs.n	8001c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c80:	f006 ffba 	bl	8008bf8 <__errno>
 8001c84:	4603      	mov	r3, r0
 8001c86:	220c      	movs	r2, #12
 8001c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8e:	e009      	b.n	8001ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c90:	4b08      	ldr	r3, [pc, #32]	@ (8001cb4 <_sbrk+0x64>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c96:	4b07      	ldr	r3, [pc, #28]	@ (8001cb4 <_sbrk+0x64>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	4a05      	ldr	r2, [pc, #20]	@ (8001cb4 <_sbrk+0x64>)
 8001ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20008000 	.word	0x20008000
 8001cb0:	00000400 	.word	0x00000400
 8001cb4:	20000368 	.word	0x20000368
 8001cb8:	20000718 	.word	0x20000718

08001cbc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cc0:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <SystemInit+0x28>)
 8001cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cc6:	4a07      	ldr	r2, [pc, #28]	@ (8001ce4 <SystemInit+0x28>)
 8001cc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ccc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8001cd0:	4b04      	ldr	r3, [pc, #16]	@ (8001ce4 <SystemInit+0x28>)
 8001cd2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001cd6:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b098      	sub	sp, #96	@ 0x60
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cfa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
 8001d08:	611a      	str	r2, [r3, #16]
 8001d0a:	615a      	str	r2, [r3, #20]
 8001d0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	2234      	movs	r2, #52	@ 0x34
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f006 ff0d 	bl	8008b34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d1a:	4b43      	ldr	r3, [pc, #268]	@ (8001e28 <MX_TIM1_Init+0x140>)
 8001d1c:	4a43      	ldr	r2, [pc, #268]	@ (8001e2c <MX_TIM1_Init+0x144>)
 8001d1e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d20:	4b41      	ldr	r3, [pc, #260]	@ (8001e28 <MX_TIM1_Init+0x140>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d26:	4b40      	ldr	r3, [pc, #256]	@ (8001e28 <MX_TIM1_Init+0x140>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8001d2c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e28 <MX_TIM1_Init+0x140>)
 8001d2e:	f242 1233 	movw	r2, #8499	@ 0x2133
 8001d32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d34:	4b3c      	ldr	r3, [pc, #240]	@ (8001e28 <MX_TIM1_Init+0x140>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e28 <MX_TIM1_Init+0x140>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d40:	4b39      	ldr	r3, [pc, #228]	@ (8001e28 <MX_TIM1_Init+0x140>)
 8001d42:	2280      	movs	r2, #128	@ 0x80
 8001d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d46:	4838      	ldr	r0, [pc, #224]	@ (8001e28 <MX_TIM1_Init+0x140>)
 8001d48:	f003 fa00 	bl	800514c <HAL_TIM_PWM_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001d52:	f7ff fe13 	bl	800197c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d62:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d66:	4619      	mov	r1, r3
 8001d68:	482f      	ldr	r0, [pc, #188]	@ (8001e28 <MX_TIM1_Init+0x140>)
 8001d6a:	f004 fbd9 	bl	8006520 <HAL_TIMEx_MasterConfigSynchronization>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001d74:	f7ff fe02 	bl	800197c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d78:	2360      	movs	r3, #96	@ 0x60
 8001d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 3400;
 8001d7c:	f640 5348 	movw	r3, #3400	@ 0xd48
 8001d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d82:	2300      	movs	r3, #0
 8001d84:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d86:	2300      	movs	r3, #0
 8001d88:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d96:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4822      	ldr	r0, [pc, #136]	@ (8001e28 <MX_TIM1_Init+0x140>)
 8001da0:	f003 fdb8 	bl	8005914 <HAL_TIM_PWM_ConfigChannel>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001daa:	f7ff fde7 	bl	800197c <Error_Handler>
  }
  sConfigOC.Pulse = 2400;
 8001dae:	f44f 6316 	mov.w	r3, #2400	@ 0x960
 8001db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001db4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001db8:	2204      	movs	r2, #4
 8001dba:	4619      	mov	r1, r3
 8001dbc:	481a      	ldr	r0, [pc, #104]	@ (8001e28 <MX_TIM1_Init+0x140>)
 8001dbe:	f003 fda9 	bl	8005914 <HAL_TIM_PWM_ConfigChannel>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8001dc8:	f7ff fdd8 	bl	800197c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001de0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001de4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001dea:	2300      	movs	r3, #0
 8001dec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001df2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001df6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e00:	2300      	movs	r3, #0
 8001e02:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	4619      	mov	r1, r3
 8001e08:	4807      	ldr	r0, [pc, #28]	@ (8001e28 <MX_TIM1_Init+0x140>)
 8001e0a:	f004 fc0b 	bl	8006624 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001e14:	f7ff fdb2 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e18:	4803      	ldr	r0, [pc, #12]	@ (8001e28 <MX_TIM1_Init+0x140>)
 8001e1a:	f000 fa03 	bl	8002224 <HAL_TIM_MspPostInit>

}
 8001e1e:	bf00      	nop
 8001e20:	3760      	adds	r7, #96	@ 0x60
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2000036c 	.word	0x2000036c
 8001e2c:	40012c00 	.word	0x40012c00

08001e30 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08c      	sub	sp, #48	@ 0x30
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e36:	f107 030c 	add.w	r3, r7, #12
 8001e3a:	2224      	movs	r2, #36	@ 0x24
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f006 fe78 	bl	8008b34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e44:	463b      	mov	r3, r7
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e4e:	4b21      	ldr	r3, [pc, #132]	@ (8001ed4 <MX_TIM3_Init+0xa4>)
 8001e50:	4a21      	ldr	r2, [pc, #132]	@ (8001ed8 <MX_TIM3_Init+0xa8>)
 8001e52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e54:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed4 <MX_TIM3_Init+0xa4>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed4 <MX_TIM3_Init+0xa4>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e60:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed4 <MX_TIM3_Init+0xa4>)
 8001e62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e68:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed4 <MX_TIM3_Init+0xa4>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6e:	4b19      	ldr	r3, [pc, #100]	@ (8001ed4 <MX_TIM3_Init+0xa4>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e74:	2303      	movs	r3, #3
 8001e76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	480d      	ldr	r0, [pc, #52]	@ (8001ed4 <MX_TIM3_Init+0xa4>)
 8001ea0:	f003 fb42 	bl	8005528 <HAL_TIM_Encoder_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001eaa:	f7ff fd67 	bl	800197c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001eb6:	463b      	mov	r3, r7
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4806      	ldr	r0, [pc, #24]	@ (8001ed4 <MX_TIM3_Init+0xa4>)
 8001ebc:	f004 fb30 	bl	8006520 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001ec6:	f7ff fd59 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	3730      	adds	r7, #48	@ 0x30
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200003b8 	.word	0x200003b8
 8001ed8:	40000400 	.word	0x40000400

08001edc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08c      	sub	sp, #48	@ 0x30
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ee2:	f107 030c 	add.w	r3, r7, #12
 8001ee6:	2224      	movs	r2, #36	@ 0x24
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f006 fe22 	bl	8008b34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef0:	463b      	mov	r3, r7
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001efa:	4b21      	ldr	r3, [pc, #132]	@ (8001f80 <MX_TIM4_Init+0xa4>)
 8001efc:	4a21      	ldr	r2, [pc, #132]	@ (8001f84 <MX_TIM4_Init+0xa8>)
 8001efe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f00:	4b1f      	ldr	r3, [pc, #124]	@ (8001f80 <MX_TIM4_Init+0xa4>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f06:	4b1e      	ldr	r3, [pc, #120]	@ (8001f80 <MX_TIM4_Init+0xa4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f80 <MX_TIM4_Init+0xa4>)
 8001f0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f14:	4b1a      	ldr	r3, [pc, #104]	@ (8001f80 <MX_TIM4_Init+0xa4>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f1a:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <MX_TIM4_Init+0xa4>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f20:	2303      	movs	r3, #3
 8001f22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f34:	2300      	movs	r3, #0
 8001f36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	4619      	mov	r1, r3
 8001f4a:	480d      	ldr	r0, [pc, #52]	@ (8001f80 <MX_TIM4_Init+0xa4>)
 8001f4c:	f003 faec 	bl	8005528 <HAL_TIM_Encoder_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001f56:	f7ff fd11 	bl	800197c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f62:	463b      	mov	r3, r7
 8001f64:	4619      	mov	r1, r3
 8001f66:	4806      	ldr	r0, [pc, #24]	@ (8001f80 <MX_TIM4_Init+0xa4>)
 8001f68:	f004 fada 	bl	8006520 <HAL_TIMEx_MasterConfigSynchronization>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001f72:	f7ff fd03 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	3730      	adds	r7, #48	@ 0x30
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000404 	.word	0x20000404
 8001f84:	40000800 	.word	0x40000800

08001f88 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b094      	sub	sp, #80	@ 0x50
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f8e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
 8001f9c:	611a      	str	r2, [r3, #16]
 8001f9e:	615a      	str	r2, [r3, #20]
 8001fa0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fa2:	463b      	mov	r3, r7
 8001fa4:	2234      	movs	r2, #52	@ 0x34
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f006 fdc3 	bl	8008b34 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001fae:	4b31      	ldr	r3, [pc, #196]	@ (8002074 <MX_TIM16_Init+0xec>)
 8001fb0:	4a31      	ldr	r2, [pc, #196]	@ (8002078 <MX_TIM16_Init+0xf0>)
 8001fb2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001fb4:	4b2f      	ldr	r3, [pc, #188]	@ (8002074 <MX_TIM16_Init+0xec>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fba:	4b2e      	ldr	r3, [pc, #184]	@ (8002074 <MX_TIM16_Init+0xec>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8002074 <MX_TIM16_Init+0xec>)
 8001fc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fc6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002074 <MX_TIM16_Init+0xec>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001fce:	4b29      	ldr	r3, [pc, #164]	@ (8002074 <MX_TIM16_Init+0xec>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd4:	4b27      	ldr	r3, [pc, #156]	@ (8002074 <MX_TIM16_Init+0xec>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001fda:	4826      	ldr	r0, [pc, #152]	@ (8002074 <MX_TIM16_Init+0xec>)
 8001fdc:	f002 fff4 	bl	8004fc8 <HAL_TIM_Base_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001fe6:	f7ff fcc9 	bl	800197c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001fea:	4822      	ldr	r0, [pc, #136]	@ (8002074 <MX_TIM16_Init+0xec>)
 8001fec:	f003 f8ae 	bl	800514c <HAL_TIM_PWM_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001ff6:	f7ff fcc1 	bl	800197c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ffa:	2360      	movs	r3, #96	@ 0x60
 8001ffc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002002:	2300      	movs	r3, #0
 8002004:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002006:	2300      	movs	r3, #0
 8002008:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800200e:	2300      	movs	r3, #0
 8002010:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002016:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800201a:	2200      	movs	r2, #0
 800201c:	4619      	mov	r1, r3
 800201e:	4815      	ldr	r0, [pc, #84]	@ (8002074 <MX_TIM16_Init+0xec>)
 8002020:	f003 fc78 	bl	8005914 <HAL_TIM_PWM_ConfigChannel>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800202a:	f7ff fca7 	bl	800197c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002042:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002046:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002050:	463b      	mov	r3, r7
 8002052:	4619      	mov	r1, r3
 8002054:	4807      	ldr	r0, [pc, #28]	@ (8002074 <MX_TIM16_Init+0xec>)
 8002056:	f004 fae5 	bl	8006624 <HAL_TIMEx_ConfigBreakDeadTime>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8002060:	f7ff fc8c 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002064:	4803      	ldr	r0, [pc, #12]	@ (8002074 <MX_TIM16_Init+0xec>)
 8002066:	f000 f8dd 	bl	8002224 <HAL_TIM_MspPostInit>

}
 800206a:	bf00      	nop
 800206c:	3750      	adds	r7, #80	@ 0x50
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000450 	.word	0x20000450
 8002078:	40014400 	.word	0x40014400

0800207c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0a      	ldr	r2, [pc, #40]	@ (80020b4 <HAL_TIM_PWM_MspInit+0x38>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d10b      	bne.n	80020a6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800208e:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002092:	4a09      	ldr	r2, [pc, #36]	@ (80020b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002094:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002098:	6613      	str	r3, [r2, #96]	@ 0x60
 800209a:	4b07      	ldr	r3, [pc, #28]	@ (80020b8 <HAL_TIM_PWM_MspInit+0x3c>)
 800209c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800209e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40012c00 	.word	0x40012c00
 80020b8:	40021000 	.word	0x40021000

080020bc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	@ 0x30
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	f107 031c 	add.w	r3, r7, #28
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a3d      	ldr	r2, [pc, #244]	@ (80021d0 <HAL_TIM_Encoder_MspInit+0x114>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d144      	bne.n	8002168 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020de:	4b3d      	ldr	r3, [pc, #244]	@ (80021d4 <HAL_TIM_Encoder_MspInit+0x118>)
 80020e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e2:	4a3c      	ldr	r2, [pc, #240]	@ (80021d4 <HAL_TIM_Encoder_MspInit+0x118>)
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ea:	4b3a      	ldr	r3, [pc, #232]	@ (80021d4 <HAL_TIM_Encoder_MspInit+0x118>)
 80020ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	61bb      	str	r3, [r7, #24]
 80020f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f6:	4b37      	ldr	r3, [pc, #220]	@ (80021d4 <HAL_TIM_Encoder_MspInit+0x118>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fa:	4a36      	ldr	r2, [pc, #216]	@ (80021d4 <HAL_TIM_Encoder_MspInit+0x118>)
 80020fc:	f043 0304 	orr.w	r3, r3, #4
 8002100:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002102:	4b34      	ldr	r3, [pc, #208]	@ (80021d4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	4b31      	ldr	r3, [pc, #196]	@ (80021d4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002112:	4a30      	ldr	r2, [pc, #192]	@ (80021d4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800211a:	4b2e      	ldr	r3, [pc, #184]	@ (80021d4 <HAL_TIM_Encoder_MspInit+0x118>)
 800211c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002126:	2340      	movs	r3, #64	@ 0x40
 8002128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002136:	2302      	movs	r3, #2
 8002138:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800213a:	f107 031c 	add.w	r3, r7, #28
 800213e:	4619      	mov	r1, r3
 8002140:	4825      	ldr	r0, [pc, #148]	@ (80021d8 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002142:	f001 fc5b 	bl	80039fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002146:	2320      	movs	r3, #32
 8002148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214a:	2302      	movs	r3, #2
 800214c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002156:	2302      	movs	r3, #2
 8002158:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215a:	f107 031c 	add.w	r3, r7, #28
 800215e:	4619      	mov	r1, r3
 8002160:	481e      	ldr	r0, [pc, #120]	@ (80021dc <HAL_TIM_Encoder_MspInit+0x120>)
 8002162:	f001 fc4b 	bl	80039fc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002166:	e02e      	b.n	80021c6 <HAL_TIM_Encoder_MspInit+0x10a>
  else if(tim_encoderHandle->Instance==TIM4)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a1c      	ldr	r2, [pc, #112]	@ (80021e0 <HAL_TIM_Encoder_MspInit+0x124>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d129      	bne.n	80021c6 <HAL_TIM_Encoder_MspInit+0x10a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002172:	4b18      	ldr	r3, [pc, #96]	@ (80021d4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002176:	4a17      	ldr	r2, [pc, #92]	@ (80021d4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002178:	f043 0304 	orr.w	r3, r3, #4
 800217c:	6593      	str	r3, [r2, #88]	@ 0x58
 800217e:	4b15      	ldr	r3, [pc, #84]	@ (80021d4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218a:	4b12      	ldr	r3, [pc, #72]	@ (80021d4 <HAL_TIM_Encoder_MspInit+0x118>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218e:	4a11      	ldr	r2, [pc, #68]	@ (80021d4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002196:	4b0f      	ldr	r3, [pc, #60]	@ (80021d4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PHASEB1_Pin|PHASEA1_Pin;
 80021a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80021a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80021b4:	230a      	movs	r3, #10
 80021b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	4619      	mov	r1, r3
 80021be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021c2:	f001 fc1b 	bl	80039fc <HAL_GPIO_Init>
}
 80021c6:	bf00      	nop
 80021c8:	3730      	adds	r7, #48	@ 0x30
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40000400 	.word	0x40000400
 80021d4:	40021000 	.word	0x40021000
 80021d8:	48000800 	.word	0x48000800
 80021dc:	48000400 	.word	0x48000400
 80021e0:	40000800 	.word	0x40000800

080021e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a0a      	ldr	r2, [pc, #40]	@ (800221c <HAL_TIM_Base_MspInit+0x38>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d10b      	bne.n	800220e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80021f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002220 <HAL_TIM_Base_MspInit+0x3c>)
 80021f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021fa:	4a09      	ldr	r2, [pc, #36]	@ (8002220 <HAL_TIM_Base_MspInit+0x3c>)
 80021fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002200:	6613      	str	r3, [r2, #96]	@ 0x60
 8002202:	4b07      	ldr	r3, [pc, #28]	@ (8002220 <HAL_TIM_Base_MspInit+0x3c>)
 8002204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40014400 	.word	0x40014400
 8002220:	40021000 	.word	0x40021000

08002224 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	@ 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a32      	ldr	r2, [pc, #200]	@ (800230c <HAL_TIM_MspPostInit+0xe8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d13b      	bne.n	80022be <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002246:	4b32      	ldr	r3, [pc, #200]	@ (8002310 <HAL_TIM_MspPostInit+0xec>)
 8002248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224a:	4a31      	ldr	r2, [pc, #196]	@ (8002310 <HAL_TIM_MspPostInit+0xec>)
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002252:	4b2f      	ldr	r3, [pc, #188]	@ (8002310 <HAL_TIM_MspPostInit+0xec>)
 8002254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225e:	4b2c      	ldr	r3, [pc, #176]	@ (8002310 <HAL_TIM_MspPostInit+0xec>)
 8002260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002262:	4a2b      	ldr	r2, [pc, #172]	@ (8002310 <HAL_TIM_MspPostInit+0xec>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800226a:	4b29      	ldr	r3, [pc, #164]	@ (8002310 <HAL_TIM_MspPostInit+0xec>)
 800226c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = REV2_Pin|REV1_Pin;
 8002276:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800227a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002288:	2306      	movs	r3, #6
 800228a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	4619      	mov	r1, r3
 8002292:	4820      	ldr	r0, [pc, #128]	@ (8002314 <HAL_TIM_MspPostInit+0xf0>)
 8002294:	f001 fbb2 	bl	80039fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FWD2_Pin|FWD1_Pin;
 8002298:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800229c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	2302      	movs	r3, #2
 80022a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a6:	2300      	movs	r3, #0
 80022a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80022aa:	2306      	movs	r3, #6
 80022ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	4619      	mov	r1, r3
 80022b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022b8:	f001 fba0 	bl	80039fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80022bc:	e021      	b.n	8002302 <HAL_TIM_MspPostInit+0xde>
  else if(timHandle->Instance==TIM16)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a15      	ldr	r2, [pc, #84]	@ (8002318 <HAL_TIM_MspPostInit+0xf4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d11c      	bne.n	8002302 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c8:	4b11      	ldr	r3, [pc, #68]	@ (8002310 <HAL_TIM_MspPostInit+0xec>)
 80022ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022cc:	4a10      	ldr	r2, [pc, #64]	@ (8002310 <HAL_TIM_MspPostInit+0xec>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002310 <HAL_TIM_MspPostInit+0xec>)
 80022d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M_SCTR_LIDAR_Pin;
 80022e0:	2340      	movs	r3, #64	@ 0x40
 80022e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e4:	2302      	movs	r3, #2
 80022e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ec:	2300      	movs	r3, #0
 80022ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80022f0:	2301      	movs	r3, #1
 80022f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 80022f4:	f107 0314 	add.w	r3, r7, #20
 80022f8:	4619      	mov	r1, r3
 80022fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022fe:	f001 fb7d 	bl	80039fc <HAL_GPIO_Init>
}
 8002302:	bf00      	nop
 8002304:	3728      	adds	r7, #40	@ 0x28
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40012c00 	.word	0x40012c00
 8002310:	40021000 	.word	0x40021000
 8002314:	48000400 	.word	0x48000400
 8002318:	40014400 	.word	0x40014400

0800231c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002320:	4b22      	ldr	r3, [pc, #136]	@ (80023ac <MX_UART4_Init+0x90>)
 8002322:	4a23      	ldr	r2, [pc, #140]	@ (80023b0 <MX_UART4_Init+0x94>)
 8002324:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002326:	4b21      	ldr	r3, [pc, #132]	@ (80023ac <MX_UART4_Init+0x90>)
 8002328:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800232c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800232e:	4b1f      	ldr	r3, [pc, #124]	@ (80023ac <MX_UART4_Init+0x90>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002334:	4b1d      	ldr	r3, [pc, #116]	@ (80023ac <MX_UART4_Init+0x90>)
 8002336:	2200      	movs	r2, #0
 8002338:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800233a:	4b1c      	ldr	r3, [pc, #112]	@ (80023ac <MX_UART4_Init+0x90>)
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002340:	4b1a      	ldr	r3, [pc, #104]	@ (80023ac <MX_UART4_Init+0x90>)
 8002342:	220c      	movs	r2, #12
 8002344:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002346:	4b19      	ldr	r3, [pc, #100]	@ (80023ac <MX_UART4_Init+0x90>)
 8002348:	2200      	movs	r2, #0
 800234a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800234c:	4b17      	ldr	r3, [pc, #92]	@ (80023ac <MX_UART4_Init+0x90>)
 800234e:	2200      	movs	r2, #0
 8002350:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002352:	4b16      	ldr	r3, [pc, #88]	@ (80023ac <MX_UART4_Init+0x90>)
 8002354:	2200      	movs	r2, #0
 8002356:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002358:	4b14      	ldr	r3, [pc, #80]	@ (80023ac <MX_UART4_Init+0x90>)
 800235a:	2200      	movs	r2, #0
 800235c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800235e:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <MX_UART4_Init+0x90>)
 8002360:	2200      	movs	r2, #0
 8002362:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002364:	4811      	ldr	r0, [pc, #68]	@ (80023ac <MX_UART4_Init+0x90>)
 8002366:	f004 fa54 	bl	8006812 <HAL_UART_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002370:	f7ff fb04 	bl	800197c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002374:	2100      	movs	r1, #0
 8002376:	480d      	ldr	r0, [pc, #52]	@ (80023ac <MX_UART4_Init+0x90>)
 8002378:	f005 fc0b 	bl	8007b92 <HAL_UARTEx_SetTxFifoThreshold>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002382:	f7ff fafb 	bl	800197c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002386:	2100      	movs	r1, #0
 8002388:	4808      	ldr	r0, [pc, #32]	@ (80023ac <MX_UART4_Init+0x90>)
 800238a:	f005 fc40 	bl	8007c0e <HAL_UARTEx_SetRxFifoThreshold>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002394:	f7ff faf2 	bl	800197c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002398:	4804      	ldr	r0, [pc, #16]	@ (80023ac <MX_UART4_Init+0x90>)
 800239a:	f005 fbc1 	bl	8007b20 <HAL_UARTEx_DisableFifoMode>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80023a4:	f7ff faea 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	2000049c 	.word	0x2000049c
 80023b0:	40004c00 	.word	0x40004c00

080023b4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023b8:	4b22      	ldr	r3, [pc, #136]	@ (8002444 <MX_USART3_UART_Init+0x90>)
 80023ba:	4a23      	ldr	r2, [pc, #140]	@ (8002448 <MX_USART3_UART_Init+0x94>)
 80023bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023be:	4b21      	ldr	r3, [pc, #132]	@ (8002444 <MX_USART3_UART_Init+0x90>)
 80023c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002444 <MX_USART3_UART_Init+0x90>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002444 <MX_USART3_UART_Init+0x90>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002444 <MX_USART3_UART_Init+0x90>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002444 <MX_USART3_UART_Init+0x90>)
 80023da:	220c      	movs	r2, #12
 80023dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023de:	4b19      	ldr	r3, [pc, #100]	@ (8002444 <MX_USART3_UART_Init+0x90>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e4:	4b17      	ldr	r3, [pc, #92]	@ (8002444 <MX_USART3_UART_Init+0x90>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023ea:	4b16      	ldr	r3, [pc, #88]	@ (8002444 <MX_USART3_UART_Init+0x90>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023f0:	4b14      	ldr	r3, [pc, #80]	@ (8002444 <MX_USART3_UART_Init+0x90>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023f6:	4b13      	ldr	r3, [pc, #76]	@ (8002444 <MX_USART3_UART_Init+0x90>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023fc:	4811      	ldr	r0, [pc, #68]	@ (8002444 <MX_USART3_UART_Init+0x90>)
 80023fe:	f004 fa08 	bl	8006812 <HAL_UART_Init>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002408:	f7ff fab8 	bl	800197c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800240c:	2100      	movs	r1, #0
 800240e:	480d      	ldr	r0, [pc, #52]	@ (8002444 <MX_USART3_UART_Init+0x90>)
 8002410:	f005 fbbf 	bl	8007b92 <HAL_UARTEx_SetTxFifoThreshold>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800241a:	f7ff faaf 	bl	800197c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800241e:	2100      	movs	r1, #0
 8002420:	4808      	ldr	r0, [pc, #32]	@ (8002444 <MX_USART3_UART_Init+0x90>)
 8002422:	f005 fbf4 	bl	8007c0e <HAL_UARTEx_SetRxFifoThreshold>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800242c:	f7ff faa6 	bl	800197c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002430:	4804      	ldr	r0, [pc, #16]	@ (8002444 <MX_USART3_UART_Init+0x90>)
 8002432:	f005 fb75 	bl	8007b20 <HAL_UARTEx_DisableFifoMode>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800243c:	f7ff fa9e 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20000530 	.word	0x20000530
 8002448:	40004800 	.word	0x40004800

0800244c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b09c      	sub	sp, #112	@ 0x70
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002454:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002464:	f107 0318 	add.w	r3, r7, #24
 8002468:	2244      	movs	r2, #68	@ 0x44
 800246a:	2100      	movs	r1, #0
 800246c:	4618      	mov	r0, r3
 800246e:	f006 fb61 	bl	8008b34 <memset>
  if(uartHandle->Instance==UART4)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a41      	ldr	r2, [pc, #260]	@ (800257c <HAL_UART_MspInit+0x130>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d137      	bne.n	80024ec <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800247c:	2308      	movs	r3, #8
 800247e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002480:	2300      	movs	r3, #0
 8002482:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002484:	f107 0318 	add.w	r3, r7, #24
 8002488:	4618      	mov	r0, r3
 800248a:	f002 fbad 	bl	8004be8 <HAL_RCCEx_PeriphCLKConfig>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002494:	f7ff fa72 	bl	800197c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002498:	4b39      	ldr	r3, [pc, #228]	@ (8002580 <HAL_UART_MspInit+0x134>)
 800249a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249c:	4a38      	ldr	r2, [pc, #224]	@ (8002580 <HAL_UART_MspInit+0x134>)
 800249e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80024a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80024a4:	4b36      	ldr	r3, [pc, #216]	@ (8002580 <HAL_UART_MspInit+0x134>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024b0:	4b33      	ldr	r3, [pc, #204]	@ (8002580 <HAL_UART_MspInit+0x134>)
 80024b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b4:	4a32      	ldr	r2, [pc, #200]	@ (8002580 <HAL_UART_MspInit+0x134>)
 80024b6:	f043 0304 	orr.w	r3, r3, #4
 80024ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024bc:	4b30      	ldr	r3, [pc, #192]	@ (8002580 <HAL_UART_MspInit+0x134>)
 80024be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_SWD_Pin|RX_SWD_Pin;
 80024c8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80024cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ce:	2302      	movs	r3, #2
 80024d0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d6:	2300      	movs	r3, #0
 80024d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80024da:	2305      	movs	r3, #5
 80024dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80024e2:	4619      	mov	r1, r3
 80024e4:	4827      	ldr	r0, [pc, #156]	@ (8002584 <HAL_UART_MspInit+0x138>)
 80024e6:	f001 fa89 	bl	80039fc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80024ea:	e043      	b.n	8002574 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a25      	ldr	r2, [pc, #148]	@ (8002588 <HAL_UART_MspInit+0x13c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d13e      	bne.n	8002574 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024f6:	2304      	movs	r3, #4
 80024f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024fa:	2300      	movs	r3, #0
 80024fc:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024fe:	f107 0318 	add.w	r3, r7, #24
 8002502:	4618      	mov	r0, r3
 8002504:	f002 fb70 	bl	8004be8 <HAL_RCCEx_PeriphCLKConfig>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800250e:	f7ff fa35 	bl	800197c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002512:	4b1b      	ldr	r3, [pc, #108]	@ (8002580 <HAL_UART_MspInit+0x134>)
 8002514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002516:	4a1a      	ldr	r2, [pc, #104]	@ (8002580 <HAL_UART_MspInit+0x134>)
 8002518:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800251c:	6593      	str	r3, [r2, #88]	@ 0x58
 800251e:	4b18      	ldr	r3, [pc, #96]	@ (8002580 <HAL_UART_MspInit+0x134>)
 8002520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002522:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800252a:	4b15      	ldr	r3, [pc, #84]	@ (8002580 <HAL_UART_MspInit+0x134>)
 800252c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800252e:	4a14      	ldr	r2, [pc, #80]	@ (8002580 <HAL_UART_MspInit+0x134>)
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002536:	4b12      	ldr	r3, [pc, #72]	@ (8002580 <HAL_UART_MspInit+0x134>)
 8002538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LIDAR_RX_Pin|LIDAR_TX_Pin;
 8002542:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002546:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002550:	2300      	movs	r3, #0
 8002552:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002554:	2307      	movs	r3, #7
 8002556:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002558:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800255c:	4619      	mov	r1, r3
 800255e:	480b      	ldr	r0, [pc, #44]	@ (800258c <HAL_UART_MspInit+0x140>)
 8002560:	f001 fa4c 	bl	80039fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002564:	2200      	movs	r2, #0
 8002566:	2100      	movs	r1, #0
 8002568:	2027      	movs	r0, #39	@ 0x27
 800256a:	f001 f95f 	bl	800382c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800256e:	2027      	movs	r0, #39	@ 0x27
 8002570:	f001 f976 	bl	8003860 <HAL_NVIC_EnableIRQ>
}
 8002574:	bf00      	nop
 8002576:	3770      	adds	r7, #112	@ 0x70
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40004c00 	.word	0x40004c00
 8002580:	40021000 	.word	0x40021000
 8002584:	48000800 	.word	0x48000800
 8002588:	40004800 	.word	0x40004800
 800258c:	48000400 	.word	0x48000400

08002590 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002590:	480d      	ldr	r0, [pc, #52]	@ (80025c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002592:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002594:	f7ff fb92 	bl	8001cbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002598:	480c      	ldr	r0, [pc, #48]	@ (80025cc <LoopForever+0x6>)
  ldr r1, =_edata
 800259a:	490d      	ldr	r1, [pc, #52]	@ (80025d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800259c:	4a0d      	ldr	r2, [pc, #52]	@ (80025d4 <LoopForever+0xe>)
  movs r3, #0
 800259e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80025a0:	e002      	b.n	80025a8 <LoopCopyDataInit>

080025a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025a6:	3304      	adds	r3, #4

080025a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025ac:	d3f9      	bcc.n	80025a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ae:	4a0a      	ldr	r2, [pc, #40]	@ (80025d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025b0:	4c0a      	ldr	r4, [pc, #40]	@ (80025dc <LoopForever+0x16>)
  movs r3, #0
 80025b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b4:	e001      	b.n	80025ba <LoopFillZerobss>

080025b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b8:	3204      	adds	r2, #4

080025ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025bc:	d3fb      	bcc.n	80025b6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80025be:	f006 fb21 	bl	8008c04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025c2:	f7ff f91d 	bl	8001800 <main>

080025c6 <LoopForever>:

LoopForever:
    b LoopForever
 80025c6:	e7fe      	b.n	80025c6 <LoopForever>
  ldr   r0, =_estack
 80025c8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80025cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80025d4:	0800ab18 	.word	0x0800ab18
  ldr r2, =_sbss
 80025d8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80025dc:	20000714 	.word	0x20000714

080025e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025e0:	e7fe      	b.n	80025e0 <ADC1_2_IRQHandler>

080025e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ec:	2003      	movs	r0, #3
 80025ee:	f001 f912 	bl	8003816 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025f2:	200f      	movs	r0, #15
 80025f4:	f7ff f9ec 	bl	80019d0 <HAL_InitTick>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	71fb      	strb	r3, [r7, #7]
 8002602:	e001      	b.n	8002608 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002604:	f7ff f9c0 	bl	8001988 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002608:	79fb      	ldrb	r3, [r7, #7]

}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002618:	4b05      	ldr	r3, [pc, #20]	@ (8002630 <HAL_IncTick+0x1c>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4b05      	ldr	r3, [pc, #20]	@ (8002634 <HAL_IncTick+0x20>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4413      	add	r3, r2
 8002622:	4a03      	ldr	r2, [pc, #12]	@ (8002630 <HAL_IncTick+0x1c>)
 8002624:	6013      	str	r3, [r2, #0]
}
 8002626:	bf00      	nop
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	200005c4 	.word	0x200005c4
 8002634:	20000008 	.word	0x20000008

08002638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return uwTick;
 800263c:	4b03      	ldr	r3, [pc, #12]	@ (800264c <HAL_GetTick+0x14>)
 800263e:	681b      	ldr	r3, [r3, #0]
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	200005c4 	.word	0x200005c4

08002650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002658:	f7ff ffee 	bl	8002638 <HAL_GetTick>
 800265c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002668:	d004      	beq.n	8002674 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800266a:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <HAL_Delay+0x40>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4413      	add	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002674:	bf00      	nop
 8002676:	f7ff ffdf 	bl	8002638 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	429a      	cmp	r2, r3
 8002684:	d8f7      	bhi.n	8002676 <HAL_Delay+0x26>
  {
  }
}
 8002686:	bf00      	nop
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000008 	.word	0x20000008

08002694 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	609a      	str	r2, [r3, #8]
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	609a      	str	r2, [r3, #8]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	3360      	adds	r3, #96	@ 0x60
 800270e:	461a      	mov	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b08      	ldr	r3, [pc, #32]	@ (8002740 <LL_ADC_SetOffset+0x44>)
 800271e:	4013      	ands	r3, r2
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	4313      	orrs	r3, r2
 800272c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002734:	bf00      	nop
 8002736:	371c      	adds	r7, #28
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	03fff000 	.word	0x03fff000

08002744 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3360      	adds	r3, #96	@ 0x60
 8002752:	461a      	mov	r2, r3
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002770:	b480      	push	{r7}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	3360      	adds	r3, #96	@ 0x60
 8002780:	461a      	mov	r2, r3
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	431a      	orrs	r2, r3
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800279a:	bf00      	nop
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b087      	sub	sp, #28
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	3360      	adds	r3, #96	@ 0x60
 80027b6:	461a      	mov	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80027d0:	bf00      	nop
 80027d2:	371c      	adds	r7, #28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	3360      	adds	r3, #96	@ 0x60
 80027ec:	461a      	mov	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	431a      	orrs	r2, r3
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002806:	bf00      	nop
 8002808:	371c      	adds	r7, #28
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	615a      	str	r2, [r3, #20]
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3330      	adds	r3, #48	@ 0x30
 8002848:	461a      	mov	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	4413      	add	r3, r2
 8002856:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	211f      	movs	r1, #31
 8002864:	fa01 f303 	lsl.w	r3, r1, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	401a      	ands	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	0e9b      	lsrs	r3, r3, #26
 8002870:	f003 011f 	and.w	r1, r3, #31
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f003 031f 	and.w	r3, r3, #31
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	431a      	orrs	r2, r3
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002884:	bf00      	nop
 8002886:	371c      	adds	r7, #28
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3314      	adds	r3, #20
 80028a0:	461a      	mov	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	0e5b      	lsrs	r3, r3, #25
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	4413      	add	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	0d1b      	lsrs	r3, r3, #20
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	2107      	movs	r1, #7
 80028be:	fa01 f303 	lsl.w	r3, r1, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	401a      	ands	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	0d1b      	lsrs	r3, r3, #20
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	fa01 f303 	lsl.w	r3, r1, r3
 80028d4:	431a      	orrs	r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028da:	bf00      	nop
 80028dc:	371c      	adds	r7, #28
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002900:	43db      	mvns	r3, r3
 8002902:	401a      	ands	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f003 0318 	and.w	r3, r3, #24
 800290a:	4908      	ldr	r1, [pc, #32]	@ (800292c <LL_ADC_SetChannelSingleDiff+0x44>)
 800290c:	40d9      	lsrs	r1, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	400b      	ands	r3, r1
 8002912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002916:	431a      	orrs	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	0007ffff 	.word	0x0007ffff

08002930 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002940:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6093      	str	r3, [r2, #8]
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002968:	d101      	bne.n	800296e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800298c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002990:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029b8:	d101      	bne.n	80029be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <LL_ADC_IsEnabled+0x18>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <LL_ADC_IsEnabled+0x1a>
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d101      	bne.n	8002a0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d101      	bne.n	8002a30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a40:	b590      	push	{r4, r7, lr}
 8002a42:	b089      	sub	sp, #36	@ 0x24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e167      	b.n	8002d2a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d109      	bne.n	8002a7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7fe fd2b 	bl	80014c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff ff67 	bl	8002954 <LL_ADC_IsDeepPowerDownEnabled>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d004      	beq.n	8002a96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff4d 	bl	8002930 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff ff82 	bl	80029a4 <LL_ADC_IsInternalRegulatorEnabled>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d115      	bne.n	8002ad2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff ff66 	bl	800297c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ab0:	4ba0      	ldr	r3, [pc, #640]	@ (8002d34 <HAL_ADC_Init+0x2f4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	099b      	lsrs	r3, r3, #6
 8002ab6:	4aa0      	ldr	r2, [pc, #640]	@ (8002d38 <HAL_ADC_Init+0x2f8>)
 8002ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8002abc:	099b      	lsrs	r3, r3, #6
 8002abe:	3301      	adds	r3, #1
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ac4:	e002      	b.n	8002acc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f9      	bne.n	8002ac6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ff64 	bl	80029a4 <LL_ADC_IsInternalRegulatorEnabled>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10d      	bne.n	8002afe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae6:	f043 0210 	orr.w	r2, r3, #16
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002af2:	f043 0201 	orr.w	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff ff75 	bl	80029f2 <LL_ADC_REG_IsConversionOngoing>
 8002b08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f040 8100 	bne.w	8002d18 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f040 80fc 	bne.w	8002d18 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b24:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002b28:	f043 0202 	orr.w	r2, r3, #2
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ff49 	bl	80029cc <LL_ADC_IsEnabled>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d111      	bne.n	8002b64 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b40:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002b44:	f7ff ff42 	bl	80029cc <LL_ADC_IsEnabled>
 8002b48:	4604      	mov	r4, r0
 8002b4a:	487c      	ldr	r0, [pc, #496]	@ (8002d3c <HAL_ADC_Init+0x2fc>)
 8002b4c:	f7ff ff3e 	bl	80029cc <LL_ADC_IsEnabled>
 8002b50:	4603      	mov	r3, r0
 8002b52:	4323      	orrs	r3, r4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d105      	bne.n	8002b64 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4878      	ldr	r0, [pc, #480]	@ (8002d40 <HAL_ADC_Init+0x300>)
 8002b60:	f7ff fd98 	bl	8002694 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7f5b      	ldrb	r3, [r3, #29]
 8002b68:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b6e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002b74:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002b7a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b82:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d106      	bne.n	8002ba0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b96:	3b01      	subs	r3, #1
 8002b98:	045b      	lsls	r3, r3, #17
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d009      	beq.n	8002bbc <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bac:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	4b60      	ldr	r3, [pc, #384]	@ (8002d44 <HAL_ADC_Init+0x304>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	69b9      	ldr	r1, [r7, #24]
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff ff14 	bl	8002a18 <LL_ADC_INJ_IsConversionOngoing>
 8002bf0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d16d      	bne.n	8002cd4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d16a      	bne.n	8002cd4 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c02:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c0a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c1a:	f023 0302 	bic.w	r3, r3, #2
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	69b9      	ldr	r1, [r7, #24]
 8002c24:	430b      	orrs	r3, r1
 8002c26:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d017      	beq.n	8002c60 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002c3e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c48:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6911      	ldr	r1, [r2, #16]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002c5e:	e013      	b.n	8002c88 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002c6e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c84:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d118      	bne.n	8002cc4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002c9c:	f023 0304 	bic.w	r3, r3, #4
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ca8:	4311      	orrs	r1, r2
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002cae:	4311      	orrs	r1, r2
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0201 	orr.w	r2, r2, #1
 8002cc0:	611a      	str	r2, [r3, #16]
 8002cc2:	e007      	b.n	8002cd4 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d10c      	bne.n	8002cf6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	f023 010f 	bic.w	r1, r3, #15
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	1e5a      	subs	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cf4:	e007      	b.n	8002d06 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 020f 	bic.w	r2, r2, #15
 8002d04:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0a:	f023 0303 	bic.w	r3, r3, #3
 8002d0e:	f043 0201 	orr.w	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d16:	e007      	b.n	8002d28 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1c:	f043 0210 	orr.w	r2, r3, #16
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d28:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3724      	adds	r7, #36	@ 0x24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd90      	pop	{r4, r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000000 	.word	0x20000000
 8002d38:	053e2d63 	.word	0x053e2d63
 8002d3c:	50000100 	.word	0x50000100
 8002d40:	50000300 	.word	0x50000300
 8002d44:	fff04007 	.word	0xfff04007

08002d48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b0b6      	sub	sp, #216	@ 0xd8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x22>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e3c8      	b.n	80034fc <HAL_ADC_ConfigChannel+0x7b4>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fe3b 	bl	80029f2 <LL_ADC_REG_IsConversionOngoing>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f040 83ad 	bne.w	80034de <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	6859      	ldr	r1, [r3, #4]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	461a      	mov	r2, r3
 8002d92:	f7ff fd51 	bl	8002838 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fe29 	bl	80029f2 <LL_ADC_REG_IsConversionOngoing>
 8002da0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff fe35 	bl	8002a18 <LL_ADC_INJ_IsConversionOngoing>
 8002dae:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002db2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f040 81d9 	bne.w	800316e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f040 81d4 	bne.w	800316e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dce:	d10f      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f7ff fd58 	bl	8002890 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff fd12 	bl	8002812 <LL_ADC_SetSamplingTimeCommonConfig>
 8002dee:	e00e      	b.n	8002e0e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6818      	ldr	r0, [r3, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	6819      	ldr	r1, [r3, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f7ff fd47 	bl	8002890 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2100      	movs	r1, #0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fd02 	bl	8002812 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	08db      	lsrs	r3, r3, #3
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d022      	beq.n	8002e76 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	6919      	ldr	r1, [r3, #16]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e40:	f7ff fc5c 	bl	80026fc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	6919      	ldr	r1, [r3, #16]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	461a      	mov	r2, r3
 8002e52:	f7ff fca8 	bl	80027a6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d102      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x124>
 8002e66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e6a:	e000      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x126>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f7ff fcb4 	bl	80027dc <LL_ADC_SetOffsetSaturation>
 8002e74:	e17b      	b.n	800316e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff fc61 	bl	8002744 <LL_ADC_GetOffsetChannel>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x15a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fc56 	bl	8002744 <LL_ADC_GetOffsetChannel>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	0e9b      	lsrs	r3, r3, #26
 8002e9c:	f003 021f 	and.w	r2, r3, #31
 8002ea0:	e01e      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x198>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fc4b 	bl	8002744 <LL_ADC_GetOffsetChannel>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ec0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ec4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ec8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002ed0:	2320      	movs	r3, #32
 8002ed2:	e004      	b.n	8002ede <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002ed4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ed8:	fab3 f383 	clz	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d105      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x1b0>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	0e9b      	lsrs	r3, r3, #26
 8002ef2:	f003 031f 	and.w	r3, r3, #31
 8002ef6:	e018      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x1e2>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002f0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002f14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	e004      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002f20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f24:	fab3 f383 	clz	r3, r3
 8002f28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d106      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2200      	movs	r2, #0
 8002f34:	2100      	movs	r1, #0
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff fc1a 	bl	8002770 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2101      	movs	r1, #1
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff fbfe 	bl	8002744 <LL_ADC_GetOffsetChannel>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10a      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x220>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2101      	movs	r1, #1
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fbf3 	bl	8002744 <LL_ADC_GetOffsetChannel>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	0e9b      	lsrs	r3, r3, #26
 8002f62:	f003 021f 	and.w	r2, r3, #31
 8002f66:	e01e      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x25e>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff fbe8 	bl	8002744 <LL_ADC_GetOffsetChannel>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f7e:	fa93 f3a3 	rbit	r3, r3
 8002f82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002f86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002f8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002f96:	2320      	movs	r3, #32
 8002f98:	e004      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002f9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f9e:	fab3 f383 	clz	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d105      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x276>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	0e9b      	lsrs	r3, r3, #26
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	e018      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x2a8>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fca:	fa93 f3a3 	rbit	r3, r3
 8002fce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002fd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002fda:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002fe2:	2320      	movs	r3, #32
 8002fe4:	e004      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002fe6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d106      	bne.n	8003002 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fbb7 	bl	8002770 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2102      	movs	r1, #2
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff fb9b 	bl	8002744 <LL_ADC_GetOffsetChannel>
 800300e:	4603      	mov	r3, r0
 8003010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10a      	bne.n	800302e <HAL_ADC_ConfigChannel+0x2e6>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2102      	movs	r1, #2
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff fb90 	bl	8002744 <LL_ADC_GetOffsetChannel>
 8003024:	4603      	mov	r3, r0
 8003026:	0e9b      	lsrs	r3, r3, #26
 8003028:	f003 021f 	and.w	r2, r3, #31
 800302c:	e01e      	b.n	800306c <HAL_ADC_ConfigChannel+0x324>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2102      	movs	r1, #2
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fb85 	bl	8002744 <LL_ADC_GetOffsetChannel>
 800303a:	4603      	mov	r3, r0
 800303c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003044:	fa93 f3a3 	rbit	r3, r3
 8003048:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800304c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003050:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003054:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800305c:	2320      	movs	r3, #32
 800305e:	e004      	b.n	800306a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003060:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003064:	fab3 f383 	clz	r3, r3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003074:	2b00      	cmp	r3, #0
 8003076:	d105      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x33c>
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	0e9b      	lsrs	r3, r3, #26
 800307e:	f003 031f 	and.w	r3, r3, #31
 8003082:	e016      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x36a>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003090:	fa93 f3a3 	rbit	r3, r3
 8003094:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003096:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003098:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800309c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80030a4:	2320      	movs	r3, #32
 80030a6:	e004      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80030a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030ac:	fab3 f383 	clz	r3, r3
 80030b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d106      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2200      	movs	r2, #0
 80030bc:	2102      	movs	r1, #2
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fb56 	bl	8002770 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2103      	movs	r1, #3
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fb3a 	bl	8002744 <LL_ADC_GetOffsetChannel>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10a      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x3a8>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2103      	movs	r1, #3
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff fb2f 	bl	8002744 <LL_ADC_GetOffsetChannel>
 80030e6:	4603      	mov	r3, r0
 80030e8:	0e9b      	lsrs	r3, r3, #26
 80030ea:	f003 021f 	and.w	r2, r3, #31
 80030ee:	e017      	b.n	8003120 <HAL_ADC_ConfigChannel+0x3d8>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2103      	movs	r1, #3
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff fb24 	bl	8002744 <LL_ADC_GetOffsetChannel>
 80030fc:	4603      	mov	r3, r0
 80030fe:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003100:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003102:	fa93 f3a3 	rbit	r3, r3
 8003106:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003108:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800310a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800310c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003112:	2320      	movs	r3, #32
 8003114:	e003      	b.n	800311e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003116:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003118:	fab3 f383 	clz	r3, r3
 800311c:	b2db      	uxtb	r3, r3
 800311e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003128:	2b00      	cmp	r3, #0
 800312a:	d105      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x3f0>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	0e9b      	lsrs	r3, r3, #26
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	e011      	b.n	800315c <HAL_ADC_ConfigChannel+0x414>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003146:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003148:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800314a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003150:	2320      	movs	r3, #32
 8003152:	e003      	b.n	800315c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003154:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800315c:	429a      	cmp	r2, r3
 800315e:	d106      	bne.n	800316e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2200      	movs	r2, #0
 8003166:	2103      	movs	r1, #3
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fb01 	bl	8002770 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fc2a 	bl	80029cc <LL_ADC_IsEnabled>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	f040 8140 	bne.w	8003400 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	6819      	ldr	r1, [r3, #0]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	461a      	mov	r2, r3
 800318e:	f7ff fbab 	bl	80028e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	4a8f      	ldr	r2, [pc, #572]	@ (80033d4 <HAL_ADC_ConfigChannel+0x68c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	f040 8131 	bne.w	8003400 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10b      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x47e>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	0e9b      	lsrs	r3, r3, #26
 80031b4:	3301      	adds	r3, #1
 80031b6:	f003 031f 	and.w	r3, r3, #31
 80031ba:	2b09      	cmp	r3, #9
 80031bc:	bf94      	ite	ls
 80031be:	2301      	movls	r3, #1
 80031c0:	2300      	movhi	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	e019      	b.n	80031fa <HAL_ADC_ConfigChannel+0x4b2>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80031d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031d6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80031d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80031de:	2320      	movs	r3, #32
 80031e0:	e003      	b.n	80031ea <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80031e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031e4:	fab3 f383 	clz	r3, r3
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	3301      	adds	r3, #1
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	2b09      	cmp	r3, #9
 80031f2:	bf94      	ite	ls
 80031f4:	2301      	movls	r3, #1
 80031f6:	2300      	movhi	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d079      	beq.n	80032f2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003206:	2b00      	cmp	r3, #0
 8003208:	d107      	bne.n	800321a <HAL_ADC_ConfigChannel+0x4d2>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	0e9b      	lsrs	r3, r3, #26
 8003210:	3301      	adds	r3, #1
 8003212:	069b      	lsls	r3, r3, #26
 8003214:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003218:	e015      	b.n	8003246 <HAL_ADC_ConfigChannel+0x4fe>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003222:	fa93 f3a3 	rbit	r3, r3
 8003226:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003228:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800322a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800322c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003232:	2320      	movs	r3, #32
 8003234:	e003      	b.n	800323e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003238:	fab3 f383 	clz	r3, r3
 800323c:	b2db      	uxtb	r3, r3
 800323e:	3301      	adds	r3, #1
 8003240:	069b      	lsls	r3, r3, #26
 8003242:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x51e>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	0e9b      	lsrs	r3, r3, #26
 8003258:	3301      	adds	r3, #1
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	2101      	movs	r1, #1
 8003260:	fa01 f303 	lsl.w	r3, r1, r3
 8003264:	e017      	b.n	8003296 <HAL_ADC_ConfigChannel+0x54e>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800326e:	fa93 f3a3 	rbit	r3, r3
 8003272:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003274:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003276:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003278:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800327e:	2320      	movs	r3, #32
 8003280:	e003      	b.n	800328a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003282:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003284:	fab3 f383 	clz	r3, r3
 8003288:	b2db      	uxtb	r3, r3
 800328a:	3301      	adds	r3, #1
 800328c:	f003 031f 	and.w	r3, r3, #31
 8003290:	2101      	movs	r1, #1
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	ea42 0103 	orr.w	r1, r2, r3
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10a      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x574>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	0e9b      	lsrs	r3, r3, #26
 80032ac:	3301      	adds	r3, #1
 80032ae:	f003 021f 	and.w	r2, r3, #31
 80032b2:	4613      	mov	r3, r2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4413      	add	r3, r2
 80032b8:	051b      	lsls	r3, r3, #20
 80032ba:	e018      	b.n	80032ee <HAL_ADC_ConfigChannel+0x5a6>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c4:	fa93 f3a3 	rbit	r3, r3
 80032c8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80032ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80032ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80032d4:	2320      	movs	r3, #32
 80032d6:	e003      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80032d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032da:	fab3 f383 	clz	r3, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	3301      	adds	r3, #1
 80032e2:	f003 021f 	and.w	r2, r3, #31
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032ee:	430b      	orrs	r3, r1
 80032f0:	e081      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d107      	bne.n	800330e <HAL_ADC_ConfigChannel+0x5c6>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	0e9b      	lsrs	r3, r3, #26
 8003304:	3301      	adds	r3, #1
 8003306:	069b      	lsls	r3, r3, #26
 8003308:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800330c:	e015      	b.n	800333a <HAL_ADC_ConfigChannel+0x5f2>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003316:	fa93 f3a3 	rbit	r3, r3
 800331a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800331c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800331e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003326:	2320      	movs	r3, #32
 8003328:	e003      	b.n	8003332 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800332a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332c:	fab3 f383 	clz	r3, r3
 8003330:	b2db      	uxtb	r3, r3
 8003332:	3301      	adds	r3, #1
 8003334:	069b      	lsls	r3, r3, #26
 8003336:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003342:	2b00      	cmp	r3, #0
 8003344:	d109      	bne.n	800335a <HAL_ADC_ConfigChannel+0x612>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	0e9b      	lsrs	r3, r3, #26
 800334c:	3301      	adds	r3, #1
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	2101      	movs	r1, #1
 8003354:	fa01 f303 	lsl.w	r3, r1, r3
 8003358:	e017      	b.n	800338a <HAL_ADC_ConfigChannel+0x642>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	fa93 f3a3 	rbit	r3, r3
 8003366:	61fb      	str	r3, [r7, #28]
  return result;
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800336c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003372:	2320      	movs	r3, #32
 8003374:	e003      	b.n	800337e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003378:	fab3 f383 	clz	r3, r3
 800337c:	b2db      	uxtb	r3, r3
 800337e:	3301      	adds	r3, #1
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	2101      	movs	r1, #1
 8003386:	fa01 f303 	lsl.w	r3, r1, r3
 800338a:	ea42 0103 	orr.w	r1, r2, r3
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10d      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x66e>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	0e9b      	lsrs	r3, r3, #26
 80033a0:	3301      	adds	r3, #1
 80033a2:	f003 021f 	and.w	r2, r3, #31
 80033a6:	4613      	mov	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	4413      	add	r3, r2
 80033ac:	3b1e      	subs	r3, #30
 80033ae:	051b      	lsls	r3, r3, #20
 80033b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033b4:	e01e      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x6ac>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	fa93 f3a3 	rbit	r3, r3
 80033c2:	613b      	str	r3, [r7, #16]
  return result;
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d104      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80033ce:	2320      	movs	r3, #32
 80033d0:	e006      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x698>
 80033d2:	bf00      	nop
 80033d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	fab3 f383 	clz	r3, r3
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	3301      	adds	r3, #1
 80033e2:	f003 021f 	and.w	r2, r3, #31
 80033e6:	4613      	mov	r3, r2
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	4413      	add	r3, r2
 80033ec:	3b1e      	subs	r3, #30
 80033ee:	051b      	lsls	r3, r3, #20
 80033f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033f4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033fa:	4619      	mov	r1, r3
 80033fc:	f7ff fa48 	bl	8002890 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b3f      	ldr	r3, [pc, #252]	@ (8003504 <HAL_ADC_ConfigChannel+0x7bc>)
 8003406:	4013      	ands	r3, r2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d071      	beq.n	80034f0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800340c:	483e      	ldr	r0, [pc, #248]	@ (8003508 <HAL_ADC_ConfigChannel+0x7c0>)
 800340e:	f7ff f967 	bl	80026e0 <LL_ADC_GetCommonPathInternalCh>
 8003412:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a3c      	ldr	r2, [pc, #240]	@ (800350c <HAL_ADC_ConfigChannel+0x7c4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d004      	beq.n	800342a <HAL_ADC_ConfigChannel+0x6e2>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a3a      	ldr	r2, [pc, #232]	@ (8003510 <HAL_ADC_ConfigChannel+0x7c8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d127      	bne.n	800347a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800342a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800342e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d121      	bne.n	800347a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800343e:	d157      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003440:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003444:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003448:	4619      	mov	r1, r3
 800344a:	482f      	ldr	r0, [pc, #188]	@ (8003508 <HAL_ADC_ConfigChannel+0x7c0>)
 800344c:	f7ff f935 	bl	80026ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003450:	4b30      	ldr	r3, [pc, #192]	@ (8003514 <HAL_ADC_ConfigChannel+0x7cc>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	099b      	lsrs	r3, r3, #6
 8003456:	4a30      	ldr	r2, [pc, #192]	@ (8003518 <HAL_ADC_ConfigChannel+0x7d0>)
 8003458:	fba2 2303 	umull	r2, r3, r2, r3
 800345c:	099b      	lsrs	r3, r3, #6
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	4613      	mov	r3, r2
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800346a:	e002      	b.n	8003472 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3b01      	subs	r3, #1
 8003470:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1f9      	bne.n	800346c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003478:	e03a      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a27      	ldr	r2, [pc, #156]	@ (800351c <HAL_ADC_ConfigChannel+0x7d4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d113      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003484:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003488:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10d      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a22      	ldr	r2, [pc, #136]	@ (8003520 <HAL_ADC_ConfigChannel+0x7d8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d02a      	beq.n	80034f0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800349a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800349e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034a2:	4619      	mov	r1, r3
 80034a4:	4818      	ldr	r0, [pc, #96]	@ (8003508 <HAL_ADC_ConfigChannel+0x7c0>)
 80034a6:	f7ff f908 	bl	80026ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034aa:	e021      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003524 <HAL_ADC_ConfigChannel+0x7dc>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d11c      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d116      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a16      	ldr	r2, [pc, #88]	@ (8003520 <HAL_ADC_ConfigChannel+0x7d8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d011      	beq.n	80034f0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034d4:	4619      	mov	r1, r3
 80034d6:	480c      	ldr	r0, [pc, #48]	@ (8003508 <HAL_ADC_ConfigChannel+0x7c0>)
 80034d8:	f7ff f8ef 	bl	80026ba <LL_ADC_SetCommonPathInternalCh>
 80034dc:	e008      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e2:	f043 0220 	orr.w	r2, r3, #32
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80034f8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	37d8      	adds	r7, #216	@ 0xd8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	80080000 	.word	0x80080000
 8003508:	50000300 	.word	0x50000300
 800350c:	c3210000 	.word	0xc3210000
 8003510:	90c00010 	.word	0x90c00010
 8003514:	20000000 	.word	0x20000000
 8003518:	053e2d63 	.word	0x053e2d63
 800351c:	c7520000 	.word	0xc7520000
 8003520:	50000100 	.word	0x50000100
 8003524:	cb840000 	.word	0xcb840000

08003528 <LL_ADC_IsEnabled>:
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <LL_ADC_IsEnabled+0x18>
 800353c:	2301      	movs	r3, #1
 800353e:	e000      	b.n	8003542 <LL_ADC_IsEnabled+0x1a>
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <LL_ADC_REG_IsConversionOngoing>:
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	2b04      	cmp	r3, #4
 8003560:	d101      	bne.n	8003566 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003574:	b590      	push	{r4, r7, lr}
 8003576:	b0a1      	sub	sp, #132	@ 0x84
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800358e:	2302      	movs	r3, #2
 8003590:	e08b      	b.n	80036aa <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800359a:	2300      	movs	r3, #0
 800359c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800359e:	2300      	movs	r3, #0
 80035a0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035aa:	d102      	bne.n	80035b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035ac:	4b41      	ldr	r3, [pc, #260]	@ (80036b4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	e001      	b.n	80035b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10b      	bne.n	80035d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c0:	f043 0220 	orr.w	r2, r3, #32
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e06a      	b.n	80036aa <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff ffb9 	bl	800354e <LL_ADC_REG_IsConversionOngoing>
 80035dc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff ffb3 	bl	800354e <LL_ADC_REG_IsConversionOngoing>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d14c      	bne.n	8003688 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80035ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d149      	bne.n	8003688 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80035f4:	4b30      	ldr	r3, [pc, #192]	@ (80036b8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80035f6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d028      	beq.n	8003652 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003600:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	6859      	ldr	r1, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003612:	035b      	lsls	r3, r3, #13
 8003614:	430b      	orrs	r3, r1
 8003616:	431a      	orrs	r2, r3
 8003618:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800361a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800361c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003620:	f7ff ff82 	bl	8003528 <LL_ADC_IsEnabled>
 8003624:	4604      	mov	r4, r0
 8003626:	4823      	ldr	r0, [pc, #140]	@ (80036b4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003628:	f7ff ff7e 	bl	8003528 <LL_ADC_IsEnabled>
 800362c:	4603      	mov	r3, r0
 800362e:	4323      	orrs	r3, r4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d133      	bne.n	800369c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003634:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800363c:	f023 030f 	bic.w	r3, r3, #15
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	6811      	ldr	r1, [r2, #0]
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	6892      	ldr	r2, [r2, #8]
 8003648:	430a      	orrs	r2, r1
 800364a:	431a      	orrs	r2, r3
 800364c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800364e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003650:	e024      	b.n	800369c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003652:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800365a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800365c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800365e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003662:	f7ff ff61 	bl	8003528 <LL_ADC_IsEnabled>
 8003666:	4604      	mov	r4, r0
 8003668:	4812      	ldr	r0, [pc, #72]	@ (80036b4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800366a:	f7ff ff5d 	bl	8003528 <LL_ADC_IsEnabled>
 800366e:	4603      	mov	r3, r0
 8003670:	4323      	orrs	r3, r4
 8003672:	2b00      	cmp	r3, #0
 8003674:	d112      	bne.n	800369c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003676:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800367e:	f023 030f 	bic.w	r3, r3, #15
 8003682:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003684:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003686:	e009      	b.n	800369c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368c:	f043 0220 	orr.w	r2, r3, #32
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800369a:	e000      	b.n	800369e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800369c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80036a6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3784      	adds	r7, #132	@ 0x84
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd90      	pop	{r4, r7, pc}
 80036b2:	bf00      	nop
 80036b4:	50000100 	.word	0x50000100
 80036b8:	50000300 	.word	0x50000300

080036bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003700 <__NVIC_SetPriorityGrouping+0x44>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036d8:	4013      	ands	r3, r2
 80036da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ee:	4a04      	ldr	r2, [pc, #16]	@ (8003700 <__NVIC_SetPriorityGrouping+0x44>)
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	60d3      	str	r3, [r2, #12]
}
 80036f4:	bf00      	nop
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	e000ed00 	.word	0xe000ed00

08003704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003708:	4b04      	ldr	r3, [pc, #16]	@ (800371c <__NVIC_GetPriorityGrouping+0x18>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	0a1b      	lsrs	r3, r3, #8
 800370e:	f003 0307 	and.w	r3, r3, #7
}
 8003712:	4618      	mov	r0, r3
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	e000ed00 	.word	0xe000ed00

08003720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800372a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372e:	2b00      	cmp	r3, #0
 8003730:	db0b      	blt.n	800374a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	f003 021f 	and.w	r2, r3, #31
 8003738:	4907      	ldr	r1, [pc, #28]	@ (8003758 <__NVIC_EnableIRQ+0x38>)
 800373a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	2001      	movs	r0, #1
 8003742:	fa00 f202 	lsl.w	r2, r0, r2
 8003746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	e000e100 	.word	0xe000e100

0800375c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	6039      	str	r1, [r7, #0]
 8003766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376c:	2b00      	cmp	r3, #0
 800376e:	db0a      	blt.n	8003786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	b2da      	uxtb	r2, r3
 8003774:	490c      	ldr	r1, [pc, #48]	@ (80037a8 <__NVIC_SetPriority+0x4c>)
 8003776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377a:	0112      	lsls	r2, r2, #4
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	440b      	add	r3, r1
 8003780:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003784:	e00a      	b.n	800379c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	b2da      	uxtb	r2, r3
 800378a:	4908      	ldr	r1, [pc, #32]	@ (80037ac <__NVIC_SetPriority+0x50>)
 800378c:	79fb      	ldrb	r3, [r7, #7]
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	3b04      	subs	r3, #4
 8003794:	0112      	lsls	r2, r2, #4
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	440b      	add	r3, r1
 800379a:	761a      	strb	r2, [r3, #24]
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	e000e100 	.word	0xe000e100
 80037ac:	e000ed00 	.word	0xe000ed00

080037b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b089      	sub	sp, #36	@ 0x24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f1c3 0307 	rsb	r3, r3, #7
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	bf28      	it	cs
 80037ce:	2304      	movcs	r3, #4
 80037d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	3304      	adds	r3, #4
 80037d6:	2b06      	cmp	r3, #6
 80037d8:	d902      	bls.n	80037e0 <NVIC_EncodePriority+0x30>
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	3b03      	subs	r3, #3
 80037de:	e000      	b.n	80037e2 <NVIC_EncodePriority+0x32>
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e4:	f04f 32ff 	mov.w	r2, #4294967295
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43da      	mvns	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	401a      	ands	r2, r3
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037f8:	f04f 31ff 	mov.w	r1, #4294967295
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003802:	43d9      	mvns	r1, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003808:	4313      	orrs	r3, r2
         );
}
 800380a:	4618      	mov	r0, r3
 800380c:	3724      	adds	r7, #36	@ 0x24
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff ff4c 	bl	80036bc <__NVIC_SetPriorityGrouping>
}
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800383a:	f7ff ff63 	bl	8003704 <__NVIC_GetPriorityGrouping>
 800383e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	6978      	ldr	r0, [r7, #20]
 8003846:	f7ff ffb3 	bl	80037b0 <NVIC_EncodePriority>
 800384a:	4602      	mov	r2, r0
 800384c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003850:	4611      	mov	r1, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff ff82 	bl	800375c <__NVIC_SetPriority>
}
 8003858:	bf00      	nop
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800386a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff ff56 	bl	8003720 <__NVIC_EnableIRQ>
}
 8003874:	bf00      	nop
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d005      	beq.n	80038a0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2204      	movs	r2, #4
 8003898:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
 800389e:	e037      	b.n	8003910 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 020e 	bic.w	r2, r2, #14
 80038ae:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038be:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0201 	bic.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d4:	f003 021f 	and.w	r2, r3, #31
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038dc:	2101      	movs	r1, #1
 80038de:	fa01 f202 	lsl.w	r2, r1, r2
 80038e2:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038ec:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00c      	beq.n	8003910 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003900:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003904:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800390e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d00d      	beq.n	8003962 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2204      	movs	r2, #4
 800394a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	73fb      	strb	r3, [r7, #15]
 8003960:	e047      	b.n	80039f2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 020e 	bic.w	r2, r2, #14
 8003970:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0201 	bic.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800398c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003990:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	f003 021f 	and.w	r2, r3, #31
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399e:	2101      	movs	r1, #1
 80039a0:	fa01 f202 	lsl.w	r2, r1, r2
 80039a4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039ae:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00c      	beq.n	80039d2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80039d0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	4798      	blx	r3
    }
  }
  return status;
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a0a:	e15a      	b.n	8003cc2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	2101      	movs	r1, #1
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	fa01 f303 	lsl.w	r3, r1, r3
 8003a18:	4013      	ands	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 814c 	beq.w	8003cbc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 0303 	and.w	r3, r3, #3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d005      	beq.n	8003a3c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d130      	bne.n	8003a9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	2203      	movs	r2, #3
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4013      	ands	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a72:	2201      	movs	r2, #1
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	091b      	lsrs	r3, r3, #4
 8003a88:	f003 0201 	and.w	r2, r3, #1
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d017      	beq.n	8003ada <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d123      	bne.n	8003b2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	08da      	lsrs	r2, r3, #3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3208      	adds	r2, #8
 8003aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	220f      	movs	r2, #15
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	43db      	mvns	r3, r3
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4013      	ands	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	08da      	lsrs	r2, r3, #3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3208      	adds	r2, #8
 8003b28:	6939      	ldr	r1, [r7, #16]
 8003b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	2203      	movs	r2, #3
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4013      	ands	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f003 0203 	and.w	r2, r3, #3
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80a6 	beq.w	8003cbc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b70:	4b5b      	ldr	r3, [pc, #364]	@ (8003ce0 <HAL_GPIO_Init+0x2e4>)
 8003b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b74:	4a5a      	ldr	r2, [pc, #360]	@ (8003ce0 <HAL_GPIO_Init+0x2e4>)
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b7c:	4b58      	ldr	r3, [pc, #352]	@ (8003ce0 <HAL_GPIO_Init+0x2e4>)
 8003b7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b88:	4a56      	ldr	r2, [pc, #344]	@ (8003ce4 <HAL_GPIO_Init+0x2e8>)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	089b      	lsrs	r3, r3, #2
 8003b8e:	3302      	adds	r3, #2
 8003b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	220f      	movs	r2, #15
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003bb2:	d01f      	beq.n	8003bf4 <HAL_GPIO_Init+0x1f8>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a4c      	ldr	r2, [pc, #304]	@ (8003ce8 <HAL_GPIO_Init+0x2ec>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d019      	beq.n	8003bf0 <HAL_GPIO_Init+0x1f4>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a4b      	ldr	r2, [pc, #300]	@ (8003cec <HAL_GPIO_Init+0x2f0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d013      	beq.n	8003bec <HAL_GPIO_Init+0x1f0>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a4a      	ldr	r2, [pc, #296]	@ (8003cf0 <HAL_GPIO_Init+0x2f4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00d      	beq.n	8003be8 <HAL_GPIO_Init+0x1ec>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a49      	ldr	r2, [pc, #292]	@ (8003cf4 <HAL_GPIO_Init+0x2f8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d007      	beq.n	8003be4 <HAL_GPIO_Init+0x1e8>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a48      	ldr	r2, [pc, #288]	@ (8003cf8 <HAL_GPIO_Init+0x2fc>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d101      	bne.n	8003be0 <HAL_GPIO_Init+0x1e4>
 8003bdc:	2305      	movs	r3, #5
 8003bde:	e00a      	b.n	8003bf6 <HAL_GPIO_Init+0x1fa>
 8003be0:	2306      	movs	r3, #6
 8003be2:	e008      	b.n	8003bf6 <HAL_GPIO_Init+0x1fa>
 8003be4:	2304      	movs	r3, #4
 8003be6:	e006      	b.n	8003bf6 <HAL_GPIO_Init+0x1fa>
 8003be8:	2303      	movs	r3, #3
 8003bea:	e004      	b.n	8003bf6 <HAL_GPIO_Init+0x1fa>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e002      	b.n	8003bf6 <HAL_GPIO_Init+0x1fa>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <HAL_GPIO_Init+0x1fa>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	f002 0203 	and.w	r2, r2, #3
 8003bfc:	0092      	lsls	r2, r2, #2
 8003bfe:	4093      	lsls	r3, r2
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c06:	4937      	ldr	r1, [pc, #220]	@ (8003ce4 <HAL_GPIO_Init+0x2e8>)
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	089b      	lsrs	r3, r3, #2
 8003c0c:	3302      	adds	r3, #2
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c14:	4b39      	ldr	r3, [pc, #228]	@ (8003cfc <HAL_GPIO_Init+0x300>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4013      	ands	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c38:	4a30      	ldr	r2, [pc, #192]	@ (8003cfc <HAL_GPIO_Init+0x300>)
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8003cfc <HAL_GPIO_Init+0x300>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	43db      	mvns	r3, r3
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c62:	4a26      	ldr	r2, [pc, #152]	@ (8003cfc <HAL_GPIO_Init+0x300>)
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003c68:	4b24      	ldr	r3, [pc, #144]	@ (8003cfc <HAL_GPIO_Init+0x300>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	43db      	mvns	r3, r3
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4013      	ands	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8003cfc <HAL_GPIO_Init+0x300>)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c92:	4b1a      	ldr	r3, [pc, #104]	@ (8003cfc <HAL_GPIO_Init+0x300>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cb6:	4a11      	ldr	r2, [pc, #68]	@ (8003cfc <HAL_GPIO_Init+0x300>)
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f47f ae9d 	bne.w	8003a0c <HAL_GPIO_Init+0x10>
  }
}
 8003cd2:	bf00      	nop
 8003cd4:	bf00      	nop
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	40010000 	.word	0x40010000
 8003ce8:	48000400 	.word	0x48000400
 8003cec:	48000800 	.word	0x48000800
 8003cf0:	48000c00 	.word	0x48000c00
 8003cf4:	48001000 	.word	0x48001000
 8003cf8:	48001400 	.word	0x48001400
 8003cfc:	40010400 	.word	0x40010400

08003d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	807b      	strh	r3, [r7, #2]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d10:	787b      	ldrb	r3, [r7, #1]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d16:	887a      	ldrh	r2, [r7, #2]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d1c:	e002      	b.n	8003d24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d1e:	887a      	ldrh	r2, [r7, #2]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d42:	887a      	ldrh	r2, [r7, #2]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4013      	ands	r3, r2
 8003d48:	041a      	lsls	r2, r3, #16
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	43d9      	mvns	r1, r3
 8003d4e:	887b      	ldrh	r3, [r7, #2]
 8003d50:	400b      	ands	r3, r1
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	619a      	str	r2, [r3, #24]
}
 8003d58:	bf00      	nop
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e08d      	b.n	8003e92 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fd fccc 	bl	8001728 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2224      	movs	r2, #36	@ 0x24
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0201 	bic.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003db4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003dc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d107      	bne.n	8003dde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003dda:	609a      	str	r2, [r3, #8]
 8003ddc:	e006      	b.n	8003dec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003dea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d108      	bne.n	8003e06 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e02:	605a      	str	r2, [r3, #4]
 8003e04:	e007      	b.n	8003e16 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	69d9      	ldr	r1, [r3, #28]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1a      	ldr	r2, [r3, #32]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d138      	bne.n	8003f22 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e032      	b.n	8003f24 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2224      	movs	r2, #36	@ 0x24
 8003eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0201 	bic.w	r2, r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003eec:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6819      	ldr	r1, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 0201 	orr.w	r2, r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e000      	b.n	8003f24 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f22:	2302      	movs	r3, #2
  }
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	d139      	bne.n	8003fba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e033      	b.n	8003fbc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2224      	movs	r2, #36	@ 0x24
 8003f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0201 	bic.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f82:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	021b      	lsls	r3, r3, #8
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0201 	orr.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	e000      	b.n	8003fbc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fba:	2302      	movs	r3, #2
  }
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d141      	bne.n	800405a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fd6:	4b4b      	ldr	r3, [pc, #300]	@ (8004104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fe2:	d131      	bne.n	8004048 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fe4:	4b47      	ldr	r3, [pc, #284]	@ (8004104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fea:	4a46      	ldr	r2, [pc, #280]	@ (8004104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ff0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ff4:	4b43      	ldr	r3, [pc, #268]	@ (8004104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ffc:	4a41      	ldr	r2, [pc, #260]	@ (8004104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ffe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004002:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004004:	4b40      	ldr	r3, [pc, #256]	@ (8004108 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2232      	movs	r2, #50	@ 0x32
 800400a:	fb02 f303 	mul.w	r3, r2, r3
 800400e:	4a3f      	ldr	r2, [pc, #252]	@ (800410c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004010:	fba2 2303 	umull	r2, r3, r2, r3
 8004014:	0c9b      	lsrs	r3, r3, #18
 8004016:	3301      	adds	r3, #1
 8004018:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800401a:	e002      	b.n	8004022 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3b01      	subs	r3, #1
 8004020:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004022:	4b38      	ldr	r3, [pc, #224]	@ (8004104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800402a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800402e:	d102      	bne.n	8004036 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f2      	bne.n	800401c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004036:	4b33      	ldr	r3, [pc, #204]	@ (8004104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800403e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004042:	d158      	bne.n	80040f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e057      	b.n	80040f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004048:	4b2e      	ldr	r3, [pc, #184]	@ (8004104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800404a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800404e:	4a2d      	ldr	r2, [pc, #180]	@ (8004104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004050:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004054:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004058:	e04d      	b.n	80040f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004060:	d141      	bne.n	80040e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004062:	4b28      	ldr	r3, [pc, #160]	@ (8004104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800406a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800406e:	d131      	bne.n	80040d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004070:	4b24      	ldr	r3, [pc, #144]	@ (8004104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004076:	4a23      	ldr	r2, [pc, #140]	@ (8004104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800407c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004080:	4b20      	ldr	r3, [pc, #128]	@ (8004104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004088:	4a1e      	ldr	r2, [pc, #120]	@ (8004104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800408a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800408e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004090:	4b1d      	ldr	r3, [pc, #116]	@ (8004108 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2232      	movs	r2, #50	@ 0x32
 8004096:	fb02 f303 	mul.w	r3, r2, r3
 800409a:	4a1c      	ldr	r2, [pc, #112]	@ (800410c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800409c:	fba2 2303 	umull	r2, r3, r2, r3
 80040a0:	0c9b      	lsrs	r3, r3, #18
 80040a2:	3301      	adds	r3, #1
 80040a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040a6:	e002      	b.n	80040ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040ae:	4b15      	ldr	r3, [pc, #84]	@ (8004104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ba:	d102      	bne.n	80040c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f2      	bne.n	80040a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040c2:	4b10      	ldr	r3, [pc, #64]	@ (8004104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ce:	d112      	bne.n	80040f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e011      	b.n	80040f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040da:	4a0a      	ldr	r2, [pc, #40]	@ (8004104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80040e4:	e007      	b.n	80040f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040e6:	4b07      	ldr	r3, [pc, #28]	@ (8004104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040ee:	4a05      	ldr	r2, [pc, #20]	@ (8004104 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	40007000 	.word	0x40007000
 8004108:	20000000 	.word	0x20000000
 800410c:	431bde83 	.word	0x431bde83

08004110 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004114:	4b05      	ldr	r3, [pc, #20]	@ (800412c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	4a04      	ldr	r2, [pc, #16]	@ (800412c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800411a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800411e:	6093      	str	r3, [r2, #8]
}
 8004120:	bf00      	nop
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40007000 	.word	0x40007000

08004130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e2fe      	b.n	8004740 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d075      	beq.n	800423a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800414e:	4b97      	ldr	r3, [pc, #604]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004158:	4b94      	ldr	r3, [pc, #592]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b0c      	cmp	r3, #12
 8004166:	d102      	bne.n	800416e <HAL_RCC_OscConfig+0x3e>
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2b03      	cmp	r3, #3
 800416c:	d002      	beq.n	8004174 <HAL_RCC_OscConfig+0x44>
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	2b08      	cmp	r3, #8
 8004172:	d10b      	bne.n	800418c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004174:	4b8d      	ldr	r3, [pc, #564]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d05b      	beq.n	8004238 <HAL_RCC_OscConfig+0x108>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d157      	bne.n	8004238 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e2d9      	b.n	8004740 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004194:	d106      	bne.n	80041a4 <HAL_RCC_OscConfig+0x74>
 8004196:	4b85      	ldr	r3, [pc, #532]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a84      	ldr	r2, [pc, #528]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 800419c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	e01d      	b.n	80041e0 <HAL_RCC_OscConfig+0xb0>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041ac:	d10c      	bne.n	80041c8 <HAL_RCC_OscConfig+0x98>
 80041ae:	4b7f      	ldr	r3, [pc, #508]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a7e      	ldr	r2, [pc, #504]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 80041b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	4b7c      	ldr	r3, [pc, #496]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a7b      	ldr	r2, [pc, #492]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 80041c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	e00b      	b.n	80041e0 <HAL_RCC_OscConfig+0xb0>
 80041c8:	4b78      	ldr	r3, [pc, #480]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a77      	ldr	r2, [pc, #476]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 80041ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	4b75      	ldr	r3, [pc, #468]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a74      	ldr	r2, [pc, #464]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 80041da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d013      	beq.n	8004210 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e8:	f7fe fa26 	bl	8002638 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041f0:	f7fe fa22 	bl	8002638 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b64      	cmp	r3, #100	@ 0x64
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e29e      	b.n	8004740 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004202:	4b6a      	ldr	r3, [pc, #424]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0f0      	beq.n	80041f0 <HAL_RCC_OscConfig+0xc0>
 800420e:	e014      	b.n	800423a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004210:	f7fe fa12 	bl	8002638 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004218:	f7fe fa0e 	bl	8002638 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b64      	cmp	r3, #100	@ 0x64
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e28a      	b.n	8004740 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800422a:	4b60      	ldr	r3, [pc, #384]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f0      	bne.n	8004218 <HAL_RCC_OscConfig+0xe8>
 8004236:	e000      	b.n	800423a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d075      	beq.n	8004332 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004246:	4b59      	ldr	r3, [pc, #356]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 030c 	and.w	r3, r3, #12
 800424e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004250:	4b56      	ldr	r3, [pc, #344]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	2b0c      	cmp	r3, #12
 800425e:	d102      	bne.n	8004266 <HAL_RCC_OscConfig+0x136>
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d002      	beq.n	800426c <HAL_RCC_OscConfig+0x13c>
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	2b04      	cmp	r3, #4
 800426a:	d11f      	bne.n	80042ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800426c:	4b4f      	ldr	r3, [pc, #316]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_RCC_OscConfig+0x154>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e25d      	b.n	8004740 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004284:	4b49      	ldr	r3, [pc, #292]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	061b      	lsls	r3, r3, #24
 8004292:	4946      	ldr	r1, [pc, #280]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 8004294:	4313      	orrs	r3, r2
 8004296:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004298:	4b45      	ldr	r3, [pc, #276]	@ (80043b0 <HAL_RCC_OscConfig+0x280>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f7fd fb97 	bl	80019d0 <HAL_InitTick>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d043      	beq.n	8004330 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e249      	b.n	8004740 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d023      	beq.n	80042fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042b4:	4b3d      	ldr	r3, [pc, #244]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a3c      	ldr	r2, [pc, #240]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 80042ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7fe f9ba 	bl	8002638 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042c8:	f7fe f9b6 	bl	8002638 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e232      	b.n	8004740 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042da:	4b34      	ldr	r3, [pc, #208]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e6:	4b31      	ldr	r3, [pc, #196]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	061b      	lsls	r3, r3, #24
 80042f4:	492d      	ldr	r1, [pc, #180]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	604b      	str	r3, [r1, #4]
 80042fa:	e01a      	b.n	8004332 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042fc:	4b2b      	ldr	r3, [pc, #172]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a2a      	ldr	r2, [pc, #168]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 8004302:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fe f996 	bl	8002638 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004310:	f7fe f992 	bl	8002638 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e20e      	b.n	8004740 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004322:	4b22      	ldr	r3, [pc, #136]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0x1e0>
 800432e:	e000      	b.n	8004332 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004330:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d041      	beq.n	80043c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d01c      	beq.n	8004380 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004346:	4b19      	ldr	r3, [pc, #100]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 8004348:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800434c:	4a17      	ldr	r2, [pc, #92]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004356:	f7fe f96f 	bl	8002638 <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800435e:	f7fe f96b 	bl	8002638 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e1e7      	b.n	8004740 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004370:	4b0e      	ldr	r3, [pc, #56]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 8004372:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0ef      	beq.n	800435e <HAL_RCC_OscConfig+0x22e>
 800437e:	e020      	b.n	80043c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004380:	4b0a      	ldr	r3, [pc, #40]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 8004382:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004386:	4a09      	ldr	r2, [pc, #36]	@ (80043ac <HAL_RCC_OscConfig+0x27c>)
 8004388:	f023 0301 	bic.w	r3, r3, #1
 800438c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004390:	f7fe f952 	bl	8002638 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004396:	e00d      	b.n	80043b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004398:	f7fe f94e 	bl	8002638 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d906      	bls.n	80043b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e1ca      	b.n	8004740 <HAL_RCC_OscConfig+0x610>
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000
 80043b0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043b4:	4b8c      	ldr	r3, [pc, #560]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 80043b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1ea      	bne.n	8004398 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 80a6 	beq.w	800451c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043d0:	2300      	movs	r3, #0
 80043d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043d4:	4b84      	ldr	r3, [pc, #528]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 80043d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_RCC_OscConfig+0x2b4>
 80043e0:	2301      	movs	r3, #1
 80043e2:	e000      	b.n	80043e6 <HAL_RCC_OscConfig+0x2b6>
 80043e4:	2300      	movs	r3, #0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00d      	beq.n	8004406 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ea:	4b7f      	ldr	r3, [pc, #508]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 80043ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ee:	4a7e      	ldr	r2, [pc, #504]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 80043f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80043f6:	4b7c      	ldr	r3, [pc, #496]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 80043f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004402:	2301      	movs	r3, #1
 8004404:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004406:	4b79      	ldr	r3, [pc, #484]	@ (80045ec <HAL_RCC_OscConfig+0x4bc>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800440e:	2b00      	cmp	r3, #0
 8004410:	d118      	bne.n	8004444 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004412:	4b76      	ldr	r3, [pc, #472]	@ (80045ec <HAL_RCC_OscConfig+0x4bc>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a75      	ldr	r2, [pc, #468]	@ (80045ec <HAL_RCC_OscConfig+0x4bc>)
 8004418:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800441c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800441e:	f7fe f90b 	bl	8002638 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004426:	f7fe f907 	bl	8002638 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e183      	b.n	8004740 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004438:	4b6c      	ldr	r3, [pc, #432]	@ (80045ec <HAL_RCC_OscConfig+0x4bc>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f0      	beq.n	8004426 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d108      	bne.n	800445e <HAL_RCC_OscConfig+0x32e>
 800444c:	4b66      	ldr	r3, [pc, #408]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 800444e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004452:	4a65      	ldr	r2, [pc, #404]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800445c:	e024      	b.n	80044a8 <HAL_RCC_OscConfig+0x378>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b05      	cmp	r3, #5
 8004464:	d110      	bne.n	8004488 <HAL_RCC_OscConfig+0x358>
 8004466:	4b60      	ldr	r3, [pc, #384]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 8004468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446c:	4a5e      	ldr	r2, [pc, #376]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 800446e:	f043 0304 	orr.w	r3, r3, #4
 8004472:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004476:	4b5c      	ldr	r3, [pc, #368]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 8004478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800447c:	4a5a      	ldr	r2, [pc, #360]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 800447e:	f043 0301 	orr.w	r3, r3, #1
 8004482:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004486:	e00f      	b.n	80044a8 <HAL_RCC_OscConfig+0x378>
 8004488:	4b57      	ldr	r3, [pc, #348]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800448e:	4a56      	ldr	r2, [pc, #344]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 8004490:	f023 0301 	bic.w	r3, r3, #1
 8004494:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004498:	4b53      	ldr	r3, [pc, #332]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800449e:	4a52      	ldr	r2, [pc, #328]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 80044a0:	f023 0304 	bic.w	r3, r3, #4
 80044a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d016      	beq.n	80044de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b0:	f7fe f8c2 	bl	8002638 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044b6:	e00a      	b.n	80044ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b8:	f7fe f8be 	bl	8002638 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e138      	b.n	8004740 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ce:	4b46      	ldr	r3, [pc, #280]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 80044d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0ed      	beq.n	80044b8 <HAL_RCC_OscConfig+0x388>
 80044dc:	e015      	b.n	800450a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044de:	f7fe f8ab 	bl	8002638 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044e4:	e00a      	b.n	80044fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e6:	f7fe f8a7 	bl	8002638 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e121      	b.n	8004740 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044fc:	4b3a      	ldr	r3, [pc, #232]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 80044fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1ed      	bne.n	80044e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800450a:	7ffb      	ldrb	r3, [r7, #31]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d105      	bne.n	800451c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004510:	4b35      	ldr	r3, [pc, #212]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 8004512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004514:	4a34      	ldr	r2, [pc, #208]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 8004516:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800451a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b00      	cmp	r3, #0
 8004526:	d03c      	beq.n	80045a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d01c      	beq.n	800456a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004530:	4b2d      	ldr	r3, [pc, #180]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 8004532:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004536:	4a2c      	ldr	r2, [pc, #176]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004540:	f7fe f87a 	bl	8002638 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004548:	f7fe f876 	bl	8002638 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e0f2      	b.n	8004740 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800455a:	4b23      	ldr	r3, [pc, #140]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 800455c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0ef      	beq.n	8004548 <HAL_RCC_OscConfig+0x418>
 8004568:	e01b      	b.n	80045a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800456a:	4b1f      	ldr	r3, [pc, #124]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 800456c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004570:	4a1d      	ldr	r2, [pc, #116]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 8004572:	f023 0301 	bic.w	r3, r3, #1
 8004576:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457a:	f7fe f85d 	bl	8002638 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004582:	f7fe f859 	bl	8002638 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e0d5      	b.n	8004740 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004594:	4b14      	ldr	r3, [pc, #80]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 8004596:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1ef      	bne.n	8004582 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 80c9 	beq.w	800473e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045ac:	4b0e      	ldr	r3, [pc, #56]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 030c 	and.w	r3, r3, #12
 80045b4:	2b0c      	cmp	r3, #12
 80045b6:	f000 8083 	beq.w	80046c0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d15e      	bne.n	8004680 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045c2:	4b09      	ldr	r3, [pc, #36]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a08      	ldr	r2, [pc, #32]	@ (80045e8 <HAL_RCC_OscConfig+0x4b8>)
 80045c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ce:	f7fe f833 	bl	8002638 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045d4:	e00c      	b.n	80045f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d6:	f7fe f82f 	bl	8002638 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d905      	bls.n	80045f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e0ab      	b.n	8004740 <HAL_RCC_OscConfig+0x610>
 80045e8:	40021000 	.word	0x40021000
 80045ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045f0:	4b55      	ldr	r3, [pc, #340]	@ (8004748 <HAL_RCC_OscConfig+0x618>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1ec      	bne.n	80045d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045fc:	4b52      	ldr	r3, [pc, #328]	@ (8004748 <HAL_RCC_OscConfig+0x618>)
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	4b52      	ldr	r3, [pc, #328]	@ (800474c <HAL_RCC_OscConfig+0x61c>)
 8004602:	4013      	ands	r3, r2
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6a11      	ldr	r1, [r2, #32]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800460c:	3a01      	subs	r2, #1
 800460e:	0112      	lsls	r2, r2, #4
 8004610:	4311      	orrs	r1, r2
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004616:	0212      	lsls	r2, r2, #8
 8004618:	4311      	orrs	r1, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800461e:	0852      	lsrs	r2, r2, #1
 8004620:	3a01      	subs	r2, #1
 8004622:	0552      	lsls	r2, r2, #21
 8004624:	4311      	orrs	r1, r2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800462a:	0852      	lsrs	r2, r2, #1
 800462c:	3a01      	subs	r2, #1
 800462e:	0652      	lsls	r2, r2, #25
 8004630:	4311      	orrs	r1, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004636:	06d2      	lsls	r2, r2, #27
 8004638:	430a      	orrs	r2, r1
 800463a:	4943      	ldr	r1, [pc, #268]	@ (8004748 <HAL_RCC_OscConfig+0x618>)
 800463c:	4313      	orrs	r3, r2
 800463e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004640:	4b41      	ldr	r3, [pc, #260]	@ (8004748 <HAL_RCC_OscConfig+0x618>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a40      	ldr	r2, [pc, #256]	@ (8004748 <HAL_RCC_OscConfig+0x618>)
 8004646:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800464a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800464c:	4b3e      	ldr	r3, [pc, #248]	@ (8004748 <HAL_RCC_OscConfig+0x618>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	4a3d      	ldr	r2, [pc, #244]	@ (8004748 <HAL_RCC_OscConfig+0x618>)
 8004652:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004656:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004658:	f7fd ffee 	bl	8002638 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004660:	f7fd ffea 	bl	8002638 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e066      	b.n	8004740 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004672:	4b35      	ldr	r3, [pc, #212]	@ (8004748 <HAL_RCC_OscConfig+0x618>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f0      	beq.n	8004660 <HAL_RCC_OscConfig+0x530>
 800467e:	e05e      	b.n	800473e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004680:	4b31      	ldr	r3, [pc, #196]	@ (8004748 <HAL_RCC_OscConfig+0x618>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a30      	ldr	r2, [pc, #192]	@ (8004748 <HAL_RCC_OscConfig+0x618>)
 8004686:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800468a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468c:	f7fd ffd4 	bl	8002638 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004694:	f7fd ffd0 	bl	8002638 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e04c      	b.n	8004740 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a6:	4b28      	ldr	r3, [pc, #160]	@ (8004748 <HAL_RCC_OscConfig+0x618>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80046b2:	4b25      	ldr	r3, [pc, #148]	@ (8004748 <HAL_RCC_OscConfig+0x618>)
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	4924      	ldr	r1, [pc, #144]	@ (8004748 <HAL_RCC_OscConfig+0x618>)
 80046b8:	4b25      	ldr	r3, [pc, #148]	@ (8004750 <HAL_RCC_OscConfig+0x620>)
 80046ba:	4013      	ands	r3, r2
 80046bc:	60cb      	str	r3, [r1, #12]
 80046be:	e03e      	b.n	800473e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e039      	b.n	8004740 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80046cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004748 <HAL_RCC_OscConfig+0x618>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f003 0203 	and.w	r2, r3, #3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d12c      	bne.n	800473a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	3b01      	subs	r3, #1
 80046ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d123      	bne.n	800473a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046fe:	429a      	cmp	r2, r3
 8004700:	d11b      	bne.n	800473a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800470e:	429a      	cmp	r2, r3
 8004710:	d113      	bne.n	800473a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471c:	085b      	lsrs	r3, r3, #1
 800471e:	3b01      	subs	r3, #1
 8004720:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004722:	429a      	cmp	r2, r3
 8004724:	d109      	bne.n	800473a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004730:	085b      	lsrs	r3, r3, #1
 8004732:	3b01      	subs	r3, #1
 8004734:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004736:	429a      	cmp	r2, r3
 8004738:	d001      	beq.n	800473e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e000      	b.n	8004740 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3720      	adds	r7, #32
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40021000 	.word	0x40021000
 800474c:	019f800c 	.word	0x019f800c
 8004750:	feeefffc 	.word	0xfeeefffc

08004754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e11e      	b.n	80049aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800476c:	4b91      	ldr	r3, [pc, #580]	@ (80049b4 <HAL_RCC_ClockConfig+0x260>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d910      	bls.n	800479c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800477a:	4b8e      	ldr	r3, [pc, #568]	@ (80049b4 <HAL_RCC_ClockConfig+0x260>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f023 020f 	bic.w	r2, r3, #15
 8004782:	498c      	ldr	r1, [pc, #560]	@ (80049b4 <HAL_RCC_ClockConfig+0x260>)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	4313      	orrs	r3, r2
 8004788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800478a:	4b8a      	ldr	r3, [pc, #552]	@ (80049b4 <HAL_RCC_ClockConfig+0x260>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e106      	b.n	80049aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d073      	beq.n	8004890 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d129      	bne.n	8004804 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047b0:	4b81      	ldr	r3, [pc, #516]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0f4      	b.n	80049aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80047c0:	f000 f9ce 	bl	8004b60 <RCC_GetSysClockFreqFromPLLSource>
 80047c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	4a7c      	ldr	r2, [pc, #496]	@ (80049bc <HAL_RCC_ClockConfig+0x268>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d93f      	bls.n	800484e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047ce:	4b7a      	ldr	r3, [pc, #488]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d009      	beq.n	80047ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d033      	beq.n	800484e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d12f      	bne.n	800484e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047ee:	4b72      	ldr	r3, [pc, #456]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047f6:	4a70      	ldr	r2, [pc, #448]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 80047f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047fe:	2380      	movs	r3, #128	@ 0x80
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	e024      	b.n	800484e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2b02      	cmp	r3, #2
 800480a:	d107      	bne.n	800481c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800480c:	4b6a      	ldr	r3, [pc, #424]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d109      	bne.n	800482c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e0c6      	b.n	80049aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800481c:	4b66      	ldr	r3, [pc, #408]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e0be      	b.n	80049aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800482c:	f000 f8ce 	bl	80049cc <HAL_RCC_GetSysClockFreq>
 8004830:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	4a61      	ldr	r2, [pc, #388]	@ (80049bc <HAL_RCC_ClockConfig+0x268>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d909      	bls.n	800484e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800483a:	4b5f      	ldr	r3, [pc, #380]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004842:	4a5d      	ldr	r2, [pc, #372]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 8004844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004848:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800484a:	2380      	movs	r3, #128	@ 0x80
 800484c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800484e:	4b5a      	ldr	r3, [pc, #360]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f023 0203 	bic.w	r2, r3, #3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	4957      	ldr	r1, [pc, #348]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 800485c:	4313      	orrs	r3, r2
 800485e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004860:	f7fd feea 	bl	8002638 <HAL_GetTick>
 8004864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004866:	e00a      	b.n	800487e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004868:	f7fd fee6 	bl	8002638 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004876:	4293      	cmp	r3, r2
 8004878:	d901      	bls.n	800487e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e095      	b.n	80049aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487e:	4b4e      	ldr	r3, [pc, #312]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 020c 	and.w	r2, r3, #12
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	429a      	cmp	r2, r3
 800488e:	d1eb      	bne.n	8004868 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d023      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048a8:	4b43      	ldr	r3, [pc, #268]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	4a42      	ldr	r2, [pc, #264]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 80048ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80048b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d007      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80048c0:	4b3d      	ldr	r3, [pc, #244]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80048c8:	4a3b      	ldr	r2, [pc, #236]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 80048ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80048ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d0:	4b39      	ldr	r3, [pc, #228]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	4936      	ldr	r1, [pc, #216]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	608b      	str	r3, [r1, #8]
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	2b80      	cmp	r3, #128	@ 0x80
 80048e8:	d105      	bne.n	80048f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80048ea:	4b33      	ldr	r3, [pc, #204]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	4a32      	ldr	r2, [pc, #200]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 80048f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048f6:	4b2f      	ldr	r3, [pc, #188]	@ (80049b4 <HAL_RCC_ClockConfig+0x260>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	d21d      	bcs.n	8004940 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004904:	4b2b      	ldr	r3, [pc, #172]	@ (80049b4 <HAL_RCC_ClockConfig+0x260>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f023 020f 	bic.w	r2, r3, #15
 800490c:	4929      	ldr	r1, [pc, #164]	@ (80049b4 <HAL_RCC_ClockConfig+0x260>)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	4313      	orrs	r3, r2
 8004912:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004914:	f7fd fe90 	bl	8002638 <HAL_GetTick>
 8004918:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800491a:	e00a      	b.n	8004932 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800491c:	f7fd fe8c 	bl	8002638 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e03b      	b.n	80049aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004932:	4b20      	ldr	r3, [pc, #128]	@ (80049b4 <HAL_RCC_ClockConfig+0x260>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d1ed      	bne.n	800491c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d008      	beq.n	800495e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800494c:	4b1a      	ldr	r3, [pc, #104]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	4917      	ldr	r1, [pc, #92]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d009      	beq.n	800497e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800496a:	4b13      	ldr	r3, [pc, #76]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	490f      	ldr	r1, [pc, #60]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 800497a:	4313      	orrs	r3, r2
 800497c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800497e:	f000 f825 	bl	80049cc <HAL_RCC_GetSysClockFreq>
 8004982:	4602      	mov	r2, r0
 8004984:	4b0c      	ldr	r3, [pc, #48]	@ (80049b8 <HAL_RCC_ClockConfig+0x264>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	091b      	lsrs	r3, r3, #4
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	490c      	ldr	r1, [pc, #48]	@ (80049c0 <HAL_RCC_ClockConfig+0x26c>)
 8004990:	5ccb      	ldrb	r3, [r1, r3]
 8004992:	f003 031f 	and.w	r3, r3, #31
 8004996:	fa22 f303 	lsr.w	r3, r2, r3
 800499a:	4a0a      	ldr	r2, [pc, #40]	@ (80049c4 <HAL_RCC_ClockConfig+0x270>)
 800499c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800499e:	4b0a      	ldr	r3, [pc, #40]	@ (80049c8 <HAL_RCC_ClockConfig+0x274>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fd f814 	bl	80019d0 <HAL_InitTick>
 80049a8:	4603      	mov	r3, r0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40022000 	.word	0x40022000
 80049b8:	40021000 	.word	0x40021000
 80049bc:	04c4b400 	.word	0x04c4b400
 80049c0:	0800a754 	.word	0x0800a754
 80049c4:	20000000 	.word	0x20000000
 80049c8:	20000004 	.word	0x20000004

080049cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80049d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 030c 	and.w	r3, r3, #12
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d102      	bne.n	80049e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049de:	4b2a      	ldr	r3, [pc, #168]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	e047      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80049e4:	4b27      	ldr	r3, [pc, #156]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 030c 	and.w	r3, r3, #12
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d102      	bne.n	80049f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049f0:	4b25      	ldr	r3, [pc, #148]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	e03e      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80049f6:	4b23      	ldr	r3, [pc, #140]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 030c 	and.w	r3, r3, #12
 80049fe:	2b0c      	cmp	r3, #12
 8004a00:	d136      	bne.n	8004a70 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a02:	4b20      	ldr	r3, [pc, #128]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	3301      	adds	r3, #1
 8004a18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d10c      	bne.n	8004a3a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a20:	4a19      	ldr	r2, [pc, #100]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a28:	4a16      	ldr	r2, [pc, #88]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a2a:	68d2      	ldr	r2, [r2, #12]
 8004a2c:	0a12      	lsrs	r2, r2, #8
 8004a2e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a32:	fb02 f303 	mul.w	r3, r2, r3
 8004a36:	617b      	str	r3, [r7, #20]
      break;
 8004a38:	e00c      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a3a:	4a13      	ldr	r2, [pc, #76]	@ (8004a88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a42:	4a10      	ldr	r2, [pc, #64]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a44:	68d2      	ldr	r2, [r2, #12]
 8004a46:	0a12      	lsrs	r2, r2, #8
 8004a48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a4c:	fb02 f303 	mul.w	r3, r2, r3
 8004a50:	617b      	str	r3, [r7, #20]
      break;
 8004a52:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a54:	4b0b      	ldr	r3, [pc, #44]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	0e5b      	lsrs	r3, r3, #25
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	3301      	adds	r3, #1
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6c:	613b      	str	r3, [r7, #16]
 8004a6e:	e001      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a74:	693b      	ldr	r3, [r7, #16]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	371c      	adds	r7, #28
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	40021000 	.word	0x40021000
 8004a88:	00f42400 	.word	0x00f42400

08004a8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a90:	4b03      	ldr	r3, [pc, #12]	@ (8004aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a92:	681b      	ldr	r3, [r3, #0]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	20000000 	.word	0x20000000

08004aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004aa8:	f7ff fff0 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8004aac:	4602      	mov	r2, r0
 8004aae:	4b06      	ldr	r3, [pc, #24]	@ (8004ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	0a1b      	lsrs	r3, r3, #8
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	4904      	ldr	r1, [pc, #16]	@ (8004acc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004aba:	5ccb      	ldrb	r3, [r1, r3]
 8004abc:	f003 031f 	and.w	r3, r3, #31
 8004ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	0800a764 	.word	0x0800a764

08004ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ad4:	f7ff ffda 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	4b06      	ldr	r3, [pc, #24]	@ (8004af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	0adb      	lsrs	r3, r3, #11
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	4904      	ldr	r1, [pc, #16]	@ (8004af8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ae6:	5ccb      	ldrb	r3, [r1, r3]
 8004ae8:	f003 031f 	and.w	r3, r3, #31
 8004aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40021000 	.word	0x40021000
 8004af8:	0800a764 	.word	0x0800a764

08004afc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	220f      	movs	r2, #15
 8004b0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004b0c:	4b12      	ldr	r3, [pc, #72]	@ (8004b58 <HAL_RCC_GetClockConfig+0x5c>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f003 0203 	and.w	r2, r3, #3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004b18:	4b0f      	ldr	r3, [pc, #60]	@ (8004b58 <HAL_RCC_GetClockConfig+0x5c>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004b24:	4b0c      	ldr	r3, [pc, #48]	@ (8004b58 <HAL_RCC_GetClockConfig+0x5c>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004b30:	4b09      	ldr	r3, [pc, #36]	@ (8004b58 <HAL_RCC_GetClockConfig+0x5c>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	08db      	lsrs	r3, r3, #3
 8004b36:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004b3e:	4b07      	ldr	r3, [pc, #28]	@ (8004b5c <HAL_RCC_GetClockConfig+0x60>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 020f 	and.w	r2, r3, #15
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	601a      	str	r2, [r3, #0]
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	40022000 	.word	0x40022000

08004b60 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b66:	4b1e      	ldr	r3, [pc, #120]	@ (8004be0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b70:	4b1b      	ldr	r3, [pc, #108]	@ (8004be0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	091b      	lsrs	r3, r3, #4
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d10c      	bne.n	8004b9e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b84:	4a17      	ldr	r2, [pc, #92]	@ (8004be4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8c:	4a14      	ldr	r2, [pc, #80]	@ (8004be0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b8e:	68d2      	ldr	r2, [r2, #12]
 8004b90:	0a12      	lsrs	r2, r2, #8
 8004b92:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b96:	fb02 f303 	mul.w	r3, r2, r3
 8004b9a:	617b      	str	r3, [r7, #20]
    break;
 8004b9c:	e00c      	b.n	8004bb8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b9e:	4a11      	ldr	r2, [pc, #68]	@ (8004be4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba6:	4a0e      	ldr	r2, [pc, #56]	@ (8004be0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ba8:	68d2      	ldr	r2, [r2, #12]
 8004baa:	0a12      	lsrs	r2, r2, #8
 8004bac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004bb0:	fb02 f303 	mul.w	r3, r2, r3
 8004bb4:	617b      	str	r3, [r7, #20]
    break;
 8004bb6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bb8:	4b09      	ldr	r3, [pc, #36]	@ (8004be0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	0e5b      	lsrs	r3, r3, #25
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004bd2:	687b      	ldr	r3, [r7, #4]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	371c      	adds	r7, #28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	40021000 	.word	0x40021000
 8004be4:	00f42400 	.word	0x00f42400

08004be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8098 	beq.w	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c06:	2300      	movs	r3, #0
 8004c08:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c0a:	4b43      	ldr	r3, [pc, #268]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10d      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c16:	4b40      	ldr	r3, [pc, #256]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c1a:	4a3f      	ldr	r2, [pc, #252]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c20:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c22:	4b3d      	ldr	r3, [pc, #244]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c2a:	60bb      	str	r3, [r7, #8]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c32:	4b3a      	ldr	r3, [pc, #232]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a39      	ldr	r2, [pc, #228]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c3e:	f7fd fcfb 	bl	8002638 <HAL_GetTick>
 8004c42:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c44:	e009      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c46:	f7fd fcf7 	bl	8002638 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d902      	bls.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	74fb      	strb	r3, [r7, #19]
        break;
 8004c58:	e005      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c5a:	4b30      	ldr	r3, [pc, #192]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0ef      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c66:	7cfb      	ldrb	r3, [r7, #19]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d159      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c76:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d01e      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d019      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c88:	4b23      	ldr	r3, [pc, #140]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c94:	4b20      	ldr	r3, [pc, #128]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004caa:	4a1b      	ldr	r2, [pc, #108]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cb4:	4a18      	ldr	r2, [pc, #96]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d016      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc6:	f7fd fcb7 	bl	8002638 <HAL_GetTick>
 8004cca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ccc:	e00b      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cce:	f7fd fcb3 	bl	8002638 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d902      	bls.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	74fb      	strb	r3, [r7, #19]
            break;
 8004ce4:	e006      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0ec      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004cf4:	7cfb      	ldrb	r3, [r7, #19]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10b      	bne.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cfa:	4b07      	ldr	r3, [pc, #28]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d08:	4903      	ldr	r1, [pc, #12]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004d10:	e008      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d12:	7cfb      	ldrb	r3, [r7, #19]
 8004d14:	74bb      	strb	r3, [r7, #18]
 8004d16:	e005      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d24:	7c7b      	ldrb	r3, [r7, #17]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d105      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d2a:	4ba6      	ldr	r3, [pc, #664]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d2e:	4aa5      	ldr	r2, [pc, #660]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d42:	4ba0      	ldr	r3, [pc, #640]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d48:	f023 0203 	bic.w	r2, r3, #3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	499c      	ldr	r1, [pc, #624]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d64:	4b97      	ldr	r3, [pc, #604]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d6a:	f023 020c 	bic.w	r2, r3, #12
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	4994      	ldr	r1, [pc, #592]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d86:	4b8f      	ldr	r3, [pc, #572]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	498b      	ldr	r1, [pc, #556]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0308 	and.w	r3, r3, #8
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004da8:	4b86      	ldr	r3, [pc, #536]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	4983      	ldr	r1, [pc, #524]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dca:	4b7e      	ldr	r3, [pc, #504]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	497a      	ldr	r1, [pc, #488]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dec:	4b75      	ldr	r3, [pc, #468]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	4972      	ldr	r1, [pc, #456]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e0e:	4b6d      	ldr	r3, [pc, #436]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e14:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	4969      	ldr	r1, [pc, #420]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e30:	4b64      	ldr	r3, [pc, #400]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e36:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	4961      	ldr	r1, [pc, #388]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e52:	4b5c      	ldr	r3, [pc, #368]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e60:	4958      	ldr	r1, [pc, #352]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d015      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e74:	4b53      	ldr	r3, [pc, #332]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e82:	4950      	ldr	r1, [pc, #320]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e92:	d105      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e94:	4b4b      	ldr	r3, [pc, #300]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	4a4a      	ldr	r2, [pc, #296]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e9e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d015      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004eac:	4b45      	ldr	r3, [pc, #276]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	4942      	ldr	r1, [pc, #264]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004eca:	d105      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ecc:	4b3d      	ldr	r3, [pc, #244]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	4a3c      	ldr	r2, [pc, #240]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ed6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d015      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ee4:	4b37      	ldr	r3, [pc, #220]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef2:	4934      	ldr	r1, [pc, #208]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f02:	d105      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f04:	4b2f      	ldr	r3, [pc, #188]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	4a2e      	ldr	r2, [pc, #184]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f0e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d015      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f1c:	4b29      	ldr	r3, [pc, #164]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f2a:	4926      	ldr	r1, [pc, #152]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f3a:	d105      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f3c:	4b21      	ldr	r3, [pc, #132]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4a20      	ldr	r2, [pc, #128]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f46:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d015      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f54:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f62:	4918      	ldr	r1, [pc, #96]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f72:	d105      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f74:	4b13      	ldr	r3, [pc, #76]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	4a12      	ldr	r2, [pc, #72]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d015      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f92:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f9a:	490a      	ldr	r1, [pc, #40]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004faa:	d105      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fac:	4b05      	ldr	r3, [pc, #20]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	4a04      	ldr	r2, [pc, #16]	@ (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fb6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004fb8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	40021000 	.word	0x40021000

08004fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e049      	b.n	800506e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7fd f8f8 	bl	80021e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3304      	adds	r3, #4
 8005004:	4619      	mov	r1, r3
 8005006:	4610      	mov	r0, r2
 8005008:	f000 fdc0 	bl	8005b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b01      	cmp	r3, #1
 800508a:	d001      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e04a      	b.n	8005126 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
 80050a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a21      	ldr	r2, [pc, #132]	@ (8005134 <HAL_TIM_Base_Start_IT+0xbc>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d018      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x6c>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ba:	d013      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x6c>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005138 <HAL_TIM_Base_Start_IT+0xc0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00e      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x6c>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a1c      	ldr	r2, [pc, #112]	@ (800513c <HAL_TIM_Base_Start_IT+0xc4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d009      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x6c>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005140 <HAL_TIM_Base_Start_IT+0xc8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d004      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x6c>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a19      	ldr	r2, [pc, #100]	@ (8005144 <HAL_TIM_Base_Start_IT+0xcc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d115      	bne.n	8005110 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	4b17      	ldr	r3, [pc, #92]	@ (8005148 <HAL_TIM_Base_Start_IT+0xd0>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b06      	cmp	r3, #6
 80050f4:	d015      	beq.n	8005122 <HAL_TIM_Base_Start_IT+0xaa>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050fc:	d011      	beq.n	8005122 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 0201 	orr.w	r2, r2, #1
 800510c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510e:	e008      	b.n	8005122 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0201 	orr.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	e000      	b.n	8005124 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005122:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	40012c00 	.word	0x40012c00
 8005138:	40000400 	.word	0x40000400
 800513c:	40000800 	.word	0x40000800
 8005140:	40013400 	.word	0x40013400
 8005144:	40014000 	.word	0x40014000
 8005148:	00010007 	.word	0x00010007

0800514c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e049      	b.n	80051f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fc ff82 	bl	800207c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3304      	adds	r3, #4
 8005188:	4619      	mov	r1, r3
 800518a:	4610      	mov	r0, r2
 800518c:	f000 fcfe 	bl	8005b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d109      	bne.n	8005220 <HAL_TIM_PWM_Start+0x24>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	bf14      	ite	ne
 8005218:	2301      	movne	r3, #1
 800521a:	2300      	moveq	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	e03c      	b.n	800529a <HAL_TIM_PWM_Start+0x9e>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b04      	cmp	r3, #4
 8005224:	d109      	bne.n	800523a <HAL_TIM_PWM_Start+0x3e>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b01      	cmp	r3, #1
 8005230:	bf14      	ite	ne
 8005232:	2301      	movne	r3, #1
 8005234:	2300      	moveq	r3, #0
 8005236:	b2db      	uxtb	r3, r3
 8005238:	e02f      	b.n	800529a <HAL_TIM_PWM_Start+0x9e>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b08      	cmp	r3, #8
 800523e:	d109      	bne.n	8005254 <HAL_TIM_PWM_Start+0x58>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b01      	cmp	r3, #1
 800524a:	bf14      	ite	ne
 800524c:	2301      	movne	r3, #1
 800524e:	2300      	moveq	r3, #0
 8005250:	b2db      	uxtb	r3, r3
 8005252:	e022      	b.n	800529a <HAL_TIM_PWM_Start+0x9e>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2b0c      	cmp	r3, #12
 8005258:	d109      	bne.n	800526e <HAL_TIM_PWM_Start+0x72>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b01      	cmp	r3, #1
 8005264:	bf14      	ite	ne
 8005266:	2301      	movne	r3, #1
 8005268:	2300      	moveq	r3, #0
 800526a:	b2db      	uxtb	r3, r3
 800526c:	e015      	b.n	800529a <HAL_TIM_PWM_Start+0x9e>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b10      	cmp	r3, #16
 8005272:	d109      	bne.n	8005288 <HAL_TIM_PWM_Start+0x8c>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b01      	cmp	r3, #1
 800527e:	bf14      	ite	ne
 8005280:	2301      	movne	r3, #1
 8005282:	2300      	moveq	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	e008      	b.n	800529a <HAL_TIM_PWM_Start+0x9e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b01      	cmp	r3, #1
 8005292:	bf14      	ite	ne
 8005294:	2301      	movne	r3, #1
 8005296:	2300      	moveq	r3, #0
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e097      	b.n	80053d2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d104      	bne.n	80052b2 <HAL_TIM_PWM_Start+0xb6>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052b0:	e023      	b.n	80052fa <HAL_TIM_PWM_Start+0xfe>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d104      	bne.n	80052c2 <HAL_TIM_PWM_Start+0xc6>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052c0:	e01b      	b.n	80052fa <HAL_TIM_PWM_Start+0xfe>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d104      	bne.n	80052d2 <HAL_TIM_PWM_Start+0xd6>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052d0:	e013      	b.n	80052fa <HAL_TIM_PWM_Start+0xfe>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b0c      	cmp	r3, #12
 80052d6:	d104      	bne.n	80052e2 <HAL_TIM_PWM_Start+0xe6>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052e0:	e00b      	b.n	80052fa <HAL_TIM_PWM_Start+0xfe>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b10      	cmp	r3, #16
 80052e6:	d104      	bne.n	80052f2 <HAL_TIM_PWM_Start+0xf6>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052f0:	e003      	b.n	80052fa <HAL_TIM_PWM_Start+0xfe>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2201      	movs	r2, #1
 8005300:	6839      	ldr	r1, [r7, #0]
 8005302:	4618      	mov	r0, r3
 8005304:	f000 ffd4 	bl	80062b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a33      	ldr	r2, [pc, #204]	@ (80053dc <HAL_TIM_PWM_Start+0x1e0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d013      	beq.n	800533a <HAL_TIM_PWM_Start+0x13e>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a32      	ldr	r2, [pc, #200]	@ (80053e0 <HAL_TIM_PWM_Start+0x1e4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00e      	beq.n	800533a <HAL_TIM_PWM_Start+0x13e>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a30      	ldr	r2, [pc, #192]	@ (80053e4 <HAL_TIM_PWM_Start+0x1e8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d009      	beq.n	800533a <HAL_TIM_PWM_Start+0x13e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a2f      	ldr	r2, [pc, #188]	@ (80053e8 <HAL_TIM_PWM_Start+0x1ec>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d004      	beq.n	800533a <HAL_TIM_PWM_Start+0x13e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a2d      	ldr	r2, [pc, #180]	@ (80053ec <HAL_TIM_PWM_Start+0x1f0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d101      	bne.n	800533e <HAL_TIM_PWM_Start+0x142>
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <HAL_TIM_PWM_Start+0x144>
 800533e:	2300      	movs	r3, #0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d007      	beq.n	8005354 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005352:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a20      	ldr	r2, [pc, #128]	@ (80053dc <HAL_TIM_PWM_Start+0x1e0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d018      	beq.n	8005390 <HAL_TIM_PWM_Start+0x194>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005366:	d013      	beq.n	8005390 <HAL_TIM_PWM_Start+0x194>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a20      	ldr	r2, [pc, #128]	@ (80053f0 <HAL_TIM_PWM_Start+0x1f4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d00e      	beq.n	8005390 <HAL_TIM_PWM_Start+0x194>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a1f      	ldr	r2, [pc, #124]	@ (80053f4 <HAL_TIM_PWM_Start+0x1f8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d009      	beq.n	8005390 <HAL_TIM_PWM_Start+0x194>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a17      	ldr	r2, [pc, #92]	@ (80053e0 <HAL_TIM_PWM_Start+0x1e4>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d004      	beq.n	8005390 <HAL_TIM_PWM_Start+0x194>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a16      	ldr	r2, [pc, #88]	@ (80053e4 <HAL_TIM_PWM_Start+0x1e8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d115      	bne.n	80053bc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689a      	ldr	r2, [r3, #8]
 8005396:	4b18      	ldr	r3, [pc, #96]	@ (80053f8 <HAL_TIM_PWM_Start+0x1fc>)
 8005398:	4013      	ands	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b06      	cmp	r3, #6
 80053a0:	d015      	beq.n	80053ce <HAL_TIM_PWM_Start+0x1d2>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053a8:	d011      	beq.n	80053ce <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0201 	orr.w	r2, r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ba:	e008      	b.n	80053ce <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	e000      	b.n	80053d0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	40012c00 	.word	0x40012c00
 80053e0:	40013400 	.word	0x40013400
 80053e4:	40014000 	.word	0x40014000
 80053e8:	40014400 	.word	0x40014400
 80053ec:	40014800 	.word	0x40014800
 80053f0:	40000400 	.word	0x40000400
 80053f4:	40000800 	.word	0x40000800
 80053f8:	00010007 	.word	0x00010007

080053fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2200      	movs	r2, #0
 800540c:	6839      	ldr	r1, [r7, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f000 ff4e 	bl	80062b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a3e      	ldr	r2, [pc, #248]	@ (8005514 <HAL_TIM_PWM_Stop+0x118>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d013      	beq.n	8005446 <HAL_TIM_PWM_Stop+0x4a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a3d      	ldr	r2, [pc, #244]	@ (8005518 <HAL_TIM_PWM_Stop+0x11c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00e      	beq.n	8005446 <HAL_TIM_PWM_Stop+0x4a>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a3b      	ldr	r2, [pc, #236]	@ (800551c <HAL_TIM_PWM_Stop+0x120>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d009      	beq.n	8005446 <HAL_TIM_PWM_Stop+0x4a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a3a      	ldr	r2, [pc, #232]	@ (8005520 <HAL_TIM_PWM_Stop+0x124>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d004      	beq.n	8005446 <HAL_TIM_PWM_Stop+0x4a>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a38      	ldr	r2, [pc, #224]	@ (8005524 <HAL_TIM_PWM_Stop+0x128>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d101      	bne.n	800544a <HAL_TIM_PWM_Stop+0x4e>
 8005446:	2301      	movs	r3, #1
 8005448:	e000      	b.n	800544c <HAL_TIM_PWM_Stop+0x50>
 800544a:	2300      	movs	r3, #0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d017      	beq.n	8005480 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6a1a      	ldr	r2, [r3, #32]
 8005456:	f241 1311 	movw	r3, #4369	@ 0x1111
 800545a:	4013      	ands	r3, r2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10f      	bne.n	8005480 <HAL_TIM_PWM_Stop+0x84>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6a1a      	ldr	r2, [r3, #32]
 8005466:	f244 4344 	movw	r3, #17476	@ 0x4444
 800546a:	4013      	ands	r3, r2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d107      	bne.n	8005480 <HAL_TIM_PWM_Stop+0x84>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800547e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6a1a      	ldr	r2, [r3, #32]
 8005486:	f241 1311 	movw	r3, #4369	@ 0x1111
 800548a:	4013      	ands	r3, r2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10f      	bne.n	80054b0 <HAL_TIM_PWM_Stop+0xb4>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6a1a      	ldr	r2, [r3, #32]
 8005496:	f244 4344 	movw	r3, #17476	@ 0x4444
 800549a:	4013      	ands	r3, r2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d107      	bne.n	80054b0 <HAL_TIM_PWM_Stop+0xb4>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 0201 	bic.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d104      	bne.n	80054c0 <HAL_TIM_PWM_Stop+0xc4>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054be:	e023      	b.n	8005508 <HAL_TIM_PWM_Stop+0x10c>
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	d104      	bne.n	80054d0 <HAL_TIM_PWM_Stop+0xd4>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054ce:	e01b      	b.n	8005508 <HAL_TIM_PWM_Stop+0x10c>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d104      	bne.n	80054e0 <HAL_TIM_PWM_Stop+0xe4>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054de:	e013      	b.n	8005508 <HAL_TIM_PWM_Stop+0x10c>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b0c      	cmp	r3, #12
 80054e4:	d104      	bne.n	80054f0 <HAL_TIM_PWM_Stop+0xf4>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054ee:	e00b      	b.n	8005508 <HAL_TIM_PWM_Stop+0x10c>
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	2b10      	cmp	r3, #16
 80054f4:	d104      	bne.n	8005500 <HAL_TIM_PWM_Stop+0x104>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054fe:	e003      	b.n	8005508 <HAL_TIM_PWM_Stop+0x10c>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	40012c00 	.word	0x40012c00
 8005518:	40013400 	.word	0x40013400
 800551c:	40014000 	.word	0x40014000
 8005520:	40014400 	.word	0x40014400
 8005524:	40014800 	.word	0x40014800

08005528 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e097      	b.n	800566c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d106      	bne.n	8005556 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7fc fdb3 	bl	80020bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2202      	movs	r2, #2
 800555a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6812      	ldr	r2, [r2, #0]
 8005568:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800556c:	f023 0307 	bic.w	r3, r3, #7
 8005570:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	3304      	adds	r3, #4
 800557a:	4619      	mov	r1, r3
 800557c:	4610      	mov	r0, r2
 800557e:	f000 fb05 	bl	8005b8c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055aa:	f023 0303 	bic.w	r3, r3, #3
 80055ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	021b      	lsls	r3, r3, #8
 80055ba:	4313      	orrs	r3, r2
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4313      	orrs	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80055c8:	f023 030c 	bic.w	r3, r3, #12
 80055cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	021b      	lsls	r3, r3, #8
 80055e4:	4313      	orrs	r3, r2
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	011a      	lsls	r2, r3, #4
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	031b      	lsls	r3, r3, #12
 80055f8:	4313      	orrs	r3, r2
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005606:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800560e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	4313      	orrs	r3, r2
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d020      	beq.n	80056d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01b      	beq.n	80056d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f06f 0202 	mvn.w	r2, #2
 80056a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fa46 	bl	8005b50 <HAL_TIM_IC_CaptureCallback>
 80056c4:	e005      	b.n	80056d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fa38 	bl	8005b3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 fa49 	bl	8005b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f003 0304 	and.w	r3, r3, #4
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d020      	beq.n	8005724 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01b      	beq.n	8005724 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0204 	mvn.w	r2, #4
 80056f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2202      	movs	r2, #2
 80056fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fa20 	bl	8005b50 <HAL_TIM_IC_CaptureCallback>
 8005710:	e005      	b.n	800571e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fa12 	bl	8005b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fa23 	bl	8005b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d020      	beq.n	8005770 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f003 0308 	and.w	r3, r3, #8
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01b      	beq.n	8005770 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f06f 0208 	mvn.w	r2, #8
 8005740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2204      	movs	r2, #4
 8005746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	f003 0303 	and.w	r3, r3, #3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f9fa 	bl	8005b50 <HAL_TIM_IC_CaptureCallback>
 800575c:	e005      	b.n	800576a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f9ec 	bl	8005b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f9fd 	bl	8005b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	2b00      	cmp	r3, #0
 8005778:	d020      	beq.n	80057bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f003 0310 	and.w	r3, r3, #16
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01b      	beq.n	80057bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0210 	mvn.w	r2, #16
 800578c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2208      	movs	r2, #8
 8005792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f9d4 	bl	8005b50 <HAL_TIM_IC_CaptureCallback>
 80057a8:	e005      	b.n	80057b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f9c6 	bl	8005b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f9d7 	bl	8005b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00c      	beq.n	80057e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d007      	beq.n	80057e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f06f 0201 	mvn.w	r2, #1
 80057d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fc f8bc 	bl	8001958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d104      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00c      	beq.n	800580e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d007      	beq.n	800580e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 ffa1 	bl	8006750 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00c      	beq.n	8005832 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800581e:	2b00      	cmp	r3, #0
 8005820:	d007      	beq.n	8005832 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800582a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 ff99 	bl	8006764 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00c      	beq.n	8005856 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005842:	2b00      	cmp	r3, #0
 8005844:	d007      	beq.n	8005856 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800584e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f991 	bl	8005b78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00c      	beq.n	800587a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f003 0320 	and.w	r3, r3, #32
 8005866:	2b00      	cmp	r3, #0
 8005868:	d007      	beq.n	800587a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f06f 0220 	mvn.w	r2, #32
 8005872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 ff61 	bl	800673c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00c      	beq.n	800589e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d007      	beq.n	800589e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 ff6d 	bl	8006778 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00c      	beq.n	80058c2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d007      	beq.n	80058c2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80058ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 ff65 	bl	800678c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00c      	beq.n	80058e6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d007      	beq.n	80058e6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80058de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 ff5d 	bl	80067a0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00c      	beq.n	800590a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d007      	beq.n	800590a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 ff55 	bl	80067b4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800590a:	bf00      	nop
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800592e:	2302      	movs	r3, #2
 8005930:	e0ff      	b.n	8005b32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b14      	cmp	r3, #20
 800593e:	f200 80f0 	bhi.w	8005b22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005942:	a201      	add	r2, pc, #4	@ (adr r2, 8005948 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005948:	0800599d 	.word	0x0800599d
 800594c:	08005b23 	.word	0x08005b23
 8005950:	08005b23 	.word	0x08005b23
 8005954:	08005b23 	.word	0x08005b23
 8005958:	080059dd 	.word	0x080059dd
 800595c:	08005b23 	.word	0x08005b23
 8005960:	08005b23 	.word	0x08005b23
 8005964:	08005b23 	.word	0x08005b23
 8005968:	08005a1f 	.word	0x08005a1f
 800596c:	08005b23 	.word	0x08005b23
 8005970:	08005b23 	.word	0x08005b23
 8005974:	08005b23 	.word	0x08005b23
 8005978:	08005a5f 	.word	0x08005a5f
 800597c:	08005b23 	.word	0x08005b23
 8005980:	08005b23 	.word	0x08005b23
 8005984:	08005b23 	.word	0x08005b23
 8005988:	08005aa1 	.word	0x08005aa1
 800598c:	08005b23 	.word	0x08005b23
 8005990:	08005b23 	.word	0x08005b23
 8005994:	08005b23 	.word	0x08005b23
 8005998:	08005ae1 	.word	0x08005ae1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68b9      	ldr	r1, [r7, #8]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 f98e 	bl	8005cc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0208 	orr.w	r2, r2, #8
 80059b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699a      	ldr	r2, [r3, #24]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0204 	bic.w	r2, r2, #4
 80059c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6999      	ldr	r1, [r3, #24]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	691a      	ldr	r2, [r3, #16]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	619a      	str	r2, [r3, #24]
      break;
 80059da:	e0a5      	b.n	8005b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68b9      	ldr	r1, [r7, #8]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 f9fe 	bl	8005de4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699a      	ldr	r2, [r3, #24]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6999      	ldr	r1, [r3, #24]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	021a      	lsls	r2, r3, #8
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	619a      	str	r2, [r3, #24]
      break;
 8005a1c:	e084      	b.n	8005b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68b9      	ldr	r1, [r7, #8]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 fa67 	bl	8005ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69da      	ldr	r2, [r3, #28]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 0208 	orr.w	r2, r2, #8
 8005a38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69da      	ldr	r2, [r3, #28]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0204 	bic.w	r2, r2, #4
 8005a48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69d9      	ldr	r1, [r3, #28]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	61da      	str	r2, [r3, #28]
      break;
 8005a5c:	e064      	b.n	8005b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68b9      	ldr	r1, [r7, #8]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f000 facf 	bl	8006008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69da      	ldr	r2, [r3, #28]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69da      	ldr	r2, [r3, #28]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69d9      	ldr	r1, [r3, #28]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	021a      	lsls	r2, r3, #8
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	61da      	str	r2, [r3, #28]
      break;
 8005a9e:	e043      	b.n	8005b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 fb38 	bl	800611c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0208 	orr.w	r2, r2, #8
 8005aba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0204 	bic.w	r2, r2, #4
 8005aca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	691a      	ldr	r2, [r3, #16]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005ade:	e023      	b.n	8005b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68b9      	ldr	r1, [r7, #8]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 fb7c 	bl	80061e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005afa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b0a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	021a      	lsls	r2, r3, #8
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005b20:	e002      	b.n	8005b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	75fb      	strb	r3, [r7, #23]
      break;
 8005b26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3718      	adds	r7, #24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop

08005b3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a42      	ldr	r2, [pc, #264]	@ (8005ca8 <TIM_Base_SetConfig+0x11c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00f      	beq.n	8005bc4 <TIM_Base_SetConfig+0x38>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005baa:	d00b      	beq.n	8005bc4 <TIM_Base_SetConfig+0x38>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a3f      	ldr	r2, [pc, #252]	@ (8005cac <TIM_Base_SetConfig+0x120>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d007      	beq.n	8005bc4 <TIM_Base_SetConfig+0x38>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a3e      	ldr	r2, [pc, #248]	@ (8005cb0 <TIM_Base_SetConfig+0x124>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d003      	beq.n	8005bc4 <TIM_Base_SetConfig+0x38>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a3d      	ldr	r2, [pc, #244]	@ (8005cb4 <TIM_Base_SetConfig+0x128>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d108      	bne.n	8005bd6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a33      	ldr	r2, [pc, #204]	@ (8005ca8 <TIM_Base_SetConfig+0x11c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d01b      	beq.n	8005c16 <TIM_Base_SetConfig+0x8a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005be4:	d017      	beq.n	8005c16 <TIM_Base_SetConfig+0x8a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a30      	ldr	r2, [pc, #192]	@ (8005cac <TIM_Base_SetConfig+0x120>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d013      	beq.n	8005c16 <TIM_Base_SetConfig+0x8a>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a2f      	ldr	r2, [pc, #188]	@ (8005cb0 <TIM_Base_SetConfig+0x124>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d00f      	beq.n	8005c16 <TIM_Base_SetConfig+0x8a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a2e      	ldr	r2, [pc, #184]	@ (8005cb4 <TIM_Base_SetConfig+0x128>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d00b      	beq.n	8005c16 <TIM_Base_SetConfig+0x8a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a2d      	ldr	r2, [pc, #180]	@ (8005cb8 <TIM_Base_SetConfig+0x12c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d007      	beq.n	8005c16 <TIM_Base_SetConfig+0x8a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a2c      	ldr	r2, [pc, #176]	@ (8005cbc <TIM_Base_SetConfig+0x130>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d003      	beq.n	8005c16 <TIM_Base_SetConfig+0x8a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a2b      	ldr	r2, [pc, #172]	@ (8005cc0 <TIM_Base_SetConfig+0x134>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d108      	bne.n	8005c28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a16      	ldr	r2, [pc, #88]	@ (8005ca8 <TIM_Base_SetConfig+0x11c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00f      	beq.n	8005c74 <TIM_Base_SetConfig+0xe8>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a17      	ldr	r2, [pc, #92]	@ (8005cb4 <TIM_Base_SetConfig+0x128>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d00b      	beq.n	8005c74 <TIM_Base_SetConfig+0xe8>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a16      	ldr	r2, [pc, #88]	@ (8005cb8 <TIM_Base_SetConfig+0x12c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d007      	beq.n	8005c74 <TIM_Base_SetConfig+0xe8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a15      	ldr	r2, [pc, #84]	@ (8005cbc <TIM_Base_SetConfig+0x130>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d003      	beq.n	8005c74 <TIM_Base_SetConfig+0xe8>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a14      	ldr	r2, [pc, #80]	@ (8005cc0 <TIM_Base_SetConfig+0x134>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d103      	bne.n	8005c7c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	691a      	ldr	r2, [r3, #16]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d105      	bne.n	8005c9a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	f023 0201 	bic.w	r2, r3, #1
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	611a      	str	r2, [r3, #16]
  }
}
 8005c9a:	bf00      	nop
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40012c00 	.word	0x40012c00
 8005cac:	40000400 	.word	0x40000400
 8005cb0:	40000800 	.word	0x40000800
 8005cb4:	40013400 	.word	0x40013400
 8005cb8:	40014000 	.word	0x40014000
 8005cbc:	40014400 	.word	0x40014400
 8005cc0:	40014800 	.word	0x40014800

08005cc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	f023 0201 	bic.w	r2, r3, #1
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0303 	bic.w	r3, r3, #3
 8005cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f023 0302 	bic.w	r3, r3, #2
 8005d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a2c      	ldr	r2, [pc, #176]	@ (8005dd0 <TIM_OC1_SetConfig+0x10c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d00f      	beq.n	8005d44 <TIM_OC1_SetConfig+0x80>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a2b      	ldr	r2, [pc, #172]	@ (8005dd4 <TIM_OC1_SetConfig+0x110>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d00b      	beq.n	8005d44 <TIM_OC1_SetConfig+0x80>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a2a      	ldr	r2, [pc, #168]	@ (8005dd8 <TIM_OC1_SetConfig+0x114>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d007      	beq.n	8005d44 <TIM_OC1_SetConfig+0x80>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a29      	ldr	r2, [pc, #164]	@ (8005ddc <TIM_OC1_SetConfig+0x118>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d003      	beq.n	8005d44 <TIM_OC1_SetConfig+0x80>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a28      	ldr	r2, [pc, #160]	@ (8005de0 <TIM_OC1_SetConfig+0x11c>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d10c      	bne.n	8005d5e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f023 0308 	bic.w	r3, r3, #8
 8005d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f023 0304 	bic.w	r3, r3, #4
 8005d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a1b      	ldr	r2, [pc, #108]	@ (8005dd0 <TIM_OC1_SetConfig+0x10c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00f      	beq.n	8005d86 <TIM_OC1_SetConfig+0xc2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a1a      	ldr	r2, [pc, #104]	@ (8005dd4 <TIM_OC1_SetConfig+0x110>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00b      	beq.n	8005d86 <TIM_OC1_SetConfig+0xc2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a19      	ldr	r2, [pc, #100]	@ (8005dd8 <TIM_OC1_SetConfig+0x114>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d007      	beq.n	8005d86 <TIM_OC1_SetConfig+0xc2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a18      	ldr	r2, [pc, #96]	@ (8005ddc <TIM_OC1_SetConfig+0x118>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d003      	beq.n	8005d86 <TIM_OC1_SetConfig+0xc2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a17      	ldr	r2, [pc, #92]	@ (8005de0 <TIM_OC1_SetConfig+0x11c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d111      	bne.n	8005daa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	621a      	str	r2, [r3, #32]
}
 8005dc4:	bf00      	nop
 8005dc6:	371c      	adds	r7, #28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	40012c00 	.word	0x40012c00
 8005dd4:	40013400 	.word	0x40013400
 8005dd8:	40014000 	.word	0x40014000
 8005ddc:	40014400 	.word	0x40014400
 8005de0:	40014800 	.word	0x40014800

08005de4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	f023 0210 	bic.w	r2, r3, #16
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	021b      	lsls	r3, r3, #8
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f023 0320 	bic.w	r3, r3, #32
 8005e32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	011b      	lsls	r3, r3, #4
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a28      	ldr	r2, [pc, #160]	@ (8005ee4 <TIM_OC2_SetConfig+0x100>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d003      	beq.n	8005e50 <TIM_OC2_SetConfig+0x6c>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a27      	ldr	r2, [pc, #156]	@ (8005ee8 <TIM_OC2_SetConfig+0x104>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d10d      	bne.n	8005e6c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	011b      	lsls	r3, r3, #4
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ee4 <TIM_OC2_SetConfig+0x100>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00f      	beq.n	8005e94 <TIM_OC2_SetConfig+0xb0>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a1c      	ldr	r2, [pc, #112]	@ (8005ee8 <TIM_OC2_SetConfig+0x104>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00b      	beq.n	8005e94 <TIM_OC2_SetConfig+0xb0>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8005eec <TIM_OC2_SetConfig+0x108>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d007      	beq.n	8005e94 <TIM_OC2_SetConfig+0xb0>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a1a      	ldr	r2, [pc, #104]	@ (8005ef0 <TIM_OC2_SetConfig+0x10c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d003      	beq.n	8005e94 <TIM_OC2_SetConfig+0xb0>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a19      	ldr	r2, [pc, #100]	@ (8005ef4 <TIM_OC2_SetConfig+0x110>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d113      	bne.n	8005ebc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	621a      	str	r2, [r3, #32]
}
 8005ed6:	bf00      	nop
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	40012c00 	.word	0x40012c00
 8005ee8:	40013400 	.word	0x40013400
 8005eec:	40014000 	.word	0x40014000
 8005ef0:	40014400 	.word	0x40014400
 8005ef4:	40014800 	.word	0x40014800

08005ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 0303 	bic.w	r3, r3, #3
 8005f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	021b      	lsls	r3, r3, #8
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a27      	ldr	r2, [pc, #156]	@ (8005ff4 <TIM_OC3_SetConfig+0xfc>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d003      	beq.n	8005f62 <TIM_OC3_SetConfig+0x6a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a26      	ldr	r2, [pc, #152]	@ (8005ff8 <TIM_OC3_SetConfig+0x100>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d10d      	bne.n	8005f7e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	021b      	lsls	r3, r3, #8
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a1c      	ldr	r2, [pc, #112]	@ (8005ff4 <TIM_OC3_SetConfig+0xfc>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d00f      	beq.n	8005fa6 <TIM_OC3_SetConfig+0xae>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a1b      	ldr	r2, [pc, #108]	@ (8005ff8 <TIM_OC3_SetConfig+0x100>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d00b      	beq.n	8005fa6 <TIM_OC3_SetConfig+0xae>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a1a      	ldr	r2, [pc, #104]	@ (8005ffc <TIM_OC3_SetConfig+0x104>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d007      	beq.n	8005fa6 <TIM_OC3_SetConfig+0xae>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a19      	ldr	r2, [pc, #100]	@ (8006000 <TIM_OC3_SetConfig+0x108>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d003      	beq.n	8005fa6 <TIM_OC3_SetConfig+0xae>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a18      	ldr	r2, [pc, #96]	@ (8006004 <TIM_OC3_SetConfig+0x10c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d113      	bne.n	8005fce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	621a      	str	r2, [r3, #32]
}
 8005fe8:	bf00      	nop
 8005fea:	371c      	adds	r7, #28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	40012c00 	.word	0x40012c00
 8005ff8:	40013400 	.word	0x40013400
 8005ffc:	40014000 	.word	0x40014000
 8006000:	40014400 	.word	0x40014400
 8006004:	40014800 	.word	0x40014800

08006008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800603a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	021b      	lsls	r3, r3, #8
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	4313      	orrs	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006056:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	031b      	lsls	r3, r3, #12
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	4313      	orrs	r3, r2
 8006062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a28      	ldr	r2, [pc, #160]	@ (8006108 <TIM_OC4_SetConfig+0x100>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d003      	beq.n	8006074 <TIM_OC4_SetConfig+0x6c>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a27      	ldr	r2, [pc, #156]	@ (800610c <TIM_OC4_SetConfig+0x104>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d10d      	bne.n	8006090 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800607a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	031b      	lsls	r3, r3, #12
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	4313      	orrs	r3, r2
 8006086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800608e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a1d      	ldr	r2, [pc, #116]	@ (8006108 <TIM_OC4_SetConfig+0x100>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d00f      	beq.n	80060b8 <TIM_OC4_SetConfig+0xb0>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a1c      	ldr	r2, [pc, #112]	@ (800610c <TIM_OC4_SetConfig+0x104>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00b      	beq.n	80060b8 <TIM_OC4_SetConfig+0xb0>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a1b      	ldr	r2, [pc, #108]	@ (8006110 <TIM_OC4_SetConfig+0x108>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d007      	beq.n	80060b8 <TIM_OC4_SetConfig+0xb0>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a1a      	ldr	r2, [pc, #104]	@ (8006114 <TIM_OC4_SetConfig+0x10c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d003      	beq.n	80060b8 <TIM_OC4_SetConfig+0xb0>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a19      	ldr	r2, [pc, #100]	@ (8006118 <TIM_OC4_SetConfig+0x110>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d113      	bne.n	80060e0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060be:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80060c6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	019b      	lsls	r3, r3, #6
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	019b      	lsls	r3, r3, #6
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	621a      	str	r2, [r3, #32]
}
 80060fa:	bf00      	nop
 80060fc:	371c      	adds	r7, #28
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40012c00 	.word	0x40012c00
 800610c:	40013400 	.word	0x40013400
 8006110:	40014000 	.word	0x40014000
 8006114:	40014400 	.word	0x40014400
 8006118:	40014800 	.word	0x40014800

0800611c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800614a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800614e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006160:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	041b      	lsls	r3, r3, #16
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	4313      	orrs	r3, r2
 800616c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a17      	ldr	r2, [pc, #92]	@ (80061d0 <TIM_OC5_SetConfig+0xb4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d00f      	beq.n	8006196 <TIM_OC5_SetConfig+0x7a>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a16      	ldr	r2, [pc, #88]	@ (80061d4 <TIM_OC5_SetConfig+0xb8>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d00b      	beq.n	8006196 <TIM_OC5_SetConfig+0x7a>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a15      	ldr	r2, [pc, #84]	@ (80061d8 <TIM_OC5_SetConfig+0xbc>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d007      	beq.n	8006196 <TIM_OC5_SetConfig+0x7a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a14      	ldr	r2, [pc, #80]	@ (80061dc <TIM_OC5_SetConfig+0xc0>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d003      	beq.n	8006196 <TIM_OC5_SetConfig+0x7a>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a13      	ldr	r2, [pc, #76]	@ (80061e0 <TIM_OC5_SetConfig+0xc4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d109      	bne.n	80061aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800619c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	021b      	lsls	r3, r3, #8
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	621a      	str	r2, [r3, #32]
}
 80061c4:	bf00      	nop
 80061c6:	371c      	adds	r7, #28
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	40012c00 	.word	0x40012c00
 80061d4:	40013400 	.word	0x40013400
 80061d8:	40014000 	.word	0x40014000
 80061dc:	40014400 	.word	0x40014400
 80061e0:	40014800 	.word	0x40014800

080061e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b087      	sub	sp, #28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800620a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	021b      	lsls	r3, r3, #8
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	4313      	orrs	r3, r2
 8006222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800622a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	051b      	lsls	r3, r3, #20
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	4313      	orrs	r3, r2
 8006236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a18      	ldr	r2, [pc, #96]	@ (800629c <TIM_OC6_SetConfig+0xb8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00f      	beq.n	8006260 <TIM_OC6_SetConfig+0x7c>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a17      	ldr	r2, [pc, #92]	@ (80062a0 <TIM_OC6_SetConfig+0xbc>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d00b      	beq.n	8006260 <TIM_OC6_SetConfig+0x7c>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a16      	ldr	r2, [pc, #88]	@ (80062a4 <TIM_OC6_SetConfig+0xc0>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d007      	beq.n	8006260 <TIM_OC6_SetConfig+0x7c>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a15      	ldr	r2, [pc, #84]	@ (80062a8 <TIM_OC6_SetConfig+0xc4>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d003      	beq.n	8006260 <TIM_OC6_SetConfig+0x7c>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a14      	ldr	r2, [pc, #80]	@ (80062ac <TIM_OC6_SetConfig+0xc8>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d109      	bne.n	8006274 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006266:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	029b      	lsls	r3, r3, #10
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	4313      	orrs	r3, r2
 8006272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	621a      	str	r2, [r3, #32]
}
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	40012c00 	.word	0x40012c00
 80062a0:	40013400 	.word	0x40013400
 80062a4:	40014000 	.word	0x40014000
 80062a8:	40014400 	.word	0x40014400
 80062ac:	40014800 	.word	0x40014800

080062b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f003 031f 	and.w	r3, r3, #31
 80062c2:	2201      	movs	r2, #1
 80062c4:	fa02 f303 	lsl.w	r3, r2, r3
 80062c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a1a      	ldr	r2, [r3, #32]
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	43db      	mvns	r3, r3
 80062d2:	401a      	ands	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6a1a      	ldr	r2, [r3, #32]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f003 031f 	and.w	r3, r3, #31
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	fa01 f303 	lsl.w	r3, r1, r3
 80062e8:	431a      	orrs	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	621a      	str	r2, [r3, #32]
}
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
	...

080062fc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d109      	bne.n	8006320 <HAL_TIMEx_PWMN_Start+0x24>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b01      	cmp	r3, #1
 8006316:	bf14      	ite	ne
 8006318:	2301      	movne	r3, #1
 800631a:	2300      	moveq	r3, #0
 800631c:	b2db      	uxtb	r3, r3
 800631e:	e022      	b.n	8006366 <HAL_TIMEx_PWMN_Start+0x6a>
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b04      	cmp	r3, #4
 8006324:	d109      	bne.n	800633a <HAL_TIMEx_PWMN_Start+0x3e>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b01      	cmp	r3, #1
 8006330:	bf14      	ite	ne
 8006332:	2301      	movne	r3, #1
 8006334:	2300      	moveq	r3, #0
 8006336:	b2db      	uxtb	r3, r3
 8006338:	e015      	b.n	8006366 <HAL_TIMEx_PWMN_Start+0x6a>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b08      	cmp	r3, #8
 800633e:	d109      	bne.n	8006354 <HAL_TIMEx_PWMN_Start+0x58>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b01      	cmp	r3, #1
 800634a:	bf14      	ite	ne
 800634c:	2301      	movne	r3, #1
 800634e:	2300      	moveq	r3, #0
 8006350:	b2db      	uxtb	r3, r3
 8006352:	e008      	b.n	8006366 <HAL_TIMEx_PWMN_Start+0x6a>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b01      	cmp	r3, #1
 800635e:	bf14      	ite	ne
 8006360:	2301      	movne	r3, #1
 8006362:	2300      	moveq	r3, #0
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e069      	b.n	8006442 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d104      	bne.n	800637e <HAL_TIMEx_PWMN_Start+0x82>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800637c:	e013      	b.n	80063a6 <HAL_TIMEx_PWMN_Start+0xaa>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b04      	cmp	r3, #4
 8006382:	d104      	bne.n	800638e <HAL_TIMEx_PWMN_Start+0x92>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2202      	movs	r2, #2
 8006388:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800638c:	e00b      	b.n	80063a6 <HAL_TIMEx_PWMN_Start+0xaa>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b08      	cmp	r3, #8
 8006392:	d104      	bne.n	800639e <HAL_TIMEx_PWMN_Start+0xa2>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800639c:	e003      	b.n	80063a6 <HAL_TIMEx_PWMN_Start+0xaa>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2202      	movs	r2, #2
 80063a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2204      	movs	r2, #4
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 fa0a 	bl	80067c8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a20      	ldr	r2, [pc, #128]	@ (800644c <HAL_TIMEx_PWMN_Start+0x150>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d018      	beq.n	8006400 <HAL_TIMEx_PWMN_Start+0x104>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063d6:	d013      	beq.n	8006400 <HAL_TIMEx_PWMN_Start+0x104>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006450 <HAL_TIMEx_PWMN_Start+0x154>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00e      	beq.n	8006400 <HAL_TIMEx_PWMN_Start+0x104>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006454 <HAL_TIMEx_PWMN_Start+0x158>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d009      	beq.n	8006400 <HAL_TIMEx_PWMN_Start+0x104>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a19      	ldr	r2, [pc, #100]	@ (8006458 <HAL_TIMEx_PWMN_Start+0x15c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d004      	beq.n	8006400 <HAL_TIMEx_PWMN_Start+0x104>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a18      	ldr	r2, [pc, #96]	@ (800645c <HAL_TIMEx_PWMN_Start+0x160>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d115      	bne.n	800642c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689a      	ldr	r2, [r3, #8]
 8006406:	4b16      	ldr	r3, [pc, #88]	@ (8006460 <HAL_TIMEx_PWMN_Start+0x164>)
 8006408:	4013      	ands	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b06      	cmp	r3, #6
 8006410:	d015      	beq.n	800643e <HAL_TIMEx_PWMN_Start+0x142>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006418:	d011      	beq.n	800643e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f042 0201 	orr.w	r2, r2, #1
 8006428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800642a:	e008      	b.n	800643e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0201 	orr.w	r2, r2, #1
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	e000      	b.n	8006440 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800643e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	40012c00 	.word	0x40012c00
 8006450:	40000400 	.word	0x40000400
 8006454:	40000800 	.word	0x40000800
 8006458:	40013400 	.word	0x40013400
 800645c:	40014000 	.word	0x40014000
 8006460:	00010007 	.word	0x00010007

08006464 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2200      	movs	r2, #0
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	4618      	mov	r0, r3
 8006478:	f000 f9a6 	bl	80067c8 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6a1a      	ldr	r2, [r3, #32]
 8006482:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006486:	4013      	ands	r3, r2
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10f      	bne.n	80064ac <HAL_TIMEx_PWMN_Stop+0x48>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6a1a      	ldr	r2, [r3, #32]
 8006492:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006496:	4013      	ands	r3, r2
 8006498:	2b00      	cmp	r3, #0
 800649a:	d107      	bne.n	80064ac <HAL_TIMEx_PWMN_Stop+0x48>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80064aa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6a1a      	ldr	r2, [r3, #32]
 80064b2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80064b6:	4013      	ands	r3, r2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10f      	bne.n	80064dc <HAL_TIMEx_PWMN_Stop+0x78>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6a1a      	ldr	r2, [r3, #32]
 80064c2:	f244 4344 	movw	r3, #17476	@ 0x4444
 80064c6:	4013      	ands	r3, r2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d107      	bne.n	80064dc <HAL_TIMEx_PWMN_Stop+0x78>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0201 	bic.w	r2, r2, #1
 80064da:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d104      	bne.n	80064ec <HAL_TIMEx_PWMN_Stop+0x88>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064ea:	e013      	b.n	8006514 <HAL_TIMEx_PWMN_Stop+0xb0>
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2b04      	cmp	r3, #4
 80064f0:	d104      	bne.n	80064fc <HAL_TIMEx_PWMN_Stop+0x98>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064fa:	e00b      	b.n	8006514 <HAL_TIMEx_PWMN_Stop+0xb0>
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b08      	cmp	r3, #8
 8006500:	d104      	bne.n	800650c <HAL_TIMEx_PWMN_Stop+0xa8>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800650a:	e003      	b.n	8006514 <HAL_TIMEx_PWMN_Stop+0xb0>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006534:	2302      	movs	r3, #2
 8006536:	e065      	b.n	8006604 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2202      	movs	r2, #2
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a2c      	ldr	r2, [pc, #176]	@ (8006610 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d004      	beq.n	800656c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a2b      	ldr	r2, [pc, #172]	@ (8006614 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d108      	bne.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006572:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006588:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	4313      	orrs	r3, r2
 8006592:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006610 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d018      	beq.n	80065d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ae:	d013      	beq.n	80065d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a18      	ldr	r2, [pc, #96]	@ (8006618 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00e      	beq.n	80065d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a17      	ldr	r2, [pc, #92]	@ (800661c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d009      	beq.n	80065d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a12      	ldr	r2, [pc, #72]	@ (8006614 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d004      	beq.n	80065d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a13      	ldr	r2, [pc, #76]	@ (8006620 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d10c      	bne.n	80065f2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	40012c00 	.word	0x40012c00
 8006614:	40013400 	.word	0x40013400
 8006618:	40000400 	.word	0x40000400
 800661c:	40000800 	.word	0x40000800
 8006620:	40014000 	.word	0x40014000

08006624 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800663c:	2302      	movs	r3, #2
 800663e:	e073      	b.n	8006728 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	4313      	orrs	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	4313      	orrs	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4313      	orrs	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	4313      	orrs	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	4313      	orrs	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	041b      	lsls	r3, r3, #16
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a19      	ldr	r2, [pc, #100]	@ (8006734 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d004      	beq.n	80066dc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a18      	ldr	r2, [pc, #96]	@ (8006738 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d11c      	bne.n	8006716 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e6:	051b      	lsls	r3, r3, #20
 80066e8:	4313      	orrs	r3, r2
 80066ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006704:	4313      	orrs	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006712:	4313      	orrs	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	40012c00 	.word	0x40012c00
 8006738:	40013400 	.word	0x40013400

0800673c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f003 030f 	and.w	r3, r3, #15
 80067da:	2204      	movs	r2, #4
 80067dc:	fa02 f303 	lsl.w	r3, r2, r3
 80067e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6a1a      	ldr	r2, [r3, #32]
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	43db      	mvns	r3, r3
 80067ea:	401a      	ands	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6a1a      	ldr	r2, [r3, #32]
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	6879      	ldr	r1, [r7, #4]
 80067fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006800:	431a      	orrs	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	621a      	str	r2, [r3, #32]
}
 8006806:	bf00      	nop
 8006808:	371c      	adds	r7, #28
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e042      	b.n	80068aa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800682a:	2b00      	cmp	r3, #0
 800682c:	d106      	bne.n	800683c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7fb fe08 	bl	800244c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2224      	movs	r2, #36	@ 0x24
 8006840:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 0201 	bic.w	r2, r2, #1
 8006852:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fee5 	bl	800762c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fc16 	bl	8007094 <UART_SetConfig>
 8006868:	4603      	mov	r3, r0
 800686a:	2b01      	cmp	r3, #1
 800686c:	d101      	bne.n	8006872 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e01b      	b.n	80068aa <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006880:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006890:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f042 0201 	orr.w	r2, r2, #1
 80068a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 ff64 	bl	8007770 <UART_CheckIdleState>
 80068a8:	4603      	mov	r3, r0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b08a      	sub	sp, #40	@ 0x28
 80068b6:	af02      	add	r7, sp, #8
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	603b      	str	r3, [r7, #0]
 80068be:	4613      	mov	r3, r2
 80068c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068c8:	2b20      	cmp	r3, #32
 80068ca:	d17b      	bne.n	80069c4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <HAL_UART_Transmit+0x26>
 80068d2:	88fb      	ldrh	r3, [r7, #6]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e074      	b.n	80069c6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2221      	movs	r2, #33	@ 0x21
 80068e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068ec:	f7fb fea4 	bl	8002638 <HAL_GetTick>
 80068f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	88fa      	ldrh	r2, [r7, #6]
 80068f6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	88fa      	ldrh	r2, [r7, #6]
 80068fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800690a:	d108      	bne.n	800691e <HAL_UART_Transmit+0x6c>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d104      	bne.n	800691e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006914:	2300      	movs	r3, #0
 8006916:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	61bb      	str	r3, [r7, #24]
 800691c:	e003      	b.n	8006926 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006922:	2300      	movs	r3, #0
 8006924:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006926:	e030      	b.n	800698a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2200      	movs	r2, #0
 8006930:	2180      	movs	r1, #128	@ 0x80
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 ffc6 	bl	80078c4 <UART_WaitOnFlagUntilTimeout>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d005      	beq.n	800694a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2220      	movs	r2, #32
 8006942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e03d      	b.n	80069c6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10b      	bne.n	8006968 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	461a      	mov	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800695e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	3302      	adds	r3, #2
 8006964:	61bb      	str	r3, [r7, #24]
 8006966:	e007      	b.n	8006978 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	781a      	ldrb	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	3301      	adds	r3, #1
 8006976:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800697e:	b29b      	uxth	r3, r3
 8006980:	3b01      	subs	r3, #1
 8006982:	b29a      	uxth	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006990:	b29b      	uxth	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1c8      	bne.n	8006928 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2200      	movs	r2, #0
 800699e:	2140      	movs	r1, #64	@ 0x40
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f000 ff8f 	bl	80078c4 <UART_WaitOnFlagUntilTimeout>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d005      	beq.n	80069b8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e006      	b.n	80069c6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	e000      	b.n	80069c6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80069c4:	2302      	movs	r3, #2
  }
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3720      	adds	r7, #32
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b0ba      	sub	sp, #232	@ 0xe8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80069f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80069fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80069fe:	4013      	ands	r3, r2
 8006a00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006a04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d11b      	bne.n	8006a44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a10:	f003 0320 	and.w	r3, r3, #32
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d015      	beq.n	8006a44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d105      	bne.n	8006a30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d009      	beq.n	8006a44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 8300 	beq.w	800703a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	4798      	blx	r3
      }
      return;
 8006a42:	e2fa      	b.n	800703a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 8123 	beq.w	8006c94 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006a4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006a52:	4b8d      	ldr	r3, [pc, #564]	@ (8006c88 <HAL_UART_IRQHandler+0x2b8>)
 8006a54:	4013      	ands	r3, r2
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d106      	bne.n	8006a68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006a5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006a5e:	4b8b      	ldr	r3, [pc, #556]	@ (8006c8c <HAL_UART_IRQHandler+0x2bc>)
 8006a60:	4013      	ands	r3, r2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 8116 	beq.w	8006c94 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d011      	beq.n	8006a98 <HAL_UART_IRQHandler+0xc8>
 8006a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00b      	beq.n	8006a98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2201      	movs	r2, #1
 8006a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a8e:	f043 0201 	orr.w	r2, r3, #1
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d011      	beq.n	8006ac8 <HAL_UART_IRQHandler+0xf8>
 8006aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00b      	beq.n	8006ac8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006abe:	f043 0204 	orr.w	r2, r3, #4
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d011      	beq.n	8006af8 <HAL_UART_IRQHandler+0x128>
 8006ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00b      	beq.n	8006af8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2204      	movs	r2, #4
 8006ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aee:	f043 0202 	orr.w	r2, r3, #2
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006afc:	f003 0308 	and.w	r3, r3, #8
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d017      	beq.n	8006b34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b08:	f003 0320 	and.w	r3, r3, #32
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d105      	bne.n	8006b1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006b10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006b14:	4b5c      	ldr	r3, [pc, #368]	@ (8006c88 <HAL_UART_IRQHandler+0x2b8>)
 8006b16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00b      	beq.n	8006b34 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2208      	movs	r2, #8
 8006b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b2a:	f043 0208 	orr.w	r2, r3, #8
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d012      	beq.n	8006b66 <HAL_UART_IRQHandler+0x196>
 8006b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00c      	beq.n	8006b66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b5c:	f043 0220 	orr.w	r2, r3, #32
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 8266 	beq.w	800703e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d013      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b82:	f003 0320 	and.w	r3, r3, #32
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d105      	bne.n	8006b96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d007      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bba:	2b40      	cmp	r3, #64	@ 0x40
 8006bbc:	d005      	beq.n	8006bca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006bbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bc2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d054      	beq.n	8006c74 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fee7 	bl	800799e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bda:	2b40      	cmp	r3, #64	@ 0x40
 8006bdc:	d146      	bne.n	8006c6c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3308      	adds	r3, #8
 8006be4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006bf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	3308      	adds	r3, #8
 8006c06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1d9      	bne.n	8006bde <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d017      	beq.n	8006c64 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c3a:	4a15      	ldr	r2, [pc, #84]	@ (8006c90 <HAL_UART_IRQHandler+0x2c0>)
 8006c3c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fc fe72 	bl	800392e <HAL_DMA_Abort_IT>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d019      	beq.n	8006c84 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006c5e:	4610      	mov	r0, r2
 8006c60:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c62:	e00f      	b.n	8006c84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f9ff 	bl	8007068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6a:	e00b      	b.n	8006c84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f9fb 	bl	8007068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c72:	e007      	b.n	8006c84 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f9f7 	bl	8007068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006c82:	e1dc      	b.n	800703e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c84:	bf00      	nop
    return;
 8006c86:	e1da      	b.n	800703e <HAL_UART_IRQHandler+0x66e>
 8006c88:	10000001 	.word	0x10000001
 8006c8c:	04000120 	.word	0x04000120
 8006c90:	08007a6b 	.word	0x08007a6b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	f040 8170 	bne.w	8006f7e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ca2:	f003 0310 	and.w	r3, r3, #16
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f000 8169 	beq.w	8006f7e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cb0:	f003 0310 	and.w	r3, r3, #16
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 8162 	beq.w	8006f7e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2210      	movs	r2, #16
 8006cc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ccc:	2b40      	cmp	r3, #64	@ 0x40
 8006cce:	f040 80d8 	bne.w	8006e82 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ce0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 80af 	beq.w	8006e48 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006cf0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	f080 80a7 	bcs.w	8006e48 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d00:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0320 	and.w	r3, r3, #32
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f040 8087 	bne.w	8006e26 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d24:	e853 3f00 	ldrex	r3, [r3]
 8006d28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d46:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d52:	e841 2300 	strex	r3, r2, [r1]
 8006d56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1da      	bne.n	8006d18 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	3308      	adds	r3, #8
 8006d68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d6c:	e853 3f00 	ldrex	r3, [r3]
 8006d70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006d72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d74:	f023 0301 	bic.w	r3, r3, #1
 8006d78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3308      	adds	r3, #8
 8006d82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006d8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006d8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d92:	e841 2300 	strex	r3, r2, [r1]
 8006d96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006d98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1e1      	bne.n	8006d62 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3308      	adds	r3, #8
 8006da4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006dae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006db0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006db4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006dc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006dc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006dca:	e841 2300 	strex	r3, r2, [r1]
 8006dce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006dd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1e3      	bne.n	8006d9e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dec:	e853 3f00 	ldrex	r3, [r3]
 8006df0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006df4:	f023 0310 	bic.w	r3, r3, #16
 8006df8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	461a      	mov	r2, r3
 8006e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e0e:	e841 2300 	strex	r3, r2, [r1]
 8006e12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1e4      	bne.n	8006de4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fc fd2b 	bl	800387c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2202      	movs	r2, #2
 8006e2a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f91b 	bl	800707c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006e46:	e0fc      	b.n	8007042 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e52:	429a      	cmp	r2, r3
 8006e54:	f040 80f5 	bne.w	8007042 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0320 	and.w	r3, r3, #32
 8006e66:	2b20      	cmp	r3, #32
 8006e68:	f040 80eb 	bne.w	8007042 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f8fe 	bl	800707c <HAL_UARTEx_RxEventCallback>
      return;
 8006e80:	e0df      	b.n	8007042 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 80d1 	beq.w	8007046 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006ea4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 80cc 	beq.w	8007046 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb6:	e853 3f00 	ldrex	r3, [r3]
 8006eba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ebe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ec2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ed0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ed2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ed6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ed8:	e841 2300 	strex	r3, r2, [r1]
 8006edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1e4      	bne.n	8006eae <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3308      	adds	r3, #8
 8006eea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eee:	e853 3f00 	ldrex	r3, [r3]
 8006ef2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006efa:	f023 0301 	bic.w	r3, r3, #1
 8006efe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3308      	adds	r3, #8
 8006f08:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006f0c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f14:	e841 2300 	strex	r3, r2, [r1]
 8006f18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1e1      	bne.n	8006ee4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2220      	movs	r2, #32
 8006f24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	e853 3f00 	ldrex	r3, [r3]
 8006f40:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f023 0310 	bic.w	r3, r3, #16
 8006f48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	461a      	mov	r2, r3
 8006f52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f56:	61fb      	str	r3, [r7, #28]
 8006f58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5a:	69b9      	ldr	r1, [r7, #24]
 8006f5c:	69fa      	ldr	r2, [r7, #28]
 8006f5e:	e841 2300 	strex	r3, r2, [r1]
 8006f62:	617b      	str	r3, [r7, #20]
   return(result);
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1e4      	bne.n	8006f34 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f880 	bl	800707c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f7c:	e063      	b.n	8007046 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00e      	beq.n	8006fa8 <HAL_UART_IRQHandler+0x5d8>
 8006f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d008      	beq.n	8006fa8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006f9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fd9f 	bl	8007ae4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fa6:	e051      	b.n	800704c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d014      	beq.n	8006fde <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d105      	bne.n	8006fcc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d008      	beq.n	8006fde <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d03a      	beq.n	800704a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	4798      	blx	r3
    }
    return;
 8006fdc:	e035      	b.n	800704a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d009      	beq.n	8006ffe <HAL_UART_IRQHandler+0x62e>
 8006fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fd49 	bl	8007a8e <UART_EndTransmit_IT>
    return;
 8006ffc:	e026      	b.n	800704c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007002:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d009      	beq.n	800701e <HAL_UART_IRQHandler+0x64e>
 800700a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800700e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fd78 	bl	8007b0c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800701c:	e016      	b.n	800704c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800701e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007022:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d010      	beq.n	800704c <HAL_UART_IRQHandler+0x67c>
 800702a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800702e:	2b00      	cmp	r3, #0
 8007030:	da0c      	bge.n	800704c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fd60 	bl	8007af8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007038:	e008      	b.n	800704c <HAL_UART_IRQHandler+0x67c>
      return;
 800703a:	bf00      	nop
 800703c:	e006      	b.n	800704c <HAL_UART_IRQHandler+0x67c>
    return;
 800703e:	bf00      	nop
 8007040:	e004      	b.n	800704c <HAL_UART_IRQHandler+0x67c>
      return;
 8007042:	bf00      	nop
 8007044:	e002      	b.n	800704c <HAL_UART_IRQHandler+0x67c>
      return;
 8007046:	bf00      	nop
 8007048:	e000      	b.n	800704c <HAL_UART_IRQHandler+0x67c>
    return;
 800704a:	bf00      	nop
  }
}
 800704c:	37e8      	adds	r7, #232	@ 0xe8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop

08007054 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007098:	b08c      	sub	sp, #48	@ 0x30
 800709a:	af00      	add	r7, sp, #0
 800709c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	431a      	orrs	r2, r3
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	431a      	orrs	r2, r3
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	4bab      	ldr	r3, [pc, #684]	@ (8007370 <UART_SetConfig+0x2dc>)
 80070c4:	4013      	ands	r3, r2
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	6812      	ldr	r2, [r2, #0]
 80070ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070cc:	430b      	orrs	r3, r1
 80070ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	68da      	ldr	r2, [r3, #12]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4aa0      	ldr	r2, [pc, #640]	@ (8007374 <UART_SetConfig+0x2e0>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d004      	beq.n	8007100 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070fc:	4313      	orrs	r3, r2
 80070fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800710a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	6812      	ldr	r2, [r2, #0]
 8007112:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007114:	430b      	orrs	r3, r1
 8007116:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711e:	f023 010f 	bic.w	r1, r3, #15
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	430a      	orrs	r2, r1
 800712c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a91      	ldr	r2, [pc, #580]	@ (8007378 <UART_SetConfig+0x2e4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d125      	bne.n	8007184 <UART_SetConfig+0xf0>
 8007138:	4b90      	ldr	r3, [pc, #576]	@ (800737c <UART_SetConfig+0x2e8>)
 800713a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800713e:	f003 0303 	and.w	r3, r3, #3
 8007142:	2b03      	cmp	r3, #3
 8007144:	d81a      	bhi.n	800717c <UART_SetConfig+0xe8>
 8007146:	a201      	add	r2, pc, #4	@ (adr r2, 800714c <UART_SetConfig+0xb8>)
 8007148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714c:	0800715d 	.word	0x0800715d
 8007150:	0800716d 	.word	0x0800716d
 8007154:	08007165 	.word	0x08007165
 8007158:	08007175 	.word	0x08007175
 800715c:	2301      	movs	r3, #1
 800715e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007162:	e0d6      	b.n	8007312 <UART_SetConfig+0x27e>
 8007164:	2302      	movs	r3, #2
 8007166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800716a:	e0d2      	b.n	8007312 <UART_SetConfig+0x27e>
 800716c:	2304      	movs	r3, #4
 800716e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007172:	e0ce      	b.n	8007312 <UART_SetConfig+0x27e>
 8007174:	2308      	movs	r3, #8
 8007176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800717a:	e0ca      	b.n	8007312 <UART_SetConfig+0x27e>
 800717c:	2310      	movs	r3, #16
 800717e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007182:	e0c6      	b.n	8007312 <UART_SetConfig+0x27e>
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a7d      	ldr	r2, [pc, #500]	@ (8007380 <UART_SetConfig+0x2ec>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d138      	bne.n	8007200 <UART_SetConfig+0x16c>
 800718e:	4b7b      	ldr	r3, [pc, #492]	@ (800737c <UART_SetConfig+0x2e8>)
 8007190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007194:	f003 030c 	and.w	r3, r3, #12
 8007198:	2b0c      	cmp	r3, #12
 800719a:	d82d      	bhi.n	80071f8 <UART_SetConfig+0x164>
 800719c:	a201      	add	r2, pc, #4	@ (adr r2, 80071a4 <UART_SetConfig+0x110>)
 800719e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a2:	bf00      	nop
 80071a4:	080071d9 	.word	0x080071d9
 80071a8:	080071f9 	.word	0x080071f9
 80071ac:	080071f9 	.word	0x080071f9
 80071b0:	080071f9 	.word	0x080071f9
 80071b4:	080071e9 	.word	0x080071e9
 80071b8:	080071f9 	.word	0x080071f9
 80071bc:	080071f9 	.word	0x080071f9
 80071c0:	080071f9 	.word	0x080071f9
 80071c4:	080071e1 	.word	0x080071e1
 80071c8:	080071f9 	.word	0x080071f9
 80071cc:	080071f9 	.word	0x080071f9
 80071d0:	080071f9 	.word	0x080071f9
 80071d4:	080071f1 	.word	0x080071f1
 80071d8:	2300      	movs	r3, #0
 80071da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071de:	e098      	b.n	8007312 <UART_SetConfig+0x27e>
 80071e0:	2302      	movs	r3, #2
 80071e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e6:	e094      	b.n	8007312 <UART_SetConfig+0x27e>
 80071e8:	2304      	movs	r3, #4
 80071ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ee:	e090      	b.n	8007312 <UART_SetConfig+0x27e>
 80071f0:	2308      	movs	r3, #8
 80071f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071f6:	e08c      	b.n	8007312 <UART_SetConfig+0x27e>
 80071f8:	2310      	movs	r3, #16
 80071fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071fe:	e088      	b.n	8007312 <UART_SetConfig+0x27e>
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a5f      	ldr	r2, [pc, #380]	@ (8007384 <UART_SetConfig+0x2f0>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d125      	bne.n	8007256 <UART_SetConfig+0x1c2>
 800720a:	4b5c      	ldr	r3, [pc, #368]	@ (800737c <UART_SetConfig+0x2e8>)
 800720c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007210:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007214:	2b30      	cmp	r3, #48	@ 0x30
 8007216:	d016      	beq.n	8007246 <UART_SetConfig+0x1b2>
 8007218:	2b30      	cmp	r3, #48	@ 0x30
 800721a:	d818      	bhi.n	800724e <UART_SetConfig+0x1ba>
 800721c:	2b20      	cmp	r3, #32
 800721e:	d00a      	beq.n	8007236 <UART_SetConfig+0x1a2>
 8007220:	2b20      	cmp	r3, #32
 8007222:	d814      	bhi.n	800724e <UART_SetConfig+0x1ba>
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <UART_SetConfig+0x19a>
 8007228:	2b10      	cmp	r3, #16
 800722a:	d008      	beq.n	800723e <UART_SetConfig+0x1aa>
 800722c:	e00f      	b.n	800724e <UART_SetConfig+0x1ba>
 800722e:	2300      	movs	r3, #0
 8007230:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007234:	e06d      	b.n	8007312 <UART_SetConfig+0x27e>
 8007236:	2302      	movs	r3, #2
 8007238:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800723c:	e069      	b.n	8007312 <UART_SetConfig+0x27e>
 800723e:	2304      	movs	r3, #4
 8007240:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007244:	e065      	b.n	8007312 <UART_SetConfig+0x27e>
 8007246:	2308      	movs	r3, #8
 8007248:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800724c:	e061      	b.n	8007312 <UART_SetConfig+0x27e>
 800724e:	2310      	movs	r3, #16
 8007250:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007254:	e05d      	b.n	8007312 <UART_SetConfig+0x27e>
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a4b      	ldr	r2, [pc, #300]	@ (8007388 <UART_SetConfig+0x2f4>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d125      	bne.n	80072ac <UART_SetConfig+0x218>
 8007260:	4b46      	ldr	r3, [pc, #280]	@ (800737c <UART_SetConfig+0x2e8>)
 8007262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007266:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800726a:	2bc0      	cmp	r3, #192	@ 0xc0
 800726c:	d016      	beq.n	800729c <UART_SetConfig+0x208>
 800726e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007270:	d818      	bhi.n	80072a4 <UART_SetConfig+0x210>
 8007272:	2b80      	cmp	r3, #128	@ 0x80
 8007274:	d00a      	beq.n	800728c <UART_SetConfig+0x1f8>
 8007276:	2b80      	cmp	r3, #128	@ 0x80
 8007278:	d814      	bhi.n	80072a4 <UART_SetConfig+0x210>
 800727a:	2b00      	cmp	r3, #0
 800727c:	d002      	beq.n	8007284 <UART_SetConfig+0x1f0>
 800727e:	2b40      	cmp	r3, #64	@ 0x40
 8007280:	d008      	beq.n	8007294 <UART_SetConfig+0x200>
 8007282:	e00f      	b.n	80072a4 <UART_SetConfig+0x210>
 8007284:	2300      	movs	r3, #0
 8007286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800728a:	e042      	b.n	8007312 <UART_SetConfig+0x27e>
 800728c:	2302      	movs	r3, #2
 800728e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007292:	e03e      	b.n	8007312 <UART_SetConfig+0x27e>
 8007294:	2304      	movs	r3, #4
 8007296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800729a:	e03a      	b.n	8007312 <UART_SetConfig+0x27e>
 800729c:	2308      	movs	r3, #8
 800729e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072a2:	e036      	b.n	8007312 <UART_SetConfig+0x27e>
 80072a4:	2310      	movs	r3, #16
 80072a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072aa:	e032      	b.n	8007312 <UART_SetConfig+0x27e>
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a30      	ldr	r2, [pc, #192]	@ (8007374 <UART_SetConfig+0x2e0>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d12a      	bne.n	800730c <UART_SetConfig+0x278>
 80072b6:	4b31      	ldr	r3, [pc, #196]	@ (800737c <UART_SetConfig+0x2e8>)
 80072b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80072c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072c4:	d01a      	beq.n	80072fc <UART_SetConfig+0x268>
 80072c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072ca:	d81b      	bhi.n	8007304 <UART_SetConfig+0x270>
 80072cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072d0:	d00c      	beq.n	80072ec <UART_SetConfig+0x258>
 80072d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072d6:	d815      	bhi.n	8007304 <UART_SetConfig+0x270>
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <UART_SetConfig+0x250>
 80072dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072e0:	d008      	beq.n	80072f4 <UART_SetConfig+0x260>
 80072e2:	e00f      	b.n	8007304 <UART_SetConfig+0x270>
 80072e4:	2300      	movs	r3, #0
 80072e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ea:	e012      	b.n	8007312 <UART_SetConfig+0x27e>
 80072ec:	2302      	movs	r3, #2
 80072ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072f2:	e00e      	b.n	8007312 <UART_SetConfig+0x27e>
 80072f4:	2304      	movs	r3, #4
 80072f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072fa:	e00a      	b.n	8007312 <UART_SetConfig+0x27e>
 80072fc:	2308      	movs	r3, #8
 80072fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007302:	e006      	b.n	8007312 <UART_SetConfig+0x27e>
 8007304:	2310      	movs	r3, #16
 8007306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800730a:	e002      	b.n	8007312 <UART_SetConfig+0x27e>
 800730c:	2310      	movs	r3, #16
 800730e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a17      	ldr	r2, [pc, #92]	@ (8007374 <UART_SetConfig+0x2e0>)
 8007318:	4293      	cmp	r3, r2
 800731a:	f040 80a8 	bne.w	800746e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800731e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007322:	2b08      	cmp	r3, #8
 8007324:	d834      	bhi.n	8007390 <UART_SetConfig+0x2fc>
 8007326:	a201      	add	r2, pc, #4	@ (adr r2, 800732c <UART_SetConfig+0x298>)
 8007328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732c:	08007351 	.word	0x08007351
 8007330:	08007391 	.word	0x08007391
 8007334:	08007359 	.word	0x08007359
 8007338:	08007391 	.word	0x08007391
 800733c:	0800735f 	.word	0x0800735f
 8007340:	08007391 	.word	0x08007391
 8007344:	08007391 	.word	0x08007391
 8007348:	08007391 	.word	0x08007391
 800734c:	08007367 	.word	0x08007367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007350:	f7fd fba8 	bl	8004aa4 <HAL_RCC_GetPCLK1Freq>
 8007354:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007356:	e021      	b.n	800739c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007358:	4b0c      	ldr	r3, [pc, #48]	@ (800738c <UART_SetConfig+0x2f8>)
 800735a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800735c:	e01e      	b.n	800739c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800735e:	f7fd fb35 	bl	80049cc <HAL_RCC_GetSysClockFreq>
 8007362:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007364:	e01a      	b.n	800739c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007366:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800736a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800736c:	e016      	b.n	800739c <UART_SetConfig+0x308>
 800736e:	bf00      	nop
 8007370:	cfff69f3 	.word	0xcfff69f3
 8007374:	40008000 	.word	0x40008000
 8007378:	40013800 	.word	0x40013800
 800737c:	40021000 	.word	0x40021000
 8007380:	40004400 	.word	0x40004400
 8007384:	40004800 	.word	0x40004800
 8007388:	40004c00 	.word	0x40004c00
 800738c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007390:	2300      	movs	r3, #0
 8007392:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800739a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800739c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 812a 	beq.w	80075f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a8:	4a9e      	ldr	r2, [pc, #632]	@ (8007624 <UART_SetConfig+0x590>)
 80073aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073ae:	461a      	mov	r2, r3
 80073b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80073b6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	4613      	mov	r3, r2
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	4413      	add	r3, r2
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d305      	bcc.n	80073d4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073ce:	69ba      	ldr	r2, [r7, #24]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d903      	bls.n	80073dc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80073da:	e10d      	b.n	80075f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073de:	2200      	movs	r2, #0
 80073e0:	60bb      	str	r3, [r7, #8]
 80073e2:	60fa      	str	r2, [r7, #12]
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e8:	4a8e      	ldr	r2, [pc, #568]	@ (8007624 <UART_SetConfig+0x590>)
 80073ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	2200      	movs	r2, #0
 80073f2:	603b      	str	r3, [r7, #0]
 80073f4:	607a      	str	r2, [r7, #4]
 80073f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073fe:	f7f9 fc4b 	bl	8000c98 <__aeabi_uldivmod>
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	4610      	mov	r0, r2
 8007408:	4619      	mov	r1, r3
 800740a:	f04f 0200 	mov.w	r2, #0
 800740e:	f04f 0300 	mov.w	r3, #0
 8007412:	020b      	lsls	r3, r1, #8
 8007414:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007418:	0202      	lsls	r2, r0, #8
 800741a:	6979      	ldr	r1, [r7, #20]
 800741c:	6849      	ldr	r1, [r1, #4]
 800741e:	0849      	lsrs	r1, r1, #1
 8007420:	2000      	movs	r0, #0
 8007422:	460c      	mov	r4, r1
 8007424:	4605      	mov	r5, r0
 8007426:	eb12 0804 	adds.w	r8, r2, r4
 800742a:	eb43 0905 	adc.w	r9, r3, r5
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	469a      	mov	sl, r3
 8007436:	4693      	mov	fp, r2
 8007438:	4652      	mov	r2, sl
 800743a:	465b      	mov	r3, fp
 800743c:	4640      	mov	r0, r8
 800743e:	4649      	mov	r1, r9
 8007440:	f7f9 fc2a 	bl	8000c98 <__aeabi_uldivmod>
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	4613      	mov	r3, r2
 800744a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007452:	d308      	bcc.n	8007466 <UART_SetConfig+0x3d2>
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800745a:	d204      	bcs.n	8007466 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6a3a      	ldr	r2, [r7, #32]
 8007462:	60da      	str	r2, [r3, #12]
 8007464:	e0c8      	b.n	80075f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800746c:	e0c4      	b.n	80075f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007476:	d167      	bne.n	8007548 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007478:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800747c:	2b08      	cmp	r3, #8
 800747e:	d828      	bhi.n	80074d2 <UART_SetConfig+0x43e>
 8007480:	a201      	add	r2, pc, #4	@ (adr r2, 8007488 <UART_SetConfig+0x3f4>)
 8007482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007486:	bf00      	nop
 8007488:	080074ad 	.word	0x080074ad
 800748c:	080074b5 	.word	0x080074b5
 8007490:	080074bd 	.word	0x080074bd
 8007494:	080074d3 	.word	0x080074d3
 8007498:	080074c3 	.word	0x080074c3
 800749c:	080074d3 	.word	0x080074d3
 80074a0:	080074d3 	.word	0x080074d3
 80074a4:	080074d3 	.word	0x080074d3
 80074a8:	080074cb 	.word	0x080074cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074ac:	f7fd fafa 	bl	8004aa4 <HAL_RCC_GetPCLK1Freq>
 80074b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074b2:	e014      	b.n	80074de <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074b4:	f7fd fb0c 	bl	8004ad0 <HAL_RCC_GetPCLK2Freq>
 80074b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074ba:	e010      	b.n	80074de <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074bc:	4b5a      	ldr	r3, [pc, #360]	@ (8007628 <UART_SetConfig+0x594>)
 80074be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074c0:	e00d      	b.n	80074de <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074c2:	f7fd fa83 	bl	80049cc <HAL_RCC_GetSysClockFreq>
 80074c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074c8:	e009      	b.n	80074de <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074d0:	e005      	b.n	80074de <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80074dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 8089 	beq.w	80075f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ea:	4a4e      	ldr	r2, [pc, #312]	@ (8007624 <UART_SetConfig+0x590>)
 80074ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074f0:	461a      	mov	r2, r3
 80074f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80074f8:	005a      	lsls	r2, r3, #1
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	085b      	lsrs	r3, r3, #1
 8007500:	441a      	add	r2, r3
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	fbb2 f3f3 	udiv	r3, r2, r3
 800750a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	2b0f      	cmp	r3, #15
 8007510:	d916      	bls.n	8007540 <UART_SetConfig+0x4ac>
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007518:	d212      	bcs.n	8007540 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	b29b      	uxth	r3, r3
 800751e:	f023 030f 	bic.w	r3, r3, #15
 8007522:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	085b      	lsrs	r3, r3, #1
 8007528:	b29b      	uxth	r3, r3
 800752a:	f003 0307 	and.w	r3, r3, #7
 800752e:	b29a      	uxth	r2, r3
 8007530:	8bfb      	ldrh	r3, [r7, #30]
 8007532:	4313      	orrs	r3, r2
 8007534:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	8bfa      	ldrh	r2, [r7, #30]
 800753c:	60da      	str	r2, [r3, #12]
 800753e:	e05b      	b.n	80075f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007546:	e057      	b.n	80075f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007548:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800754c:	2b08      	cmp	r3, #8
 800754e:	d828      	bhi.n	80075a2 <UART_SetConfig+0x50e>
 8007550:	a201      	add	r2, pc, #4	@ (adr r2, 8007558 <UART_SetConfig+0x4c4>)
 8007552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007556:	bf00      	nop
 8007558:	0800757d 	.word	0x0800757d
 800755c:	08007585 	.word	0x08007585
 8007560:	0800758d 	.word	0x0800758d
 8007564:	080075a3 	.word	0x080075a3
 8007568:	08007593 	.word	0x08007593
 800756c:	080075a3 	.word	0x080075a3
 8007570:	080075a3 	.word	0x080075a3
 8007574:	080075a3 	.word	0x080075a3
 8007578:	0800759b 	.word	0x0800759b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800757c:	f7fd fa92 	bl	8004aa4 <HAL_RCC_GetPCLK1Freq>
 8007580:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007582:	e014      	b.n	80075ae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007584:	f7fd faa4 	bl	8004ad0 <HAL_RCC_GetPCLK2Freq>
 8007588:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800758a:	e010      	b.n	80075ae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800758c:	4b26      	ldr	r3, [pc, #152]	@ (8007628 <UART_SetConfig+0x594>)
 800758e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007590:	e00d      	b.n	80075ae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007592:	f7fd fa1b 	bl	80049cc <HAL_RCC_GetSysClockFreq>
 8007596:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007598:	e009      	b.n	80075ae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800759a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800759e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075a0:	e005      	b.n	80075ae <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80075ac:	bf00      	nop
    }

    if (pclk != 0U)
 80075ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d021      	beq.n	80075f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b8:	4a1a      	ldr	r2, [pc, #104]	@ (8007624 <UART_SetConfig+0x590>)
 80075ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075be:	461a      	mov	r2, r3
 80075c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	085b      	lsrs	r3, r3, #1
 80075cc:	441a      	add	r2, r3
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075d8:	6a3b      	ldr	r3, [r7, #32]
 80075da:	2b0f      	cmp	r3, #15
 80075dc:	d909      	bls.n	80075f2 <UART_SetConfig+0x55e>
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075e4:	d205      	bcs.n	80075f2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	60da      	str	r2, [r3, #12]
 80075f0:	e002      	b.n	80075f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	2201      	movs	r2, #1
 8007604:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	2200      	movs	r2, #0
 800760c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	2200      	movs	r2, #0
 8007612:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007614:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007618:	4618      	mov	r0, r3
 800761a:	3730      	adds	r7, #48	@ 0x30
 800761c:	46bd      	mov	sp, r7
 800761e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007622:	bf00      	nop
 8007624:	0800a76c 	.word	0x0800a76c
 8007628:	00f42400 	.word	0x00f42400

0800762c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007638:	f003 0308 	and.w	r3, r3, #8
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00a      	beq.n	8007656 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	430a      	orrs	r2, r1
 8007654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00a      	beq.n	8007678 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	430a      	orrs	r2, r1
 8007676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00a      	beq.n	800769a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800769e:	f003 0304 	and.w	r3, r3, #4
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00a      	beq.n	80076bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	430a      	orrs	r2, r1
 80076ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c0:	f003 0310 	and.w	r3, r3, #16
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00a      	beq.n	80076de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	430a      	orrs	r2, r1
 80076dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e2:	f003 0320 	and.w	r3, r3, #32
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00a      	beq.n	8007700 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	430a      	orrs	r2, r1
 80076fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007708:	2b00      	cmp	r3, #0
 800770a:	d01a      	beq.n	8007742 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007726:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800772a:	d10a      	bne.n	8007742 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	430a      	orrs	r2, r1
 8007740:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00a      	beq.n	8007764 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	430a      	orrs	r2, r1
 8007762:	605a      	str	r2, [r3, #4]
  }
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b098      	sub	sp, #96	@ 0x60
 8007774:	af02      	add	r7, sp, #8
 8007776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007780:	f7fa ff5a 	bl	8002638 <HAL_GetTick>
 8007784:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 0308 	and.w	r3, r3, #8
 8007790:	2b08      	cmp	r3, #8
 8007792:	d12f      	bne.n	80077f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007794:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800779c:	2200      	movs	r2, #0
 800779e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f88e 	bl	80078c4 <UART_WaitOnFlagUntilTimeout>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d022      	beq.n	80077f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	461a      	mov	r2, r3
 80077ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80077ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077d4:	e841 2300 	strex	r3, r2, [r1]
 80077d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e6      	bne.n	80077ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2220      	movs	r2, #32
 80077e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e063      	b.n	80078bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0304 	and.w	r3, r3, #4
 80077fe:	2b04      	cmp	r3, #4
 8007800:	d149      	bne.n	8007896 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007802:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800780a:	2200      	movs	r2, #0
 800780c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f857 	bl	80078c4 <UART_WaitOnFlagUntilTimeout>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d03c      	beq.n	8007896 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	623b      	str	r3, [r7, #32]
   return(result);
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007830:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800783a:	633b      	str	r3, [r7, #48]	@ 0x30
 800783c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e6      	bne.n	800781c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3308      	adds	r3, #8
 8007854:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	e853 3f00 	ldrex	r3, [r3]
 800785c:	60fb      	str	r3, [r7, #12]
   return(result);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f023 0301 	bic.w	r3, r3, #1
 8007864:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3308      	adds	r3, #8
 800786c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800786e:	61fa      	str	r2, [r7, #28]
 8007870:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007872:	69b9      	ldr	r1, [r7, #24]
 8007874:	69fa      	ldr	r2, [r7, #28]
 8007876:	e841 2300 	strex	r3, r2, [r1]
 800787a:	617b      	str	r3, [r7, #20]
   return(result);
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1e5      	bne.n	800784e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2220      	movs	r2, #32
 8007886:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e012      	b.n	80078bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2220      	movs	r2, #32
 800789a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2220      	movs	r2, #32
 80078a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3758      	adds	r7, #88	@ 0x58
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	603b      	str	r3, [r7, #0]
 80078d0:	4613      	mov	r3, r2
 80078d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078d4:	e04f      	b.n	8007976 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078dc:	d04b      	beq.n	8007976 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078de:	f7fa feab 	bl	8002638 <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d302      	bcc.n	80078f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d101      	bne.n	80078f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e04e      	b.n	8007996 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0304 	and.w	r3, r3, #4
 8007902:	2b00      	cmp	r3, #0
 8007904:	d037      	beq.n	8007976 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	2b80      	cmp	r3, #128	@ 0x80
 800790a:	d034      	beq.n	8007976 <UART_WaitOnFlagUntilTimeout+0xb2>
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2b40      	cmp	r3, #64	@ 0x40
 8007910:	d031      	beq.n	8007976 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	69db      	ldr	r3, [r3, #28]
 8007918:	f003 0308 	and.w	r3, r3, #8
 800791c:	2b08      	cmp	r3, #8
 800791e:	d110      	bne.n	8007942 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2208      	movs	r2, #8
 8007926:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f000 f838 	bl	800799e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2208      	movs	r2, #8
 8007932:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e029      	b.n	8007996 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	69db      	ldr	r3, [r3, #28]
 8007948:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800794c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007950:	d111      	bne.n	8007976 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800795a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f000 f81e 	bl	800799e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2220      	movs	r2, #32
 8007966:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e00f      	b.n	8007996 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	69da      	ldr	r2, [r3, #28]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	4013      	ands	r3, r2
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	429a      	cmp	r2, r3
 8007984:	bf0c      	ite	eq
 8007986:	2301      	moveq	r3, #1
 8007988:	2300      	movne	r3, #0
 800798a:	b2db      	uxtb	r3, r3
 800798c:	461a      	mov	r2, r3
 800798e:	79fb      	ldrb	r3, [r7, #7]
 8007990:	429a      	cmp	r2, r3
 8007992:	d0a0      	beq.n	80078d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800799e:	b480      	push	{r7}
 80079a0:	b095      	sub	sp, #84	@ 0x54
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ae:	e853 3f00 	ldrex	r3, [r3]
 80079b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	461a      	mov	r2, r3
 80079c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80079c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079cc:	e841 2300 	strex	r3, r2, [r1]
 80079d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e6      	bne.n	80079a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3308      	adds	r3, #8
 80079de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079ee:	f023 0301 	bic.w	r3, r3, #1
 80079f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	3308      	adds	r3, #8
 80079fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a04:	e841 2300 	strex	r3, r2, [r1]
 8007a08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1e3      	bne.n	80079d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d118      	bne.n	8007a4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	f023 0310 	bic.w	r3, r3, #16
 8007a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	461a      	mov	r2, r3
 8007a34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a36:	61bb      	str	r3, [r7, #24]
 8007a38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3a:	6979      	ldr	r1, [r7, #20]
 8007a3c:	69ba      	ldr	r2, [r7, #24]
 8007a3e:	e841 2300 	strex	r3, r2, [r1]
 8007a42:	613b      	str	r3, [r7, #16]
   return(result);
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e6      	bne.n	8007a18 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007a5e:	bf00      	nop
 8007a60:	3754      	adds	r7, #84	@ 0x54
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b084      	sub	sp, #16
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f7ff faf1 	bl	8007068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a86:	bf00      	nop
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b088      	sub	sp, #32
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	e853 3f00 	ldrex	r3, [r3]
 8007aa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007aaa:	61fb      	str	r3, [r7, #28]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	61bb      	str	r3, [r7, #24]
 8007ab6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab8:	6979      	ldr	r1, [r7, #20]
 8007aba:	69ba      	ldr	r2, [r7, #24]
 8007abc:	e841 2300 	strex	r3, r2, [r1]
 8007ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e6      	bne.n	8007a96 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2220      	movs	r2, #32
 8007acc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7ff fabc 	bl	8007054 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007adc:	bf00      	nop
 8007ade:	3720      	adds	r7, #32
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d101      	bne.n	8007b36 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b32:	2302      	movs	r3, #2
 8007b34:	e027      	b.n	8007b86 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2224      	movs	r2, #36	@ 0x24
 8007b42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f022 0201 	bic.w	r2, r2, #1
 8007b5c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007b64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2220      	movs	r2, #32
 8007b78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b084      	sub	sp, #16
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d101      	bne.n	8007baa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	e02d      	b.n	8007c06 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2224      	movs	r2, #36	@ 0x24
 8007bb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 0201 	bic.w	r2, r2, #1
 8007bd0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f850 	bl	8007c8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b084      	sub	sp, #16
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d101      	bne.n	8007c26 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c22:	2302      	movs	r3, #2
 8007c24:	e02d      	b.n	8007c82 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2224      	movs	r2, #36	@ 0x24
 8007c32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 0201 	bic.w	r2, r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	683a      	ldr	r2, [r7, #0]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f812 	bl	8007c8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2220      	movs	r2, #32
 8007c74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
	...

08007c8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d108      	bne.n	8007cae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007cac:	e031      	b.n	8007d12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007cae:	2308      	movs	r3, #8
 8007cb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007cb2:	2308      	movs	r3, #8
 8007cb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	0e5b      	lsrs	r3, r3, #25
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	f003 0307 	and.w	r3, r3, #7
 8007cc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	0f5b      	lsrs	r3, r3, #29
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	f003 0307 	and.w	r3, r3, #7
 8007cd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cd6:	7bbb      	ldrb	r3, [r7, #14]
 8007cd8:	7b3a      	ldrb	r2, [r7, #12]
 8007cda:	4911      	ldr	r1, [pc, #68]	@ (8007d20 <UARTEx_SetNbDataToProcess+0x94>)
 8007cdc:	5c8a      	ldrb	r2, [r1, r2]
 8007cde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ce2:	7b3a      	ldrb	r2, [r7, #12]
 8007ce4:	490f      	ldr	r1, [pc, #60]	@ (8007d24 <UARTEx_SetNbDataToProcess+0x98>)
 8007ce6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ce8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	7b7a      	ldrb	r2, [r7, #13]
 8007cf8:	4909      	ldr	r1, [pc, #36]	@ (8007d20 <UARTEx_SetNbDataToProcess+0x94>)
 8007cfa:	5c8a      	ldrb	r2, [r1, r2]
 8007cfc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d00:	7b7a      	ldrb	r2, [r7, #13]
 8007d02:	4908      	ldr	r1, [pc, #32]	@ (8007d24 <UARTEx_SetNbDataToProcess+0x98>)
 8007d04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d06:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007d12:	bf00      	nop
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	0800a784 	.word	0x0800a784
 8007d24:	0800a78c 	.word	0x0800a78c

08007d28 <malloc>:
 8007d28:	4b02      	ldr	r3, [pc, #8]	@ (8007d34 <malloc+0xc>)
 8007d2a:	4601      	mov	r1, r0
 8007d2c:	6818      	ldr	r0, [r3, #0]
 8007d2e:	f000 b825 	b.w	8007d7c <_malloc_r>
 8007d32:	bf00      	nop
 8007d34:	20000018 	.word	0x20000018

08007d38 <sbrk_aligned>:
 8007d38:	b570      	push	{r4, r5, r6, lr}
 8007d3a:	4e0f      	ldr	r6, [pc, #60]	@ (8007d78 <sbrk_aligned+0x40>)
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	6831      	ldr	r1, [r6, #0]
 8007d40:	4605      	mov	r5, r0
 8007d42:	b911      	cbnz	r1, 8007d4a <sbrk_aligned+0x12>
 8007d44:	f000 ff36 	bl	8008bb4 <_sbrk_r>
 8007d48:	6030      	str	r0, [r6, #0]
 8007d4a:	4621      	mov	r1, r4
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	f000 ff31 	bl	8008bb4 <_sbrk_r>
 8007d52:	1c43      	adds	r3, r0, #1
 8007d54:	d103      	bne.n	8007d5e <sbrk_aligned+0x26>
 8007d56:	f04f 34ff 	mov.w	r4, #4294967295
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	bd70      	pop	{r4, r5, r6, pc}
 8007d5e:	1cc4      	adds	r4, r0, #3
 8007d60:	f024 0403 	bic.w	r4, r4, #3
 8007d64:	42a0      	cmp	r0, r4
 8007d66:	d0f8      	beq.n	8007d5a <sbrk_aligned+0x22>
 8007d68:	1a21      	subs	r1, r4, r0
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	f000 ff22 	bl	8008bb4 <_sbrk_r>
 8007d70:	3001      	adds	r0, #1
 8007d72:	d1f2      	bne.n	8007d5a <sbrk_aligned+0x22>
 8007d74:	e7ef      	b.n	8007d56 <sbrk_aligned+0x1e>
 8007d76:	bf00      	nop
 8007d78:	200005c8 	.word	0x200005c8

08007d7c <_malloc_r>:
 8007d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d80:	1ccd      	adds	r5, r1, #3
 8007d82:	f025 0503 	bic.w	r5, r5, #3
 8007d86:	3508      	adds	r5, #8
 8007d88:	2d0c      	cmp	r5, #12
 8007d8a:	bf38      	it	cc
 8007d8c:	250c      	movcc	r5, #12
 8007d8e:	2d00      	cmp	r5, #0
 8007d90:	4606      	mov	r6, r0
 8007d92:	db01      	blt.n	8007d98 <_malloc_r+0x1c>
 8007d94:	42a9      	cmp	r1, r5
 8007d96:	d904      	bls.n	8007da2 <_malloc_r+0x26>
 8007d98:	230c      	movs	r3, #12
 8007d9a:	6033      	str	r3, [r6, #0]
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007da2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e78 <_malloc_r+0xfc>
 8007da6:	f000 f869 	bl	8007e7c <__malloc_lock>
 8007daa:	f8d8 3000 	ldr.w	r3, [r8]
 8007dae:	461c      	mov	r4, r3
 8007db0:	bb44      	cbnz	r4, 8007e04 <_malloc_r+0x88>
 8007db2:	4629      	mov	r1, r5
 8007db4:	4630      	mov	r0, r6
 8007db6:	f7ff ffbf 	bl	8007d38 <sbrk_aligned>
 8007dba:	1c43      	adds	r3, r0, #1
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	d158      	bne.n	8007e72 <_malloc_r+0xf6>
 8007dc0:	f8d8 4000 	ldr.w	r4, [r8]
 8007dc4:	4627      	mov	r7, r4
 8007dc6:	2f00      	cmp	r7, #0
 8007dc8:	d143      	bne.n	8007e52 <_malloc_r+0xd6>
 8007dca:	2c00      	cmp	r4, #0
 8007dcc:	d04b      	beq.n	8007e66 <_malloc_r+0xea>
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	4639      	mov	r1, r7
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	eb04 0903 	add.w	r9, r4, r3
 8007dd8:	f000 feec 	bl	8008bb4 <_sbrk_r>
 8007ddc:	4581      	cmp	r9, r0
 8007dde:	d142      	bne.n	8007e66 <_malloc_r+0xea>
 8007de0:	6821      	ldr	r1, [r4, #0]
 8007de2:	1a6d      	subs	r5, r5, r1
 8007de4:	4629      	mov	r1, r5
 8007de6:	4630      	mov	r0, r6
 8007de8:	f7ff ffa6 	bl	8007d38 <sbrk_aligned>
 8007dec:	3001      	adds	r0, #1
 8007dee:	d03a      	beq.n	8007e66 <_malloc_r+0xea>
 8007df0:	6823      	ldr	r3, [r4, #0]
 8007df2:	442b      	add	r3, r5
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	f8d8 3000 	ldr.w	r3, [r8]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	bb62      	cbnz	r2, 8007e58 <_malloc_r+0xdc>
 8007dfe:	f8c8 7000 	str.w	r7, [r8]
 8007e02:	e00f      	b.n	8007e24 <_malloc_r+0xa8>
 8007e04:	6822      	ldr	r2, [r4, #0]
 8007e06:	1b52      	subs	r2, r2, r5
 8007e08:	d420      	bmi.n	8007e4c <_malloc_r+0xd0>
 8007e0a:	2a0b      	cmp	r2, #11
 8007e0c:	d917      	bls.n	8007e3e <_malloc_r+0xc2>
 8007e0e:	1961      	adds	r1, r4, r5
 8007e10:	42a3      	cmp	r3, r4
 8007e12:	6025      	str	r5, [r4, #0]
 8007e14:	bf18      	it	ne
 8007e16:	6059      	strne	r1, [r3, #4]
 8007e18:	6863      	ldr	r3, [r4, #4]
 8007e1a:	bf08      	it	eq
 8007e1c:	f8c8 1000 	streq.w	r1, [r8]
 8007e20:	5162      	str	r2, [r4, r5]
 8007e22:	604b      	str	r3, [r1, #4]
 8007e24:	4630      	mov	r0, r6
 8007e26:	f000 f82f 	bl	8007e88 <__malloc_unlock>
 8007e2a:	f104 000b 	add.w	r0, r4, #11
 8007e2e:	1d23      	adds	r3, r4, #4
 8007e30:	f020 0007 	bic.w	r0, r0, #7
 8007e34:	1ac2      	subs	r2, r0, r3
 8007e36:	bf1c      	itt	ne
 8007e38:	1a1b      	subne	r3, r3, r0
 8007e3a:	50a3      	strne	r3, [r4, r2]
 8007e3c:	e7af      	b.n	8007d9e <_malloc_r+0x22>
 8007e3e:	6862      	ldr	r2, [r4, #4]
 8007e40:	42a3      	cmp	r3, r4
 8007e42:	bf0c      	ite	eq
 8007e44:	f8c8 2000 	streq.w	r2, [r8]
 8007e48:	605a      	strne	r2, [r3, #4]
 8007e4a:	e7eb      	b.n	8007e24 <_malloc_r+0xa8>
 8007e4c:	4623      	mov	r3, r4
 8007e4e:	6864      	ldr	r4, [r4, #4]
 8007e50:	e7ae      	b.n	8007db0 <_malloc_r+0x34>
 8007e52:	463c      	mov	r4, r7
 8007e54:	687f      	ldr	r7, [r7, #4]
 8007e56:	e7b6      	b.n	8007dc6 <_malloc_r+0x4a>
 8007e58:	461a      	mov	r2, r3
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	42a3      	cmp	r3, r4
 8007e5e:	d1fb      	bne.n	8007e58 <_malloc_r+0xdc>
 8007e60:	2300      	movs	r3, #0
 8007e62:	6053      	str	r3, [r2, #4]
 8007e64:	e7de      	b.n	8007e24 <_malloc_r+0xa8>
 8007e66:	230c      	movs	r3, #12
 8007e68:	6033      	str	r3, [r6, #0]
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	f000 f80c 	bl	8007e88 <__malloc_unlock>
 8007e70:	e794      	b.n	8007d9c <_malloc_r+0x20>
 8007e72:	6005      	str	r5, [r0, #0]
 8007e74:	e7d6      	b.n	8007e24 <_malloc_r+0xa8>
 8007e76:	bf00      	nop
 8007e78:	200005cc 	.word	0x200005cc

08007e7c <__malloc_lock>:
 8007e7c:	4801      	ldr	r0, [pc, #4]	@ (8007e84 <__malloc_lock+0x8>)
 8007e7e:	f000 bee6 	b.w	8008c4e <__retarget_lock_acquire_recursive>
 8007e82:	bf00      	nop
 8007e84:	20000710 	.word	0x20000710

08007e88 <__malloc_unlock>:
 8007e88:	4801      	ldr	r0, [pc, #4]	@ (8007e90 <__malloc_unlock+0x8>)
 8007e8a:	f000 bee1 	b.w	8008c50 <__retarget_lock_release_recursive>
 8007e8e:	bf00      	nop
 8007e90:	20000710 	.word	0x20000710

08007e94 <__cvt>:
 8007e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e98:	ec57 6b10 	vmov	r6, r7, d0
 8007e9c:	2f00      	cmp	r7, #0
 8007e9e:	460c      	mov	r4, r1
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	463b      	mov	r3, r7
 8007ea4:	bfbb      	ittet	lt
 8007ea6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007eaa:	461f      	movlt	r7, r3
 8007eac:	2300      	movge	r3, #0
 8007eae:	232d      	movlt	r3, #45	@ 0x2d
 8007eb0:	700b      	strb	r3, [r1, #0]
 8007eb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007eb4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007eb8:	4691      	mov	r9, r2
 8007eba:	f023 0820 	bic.w	r8, r3, #32
 8007ebe:	bfbc      	itt	lt
 8007ec0:	4632      	movlt	r2, r6
 8007ec2:	4616      	movlt	r6, r2
 8007ec4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ec8:	d005      	beq.n	8007ed6 <__cvt+0x42>
 8007eca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007ece:	d100      	bne.n	8007ed2 <__cvt+0x3e>
 8007ed0:	3401      	adds	r4, #1
 8007ed2:	2102      	movs	r1, #2
 8007ed4:	e000      	b.n	8007ed8 <__cvt+0x44>
 8007ed6:	2103      	movs	r1, #3
 8007ed8:	ab03      	add	r3, sp, #12
 8007eda:	9301      	str	r3, [sp, #4]
 8007edc:	ab02      	add	r3, sp, #8
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	ec47 6b10 	vmov	d0, r6, r7
 8007ee4:	4653      	mov	r3, sl
 8007ee6:	4622      	mov	r2, r4
 8007ee8:	f000 ff3e 	bl	8008d68 <_dtoa_r>
 8007eec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007ef0:	4605      	mov	r5, r0
 8007ef2:	d119      	bne.n	8007f28 <__cvt+0x94>
 8007ef4:	f019 0f01 	tst.w	r9, #1
 8007ef8:	d00e      	beq.n	8007f18 <__cvt+0x84>
 8007efa:	eb00 0904 	add.w	r9, r0, r4
 8007efe:	2200      	movs	r2, #0
 8007f00:	2300      	movs	r3, #0
 8007f02:	4630      	mov	r0, r6
 8007f04:	4639      	mov	r1, r7
 8007f06:	f7f8 fe07 	bl	8000b18 <__aeabi_dcmpeq>
 8007f0a:	b108      	cbz	r0, 8007f10 <__cvt+0x7c>
 8007f0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f10:	2230      	movs	r2, #48	@ 0x30
 8007f12:	9b03      	ldr	r3, [sp, #12]
 8007f14:	454b      	cmp	r3, r9
 8007f16:	d31e      	bcc.n	8007f56 <__cvt+0xc2>
 8007f18:	9b03      	ldr	r3, [sp, #12]
 8007f1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f1c:	1b5b      	subs	r3, r3, r5
 8007f1e:	4628      	mov	r0, r5
 8007f20:	6013      	str	r3, [r2, #0]
 8007f22:	b004      	add	sp, #16
 8007f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007f2c:	eb00 0904 	add.w	r9, r0, r4
 8007f30:	d1e5      	bne.n	8007efe <__cvt+0x6a>
 8007f32:	7803      	ldrb	r3, [r0, #0]
 8007f34:	2b30      	cmp	r3, #48	@ 0x30
 8007f36:	d10a      	bne.n	8007f4e <__cvt+0xba>
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	4639      	mov	r1, r7
 8007f40:	f7f8 fdea 	bl	8000b18 <__aeabi_dcmpeq>
 8007f44:	b918      	cbnz	r0, 8007f4e <__cvt+0xba>
 8007f46:	f1c4 0401 	rsb	r4, r4, #1
 8007f4a:	f8ca 4000 	str.w	r4, [sl]
 8007f4e:	f8da 3000 	ldr.w	r3, [sl]
 8007f52:	4499      	add	r9, r3
 8007f54:	e7d3      	b.n	8007efe <__cvt+0x6a>
 8007f56:	1c59      	adds	r1, r3, #1
 8007f58:	9103      	str	r1, [sp, #12]
 8007f5a:	701a      	strb	r2, [r3, #0]
 8007f5c:	e7d9      	b.n	8007f12 <__cvt+0x7e>

08007f5e <__exponent>:
 8007f5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f60:	2900      	cmp	r1, #0
 8007f62:	bfba      	itte	lt
 8007f64:	4249      	neglt	r1, r1
 8007f66:	232d      	movlt	r3, #45	@ 0x2d
 8007f68:	232b      	movge	r3, #43	@ 0x2b
 8007f6a:	2909      	cmp	r1, #9
 8007f6c:	7002      	strb	r2, [r0, #0]
 8007f6e:	7043      	strb	r3, [r0, #1]
 8007f70:	dd29      	ble.n	8007fc6 <__exponent+0x68>
 8007f72:	f10d 0307 	add.w	r3, sp, #7
 8007f76:	461d      	mov	r5, r3
 8007f78:	270a      	movs	r7, #10
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007f80:	fb07 1416 	mls	r4, r7, r6, r1
 8007f84:	3430      	adds	r4, #48	@ 0x30
 8007f86:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	2c63      	cmp	r4, #99	@ 0x63
 8007f8e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f92:	4631      	mov	r1, r6
 8007f94:	dcf1      	bgt.n	8007f7a <__exponent+0x1c>
 8007f96:	3130      	adds	r1, #48	@ 0x30
 8007f98:	1e94      	subs	r4, r2, #2
 8007f9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007f9e:	1c41      	adds	r1, r0, #1
 8007fa0:	4623      	mov	r3, r4
 8007fa2:	42ab      	cmp	r3, r5
 8007fa4:	d30a      	bcc.n	8007fbc <__exponent+0x5e>
 8007fa6:	f10d 0309 	add.w	r3, sp, #9
 8007faa:	1a9b      	subs	r3, r3, r2
 8007fac:	42ac      	cmp	r4, r5
 8007fae:	bf88      	it	hi
 8007fb0:	2300      	movhi	r3, #0
 8007fb2:	3302      	adds	r3, #2
 8007fb4:	4403      	add	r3, r0
 8007fb6:	1a18      	subs	r0, r3, r0
 8007fb8:	b003      	add	sp, #12
 8007fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fbc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007fc0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007fc4:	e7ed      	b.n	8007fa2 <__exponent+0x44>
 8007fc6:	2330      	movs	r3, #48	@ 0x30
 8007fc8:	3130      	adds	r1, #48	@ 0x30
 8007fca:	7083      	strb	r3, [r0, #2]
 8007fcc:	70c1      	strb	r1, [r0, #3]
 8007fce:	1d03      	adds	r3, r0, #4
 8007fd0:	e7f1      	b.n	8007fb6 <__exponent+0x58>
	...

08007fd4 <_printf_float>:
 8007fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd8:	b08d      	sub	sp, #52	@ 0x34
 8007fda:	460c      	mov	r4, r1
 8007fdc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007fe0:	4616      	mov	r6, r2
 8007fe2:	461f      	mov	r7, r3
 8007fe4:	4605      	mov	r5, r0
 8007fe6:	f000 fdad 	bl	8008b44 <_localeconv_r>
 8007fea:	6803      	ldr	r3, [r0, #0]
 8007fec:	9304      	str	r3, [sp, #16]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7f8 f966 	bl	80002c0 <strlen>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ff8:	f8d8 3000 	ldr.w	r3, [r8]
 8007ffc:	9005      	str	r0, [sp, #20]
 8007ffe:	3307      	adds	r3, #7
 8008000:	f023 0307 	bic.w	r3, r3, #7
 8008004:	f103 0208 	add.w	r2, r3, #8
 8008008:	f894 a018 	ldrb.w	sl, [r4, #24]
 800800c:	f8d4 b000 	ldr.w	fp, [r4]
 8008010:	f8c8 2000 	str.w	r2, [r8]
 8008014:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008018:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800801c:	9307      	str	r3, [sp, #28]
 800801e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008022:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008026:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800802a:	4b9c      	ldr	r3, [pc, #624]	@ (800829c <_printf_float+0x2c8>)
 800802c:	f04f 32ff 	mov.w	r2, #4294967295
 8008030:	f7f8 fda4 	bl	8000b7c <__aeabi_dcmpun>
 8008034:	bb70      	cbnz	r0, 8008094 <_printf_float+0xc0>
 8008036:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800803a:	4b98      	ldr	r3, [pc, #608]	@ (800829c <_printf_float+0x2c8>)
 800803c:	f04f 32ff 	mov.w	r2, #4294967295
 8008040:	f7f8 fd7e 	bl	8000b40 <__aeabi_dcmple>
 8008044:	bb30      	cbnz	r0, 8008094 <_printf_float+0xc0>
 8008046:	2200      	movs	r2, #0
 8008048:	2300      	movs	r3, #0
 800804a:	4640      	mov	r0, r8
 800804c:	4649      	mov	r1, r9
 800804e:	f7f8 fd6d 	bl	8000b2c <__aeabi_dcmplt>
 8008052:	b110      	cbz	r0, 800805a <_printf_float+0x86>
 8008054:	232d      	movs	r3, #45	@ 0x2d
 8008056:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800805a:	4a91      	ldr	r2, [pc, #580]	@ (80082a0 <_printf_float+0x2cc>)
 800805c:	4b91      	ldr	r3, [pc, #580]	@ (80082a4 <_printf_float+0x2d0>)
 800805e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008062:	bf94      	ite	ls
 8008064:	4690      	movls	r8, r2
 8008066:	4698      	movhi	r8, r3
 8008068:	2303      	movs	r3, #3
 800806a:	6123      	str	r3, [r4, #16]
 800806c:	f02b 0304 	bic.w	r3, fp, #4
 8008070:	6023      	str	r3, [r4, #0]
 8008072:	f04f 0900 	mov.w	r9, #0
 8008076:	9700      	str	r7, [sp, #0]
 8008078:	4633      	mov	r3, r6
 800807a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800807c:	4621      	mov	r1, r4
 800807e:	4628      	mov	r0, r5
 8008080:	f000 f9d2 	bl	8008428 <_printf_common>
 8008084:	3001      	adds	r0, #1
 8008086:	f040 808d 	bne.w	80081a4 <_printf_float+0x1d0>
 800808a:	f04f 30ff 	mov.w	r0, #4294967295
 800808e:	b00d      	add	sp, #52	@ 0x34
 8008090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008094:	4642      	mov	r2, r8
 8008096:	464b      	mov	r3, r9
 8008098:	4640      	mov	r0, r8
 800809a:	4649      	mov	r1, r9
 800809c:	f7f8 fd6e 	bl	8000b7c <__aeabi_dcmpun>
 80080a0:	b140      	cbz	r0, 80080b4 <_printf_float+0xe0>
 80080a2:	464b      	mov	r3, r9
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	bfbc      	itt	lt
 80080a8:	232d      	movlt	r3, #45	@ 0x2d
 80080aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80080ae:	4a7e      	ldr	r2, [pc, #504]	@ (80082a8 <_printf_float+0x2d4>)
 80080b0:	4b7e      	ldr	r3, [pc, #504]	@ (80082ac <_printf_float+0x2d8>)
 80080b2:	e7d4      	b.n	800805e <_printf_float+0x8a>
 80080b4:	6863      	ldr	r3, [r4, #4]
 80080b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80080ba:	9206      	str	r2, [sp, #24]
 80080bc:	1c5a      	adds	r2, r3, #1
 80080be:	d13b      	bne.n	8008138 <_printf_float+0x164>
 80080c0:	2306      	movs	r3, #6
 80080c2:	6063      	str	r3, [r4, #4]
 80080c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80080c8:	2300      	movs	r3, #0
 80080ca:	6022      	str	r2, [r4, #0]
 80080cc:	9303      	str	r3, [sp, #12]
 80080ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80080d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80080d4:	ab09      	add	r3, sp, #36	@ 0x24
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	6861      	ldr	r1, [r4, #4]
 80080da:	ec49 8b10 	vmov	d0, r8, r9
 80080de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80080e2:	4628      	mov	r0, r5
 80080e4:	f7ff fed6 	bl	8007e94 <__cvt>
 80080e8:	9b06      	ldr	r3, [sp, #24]
 80080ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80080ec:	2b47      	cmp	r3, #71	@ 0x47
 80080ee:	4680      	mov	r8, r0
 80080f0:	d129      	bne.n	8008146 <_printf_float+0x172>
 80080f2:	1cc8      	adds	r0, r1, #3
 80080f4:	db02      	blt.n	80080fc <_printf_float+0x128>
 80080f6:	6863      	ldr	r3, [r4, #4]
 80080f8:	4299      	cmp	r1, r3
 80080fa:	dd41      	ble.n	8008180 <_printf_float+0x1ac>
 80080fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8008100:	fa5f fa8a 	uxtb.w	sl, sl
 8008104:	3901      	subs	r1, #1
 8008106:	4652      	mov	r2, sl
 8008108:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800810c:	9109      	str	r1, [sp, #36]	@ 0x24
 800810e:	f7ff ff26 	bl	8007f5e <__exponent>
 8008112:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008114:	1813      	adds	r3, r2, r0
 8008116:	2a01      	cmp	r2, #1
 8008118:	4681      	mov	r9, r0
 800811a:	6123      	str	r3, [r4, #16]
 800811c:	dc02      	bgt.n	8008124 <_printf_float+0x150>
 800811e:	6822      	ldr	r2, [r4, #0]
 8008120:	07d2      	lsls	r2, r2, #31
 8008122:	d501      	bpl.n	8008128 <_printf_float+0x154>
 8008124:	3301      	adds	r3, #1
 8008126:	6123      	str	r3, [r4, #16]
 8008128:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800812c:	2b00      	cmp	r3, #0
 800812e:	d0a2      	beq.n	8008076 <_printf_float+0xa2>
 8008130:	232d      	movs	r3, #45	@ 0x2d
 8008132:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008136:	e79e      	b.n	8008076 <_printf_float+0xa2>
 8008138:	9a06      	ldr	r2, [sp, #24]
 800813a:	2a47      	cmp	r2, #71	@ 0x47
 800813c:	d1c2      	bne.n	80080c4 <_printf_float+0xf0>
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1c0      	bne.n	80080c4 <_printf_float+0xf0>
 8008142:	2301      	movs	r3, #1
 8008144:	e7bd      	b.n	80080c2 <_printf_float+0xee>
 8008146:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800814a:	d9db      	bls.n	8008104 <_printf_float+0x130>
 800814c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008150:	d118      	bne.n	8008184 <_printf_float+0x1b0>
 8008152:	2900      	cmp	r1, #0
 8008154:	6863      	ldr	r3, [r4, #4]
 8008156:	dd0b      	ble.n	8008170 <_printf_float+0x19c>
 8008158:	6121      	str	r1, [r4, #16]
 800815a:	b913      	cbnz	r3, 8008162 <_printf_float+0x18e>
 800815c:	6822      	ldr	r2, [r4, #0]
 800815e:	07d0      	lsls	r0, r2, #31
 8008160:	d502      	bpl.n	8008168 <_printf_float+0x194>
 8008162:	3301      	adds	r3, #1
 8008164:	440b      	add	r3, r1
 8008166:	6123      	str	r3, [r4, #16]
 8008168:	65a1      	str	r1, [r4, #88]	@ 0x58
 800816a:	f04f 0900 	mov.w	r9, #0
 800816e:	e7db      	b.n	8008128 <_printf_float+0x154>
 8008170:	b913      	cbnz	r3, 8008178 <_printf_float+0x1a4>
 8008172:	6822      	ldr	r2, [r4, #0]
 8008174:	07d2      	lsls	r2, r2, #31
 8008176:	d501      	bpl.n	800817c <_printf_float+0x1a8>
 8008178:	3302      	adds	r3, #2
 800817a:	e7f4      	b.n	8008166 <_printf_float+0x192>
 800817c:	2301      	movs	r3, #1
 800817e:	e7f2      	b.n	8008166 <_printf_float+0x192>
 8008180:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008184:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008186:	4299      	cmp	r1, r3
 8008188:	db05      	blt.n	8008196 <_printf_float+0x1c2>
 800818a:	6823      	ldr	r3, [r4, #0]
 800818c:	6121      	str	r1, [r4, #16]
 800818e:	07d8      	lsls	r0, r3, #31
 8008190:	d5ea      	bpl.n	8008168 <_printf_float+0x194>
 8008192:	1c4b      	adds	r3, r1, #1
 8008194:	e7e7      	b.n	8008166 <_printf_float+0x192>
 8008196:	2900      	cmp	r1, #0
 8008198:	bfd4      	ite	le
 800819a:	f1c1 0202 	rsble	r2, r1, #2
 800819e:	2201      	movgt	r2, #1
 80081a0:	4413      	add	r3, r2
 80081a2:	e7e0      	b.n	8008166 <_printf_float+0x192>
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	055a      	lsls	r2, r3, #21
 80081a8:	d407      	bmi.n	80081ba <_printf_float+0x1e6>
 80081aa:	6923      	ldr	r3, [r4, #16]
 80081ac:	4642      	mov	r2, r8
 80081ae:	4631      	mov	r1, r6
 80081b0:	4628      	mov	r0, r5
 80081b2:	47b8      	blx	r7
 80081b4:	3001      	adds	r0, #1
 80081b6:	d12b      	bne.n	8008210 <_printf_float+0x23c>
 80081b8:	e767      	b.n	800808a <_printf_float+0xb6>
 80081ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80081be:	f240 80dd 	bls.w	800837c <_printf_float+0x3a8>
 80081c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80081c6:	2200      	movs	r2, #0
 80081c8:	2300      	movs	r3, #0
 80081ca:	f7f8 fca5 	bl	8000b18 <__aeabi_dcmpeq>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	d033      	beq.n	800823a <_printf_float+0x266>
 80081d2:	4a37      	ldr	r2, [pc, #220]	@ (80082b0 <_printf_float+0x2dc>)
 80081d4:	2301      	movs	r3, #1
 80081d6:	4631      	mov	r1, r6
 80081d8:	4628      	mov	r0, r5
 80081da:	47b8      	blx	r7
 80081dc:	3001      	adds	r0, #1
 80081de:	f43f af54 	beq.w	800808a <_printf_float+0xb6>
 80081e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80081e6:	4543      	cmp	r3, r8
 80081e8:	db02      	blt.n	80081f0 <_printf_float+0x21c>
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	07d8      	lsls	r0, r3, #31
 80081ee:	d50f      	bpl.n	8008210 <_printf_float+0x23c>
 80081f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081f4:	4631      	mov	r1, r6
 80081f6:	4628      	mov	r0, r5
 80081f8:	47b8      	blx	r7
 80081fa:	3001      	adds	r0, #1
 80081fc:	f43f af45 	beq.w	800808a <_printf_float+0xb6>
 8008200:	f04f 0900 	mov.w	r9, #0
 8008204:	f108 38ff 	add.w	r8, r8, #4294967295
 8008208:	f104 0a1a 	add.w	sl, r4, #26
 800820c:	45c8      	cmp	r8, r9
 800820e:	dc09      	bgt.n	8008224 <_printf_float+0x250>
 8008210:	6823      	ldr	r3, [r4, #0]
 8008212:	079b      	lsls	r3, r3, #30
 8008214:	f100 8103 	bmi.w	800841e <_printf_float+0x44a>
 8008218:	68e0      	ldr	r0, [r4, #12]
 800821a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800821c:	4298      	cmp	r0, r3
 800821e:	bfb8      	it	lt
 8008220:	4618      	movlt	r0, r3
 8008222:	e734      	b.n	800808e <_printf_float+0xba>
 8008224:	2301      	movs	r3, #1
 8008226:	4652      	mov	r2, sl
 8008228:	4631      	mov	r1, r6
 800822a:	4628      	mov	r0, r5
 800822c:	47b8      	blx	r7
 800822e:	3001      	adds	r0, #1
 8008230:	f43f af2b 	beq.w	800808a <_printf_float+0xb6>
 8008234:	f109 0901 	add.w	r9, r9, #1
 8008238:	e7e8      	b.n	800820c <_printf_float+0x238>
 800823a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800823c:	2b00      	cmp	r3, #0
 800823e:	dc39      	bgt.n	80082b4 <_printf_float+0x2e0>
 8008240:	4a1b      	ldr	r2, [pc, #108]	@ (80082b0 <_printf_float+0x2dc>)
 8008242:	2301      	movs	r3, #1
 8008244:	4631      	mov	r1, r6
 8008246:	4628      	mov	r0, r5
 8008248:	47b8      	blx	r7
 800824a:	3001      	adds	r0, #1
 800824c:	f43f af1d 	beq.w	800808a <_printf_float+0xb6>
 8008250:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008254:	ea59 0303 	orrs.w	r3, r9, r3
 8008258:	d102      	bne.n	8008260 <_printf_float+0x28c>
 800825a:	6823      	ldr	r3, [r4, #0]
 800825c:	07d9      	lsls	r1, r3, #31
 800825e:	d5d7      	bpl.n	8008210 <_printf_float+0x23c>
 8008260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008264:	4631      	mov	r1, r6
 8008266:	4628      	mov	r0, r5
 8008268:	47b8      	blx	r7
 800826a:	3001      	adds	r0, #1
 800826c:	f43f af0d 	beq.w	800808a <_printf_float+0xb6>
 8008270:	f04f 0a00 	mov.w	sl, #0
 8008274:	f104 0b1a 	add.w	fp, r4, #26
 8008278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800827a:	425b      	negs	r3, r3
 800827c:	4553      	cmp	r3, sl
 800827e:	dc01      	bgt.n	8008284 <_printf_float+0x2b0>
 8008280:	464b      	mov	r3, r9
 8008282:	e793      	b.n	80081ac <_printf_float+0x1d8>
 8008284:	2301      	movs	r3, #1
 8008286:	465a      	mov	r2, fp
 8008288:	4631      	mov	r1, r6
 800828a:	4628      	mov	r0, r5
 800828c:	47b8      	blx	r7
 800828e:	3001      	adds	r0, #1
 8008290:	f43f aefb 	beq.w	800808a <_printf_float+0xb6>
 8008294:	f10a 0a01 	add.w	sl, sl, #1
 8008298:	e7ee      	b.n	8008278 <_printf_float+0x2a4>
 800829a:	bf00      	nop
 800829c:	7fefffff 	.word	0x7fefffff
 80082a0:	0800a794 	.word	0x0800a794
 80082a4:	0800a798 	.word	0x0800a798
 80082a8:	0800a79c 	.word	0x0800a79c
 80082ac:	0800a7a0 	.word	0x0800a7a0
 80082b0:	0800a7a4 	.word	0x0800a7a4
 80082b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80082b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80082ba:	4553      	cmp	r3, sl
 80082bc:	bfa8      	it	ge
 80082be:	4653      	movge	r3, sl
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	4699      	mov	r9, r3
 80082c4:	dc36      	bgt.n	8008334 <_printf_float+0x360>
 80082c6:	f04f 0b00 	mov.w	fp, #0
 80082ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082ce:	f104 021a 	add.w	r2, r4, #26
 80082d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80082d4:	9306      	str	r3, [sp, #24]
 80082d6:	eba3 0309 	sub.w	r3, r3, r9
 80082da:	455b      	cmp	r3, fp
 80082dc:	dc31      	bgt.n	8008342 <_printf_float+0x36e>
 80082de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e0:	459a      	cmp	sl, r3
 80082e2:	dc3a      	bgt.n	800835a <_printf_float+0x386>
 80082e4:	6823      	ldr	r3, [r4, #0]
 80082e6:	07da      	lsls	r2, r3, #31
 80082e8:	d437      	bmi.n	800835a <_printf_float+0x386>
 80082ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ec:	ebaa 0903 	sub.w	r9, sl, r3
 80082f0:	9b06      	ldr	r3, [sp, #24]
 80082f2:	ebaa 0303 	sub.w	r3, sl, r3
 80082f6:	4599      	cmp	r9, r3
 80082f8:	bfa8      	it	ge
 80082fa:	4699      	movge	r9, r3
 80082fc:	f1b9 0f00 	cmp.w	r9, #0
 8008300:	dc33      	bgt.n	800836a <_printf_float+0x396>
 8008302:	f04f 0800 	mov.w	r8, #0
 8008306:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800830a:	f104 0b1a 	add.w	fp, r4, #26
 800830e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008310:	ebaa 0303 	sub.w	r3, sl, r3
 8008314:	eba3 0309 	sub.w	r3, r3, r9
 8008318:	4543      	cmp	r3, r8
 800831a:	f77f af79 	ble.w	8008210 <_printf_float+0x23c>
 800831e:	2301      	movs	r3, #1
 8008320:	465a      	mov	r2, fp
 8008322:	4631      	mov	r1, r6
 8008324:	4628      	mov	r0, r5
 8008326:	47b8      	blx	r7
 8008328:	3001      	adds	r0, #1
 800832a:	f43f aeae 	beq.w	800808a <_printf_float+0xb6>
 800832e:	f108 0801 	add.w	r8, r8, #1
 8008332:	e7ec      	b.n	800830e <_printf_float+0x33a>
 8008334:	4642      	mov	r2, r8
 8008336:	4631      	mov	r1, r6
 8008338:	4628      	mov	r0, r5
 800833a:	47b8      	blx	r7
 800833c:	3001      	adds	r0, #1
 800833e:	d1c2      	bne.n	80082c6 <_printf_float+0x2f2>
 8008340:	e6a3      	b.n	800808a <_printf_float+0xb6>
 8008342:	2301      	movs	r3, #1
 8008344:	4631      	mov	r1, r6
 8008346:	4628      	mov	r0, r5
 8008348:	9206      	str	r2, [sp, #24]
 800834a:	47b8      	blx	r7
 800834c:	3001      	adds	r0, #1
 800834e:	f43f ae9c 	beq.w	800808a <_printf_float+0xb6>
 8008352:	9a06      	ldr	r2, [sp, #24]
 8008354:	f10b 0b01 	add.w	fp, fp, #1
 8008358:	e7bb      	b.n	80082d2 <_printf_float+0x2fe>
 800835a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800835e:	4631      	mov	r1, r6
 8008360:	4628      	mov	r0, r5
 8008362:	47b8      	blx	r7
 8008364:	3001      	adds	r0, #1
 8008366:	d1c0      	bne.n	80082ea <_printf_float+0x316>
 8008368:	e68f      	b.n	800808a <_printf_float+0xb6>
 800836a:	9a06      	ldr	r2, [sp, #24]
 800836c:	464b      	mov	r3, r9
 800836e:	4442      	add	r2, r8
 8008370:	4631      	mov	r1, r6
 8008372:	4628      	mov	r0, r5
 8008374:	47b8      	blx	r7
 8008376:	3001      	adds	r0, #1
 8008378:	d1c3      	bne.n	8008302 <_printf_float+0x32e>
 800837a:	e686      	b.n	800808a <_printf_float+0xb6>
 800837c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008380:	f1ba 0f01 	cmp.w	sl, #1
 8008384:	dc01      	bgt.n	800838a <_printf_float+0x3b6>
 8008386:	07db      	lsls	r3, r3, #31
 8008388:	d536      	bpl.n	80083f8 <_printf_float+0x424>
 800838a:	2301      	movs	r3, #1
 800838c:	4642      	mov	r2, r8
 800838e:	4631      	mov	r1, r6
 8008390:	4628      	mov	r0, r5
 8008392:	47b8      	blx	r7
 8008394:	3001      	adds	r0, #1
 8008396:	f43f ae78 	beq.w	800808a <_printf_float+0xb6>
 800839a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800839e:	4631      	mov	r1, r6
 80083a0:	4628      	mov	r0, r5
 80083a2:	47b8      	blx	r7
 80083a4:	3001      	adds	r0, #1
 80083a6:	f43f ae70 	beq.w	800808a <_printf_float+0xb6>
 80083aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80083ae:	2200      	movs	r2, #0
 80083b0:	2300      	movs	r3, #0
 80083b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083b6:	f7f8 fbaf 	bl	8000b18 <__aeabi_dcmpeq>
 80083ba:	b9c0      	cbnz	r0, 80083ee <_printf_float+0x41a>
 80083bc:	4653      	mov	r3, sl
 80083be:	f108 0201 	add.w	r2, r8, #1
 80083c2:	4631      	mov	r1, r6
 80083c4:	4628      	mov	r0, r5
 80083c6:	47b8      	blx	r7
 80083c8:	3001      	adds	r0, #1
 80083ca:	d10c      	bne.n	80083e6 <_printf_float+0x412>
 80083cc:	e65d      	b.n	800808a <_printf_float+0xb6>
 80083ce:	2301      	movs	r3, #1
 80083d0:	465a      	mov	r2, fp
 80083d2:	4631      	mov	r1, r6
 80083d4:	4628      	mov	r0, r5
 80083d6:	47b8      	blx	r7
 80083d8:	3001      	adds	r0, #1
 80083da:	f43f ae56 	beq.w	800808a <_printf_float+0xb6>
 80083de:	f108 0801 	add.w	r8, r8, #1
 80083e2:	45d0      	cmp	r8, sl
 80083e4:	dbf3      	blt.n	80083ce <_printf_float+0x3fa>
 80083e6:	464b      	mov	r3, r9
 80083e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80083ec:	e6df      	b.n	80081ae <_printf_float+0x1da>
 80083ee:	f04f 0800 	mov.w	r8, #0
 80083f2:	f104 0b1a 	add.w	fp, r4, #26
 80083f6:	e7f4      	b.n	80083e2 <_printf_float+0x40e>
 80083f8:	2301      	movs	r3, #1
 80083fa:	4642      	mov	r2, r8
 80083fc:	e7e1      	b.n	80083c2 <_printf_float+0x3ee>
 80083fe:	2301      	movs	r3, #1
 8008400:	464a      	mov	r2, r9
 8008402:	4631      	mov	r1, r6
 8008404:	4628      	mov	r0, r5
 8008406:	47b8      	blx	r7
 8008408:	3001      	adds	r0, #1
 800840a:	f43f ae3e 	beq.w	800808a <_printf_float+0xb6>
 800840e:	f108 0801 	add.w	r8, r8, #1
 8008412:	68e3      	ldr	r3, [r4, #12]
 8008414:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008416:	1a5b      	subs	r3, r3, r1
 8008418:	4543      	cmp	r3, r8
 800841a:	dcf0      	bgt.n	80083fe <_printf_float+0x42a>
 800841c:	e6fc      	b.n	8008218 <_printf_float+0x244>
 800841e:	f04f 0800 	mov.w	r8, #0
 8008422:	f104 0919 	add.w	r9, r4, #25
 8008426:	e7f4      	b.n	8008412 <_printf_float+0x43e>

08008428 <_printf_common>:
 8008428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800842c:	4616      	mov	r6, r2
 800842e:	4698      	mov	r8, r3
 8008430:	688a      	ldr	r2, [r1, #8]
 8008432:	690b      	ldr	r3, [r1, #16]
 8008434:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008438:	4293      	cmp	r3, r2
 800843a:	bfb8      	it	lt
 800843c:	4613      	movlt	r3, r2
 800843e:	6033      	str	r3, [r6, #0]
 8008440:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008444:	4607      	mov	r7, r0
 8008446:	460c      	mov	r4, r1
 8008448:	b10a      	cbz	r2, 800844e <_printf_common+0x26>
 800844a:	3301      	adds	r3, #1
 800844c:	6033      	str	r3, [r6, #0]
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	0699      	lsls	r1, r3, #26
 8008452:	bf42      	ittt	mi
 8008454:	6833      	ldrmi	r3, [r6, #0]
 8008456:	3302      	addmi	r3, #2
 8008458:	6033      	strmi	r3, [r6, #0]
 800845a:	6825      	ldr	r5, [r4, #0]
 800845c:	f015 0506 	ands.w	r5, r5, #6
 8008460:	d106      	bne.n	8008470 <_printf_common+0x48>
 8008462:	f104 0a19 	add.w	sl, r4, #25
 8008466:	68e3      	ldr	r3, [r4, #12]
 8008468:	6832      	ldr	r2, [r6, #0]
 800846a:	1a9b      	subs	r3, r3, r2
 800846c:	42ab      	cmp	r3, r5
 800846e:	dc26      	bgt.n	80084be <_printf_common+0x96>
 8008470:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008474:	6822      	ldr	r2, [r4, #0]
 8008476:	3b00      	subs	r3, #0
 8008478:	bf18      	it	ne
 800847a:	2301      	movne	r3, #1
 800847c:	0692      	lsls	r2, r2, #26
 800847e:	d42b      	bmi.n	80084d8 <_printf_common+0xb0>
 8008480:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008484:	4641      	mov	r1, r8
 8008486:	4638      	mov	r0, r7
 8008488:	47c8      	blx	r9
 800848a:	3001      	adds	r0, #1
 800848c:	d01e      	beq.n	80084cc <_printf_common+0xa4>
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	6922      	ldr	r2, [r4, #16]
 8008492:	f003 0306 	and.w	r3, r3, #6
 8008496:	2b04      	cmp	r3, #4
 8008498:	bf02      	ittt	eq
 800849a:	68e5      	ldreq	r5, [r4, #12]
 800849c:	6833      	ldreq	r3, [r6, #0]
 800849e:	1aed      	subeq	r5, r5, r3
 80084a0:	68a3      	ldr	r3, [r4, #8]
 80084a2:	bf0c      	ite	eq
 80084a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084a8:	2500      	movne	r5, #0
 80084aa:	4293      	cmp	r3, r2
 80084ac:	bfc4      	itt	gt
 80084ae:	1a9b      	subgt	r3, r3, r2
 80084b0:	18ed      	addgt	r5, r5, r3
 80084b2:	2600      	movs	r6, #0
 80084b4:	341a      	adds	r4, #26
 80084b6:	42b5      	cmp	r5, r6
 80084b8:	d11a      	bne.n	80084f0 <_printf_common+0xc8>
 80084ba:	2000      	movs	r0, #0
 80084bc:	e008      	b.n	80084d0 <_printf_common+0xa8>
 80084be:	2301      	movs	r3, #1
 80084c0:	4652      	mov	r2, sl
 80084c2:	4641      	mov	r1, r8
 80084c4:	4638      	mov	r0, r7
 80084c6:	47c8      	blx	r9
 80084c8:	3001      	adds	r0, #1
 80084ca:	d103      	bne.n	80084d4 <_printf_common+0xac>
 80084cc:	f04f 30ff 	mov.w	r0, #4294967295
 80084d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084d4:	3501      	adds	r5, #1
 80084d6:	e7c6      	b.n	8008466 <_printf_common+0x3e>
 80084d8:	18e1      	adds	r1, r4, r3
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	2030      	movs	r0, #48	@ 0x30
 80084de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80084e2:	4422      	add	r2, r4
 80084e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80084e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80084ec:	3302      	adds	r3, #2
 80084ee:	e7c7      	b.n	8008480 <_printf_common+0x58>
 80084f0:	2301      	movs	r3, #1
 80084f2:	4622      	mov	r2, r4
 80084f4:	4641      	mov	r1, r8
 80084f6:	4638      	mov	r0, r7
 80084f8:	47c8      	blx	r9
 80084fa:	3001      	adds	r0, #1
 80084fc:	d0e6      	beq.n	80084cc <_printf_common+0xa4>
 80084fe:	3601      	adds	r6, #1
 8008500:	e7d9      	b.n	80084b6 <_printf_common+0x8e>
	...

08008504 <_printf_i>:
 8008504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008508:	7e0f      	ldrb	r7, [r1, #24]
 800850a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800850c:	2f78      	cmp	r7, #120	@ 0x78
 800850e:	4691      	mov	r9, r2
 8008510:	4680      	mov	r8, r0
 8008512:	460c      	mov	r4, r1
 8008514:	469a      	mov	sl, r3
 8008516:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800851a:	d807      	bhi.n	800852c <_printf_i+0x28>
 800851c:	2f62      	cmp	r7, #98	@ 0x62
 800851e:	d80a      	bhi.n	8008536 <_printf_i+0x32>
 8008520:	2f00      	cmp	r7, #0
 8008522:	f000 80d2 	beq.w	80086ca <_printf_i+0x1c6>
 8008526:	2f58      	cmp	r7, #88	@ 0x58
 8008528:	f000 80b9 	beq.w	800869e <_printf_i+0x19a>
 800852c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008530:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008534:	e03a      	b.n	80085ac <_printf_i+0xa8>
 8008536:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800853a:	2b15      	cmp	r3, #21
 800853c:	d8f6      	bhi.n	800852c <_printf_i+0x28>
 800853e:	a101      	add	r1, pc, #4	@ (adr r1, 8008544 <_printf_i+0x40>)
 8008540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008544:	0800859d 	.word	0x0800859d
 8008548:	080085b1 	.word	0x080085b1
 800854c:	0800852d 	.word	0x0800852d
 8008550:	0800852d 	.word	0x0800852d
 8008554:	0800852d 	.word	0x0800852d
 8008558:	0800852d 	.word	0x0800852d
 800855c:	080085b1 	.word	0x080085b1
 8008560:	0800852d 	.word	0x0800852d
 8008564:	0800852d 	.word	0x0800852d
 8008568:	0800852d 	.word	0x0800852d
 800856c:	0800852d 	.word	0x0800852d
 8008570:	080086b1 	.word	0x080086b1
 8008574:	080085db 	.word	0x080085db
 8008578:	0800866b 	.word	0x0800866b
 800857c:	0800852d 	.word	0x0800852d
 8008580:	0800852d 	.word	0x0800852d
 8008584:	080086d3 	.word	0x080086d3
 8008588:	0800852d 	.word	0x0800852d
 800858c:	080085db 	.word	0x080085db
 8008590:	0800852d 	.word	0x0800852d
 8008594:	0800852d 	.word	0x0800852d
 8008598:	08008673 	.word	0x08008673
 800859c:	6833      	ldr	r3, [r6, #0]
 800859e:	1d1a      	adds	r2, r3, #4
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6032      	str	r2, [r6, #0]
 80085a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80085ac:	2301      	movs	r3, #1
 80085ae:	e09d      	b.n	80086ec <_printf_i+0x1e8>
 80085b0:	6833      	ldr	r3, [r6, #0]
 80085b2:	6820      	ldr	r0, [r4, #0]
 80085b4:	1d19      	adds	r1, r3, #4
 80085b6:	6031      	str	r1, [r6, #0]
 80085b8:	0606      	lsls	r6, r0, #24
 80085ba:	d501      	bpl.n	80085c0 <_printf_i+0xbc>
 80085bc:	681d      	ldr	r5, [r3, #0]
 80085be:	e003      	b.n	80085c8 <_printf_i+0xc4>
 80085c0:	0645      	lsls	r5, r0, #25
 80085c2:	d5fb      	bpl.n	80085bc <_printf_i+0xb8>
 80085c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80085c8:	2d00      	cmp	r5, #0
 80085ca:	da03      	bge.n	80085d4 <_printf_i+0xd0>
 80085cc:	232d      	movs	r3, #45	@ 0x2d
 80085ce:	426d      	negs	r5, r5
 80085d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085d4:	4859      	ldr	r0, [pc, #356]	@ (800873c <_printf_i+0x238>)
 80085d6:	230a      	movs	r3, #10
 80085d8:	e011      	b.n	80085fe <_printf_i+0xfa>
 80085da:	6821      	ldr	r1, [r4, #0]
 80085dc:	6833      	ldr	r3, [r6, #0]
 80085de:	0608      	lsls	r0, r1, #24
 80085e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80085e4:	d402      	bmi.n	80085ec <_printf_i+0xe8>
 80085e6:	0649      	lsls	r1, r1, #25
 80085e8:	bf48      	it	mi
 80085ea:	b2ad      	uxthmi	r5, r5
 80085ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80085ee:	4853      	ldr	r0, [pc, #332]	@ (800873c <_printf_i+0x238>)
 80085f0:	6033      	str	r3, [r6, #0]
 80085f2:	bf14      	ite	ne
 80085f4:	230a      	movne	r3, #10
 80085f6:	2308      	moveq	r3, #8
 80085f8:	2100      	movs	r1, #0
 80085fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80085fe:	6866      	ldr	r6, [r4, #4]
 8008600:	60a6      	str	r6, [r4, #8]
 8008602:	2e00      	cmp	r6, #0
 8008604:	bfa2      	ittt	ge
 8008606:	6821      	ldrge	r1, [r4, #0]
 8008608:	f021 0104 	bicge.w	r1, r1, #4
 800860c:	6021      	strge	r1, [r4, #0]
 800860e:	b90d      	cbnz	r5, 8008614 <_printf_i+0x110>
 8008610:	2e00      	cmp	r6, #0
 8008612:	d04b      	beq.n	80086ac <_printf_i+0x1a8>
 8008614:	4616      	mov	r6, r2
 8008616:	fbb5 f1f3 	udiv	r1, r5, r3
 800861a:	fb03 5711 	mls	r7, r3, r1, r5
 800861e:	5dc7      	ldrb	r7, [r0, r7]
 8008620:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008624:	462f      	mov	r7, r5
 8008626:	42bb      	cmp	r3, r7
 8008628:	460d      	mov	r5, r1
 800862a:	d9f4      	bls.n	8008616 <_printf_i+0x112>
 800862c:	2b08      	cmp	r3, #8
 800862e:	d10b      	bne.n	8008648 <_printf_i+0x144>
 8008630:	6823      	ldr	r3, [r4, #0]
 8008632:	07df      	lsls	r7, r3, #31
 8008634:	d508      	bpl.n	8008648 <_printf_i+0x144>
 8008636:	6923      	ldr	r3, [r4, #16]
 8008638:	6861      	ldr	r1, [r4, #4]
 800863a:	4299      	cmp	r1, r3
 800863c:	bfde      	ittt	le
 800863e:	2330      	movle	r3, #48	@ 0x30
 8008640:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008644:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008648:	1b92      	subs	r2, r2, r6
 800864a:	6122      	str	r2, [r4, #16]
 800864c:	f8cd a000 	str.w	sl, [sp]
 8008650:	464b      	mov	r3, r9
 8008652:	aa03      	add	r2, sp, #12
 8008654:	4621      	mov	r1, r4
 8008656:	4640      	mov	r0, r8
 8008658:	f7ff fee6 	bl	8008428 <_printf_common>
 800865c:	3001      	adds	r0, #1
 800865e:	d14a      	bne.n	80086f6 <_printf_i+0x1f2>
 8008660:	f04f 30ff 	mov.w	r0, #4294967295
 8008664:	b004      	add	sp, #16
 8008666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800866a:	6823      	ldr	r3, [r4, #0]
 800866c:	f043 0320 	orr.w	r3, r3, #32
 8008670:	6023      	str	r3, [r4, #0]
 8008672:	4833      	ldr	r0, [pc, #204]	@ (8008740 <_printf_i+0x23c>)
 8008674:	2778      	movs	r7, #120	@ 0x78
 8008676:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800867a:	6823      	ldr	r3, [r4, #0]
 800867c:	6831      	ldr	r1, [r6, #0]
 800867e:	061f      	lsls	r7, r3, #24
 8008680:	f851 5b04 	ldr.w	r5, [r1], #4
 8008684:	d402      	bmi.n	800868c <_printf_i+0x188>
 8008686:	065f      	lsls	r7, r3, #25
 8008688:	bf48      	it	mi
 800868a:	b2ad      	uxthmi	r5, r5
 800868c:	6031      	str	r1, [r6, #0]
 800868e:	07d9      	lsls	r1, r3, #31
 8008690:	bf44      	itt	mi
 8008692:	f043 0320 	orrmi.w	r3, r3, #32
 8008696:	6023      	strmi	r3, [r4, #0]
 8008698:	b11d      	cbz	r5, 80086a2 <_printf_i+0x19e>
 800869a:	2310      	movs	r3, #16
 800869c:	e7ac      	b.n	80085f8 <_printf_i+0xf4>
 800869e:	4827      	ldr	r0, [pc, #156]	@ (800873c <_printf_i+0x238>)
 80086a0:	e7e9      	b.n	8008676 <_printf_i+0x172>
 80086a2:	6823      	ldr	r3, [r4, #0]
 80086a4:	f023 0320 	bic.w	r3, r3, #32
 80086a8:	6023      	str	r3, [r4, #0]
 80086aa:	e7f6      	b.n	800869a <_printf_i+0x196>
 80086ac:	4616      	mov	r6, r2
 80086ae:	e7bd      	b.n	800862c <_printf_i+0x128>
 80086b0:	6833      	ldr	r3, [r6, #0]
 80086b2:	6825      	ldr	r5, [r4, #0]
 80086b4:	6961      	ldr	r1, [r4, #20]
 80086b6:	1d18      	adds	r0, r3, #4
 80086b8:	6030      	str	r0, [r6, #0]
 80086ba:	062e      	lsls	r6, r5, #24
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	d501      	bpl.n	80086c4 <_printf_i+0x1c0>
 80086c0:	6019      	str	r1, [r3, #0]
 80086c2:	e002      	b.n	80086ca <_printf_i+0x1c6>
 80086c4:	0668      	lsls	r0, r5, #25
 80086c6:	d5fb      	bpl.n	80086c0 <_printf_i+0x1bc>
 80086c8:	8019      	strh	r1, [r3, #0]
 80086ca:	2300      	movs	r3, #0
 80086cc:	6123      	str	r3, [r4, #16]
 80086ce:	4616      	mov	r6, r2
 80086d0:	e7bc      	b.n	800864c <_printf_i+0x148>
 80086d2:	6833      	ldr	r3, [r6, #0]
 80086d4:	1d1a      	adds	r2, r3, #4
 80086d6:	6032      	str	r2, [r6, #0]
 80086d8:	681e      	ldr	r6, [r3, #0]
 80086da:	6862      	ldr	r2, [r4, #4]
 80086dc:	2100      	movs	r1, #0
 80086de:	4630      	mov	r0, r6
 80086e0:	f7f7 fd9e 	bl	8000220 <memchr>
 80086e4:	b108      	cbz	r0, 80086ea <_printf_i+0x1e6>
 80086e6:	1b80      	subs	r0, r0, r6
 80086e8:	6060      	str	r0, [r4, #4]
 80086ea:	6863      	ldr	r3, [r4, #4]
 80086ec:	6123      	str	r3, [r4, #16]
 80086ee:	2300      	movs	r3, #0
 80086f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086f4:	e7aa      	b.n	800864c <_printf_i+0x148>
 80086f6:	6923      	ldr	r3, [r4, #16]
 80086f8:	4632      	mov	r2, r6
 80086fa:	4649      	mov	r1, r9
 80086fc:	4640      	mov	r0, r8
 80086fe:	47d0      	blx	sl
 8008700:	3001      	adds	r0, #1
 8008702:	d0ad      	beq.n	8008660 <_printf_i+0x15c>
 8008704:	6823      	ldr	r3, [r4, #0]
 8008706:	079b      	lsls	r3, r3, #30
 8008708:	d413      	bmi.n	8008732 <_printf_i+0x22e>
 800870a:	68e0      	ldr	r0, [r4, #12]
 800870c:	9b03      	ldr	r3, [sp, #12]
 800870e:	4298      	cmp	r0, r3
 8008710:	bfb8      	it	lt
 8008712:	4618      	movlt	r0, r3
 8008714:	e7a6      	b.n	8008664 <_printf_i+0x160>
 8008716:	2301      	movs	r3, #1
 8008718:	4632      	mov	r2, r6
 800871a:	4649      	mov	r1, r9
 800871c:	4640      	mov	r0, r8
 800871e:	47d0      	blx	sl
 8008720:	3001      	adds	r0, #1
 8008722:	d09d      	beq.n	8008660 <_printf_i+0x15c>
 8008724:	3501      	adds	r5, #1
 8008726:	68e3      	ldr	r3, [r4, #12]
 8008728:	9903      	ldr	r1, [sp, #12]
 800872a:	1a5b      	subs	r3, r3, r1
 800872c:	42ab      	cmp	r3, r5
 800872e:	dcf2      	bgt.n	8008716 <_printf_i+0x212>
 8008730:	e7eb      	b.n	800870a <_printf_i+0x206>
 8008732:	2500      	movs	r5, #0
 8008734:	f104 0619 	add.w	r6, r4, #25
 8008738:	e7f5      	b.n	8008726 <_printf_i+0x222>
 800873a:	bf00      	nop
 800873c:	0800a7a6 	.word	0x0800a7a6
 8008740:	0800a7b7 	.word	0x0800a7b7

08008744 <std>:
 8008744:	2300      	movs	r3, #0
 8008746:	b510      	push	{r4, lr}
 8008748:	4604      	mov	r4, r0
 800874a:	e9c0 3300 	strd	r3, r3, [r0]
 800874e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008752:	6083      	str	r3, [r0, #8]
 8008754:	8181      	strh	r1, [r0, #12]
 8008756:	6643      	str	r3, [r0, #100]	@ 0x64
 8008758:	81c2      	strh	r2, [r0, #14]
 800875a:	6183      	str	r3, [r0, #24]
 800875c:	4619      	mov	r1, r3
 800875e:	2208      	movs	r2, #8
 8008760:	305c      	adds	r0, #92	@ 0x5c
 8008762:	f000 f9e7 	bl	8008b34 <memset>
 8008766:	4b0d      	ldr	r3, [pc, #52]	@ (800879c <std+0x58>)
 8008768:	6263      	str	r3, [r4, #36]	@ 0x24
 800876a:	4b0d      	ldr	r3, [pc, #52]	@ (80087a0 <std+0x5c>)
 800876c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800876e:	4b0d      	ldr	r3, [pc, #52]	@ (80087a4 <std+0x60>)
 8008770:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008772:	4b0d      	ldr	r3, [pc, #52]	@ (80087a8 <std+0x64>)
 8008774:	6323      	str	r3, [r4, #48]	@ 0x30
 8008776:	4b0d      	ldr	r3, [pc, #52]	@ (80087ac <std+0x68>)
 8008778:	6224      	str	r4, [r4, #32]
 800877a:	429c      	cmp	r4, r3
 800877c:	d006      	beq.n	800878c <std+0x48>
 800877e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008782:	4294      	cmp	r4, r2
 8008784:	d002      	beq.n	800878c <std+0x48>
 8008786:	33d0      	adds	r3, #208	@ 0xd0
 8008788:	429c      	cmp	r4, r3
 800878a:	d105      	bne.n	8008798 <std+0x54>
 800878c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008794:	f000 ba5a 	b.w	8008c4c <__retarget_lock_init_recursive>
 8008798:	bd10      	pop	{r4, pc}
 800879a:	bf00      	nop
 800879c:	08008985 	.word	0x08008985
 80087a0:	080089a7 	.word	0x080089a7
 80087a4:	080089df 	.word	0x080089df
 80087a8:	08008a03 	.word	0x08008a03
 80087ac:	200005d0 	.word	0x200005d0

080087b0 <stdio_exit_handler>:
 80087b0:	4a02      	ldr	r2, [pc, #8]	@ (80087bc <stdio_exit_handler+0xc>)
 80087b2:	4903      	ldr	r1, [pc, #12]	@ (80087c0 <stdio_exit_handler+0x10>)
 80087b4:	4803      	ldr	r0, [pc, #12]	@ (80087c4 <stdio_exit_handler+0x14>)
 80087b6:	f000 b869 	b.w	800888c <_fwalk_sglue>
 80087ba:	bf00      	nop
 80087bc:	2000000c 	.word	0x2000000c
 80087c0:	0800a415 	.word	0x0800a415
 80087c4:	2000001c 	.word	0x2000001c

080087c8 <cleanup_stdio>:
 80087c8:	6841      	ldr	r1, [r0, #4]
 80087ca:	4b0c      	ldr	r3, [pc, #48]	@ (80087fc <cleanup_stdio+0x34>)
 80087cc:	4299      	cmp	r1, r3
 80087ce:	b510      	push	{r4, lr}
 80087d0:	4604      	mov	r4, r0
 80087d2:	d001      	beq.n	80087d8 <cleanup_stdio+0x10>
 80087d4:	f001 fe1e 	bl	800a414 <_fflush_r>
 80087d8:	68a1      	ldr	r1, [r4, #8]
 80087da:	4b09      	ldr	r3, [pc, #36]	@ (8008800 <cleanup_stdio+0x38>)
 80087dc:	4299      	cmp	r1, r3
 80087de:	d002      	beq.n	80087e6 <cleanup_stdio+0x1e>
 80087e0:	4620      	mov	r0, r4
 80087e2:	f001 fe17 	bl	800a414 <_fflush_r>
 80087e6:	68e1      	ldr	r1, [r4, #12]
 80087e8:	4b06      	ldr	r3, [pc, #24]	@ (8008804 <cleanup_stdio+0x3c>)
 80087ea:	4299      	cmp	r1, r3
 80087ec:	d004      	beq.n	80087f8 <cleanup_stdio+0x30>
 80087ee:	4620      	mov	r0, r4
 80087f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087f4:	f001 be0e 	b.w	800a414 <_fflush_r>
 80087f8:	bd10      	pop	{r4, pc}
 80087fa:	bf00      	nop
 80087fc:	200005d0 	.word	0x200005d0
 8008800:	20000638 	.word	0x20000638
 8008804:	200006a0 	.word	0x200006a0

08008808 <global_stdio_init.part.0>:
 8008808:	b510      	push	{r4, lr}
 800880a:	4b0b      	ldr	r3, [pc, #44]	@ (8008838 <global_stdio_init.part.0+0x30>)
 800880c:	4c0b      	ldr	r4, [pc, #44]	@ (800883c <global_stdio_init.part.0+0x34>)
 800880e:	4a0c      	ldr	r2, [pc, #48]	@ (8008840 <global_stdio_init.part.0+0x38>)
 8008810:	601a      	str	r2, [r3, #0]
 8008812:	4620      	mov	r0, r4
 8008814:	2200      	movs	r2, #0
 8008816:	2104      	movs	r1, #4
 8008818:	f7ff ff94 	bl	8008744 <std>
 800881c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008820:	2201      	movs	r2, #1
 8008822:	2109      	movs	r1, #9
 8008824:	f7ff ff8e 	bl	8008744 <std>
 8008828:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800882c:	2202      	movs	r2, #2
 800882e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008832:	2112      	movs	r1, #18
 8008834:	f7ff bf86 	b.w	8008744 <std>
 8008838:	20000708 	.word	0x20000708
 800883c:	200005d0 	.word	0x200005d0
 8008840:	080087b1 	.word	0x080087b1

08008844 <__sfp_lock_acquire>:
 8008844:	4801      	ldr	r0, [pc, #4]	@ (800884c <__sfp_lock_acquire+0x8>)
 8008846:	f000 ba02 	b.w	8008c4e <__retarget_lock_acquire_recursive>
 800884a:	bf00      	nop
 800884c:	20000711 	.word	0x20000711

08008850 <__sfp_lock_release>:
 8008850:	4801      	ldr	r0, [pc, #4]	@ (8008858 <__sfp_lock_release+0x8>)
 8008852:	f000 b9fd 	b.w	8008c50 <__retarget_lock_release_recursive>
 8008856:	bf00      	nop
 8008858:	20000711 	.word	0x20000711

0800885c <__sinit>:
 800885c:	b510      	push	{r4, lr}
 800885e:	4604      	mov	r4, r0
 8008860:	f7ff fff0 	bl	8008844 <__sfp_lock_acquire>
 8008864:	6a23      	ldr	r3, [r4, #32]
 8008866:	b11b      	cbz	r3, 8008870 <__sinit+0x14>
 8008868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800886c:	f7ff bff0 	b.w	8008850 <__sfp_lock_release>
 8008870:	4b04      	ldr	r3, [pc, #16]	@ (8008884 <__sinit+0x28>)
 8008872:	6223      	str	r3, [r4, #32]
 8008874:	4b04      	ldr	r3, [pc, #16]	@ (8008888 <__sinit+0x2c>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1f5      	bne.n	8008868 <__sinit+0xc>
 800887c:	f7ff ffc4 	bl	8008808 <global_stdio_init.part.0>
 8008880:	e7f2      	b.n	8008868 <__sinit+0xc>
 8008882:	bf00      	nop
 8008884:	080087c9 	.word	0x080087c9
 8008888:	20000708 	.word	0x20000708

0800888c <_fwalk_sglue>:
 800888c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008890:	4607      	mov	r7, r0
 8008892:	4688      	mov	r8, r1
 8008894:	4614      	mov	r4, r2
 8008896:	2600      	movs	r6, #0
 8008898:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800889c:	f1b9 0901 	subs.w	r9, r9, #1
 80088a0:	d505      	bpl.n	80088ae <_fwalk_sglue+0x22>
 80088a2:	6824      	ldr	r4, [r4, #0]
 80088a4:	2c00      	cmp	r4, #0
 80088a6:	d1f7      	bne.n	8008898 <_fwalk_sglue+0xc>
 80088a8:	4630      	mov	r0, r6
 80088aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ae:	89ab      	ldrh	r3, [r5, #12]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d907      	bls.n	80088c4 <_fwalk_sglue+0x38>
 80088b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088b8:	3301      	adds	r3, #1
 80088ba:	d003      	beq.n	80088c4 <_fwalk_sglue+0x38>
 80088bc:	4629      	mov	r1, r5
 80088be:	4638      	mov	r0, r7
 80088c0:	47c0      	blx	r8
 80088c2:	4306      	orrs	r6, r0
 80088c4:	3568      	adds	r5, #104	@ 0x68
 80088c6:	e7e9      	b.n	800889c <_fwalk_sglue+0x10>

080088c8 <_puts_r>:
 80088c8:	6a03      	ldr	r3, [r0, #32]
 80088ca:	b570      	push	{r4, r5, r6, lr}
 80088cc:	6884      	ldr	r4, [r0, #8]
 80088ce:	4605      	mov	r5, r0
 80088d0:	460e      	mov	r6, r1
 80088d2:	b90b      	cbnz	r3, 80088d8 <_puts_r+0x10>
 80088d4:	f7ff ffc2 	bl	800885c <__sinit>
 80088d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088da:	07db      	lsls	r3, r3, #31
 80088dc:	d405      	bmi.n	80088ea <_puts_r+0x22>
 80088de:	89a3      	ldrh	r3, [r4, #12]
 80088e0:	0598      	lsls	r0, r3, #22
 80088e2:	d402      	bmi.n	80088ea <_puts_r+0x22>
 80088e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088e6:	f000 f9b2 	bl	8008c4e <__retarget_lock_acquire_recursive>
 80088ea:	89a3      	ldrh	r3, [r4, #12]
 80088ec:	0719      	lsls	r1, r3, #28
 80088ee:	d502      	bpl.n	80088f6 <_puts_r+0x2e>
 80088f0:	6923      	ldr	r3, [r4, #16]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d135      	bne.n	8008962 <_puts_r+0x9a>
 80088f6:	4621      	mov	r1, r4
 80088f8:	4628      	mov	r0, r5
 80088fa:	f000 f8c5 	bl	8008a88 <__swsetup_r>
 80088fe:	b380      	cbz	r0, 8008962 <_puts_r+0x9a>
 8008900:	f04f 35ff 	mov.w	r5, #4294967295
 8008904:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008906:	07da      	lsls	r2, r3, #31
 8008908:	d405      	bmi.n	8008916 <_puts_r+0x4e>
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	059b      	lsls	r3, r3, #22
 800890e:	d402      	bmi.n	8008916 <_puts_r+0x4e>
 8008910:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008912:	f000 f99d 	bl	8008c50 <__retarget_lock_release_recursive>
 8008916:	4628      	mov	r0, r5
 8008918:	bd70      	pop	{r4, r5, r6, pc}
 800891a:	2b00      	cmp	r3, #0
 800891c:	da04      	bge.n	8008928 <_puts_r+0x60>
 800891e:	69a2      	ldr	r2, [r4, #24]
 8008920:	429a      	cmp	r2, r3
 8008922:	dc17      	bgt.n	8008954 <_puts_r+0x8c>
 8008924:	290a      	cmp	r1, #10
 8008926:	d015      	beq.n	8008954 <_puts_r+0x8c>
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	1c5a      	adds	r2, r3, #1
 800892c:	6022      	str	r2, [r4, #0]
 800892e:	7019      	strb	r1, [r3, #0]
 8008930:	68a3      	ldr	r3, [r4, #8]
 8008932:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008936:	3b01      	subs	r3, #1
 8008938:	60a3      	str	r3, [r4, #8]
 800893a:	2900      	cmp	r1, #0
 800893c:	d1ed      	bne.n	800891a <_puts_r+0x52>
 800893e:	2b00      	cmp	r3, #0
 8008940:	da11      	bge.n	8008966 <_puts_r+0x9e>
 8008942:	4622      	mov	r2, r4
 8008944:	210a      	movs	r1, #10
 8008946:	4628      	mov	r0, r5
 8008948:	f000 f85f 	bl	8008a0a <__swbuf_r>
 800894c:	3001      	adds	r0, #1
 800894e:	d0d7      	beq.n	8008900 <_puts_r+0x38>
 8008950:	250a      	movs	r5, #10
 8008952:	e7d7      	b.n	8008904 <_puts_r+0x3c>
 8008954:	4622      	mov	r2, r4
 8008956:	4628      	mov	r0, r5
 8008958:	f000 f857 	bl	8008a0a <__swbuf_r>
 800895c:	3001      	adds	r0, #1
 800895e:	d1e7      	bne.n	8008930 <_puts_r+0x68>
 8008960:	e7ce      	b.n	8008900 <_puts_r+0x38>
 8008962:	3e01      	subs	r6, #1
 8008964:	e7e4      	b.n	8008930 <_puts_r+0x68>
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	1c5a      	adds	r2, r3, #1
 800896a:	6022      	str	r2, [r4, #0]
 800896c:	220a      	movs	r2, #10
 800896e:	701a      	strb	r2, [r3, #0]
 8008970:	e7ee      	b.n	8008950 <_puts_r+0x88>
	...

08008974 <puts>:
 8008974:	4b02      	ldr	r3, [pc, #8]	@ (8008980 <puts+0xc>)
 8008976:	4601      	mov	r1, r0
 8008978:	6818      	ldr	r0, [r3, #0]
 800897a:	f7ff bfa5 	b.w	80088c8 <_puts_r>
 800897e:	bf00      	nop
 8008980:	20000018 	.word	0x20000018

08008984 <__sread>:
 8008984:	b510      	push	{r4, lr}
 8008986:	460c      	mov	r4, r1
 8008988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800898c:	f000 f900 	bl	8008b90 <_read_r>
 8008990:	2800      	cmp	r0, #0
 8008992:	bfab      	itete	ge
 8008994:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008996:	89a3      	ldrhlt	r3, [r4, #12]
 8008998:	181b      	addge	r3, r3, r0
 800899a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800899e:	bfac      	ite	ge
 80089a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80089a2:	81a3      	strhlt	r3, [r4, #12]
 80089a4:	bd10      	pop	{r4, pc}

080089a6 <__swrite>:
 80089a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089aa:	461f      	mov	r7, r3
 80089ac:	898b      	ldrh	r3, [r1, #12]
 80089ae:	05db      	lsls	r3, r3, #23
 80089b0:	4605      	mov	r5, r0
 80089b2:	460c      	mov	r4, r1
 80089b4:	4616      	mov	r6, r2
 80089b6:	d505      	bpl.n	80089c4 <__swrite+0x1e>
 80089b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089bc:	2302      	movs	r3, #2
 80089be:	2200      	movs	r2, #0
 80089c0:	f000 f8d4 	bl	8008b6c <_lseek_r>
 80089c4:	89a3      	ldrh	r3, [r4, #12]
 80089c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089ce:	81a3      	strh	r3, [r4, #12]
 80089d0:	4632      	mov	r2, r6
 80089d2:	463b      	mov	r3, r7
 80089d4:	4628      	mov	r0, r5
 80089d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089da:	f000 b8fb 	b.w	8008bd4 <_write_r>

080089de <__sseek>:
 80089de:	b510      	push	{r4, lr}
 80089e0:	460c      	mov	r4, r1
 80089e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e6:	f000 f8c1 	bl	8008b6c <_lseek_r>
 80089ea:	1c43      	adds	r3, r0, #1
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	bf15      	itete	ne
 80089f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80089f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80089f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80089fa:	81a3      	strheq	r3, [r4, #12]
 80089fc:	bf18      	it	ne
 80089fe:	81a3      	strhne	r3, [r4, #12]
 8008a00:	bd10      	pop	{r4, pc}

08008a02 <__sclose>:
 8008a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a06:	f000 b8a1 	b.w	8008b4c <_close_r>

08008a0a <__swbuf_r>:
 8008a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0c:	460e      	mov	r6, r1
 8008a0e:	4614      	mov	r4, r2
 8008a10:	4605      	mov	r5, r0
 8008a12:	b118      	cbz	r0, 8008a1c <__swbuf_r+0x12>
 8008a14:	6a03      	ldr	r3, [r0, #32]
 8008a16:	b90b      	cbnz	r3, 8008a1c <__swbuf_r+0x12>
 8008a18:	f7ff ff20 	bl	800885c <__sinit>
 8008a1c:	69a3      	ldr	r3, [r4, #24]
 8008a1e:	60a3      	str	r3, [r4, #8]
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	071a      	lsls	r2, r3, #28
 8008a24:	d501      	bpl.n	8008a2a <__swbuf_r+0x20>
 8008a26:	6923      	ldr	r3, [r4, #16]
 8008a28:	b943      	cbnz	r3, 8008a3c <__swbuf_r+0x32>
 8008a2a:	4621      	mov	r1, r4
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	f000 f82b 	bl	8008a88 <__swsetup_r>
 8008a32:	b118      	cbz	r0, 8008a3c <__swbuf_r+0x32>
 8008a34:	f04f 37ff 	mov.w	r7, #4294967295
 8008a38:	4638      	mov	r0, r7
 8008a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a3c:	6823      	ldr	r3, [r4, #0]
 8008a3e:	6922      	ldr	r2, [r4, #16]
 8008a40:	1a98      	subs	r0, r3, r2
 8008a42:	6963      	ldr	r3, [r4, #20]
 8008a44:	b2f6      	uxtb	r6, r6
 8008a46:	4283      	cmp	r3, r0
 8008a48:	4637      	mov	r7, r6
 8008a4a:	dc05      	bgt.n	8008a58 <__swbuf_r+0x4e>
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	4628      	mov	r0, r5
 8008a50:	f001 fce0 	bl	800a414 <_fflush_r>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	d1ed      	bne.n	8008a34 <__swbuf_r+0x2a>
 8008a58:	68a3      	ldr	r3, [r4, #8]
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	60a3      	str	r3, [r4, #8]
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	1c5a      	adds	r2, r3, #1
 8008a62:	6022      	str	r2, [r4, #0]
 8008a64:	701e      	strb	r6, [r3, #0]
 8008a66:	6962      	ldr	r2, [r4, #20]
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d004      	beq.n	8008a78 <__swbuf_r+0x6e>
 8008a6e:	89a3      	ldrh	r3, [r4, #12]
 8008a70:	07db      	lsls	r3, r3, #31
 8008a72:	d5e1      	bpl.n	8008a38 <__swbuf_r+0x2e>
 8008a74:	2e0a      	cmp	r6, #10
 8008a76:	d1df      	bne.n	8008a38 <__swbuf_r+0x2e>
 8008a78:	4621      	mov	r1, r4
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	f001 fcca 	bl	800a414 <_fflush_r>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d0d9      	beq.n	8008a38 <__swbuf_r+0x2e>
 8008a84:	e7d6      	b.n	8008a34 <__swbuf_r+0x2a>
	...

08008a88 <__swsetup_r>:
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	4b29      	ldr	r3, [pc, #164]	@ (8008b30 <__swsetup_r+0xa8>)
 8008a8c:	4605      	mov	r5, r0
 8008a8e:	6818      	ldr	r0, [r3, #0]
 8008a90:	460c      	mov	r4, r1
 8008a92:	b118      	cbz	r0, 8008a9c <__swsetup_r+0x14>
 8008a94:	6a03      	ldr	r3, [r0, #32]
 8008a96:	b90b      	cbnz	r3, 8008a9c <__swsetup_r+0x14>
 8008a98:	f7ff fee0 	bl	800885c <__sinit>
 8008a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aa0:	0719      	lsls	r1, r3, #28
 8008aa2:	d422      	bmi.n	8008aea <__swsetup_r+0x62>
 8008aa4:	06da      	lsls	r2, r3, #27
 8008aa6:	d407      	bmi.n	8008ab8 <__swsetup_r+0x30>
 8008aa8:	2209      	movs	r2, #9
 8008aaa:	602a      	str	r2, [r5, #0]
 8008aac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ab0:	81a3      	strh	r3, [r4, #12]
 8008ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab6:	e033      	b.n	8008b20 <__swsetup_r+0x98>
 8008ab8:	0758      	lsls	r0, r3, #29
 8008aba:	d512      	bpl.n	8008ae2 <__swsetup_r+0x5a>
 8008abc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008abe:	b141      	cbz	r1, 8008ad2 <__swsetup_r+0x4a>
 8008ac0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ac4:	4299      	cmp	r1, r3
 8008ac6:	d002      	beq.n	8008ace <__swsetup_r+0x46>
 8008ac8:	4628      	mov	r0, r5
 8008aca:	f000 ff11 	bl	80098f0 <_free_r>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ad8:	81a3      	strh	r3, [r4, #12]
 8008ada:	2300      	movs	r3, #0
 8008adc:	6063      	str	r3, [r4, #4]
 8008ade:	6923      	ldr	r3, [r4, #16]
 8008ae0:	6023      	str	r3, [r4, #0]
 8008ae2:	89a3      	ldrh	r3, [r4, #12]
 8008ae4:	f043 0308 	orr.w	r3, r3, #8
 8008ae8:	81a3      	strh	r3, [r4, #12]
 8008aea:	6923      	ldr	r3, [r4, #16]
 8008aec:	b94b      	cbnz	r3, 8008b02 <__swsetup_r+0x7a>
 8008aee:	89a3      	ldrh	r3, [r4, #12]
 8008af0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008af8:	d003      	beq.n	8008b02 <__swsetup_r+0x7a>
 8008afa:	4621      	mov	r1, r4
 8008afc:	4628      	mov	r0, r5
 8008afe:	f001 fcd7 	bl	800a4b0 <__smakebuf_r>
 8008b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b06:	f013 0201 	ands.w	r2, r3, #1
 8008b0a:	d00a      	beq.n	8008b22 <__swsetup_r+0x9a>
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	60a2      	str	r2, [r4, #8]
 8008b10:	6962      	ldr	r2, [r4, #20]
 8008b12:	4252      	negs	r2, r2
 8008b14:	61a2      	str	r2, [r4, #24]
 8008b16:	6922      	ldr	r2, [r4, #16]
 8008b18:	b942      	cbnz	r2, 8008b2c <__swsetup_r+0xa4>
 8008b1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b1e:	d1c5      	bne.n	8008aac <__swsetup_r+0x24>
 8008b20:	bd38      	pop	{r3, r4, r5, pc}
 8008b22:	0799      	lsls	r1, r3, #30
 8008b24:	bf58      	it	pl
 8008b26:	6962      	ldrpl	r2, [r4, #20]
 8008b28:	60a2      	str	r2, [r4, #8]
 8008b2a:	e7f4      	b.n	8008b16 <__swsetup_r+0x8e>
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	e7f7      	b.n	8008b20 <__swsetup_r+0x98>
 8008b30:	20000018 	.word	0x20000018

08008b34 <memset>:
 8008b34:	4402      	add	r2, r0
 8008b36:	4603      	mov	r3, r0
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d100      	bne.n	8008b3e <memset+0xa>
 8008b3c:	4770      	bx	lr
 8008b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b42:	e7f9      	b.n	8008b38 <memset+0x4>

08008b44 <_localeconv_r>:
 8008b44:	4800      	ldr	r0, [pc, #0]	@ (8008b48 <_localeconv_r+0x4>)
 8008b46:	4770      	bx	lr
 8008b48:	20000158 	.word	0x20000158

08008b4c <_close_r>:
 8008b4c:	b538      	push	{r3, r4, r5, lr}
 8008b4e:	4d06      	ldr	r5, [pc, #24]	@ (8008b68 <_close_r+0x1c>)
 8008b50:	2300      	movs	r3, #0
 8008b52:	4604      	mov	r4, r0
 8008b54:	4608      	mov	r0, r1
 8008b56:	602b      	str	r3, [r5, #0]
 8008b58:	f7f9 f846 	bl	8001be8 <_close>
 8008b5c:	1c43      	adds	r3, r0, #1
 8008b5e:	d102      	bne.n	8008b66 <_close_r+0x1a>
 8008b60:	682b      	ldr	r3, [r5, #0]
 8008b62:	b103      	cbz	r3, 8008b66 <_close_r+0x1a>
 8008b64:	6023      	str	r3, [r4, #0]
 8008b66:	bd38      	pop	{r3, r4, r5, pc}
 8008b68:	2000070c 	.word	0x2000070c

08008b6c <_lseek_r>:
 8008b6c:	b538      	push	{r3, r4, r5, lr}
 8008b6e:	4d07      	ldr	r5, [pc, #28]	@ (8008b8c <_lseek_r+0x20>)
 8008b70:	4604      	mov	r4, r0
 8008b72:	4608      	mov	r0, r1
 8008b74:	4611      	mov	r1, r2
 8008b76:	2200      	movs	r2, #0
 8008b78:	602a      	str	r2, [r5, #0]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	f7f9 f85b 	bl	8001c36 <_lseek>
 8008b80:	1c43      	adds	r3, r0, #1
 8008b82:	d102      	bne.n	8008b8a <_lseek_r+0x1e>
 8008b84:	682b      	ldr	r3, [r5, #0]
 8008b86:	b103      	cbz	r3, 8008b8a <_lseek_r+0x1e>
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	bd38      	pop	{r3, r4, r5, pc}
 8008b8c:	2000070c 	.word	0x2000070c

08008b90 <_read_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	4d07      	ldr	r5, [pc, #28]	@ (8008bb0 <_read_r+0x20>)
 8008b94:	4604      	mov	r4, r0
 8008b96:	4608      	mov	r0, r1
 8008b98:	4611      	mov	r1, r2
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	602a      	str	r2, [r5, #0]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	f7f8 ffe9 	bl	8001b76 <_read>
 8008ba4:	1c43      	adds	r3, r0, #1
 8008ba6:	d102      	bne.n	8008bae <_read_r+0x1e>
 8008ba8:	682b      	ldr	r3, [r5, #0]
 8008baa:	b103      	cbz	r3, 8008bae <_read_r+0x1e>
 8008bac:	6023      	str	r3, [r4, #0]
 8008bae:	bd38      	pop	{r3, r4, r5, pc}
 8008bb0:	2000070c 	.word	0x2000070c

08008bb4 <_sbrk_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	4d06      	ldr	r5, [pc, #24]	@ (8008bd0 <_sbrk_r+0x1c>)
 8008bb8:	2300      	movs	r3, #0
 8008bba:	4604      	mov	r4, r0
 8008bbc:	4608      	mov	r0, r1
 8008bbe:	602b      	str	r3, [r5, #0]
 8008bc0:	f7f9 f846 	bl	8001c50 <_sbrk>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	d102      	bne.n	8008bce <_sbrk_r+0x1a>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	b103      	cbz	r3, 8008bce <_sbrk_r+0x1a>
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	bd38      	pop	{r3, r4, r5, pc}
 8008bd0:	2000070c 	.word	0x2000070c

08008bd4 <_write_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4d07      	ldr	r5, [pc, #28]	@ (8008bf4 <_write_r+0x20>)
 8008bd8:	4604      	mov	r4, r0
 8008bda:	4608      	mov	r0, r1
 8008bdc:	4611      	mov	r1, r2
 8008bde:	2200      	movs	r2, #0
 8008be0:	602a      	str	r2, [r5, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	f7f8 ffe4 	bl	8001bb0 <_write>
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	d102      	bne.n	8008bf2 <_write_r+0x1e>
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	b103      	cbz	r3, 8008bf2 <_write_r+0x1e>
 8008bf0:	6023      	str	r3, [r4, #0]
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
 8008bf4:	2000070c 	.word	0x2000070c

08008bf8 <__errno>:
 8008bf8:	4b01      	ldr	r3, [pc, #4]	@ (8008c00 <__errno+0x8>)
 8008bfa:	6818      	ldr	r0, [r3, #0]
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	20000018 	.word	0x20000018

08008c04 <__libc_init_array>:
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	4d0d      	ldr	r5, [pc, #52]	@ (8008c3c <__libc_init_array+0x38>)
 8008c08:	4c0d      	ldr	r4, [pc, #52]	@ (8008c40 <__libc_init_array+0x3c>)
 8008c0a:	1b64      	subs	r4, r4, r5
 8008c0c:	10a4      	asrs	r4, r4, #2
 8008c0e:	2600      	movs	r6, #0
 8008c10:	42a6      	cmp	r6, r4
 8008c12:	d109      	bne.n	8008c28 <__libc_init_array+0x24>
 8008c14:	4d0b      	ldr	r5, [pc, #44]	@ (8008c44 <__libc_init_array+0x40>)
 8008c16:	4c0c      	ldr	r4, [pc, #48]	@ (8008c48 <__libc_init_array+0x44>)
 8008c18:	f001 fd66 	bl	800a6e8 <_init>
 8008c1c:	1b64      	subs	r4, r4, r5
 8008c1e:	10a4      	asrs	r4, r4, #2
 8008c20:	2600      	movs	r6, #0
 8008c22:	42a6      	cmp	r6, r4
 8008c24:	d105      	bne.n	8008c32 <__libc_init_array+0x2e>
 8008c26:	bd70      	pop	{r4, r5, r6, pc}
 8008c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c2c:	4798      	blx	r3
 8008c2e:	3601      	adds	r6, #1
 8008c30:	e7ee      	b.n	8008c10 <__libc_init_array+0xc>
 8008c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c36:	4798      	blx	r3
 8008c38:	3601      	adds	r6, #1
 8008c3a:	e7f2      	b.n	8008c22 <__libc_init_array+0x1e>
 8008c3c:	0800ab10 	.word	0x0800ab10
 8008c40:	0800ab10 	.word	0x0800ab10
 8008c44:	0800ab10 	.word	0x0800ab10
 8008c48:	0800ab14 	.word	0x0800ab14

08008c4c <__retarget_lock_init_recursive>:
 8008c4c:	4770      	bx	lr

08008c4e <__retarget_lock_acquire_recursive>:
 8008c4e:	4770      	bx	lr

08008c50 <__retarget_lock_release_recursive>:
 8008c50:	4770      	bx	lr

08008c52 <quorem>:
 8008c52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c56:	6903      	ldr	r3, [r0, #16]
 8008c58:	690c      	ldr	r4, [r1, #16]
 8008c5a:	42a3      	cmp	r3, r4
 8008c5c:	4607      	mov	r7, r0
 8008c5e:	db7e      	blt.n	8008d5e <quorem+0x10c>
 8008c60:	3c01      	subs	r4, #1
 8008c62:	f101 0814 	add.w	r8, r1, #20
 8008c66:	00a3      	lsls	r3, r4, #2
 8008c68:	f100 0514 	add.w	r5, r0, #20
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c72:	9301      	str	r3, [sp, #4]
 8008c74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c84:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c88:	d32e      	bcc.n	8008ce8 <quorem+0x96>
 8008c8a:	f04f 0a00 	mov.w	sl, #0
 8008c8e:	46c4      	mov	ip, r8
 8008c90:	46ae      	mov	lr, r5
 8008c92:	46d3      	mov	fp, sl
 8008c94:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c98:	b298      	uxth	r0, r3
 8008c9a:	fb06 a000 	mla	r0, r6, r0, sl
 8008c9e:	0c02      	lsrs	r2, r0, #16
 8008ca0:	0c1b      	lsrs	r3, r3, #16
 8008ca2:	fb06 2303 	mla	r3, r6, r3, r2
 8008ca6:	f8de 2000 	ldr.w	r2, [lr]
 8008caa:	b280      	uxth	r0, r0
 8008cac:	b292      	uxth	r2, r2
 8008cae:	1a12      	subs	r2, r2, r0
 8008cb0:	445a      	add	r2, fp
 8008cb2:	f8de 0000 	ldr.w	r0, [lr]
 8008cb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008cc0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008cc4:	b292      	uxth	r2, r2
 8008cc6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008cca:	45e1      	cmp	r9, ip
 8008ccc:	f84e 2b04 	str.w	r2, [lr], #4
 8008cd0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008cd4:	d2de      	bcs.n	8008c94 <quorem+0x42>
 8008cd6:	9b00      	ldr	r3, [sp, #0]
 8008cd8:	58eb      	ldr	r3, [r5, r3]
 8008cda:	b92b      	cbnz	r3, 8008ce8 <quorem+0x96>
 8008cdc:	9b01      	ldr	r3, [sp, #4]
 8008cde:	3b04      	subs	r3, #4
 8008ce0:	429d      	cmp	r5, r3
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	d32f      	bcc.n	8008d46 <quorem+0xf4>
 8008ce6:	613c      	str	r4, [r7, #16]
 8008ce8:	4638      	mov	r0, r7
 8008cea:	f001 f8c5 	bl	8009e78 <__mcmp>
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	db25      	blt.n	8008d3e <quorem+0xec>
 8008cf2:	4629      	mov	r1, r5
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	f858 2b04 	ldr.w	r2, [r8], #4
 8008cfa:	f8d1 c000 	ldr.w	ip, [r1]
 8008cfe:	fa1f fe82 	uxth.w	lr, r2
 8008d02:	fa1f f38c 	uxth.w	r3, ip
 8008d06:	eba3 030e 	sub.w	r3, r3, lr
 8008d0a:	4403      	add	r3, r0
 8008d0c:	0c12      	lsrs	r2, r2, #16
 8008d0e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008d12:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d1c:	45c1      	cmp	r9, r8
 8008d1e:	f841 3b04 	str.w	r3, [r1], #4
 8008d22:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d26:	d2e6      	bcs.n	8008cf6 <quorem+0xa4>
 8008d28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d30:	b922      	cbnz	r2, 8008d3c <quorem+0xea>
 8008d32:	3b04      	subs	r3, #4
 8008d34:	429d      	cmp	r5, r3
 8008d36:	461a      	mov	r2, r3
 8008d38:	d30b      	bcc.n	8008d52 <quorem+0x100>
 8008d3a:	613c      	str	r4, [r7, #16]
 8008d3c:	3601      	adds	r6, #1
 8008d3e:	4630      	mov	r0, r6
 8008d40:	b003      	add	sp, #12
 8008d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d46:	6812      	ldr	r2, [r2, #0]
 8008d48:	3b04      	subs	r3, #4
 8008d4a:	2a00      	cmp	r2, #0
 8008d4c:	d1cb      	bne.n	8008ce6 <quorem+0x94>
 8008d4e:	3c01      	subs	r4, #1
 8008d50:	e7c6      	b.n	8008ce0 <quorem+0x8e>
 8008d52:	6812      	ldr	r2, [r2, #0]
 8008d54:	3b04      	subs	r3, #4
 8008d56:	2a00      	cmp	r2, #0
 8008d58:	d1ef      	bne.n	8008d3a <quorem+0xe8>
 8008d5a:	3c01      	subs	r4, #1
 8008d5c:	e7ea      	b.n	8008d34 <quorem+0xe2>
 8008d5e:	2000      	movs	r0, #0
 8008d60:	e7ee      	b.n	8008d40 <quorem+0xee>
 8008d62:	0000      	movs	r0, r0
 8008d64:	0000      	movs	r0, r0
	...

08008d68 <_dtoa_r>:
 8008d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6c:	69c7      	ldr	r7, [r0, #28]
 8008d6e:	b099      	sub	sp, #100	@ 0x64
 8008d70:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008d74:	ec55 4b10 	vmov	r4, r5, d0
 8008d78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008d7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8008d7c:	4683      	mov	fp, r0
 8008d7e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d82:	b97f      	cbnz	r7, 8008da4 <_dtoa_r+0x3c>
 8008d84:	2010      	movs	r0, #16
 8008d86:	f7fe ffcf 	bl	8007d28 <malloc>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008d90:	b920      	cbnz	r0, 8008d9c <_dtoa_r+0x34>
 8008d92:	4ba7      	ldr	r3, [pc, #668]	@ (8009030 <_dtoa_r+0x2c8>)
 8008d94:	21ef      	movs	r1, #239	@ 0xef
 8008d96:	48a7      	ldr	r0, [pc, #668]	@ (8009034 <_dtoa_r+0x2cc>)
 8008d98:	f001 fbf6 	bl	800a588 <__assert_func>
 8008d9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008da0:	6007      	str	r7, [r0, #0]
 8008da2:	60c7      	str	r7, [r0, #12]
 8008da4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008da8:	6819      	ldr	r1, [r3, #0]
 8008daa:	b159      	cbz	r1, 8008dc4 <_dtoa_r+0x5c>
 8008dac:	685a      	ldr	r2, [r3, #4]
 8008dae:	604a      	str	r2, [r1, #4]
 8008db0:	2301      	movs	r3, #1
 8008db2:	4093      	lsls	r3, r2
 8008db4:	608b      	str	r3, [r1, #8]
 8008db6:	4658      	mov	r0, fp
 8008db8:	f000 fe24 	bl	8009a04 <_Bfree>
 8008dbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	1e2b      	subs	r3, r5, #0
 8008dc6:	bfb9      	ittee	lt
 8008dc8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008dcc:	9303      	strlt	r3, [sp, #12]
 8008dce:	2300      	movge	r3, #0
 8008dd0:	6033      	strge	r3, [r6, #0]
 8008dd2:	9f03      	ldr	r7, [sp, #12]
 8008dd4:	4b98      	ldr	r3, [pc, #608]	@ (8009038 <_dtoa_r+0x2d0>)
 8008dd6:	bfbc      	itt	lt
 8008dd8:	2201      	movlt	r2, #1
 8008dda:	6032      	strlt	r2, [r6, #0]
 8008ddc:	43bb      	bics	r3, r7
 8008dde:	d112      	bne.n	8008e06 <_dtoa_r+0x9e>
 8008de0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008de2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008de6:	6013      	str	r3, [r2, #0]
 8008de8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008dec:	4323      	orrs	r3, r4
 8008dee:	f000 854d 	beq.w	800988c <_dtoa_r+0xb24>
 8008df2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008df4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800904c <_dtoa_r+0x2e4>
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f000 854f 	beq.w	800989c <_dtoa_r+0xb34>
 8008dfe:	f10a 0303 	add.w	r3, sl, #3
 8008e02:	f000 bd49 	b.w	8009898 <_dtoa_r+0xb30>
 8008e06:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	ec51 0b17 	vmov	r0, r1, d7
 8008e10:	2300      	movs	r3, #0
 8008e12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008e16:	f7f7 fe7f 	bl	8000b18 <__aeabi_dcmpeq>
 8008e1a:	4680      	mov	r8, r0
 8008e1c:	b158      	cbz	r0, 8008e36 <_dtoa_r+0xce>
 8008e1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008e20:	2301      	movs	r3, #1
 8008e22:	6013      	str	r3, [r2, #0]
 8008e24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e26:	b113      	cbz	r3, 8008e2e <_dtoa_r+0xc6>
 8008e28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008e2a:	4b84      	ldr	r3, [pc, #528]	@ (800903c <_dtoa_r+0x2d4>)
 8008e2c:	6013      	str	r3, [r2, #0]
 8008e2e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009050 <_dtoa_r+0x2e8>
 8008e32:	f000 bd33 	b.w	800989c <_dtoa_r+0xb34>
 8008e36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008e3a:	aa16      	add	r2, sp, #88	@ 0x58
 8008e3c:	a917      	add	r1, sp, #92	@ 0x5c
 8008e3e:	4658      	mov	r0, fp
 8008e40:	f001 f8ca 	bl	8009fd8 <__d2b>
 8008e44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008e48:	4681      	mov	r9, r0
 8008e4a:	2e00      	cmp	r6, #0
 8008e4c:	d077      	beq.n	8008f3e <_dtoa_r+0x1d6>
 8008e4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e50:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008e60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008e64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008e68:	4619      	mov	r1, r3
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	4b74      	ldr	r3, [pc, #464]	@ (8009040 <_dtoa_r+0x2d8>)
 8008e6e:	f7f7 fa33 	bl	80002d8 <__aeabi_dsub>
 8008e72:	a369      	add	r3, pc, #420	@ (adr r3, 8009018 <_dtoa_r+0x2b0>)
 8008e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e78:	f7f7 fbe6 	bl	8000648 <__aeabi_dmul>
 8008e7c:	a368      	add	r3, pc, #416	@ (adr r3, 8009020 <_dtoa_r+0x2b8>)
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	f7f7 fa2b 	bl	80002dc <__adddf3>
 8008e86:	4604      	mov	r4, r0
 8008e88:	4630      	mov	r0, r6
 8008e8a:	460d      	mov	r5, r1
 8008e8c:	f7f7 fb72 	bl	8000574 <__aeabi_i2d>
 8008e90:	a365      	add	r3, pc, #404	@ (adr r3, 8009028 <_dtoa_r+0x2c0>)
 8008e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e96:	f7f7 fbd7 	bl	8000648 <__aeabi_dmul>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	f7f7 fa1b 	bl	80002dc <__adddf3>
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	460d      	mov	r5, r1
 8008eaa:	f7f7 fe7d 	bl	8000ba8 <__aeabi_d2iz>
 8008eae:	2200      	movs	r2, #0
 8008eb0:	4607      	mov	r7, r0
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	f7f7 fe38 	bl	8000b2c <__aeabi_dcmplt>
 8008ebc:	b140      	cbz	r0, 8008ed0 <_dtoa_r+0x168>
 8008ebe:	4638      	mov	r0, r7
 8008ec0:	f7f7 fb58 	bl	8000574 <__aeabi_i2d>
 8008ec4:	4622      	mov	r2, r4
 8008ec6:	462b      	mov	r3, r5
 8008ec8:	f7f7 fe26 	bl	8000b18 <__aeabi_dcmpeq>
 8008ecc:	b900      	cbnz	r0, 8008ed0 <_dtoa_r+0x168>
 8008ece:	3f01      	subs	r7, #1
 8008ed0:	2f16      	cmp	r7, #22
 8008ed2:	d851      	bhi.n	8008f78 <_dtoa_r+0x210>
 8008ed4:	4b5b      	ldr	r3, [pc, #364]	@ (8009044 <_dtoa_r+0x2dc>)
 8008ed6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ede:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ee2:	f7f7 fe23 	bl	8000b2c <__aeabi_dcmplt>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d048      	beq.n	8008f7c <_dtoa_r+0x214>
 8008eea:	3f01      	subs	r7, #1
 8008eec:	2300      	movs	r3, #0
 8008eee:	9312      	str	r3, [sp, #72]	@ 0x48
 8008ef0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008ef2:	1b9b      	subs	r3, r3, r6
 8008ef4:	1e5a      	subs	r2, r3, #1
 8008ef6:	bf44      	itt	mi
 8008ef8:	f1c3 0801 	rsbmi	r8, r3, #1
 8008efc:	2300      	movmi	r3, #0
 8008efe:	9208      	str	r2, [sp, #32]
 8008f00:	bf54      	ite	pl
 8008f02:	f04f 0800 	movpl.w	r8, #0
 8008f06:	9308      	strmi	r3, [sp, #32]
 8008f08:	2f00      	cmp	r7, #0
 8008f0a:	db39      	blt.n	8008f80 <_dtoa_r+0x218>
 8008f0c:	9b08      	ldr	r3, [sp, #32]
 8008f0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008f10:	443b      	add	r3, r7
 8008f12:	9308      	str	r3, [sp, #32]
 8008f14:	2300      	movs	r3, #0
 8008f16:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f1a:	2b09      	cmp	r3, #9
 8008f1c:	d864      	bhi.n	8008fe8 <_dtoa_r+0x280>
 8008f1e:	2b05      	cmp	r3, #5
 8008f20:	bfc4      	itt	gt
 8008f22:	3b04      	subgt	r3, #4
 8008f24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f28:	f1a3 0302 	sub.w	r3, r3, #2
 8008f2c:	bfcc      	ite	gt
 8008f2e:	2400      	movgt	r4, #0
 8008f30:	2401      	movle	r4, #1
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d863      	bhi.n	8008ffe <_dtoa_r+0x296>
 8008f36:	e8df f003 	tbb	[pc, r3]
 8008f3a:	372a      	.short	0x372a
 8008f3c:	5535      	.short	0x5535
 8008f3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008f42:	441e      	add	r6, r3
 8008f44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008f48:	2b20      	cmp	r3, #32
 8008f4a:	bfc1      	itttt	gt
 8008f4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008f50:	409f      	lslgt	r7, r3
 8008f52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008f56:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008f5a:	bfd6      	itet	le
 8008f5c:	f1c3 0320 	rsble	r3, r3, #32
 8008f60:	ea47 0003 	orrgt.w	r0, r7, r3
 8008f64:	fa04 f003 	lslle.w	r0, r4, r3
 8008f68:	f7f7 faf4 	bl	8000554 <__aeabi_ui2d>
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008f72:	3e01      	subs	r6, #1
 8008f74:	9214      	str	r2, [sp, #80]	@ 0x50
 8008f76:	e777      	b.n	8008e68 <_dtoa_r+0x100>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e7b8      	b.n	8008eee <_dtoa_r+0x186>
 8008f7c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008f7e:	e7b7      	b.n	8008ef0 <_dtoa_r+0x188>
 8008f80:	427b      	negs	r3, r7
 8008f82:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f84:	2300      	movs	r3, #0
 8008f86:	eba8 0807 	sub.w	r8, r8, r7
 8008f8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f8c:	e7c4      	b.n	8008f18 <_dtoa_r+0x1b0>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	dc35      	bgt.n	8009004 <_dtoa_r+0x29c>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	9307      	str	r3, [sp, #28]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008fa2:	e00b      	b.n	8008fbc <_dtoa_r+0x254>
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e7f3      	b.n	8008f90 <_dtoa_r+0x228>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008fac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fae:	18fb      	adds	r3, r7, r3
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	9307      	str	r3, [sp, #28]
 8008fb8:	bfb8      	it	lt
 8008fba:	2301      	movlt	r3, #1
 8008fbc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	2204      	movs	r2, #4
 8008fc4:	f102 0514 	add.w	r5, r2, #20
 8008fc8:	429d      	cmp	r5, r3
 8008fca:	d91f      	bls.n	800900c <_dtoa_r+0x2a4>
 8008fcc:	6041      	str	r1, [r0, #4]
 8008fce:	4658      	mov	r0, fp
 8008fd0:	f000 fcd8 	bl	8009984 <_Balloc>
 8008fd4:	4682      	mov	sl, r0
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	d13c      	bne.n	8009054 <_dtoa_r+0x2ec>
 8008fda:	4b1b      	ldr	r3, [pc, #108]	@ (8009048 <_dtoa_r+0x2e0>)
 8008fdc:	4602      	mov	r2, r0
 8008fde:	f240 11af 	movw	r1, #431	@ 0x1af
 8008fe2:	e6d8      	b.n	8008d96 <_dtoa_r+0x2e>
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e7e0      	b.n	8008faa <_dtoa_r+0x242>
 8008fe8:	2401      	movs	r4, #1
 8008fea:	2300      	movs	r3, #0
 8008fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fee:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	9307      	str	r3, [sp, #28]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	2312      	movs	r3, #18
 8008ffc:	e7d0      	b.n	8008fa0 <_dtoa_r+0x238>
 8008ffe:	2301      	movs	r3, #1
 8009000:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009002:	e7f5      	b.n	8008ff0 <_dtoa_r+0x288>
 8009004:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	9307      	str	r3, [sp, #28]
 800900a:	e7d7      	b.n	8008fbc <_dtoa_r+0x254>
 800900c:	3101      	adds	r1, #1
 800900e:	0052      	lsls	r2, r2, #1
 8009010:	e7d8      	b.n	8008fc4 <_dtoa_r+0x25c>
 8009012:	bf00      	nop
 8009014:	f3af 8000 	nop.w
 8009018:	636f4361 	.word	0x636f4361
 800901c:	3fd287a7 	.word	0x3fd287a7
 8009020:	8b60c8b3 	.word	0x8b60c8b3
 8009024:	3fc68a28 	.word	0x3fc68a28
 8009028:	509f79fb 	.word	0x509f79fb
 800902c:	3fd34413 	.word	0x3fd34413
 8009030:	0800a7d5 	.word	0x0800a7d5
 8009034:	0800a7ec 	.word	0x0800a7ec
 8009038:	7ff00000 	.word	0x7ff00000
 800903c:	0800a7a5 	.word	0x0800a7a5
 8009040:	3ff80000 	.word	0x3ff80000
 8009044:	0800a8e8 	.word	0x0800a8e8
 8009048:	0800a844 	.word	0x0800a844
 800904c:	0800a7d1 	.word	0x0800a7d1
 8009050:	0800a7a4 	.word	0x0800a7a4
 8009054:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009058:	6018      	str	r0, [r3, #0]
 800905a:	9b07      	ldr	r3, [sp, #28]
 800905c:	2b0e      	cmp	r3, #14
 800905e:	f200 80a4 	bhi.w	80091aa <_dtoa_r+0x442>
 8009062:	2c00      	cmp	r4, #0
 8009064:	f000 80a1 	beq.w	80091aa <_dtoa_r+0x442>
 8009068:	2f00      	cmp	r7, #0
 800906a:	dd33      	ble.n	80090d4 <_dtoa_r+0x36c>
 800906c:	4bad      	ldr	r3, [pc, #692]	@ (8009324 <_dtoa_r+0x5bc>)
 800906e:	f007 020f 	and.w	r2, r7, #15
 8009072:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009076:	ed93 7b00 	vldr	d7, [r3]
 800907a:	05f8      	lsls	r0, r7, #23
 800907c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009080:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009084:	d516      	bpl.n	80090b4 <_dtoa_r+0x34c>
 8009086:	4ba8      	ldr	r3, [pc, #672]	@ (8009328 <_dtoa_r+0x5c0>)
 8009088:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800908c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009090:	f7f7 fc04 	bl	800089c <__aeabi_ddiv>
 8009094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009098:	f004 040f 	and.w	r4, r4, #15
 800909c:	2603      	movs	r6, #3
 800909e:	4da2      	ldr	r5, [pc, #648]	@ (8009328 <_dtoa_r+0x5c0>)
 80090a0:	b954      	cbnz	r4, 80090b8 <_dtoa_r+0x350>
 80090a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090aa:	f7f7 fbf7 	bl	800089c <__aeabi_ddiv>
 80090ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090b2:	e028      	b.n	8009106 <_dtoa_r+0x39e>
 80090b4:	2602      	movs	r6, #2
 80090b6:	e7f2      	b.n	800909e <_dtoa_r+0x336>
 80090b8:	07e1      	lsls	r1, r4, #31
 80090ba:	d508      	bpl.n	80090ce <_dtoa_r+0x366>
 80090bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80090c4:	f7f7 fac0 	bl	8000648 <__aeabi_dmul>
 80090c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090cc:	3601      	adds	r6, #1
 80090ce:	1064      	asrs	r4, r4, #1
 80090d0:	3508      	adds	r5, #8
 80090d2:	e7e5      	b.n	80090a0 <_dtoa_r+0x338>
 80090d4:	f000 80d2 	beq.w	800927c <_dtoa_r+0x514>
 80090d8:	427c      	negs	r4, r7
 80090da:	4b92      	ldr	r3, [pc, #584]	@ (8009324 <_dtoa_r+0x5bc>)
 80090dc:	4d92      	ldr	r5, [pc, #584]	@ (8009328 <_dtoa_r+0x5c0>)
 80090de:	f004 020f 	and.w	r2, r4, #15
 80090e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090ee:	f7f7 faab 	bl	8000648 <__aeabi_dmul>
 80090f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090f6:	1124      	asrs	r4, r4, #4
 80090f8:	2300      	movs	r3, #0
 80090fa:	2602      	movs	r6, #2
 80090fc:	2c00      	cmp	r4, #0
 80090fe:	f040 80b2 	bne.w	8009266 <_dtoa_r+0x4fe>
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1d3      	bne.n	80090ae <_dtoa_r+0x346>
 8009106:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009108:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	f000 80b7 	beq.w	8009280 <_dtoa_r+0x518>
 8009112:	4b86      	ldr	r3, [pc, #536]	@ (800932c <_dtoa_r+0x5c4>)
 8009114:	2200      	movs	r2, #0
 8009116:	4620      	mov	r0, r4
 8009118:	4629      	mov	r1, r5
 800911a:	f7f7 fd07 	bl	8000b2c <__aeabi_dcmplt>
 800911e:	2800      	cmp	r0, #0
 8009120:	f000 80ae 	beq.w	8009280 <_dtoa_r+0x518>
 8009124:	9b07      	ldr	r3, [sp, #28]
 8009126:	2b00      	cmp	r3, #0
 8009128:	f000 80aa 	beq.w	8009280 <_dtoa_r+0x518>
 800912c:	9b00      	ldr	r3, [sp, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	dd37      	ble.n	80091a2 <_dtoa_r+0x43a>
 8009132:	1e7b      	subs	r3, r7, #1
 8009134:	9304      	str	r3, [sp, #16]
 8009136:	4620      	mov	r0, r4
 8009138:	4b7d      	ldr	r3, [pc, #500]	@ (8009330 <_dtoa_r+0x5c8>)
 800913a:	2200      	movs	r2, #0
 800913c:	4629      	mov	r1, r5
 800913e:	f7f7 fa83 	bl	8000648 <__aeabi_dmul>
 8009142:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009146:	9c00      	ldr	r4, [sp, #0]
 8009148:	3601      	adds	r6, #1
 800914a:	4630      	mov	r0, r6
 800914c:	f7f7 fa12 	bl	8000574 <__aeabi_i2d>
 8009150:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009154:	f7f7 fa78 	bl	8000648 <__aeabi_dmul>
 8009158:	4b76      	ldr	r3, [pc, #472]	@ (8009334 <_dtoa_r+0x5cc>)
 800915a:	2200      	movs	r2, #0
 800915c:	f7f7 f8be 	bl	80002dc <__adddf3>
 8009160:	4605      	mov	r5, r0
 8009162:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009166:	2c00      	cmp	r4, #0
 8009168:	f040 808d 	bne.w	8009286 <_dtoa_r+0x51e>
 800916c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009170:	4b71      	ldr	r3, [pc, #452]	@ (8009338 <_dtoa_r+0x5d0>)
 8009172:	2200      	movs	r2, #0
 8009174:	f7f7 f8b0 	bl	80002d8 <__aeabi_dsub>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009180:	462a      	mov	r2, r5
 8009182:	4633      	mov	r3, r6
 8009184:	f7f7 fcf0 	bl	8000b68 <__aeabi_dcmpgt>
 8009188:	2800      	cmp	r0, #0
 800918a:	f040 828b 	bne.w	80096a4 <_dtoa_r+0x93c>
 800918e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009192:	462a      	mov	r2, r5
 8009194:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009198:	f7f7 fcc8 	bl	8000b2c <__aeabi_dcmplt>
 800919c:	2800      	cmp	r0, #0
 800919e:	f040 8128 	bne.w	80093f2 <_dtoa_r+0x68a>
 80091a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80091a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80091aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f2c0 815a 	blt.w	8009466 <_dtoa_r+0x6fe>
 80091b2:	2f0e      	cmp	r7, #14
 80091b4:	f300 8157 	bgt.w	8009466 <_dtoa_r+0x6fe>
 80091b8:	4b5a      	ldr	r3, [pc, #360]	@ (8009324 <_dtoa_r+0x5bc>)
 80091ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80091be:	ed93 7b00 	vldr	d7, [r3]
 80091c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	ed8d 7b00 	vstr	d7, [sp]
 80091ca:	da03      	bge.n	80091d4 <_dtoa_r+0x46c>
 80091cc:	9b07      	ldr	r3, [sp, #28]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	f340 8101 	ble.w	80093d6 <_dtoa_r+0x66e>
 80091d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80091d8:	4656      	mov	r6, sl
 80091da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091de:	4620      	mov	r0, r4
 80091e0:	4629      	mov	r1, r5
 80091e2:	f7f7 fb5b 	bl	800089c <__aeabi_ddiv>
 80091e6:	f7f7 fcdf 	bl	8000ba8 <__aeabi_d2iz>
 80091ea:	4680      	mov	r8, r0
 80091ec:	f7f7 f9c2 	bl	8000574 <__aeabi_i2d>
 80091f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091f4:	f7f7 fa28 	bl	8000648 <__aeabi_dmul>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	4620      	mov	r0, r4
 80091fe:	4629      	mov	r1, r5
 8009200:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009204:	f7f7 f868 	bl	80002d8 <__aeabi_dsub>
 8009208:	f806 4b01 	strb.w	r4, [r6], #1
 800920c:	9d07      	ldr	r5, [sp, #28]
 800920e:	eba6 040a 	sub.w	r4, r6, sl
 8009212:	42a5      	cmp	r5, r4
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	f040 8117 	bne.w	800944a <_dtoa_r+0x6e2>
 800921c:	f7f7 f85e 	bl	80002dc <__adddf3>
 8009220:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009224:	4604      	mov	r4, r0
 8009226:	460d      	mov	r5, r1
 8009228:	f7f7 fc9e 	bl	8000b68 <__aeabi_dcmpgt>
 800922c:	2800      	cmp	r0, #0
 800922e:	f040 80f9 	bne.w	8009424 <_dtoa_r+0x6bc>
 8009232:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009236:	4620      	mov	r0, r4
 8009238:	4629      	mov	r1, r5
 800923a:	f7f7 fc6d 	bl	8000b18 <__aeabi_dcmpeq>
 800923e:	b118      	cbz	r0, 8009248 <_dtoa_r+0x4e0>
 8009240:	f018 0f01 	tst.w	r8, #1
 8009244:	f040 80ee 	bne.w	8009424 <_dtoa_r+0x6bc>
 8009248:	4649      	mov	r1, r9
 800924a:	4658      	mov	r0, fp
 800924c:	f000 fbda 	bl	8009a04 <_Bfree>
 8009250:	2300      	movs	r3, #0
 8009252:	7033      	strb	r3, [r6, #0]
 8009254:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009256:	3701      	adds	r7, #1
 8009258:	601f      	str	r7, [r3, #0]
 800925a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800925c:	2b00      	cmp	r3, #0
 800925e:	f000 831d 	beq.w	800989c <_dtoa_r+0xb34>
 8009262:	601e      	str	r6, [r3, #0]
 8009264:	e31a      	b.n	800989c <_dtoa_r+0xb34>
 8009266:	07e2      	lsls	r2, r4, #31
 8009268:	d505      	bpl.n	8009276 <_dtoa_r+0x50e>
 800926a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800926e:	f7f7 f9eb 	bl	8000648 <__aeabi_dmul>
 8009272:	3601      	adds	r6, #1
 8009274:	2301      	movs	r3, #1
 8009276:	1064      	asrs	r4, r4, #1
 8009278:	3508      	adds	r5, #8
 800927a:	e73f      	b.n	80090fc <_dtoa_r+0x394>
 800927c:	2602      	movs	r6, #2
 800927e:	e742      	b.n	8009106 <_dtoa_r+0x39e>
 8009280:	9c07      	ldr	r4, [sp, #28]
 8009282:	9704      	str	r7, [sp, #16]
 8009284:	e761      	b.n	800914a <_dtoa_r+0x3e2>
 8009286:	4b27      	ldr	r3, [pc, #156]	@ (8009324 <_dtoa_r+0x5bc>)
 8009288:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800928a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800928e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009292:	4454      	add	r4, sl
 8009294:	2900      	cmp	r1, #0
 8009296:	d053      	beq.n	8009340 <_dtoa_r+0x5d8>
 8009298:	4928      	ldr	r1, [pc, #160]	@ (800933c <_dtoa_r+0x5d4>)
 800929a:	2000      	movs	r0, #0
 800929c:	f7f7 fafe 	bl	800089c <__aeabi_ddiv>
 80092a0:	4633      	mov	r3, r6
 80092a2:	462a      	mov	r2, r5
 80092a4:	f7f7 f818 	bl	80002d8 <__aeabi_dsub>
 80092a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80092ac:	4656      	mov	r6, sl
 80092ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092b2:	f7f7 fc79 	bl	8000ba8 <__aeabi_d2iz>
 80092b6:	4605      	mov	r5, r0
 80092b8:	f7f7 f95c 	bl	8000574 <__aeabi_i2d>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092c4:	f7f7 f808 	bl	80002d8 <__aeabi_dsub>
 80092c8:	3530      	adds	r5, #48	@ 0x30
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80092d2:	f806 5b01 	strb.w	r5, [r6], #1
 80092d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80092da:	f7f7 fc27 	bl	8000b2c <__aeabi_dcmplt>
 80092de:	2800      	cmp	r0, #0
 80092e0:	d171      	bne.n	80093c6 <_dtoa_r+0x65e>
 80092e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092e6:	4911      	ldr	r1, [pc, #68]	@ (800932c <_dtoa_r+0x5c4>)
 80092e8:	2000      	movs	r0, #0
 80092ea:	f7f6 fff5 	bl	80002d8 <__aeabi_dsub>
 80092ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80092f2:	f7f7 fc1b 	bl	8000b2c <__aeabi_dcmplt>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	f040 8095 	bne.w	8009426 <_dtoa_r+0x6be>
 80092fc:	42a6      	cmp	r6, r4
 80092fe:	f43f af50 	beq.w	80091a2 <_dtoa_r+0x43a>
 8009302:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009306:	4b0a      	ldr	r3, [pc, #40]	@ (8009330 <_dtoa_r+0x5c8>)
 8009308:	2200      	movs	r2, #0
 800930a:	f7f7 f99d 	bl	8000648 <__aeabi_dmul>
 800930e:	4b08      	ldr	r3, [pc, #32]	@ (8009330 <_dtoa_r+0x5c8>)
 8009310:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009314:	2200      	movs	r2, #0
 8009316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800931a:	f7f7 f995 	bl	8000648 <__aeabi_dmul>
 800931e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009322:	e7c4      	b.n	80092ae <_dtoa_r+0x546>
 8009324:	0800a8e8 	.word	0x0800a8e8
 8009328:	0800a8c0 	.word	0x0800a8c0
 800932c:	3ff00000 	.word	0x3ff00000
 8009330:	40240000 	.word	0x40240000
 8009334:	401c0000 	.word	0x401c0000
 8009338:	40140000 	.word	0x40140000
 800933c:	3fe00000 	.word	0x3fe00000
 8009340:	4631      	mov	r1, r6
 8009342:	4628      	mov	r0, r5
 8009344:	f7f7 f980 	bl	8000648 <__aeabi_dmul>
 8009348:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800934c:	9415      	str	r4, [sp, #84]	@ 0x54
 800934e:	4656      	mov	r6, sl
 8009350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009354:	f7f7 fc28 	bl	8000ba8 <__aeabi_d2iz>
 8009358:	4605      	mov	r5, r0
 800935a:	f7f7 f90b 	bl	8000574 <__aeabi_i2d>
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009366:	f7f6 ffb7 	bl	80002d8 <__aeabi_dsub>
 800936a:	3530      	adds	r5, #48	@ 0x30
 800936c:	f806 5b01 	strb.w	r5, [r6], #1
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	42a6      	cmp	r6, r4
 8009376:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800937a:	f04f 0200 	mov.w	r2, #0
 800937e:	d124      	bne.n	80093ca <_dtoa_r+0x662>
 8009380:	4bac      	ldr	r3, [pc, #688]	@ (8009634 <_dtoa_r+0x8cc>)
 8009382:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009386:	f7f6 ffa9 	bl	80002dc <__adddf3>
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009392:	f7f7 fbe9 	bl	8000b68 <__aeabi_dcmpgt>
 8009396:	2800      	cmp	r0, #0
 8009398:	d145      	bne.n	8009426 <_dtoa_r+0x6be>
 800939a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800939e:	49a5      	ldr	r1, [pc, #660]	@ (8009634 <_dtoa_r+0x8cc>)
 80093a0:	2000      	movs	r0, #0
 80093a2:	f7f6 ff99 	bl	80002d8 <__aeabi_dsub>
 80093a6:	4602      	mov	r2, r0
 80093a8:	460b      	mov	r3, r1
 80093aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093ae:	f7f7 fbbd 	bl	8000b2c <__aeabi_dcmplt>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	f43f aef5 	beq.w	80091a2 <_dtoa_r+0x43a>
 80093b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80093ba:	1e73      	subs	r3, r6, #1
 80093bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80093be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80093c2:	2b30      	cmp	r3, #48	@ 0x30
 80093c4:	d0f8      	beq.n	80093b8 <_dtoa_r+0x650>
 80093c6:	9f04      	ldr	r7, [sp, #16]
 80093c8:	e73e      	b.n	8009248 <_dtoa_r+0x4e0>
 80093ca:	4b9b      	ldr	r3, [pc, #620]	@ (8009638 <_dtoa_r+0x8d0>)
 80093cc:	f7f7 f93c 	bl	8000648 <__aeabi_dmul>
 80093d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093d4:	e7bc      	b.n	8009350 <_dtoa_r+0x5e8>
 80093d6:	d10c      	bne.n	80093f2 <_dtoa_r+0x68a>
 80093d8:	4b98      	ldr	r3, [pc, #608]	@ (800963c <_dtoa_r+0x8d4>)
 80093da:	2200      	movs	r2, #0
 80093dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093e0:	f7f7 f932 	bl	8000648 <__aeabi_dmul>
 80093e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093e8:	f7f7 fbb4 	bl	8000b54 <__aeabi_dcmpge>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	f000 8157 	beq.w	80096a0 <_dtoa_r+0x938>
 80093f2:	2400      	movs	r4, #0
 80093f4:	4625      	mov	r5, r4
 80093f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093f8:	43db      	mvns	r3, r3
 80093fa:	9304      	str	r3, [sp, #16]
 80093fc:	4656      	mov	r6, sl
 80093fe:	2700      	movs	r7, #0
 8009400:	4621      	mov	r1, r4
 8009402:	4658      	mov	r0, fp
 8009404:	f000 fafe 	bl	8009a04 <_Bfree>
 8009408:	2d00      	cmp	r5, #0
 800940a:	d0dc      	beq.n	80093c6 <_dtoa_r+0x65e>
 800940c:	b12f      	cbz	r7, 800941a <_dtoa_r+0x6b2>
 800940e:	42af      	cmp	r7, r5
 8009410:	d003      	beq.n	800941a <_dtoa_r+0x6b2>
 8009412:	4639      	mov	r1, r7
 8009414:	4658      	mov	r0, fp
 8009416:	f000 faf5 	bl	8009a04 <_Bfree>
 800941a:	4629      	mov	r1, r5
 800941c:	4658      	mov	r0, fp
 800941e:	f000 faf1 	bl	8009a04 <_Bfree>
 8009422:	e7d0      	b.n	80093c6 <_dtoa_r+0x65e>
 8009424:	9704      	str	r7, [sp, #16]
 8009426:	4633      	mov	r3, r6
 8009428:	461e      	mov	r6, r3
 800942a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800942e:	2a39      	cmp	r2, #57	@ 0x39
 8009430:	d107      	bne.n	8009442 <_dtoa_r+0x6da>
 8009432:	459a      	cmp	sl, r3
 8009434:	d1f8      	bne.n	8009428 <_dtoa_r+0x6c0>
 8009436:	9a04      	ldr	r2, [sp, #16]
 8009438:	3201      	adds	r2, #1
 800943a:	9204      	str	r2, [sp, #16]
 800943c:	2230      	movs	r2, #48	@ 0x30
 800943e:	f88a 2000 	strb.w	r2, [sl]
 8009442:	781a      	ldrb	r2, [r3, #0]
 8009444:	3201      	adds	r2, #1
 8009446:	701a      	strb	r2, [r3, #0]
 8009448:	e7bd      	b.n	80093c6 <_dtoa_r+0x65e>
 800944a:	4b7b      	ldr	r3, [pc, #492]	@ (8009638 <_dtoa_r+0x8d0>)
 800944c:	2200      	movs	r2, #0
 800944e:	f7f7 f8fb 	bl	8000648 <__aeabi_dmul>
 8009452:	2200      	movs	r2, #0
 8009454:	2300      	movs	r3, #0
 8009456:	4604      	mov	r4, r0
 8009458:	460d      	mov	r5, r1
 800945a:	f7f7 fb5d 	bl	8000b18 <__aeabi_dcmpeq>
 800945e:	2800      	cmp	r0, #0
 8009460:	f43f aebb 	beq.w	80091da <_dtoa_r+0x472>
 8009464:	e6f0      	b.n	8009248 <_dtoa_r+0x4e0>
 8009466:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009468:	2a00      	cmp	r2, #0
 800946a:	f000 80db 	beq.w	8009624 <_dtoa_r+0x8bc>
 800946e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009470:	2a01      	cmp	r2, #1
 8009472:	f300 80bf 	bgt.w	80095f4 <_dtoa_r+0x88c>
 8009476:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009478:	2a00      	cmp	r2, #0
 800947a:	f000 80b7 	beq.w	80095ec <_dtoa_r+0x884>
 800947e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009482:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009484:	4646      	mov	r6, r8
 8009486:	9a08      	ldr	r2, [sp, #32]
 8009488:	2101      	movs	r1, #1
 800948a:	441a      	add	r2, r3
 800948c:	4658      	mov	r0, fp
 800948e:	4498      	add	r8, r3
 8009490:	9208      	str	r2, [sp, #32]
 8009492:	f000 fb6b 	bl	8009b6c <__i2b>
 8009496:	4605      	mov	r5, r0
 8009498:	b15e      	cbz	r6, 80094b2 <_dtoa_r+0x74a>
 800949a:	9b08      	ldr	r3, [sp, #32]
 800949c:	2b00      	cmp	r3, #0
 800949e:	dd08      	ble.n	80094b2 <_dtoa_r+0x74a>
 80094a0:	42b3      	cmp	r3, r6
 80094a2:	9a08      	ldr	r2, [sp, #32]
 80094a4:	bfa8      	it	ge
 80094a6:	4633      	movge	r3, r6
 80094a8:	eba8 0803 	sub.w	r8, r8, r3
 80094ac:	1af6      	subs	r6, r6, r3
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	9308      	str	r3, [sp, #32]
 80094b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094b4:	b1f3      	cbz	r3, 80094f4 <_dtoa_r+0x78c>
 80094b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 80b7 	beq.w	800962c <_dtoa_r+0x8c4>
 80094be:	b18c      	cbz	r4, 80094e4 <_dtoa_r+0x77c>
 80094c0:	4629      	mov	r1, r5
 80094c2:	4622      	mov	r2, r4
 80094c4:	4658      	mov	r0, fp
 80094c6:	f000 fc11 	bl	8009cec <__pow5mult>
 80094ca:	464a      	mov	r2, r9
 80094cc:	4601      	mov	r1, r0
 80094ce:	4605      	mov	r5, r0
 80094d0:	4658      	mov	r0, fp
 80094d2:	f000 fb61 	bl	8009b98 <__multiply>
 80094d6:	4649      	mov	r1, r9
 80094d8:	9004      	str	r0, [sp, #16]
 80094da:	4658      	mov	r0, fp
 80094dc:	f000 fa92 	bl	8009a04 <_Bfree>
 80094e0:	9b04      	ldr	r3, [sp, #16]
 80094e2:	4699      	mov	r9, r3
 80094e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094e6:	1b1a      	subs	r2, r3, r4
 80094e8:	d004      	beq.n	80094f4 <_dtoa_r+0x78c>
 80094ea:	4649      	mov	r1, r9
 80094ec:	4658      	mov	r0, fp
 80094ee:	f000 fbfd 	bl	8009cec <__pow5mult>
 80094f2:	4681      	mov	r9, r0
 80094f4:	2101      	movs	r1, #1
 80094f6:	4658      	mov	r0, fp
 80094f8:	f000 fb38 	bl	8009b6c <__i2b>
 80094fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094fe:	4604      	mov	r4, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	f000 81cf 	beq.w	80098a4 <_dtoa_r+0xb3c>
 8009506:	461a      	mov	r2, r3
 8009508:	4601      	mov	r1, r0
 800950a:	4658      	mov	r0, fp
 800950c:	f000 fbee 	bl	8009cec <__pow5mult>
 8009510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009512:	2b01      	cmp	r3, #1
 8009514:	4604      	mov	r4, r0
 8009516:	f300 8095 	bgt.w	8009644 <_dtoa_r+0x8dc>
 800951a:	9b02      	ldr	r3, [sp, #8]
 800951c:	2b00      	cmp	r3, #0
 800951e:	f040 8087 	bne.w	8009630 <_dtoa_r+0x8c8>
 8009522:	9b03      	ldr	r3, [sp, #12]
 8009524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009528:	2b00      	cmp	r3, #0
 800952a:	f040 8089 	bne.w	8009640 <_dtoa_r+0x8d8>
 800952e:	9b03      	ldr	r3, [sp, #12]
 8009530:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009534:	0d1b      	lsrs	r3, r3, #20
 8009536:	051b      	lsls	r3, r3, #20
 8009538:	b12b      	cbz	r3, 8009546 <_dtoa_r+0x7de>
 800953a:	9b08      	ldr	r3, [sp, #32]
 800953c:	3301      	adds	r3, #1
 800953e:	9308      	str	r3, [sp, #32]
 8009540:	f108 0801 	add.w	r8, r8, #1
 8009544:	2301      	movs	r3, #1
 8009546:	930a      	str	r3, [sp, #40]	@ 0x28
 8009548:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800954a:	2b00      	cmp	r3, #0
 800954c:	f000 81b0 	beq.w	80098b0 <_dtoa_r+0xb48>
 8009550:	6923      	ldr	r3, [r4, #16]
 8009552:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009556:	6918      	ldr	r0, [r3, #16]
 8009558:	f000 fabc 	bl	8009ad4 <__hi0bits>
 800955c:	f1c0 0020 	rsb	r0, r0, #32
 8009560:	9b08      	ldr	r3, [sp, #32]
 8009562:	4418      	add	r0, r3
 8009564:	f010 001f 	ands.w	r0, r0, #31
 8009568:	d077      	beq.n	800965a <_dtoa_r+0x8f2>
 800956a:	f1c0 0320 	rsb	r3, r0, #32
 800956e:	2b04      	cmp	r3, #4
 8009570:	dd6b      	ble.n	800964a <_dtoa_r+0x8e2>
 8009572:	9b08      	ldr	r3, [sp, #32]
 8009574:	f1c0 001c 	rsb	r0, r0, #28
 8009578:	4403      	add	r3, r0
 800957a:	4480      	add	r8, r0
 800957c:	4406      	add	r6, r0
 800957e:	9308      	str	r3, [sp, #32]
 8009580:	f1b8 0f00 	cmp.w	r8, #0
 8009584:	dd05      	ble.n	8009592 <_dtoa_r+0x82a>
 8009586:	4649      	mov	r1, r9
 8009588:	4642      	mov	r2, r8
 800958a:	4658      	mov	r0, fp
 800958c:	f000 fc08 	bl	8009da0 <__lshift>
 8009590:	4681      	mov	r9, r0
 8009592:	9b08      	ldr	r3, [sp, #32]
 8009594:	2b00      	cmp	r3, #0
 8009596:	dd05      	ble.n	80095a4 <_dtoa_r+0x83c>
 8009598:	4621      	mov	r1, r4
 800959a:	461a      	mov	r2, r3
 800959c:	4658      	mov	r0, fp
 800959e:	f000 fbff 	bl	8009da0 <__lshift>
 80095a2:	4604      	mov	r4, r0
 80095a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d059      	beq.n	800965e <_dtoa_r+0x8f6>
 80095aa:	4621      	mov	r1, r4
 80095ac:	4648      	mov	r0, r9
 80095ae:	f000 fc63 	bl	8009e78 <__mcmp>
 80095b2:	2800      	cmp	r0, #0
 80095b4:	da53      	bge.n	800965e <_dtoa_r+0x8f6>
 80095b6:	1e7b      	subs	r3, r7, #1
 80095b8:	9304      	str	r3, [sp, #16]
 80095ba:	4649      	mov	r1, r9
 80095bc:	2300      	movs	r3, #0
 80095be:	220a      	movs	r2, #10
 80095c0:	4658      	mov	r0, fp
 80095c2:	f000 fa41 	bl	8009a48 <__multadd>
 80095c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095c8:	4681      	mov	r9, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 8172 	beq.w	80098b4 <_dtoa_r+0xb4c>
 80095d0:	2300      	movs	r3, #0
 80095d2:	4629      	mov	r1, r5
 80095d4:	220a      	movs	r2, #10
 80095d6:	4658      	mov	r0, fp
 80095d8:	f000 fa36 	bl	8009a48 <__multadd>
 80095dc:	9b00      	ldr	r3, [sp, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	4605      	mov	r5, r0
 80095e2:	dc67      	bgt.n	80096b4 <_dtoa_r+0x94c>
 80095e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	dc41      	bgt.n	800966e <_dtoa_r+0x906>
 80095ea:	e063      	b.n	80096b4 <_dtoa_r+0x94c>
 80095ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80095ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80095f2:	e746      	b.n	8009482 <_dtoa_r+0x71a>
 80095f4:	9b07      	ldr	r3, [sp, #28]
 80095f6:	1e5c      	subs	r4, r3, #1
 80095f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095fa:	42a3      	cmp	r3, r4
 80095fc:	bfbf      	itttt	lt
 80095fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009600:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009602:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009604:	1ae3      	sublt	r3, r4, r3
 8009606:	bfb4      	ite	lt
 8009608:	18d2      	addlt	r2, r2, r3
 800960a:	1b1c      	subge	r4, r3, r4
 800960c:	9b07      	ldr	r3, [sp, #28]
 800960e:	bfbc      	itt	lt
 8009610:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009612:	2400      	movlt	r4, #0
 8009614:	2b00      	cmp	r3, #0
 8009616:	bfb5      	itete	lt
 8009618:	eba8 0603 	sublt.w	r6, r8, r3
 800961c:	9b07      	ldrge	r3, [sp, #28]
 800961e:	2300      	movlt	r3, #0
 8009620:	4646      	movge	r6, r8
 8009622:	e730      	b.n	8009486 <_dtoa_r+0x71e>
 8009624:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009626:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009628:	4646      	mov	r6, r8
 800962a:	e735      	b.n	8009498 <_dtoa_r+0x730>
 800962c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800962e:	e75c      	b.n	80094ea <_dtoa_r+0x782>
 8009630:	2300      	movs	r3, #0
 8009632:	e788      	b.n	8009546 <_dtoa_r+0x7de>
 8009634:	3fe00000 	.word	0x3fe00000
 8009638:	40240000 	.word	0x40240000
 800963c:	40140000 	.word	0x40140000
 8009640:	9b02      	ldr	r3, [sp, #8]
 8009642:	e780      	b.n	8009546 <_dtoa_r+0x7de>
 8009644:	2300      	movs	r3, #0
 8009646:	930a      	str	r3, [sp, #40]	@ 0x28
 8009648:	e782      	b.n	8009550 <_dtoa_r+0x7e8>
 800964a:	d099      	beq.n	8009580 <_dtoa_r+0x818>
 800964c:	9a08      	ldr	r2, [sp, #32]
 800964e:	331c      	adds	r3, #28
 8009650:	441a      	add	r2, r3
 8009652:	4498      	add	r8, r3
 8009654:	441e      	add	r6, r3
 8009656:	9208      	str	r2, [sp, #32]
 8009658:	e792      	b.n	8009580 <_dtoa_r+0x818>
 800965a:	4603      	mov	r3, r0
 800965c:	e7f6      	b.n	800964c <_dtoa_r+0x8e4>
 800965e:	9b07      	ldr	r3, [sp, #28]
 8009660:	9704      	str	r7, [sp, #16]
 8009662:	2b00      	cmp	r3, #0
 8009664:	dc20      	bgt.n	80096a8 <_dtoa_r+0x940>
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800966a:	2b02      	cmp	r3, #2
 800966c:	dd1e      	ble.n	80096ac <_dtoa_r+0x944>
 800966e:	9b00      	ldr	r3, [sp, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	f47f aec0 	bne.w	80093f6 <_dtoa_r+0x68e>
 8009676:	4621      	mov	r1, r4
 8009678:	2205      	movs	r2, #5
 800967a:	4658      	mov	r0, fp
 800967c:	f000 f9e4 	bl	8009a48 <__multadd>
 8009680:	4601      	mov	r1, r0
 8009682:	4604      	mov	r4, r0
 8009684:	4648      	mov	r0, r9
 8009686:	f000 fbf7 	bl	8009e78 <__mcmp>
 800968a:	2800      	cmp	r0, #0
 800968c:	f77f aeb3 	ble.w	80093f6 <_dtoa_r+0x68e>
 8009690:	4656      	mov	r6, sl
 8009692:	2331      	movs	r3, #49	@ 0x31
 8009694:	f806 3b01 	strb.w	r3, [r6], #1
 8009698:	9b04      	ldr	r3, [sp, #16]
 800969a:	3301      	adds	r3, #1
 800969c:	9304      	str	r3, [sp, #16]
 800969e:	e6ae      	b.n	80093fe <_dtoa_r+0x696>
 80096a0:	9c07      	ldr	r4, [sp, #28]
 80096a2:	9704      	str	r7, [sp, #16]
 80096a4:	4625      	mov	r5, r4
 80096a6:	e7f3      	b.n	8009690 <_dtoa_r+0x928>
 80096a8:	9b07      	ldr	r3, [sp, #28]
 80096aa:	9300      	str	r3, [sp, #0]
 80096ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f000 8104 	beq.w	80098bc <_dtoa_r+0xb54>
 80096b4:	2e00      	cmp	r6, #0
 80096b6:	dd05      	ble.n	80096c4 <_dtoa_r+0x95c>
 80096b8:	4629      	mov	r1, r5
 80096ba:	4632      	mov	r2, r6
 80096bc:	4658      	mov	r0, fp
 80096be:	f000 fb6f 	bl	8009da0 <__lshift>
 80096c2:	4605      	mov	r5, r0
 80096c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d05a      	beq.n	8009780 <_dtoa_r+0xa18>
 80096ca:	6869      	ldr	r1, [r5, #4]
 80096cc:	4658      	mov	r0, fp
 80096ce:	f000 f959 	bl	8009984 <_Balloc>
 80096d2:	4606      	mov	r6, r0
 80096d4:	b928      	cbnz	r0, 80096e2 <_dtoa_r+0x97a>
 80096d6:	4b84      	ldr	r3, [pc, #528]	@ (80098e8 <_dtoa_r+0xb80>)
 80096d8:	4602      	mov	r2, r0
 80096da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80096de:	f7ff bb5a 	b.w	8008d96 <_dtoa_r+0x2e>
 80096e2:	692a      	ldr	r2, [r5, #16]
 80096e4:	3202      	adds	r2, #2
 80096e6:	0092      	lsls	r2, r2, #2
 80096e8:	f105 010c 	add.w	r1, r5, #12
 80096ec:	300c      	adds	r0, #12
 80096ee:	f000 ff3d 	bl	800a56c <memcpy>
 80096f2:	2201      	movs	r2, #1
 80096f4:	4631      	mov	r1, r6
 80096f6:	4658      	mov	r0, fp
 80096f8:	f000 fb52 	bl	8009da0 <__lshift>
 80096fc:	f10a 0301 	add.w	r3, sl, #1
 8009700:	9307      	str	r3, [sp, #28]
 8009702:	9b00      	ldr	r3, [sp, #0]
 8009704:	4453      	add	r3, sl
 8009706:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009708:	9b02      	ldr	r3, [sp, #8]
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	462f      	mov	r7, r5
 8009710:	930a      	str	r3, [sp, #40]	@ 0x28
 8009712:	4605      	mov	r5, r0
 8009714:	9b07      	ldr	r3, [sp, #28]
 8009716:	4621      	mov	r1, r4
 8009718:	3b01      	subs	r3, #1
 800971a:	4648      	mov	r0, r9
 800971c:	9300      	str	r3, [sp, #0]
 800971e:	f7ff fa98 	bl	8008c52 <quorem>
 8009722:	4639      	mov	r1, r7
 8009724:	9002      	str	r0, [sp, #8]
 8009726:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800972a:	4648      	mov	r0, r9
 800972c:	f000 fba4 	bl	8009e78 <__mcmp>
 8009730:	462a      	mov	r2, r5
 8009732:	9008      	str	r0, [sp, #32]
 8009734:	4621      	mov	r1, r4
 8009736:	4658      	mov	r0, fp
 8009738:	f000 fbba 	bl	8009eb0 <__mdiff>
 800973c:	68c2      	ldr	r2, [r0, #12]
 800973e:	4606      	mov	r6, r0
 8009740:	bb02      	cbnz	r2, 8009784 <_dtoa_r+0xa1c>
 8009742:	4601      	mov	r1, r0
 8009744:	4648      	mov	r0, r9
 8009746:	f000 fb97 	bl	8009e78 <__mcmp>
 800974a:	4602      	mov	r2, r0
 800974c:	4631      	mov	r1, r6
 800974e:	4658      	mov	r0, fp
 8009750:	920e      	str	r2, [sp, #56]	@ 0x38
 8009752:	f000 f957 	bl	8009a04 <_Bfree>
 8009756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009758:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800975a:	9e07      	ldr	r6, [sp, #28]
 800975c:	ea43 0102 	orr.w	r1, r3, r2
 8009760:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009762:	4319      	orrs	r1, r3
 8009764:	d110      	bne.n	8009788 <_dtoa_r+0xa20>
 8009766:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800976a:	d029      	beq.n	80097c0 <_dtoa_r+0xa58>
 800976c:	9b08      	ldr	r3, [sp, #32]
 800976e:	2b00      	cmp	r3, #0
 8009770:	dd02      	ble.n	8009778 <_dtoa_r+0xa10>
 8009772:	9b02      	ldr	r3, [sp, #8]
 8009774:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009778:	9b00      	ldr	r3, [sp, #0]
 800977a:	f883 8000 	strb.w	r8, [r3]
 800977e:	e63f      	b.n	8009400 <_dtoa_r+0x698>
 8009780:	4628      	mov	r0, r5
 8009782:	e7bb      	b.n	80096fc <_dtoa_r+0x994>
 8009784:	2201      	movs	r2, #1
 8009786:	e7e1      	b.n	800974c <_dtoa_r+0x9e4>
 8009788:	9b08      	ldr	r3, [sp, #32]
 800978a:	2b00      	cmp	r3, #0
 800978c:	db04      	blt.n	8009798 <_dtoa_r+0xa30>
 800978e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009790:	430b      	orrs	r3, r1
 8009792:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009794:	430b      	orrs	r3, r1
 8009796:	d120      	bne.n	80097da <_dtoa_r+0xa72>
 8009798:	2a00      	cmp	r2, #0
 800979a:	dded      	ble.n	8009778 <_dtoa_r+0xa10>
 800979c:	4649      	mov	r1, r9
 800979e:	2201      	movs	r2, #1
 80097a0:	4658      	mov	r0, fp
 80097a2:	f000 fafd 	bl	8009da0 <__lshift>
 80097a6:	4621      	mov	r1, r4
 80097a8:	4681      	mov	r9, r0
 80097aa:	f000 fb65 	bl	8009e78 <__mcmp>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	dc03      	bgt.n	80097ba <_dtoa_r+0xa52>
 80097b2:	d1e1      	bne.n	8009778 <_dtoa_r+0xa10>
 80097b4:	f018 0f01 	tst.w	r8, #1
 80097b8:	d0de      	beq.n	8009778 <_dtoa_r+0xa10>
 80097ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80097be:	d1d8      	bne.n	8009772 <_dtoa_r+0xa0a>
 80097c0:	9a00      	ldr	r2, [sp, #0]
 80097c2:	2339      	movs	r3, #57	@ 0x39
 80097c4:	7013      	strb	r3, [r2, #0]
 80097c6:	4633      	mov	r3, r6
 80097c8:	461e      	mov	r6, r3
 80097ca:	3b01      	subs	r3, #1
 80097cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80097d0:	2a39      	cmp	r2, #57	@ 0x39
 80097d2:	d052      	beq.n	800987a <_dtoa_r+0xb12>
 80097d4:	3201      	adds	r2, #1
 80097d6:	701a      	strb	r2, [r3, #0]
 80097d8:	e612      	b.n	8009400 <_dtoa_r+0x698>
 80097da:	2a00      	cmp	r2, #0
 80097dc:	dd07      	ble.n	80097ee <_dtoa_r+0xa86>
 80097de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80097e2:	d0ed      	beq.n	80097c0 <_dtoa_r+0xa58>
 80097e4:	9a00      	ldr	r2, [sp, #0]
 80097e6:	f108 0301 	add.w	r3, r8, #1
 80097ea:	7013      	strb	r3, [r2, #0]
 80097ec:	e608      	b.n	8009400 <_dtoa_r+0x698>
 80097ee:	9b07      	ldr	r3, [sp, #28]
 80097f0:	9a07      	ldr	r2, [sp, #28]
 80097f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80097f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d028      	beq.n	800984e <_dtoa_r+0xae6>
 80097fc:	4649      	mov	r1, r9
 80097fe:	2300      	movs	r3, #0
 8009800:	220a      	movs	r2, #10
 8009802:	4658      	mov	r0, fp
 8009804:	f000 f920 	bl	8009a48 <__multadd>
 8009808:	42af      	cmp	r7, r5
 800980a:	4681      	mov	r9, r0
 800980c:	f04f 0300 	mov.w	r3, #0
 8009810:	f04f 020a 	mov.w	r2, #10
 8009814:	4639      	mov	r1, r7
 8009816:	4658      	mov	r0, fp
 8009818:	d107      	bne.n	800982a <_dtoa_r+0xac2>
 800981a:	f000 f915 	bl	8009a48 <__multadd>
 800981e:	4607      	mov	r7, r0
 8009820:	4605      	mov	r5, r0
 8009822:	9b07      	ldr	r3, [sp, #28]
 8009824:	3301      	adds	r3, #1
 8009826:	9307      	str	r3, [sp, #28]
 8009828:	e774      	b.n	8009714 <_dtoa_r+0x9ac>
 800982a:	f000 f90d 	bl	8009a48 <__multadd>
 800982e:	4629      	mov	r1, r5
 8009830:	4607      	mov	r7, r0
 8009832:	2300      	movs	r3, #0
 8009834:	220a      	movs	r2, #10
 8009836:	4658      	mov	r0, fp
 8009838:	f000 f906 	bl	8009a48 <__multadd>
 800983c:	4605      	mov	r5, r0
 800983e:	e7f0      	b.n	8009822 <_dtoa_r+0xaba>
 8009840:	9b00      	ldr	r3, [sp, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	bfcc      	ite	gt
 8009846:	461e      	movgt	r6, r3
 8009848:	2601      	movle	r6, #1
 800984a:	4456      	add	r6, sl
 800984c:	2700      	movs	r7, #0
 800984e:	4649      	mov	r1, r9
 8009850:	2201      	movs	r2, #1
 8009852:	4658      	mov	r0, fp
 8009854:	f000 faa4 	bl	8009da0 <__lshift>
 8009858:	4621      	mov	r1, r4
 800985a:	4681      	mov	r9, r0
 800985c:	f000 fb0c 	bl	8009e78 <__mcmp>
 8009860:	2800      	cmp	r0, #0
 8009862:	dcb0      	bgt.n	80097c6 <_dtoa_r+0xa5e>
 8009864:	d102      	bne.n	800986c <_dtoa_r+0xb04>
 8009866:	f018 0f01 	tst.w	r8, #1
 800986a:	d1ac      	bne.n	80097c6 <_dtoa_r+0xa5e>
 800986c:	4633      	mov	r3, r6
 800986e:	461e      	mov	r6, r3
 8009870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009874:	2a30      	cmp	r2, #48	@ 0x30
 8009876:	d0fa      	beq.n	800986e <_dtoa_r+0xb06>
 8009878:	e5c2      	b.n	8009400 <_dtoa_r+0x698>
 800987a:	459a      	cmp	sl, r3
 800987c:	d1a4      	bne.n	80097c8 <_dtoa_r+0xa60>
 800987e:	9b04      	ldr	r3, [sp, #16]
 8009880:	3301      	adds	r3, #1
 8009882:	9304      	str	r3, [sp, #16]
 8009884:	2331      	movs	r3, #49	@ 0x31
 8009886:	f88a 3000 	strb.w	r3, [sl]
 800988a:	e5b9      	b.n	8009400 <_dtoa_r+0x698>
 800988c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800988e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80098ec <_dtoa_r+0xb84>
 8009892:	b11b      	cbz	r3, 800989c <_dtoa_r+0xb34>
 8009894:	f10a 0308 	add.w	r3, sl, #8
 8009898:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800989a:	6013      	str	r3, [r2, #0]
 800989c:	4650      	mov	r0, sl
 800989e:	b019      	add	sp, #100	@ 0x64
 80098a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	f77f ae37 	ble.w	800951a <_dtoa_r+0x7b2>
 80098ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80098b0:	2001      	movs	r0, #1
 80098b2:	e655      	b.n	8009560 <_dtoa_r+0x7f8>
 80098b4:	9b00      	ldr	r3, [sp, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f77f aed6 	ble.w	8009668 <_dtoa_r+0x900>
 80098bc:	4656      	mov	r6, sl
 80098be:	4621      	mov	r1, r4
 80098c0:	4648      	mov	r0, r9
 80098c2:	f7ff f9c6 	bl	8008c52 <quorem>
 80098c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80098ca:	f806 8b01 	strb.w	r8, [r6], #1
 80098ce:	9b00      	ldr	r3, [sp, #0]
 80098d0:	eba6 020a 	sub.w	r2, r6, sl
 80098d4:	4293      	cmp	r3, r2
 80098d6:	ddb3      	ble.n	8009840 <_dtoa_r+0xad8>
 80098d8:	4649      	mov	r1, r9
 80098da:	2300      	movs	r3, #0
 80098dc:	220a      	movs	r2, #10
 80098de:	4658      	mov	r0, fp
 80098e0:	f000 f8b2 	bl	8009a48 <__multadd>
 80098e4:	4681      	mov	r9, r0
 80098e6:	e7ea      	b.n	80098be <_dtoa_r+0xb56>
 80098e8:	0800a844 	.word	0x0800a844
 80098ec:	0800a7c8 	.word	0x0800a7c8

080098f0 <_free_r>:
 80098f0:	b538      	push	{r3, r4, r5, lr}
 80098f2:	4605      	mov	r5, r0
 80098f4:	2900      	cmp	r1, #0
 80098f6:	d041      	beq.n	800997c <_free_r+0x8c>
 80098f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098fc:	1f0c      	subs	r4, r1, #4
 80098fe:	2b00      	cmp	r3, #0
 8009900:	bfb8      	it	lt
 8009902:	18e4      	addlt	r4, r4, r3
 8009904:	f7fe faba 	bl	8007e7c <__malloc_lock>
 8009908:	4a1d      	ldr	r2, [pc, #116]	@ (8009980 <_free_r+0x90>)
 800990a:	6813      	ldr	r3, [r2, #0]
 800990c:	b933      	cbnz	r3, 800991c <_free_r+0x2c>
 800990e:	6063      	str	r3, [r4, #4]
 8009910:	6014      	str	r4, [r2, #0]
 8009912:	4628      	mov	r0, r5
 8009914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009918:	f7fe bab6 	b.w	8007e88 <__malloc_unlock>
 800991c:	42a3      	cmp	r3, r4
 800991e:	d908      	bls.n	8009932 <_free_r+0x42>
 8009920:	6820      	ldr	r0, [r4, #0]
 8009922:	1821      	adds	r1, r4, r0
 8009924:	428b      	cmp	r3, r1
 8009926:	bf01      	itttt	eq
 8009928:	6819      	ldreq	r1, [r3, #0]
 800992a:	685b      	ldreq	r3, [r3, #4]
 800992c:	1809      	addeq	r1, r1, r0
 800992e:	6021      	streq	r1, [r4, #0]
 8009930:	e7ed      	b.n	800990e <_free_r+0x1e>
 8009932:	461a      	mov	r2, r3
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	b10b      	cbz	r3, 800993c <_free_r+0x4c>
 8009938:	42a3      	cmp	r3, r4
 800993a:	d9fa      	bls.n	8009932 <_free_r+0x42>
 800993c:	6811      	ldr	r1, [r2, #0]
 800993e:	1850      	adds	r0, r2, r1
 8009940:	42a0      	cmp	r0, r4
 8009942:	d10b      	bne.n	800995c <_free_r+0x6c>
 8009944:	6820      	ldr	r0, [r4, #0]
 8009946:	4401      	add	r1, r0
 8009948:	1850      	adds	r0, r2, r1
 800994a:	4283      	cmp	r3, r0
 800994c:	6011      	str	r1, [r2, #0]
 800994e:	d1e0      	bne.n	8009912 <_free_r+0x22>
 8009950:	6818      	ldr	r0, [r3, #0]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	6053      	str	r3, [r2, #4]
 8009956:	4408      	add	r0, r1
 8009958:	6010      	str	r0, [r2, #0]
 800995a:	e7da      	b.n	8009912 <_free_r+0x22>
 800995c:	d902      	bls.n	8009964 <_free_r+0x74>
 800995e:	230c      	movs	r3, #12
 8009960:	602b      	str	r3, [r5, #0]
 8009962:	e7d6      	b.n	8009912 <_free_r+0x22>
 8009964:	6820      	ldr	r0, [r4, #0]
 8009966:	1821      	adds	r1, r4, r0
 8009968:	428b      	cmp	r3, r1
 800996a:	bf04      	itt	eq
 800996c:	6819      	ldreq	r1, [r3, #0]
 800996e:	685b      	ldreq	r3, [r3, #4]
 8009970:	6063      	str	r3, [r4, #4]
 8009972:	bf04      	itt	eq
 8009974:	1809      	addeq	r1, r1, r0
 8009976:	6021      	streq	r1, [r4, #0]
 8009978:	6054      	str	r4, [r2, #4]
 800997a:	e7ca      	b.n	8009912 <_free_r+0x22>
 800997c:	bd38      	pop	{r3, r4, r5, pc}
 800997e:	bf00      	nop
 8009980:	200005cc 	.word	0x200005cc

08009984 <_Balloc>:
 8009984:	b570      	push	{r4, r5, r6, lr}
 8009986:	69c6      	ldr	r6, [r0, #28]
 8009988:	4604      	mov	r4, r0
 800998a:	460d      	mov	r5, r1
 800998c:	b976      	cbnz	r6, 80099ac <_Balloc+0x28>
 800998e:	2010      	movs	r0, #16
 8009990:	f7fe f9ca 	bl	8007d28 <malloc>
 8009994:	4602      	mov	r2, r0
 8009996:	61e0      	str	r0, [r4, #28]
 8009998:	b920      	cbnz	r0, 80099a4 <_Balloc+0x20>
 800999a:	4b18      	ldr	r3, [pc, #96]	@ (80099fc <_Balloc+0x78>)
 800999c:	4818      	ldr	r0, [pc, #96]	@ (8009a00 <_Balloc+0x7c>)
 800999e:	216b      	movs	r1, #107	@ 0x6b
 80099a0:	f000 fdf2 	bl	800a588 <__assert_func>
 80099a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099a8:	6006      	str	r6, [r0, #0]
 80099aa:	60c6      	str	r6, [r0, #12]
 80099ac:	69e6      	ldr	r6, [r4, #28]
 80099ae:	68f3      	ldr	r3, [r6, #12]
 80099b0:	b183      	cbz	r3, 80099d4 <_Balloc+0x50>
 80099b2:	69e3      	ldr	r3, [r4, #28]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099ba:	b9b8      	cbnz	r0, 80099ec <_Balloc+0x68>
 80099bc:	2101      	movs	r1, #1
 80099be:	fa01 f605 	lsl.w	r6, r1, r5
 80099c2:	1d72      	adds	r2, r6, #5
 80099c4:	0092      	lsls	r2, r2, #2
 80099c6:	4620      	mov	r0, r4
 80099c8:	f000 fdfc 	bl	800a5c4 <_calloc_r>
 80099cc:	b160      	cbz	r0, 80099e8 <_Balloc+0x64>
 80099ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80099d2:	e00e      	b.n	80099f2 <_Balloc+0x6e>
 80099d4:	2221      	movs	r2, #33	@ 0x21
 80099d6:	2104      	movs	r1, #4
 80099d8:	4620      	mov	r0, r4
 80099da:	f000 fdf3 	bl	800a5c4 <_calloc_r>
 80099de:	69e3      	ldr	r3, [r4, #28]
 80099e0:	60f0      	str	r0, [r6, #12]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1e4      	bne.n	80099b2 <_Balloc+0x2e>
 80099e8:	2000      	movs	r0, #0
 80099ea:	bd70      	pop	{r4, r5, r6, pc}
 80099ec:	6802      	ldr	r2, [r0, #0]
 80099ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80099f2:	2300      	movs	r3, #0
 80099f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80099f8:	e7f7      	b.n	80099ea <_Balloc+0x66>
 80099fa:	bf00      	nop
 80099fc:	0800a7d5 	.word	0x0800a7d5
 8009a00:	0800a855 	.word	0x0800a855

08009a04 <_Bfree>:
 8009a04:	b570      	push	{r4, r5, r6, lr}
 8009a06:	69c6      	ldr	r6, [r0, #28]
 8009a08:	4605      	mov	r5, r0
 8009a0a:	460c      	mov	r4, r1
 8009a0c:	b976      	cbnz	r6, 8009a2c <_Bfree+0x28>
 8009a0e:	2010      	movs	r0, #16
 8009a10:	f7fe f98a 	bl	8007d28 <malloc>
 8009a14:	4602      	mov	r2, r0
 8009a16:	61e8      	str	r0, [r5, #28]
 8009a18:	b920      	cbnz	r0, 8009a24 <_Bfree+0x20>
 8009a1a:	4b09      	ldr	r3, [pc, #36]	@ (8009a40 <_Bfree+0x3c>)
 8009a1c:	4809      	ldr	r0, [pc, #36]	@ (8009a44 <_Bfree+0x40>)
 8009a1e:	218f      	movs	r1, #143	@ 0x8f
 8009a20:	f000 fdb2 	bl	800a588 <__assert_func>
 8009a24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a28:	6006      	str	r6, [r0, #0]
 8009a2a:	60c6      	str	r6, [r0, #12]
 8009a2c:	b13c      	cbz	r4, 8009a3e <_Bfree+0x3a>
 8009a2e:	69eb      	ldr	r3, [r5, #28]
 8009a30:	6862      	ldr	r2, [r4, #4]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a38:	6021      	str	r1, [r4, #0]
 8009a3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a3e:	bd70      	pop	{r4, r5, r6, pc}
 8009a40:	0800a7d5 	.word	0x0800a7d5
 8009a44:	0800a855 	.word	0x0800a855

08009a48 <__multadd>:
 8009a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a4c:	690d      	ldr	r5, [r1, #16]
 8009a4e:	4607      	mov	r7, r0
 8009a50:	460c      	mov	r4, r1
 8009a52:	461e      	mov	r6, r3
 8009a54:	f101 0c14 	add.w	ip, r1, #20
 8009a58:	2000      	movs	r0, #0
 8009a5a:	f8dc 3000 	ldr.w	r3, [ip]
 8009a5e:	b299      	uxth	r1, r3
 8009a60:	fb02 6101 	mla	r1, r2, r1, r6
 8009a64:	0c1e      	lsrs	r6, r3, #16
 8009a66:	0c0b      	lsrs	r3, r1, #16
 8009a68:	fb02 3306 	mla	r3, r2, r6, r3
 8009a6c:	b289      	uxth	r1, r1
 8009a6e:	3001      	adds	r0, #1
 8009a70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a74:	4285      	cmp	r5, r0
 8009a76:	f84c 1b04 	str.w	r1, [ip], #4
 8009a7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a7e:	dcec      	bgt.n	8009a5a <__multadd+0x12>
 8009a80:	b30e      	cbz	r6, 8009ac6 <__multadd+0x7e>
 8009a82:	68a3      	ldr	r3, [r4, #8]
 8009a84:	42ab      	cmp	r3, r5
 8009a86:	dc19      	bgt.n	8009abc <__multadd+0x74>
 8009a88:	6861      	ldr	r1, [r4, #4]
 8009a8a:	4638      	mov	r0, r7
 8009a8c:	3101      	adds	r1, #1
 8009a8e:	f7ff ff79 	bl	8009984 <_Balloc>
 8009a92:	4680      	mov	r8, r0
 8009a94:	b928      	cbnz	r0, 8009aa2 <__multadd+0x5a>
 8009a96:	4602      	mov	r2, r0
 8009a98:	4b0c      	ldr	r3, [pc, #48]	@ (8009acc <__multadd+0x84>)
 8009a9a:	480d      	ldr	r0, [pc, #52]	@ (8009ad0 <__multadd+0x88>)
 8009a9c:	21ba      	movs	r1, #186	@ 0xba
 8009a9e:	f000 fd73 	bl	800a588 <__assert_func>
 8009aa2:	6922      	ldr	r2, [r4, #16]
 8009aa4:	3202      	adds	r2, #2
 8009aa6:	f104 010c 	add.w	r1, r4, #12
 8009aaa:	0092      	lsls	r2, r2, #2
 8009aac:	300c      	adds	r0, #12
 8009aae:	f000 fd5d 	bl	800a56c <memcpy>
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	4638      	mov	r0, r7
 8009ab6:	f7ff ffa5 	bl	8009a04 <_Bfree>
 8009aba:	4644      	mov	r4, r8
 8009abc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ac0:	3501      	adds	r5, #1
 8009ac2:	615e      	str	r6, [r3, #20]
 8009ac4:	6125      	str	r5, [r4, #16]
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009acc:	0800a844 	.word	0x0800a844
 8009ad0:	0800a855 	.word	0x0800a855

08009ad4 <__hi0bits>:
 8009ad4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009ad8:	4603      	mov	r3, r0
 8009ada:	bf36      	itet	cc
 8009adc:	0403      	lslcc	r3, r0, #16
 8009ade:	2000      	movcs	r0, #0
 8009ae0:	2010      	movcc	r0, #16
 8009ae2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009ae6:	bf3c      	itt	cc
 8009ae8:	021b      	lslcc	r3, r3, #8
 8009aea:	3008      	addcc	r0, #8
 8009aec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009af0:	bf3c      	itt	cc
 8009af2:	011b      	lslcc	r3, r3, #4
 8009af4:	3004      	addcc	r0, #4
 8009af6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009afa:	bf3c      	itt	cc
 8009afc:	009b      	lslcc	r3, r3, #2
 8009afe:	3002      	addcc	r0, #2
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	db05      	blt.n	8009b10 <__hi0bits+0x3c>
 8009b04:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009b08:	f100 0001 	add.w	r0, r0, #1
 8009b0c:	bf08      	it	eq
 8009b0e:	2020      	moveq	r0, #32
 8009b10:	4770      	bx	lr

08009b12 <__lo0bits>:
 8009b12:	6803      	ldr	r3, [r0, #0]
 8009b14:	4602      	mov	r2, r0
 8009b16:	f013 0007 	ands.w	r0, r3, #7
 8009b1a:	d00b      	beq.n	8009b34 <__lo0bits+0x22>
 8009b1c:	07d9      	lsls	r1, r3, #31
 8009b1e:	d421      	bmi.n	8009b64 <__lo0bits+0x52>
 8009b20:	0798      	lsls	r0, r3, #30
 8009b22:	bf49      	itett	mi
 8009b24:	085b      	lsrmi	r3, r3, #1
 8009b26:	089b      	lsrpl	r3, r3, #2
 8009b28:	2001      	movmi	r0, #1
 8009b2a:	6013      	strmi	r3, [r2, #0]
 8009b2c:	bf5c      	itt	pl
 8009b2e:	6013      	strpl	r3, [r2, #0]
 8009b30:	2002      	movpl	r0, #2
 8009b32:	4770      	bx	lr
 8009b34:	b299      	uxth	r1, r3
 8009b36:	b909      	cbnz	r1, 8009b3c <__lo0bits+0x2a>
 8009b38:	0c1b      	lsrs	r3, r3, #16
 8009b3a:	2010      	movs	r0, #16
 8009b3c:	b2d9      	uxtb	r1, r3
 8009b3e:	b909      	cbnz	r1, 8009b44 <__lo0bits+0x32>
 8009b40:	3008      	adds	r0, #8
 8009b42:	0a1b      	lsrs	r3, r3, #8
 8009b44:	0719      	lsls	r1, r3, #28
 8009b46:	bf04      	itt	eq
 8009b48:	091b      	lsreq	r3, r3, #4
 8009b4a:	3004      	addeq	r0, #4
 8009b4c:	0799      	lsls	r1, r3, #30
 8009b4e:	bf04      	itt	eq
 8009b50:	089b      	lsreq	r3, r3, #2
 8009b52:	3002      	addeq	r0, #2
 8009b54:	07d9      	lsls	r1, r3, #31
 8009b56:	d403      	bmi.n	8009b60 <__lo0bits+0x4e>
 8009b58:	085b      	lsrs	r3, r3, #1
 8009b5a:	f100 0001 	add.w	r0, r0, #1
 8009b5e:	d003      	beq.n	8009b68 <__lo0bits+0x56>
 8009b60:	6013      	str	r3, [r2, #0]
 8009b62:	4770      	bx	lr
 8009b64:	2000      	movs	r0, #0
 8009b66:	4770      	bx	lr
 8009b68:	2020      	movs	r0, #32
 8009b6a:	4770      	bx	lr

08009b6c <__i2b>:
 8009b6c:	b510      	push	{r4, lr}
 8009b6e:	460c      	mov	r4, r1
 8009b70:	2101      	movs	r1, #1
 8009b72:	f7ff ff07 	bl	8009984 <_Balloc>
 8009b76:	4602      	mov	r2, r0
 8009b78:	b928      	cbnz	r0, 8009b86 <__i2b+0x1a>
 8009b7a:	4b05      	ldr	r3, [pc, #20]	@ (8009b90 <__i2b+0x24>)
 8009b7c:	4805      	ldr	r0, [pc, #20]	@ (8009b94 <__i2b+0x28>)
 8009b7e:	f240 1145 	movw	r1, #325	@ 0x145
 8009b82:	f000 fd01 	bl	800a588 <__assert_func>
 8009b86:	2301      	movs	r3, #1
 8009b88:	6144      	str	r4, [r0, #20]
 8009b8a:	6103      	str	r3, [r0, #16]
 8009b8c:	bd10      	pop	{r4, pc}
 8009b8e:	bf00      	nop
 8009b90:	0800a844 	.word	0x0800a844
 8009b94:	0800a855 	.word	0x0800a855

08009b98 <__multiply>:
 8009b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b9c:	4614      	mov	r4, r2
 8009b9e:	690a      	ldr	r2, [r1, #16]
 8009ba0:	6923      	ldr	r3, [r4, #16]
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	bfa8      	it	ge
 8009ba6:	4623      	movge	r3, r4
 8009ba8:	460f      	mov	r7, r1
 8009baa:	bfa4      	itt	ge
 8009bac:	460c      	movge	r4, r1
 8009bae:	461f      	movge	r7, r3
 8009bb0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009bb4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009bb8:	68a3      	ldr	r3, [r4, #8]
 8009bba:	6861      	ldr	r1, [r4, #4]
 8009bbc:	eb0a 0609 	add.w	r6, sl, r9
 8009bc0:	42b3      	cmp	r3, r6
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	bfb8      	it	lt
 8009bc6:	3101      	addlt	r1, #1
 8009bc8:	f7ff fedc 	bl	8009984 <_Balloc>
 8009bcc:	b930      	cbnz	r0, 8009bdc <__multiply+0x44>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	4b44      	ldr	r3, [pc, #272]	@ (8009ce4 <__multiply+0x14c>)
 8009bd2:	4845      	ldr	r0, [pc, #276]	@ (8009ce8 <__multiply+0x150>)
 8009bd4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009bd8:	f000 fcd6 	bl	800a588 <__assert_func>
 8009bdc:	f100 0514 	add.w	r5, r0, #20
 8009be0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009be4:	462b      	mov	r3, r5
 8009be6:	2200      	movs	r2, #0
 8009be8:	4543      	cmp	r3, r8
 8009bea:	d321      	bcc.n	8009c30 <__multiply+0x98>
 8009bec:	f107 0114 	add.w	r1, r7, #20
 8009bf0:	f104 0214 	add.w	r2, r4, #20
 8009bf4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009bf8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009bfc:	9302      	str	r3, [sp, #8]
 8009bfe:	1b13      	subs	r3, r2, r4
 8009c00:	3b15      	subs	r3, #21
 8009c02:	f023 0303 	bic.w	r3, r3, #3
 8009c06:	3304      	adds	r3, #4
 8009c08:	f104 0715 	add.w	r7, r4, #21
 8009c0c:	42ba      	cmp	r2, r7
 8009c0e:	bf38      	it	cc
 8009c10:	2304      	movcc	r3, #4
 8009c12:	9301      	str	r3, [sp, #4]
 8009c14:	9b02      	ldr	r3, [sp, #8]
 8009c16:	9103      	str	r1, [sp, #12]
 8009c18:	428b      	cmp	r3, r1
 8009c1a:	d80c      	bhi.n	8009c36 <__multiply+0x9e>
 8009c1c:	2e00      	cmp	r6, #0
 8009c1e:	dd03      	ble.n	8009c28 <__multiply+0x90>
 8009c20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d05b      	beq.n	8009ce0 <__multiply+0x148>
 8009c28:	6106      	str	r6, [r0, #16]
 8009c2a:	b005      	add	sp, #20
 8009c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c30:	f843 2b04 	str.w	r2, [r3], #4
 8009c34:	e7d8      	b.n	8009be8 <__multiply+0x50>
 8009c36:	f8b1 a000 	ldrh.w	sl, [r1]
 8009c3a:	f1ba 0f00 	cmp.w	sl, #0
 8009c3e:	d024      	beq.n	8009c8a <__multiply+0xf2>
 8009c40:	f104 0e14 	add.w	lr, r4, #20
 8009c44:	46a9      	mov	r9, r5
 8009c46:	f04f 0c00 	mov.w	ip, #0
 8009c4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c4e:	f8d9 3000 	ldr.w	r3, [r9]
 8009c52:	fa1f fb87 	uxth.w	fp, r7
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	fb0a 330b 	mla	r3, sl, fp, r3
 8009c5c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009c60:	f8d9 7000 	ldr.w	r7, [r9]
 8009c64:	4463      	add	r3, ip
 8009c66:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009c6a:	fb0a c70b 	mla	r7, sl, fp, ip
 8009c6e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009c78:	4572      	cmp	r2, lr
 8009c7a:	f849 3b04 	str.w	r3, [r9], #4
 8009c7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009c82:	d8e2      	bhi.n	8009c4a <__multiply+0xb2>
 8009c84:	9b01      	ldr	r3, [sp, #4]
 8009c86:	f845 c003 	str.w	ip, [r5, r3]
 8009c8a:	9b03      	ldr	r3, [sp, #12]
 8009c8c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009c90:	3104      	adds	r1, #4
 8009c92:	f1b9 0f00 	cmp.w	r9, #0
 8009c96:	d021      	beq.n	8009cdc <__multiply+0x144>
 8009c98:	682b      	ldr	r3, [r5, #0]
 8009c9a:	f104 0c14 	add.w	ip, r4, #20
 8009c9e:	46ae      	mov	lr, r5
 8009ca0:	f04f 0a00 	mov.w	sl, #0
 8009ca4:	f8bc b000 	ldrh.w	fp, [ip]
 8009ca8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009cac:	fb09 770b 	mla	r7, r9, fp, r7
 8009cb0:	4457      	add	r7, sl
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009cb8:	f84e 3b04 	str.w	r3, [lr], #4
 8009cbc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009cc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009cc4:	f8be 3000 	ldrh.w	r3, [lr]
 8009cc8:	fb09 330a 	mla	r3, r9, sl, r3
 8009ccc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009cd0:	4562      	cmp	r2, ip
 8009cd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009cd6:	d8e5      	bhi.n	8009ca4 <__multiply+0x10c>
 8009cd8:	9f01      	ldr	r7, [sp, #4]
 8009cda:	51eb      	str	r3, [r5, r7]
 8009cdc:	3504      	adds	r5, #4
 8009cde:	e799      	b.n	8009c14 <__multiply+0x7c>
 8009ce0:	3e01      	subs	r6, #1
 8009ce2:	e79b      	b.n	8009c1c <__multiply+0x84>
 8009ce4:	0800a844 	.word	0x0800a844
 8009ce8:	0800a855 	.word	0x0800a855

08009cec <__pow5mult>:
 8009cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cf0:	4615      	mov	r5, r2
 8009cf2:	f012 0203 	ands.w	r2, r2, #3
 8009cf6:	4607      	mov	r7, r0
 8009cf8:	460e      	mov	r6, r1
 8009cfa:	d007      	beq.n	8009d0c <__pow5mult+0x20>
 8009cfc:	4c25      	ldr	r4, [pc, #148]	@ (8009d94 <__pow5mult+0xa8>)
 8009cfe:	3a01      	subs	r2, #1
 8009d00:	2300      	movs	r3, #0
 8009d02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d06:	f7ff fe9f 	bl	8009a48 <__multadd>
 8009d0a:	4606      	mov	r6, r0
 8009d0c:	10ad      	asrs	r5, r5, #2
 8009d0e:	d03d      	beq.n	8009d8c <__pow5mult+0xa0>
 8009d10:	69fc      	ldr	r4, [r7, #28]
 8009d12:	b97c      	cbnz	r4, 8009d34 <__pow5mult+0x48>
 8009d14:	2010      	movs	r0, #16
 8009d16:	f7fe f807 	bl	8007d28 <malloc>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	61f8      	str	r0, [r7, #28]
 8009d1e:	b928      	cbnz	r0, 8009d2c <__pow5mult+0x40>
 8009d20:	4b1d      	ldr	r3, [pc, #116]	@ (8009d98 <__pow5mult+0xac>)
 8009d22:	481e      	ldr	r0, [pc, #120]	@ (8009d9c <__pow5mult+0xb0>)
 8009d24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009d28:	f000 fc2e 	bl	800a588 <__assert_func>
 8009d2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d30:	6004      	str	r4, [r0, #0]
 8009d32:	60c4      	str	r4, [r0, #12]
 8009d34:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009d38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d3c:	b94c      	cbnz	r4, 8009d52 <__pow5mult+0x66>
 8009d3e:	f240 2171 	movw	r1, #625	@ 0x271
 8009d42:	4638      	mov	r0, r7
 8009d44:	f7ff ff12 	bl	8009b6c <__i2b>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d4e:	4604      	mov	r4, r0
 8009d50:	6003      	str	r3, [r0, #0]
 8009d52:	f04f 0900 	mov.w	r9, #0
 8009d56:	07eb      	lsls	r3, r5, #31
 8009d58:	d50a      	bpl.n	8009d70 <__pow5mult+0x84>
 8009d5a:	4631      	mov	r1, r6
 8009d5c:	4622      	mov	r2, r4
 8009d5e:	4638      	mov	r0, r7
 8009d60:	f7ff ff1a 	bl	8009b98 <__multiply>
 8009d64:	4631      	mov	r1, r6
 8009d66:	4680      	mov	r8, r0
 8009d68:	4638      	mov	r0, r7
 8009d6a:	f7ff fe4b 	bl	8009a04 <_Bfree>
 8009d6e:	4646      	mov	r6, r8
 8009d70:	106d      	asrs	r5, r5, #1
 8009d72:	d00b      	beq.n	8009d8c <__pow5mult+0xa0>
 8009d74:	6820      	ldr	r0, [r4, #0]
 8009d76:	b938      	cbnz	r0, 8009d88 <__pow5mult+0x9c>
 8009d78:	4622      	mov	r2, r4
 8009d7a:	4621      	mov	r1, r4
 8009d7c:	4638      	mov	r0, r7
 8009d7e:	f7ff ff0b 	bl	8009b98 <__multiply>
 8009d82:	6020      	str	r0, [r4, #0]
 8009d84:	f8c0 9000 	str.w	r9, [r0]
 8009d88:	4604      	mov	r4, r0
 8009d8a:	e7e4      	b.n	8009d56 <__pow5mult+0x6a>
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d92:	bf00      	nop
 8009d94:	0800a8b0 	.word	0x0800a8b0
 8009d98:	0800a7d5 	.word	0x0800a7d5
 8009d9c:	0800a855 	.word	0x0800a855

08009da0 <__lshift>:
 8009da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009da4:	460c      	mov	r4, r1
 8009da6:	6849      	ldr	r1, [r1, #4]
 8009da8:	6923      	ldr	r3, [r4, #16]
 8009daa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009dae:	68a3      	ldr	r3, [r4, #8]
 8009db0:	4607      	mov	r7, r0
 8009db2:	4691      	mov	r9, r2
 8009db4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009db8:	f108 0601 	add.w	r6, r8, #1
 8009dbc:	42b3      	cmp	r3, r6
 8009dbe:	db0b      	blt.n	8009dd8 <__lshift+0x38>
 8009dc0:	4638      	mov	r0, r7
 8009dc2:	f7ff fddf 	bl	8009984 <_Balloc>
 8009dc6:	4605      	mov	r5, r0
 8009dc8:	b948      	cbnz	r0, 8009dde <__lshift+0x3e>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	4b28      	ldr	r3, [pc, #160]	@ (8009e70 <__lshift+0xd0>)
 8009dce:	4829      	ldr	r0, [pc, #164]	@ (8009e74 <__lshift+0xd4>)
 8009dd0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009dd4:	f000 fbd8 	bl	800a588 <__assert_func>
 8009dd8:	3101      	adds	r1, #1
 8009dda:	005b      	lsls	r3, r3, #1
 8009ddc:	e7ee      	b.n	8009dbc <__lshift+0x1c>
 8009dde:	2300      	movs	r3, #0
 8009de0:	f100 0114 	add.w	r1, r0, #20
 8009de4:	f100 0210 	add.w	r2, r0, #16
 8009de8:	4618      	mov	r0, r3
 8009dea:	4553      	cmp	r3, sl
 8009dec:	db33      	blt.n	8009e56 <__lshift+0xb6>
 8009dee:	6920      	ldr	r0, [r4, #16]
 8009df0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009df4:	f104 0314 	add.w	r3, r4, #20
 8009df8:	f019 091f 	ands.w	r9, r9, #31
 8009dfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e04:	d02b      	beq.n	8009e5e <__lshift+0xbe>
 8009e06:	f1c9 0e20 	rsb	lr, r9, #32
 8009e0a:	468a      	mov	sl, r1
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	6818      	ldr	r0, [r3, #0]
 8009e10:	fa00 f009 	lsl.w	r0, r0, r9
 8009e14:	4310      	orrs	r0, r2
 8009e16:	f84a 0b04 	str.w	r0, [sl], #4
 8009e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e1e:	459c      	cmp	ip, r3
 8009e20:	fa22 f20e 	lsr.w	r2, r2, lr
 8009e24:	d8f3      	bhi.n	8009e0e <__lshift+0x6e>
 8009e26:	ebac 0304 	sub.w	r3, ip, r4
 8009e2a:	3b15      	subs	r3, #21
 8009e2c:	f023 0303 	bic.w	r3, r3, #3
 8009e30:	3304      	adds	r3, #4
 8009e32:	f104 0015 	add.w	r0, r4, #21
 8009e36:	4584      	cmp	ip, r0
 8009e38:	bf38      	it	cc
 8009e3a:	2304      	movcc	r3, #4
 8009e3c:	50ca      	str	r2, [r1, r3]
 8009e3e:	b10a      	cbz	r2, 8009e44 <__lshift+0xa4>
 8009e40:	f108 0602 	add.w	r6, r8, #2
 8009e44:	3e01      	subs	r6, #1
 8009e46:	4638      	mov	r0, r7
 8009e48:	612e      	str	r6, [r5, #16]
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	f7ff fdda 	bl	8009a04 <_Bfree>
 8009e50:	4628      	mov	r0, r5
 8009e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e56:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	e7c5      	b.n	8009dea <__lshift+0x4a>
 8009e5e:	3904      	subs	r1, #4
 8009e60:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e64:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e68:	459c      	cmp	ip, r3
 8009e6a:	d8f9      	bhi.n	8009e60 <__lshift+0xc0>
 8009e6c:	e7ea      	b.n	8009e44 <__lshift+0xa4>
 8009e6e:	bf00      	nop
 8009e70:	0800a844 	.word	0x0800a844
 8009e74:	0800a855 	.word	0x0800a855

08009e78 <__mcmp>:
 8009e78:	690a      	ldr	r2, [r1, #16]
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	6900      	ldr	r0, [r0, #16]
 8009e7e:	1a80      	subs	r0, r0, r2
 8009e80:	b530      	push	{r4, r5, lr}
 8009e82:	d10e      	bne.n	8009ea2 <__mcmp+0x2a>
 8009e84:	3314      	adds	r3, #20
 8009e86:	3114      	adds	r1, #20
 8009e88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009e8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009e90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e98:	4295      	cmp	r5, r2
 8009e9a:	d003      	beq.n	8009ea4 <__mcmp+0x2c>
 8009e9c:	d205      	bcs.n	8009eaa <__mcmp+0x32>
 8009e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea2:	bd30      	pop	{r4, r5, pc}
 8009ea4:	42a3      	cmp	r3, r4
 8009ea6:	d3f3      	bcc.n	8009e90 <__mcmp+0x18>
 8009ea8:	e7fb      	b.n	8009ea2 <__mcmp+0x2a>
 8009eaa:	2001      	movs	r0, #1
 8009eac:	e7f9      	b.n	8009ea2 <__mcmp+0x2a>
	...

08009eb0 <__mdiff>:
 8009eb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb4:	4689      	mov	r9, r1
 8009eb6:	4606      	mov	r6, r0
 8009eb8:	4611      	mov	r1, r2
 8009eba:	4648      	mov	r0, r9
 8009ebc:	4614      	mov	r4, r2
 8009ebe:	f7ff ffdb 	bl	8009e78 <__mcmp>
 8009ec2:	1e05      	subs	r5, r0, #0
 8009ec4:	d112      	bne.n	8009eec <__mdiff+0x3c>
 8009ec6:	4629      	mov	r1, r5
 8009ec8:	4630      	mov	r0, r6
 8009eca:	f7ff fd5b 	bl	8009984 <_Balloc>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	b928      	cbnz	r0, 8009ede <__mdiff+0x2e>
 8009ed2:	4b3f      	ldr	r3, [pc, #252]	@ (8009fd0 <__mdiff+0x120>)
 8009ed4:	f240 2137 	movw	r1, #567	@ 0x237
 8009ed8:	483e      	ldr	r0, [pc, #248]	@ (8009fd4 <__mdiff+0x124>)
 8009eda:	f000 fb55 	bl	800a588 <__assert_func>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ee4:	4610      	mov	r0, r2
 8009ee6:	b003      	add	sp, #12
 8009ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eec:	bfbc      	itt	lt
 8009eee:	464b      	movlt	r3, r9
 8009ef0:	46a1      	movlt	r9, r4
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009ef8:	bfba      	itte	lt
 8009efa:	461c      	movlt	r4, r3
 8009efc:	2501      	movlt	r5, #1
 8009efe:	2500      	movge	r5, #0
 8009f00:	f7ff fd40 	bl	8009984 <_Balloc>
 8009f04:	4602      	mov	r2, r0
 8009f06:	b918      	cbnz	r0, 8009f10 <__mdiff+0x60>
 8009f08:	4b31      	ldr	r3, [pc, #196]	@ (8009fd0 <__mdiff+0x120>)
 8009f0a:	f240 2145 	movw	r1, #581	@ 0x245
 8009f0e:	e7e3      	b.n	8009ed8 <__mdiff+0x28>
 8009f10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009f14:	6926      	ldr	r6, [r4, #16]
 8009f16:	60c5      	str	r5, [r0, #12]
 8009f18:	f109 0310 	add.w	r3, r9, #16
 8009f1c:	f109 0514 	add.w	r5, r9, #20
 8009f20:	f104 0e14 	add.w	lr, r4, #20
 8009f24:	f100 0b14 	add.w	fp, r0, #20
 8009f28:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009f2c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009f30:	9301      	str	r3, [sp, #4]
 8009f32:	46d9      	mov	r9, fp
 8009f34:	f04f 0c00 	mov.w	ip, #0
 8009f38:	9b01      	ldr	r3, [sp, #4]
 8009f3a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009f3e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009f42:	9301      	str	r3, [sp, #4]
 8009f44:	fa1f f38a 	uxth.w	r3, sl
 8009f48:	4619      	mov	r1, r3
 8009f4a:	b283      	uxth	r3, r0
 8009f4c:	1acb      	subs	r3, r1, r3
 8009f4e:	0c00      	lsrs	r0, r0, #16
 8009f50:	4463      	add	r3, ip
 8009f52:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009f56:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009f60:	4576      	cmp	r6, lr
 8009f62:	f849 3b04 	str.w	r3, [r9], #4
 8009f66:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009f6a:	d8e5      	bhi.n	8009f38 <__mdiff+0x88>
 8009f6c:	1b33      	subs	r3, r6, r4
 8009f6e:	3b15      	subs	r3, #21
 8009f70:	f023 0303 	bic.w	r3, r3, #3
 8009f74:	3415      	adds	r4, #21
 8009f76:	3304      	adds	r3, #4
 8009f78:	42a6      	cmp	r6, r4
 8009f7a:	bf38      	it	cc
 8009f7c:	2304      	movcc	r3, #4
 8009f7e:	441d      	add	r5, r3
 8009f80:	445b      	add	r3, fp
 8009f82:	461e      	mov	r6, r3
 8009f84:	462c      	mov	r4, r5
 8009f86:	4544      	cmp	r4, r8
 8009f88:	d30e      	bcc.n	8009fa8 <__mdiff+0xf8>
 8009f8a:	f108 0103 	add.w	r1, r8, #3
 8009f8e:	1b49      	subs	r1, r1, r5
 8009f90:	f021 0103 	bic.w	r1, r1, #3
 8009f94:	3d03      	subs	r5, #3
 8009f96:	45a8      	cmp	r8, r5
 8009f98:	bf38      	it	cc
 8009f9a:	2100      	movcc	r1, #0
 8009f9c:	440b      	add	r3, r1
 8009f9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009fa2:	b191      	cbz	r1, 8009fca <__mdiff+0x11a>
 8009fa4:	6117      	str	r7, [r2, #16]
 8009fa6:	e79d      	b.n	8009ee4 <__mdiff+0x34>
 8009fa8:	f854 1b04 	ldr.w	r1, [r4], #4
 8009fac:	46e6      	mov	lr, ip
 8009fae:	0c08      	lsrs	r0, r1, #16
 8009fb0:	fa1c fc81 	uxtah	ip, ip, r1
 8009fb4:	4471      	add	r1, lr
 8009fb6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009fba:	b289      	uxth	r1, r1
 8009fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009fc0:	f846 1b04 	str.w	r1, [r6], #4
 8009fc4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009fc8:	e7dd      	b.n	8009f86 <__mdiff+0xd6>
 8009fca:	3f01      	subs	r7, #1
 8009fcc:	e7e7      	b.n	8009f9e <__mdiff+0xee>
 8009fce:	bf00      	nop
 8009fd0:	0800a844 	.word	0x0800a844
 8009fd4:	0800a855 	.word	0x0800a855

08009fd8 <__d2b>:
 8009fd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fdc:	460f      	mov	r7, r1
 8009fde:	2101      	movs	r1, #1
 8009fe0:	ec59 8b10 	vmov	r8, r9, d0
 8009fe4:	4616      	mov	r6, r2
 8009fe6:	f7ff fccd 	bl	8009984 <_Balloc>
 8009fea:	4604      	mov	r4, r0
 8009fec:	b930      	cbnz	r0, 8009ffc <__d2b+0x24>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	4b23      	ldr	r3, [pc, #140]	@ (800a080 <__d2b+0xa8>)
 8009ff2:	4824      	ldr	r0, [pc, #144]	@ (800a084 <__d2b+0xac>)
 8009ff4:	f240 310f 	movw	r1, #783	@ 0x30f
 8009ff8:	f000 fac6 	bl	800a588 <__assert_func>
 8009ffc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a000:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a004:	b10d      	cbz	r5, 800a00a <__d2b+0x32>
 800a006:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a00a:	9301      	str	r3, [sp, #4]
 800a00c:	f1b8 0300 	subs.w	r3, r8, #0
 800a010:	d023      	beq.n	800a05a <__d2b+0x82>
 800a012:	4668      	mov	r0, sp
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	f7ff fd7c 	bl	8009b12 <__lo0bits>
 800a01a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a01e:	b1d0      	cbz	r0, 800a056 <__d2b+0x7e>
 800a020:	f1c0 0320 	rsb	r3, r0, #32
 800a024:	fa02 f303 	lsl.w	r3, r2, r3
 800a028:	430b      	orrs	r3, r1
 800a02a:	40c2      	lsrs	r2, r0
 800a02c:	6163      	str	r3, [r4, #20]
 800a02e:	9201      	str	r2, [sp, #4]
 800a030:	9b01      	ldr	r3, [sp, #4]
 800a032:	61a3      	str	r3, [r4, #24]
 800a034:	2b00      	cmp	r3, #0
 800a036:	bf0c      	ite	eq
 800a038:	2201      	moveq	r2, #1
 800a03a:	2202      	movne	r2, #2
 800a03c:	6122      	str	r2, [r4, #16]
 800a03e:	b1a5      	cbz	r5, 800a06a <__d2b+0x92>
 800a040:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a044:	4405      	add	r5, r0
 800a046:	603d      	str	r5, [r7, #0]
 800a048:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a04c:	6030      	str	r0, [r6, #0]
 800a04e:	4620      	mov	r0, r4
 800a050:	b003      	add	sp, #12
 800a052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a056:	6161      	str	r1, [r4, #20]
 800a058:	e7ea      	b.n	800a030 <__d2b+0x58>
 800a05a:	a801      	add	r0, sp, #4
 800a05c:	f7ff fd59 	bl	8009b12 <__lo0bits>
 800a060:	9b01      	ldr	r3, [sp, #4]
 800a062:	6163      	str	r3, [r4, #20]
 800a064:	3020      	adds	r0, #32
 800a066:	2201      	movs	r2, #1
 800a068:	e7e8      	b.n	800a03c <__d2b+0x64>
 800a06a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a06e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a072:	6038      	str	r0, [r7, #0]
 800a074:	6918      	ldr	r0, [r3, #16]
 800a076:	f7ff fd2d 	bl	8009ad4 <__hi0bits>
 800a07a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a07e:	e7e5      	b.n	800a04c <__d2b+0x74>
 800a080:	0800a844 	.word	0x0800a844
 800a084:	0800a855 	.word	0x0800a855

0800a088 <__sfputc_r>:
 800a088:	6893      	ldr	r3, [r2, #8]
 800a08a:	3b01      	subs	r3, #1
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	b410      	push	{r4}
 800a090:	6093      	str	r3, [r2, #8]
 800a092:	da08      	bge.n	800a0a6 <__sfputc_r+0x1e>
 800a094:	6994      	ldr	r4, [r2, #24]
 800a096:	42a3      	cmp	r3, r4
 800a098:	db01      	blt.n	800a09e <__sfputc_r+0x16>
 800a09a:	290a      	cmp	r1, #10
 800a09c:	d103      	bne.n	800a0a6 <__sfputc_r+0x1e>
 800a09e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0a2:	f7fe bcb2 	b.w	8008a0a <__swbuf_r>
 800a0a6:	6813      	ldr	r3, [r2, #0]
 800a0a8:	1c58      	adds	r0, r3, #1
 800a0aa:	6010      	str	r0, [r2, #0]
 800a0ac:	7019      	strb	r1, [r3, #0]
 800a0ae:	4608      	mov	r0, r1
 800a0b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0b4:	4770      	bx	lr

0800a0b6 <__sfputs_r>:
 800a0b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b8:	4606      	mov	r6, r0
 800a0ba:	460f      	mov	r7, r1
 800a0bc:	4614      	mov	r4, r2
 800a0be:	18d5      	adds	r5, r2, r3
 800a0c0:	42ac      	cmp	r4, r5
 800a0c2:	d101      	bne.n	800a0c8 <__sfputs_r+0x12>
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	e007      	b.n	800a0d8 <__sfputs_r+0x22>
 800a0c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0cc:	463a      	mov	r2, r7
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	f7ff ffda 	bl	800a088 <__sfputc_r>
 800a0d4:	1c43      	adds	r3, r0, #1
 800a0d6:	d1f3      	bne.n	800a0c0 <__sfputs_r+0xa>
 800a0d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0dc <_vfiprintf_r>:
 800a0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e0:	460d      	mov	r5, r1
 800a0e2:	b09d      	sub	sp, #116	@ 0x74
 800a0e4:	4614      	mov	r4, r2
 800a0e6:	4698      	mov	r8, r3
 800a0e8:	4606      	mov	r6, r0
 800a0ea:	b118      	cbz	r0, 800a0f4 <_vfiprintf_r+0x18>
 800a0ec:	6a03      	ldr	r3, [r0, #32]
 800a0ee:	b90b      	cbnz	r3, 800a0f4 <_vfiprintf_r+0x18>
 800a0f0:	f7fe fbb4 	bl	800885c <__sinit>
 800a0f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0f6:	07d9      	lsls	r1, r3, #31
 800a0f8:	d405      	bmi.n	800a106 <_vfiprintf_r+0x2a>
 800a0fa:	89ab      	ldrh	r3, [r5, #12]
 800a0fc:	059a      	lsls	r2, r3, #22
 800a0fe:	d402      	bmi.n	800a106 <_vfiprintf_r+0x2a>
 800a100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a102:	f7fe fda4 	bl	8008c4e <__retarget_lock_acquire_recursive>
 800a106:	89ab      	ldrh	r3, [r5, #12]
 800a108:	071b      	lsls	r3, r3, #28
 800a10a:	d501      	bpl.n	800a110 <_vfiprintf_r+0x34>
 800a10c:	692b      	ldr	r3, [r5, #16]
 800a10e:	b99b      	cbnz	r3, 800a138 <_vfiprintf_r+0x5c>
 800a110:	4629      	mov	r1, r5
 800a112:	4630      	mov	r0, r6
 800a114:	f7fe fcb8 	bl	8008a88 <__swsetup_r>
 800a118:	b170      	cbz	r0, 800a138 <_vfiprintf_r+0x5c>
 800a11a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a11c:	07dc      	lsls	r4, r3, #31
 800a11e:	d504      	bpl.n	800a12a <_vfiprintf_r+0x4e>
 800a120:	f04f 30ff 	mov.w	r0, #4294967295
 800a124:	b01d      	add	sp, #116	@ 0x74
 800a126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a12a:	89ab      	ldrh	r3, [r5, #12]
 800a12c:	0598      	lsls	r0, r3, #22
 800a12e:	d4f7      	bmi.n	800a120 <_vfiprintf_r+0x44>
 800a130:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a132:	f7fe fd8d 	bl	8008c50 <__retarget_lock_release_recursive>
 800a136:	e7f3      	b.n	800a120 <_vfiprintf_r+0x44>
 800a138:	2300      	movs	r3, #0
 800a13a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a13c:	2320      	movs	r3, #32
 800a13e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a142:	f8cd 800c 	str.w	r8, [sp, #12]
 800a146:	2330      	movs	r3, #48	@ 0x30
 800a148:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a2f8 <_vfiprintf_r+0x21c>
 800a14c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a150:	f04f 0901 	mov.w	r9, #1
 800a154:	4623      	mov	r3, r4
 800a156:	469a      	mov	sl, r3
 800a158:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a15c:	b10a      	cbz	r2, 800a162 <_vfiprintf_r+0x86>
 800a15e:	2a25      	cmp	r2, #37	@ 0x25
 800a160:	d1f9      	bne.n	800a156 <_vfiprintf_r+0x7a>
 800a162:	ebba 0b04 	subs.w	fp, sl, r4
 800a166:	d00b      	beq.n	800a180 <_vfiprintf_r+0xa4>
 800a168:	465b      	mov	r3, fp
 800a16a:	4622      	mov	r2, r4
 800a16c:	4629      	mov	r1, r5
 800a16e:	4630      	mov	r0, r6
 800a170:	f7ff ffa1 	bl	800a0b6 <__sfputs_r>
 800a174:	3001      	adds	r0, #1
 800a176:	f000 80a7 	beq.w	800a2c8 <_vfiprintf_r+0x1ec>
 800a17a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a17c:	445a      	add	r2, fp
 800a17e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a180:	f89a 3000 	ldrb.w	r3, [sl]
 800a184:	2b00      	cmp	r3, #0
 800a186:	f000 809f 	beq.w	800a2c8 <_vfiprintf_r+0x1ec>
 800a18a:	2300      	movs	r3, #0
 800a18c:	f04f 32ff 	mov.w	r2, #4294967295
 800a190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a194:	f10a 0a01 	add.w	sl, sl, #1
 800a198:	9304      	str	r3, [sp, #16]
 800a19a:	9307      	str	r3, [sp, #28]
 800a19c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a1a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1a2:	4654      	mov	r4, sl
 800a1a4:	2205      	movs	r2, #5
 800a1a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1aa:	4853      	ldr	r0, [pc, #332]	@ (800a2f8 <_vfiprintf_r+0x21c>)
 800a1ac:	f7f6 f838 	bl	8000220 <memchr>
 800a1b0:	9a04      	ldr	r2, [sp, #16]
 800a1b2:	b9d8      	cbnz	r0, 800a1ec <_vfiprintf_r+0x110>
 800a1b4:	06d1      	lsls	r1, r2, #27
 800a1b6:	bf44      	itt	mi
 800a1b8:	2320      	movmi	r3, #32
 800a1ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1be:	0713      	lsls	r3, r2, #28
 800a1c0:	bf44      	itt	mi
 800a1c2:	232b      	movmi	r3, #43	@ 0x2b
 800a1c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a1cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1ce:	d015      	beq.n	800a1fc <_vfiprintf_r+0x120>
 800a1d0:	9a07      	ldr	r2, [sp, #28]
 800a1d2:	4654      	mov	r4, sl
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	f04f 0c0a 	mov.w	ip, #10
 800a1da:	4621      	mov	r1, r4
 800a1dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1e0:	3b30      	subs	r3, #48	@ 0x30
 800a1e2:	2b09      	cmp	r3, #9
 800a1e4:	d94b      	bls.n	800a27e <_vfiprintf_r+0x1a2>
 800a1e6:	b1b0      	cbz	r0, 800a216 <_vfiprintf_r+0x13a>
 800a1e8:	9207      	str	r2, [sp, #28]
 800a1ea:	e014      	b.n	800a216 <_vfiprintf_r+0x13a>
 800a1ec:	eba0 0308 	sub.w	r3, r0, r8
 800a1f0:	fa09 f303 	lsl.w	r3, r9, r3
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	9304      	str	r3, [sp, #16]
 800a1f8:	46a2      	mov	sl, r4
 800a1fa:	e7d2      	b.n	800a1a2 <_vfiprintf_r+0xc6>
 800a1fc:	9b03      	ldr	r3, [sp, #12]
 800a1fe:	1d19      	adds	r1, r3, #4
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	9103      	str	r1, [sp, #12]
 800a204:	2b00      	cmp	r3, #0
 800a206:	bfbb      	ittet	lt
 800a208:	425b      	neglt	r3, r3
 800a20a:	f042 0202 	orrlt.w	r2, r2, #2
 800a20e:	9307      	strge	r3, [sp, #28]
 800a210:	9307      	strlt	r3, [sp, #28]
 800a212:	bfb8      	it	lt
 800a214:	9204      	strlt	r2, [sp, #16]
 800a216:	7823      	ldrb	r3, [r4, #0]
 800a218:	2b2e      	cmp	r3, #46	@ 0x2e
 800a21a:	d10a      	bne.n	800a232 <_vfiprintf_r+0x156>
 800a21c:	7863      	ldrb	r3, [r4, #1]
 800a21e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a220:	d132      	bne.n	800a288 <_vfiprintf_r+0x1ac>
 800a222:	9b03      	ldr	r3, [sp, #12]
 800a224:	1d1a      	adds	r2, r3, #4
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	9203      	str	r2, [sp, #12]
 800a22a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a22e:	3402      	adds	r4, #2
 800a230:	9305      	str	r3, [sp, #20]
 800a232:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a308 <_vfiprintf_r+0x22c>
 800a236:	7821      	ldrb	r1, [r4, #0]
 800a238:	2203      	movs	r2, #3
 800a23a:	4650      	mov	r0, sl
 800a23c:	f7f5 fff0 	bl	8000220 <memchr>
 800a240:	b138      	cbz	r0, 800a252 <_vfiprintf_r+0x176>
 800a242:	9b04      	ldr	r3, [sp, #16]
 800a244:	eba0 000a 	sub.w	r0, r0, sl
 800a248:	2240      	movs	r2, #64	@ 0x40
 800a24a:	4082      	lsls	r2, r0
 800a24c:	4313      	orrs	r3, r2
 800a24e:	3401      	adds	r4, #1
 800a250:	9304      	str	r3, [sp, #16]
 800a252:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a256:	4829      	ldr	r0, [pc, #164]	@ (800a2fc <_vfiprintf_r+0x220>)
 800a258:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a25c:	2206      	movs	r2, #6
 800a25e:	f7f5 ffdf 	bl	8000220 <memchr>
 800a262:	2800      	cmp	r0, #0
 800a264:	d03f      	beq.n	800a2e6 <_vfiprintf_r+0x20a>
 800a266:	4b26      	ldr	r3, [pc, #152]	@ (800a300 <_vfiprintf_r+0x224>)
 800a268:	bb1b      	cbnz	r3, 800a2b2 <_vfiprintf_r+0x1d6>
 800a26a:	9b03      	ldr	r3, [sp, #12]
 800a26c:	3307      	adds	r3, #7
 800a26e:	f023 0307 	bic.w	r3, r3, #7
 800a272:	3308      	adds	r3, #8
 800a274:	9303      	str	r3, [sp, #12]
 800a276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a278:	443b      	add	r3, r7
 800a27a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a27c:	e76a      	b.n	800a154 <_vfiprintf_r+0x78>
 800a27e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a282:	460c      	mov	r4, r1
 800a284:	2001      	movs	r0, #1
 800a286:	e7a8      	b.n	800a1da <_vfiprintf_r+0xfe>
 800a288:	2300      	movs	r3, #0
 800a28a:	3401      	adds	r4, #1
 800a28c:	9305      	str	r3, [sp, #20]
 800a28e:	4619      	mov	r1, r3
 800a290:	f04f 0c0a 	mov.w	ip, #10
 800a294:	4620      	mov	r0, r4
 800a296:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a29a:	3a30      	subs	r2, #48	@ 0x30
 800a29c:	2a09      	cmp	r2, #9
 800a29e:	d903      	bls.n	800a2a8 <_vfiprintf_r+0x1cc>
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d0c6      	beq.n	800a232 <_vfiprintf_r+0x156>
 800a2a4:	9105      	str	r1, [sp, #20]
 800a2a6:	e7c4      	b.n	800a232 <_vfiprintf_r+0x156>
 800a2a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e7f0      	b.n	800a294 <_vfiprintf_r+0x1b8>
 800a2b2:	ab03      	add	r3, sp, #12
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	462a      	mov	r2, r5
 800a2b8:	4b12      	ldr	r3, [pc, #72]	@ (800a304 <_vfiprintf_r+0x228>)
 800a2ba:	a904      	add	r1, sp, #16
 800a2bc:	4630      	mov	r0, r6
 800a2be:	f7fd fe89 	bl	8007fd4 <_printf_float>
 800a2c2:	4607      	mov	r7, r0
 800a2c4:	1c78      	adds	r0, r7, #1
 800a2c6:	d1d6      	bne.n	800a276 <_vfiprintf_r+0x19a>
 800a2c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2ca:	07d9      	lsls	r1, r3, #31
 800a2cc:	d405      	bmi.n	800a2da <_vfiprintf_r+0x1fe>
 800a2ce:	89ab      	ldrh	r3, [r5, #12]
 800a2d0:	059a      	lsls	r2, r3, #22
 800a2d2:	d402      	bmi.n	800a2da <_vfiprintf_r+0x1fe>
 800a2d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2d6:	f7fe fcbb 	bl	8008c50 <__retarget_lock_release_recursive>
 800a2da:	89ab      	ldrh	r3, [r5, #12]
 800a2dc:	065b      	lsls	r3, r3, #25
 800a2de:	f53f af1f 	bmi.w	800a120 <_vfiprintf_r+0x44>
 800a2e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2e4:	e71e      	b.n	800a124 <_vfiprintf_r+0x48>
 800a2e6:	ab03      	add	r3, sp, #12
 800a2e8:	9300      	str	r3, [sp, #0]
 800a2ea:	462a      	mov	r2, r5
 800a2ec:	4b05      	ldr	r3, [pc, #20]	@ (800a304 <_vfiprintf_r+0x228>)
 800a2ee:	a904      	add	r1, sp, #16
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	f7fe f907 	bl	8008504 <_printf_i>
 800a2f6:	e7e4      	b.n	800a2c2 <_vfiprintf_r+0x1e6>
 800a2f8:	0800a9b0 	.word	0x0800a9b0
 800a2fc:	0800a9ba 	.word	0x0800a9ba
 800a300:	08007fd5 	.word	0x08007fd5
 800a304:	0800a0b7 	.word	0x0800a0b7
 800a308:	0800a9b6 	.word	0x0800a9b6

0800a30c <__sflush_r>:
 800a30c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a314:	0716      	lsls	r6, r2, #28
 800a316:	4605      	mov	r5, r0
 800a318:	460c      	mov	r4, r1
 800a31a:	d454      	bmi.n	800a3c6 <__sflush_r+0xba>
 800a31c:	684b      	ldr	r3, [r1, #4]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	dc02      	bgt.n	800a328 <__sflush_r+0x1c>
 800a322:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a324:	2b00      	cmp	r3, #0
 800a326:	dd48      	ble.n	800a3ba <__sflush_r+0xae>
 800a328:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a32a:	2e00      	cmp	r6, #0
 800a32c:	d045      	beq.n	800a3ba <__sflush_r+0xae>
 800a32e:	2300      	movs	r3, #0
 800a330:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a334:	682f      	ldr	r7, [r5, #0]
 800a336:	6a21      	ldr	r1, [r4, #32]
 800a338:	602b      	str	r3, [r5, #0]
 800a33a:	d030      	beq.n	800a39e <__sflush_r+0x92>
 800a33c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a33e:	89a3      	ldrh	r3, [r4, #12]
 800a340:	0759      	lsls	r1, r3, #29
 800a342:	d505      	bpl.n	800a350 <__sflush_r+0x44>
 800a344:	6863      	ldr	r3, [r4, #4]
 800a346:	1ad2      	subs	r2, r2, r3
 800a348:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a34a:	b10b      	cbz	r3, 800a350 <__sflush_r+0x44>
 800a34c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a34e:	1ad2      	subs	r2, r2, r3
 800a350:	2300      	movs	r3, #0
 800a352:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a354:	6a21      	ldr	r1, [r4, #32]
 800a356:	4628      	mov	r0, r5
 800a358:	47b0      	blx	r6
 800a35a:	1c43      	adds	r3, r0, #1
 800a35c:	89a3      	ldrh	r3, [r4, #12]
 800a35e:	d106      	bne.n	800a36e <__sflush_r+0x62>
 800a360:	6829      	ldr	r1, [r5, #0]
 800a362:	291d      	cmp	r1, #29
 800a364:	d82b      	bhi.n	800a3be <__sflush_r+0xb2>
 800a366:	4a2a      	ldr	r2, [pc, #168]	@ (800a410 <__sflush_r+0x104>)
 800a368:	410a      	asrs	r2, r1
 800a36a:	07d6      	lsls	r6, r2, #31
 800a36c:	d427      	bmi.n	800a3be <__sflush_r+0xb2>
 800a36e:	2200      	movs	r2, #0
 800a370:	6062      	str	r2, [r4, #4]
 800a372:	04d9      	lsls	r1, r3, #19
 800a374:	6922      	ldr	r2, [r4, #16]
 800a376:	6022      	str	r2, [r4, #0]
 800a378:	d504      	bpl.n	800a384 <__sflush_r+0x78>
 800a37a:	1c42      	adds	r2, r0, #1
 800a37c:	d101      	bne.n	800a382 <__sflush_r+0x76>
 800a37e:	682b      	ldr	r3, [r5, #0]
 800a380:	b903      	cbnz	r3, 800a384 <__sflush_r+0x78>
 800a382:	6560      	str	r0, [r4, #84]	@ 0x54
 800a384:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a386:	602f      	str	r7, [r5, #0]
 800a388:	b1b9      	cbz	r1, 800a3ba <__sflush_r+0xae>
 800a38a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a38e:	4299      	cmp	r1, r3
 800a390:	d002      	beq.n	800a398 <__sflush_r+0x8c>
 800a392:	4628      	mov	r0, r5
 800a394:	f7ff faac 	bl	80098f0 <_free_r>
 800a398:	2300      	movs	r3, #0
 800a39a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a39c:	e00d      	b.n	800a3ba <__sflush_r+0xae>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	47b0      	blx	r6
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	1c50      	adds	r0, r2, #1
 800a3a8:	d1c9      	bne.n	800a33e <__sflush_r+0x32>
 800a3aa:	682b      	ldr	r3, [r5, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d0c6      	beq.n	800a33e <__sflush_r+0x32>
 800a3b0:	2b1d      	cmp	r3, #29
 800a3b2:	d001      	beq.n	800a3b8 <__sflush_r+0xac>
 800a3b4:	2b16      	cmp	r3, #22
 800a3b6:	d11e      	bne.n	800a3f6 <__sflush_r+0xea>
 800a3b8:	602f      	str	r7, [r5, #0]
 800a3ba:	2000      	movs	r0, #0
 800a3bc:	e022      	b.n	800a404 <__sflush_r+0xf8>
 800a3be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3c2:	b21b      	sxth	r3, r3
 800a3c4:	e01b      	b.n	800a3fe <__sflush_r+0xf2>
 800a3c6:	690f      	ldr	r7, [r1, #16]
 800a3c8:	2f00      	cmp	r7, #0
 800a3ca:	d0f6      	beq.n	800a3ba <__sflush_r+0xae>
 800a3cc:	0793      	lsls	r3, r2, #30
 800a3ce:	680e      	ldr	r6, [r1, #0]
 800a3d0:	bf08      	it	eq
 800a3d2:	694b      	ldreq	r3, [r1, #20]
 800a3d4:	600f      	str	r7, [r1, #0]
 800a3d6:	bf18      	it	ne
 800a3d8:	2300      	movne	r3, #0
 800a3da:	eba6 0807 	sub.w	r8, r6, r7
 800a3de:	608b      	str	r3, [r1, #8]
 800a3e0:	f1b8 0f00 	cmp.w	r8, #0
 800a3e4:	dde9      	ble.n	800a3ba <__sflush_r+0xae>
 800a3e6:	6a21      	ldr	r1, [r4, #32]
 800a3e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a3ea:	4643      	mov	r3, r8
 800a3ec:	463a      	mov	r2, r7
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	47b0      	blx	r6
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	dc08      	bgt.n	800a408 <__sflush_r+0xfc>
 800a3f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3fe:	81a3      	strh	r3, [r4, #12]
 800a400:	f04f 30ff 	mov.w	r0, #4294967295
 800a404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a408:	4407      	add	r7, r0
 800a40a:	eba8 0800 	sub.w	r8, r8, r0
 800a40e:	e7e7      	b.n	800a3e0 <__sflush_r+0xd4>
 800a410:	dfbffffe 	.word	0xdfbffffe

0800a414 <_fflush_r>:
 800a414:	b538      	push	{r3, r4, r5, lr}
 800a416:	690b      	ldr	r3, [r1, #16]
 800a418:	4605      	mov	r5, r0
 800a41a:	460c      	mov	r4, r1
 800a41c:	b913      	cbnz	r3, 800a424 <_fflush_r+0x10>
 800a41e:	2500      	movs	r5, #0
 800a420:	4628      	mov	r0, r5
 800a422:	bd38      	pop	{r3, r4, r5, pc}
 800a424:	b118      	cbz	r0, 800a42e <_fflush_r+0x1a>
 800a426:	6a03      	ldr	r3, [r0, #32]
 800a428:	b90b      	cbnz	r3, 800a42e <_fflush_r+0x1a>
 800a42a:	f7fe fa17 	bl	800885c <__sinit>
 800a42e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d0f3      	beq.n	800a41e <_fflush_r+0xa>
 800a436:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a438:	07d0      	lsls	r0, r2, #31
 800a43a:	d404      	bmi.n	800a446 <_fflush_r+0x32>
 800a43c:	0599      	lsls	r1, r3, #22
 800a43e:	d402      	bmi.n	800a446 <_fflush_r+0x32>
 800a440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a442:	f7fe fc04 	bl	8008c4e <__retarget_lock_acquire_recursive>
 800a446:	4628      	mov	r0, r5
 800a448:	4621      	mov	r1, r4
 800a44a:	f7ff ff5f 	bl	800a30c <__sflush_r>
 800a44e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a450:	07da      	lsls	r2, r3, #31
 800a452:	4605      	mov	r5, r0
 800a454:	d4e4      	bmi.n	800a420 <_fflush_r+0xc>
 800a456:	89a3      	ldrh	r3, [r4, #12]
 800a458:	059b      	lsls	r3, r3, #22
 800a45a:	d4e1      	bmi.n	800a420 <_fflush_r+0xc>
 800a45c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a45e:	f7fe fbf7 	bl	8008c50 <__retarget_lock_release_recursive>
 800a462:	e7dd      	b.n	800a420 <_fflush_r+0xc>

0800a464 <__swhatbuf_r>:
 800a464:	b570      	push	{r4, r5, r6, lr}
 800a466:	460c      	mov	r4, r1
 800a468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a46c:	2900      	cmp	r1, #0
 800a46e:	b096      	sub	sp, #88	@ 0x58
 800a470:	4615      	mov	r5, r2
 800a472:	461e      	mov	r6, r3
 800a474:	da0d      	bge.n	800a492 <__swhatbuf_r+0x2e>
 800a476:	89a3      	ldrh	r3, [r4, #12]
 800a478:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a47c:	f04f 0100 	mov.w	r1, #0
 800a480:	bf14      	ite	ne
 800a482:	2340      	movne	r3, #64	@ 0x40
 800a484:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a488:	2000      	movs	r0, #0
 800a48a:	6031      	str	r1, [r6, #0]
 800a48c:	602b      	str	r3, [r5, #0]
 800a48e:	b016      	add	sp, #88	@ 0x58
 800a490:	bd70      	pop	{r4, r5, r6, pc}
 800a492:	466a      	mov	r2, sp
 800a494:	f000 f848 	bl	800a528 <_fstat_r>
 800a498:	2800      	cmp	r0, #0
 800a49a:	dbec      	blt.n	800a476 <__swhatbuf_r+0x12>
 800a49c:	9901      	ldr	r1, [sp, #4]
 800a49e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a4a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a4a6:	4259      	negs	r1, r3
 800a4a8:	4159      	adcs	r1, r3
 800a4aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4ae:	e7eb      	b.n	800a488 <__swhatbuf_r+0x24>

0800a4b0 <__smakebuf_r>:
 800a4b0:	898b      	ldrh	r3, [r1, #12]
 800a4b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4b4:	079d      	lsls	r5, r3, #30
 800a4b6:	4606      	mov	r6, r0
 800a4b8:	460c      	mov	r4, r1
 800a4ba:	d507      	bpl.n	800a4cc <__smakebuf_r+0x1c>
 800a4bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	6123      	str	r3, [r4, #16]
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	6163      	str	r3, [r4, #20]
 800a4c8:	b003      	add	sp, #12
 800a4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4cc:	ab01      	add	r3, sp, #4
 800a4ce:	466a      	mov	r2, sp
 800a4d0:	f7ff ffc8 	bl	800a464 <__swhatbuf_r>
 800a4d4:	9f00      	ldr	r7, [sp, #0]
 800a4d6:	4605      	mov	r5, r0
 800a4d8:	4639      	mov	r1, r7
 800a4da:	4630      	mov	r0, r6
 800a4dc:	f7fd fc4e 	bl	8007d7c <_malloc_r>
 800a4e0:	b948      	cbnz	r0, 800a4f6 <__smakebuf_r+0x46>
 800a4e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4e6:	059a      	lsls	r2, r3, #22
 800a4e8:	d4ee      	bmi.n	800a4c8 <__smakebuf_r+0x18>
 800a4ea:	f023 0303 	bic.w	r3, r3, #3
 800a4ee:	f043 0302 	orr.w	r3, r3, #2
 800a4f2:	81a3      	strh	r3, [r4, #12]
 800a4f4:	e7e2      	b.n	800a4bc <__smakebuf_r+0xc>
 800a4f6:	89a3      	ldrh	r3, [r4, #12]
 800a4f8:	6020      	str	r0, [r4, #0]
 800a4fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4fe:	81a3      	strh	r3, [r4, #12]
 800a500:	9b01      	ldr	r3, [sp, #4]
 800a502:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a506:	b15b      	cbz	r3, 800a520 <__smakebuf_r+0x70>
 800a508:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a50c:	4630      	mov	r0, r6
 800a50e:	f000 f81d 	bl	800a54c <_isatty_r>
 800a512:	b128      	cbz	r0, 800a520 <__smakebuf_r+0x70>
 800a514:	89a3      	ldrh	r3, [r4, #12]
 800a516:	f023 0303 	bic.w	r3, r3, #3
 800a51a:	f043 0301 	orr.w	r3, r3, #1
 800a51e:	81a3      	strh	r3, [r4, #12]
 800a520:	89a3      	ldrh	r3, [r4, #12]
 800a522:	431d      	orrs	r5, r3
 800a524:	81a5      	strh	r5, [r4, #12]
 800a526:	e7cf      	b.n	800a4c8 <__smakebuf_r+0x18>

0800a528 <_fstat_r>:
 800a528:	b538      	push	{r3, r4, r5, lr}
 800a52a:	4d07      	ldr	r5, [pc, #28]	@ (800a548 <_fstat_r+0x20>)
 800a52c:	2300      	movs	r3, #0
 800a52e:	4604      	mov	r4, r0
 800a530:	4608      	mov	r0, r1
 800a532:	4611      	mov	r1, r2
 800a534:	602b      	str	r3, [r5, #0]
 800a536:	f7f7 fb63 	bl	8001c00 <_fstat>
 800a53a:	1c43      	adds	r3, r0, #1
 800a53c:	d102      	bne.n	800a544 <_fstat_r+0x1c>
 800a53e:	682b      	ldr	r3, [r5, #0]
 800a540:	b103      	cbz	r3, 800a544 <_fstat_r+0x1c>
 800a542:	6023      	str	r3, [r4, #0]
 800a544:	bd38      	pop	{r3, r4, r5, pc}
 800a546:	bf00      	nop
 800a548:	2000070c 	.word	0x2000070c

0800a54c <_isatty_r>:
 800a54c:	b538      	push	{r3, r4, r5, lr}
 800a54e:	4d06      	ldr	r5, [pc, #24]	@ (800a568 <_isatty_r+0x1c>)
 800a550:	2300      	movs	r3, #0
 800a552:	4604      	mov	r4, r0
 800a554:	4608      	mov	r0, r1
 800a556:	602b      	str	r3, [r5, #0]
 800a558:	f7f7 fb62 	bl	8001c20 <_isatty>
 800a55c:	1c43      	adds	r3, r0, #1
 800a55e:	d102      	bne.n	800a566 <_isatty_r+0x1a>
 800a560:	682b      	ldr	r3, [r5, #0]
 800a562:	b103      	cbz	r3, 800a566 <_isatty_r+0x1a>
 800a564:	6023      	str	r3, [r4, #0]
 800a566:	bd38      	pop	{r3, r4, r5, pc}
 800a568:	2000070c 	.word	0x2000070c

0800a56c <memcpy>:
 800a56c:	440a      	add	r2, r1
 800a56e:	4291      	cmp	r1, r2
 800a570:	f100 33ff 	add.w	r3, r0, #4294967295
 800a574:	d100      	bne.n	800a578 <memcpy+0xc>
 800a576:	4770      	bx	lr
 800a578:	b510      	push	{r4, lr}
 800a57a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a57e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a582:	4291      	cmp	r1, r2
 800a584:	d1f9      	bne.n	800a57a <memcpy+0xe>
 800a586:	bd10      	pop	{r4, pc}

0800a588 <__assert_func>:
 800a588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a58a:	4614      	mov	r4, r2
 800a58c:	461a      	mov	r2, r3
 800a58e:	4b09      	ldr	r3, [pc, #36]	@ (800a5b4 <__assert_func+0x2c>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4605      	mov	r5, r0
 800a594:	68d8      	ldr	r0, [r3, #12]
 800a596:	b954      	cbnz	r4, 800a5ae <__assert_func+0x26>
 800a598:	4b07      	ldr	r3, [pc, #28]	@ (800a5b8 <__assert_func+0x30>)
 800a59a:	461c      	mov	r4, r3
 800a59c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a5a0:	9100      	str	r1, [sp, #0]
 800a5a2:	462b      	mov	r3, r5
 800a5a4:	4905      	ldr	r1, [pc, #20]	@ (800a5bc <__assert_func+0x34>)
 800a5a6:	f000 f841 	bl	800a62c <fiprintf>
 800a5aa:	f000 f851 	bl	800a650 <abort>
 800a5ae:	4b04      	ldr	r3, [pc, #16]	@ (800a5c0 <__assert_func+0x38>)
 800a5b0:	e7f4      	b.n	800a59c <__assert_func+0x14>
 800a5b2:	bf00      	nop
 800a5b4:	20000018 	.word	0x20000018
 800a5b8:	0800aa06 	.word	0x0800aa06
 800a5bc:	0800a9d8 	.word	0x0800a9d8
 800a5c0:	0800a9cb 	.word	0x0800a9cb

0800a5c4 <_calloc_r>:
 800a5c4:	b570      	push	{r4, r5, r6, lr}
 800a5c6:	fba1 5402 	umull	r5, r4, r1, r2
 800a5ca:	b93c      	cbnz	r4, 800a5dc <_calloc_r+0x18>
 800a5cc:	4629      	mov	r1, r5
 800a5ce:	f7fd fbd5 	bl	8007d7c <_malloc_r>
 800a5d2:	4606      	mov	r6, r0
 800a5d4:	b928      	cbnz	r0, 800a5e2 <_calloc_r+0x1e>
 800a5d6:	2600      	movs	r6, #0
 800a5d8:	4630      	mov	r0, r6
 800a5da:	bd70      	pop	{r4, r5, r6, pc}
 800a5dc:	220c      	movs	r2, #12
 800a5de:	6002      	str	r2, [r0, #0]
 800a5e0:	e7f9      	b.n	800a5d6 <_calloc_r+0x12>
 800a5e2:	462a      	mov	r2, r5
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	f7fe faa5 	bl	8008b34 <memset>
 800a5ea:	e7f5      	b.n	800a5d8 <_calloc_r+0x14>

0800a5ec <__ascii_mbtowc>:
 800a5ec:	b082      	sub	sp, #8
 800a5ee:	b901      	cbnz	r1, 800a5f2 <__ascii_mbtowc+0x6>
 800a5f0:	a901      	add	r1, sp, #4
 800a5f2:	b142      	cbz	r2, 800a606 <__ascii_mbtowc+0x1a>
 800a5f4:	b14b      	cbz	r3, 800a60a <__ascii_mbtowc+0x1e>
 800a5f6:	7813      	ldrb	r3, [r2, #0]
 800a5f8:	600b      	str	r3, [r1, #0]
 800a5fa:	7812      	ldrb	r2, [r2, #0]
 800a5fc:	1e10      	subs	r0, r2, #0
 800a5fe:	bf18      	it	ne
 800a600:	2001      	movne	r0, #1
 800a602:	b002      	add	sp, #8
 800a604:	4770      	bx	lr
 800a606:	4610      	mov	r0, r2
 800a608:	e7fb      	b.n	800a602 <__ascii_mbtowc+0x16>
 800a60a:	f06f 0001 	mvn.w	r0, #1
 800a60e:	e7f8      	b.n	800a602 <__ascii_mbtowc+0x16>

0800a610 <__ascii_wctomb>:
 800a610:	4603      	mov	r3, r0
 800a612:	4608      	mov	r0, r1
 800a614:	b141      	cbz	r1, 800a628 <__ascii_wctomb+0x18>
 800a616:	2aff      	cmp	r2, #255	@ 0xff
 800a618:	d904      	bls.n	800a624 <__ascii_wctomb+0x14>
 800a61a:	228a      	movs	r2, #138	@ 0x8a
 800a61c:	601a      	str	r2, [r3, #0]
 800a61e:	f04f 30ff 	mov.w	r0, #4294967295
 800a622:	4770      	bx	lr
 800a624:	700a      	strb	r2, [r1, #0]
 800a626:	2001      	movs	r0, #1
 800a628:	4770      	bx	lr
	...

0800a62c <fiprintf>:
 800a62c:	b40e      	push	{r1, r2, r3}
 800a62e:	b503      	push	{r0, r1, lr}
 800a630:	4601      	mov	r1, r0
 800a632:	ab03      	add	r3, sp, #12
 800a634:	4805      	ldr	r0, [pc, #20]	@ (800a64c <fiprintf+0x20>)
 800a636:	f853 2b04 	ldr.w	r2, [r3], #4
 800a63a:	6800      	ldr	r0, [r0, #0]
 800a63c:	9301      	str	r3, [sp, #4]
 800a63e:	f7ff fd4d 	bl	800a0dc <_vfiprintf_r>
 800a642:	b002      	add	sp, #8
 800a644:	f85d eb04 	ldr.w	lr, [sp], #4
 800a648:	b003      	add	sp, #12
 800a64a:	4770      	bx	lr
 800a64c:	20000018 	.word	0x20000018

0800a650 <abort>:
 800a650:	b508      	push	{r3, lr}
 800a652:	2006      	movs	r0, #6
 800a654:	f000 f82c 	bl	800a6b0 <raise>
 800a658:	2001      	movs	r0, #1
 800a65a:	f7f7 fa81 	bl	8001b60 <_exit>

0800a65e <_raise_r>:
 800a65e:	291f      	cmp	r1, #31
 800a660:	b538      	push	{r3, r4, r5, lr}
 800a662:	4605      	mov	r5, r0
 800a664:	460c      	mov	r4, r1
 800a666:	d904      	bls.n	800a672 <_raise_r+0x14>
 800a668:	2316      	movs	r3, #22
 800a66a:	6003      	str	r3, [r0, #0]
 800a66c:	f04f 30ff 	mov.w	r0, #4294967295
 800a670:	bd38      	pop	{r3, r4, r5, pc}
 800a672:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a674:	b112      	cbz	r2, 800a67c <_raise_r+0x1e>
 800a676:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a67a:	b94b      	cbnz	r3, 800a690 <_raise_r+0x32>
 800a67c:	4628      	mov	r0, r5
 800a67e:	f000 f831 	bl	800a6e4 <_getpid_r>
 800a682:	4622      	mov	r2, r4
 800a684:	4601      	mov	r1, r0
 800a686:	4628      	mov	r0, r5
 800a688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a68c:	f000 b818 	b.w	800a6c0 <_kill_r>
 800a690:	2b01      	cmp	r3, #1
 800a692:	d00a      	beq.n	800a6aa <_raise_r+0x4c>
 800a694:	1c59      	adds	r1, r3, #1
 800a696:	d103      	bne.n	800a6a0 <_raise_r+0x42>
 800a698:	2316      	movs	r3, #22
 800a69a:	6003      	str	r3, [r0, #0]
 800a69c:	2001      	movs	r0, #1
 800a69e:	e7e7      	b.n	800a670 <_raise_r+0x12>
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	4798      	blx	r3
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	e7e0      	b.n	800a670 <_raise_r+0x12>
	...

0800a6b0 <raise>:
 800a6b0:	4b02      	ldr	r3, [pc, #8]	@ (800a6bc <raise+0xc>)
 800a6b2:	4601      	mov	r1, r0
 800a6b4:	6818      	ldr	r0, [r3, #0]
 800a6b6:	f7ff bfd2 	b.w	800a65e <_raise_r>
 800a6ba:	bf00      	nop
 800a6bc:	20000018 	.word	0x20000018

0800a6c0 <_kill_r>:
 800a6c0:	b538      	push	{r3, r4, r5, lr}
 800a6c2:	4d07      	ldr	r5, [pc, #28]	@ (800a6e0 <_kill_r+0x20>)
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	4604      	mov	r4, r0
 800a6c8:	4608      	mov	r0, r1
 800a6ca:	4611      	mov	r1, r2
 800a6cc:	602b      	str	r3, [r5, #0]
 800a6ce:	f7f7 fa37 	bl	8001b40 <_kill>
 800a6d2:	1c43      	adds	r3, r0, #1
 800a6d4:	d102      	bne.n	800a6dc <_kill_r+0x1c>
 800a6d6:	682b      	ldr	r3, [r5, #0]
 800a6d8:	b103      	cbz	r3, 800a6dc <_kill_r+0x1c>
 800a6da:	6023      	str	r3, [r4, #0]
 800a6dc:	bd38      	pop	{r3, r4, r5, pc}
 800a6de:	bf00      	nop
 800a6e0:	2000070c 	.word	0x2000070c

0800a6e4 <_getpid_r>:
 800a6e4:	f7f7 ba24 	b.w	8001b30 <_getpid>

0800a6e8 <_init>:
 800a6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ea:	bf00      	nop
 800a6ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ee:	bc08      	pop	{r3}
 800a6f0:	469e      	mov	lr, r3
 800a6f2:	4770      	bx	lr

0800a6f4 <_fini>:
 800a6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f6:	bf00      	nop
 800a6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6fa:	bc08      	pop	{r3}
 800a6fc:	469e      	mov	lr, r3
 800a6fe:	4770      	bx	lr
