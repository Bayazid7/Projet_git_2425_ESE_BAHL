
SOFWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f100  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000828  0800f2e0  0800f2e0  000102e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb08  0800fb08  000111d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb08  0800fb08  00010b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb10  0800fb10  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb10  0800fb10  00010b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fb14  0800fb14  00010b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800fb18  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003aa8  200001d8  0800fcf0  000111d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003c80  0800fcf0  00011c80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000208c7  00000000  00000000  00011208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b0f  00000000  00000000  00031acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b30  00000000  00000000  000365e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000150b  00000000  00000000  00038110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023513  00000000  00000000  0003961b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023084  00000000  00000000  0005cb2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d48d0  00000000  00000000  0007fbb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154482  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008680  00000000  00000000  001544c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0015cb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f2c8 	.word	0x0800f2c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800f2c8 	.word	0x0800f2c8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <ADXL343_I2C_Read>:
#include "cmsis_os.h"

TaskHandle_t TapDetected_task = NULL;

static uint8_t ADXL343_I2C_Read(ADXL343_InstanceDef_t *Instance, uint8_t reg, uint8_t *buf, uint16_t size)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af04      	add	r7, sp, #16
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	461a      	mov	r2, r3
 8001040:	460b      	mov	r3, r1
 8001042:	72fb      	strb	r3, [r7, #11]
 8001044:	4613      	mov	r3, r2
 8001046:	813b      	strh	r3, [r7, #8]
	if (Instance == NULL || buf == NULL || size == 0)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d005      	beq.n	800105a <ADXL343_I2C_Read+0x26>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <ADXL343_I2C_Read+0x26>
 8001054:	893b      	ldrh	r3, [r7, #8]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <ADXL343_I2C_Read+0x2a>
	{
		return 1;
 800105a:	2301      	movs	r3, #1
 800105c:	e014      	b.n	8001088 <ADXL343_I2C_Read+0x54>
	}
	if (HAL_I2C_Mem_Read(Instance->hi2c, ADXL343_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, buf, size, HAL_MAX_DELAY) != HAL_OK)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	7afb      	ldrb	r3, [r7, #11]
 8001064:	b29a      	uxth	r2, r3
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	893b      	ldrh	r3, [r7, #8]
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2301      	movs	r3, #1
 8001076:	21a6      	movs	r1, #166	@ 0xa6
 8001078:	f002 ff68 	bl	8003f4c <HAL_I2C_Mem_Read>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <ADXL343_I2C_Read+0x52>
	{
		return 1;
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <ADXL343_I2C_Read+0x54>
	}
	return 0;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <ADXL343_I2C_Write>:

static uint8_t ADXL343_I2C_Write(ADXL343_InstanceDef_t *Instance, uint8_t reg, uint8_t *buf, uint16_t size)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af04      	add	r7, sp, #16
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	461a      	mov	r2, r3
 800109c:	460b      	mov	r3, r1
 800109e:	72fb      	strb	r3, [r7, #11]
 80010a0:	4613      	mov	r3, r2
 80010a2:	813b      	strh	r3, [r7, #8]
	if (Instance == NULL || buf == NULL || size == 0)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d005      	beq.n	80010b6 <ADXL343_I2C_Write+0x26>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <ADXL343_I2C_Write+0x26>
 80010b0:	893b      	ldrh	r3, [r7, #8]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <ADXL343_I2C_Write+0x2a>
	{
		return 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e014      	b.n	80010e4 <ADXL343_I2C_Write+0x54>
	}
	if (HAL_I2C_Mem_Write(Instance->hi2c, ADXL343_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, buf, size, HAL_MAX_DELAY) != HAL_OK)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	7afb      	ldrb	r3, [r7, #11]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	9302      	str	r3, [sp, #8]
 80010c8:	893b      	ldrh	r3, [r7, #8]
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	21a6      	movs	r1, #166	@ 0xa6
 80010d4:	f002 fe26 	bl	8003d24 <HAL_I2C_Mem_Write>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <ADXL343_I2C_Write+0x52>
	{
		return 1;
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <ADXL343_I2C_Write+0x54>
	}
	return 0;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <ADXL343_Init>:


uint8_t ADXL343_Init(ADXL343_InstanceDef_t *Instance,I2C_HandleTypeDef *hi2c)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
	if (Instance == NULL )
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d104      	bne.n	8001106 <ADXL343_Init+0x1a>
	{
		printf("Erreur : Instance ou handle I2C est NULL.\r\n");
 80010fc:	4866      	ldr	r0, [pc, #408]	@ (8001298 <ADXL343_Init+0x1ac>)
 80010fe:	f00a faa9 	bl	800b654 <puts>
		return 1;
 8001102:	2301      	movs	r3, #1
 8001104:	e0c3      	b.n	800128e <ADXL343_Init+0x1a2>
	}
	Instance->hi2c = hi2c;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	601a      	str	r2, [r3, #0]
	Instance->accX = 0;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
	Instance->accY = 0;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
	Instance->accZ = 0;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
	uint8_t configData;
	uint8_t deviceID = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	73bb      	strb	r3, [r7, #14]
	if (ADXL343_I2C_Read(Instance, ADXL343_REG_DEVID, &deviceID, 1) != 0)
 8001128:	f107 020e 	add.w	r2, r7, #14
 800112c:	2301      	movs	r3, #1
 800112e:	2100      	movs	r1, #0
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff7f 	bl	8001034 <ADXL343_I2C_Read>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d004      	beq.n	8001146 <ADXL343_Init+0x5a>
	{
		printf("Erreur : Échec de la lecture de l'identifiant de l'appareil.\r\n");
 800113c:	4857      	ldr	r0, [pc, #348]	@ (800129c <ADXL343_Init+0x1b0>)
 800113e:	f00a fa89 	bl	800b654 <puts>
		return 1;
 8001142:	2301      	movs	r3, #1
 8001144:	e0a3      	b.n	800128e <ADXL343_Init+0x1a2>
	}

	if (deviceID != ADXL343_DEVID)
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	2be5      	cmp	r3, #229	@ 0xe5
 800114a:	d007      	beq.n	800115c <ADXL343_Init+0x70>
	{
		printf("Erreur : ID de l'appareil incorrect (attendu : 0x%X, lu : 0x%X).\r\n", ADXL343_DEVID, deviceID);
 800114c:	7bbb      	ldrb	r3, [r7, #14]
 800114e:	461a      	mov	r2, r3
 8001150:	21e5      	movs	r1, #229	@ 0xe5
 8001152:	4853      	ldr	r0, [pc, #332]	@ (80012a0 <ADXL343_Init+0x1b4>)
 8001154:	f00a fa16 	bl	800b584 <iprintf>
		return 1;
 8001158:	2301      	movs	r3, #1
 800115a:	e098      	b.n	800128e <ADXL343_Init+0x1a2>
	}

	configData = 0x08;
 800115c:	2308      	movs	r3, #8
 800115e:	73fb      	strb	r3, [r7, #15]
	if (ADXL343_I2C_Write(Instance, ADXL343_REG_POWER_CTL, &configData, 1) != 0)
 8001160:	f107 020f 	add.w	r2, r7, #15
 8001164:	2301      	movs	r3, #1
 8001166:	212d      	movs	r1, #45	@ 0x2d
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff91 	bl	8001090 <ADXL343_I2C_Write>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d004      	beq.n	800117e <ADXL343_Init+0x92>
	{
		printf("Erreur : Échec de la configuration de POWER_CTL.\r\n");
 8001174:	484b      	ldr	r0, [pc, #300]	@ (80012a4 <ADXL343_Init+0x1b8>)
 8001176:	f00a fa6d 	bl	800b654 <puts>
		return 1;
 800117a:	2301      	movs	r3, #1
 800117c:	e087      	b.n	800128e <ADXL343_Init+0x1a2>
	}
	// Configuration du format des données
	configData = 0x0B; // Exemple de format : Full resolution, ±16g
 800117e:	230b      	movs	r3, #11
 8001180:	73fb      	strb	r3, [r7, #15]
	if (ADXL343_I2C_Write(Instance, ADXL343_REG_DATA_FORMAT, &configData, 1) != 0)
 8001182:	f107 020f 	add.w	r2, r7, #15
 8001186:	2301      	movs	r3, #1
 8001188:	2131      	movs	r1, #49	@ 0x31
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff80 	bl	8001090 <ADXL343_I2C_Write>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <ADXL343_Init+0xb4>
	{
		printf("Erreur : Échec de la configuration de DATA_FORMAT.\r\n");
 8001196:	4844      	ldr	r0, [pc, #272]	@ (80012a8 <ADXL343_Init+0x1bc>)
 8001198:	f00a fa5c 	bl	800b654 <puts>
		return 1;
 800119c:	2301      	movs	r3, #1
 800119e:	e076      	b.n	800128e <ADXL343_Init+0x1a2>
	}

	ADXL343_SetOffset(Instance, 0,0, 0)	;
 80011a0:	2300      	movs	r3, #0
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 f890 	bl	80012cc <ADXL343_SetOffset>


	// Désactivation des interruptions
	configData = 0x00;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]
	if (ADXL343_I2C_Write(Instance, ADXL343_REG_INT_ENABLE, &configData, 1) != 0)
 80011b0:	f107 020f 	add.w	r2, r7, #15
 80011b4:	2301      	movs	r3, #1
 80011b6:	212e      	movs	r1, #46	@ 0x2e
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff69 	bl	8001090 <ADXL343_I2C_Write>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d004      	beq.n	80011ce <ADXL343_Init+0xe2>
	{
		printf("Erreur : Échec de la désactivation des interruptions.\r\n");
 80011c4:	4839      	ldr	r0, [pc, #228]	@ (80012ac <ADXL343_Init+0x1c0>)
 80011c6:	f00a fa45 	bl	800b654 <puts>
		return 1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e05f      	b.n	800128e <ADXL343_Init+0x1a2>
	}
	// Configuration des seuils de tap
	if (ADXL343_SetTapThreshold(Instance,70) != 0)
 80011ce:	2146      	movs	r1, #70	@ 0x46
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 f89d 	bl	8001310 <ADXL343_SetTapThreshold>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d004      	beq.n	80011e6 <ADXL343_Init+0xfa>
	{
		printf("Erreur : Échec de la configuration de THRESH_TAP.\r\n");
 80011dc:	4834      	ldr	r0, [pc, #208]	@ (80012b0 <ADXL343_Init+0x1c4>)
 80011de:	f00a fa39 	bl	800b654 <puts>
		return 1;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e053      	b.n	800128e <ADXL343_Init+0x1a2>
	}
	// Configuration de la durée
	if (ADXL343_SetTapDuration(Instance, 90)!= 0)
 80011e6:	215a      	movs	r1, #90	@ 0x5a
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 f8a7 	bl	800133c <ADXL343_SetTapDuration>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d004      	beq.n	80011fe <ADXL343_Init+0x112>
	{
		printf("Erreur : Échec de la configuration de DUR.\r\n");
 80011f4:	482f      	ldr	r0, [pc, #188]	@ (80012b4 <ADXL343_Init+0x1c8>)
 80011f6:	f00a fa2d 	bl	800b654 <puts>
		return 1;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e047      	b.n	800128e <ADXL343_Init+0x1a2>
	}

	// Configuration des axes de tap
	configData = 0x06; // Activer les axes X, Y
 80011fe:	2306      	movs	r3, #6
 8001200:	73fb      	strb	r3, [r7, #15]
	if (ADXL343_I2C_Write(Instance, ADXL343_REG_TAP_AXES, &configData, 1) != 0)
 8001202:	f107 020f 	add.w	r2, r7, #15
 8001206:	2301      	movs	r3, #1
 8001208:	212a      	movs	r1, #42	@ 0x2a
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff40 	bl	8001090 <ADXL343_I2C_Write>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d004      	beq.n	8001220 <ADXL343_Init+0x134>
	{
		printf("Erreur : Échec de la configuration de TAP_AXES.\r\n");
 8001216:	4828      	ldr	r0, [pc, #160]	@ (80012b8 <ADXL343_Init+0x1cc>)
 8001218:	f00a fa1c 	bl	800b654 <puts>
		return 1;
 800121c:	2301      	movs	r3, #1
 800121e:	e036      	b.n	800128e <ADXL343_Init+0x1a2>
	}

	// Configuration de la fréquence d'échantillonnage
	configData = RATE_200_HZ;
 8001220:	230b      	movs	r3, #11
 8001222:	73fb      	strb	r3, [r7, #15]
	if (ADXL343_I2C_Write(Instance, ADXL343_REG_BW_RATE, &configData, 1) != 0)
 8001224:	f107 020f 	add.w	r2, r7, #15
 8001228:	2301      	movs	r3, #1
 800122a:	212c      	movs	r1, #44	@ 0x2c
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff2f 	bl	8001090 <ADXL343_I2C_Write>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d004      	beq.n	8001242 <ADXL343_Init+0x156>
	{
		printf("Erreur : Échec de la configuration de BW_RATE.\r\n");
 8001238:	4820      	ldr	r0, [pc, #128]	@ (80012bc <ADXL343_Init+0x1d0>)
 800123a:	f00a fa0b 	bl	800b654 <puts>
		return 1;
 800123e:	2301      	movs	r3, #1
 8001240:	e025      	b.n	800128e <ADXL343_Init+0x1a2>
	}

	// Configuration de la carte d'interruption
	configData = 0x40; // Exemple de configuration
 8001242:	2340      	movs	r3, #64	@ 0x40
 8001244:	73fb      	strb	r3, [r7, #15]
	if (ADXL343_I2C_Write(Instance, ADXL343_REG_INT_MAP, &configData, 1) != 0)
 8001246:	f107 020f 	add.w	r2, r7, #15
 800124a:	2301      	movs	r3, #1
 800124c:	212f      	movs	r1, #47	@ 0x2f
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ff1e 	bl	8001090 <ADXL343_I2C_Write>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d004      	beq.n	8001264 <ADXL343_Init+0x178>
	{
		printf("Erreur : Échec de la configuration de INT_MAP.\r\n");
 800125a:	4819      	ldr	r0, [pc, #100]	@ (80012c0 <ADXL343_Init+0x1d4>)
 800125c:	f00a f9fa 	bl	800b654 <puts>
		return 1;
 8001260:	2301      	movs	r3, #1
 8001262:	e014      	b.n	800128e <ADXL343_Init+0x1a2>
	}

	// Activation des interruptions
	configData = 0x40; // Exemple pour activer les interruptions
 8001264:	2340      	movs	r3, #64	@ 0x40
 8001266:	73fb      	strb	r3, [r7, #15]
	if (ADXL343_I2C_Write(Instance, ADXL343_REG_INT_ENABLE, &configData, 1) != 0)
 8001268:	f107 020f 	add.w	r2, r7, #15
 800126c:	2301      	movs	r3, #1
 800126e:	212e      	movs	r1, #46	@ 0x2e
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff0d 	bl	8001090 <ADXL343_I2C_Write>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d004      	beq.n	8001286 <ADXL343_Init+0x19a>
	{
		printf("Erreur : Échec de l'activation des interruptions.\r\n");
 800127c:	4811      	ldr	r0, [pc, #68]	@ (80012c4 <ADXL343_Init+0x1d8>)
 800127e:	f00a f9e9 	bl	800b654 <puts>
		return 1;
 8001282:	2301      	movs	r3, #1
 8001284:	e003      	b.n	800128e <ADXL343_Init+0x1a2>
	}

	printf("Initialisation de l'ADXL343 réussie.\r\n");
 8001286:	4810      	ldr	r0, [pc, #64]	@ (80012c8 <ADXL343_Init+0x1dc>)
 8001288:	f00a f9e4 	bl	800b654 <puts>
	return 0;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	0800f2e0 	.word	0x0800f2e0
 800129c:	0800f30c 	.word	0x0800f30c
 80012a0:	0800f34c 	.word	0x0800f34c
 80012a4:	0800f390 	.word	0x0800f390
 80012a8:	0800f3c4 	.word	0x0800f3c4
 80012ac:	0800f3fc 	.word	0x0800f3fc
 80012b0:	0800f438 	.word	0x0800f438
 80012b4:	0800f46c 	.word	0x0800f46c
 80012b8:	0800f49c 	.word	0x0800f49c
 80012bc:	0800f4d0 	.word	0x0800f4d0
 80012c0:	0800f504 	.word	0x0800f504
 80012c4:	0800f538 	.word	0x0800f538
 80012c8:	0800f56c 	.word	0x0800f56c

080012cc <ADXL343_SetOffset>:

uint8_t ADXL343_SetOffset(ADXL343_InstanceDef_t *Instance, uint8_t ofsX, uint8_t ofsY, uint8_t ofsZ)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	4608      	mov	r0, r1
 80012d6:	4611      	mov	r1, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	4603      	mov	r3, r0
 80012dc:	70fb      	strb	r3, [r7, #3]
 80012de:	460b      	mov	r3, r1
 80012e0:	70bb      	strb	r3, [r7, #2]
 80012e2:	4613      	mov	r3, r2
 80012e4:	707b      	strb	r3, [r7, #1]
	uint8_t offsetData[3];
	offsetData[0] = ofsX;
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	733b      	strb	r3, [r7, #12]
	offsetData[1] = ofsY;
 80012ea:	78bb      	ldrb	r3, [r7, #2]
 80012ec:	737b      	strb	r3, [r7, #13]

	if (ADXL343_I2C_Write(Instance, ADXL343_REG_OFSX, offsetData, 3) != 0)
 80012ee:	f107 020c 	add.w	r2, r7, #12
 80012f2:	2303      	movs	r3, #3
 80012f4:	211e      	movs	r1, #30
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff feca 	bl	8001090 <ADXL343_I2C_Write>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <ADXL343_SetOffset+0x3a>
	{
		return 1;
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <ADXL343_SetOffset+0x3c>
	}
	return 0;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <ADXL343_SetTapThreshold>:

	return 0;
}

uint8_t ADXL343_SetTapThreshold(ADXL343_InstanceDef_t *Instance, uint8_t threshold)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	70fb      	strb	r3, [r7, #3]
	if (ADXL343_I2C_Write(Instance, ADXL343_REG_THRESH_TAP, &threshold, 1) != 0)
 800131c:	1cfa      	adds	r2, r7, #3
 800131e:	2301      	movs	r3, #1
 8001320:	211d      	movs	r1, #29
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff feb4 	bl	8001090 <ADXL343_I2C_Write>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <ADXL343_SetTapThreshold+0x22>
	{
		return 1;
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <ADXL343_SetTapThreshold+0x24>
	}
	return 0;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <ADXL343_SetTapDuration>:

uint8_t ADXL343_SetTapDuration(ADXL343_InstanceDef_t *Instance, uint8_t duration)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	70fb      	strb	r3, [r7, #3]
	if (ADXL343_I2C_Write(Instance, ADXL343_REG_DUR, &duration, 1) != 0)
 8001348:	1cfa      	adds	r2, r7, #3
 800134a:	2301      	movs	r3, #1
 800134c:	2121      	movs	r1, #33	@ 0x21
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fe9e 	bl	8001090 <ADXL343_I2C_Write>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <ADXL343_SetTapDuration+0x22>
	{
		return 1;
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <ADXL343_SetTapDuration+0x24>
	}
	return 0;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <Moteur_init>:
#include <stdlib.h>

#define PI 3.14159

void Moteur_init(Moteur_HandleTypeDef* moteur, TIM_HandleTypeDef* timer, uint32_t channel)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
    moteur->pwm_timer = timer;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	601a      	str	r2, [r3, #0]
    moteur->channel = channel;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	605a      	str	r2, [r3, #4]
    moteur->direction = MOTEUR_STOP;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2253      	movs	r2, #83	@ 0x53
 8001384:	721a      	strb	r2, [r3, #8]
    moteur->vitesse = 0;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <Moteur_setSpeed>:

void Moteur_setSpeed(Moteur_HandleTypeDef* moteur, int speed)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
    int vitesse = (int)(speed *8500 / 290);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	f242 1234 	movw	r2, #8500	@ 0x2134
 80013a8:	fb02 f303 	mul.w	r3, r2, r3
 80013ac:	4a53      	ldr	r2, [pc, #332]	@ (80014fc <Moteur_setSpeed+0x164>)
 80013ae:	fb82 1203 	smull	r1, r2, r2, r3
 80013b2:	441a      	add	r2, r3
 80013b4:	1212      	asrs	r2, r2, #8
 80013b6:	17db      	asrs	r3, r3, #31
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	60fb      	str	r3, [r7, #12]
    moteur->vitesse = speed;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	60da      	str	r2, [r3, #12]

    if (speed >= 0)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db3b      	blt.n	8001440 <Moteur_setSpeed+0xa8>
    {
          Moteur_setDirection(moteur, MOTEUR_AVANCER);
 80013c8:	2141      	movs	r1, #65	@ 0x41
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f898 	bl	8001500 <Moteur_setDirection>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, vitesse);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d105      	bne.n	80013e4 <Moteur_setSpeed+0x4c>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	635a      	str	r2, [r3, #52]	@ 0x34
    else
    {
          Moteur_setDirection(moteur, MOTEUR_RECULER);
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, abs(vitesse));
    }
}
 80013e2:	e086      	b.n	80014f2 <Moteur_setSpeed+0x15a>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, vitesse);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d105      	bne.n	80013f8 <Moteur_setSpeed+0x60>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6393      	str	r3, [r2, #56]	@ 0x38
 80013f6:	e07c      	b.n	80014f2 <Moteur_setSpeed+0x15a>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	d105      	bne.n	800140c <Moteur_setSpeed+0x74>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800140a:	e072      	b.n	80014f2 <Moteur_setSpeed+0x15a>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b0c      	cmp	r3, #12
 8001412:	d105      	bne.n	8001420 <Moteur_setSpeed+0x88>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6413      	str	r3, [r2, #64]	@ 0x40
 800141e:	e068      	b.n	80014f2 <Moteur_setSpeed+0x15a>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b10      	cmp	r3, #16
 8001426:	d105      	bne.n	8001434 <Moteur_setSpeed+0x9c>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6493      	str	r3, [r2, #72]	@ 0x48
 8001432:	e05e      	b.n	80014f2 <Moteur_setSpeed+0x15a>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800143e:	e058      	b.n	80014f2 <Moteur_setSpeed+0x15a>
          Moteur_setDirection(moteur, MOTEUR_RECULER);
 8001440:	2152      	movs	r1, #82	@ 0x52
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f85c 	bl	8001500 <Moteur_setDirection>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, abs(vitesse));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d109      	bne.n	8001464 <Moteur_setSpeed+0xcc>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001456:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001462:	e046      	b.n	80014f2 <Moteur_setSpeed+0x15a>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, abs(vitesse));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b04      	cmp	r3, #4
 800146a:	d10a      	bne.n	8001482 <Moteur_setSpeed+0xea>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001472:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	460b      	mov	r3, r1
 800147e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001480:	e037      	b.n	80014f2 <Moteur_setSpeed+0x15a>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, abs(vitesse));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b08      	cmp	r3, #8
 8001488:	d10a      	bne.n	80014a0 <Moteur_setSpeed+0x108>
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001490:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	460b      	mov	r3, r1
 800149c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800149e:	e028      	b.n	80014f2 <Moteur_setSpeed+0x15a>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, abs(vitesse));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b0c      	cmp	r3, #12
 80014a6:	d10a      	bne.n	80014be <Moteur_setSpeed+0x126>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80014ae:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	460b      	mov	r3, r1
 80014ba:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80014bc:	e019      	b.n	80014f2 <Moteur_setSpeed+0x15a>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, abs(vitesse));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b10      	cmp	r3, #16
 80014c4:	d10a      	bne.n	80014dc <Moteur_setSpeed+0x144>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80014cc:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	460b      	mov	r3, r1
 80014d8:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80014da:	e00a      	b.n	80014f2 <Moteur_setSpeed+0x15a>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, abs(vitesse));
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80014e2:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	460b      	mov	r3, r1
 80014ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80014f0:	e7ff      	b.n	80014f2 <Moteur_setSpeed+0x15a>
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	e1fc780f 	.word	0xe1fc780f

08001500 <Moteur_setDirection>:

void Moteur_setDirection(Moteur_HandleTypeDef* moteur, char direction)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	70fb      	strb	r3, [r7, #3]
    moteur->direction = direction;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	78fa      	ldrb	r2, [r7, #3]
 8001510:	721a      	strb	r2, [r3, #8]

    switch (direction)
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	2b41      	cmp	r3, #65	@ 0x41
 8001516:	d002      	beq.n	800151e <Moteur_setDirection+0x1e>
 8001518:	2b52      	cmp	r3, #82	@ 0x52
 800151a:	d011      	beq.n	8001540 <Moteur_setDirection+0x40>
 800151c:	e021      	b.n	8001562 <Moteur_setDirection+0x62>
    {
        case MOTEUR_AVANCER:
            HAL_TIM_PWM_Start(moteur->pwm_timer, moteur->channel);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	4619      	mov	r1, r3
 8001528:	4610      	mov	r0, r2
 800152a:	f004 faa7 	bl	8005a7c <HAL_TIM_PWM_Start>
            HAL_TIMEx_PWMN_Stop(moteur->pwm_timer, moteur->channel);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	4619      	mov	r1, r3
 8001538:	4610      	mov	r0, r2
 800153a:	f005 fd69 	bl	8007010 <HAL_TIMEx_PWMN_Stop>
            break;
 800153e:	e021      	b.n	8001584 <Moteur_setDirection+0x84>

        case MOTEUR_RECULER:
            HAL_TIMEx_PWMN_Start(moteur->pwm_timer, moteur->channel);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	4619      	mov	r1, r3
 800154a:	4610      	mov	r0, r2
 800154c:	f005 fcac 	bl	8006ea8 <HAL_TIMEx_PWMN_Start>
            HAL_TIM_PWM_Stop(moteur->pwm_timer, moteur->channel);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	4619      	mov	r1, r3
 800155a:	4610      	mov	r0, r2
 800155c:	f004 fb8e 	bl	8005c7c <HAL_TIM_PWM_Stop>
            break;
 8001560:	e010      	b.n	8001584 <Moteur_setDirection+0x84>

        case MOTEUR_STOP:
        default:
            HAL_TIM_PWM_Stop(moteur->pwm_timer, moteur->channel);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	4619      	mov	r1, r3
 800156c:	4610      	mov	r0, r2
 800156e:	f004 fb85 	bl	8005c7c <HAL_TIM_PWM_Stop>
            HAL_TIMEx_PWMN_Stop(moteur->pwm_timer, moteur->channel);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	4619      	mov	r1, r3
 800157c:	4610      	mov	r0, r2
 800157e:	f005 fd47 	bl	8007010 <HAL_TIMEx_PWMN_Stop>
            break;
 8001582:	bf00      	nop
    }
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <Moteur_stop>:
{
    Moteur_setDirection(moteur, MOTEUR_AVANCER);
}

void Moteur_stop(Moteur_HandleTypeDef* moteur)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
    Moteur_setDirection(moteur, MOTEUR_STOP);
 8001594:	2153      	movs	r1, #83	@ 0x53
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffb2 	bl	8001500 <Moteur_setDirection>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <Robot_Start>:
void Moteur_recule(Moteur_HandleTypeDef* moteur)
{
    Moteur_setDirection(moteur,MOTEUR_RECULER);
}
void Robot_Start(h_Robot* robot)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
    Moteur_setSpeed(robot->moteur_droite, 120);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	2178      	movs	r1, #120	@ 0x78
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fef0 	bl	8001398 <Moteur_setSpeed>
    Moteur_setSpeed(robot->moteur_gauche, 80);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	2150      	movs	r1, #80	@ 0x50
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff feea 	bl	8001398 <Moteur_setSpeed>
	robot->direction = 'A' ;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2241      	movs	r2, #65	@ 0x41
 80015c8:	701a      	strb	r2, [r3, #0]
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <Robot_Stop>:
void Robot_Stop(h_Robot* robot)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
	Moteur_stop(robot->moteur_droite) ;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ffd4 	bl	800158c <Moteur_stop>
	Moteur_stop(robot->moteur_gauche) ;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ffcf 	bl	800158c <Moteur_stop>
	robot->direction = 'S' ;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2253      	movs	r2, #83	@ 0x53
 80015f2:	701a      	strb	r2, [r3, #0]
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <Robot_Recule>:
void Robot_Recule(h_Robot* robot)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
    Moteur_setSpeed(robot->moteur_droite, -120);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	f06f 0177 	mvn.w	r1, #119	@ 0x77
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fec3 	bl	8001398 <Moteur_setSpeed>
    Moteur_setSpeed(robot->moteur_gauche, -80);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	f06f 014f 	mvn.w	r1, #79	@ 0x4f
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff febc 	bl	8001398 <Moteur_setSpeed>
	robot->direction = 'R' ;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2252      	movs	r2, #82	@ 0x52
 8001624:	701a      	strb	r2, [r3, #0]
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <Robot_Init>:

void Robot_Init(h_Robot* robot ,Moteur_HandleTypeDef* moteurD,Moteur_HandleTypeDef* moteurG )
{
 800162e:	b480      	push	{r7}
 8001630:	b085      	sub	sp, #20
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
	robot->moteur_droite = moteurD ;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	615a      	str	r2, [r3, #20]
	robot->moteur_gauche = moteurG ;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	619a      	str	r2, [r3, #24]
	robot->omega = 0 ;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
	robot->theta =0 ;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
	robot->vitesse = 0 ;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	605a      	str	r2, [r3, #4]
	robot->mode = 0 ; // 0 : mode chat et 1 : mode souris
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	741a      	strb	r2, [r3, #16]
	robot->direction = 'S' ;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2253      	movs	r2, #83	@ 0x53
 8001668:	701a      	strb	r2, [r3, #0]

}
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <Robot_setAngle>:

void Robot_setAngle(h_Robot* robot, float angle)

{
 8001678:	b5b0      	push	{r4, r5, r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	ed87 0a00 	vstr	s0, [r7]
    //  Rotation pour atteindre l'angle spécifié
	angle = angle*(2*PI/360) ;
 8001684:	6838      	ldr	r0, [r7, #0]
 8001686:	f7fe ff87 	bl	8000598 <__aeabi_f2d>
 800168a:	a382      	add	r3, pc, #520	@ (adr r3, 8001894 <Robot_setAngle+0x21c>)
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	f7fe ffda 	bl	8000648 <__aeabi_dmul>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff facc 	bl	8000c38 <__aeabi_d2f>
 80016a0:	4603      	mov	r3, r0
 80016a2:	603b      	str	r3, [r7, #0]
    robot->omega = (2.0 / Ts) * (angle - robot->theta) + robot->omega;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80016aa:	ed97 7a00 	vldr	s14, [r7]
 80016ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b2:	ee17 0a90 	vmov	r0, s15
 80016b6:	f7fe ff6f 	bl	8000598 <__aeabi_f2d>
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	4b72      	ldr	r3, [pc, #456]	@ (8001888 <Robot_setAngle+0x210>)
 80016c0:	f7fe ffc2 	bl	8000648 <__aeabi_dmul>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4614      	mov	r4, r2
 80016ca:	461d      	mov	r5, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe ff61 	bl	8000598 <__aeabi_f2d>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4620      	mov	r0, r4
 80016dc:	4629      	mov	r1, r5
 80016de:	f7fe fdfd 	bl	80002dc <__adddf3>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f7ff faa5 	bl	8000c38 <__aeabi_d2f>
 80016ee:	4602      	mov	r2, r0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	609a      	str	r2, [r3, #8]
    robot->moteur_droite->vitesse =robot->vitesse + robot->omega * L / 2.0;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff4d 	bl	8000598 <__aeabi_f2d>
 80016fe:	4604      	mov	r4, r0
 8001700:	460d      	mov	r5, r1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ff46 	bl	8000598 <__aeabi_f2d>
 800170c:	a35c      	add	r3, pc, #368	@ (adr r3, 8001880 <Robot_setAngle+0x208>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	f7fe ff99 	bl	8000648 <__aeabi_dmul>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001726:	f7ff f8b9 	bl	800089c <__aeabi_ddiv>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4620      	mov	r0, r4
 8001730:	4629      	mov	r1, r5
 8001732:	f7fe fdd3 	bl	80002dc <__adddf3>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695c      	ldr	r4, [r3, #20]
 8001742:	f7ff fa31 	bl	8000ba8 <__aeabi_d2iz>
 8001746:	4603      	mov	r3, r0
 8001748:	60e3      	str	r3, [r4, #12]
    robot->moteur_gauche->vitesse = robot->vitesse - robot->omega * L / 2.0;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe ff22 	bl	8000598 <__aeabi_f2d>
 8001754:	4604      	mov	r4, r0
 8001756:	460d      	mov	r5, r1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe ff1b 	bl	8000598 <__aeabi_f2d>
 8001762:	a347      	add	r3, pc, #284	@ (adr r3, 8001880 <Robot_setAngle+0x208>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7fe ff6e 	bl	8000648 <__aeabi_dmul>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800177c:	f7ff f88e 	bl	800089c <__aeabi_ddiv>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4620      	mov	r0, r4
 8001786:	4629      	mov	r1, r5
 8001788:	f7fe fda6 	bl	80002d8 <__aeabi_dsub>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	699c      	ldr	r4, [r3, #24]
 8001798:	f7ff fa06 	bl	8000ba8 <__aeabi_d2iz>
 800179c:	4603      	mov	r3, r0
 800179e:	60e3      	str	r3, [r4, #12]

    // Limiter les vitesses des moteurs pendant la rotation
    if (robot->moteur_droite->vitesse > 290) robot->moteur_droite->vitesse = 290;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 80017aa:	dd04      	ble.n	80017b6 <Robot_setAngle+0x13e>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80017b4:	60da      	str	r2, [r3, #12]
    if (robot->moteur_droite->vitesse < -290) robot->moteur_droite->vitesse = -290;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	f513 7f91 	cmn.w	r3, #290	@ 0x122
 80017c0:	da03      	bge.n	80017ca <Robot_setAngle+0x152>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	4a31      	ldr	r2, [pc, #196]	@ (800188c <Robot_setAngle+0x214>)
 80017c8:	60da      	str	r2, [r3, #12]
    if (robot->moteur_gauche->vitesse > 290) robot->moteur_gauche->vitesse = 290;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 80017d4:	dd04      	ble.n	80017e0 <Robot_setAngle+0x168>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80017de:	60da      	str	r2, [r3, #12]
    if (robot->moteur_gauche->vitesse < -290) robot->moteur_gauche->vitesse = -290;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	f513 7f91 	cmn.w	r3, #290	@ 0x122
 80017ea:	da03      	bge.n	80017f4 <Robot_setAngle+0x17c>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a26      	ldr	r2, [pc, #152]	@ (800188c <Robot_setAngle+0x214>)
 80017f2:	60da      	str	r2, [r3, #12]

    // Appliquer les vitesses des moteurs pour la rotation
    Moteur_setSpeed(robot->moteur_droite, (int)robot->moteur_droite->vitesse);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695a      	ldr	r2, [r3, #20]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	4619      	mov	r1, r3
 8001800:	4610      	mov	r0, r2
 8001802:	f7ff fdc9 	bl	8001398 <Moteur_setSpeed>
    Moteur_setSpeed(robot->moteur_gauche, (int)robot->moteur_gauche->vitesse);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699a      	ldr	r2, [r3, #24]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	4619      	mov	r1, r3
 8001812:	4610      	mov	r0, r2
 8001814:	f7ff fdc0 	bl	8001398 <Moteur_setSpeed>

    // Attendre que l'angle soit atteint
    HAL_Delay(1);
 8001818:	2001      	movs	r0, #1
 800181a:	f001 fd9f 	bl	800335c <HAL_Delay>

    // Mettre à jour l'angle courant
    robot->theta = angle;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	60da      	str	r2, [r3, #12]

    //  Avancer en ligne droite
    // Appliquer les vitesses des moteurs pour avancer
    Moteur_setSpeed(robot->moteur_droite, 120);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	2178      	movs	r1, #120	@ 0x78
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fdb4 	bl	8001398 <Moteur_setSpeed>
    Moteur_setSpeed(robot->moteur_gauche, 80);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	2150      	movs	r1, #80	@ 0x50
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fdae 	bl	8001398 <Moteur_setSpeed>
    robot->omega = 0;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
    robot->vitesse = (robot->moteur_gauche->vitesse + robot->moteur_droite->vitesse )*0.5 ;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4413      	add	r3, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fe8e 	bl	8000574 <__aeabi_i2d>
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <Robot_setAngle+0x218>)
 800185e:	f7fe fef3 	bl	8000648 <__aeabi_dmul>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	f7ff f9e5 	bl	8000c38 <__aeabi_d2f>
 800186e:	4602      	mov	r2, r0
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	605a      	str	r2, [r3, #4]
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bdb0      	pop	{r4, r5, r7, pc}
 800187c:	f3af 8000 	nop.w
 8001880:	10624dd3 	.word	0x10624dd3
 8001884:	3fc43958 	.word	0x3fc43958
 8001888:	40690000 	.word	0x40690000
 800188c:	fffffede 	.word	0xfffffede
 8001890:	3fe00000 	.word	0x3fe00000
 8001894:	a50de270 	.word	0xa50de270
 8001898:	3f91df45 	.word	0x3f91df45

0800189c <Moustache_Init>:
// Prototypes des tâches
static void CB_OUT1_Task(void *pvParameters);
static void CB_OUT2_Task(void *pvParameters);

// Initialisation
void Moustache_Init(void) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af02      	add	r7, sp, #8
    // Création des tâches
    xTaskCreate(CB_OUT1_Task, "CB_OUT1_Task", 128, NULL, 5, &cb_out1_task_handle);
 80018a2:	4b0b      	ldr	r3, [pc, #44]	@ (80018d0 <Moustache_Init+0x34>)
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	2305      	movs	r3, #5
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2300      	movs	r3, #0
 80018ac:	2280      	movs	r2, #128	@ 0x80
 80018ae:	4909      	ldr	r1, [pc, #36]	@ (80018d4 <Moustache_Init+0x38>)
 80018b0:	4809      	ldr	r0, [pc, #36]	@ (80018d8 <Moustache_Init+0x3c>)
 80018b2:	f007 fb4f 	bl	8008f54 <xTaskCreate>
    xTaskCreate(CB_OUT2_Task, "CB_OUT2_Task", 128, NULL, 5, &cb_out2_task_handle);
 80018b6:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <Moustache_Init+0x40>)
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	2305      	movs	r3, #5
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	2300      	movs	r3, #0
 80018c0:	2280      	movs	r2, #128	@ 0x80
 80018c2:	4907      	ldr	r1, [pc, #28]	@ (80018e0 <Moustache_Init+0x44>)
 80018c4:	4807      	ldr	r0, [pc, #28]	@ (80018e4 <Moustache_Init+0x48>)
 80018c6:	f007 fb45 	bl	8008f54 <xTaskCreate>
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	200001f4 	.word	0x200001f4
 80018d4:	0800f594 	.word	0x0800f594
 80018d8:	080019bd 	.word	0x080019bd
 80018dc:	200001f8 	.word	0x200001f8
 80018e0:	0800f5a4 	.word	0x0800f5a4
 80018e4:	080019f9 	.word	0x080019f9

080018e8 <Moustache_HandleInterrupt>:

// Gestion des interruptions GPIO
void Moustache_HandleInterrupt(uint16_t GPIO_Pin){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af02      	add	r7, sp, #8
 80018ee:	4603      	mov	r3, r0
 80018f0:	80fb      	strh	r3, [r7, #6]
    BaseType_t higherPriorityTaskWoken = pdFALSE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]

    if (GPIO_Pin == CB_OUT1_Pin) {
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d117      	bne.n	800192c <Moustache_HandleInterrupt+0x44>
        if (exclusive_task == 0 || exclusive_task == 1) {
 80018fc:	4b20      	ldr	r3, [pc, #128]	@ (8001980 <Moustache_HandleInterrupt+0x98>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d004      	beq.n	8001910 <Moustache_HandleInterrupt+0x28>
 8001906:	4b1e      	ldr	r3, [pc, #120]	@ (8001980 <Moustache_HandleInterrupt+0x98>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b01      	cmp	r3, #1
 800190e:	d127      	bne.n	8001960 <Moustache_HandleInterrupt+0x78>
            // Activer CB_OUT1
            exclusive_task = 1; // Marquer CB_OUT1 comme exclusif
 8001910:	4b1b      	ldr	r3, [pc, #108]	@ (8001980 <Moustache_HandleInterrupt+0x98>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
            xTaskNotifyFromISR(cb_out1_task_handle, 0x01, eSetBits, &higherPriorityTaskWoken);
 8001916:	4b1b      	ldr	r3, [pc, #108]	@ (8001984 <Moustache_HandleInterrupt+0x9c>)
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2300      	movs	r3, #0
 8001922:	2201      	movs	r2, #1
 8001924:	2101      	movs	r1, #1
 8001926:	f008 f8dd 	bl	8009ae4 <xTaskGenericNotifyFromISR>
 800192a:	e019      	b.n	8001960 <Moustache_HandleInterrupt+0x78>
        }
    } else if (GPIO_Pin == CB_OUT2_Pin) {
 800192c:	88fb      	ldrh	r3, [r7, #6]
 800192e:	2b08      	cmp	r3, #8
 8001930:	d116      	bne.n	8001960 <Moustache_HandleInterrupt+0x78>
        if (exclusive_task == 0 || exclusive_task == 2) {
 8001932:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <Moustache_HandleInterrupt+0x98>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d004      	beq.n	8001946 <Moustache_HandleInterrupt+0x5e>
 800193c:	4b10      	ldr	r3, [pc, #64]	@ (8001980 <Moustache_HandleInterrupt+0x98>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d10c      	bne.n	8001960 <Moustache_HandleInterrupt+0x78>
            // Activer CB_OUT2
            exclusive_task = 2; // Marquer CB_OUT2 comme exclusif
 8001946:	4b0e      	ldr	r3, [pc, #56]	@ (8001980 <Moustache_HandleInterrupt+0x98>)
 8001948:	2202      	movs	r2, #2
 800194a:	701a      	strb	r2, [r3, #0]
            xTaskNotifyFromISR(cb_out2_task_handle, 0x01, eSetBits, &higherPriorityTaskWoken);
 800194c:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <Moustache_HandleInterrupt+0xa0>)
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2300      	movs	r3, #0
 8001958:	2201      	movs	r2, #1
 800195a:	2101      	movs	r1, #1
 800195c:	f008 f8c2 	bl	8009ae4 <xTaskGenericNotifyFromISR>
        }
    }

    // Passer à une tâche de priorité plus élevée si nécessaire
    portYIELD_FROM_ISR(higherPriorityTaskWoken);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d007      	beq.n	8001976 <Moustache_HandleInterrupt+0x8e>
 8001966:	4b09      	ldr	r3, [pc, #36]	@ (800198c <Moustache_HandleInterrupt+0xa4>)
 8001968:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	f3bf 8f4f 	dsb	sy
 8001972:	f3bf 8f6f 	isb	sy
}
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200001fc 	.word	0x200001fc
 8001984:	200001f4 	.word	0x200001f4
 8001988:	200001f8 	.word	0x200001f8
 800198c:	e000ed04 	.word	0xe000ed04

08001990 <Bord>:

static void Bord(void ) {
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	if (robot.direction == 'A') {
 8001994:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <Bord+0x28>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b41      	cmp	r3, #65	@ 0x41
 800199a:	d103      	bne.n	80019a4 <Bord+0x14>
		Robot_Recule(&robot);
 800199c:	4806      	ldr	r0, [pc, #24]	@ (80019b8 <Bord+0x28>)
 800199e:	f7ff fe2d 	bl	80015fc <Robot_Recule>
	} else if (robot.direction == 'R') {
		Robot_Start(&robot);
	}
	//Robot_Stop(&robot);
}
 80019a2:	e006      	b.n	80019b2 <Bord+0x22>
	} else if (robot.direction == 'R') {
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <Bord+0x28>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b52      	cmp	r3, #82	@ 0x52
 80019aa:	d102      	bne.n	80019b2 <Bord+0x22>
		Robot_Start(&robot);
 80019ac:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <Bord+0x28>)
 80019ae:	f7ff fdf9 	bl	80015a4 <Robot_Start>
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000ff0 	.word	0x20000ff0

080019bc <CB_OUT1_Task>:
// Tâches pour traiter les interruptions
static void CB_OUT1_Task(void *pvParameters)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
    uint32_t notificationValue = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
    for (;;) {
        // Attend une notification
        if (xTaskNotifyWait(0, 0xFFFFFFFF, &notificationValue, portMAX_DELAY) == pdTRUE) {
 80019c8:	f107 020c 	add.w	r2, r7, #12
 80019cc:	f04f 33ff 	mov.w	r3, #4294967295
 80019d0:	f04f 31ff 	mov.w	r1, #4294967295
 80019d4:	2000      	movs	r0, #0
 80019d6:	f007 ff63 	bl	80098a0 <xTaskNotifyWait>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d1f3      	bne.n	80019c8 <CB_OUT1_Task+0xc>
            // Action pour CB_OUT1
            //printf("CB_OUT1 Detected\r\n");
            //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // Exemple d'action
        	Bord();
 80019e0:	f7ff ffd6 	bl	8001990 <Bord>
            // Simule une tâche longue
            vTaskDelay(pdMS_TO_TICKS(1000));
 80019e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019e8:	f007 fc00 	bl	80091ec <vTaskDelay>

            // Réinitialiser l'état pour permettre de détecter CB_OUT1 ou CB_OUT2 à nouveau
            exclusive_task = 0;
 80019ec:	4b01      	ldr	r3, [pc, #4]	@ (80019f4 <CB_OUT1_Task+0x38>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
        if (xTaskNotifyWait(0, 0xFFFFFFFF, &notificationValue, portMAX_DELAY) == pdTRUE) {
 80019f2:	e7e9      	b.n	80019c8 <CB_OUT1_Task+0xc>
 80019f4:	200001fc 	.word	0x200001fc

080019f8 <CB_OUT2_Task>:
        }
    }
}

static void CB_OUT2_Task(void *pvParameters) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
    uint32_t notificationValue = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
    for (;;) {
        // Attend une notification
        if (xTaskNotifyWait(0, 0xFFFFFFFF, &notificationValue, portMAX_DELAY) == pdTRUE) {
 8001a04:	f107 020c 	add.w	r2, r7, #12
 8001a08:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a10:	2000      	movs	r0, #0
 8001a12:	f007 ff45 	bl	80098a0 <xTaskNotifyWait>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d1f3      	bne.n	8001a04 <CB_OUT2_Task+0xc>
            // Action pour CB_OUT2
            //printf("CB_OUT2 Detected\r\n");
           // HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1); // Exemple d'action
        	Bord();
 8001a1c:	f7ff ffb8 	bl	8001990 <Bord>
            // Simule une tâche longue
            vTaskDelay(pdMS_TO_TICKS(1000));
 8001a20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a24:	f007 fbe2 	bl	80091ec <vTaskDelay>

            // Réinitialiser l'état pour permettre de détecter CB_OUT1 ou CB_OUT2 à nouveau
            exclusive_task = 0;
 8001a28:	4b01      	ldr	r3, [pc, #4]	@ (8001a30 <CB_OUT2_Task+0x38>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
        if (xTaskNotifyWait(0, 0xFFFFFFFF, &notificationValue, portMAX_DELAY) == pdTRUE) {
 8001a2e:	e7e9      	b.n	8001a04 <CB_OUT2_Task+0xc>
 8001a30:	200001fc 	.word	0x200001fc

08001a34 <LIDAR_Init>:

uint8_t flagDMA=0;
uint8_t flagStart = 0 ;

void LIDAR_Init(h_LIDAR_t *h_LIDAR, UART_HandleTypeDef *huart)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
	h_LIDAR->huart = huart;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	f8c3 2b60 	str.w	r2, [r3, #2912]	@ 0xb60
	h_LIDAR->info.start_sign=0xA55A ;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f24a 525a 	movw	r2, #42330	@ 0xa55a
 8001a4c:	f8a3 2b40 	strh.w	r2, [r3, #2880]	@ 0xb40
	h_LIDAR->processing.PH =0x55AA;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f245 52aa 	movw	r2, #21930	@ 0x55aa
 8001a56:	f8a3 2d58 	strh.w	r2, [r3, #3416]	@ 0xd58
	h_LIDAR->point[250].Angle=25;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f203 73d4 	addw	r3, r3, #2004	@ 0x7d4
 8001a60:	4a08      	ldr	r2, [pc, #32]	@ (8001a84 <LIDAR_Init+0x50>)
 8001a62:	601a      	str	r2, [r3, #0]
	h_LIDAR->point[250].Distance=25;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001a6a:	4a06      	ldr	r2, [pc, #24]	@ (8001a84 <LIDAR_Init+0x50>)
 8001a6c:	601a      	str	r2, [r3, #0]
	h_LIDAR->processing.idx = 0;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2d62 	strb.w	r2, [r3, #3426]	@ 0xd62

}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	41c80000 	.word	0x41c80000

08001a88 <calculAngle>:

static float calculAngle(h_LIDAR_t *h_LIDAR,float Distance )
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	ed87 0a00 	vstr	s0, [r7]
	float Angle_FSA = ((h_LIDAR->processing.FSA) >> 1) / 64.0;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f8b3 3d5c 	ldrh.w	r3, [r3, #3420]	@ 0xd5c
 8001a9a:	085b      	lsrs	r3, r3, #1
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fd68 	bl	8000574 <__aeabi_i2d>
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	4b4f      	ldr	r3, [pc, #316]	@ (8001be8 <calculAngle+0x160>)
 8001aaa:	f7fe fef7 	bl	800089c <__aeabi_ddiv>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f7ff f8bf 	bl	8000c38 <__aeabi_d2f>
 8001aba:	4603      	mov	r3, r0
 8001abc:	61bb      	str	r3, [r7, #24]
	float Angle_LSA = ((h_LIDAR->processing.LSA) >> 1) / 64.0;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f8b3 3d5e 	ldrh.w	r3, [r3, #3422]	@ 0xd5e
 8001ac4:	085b      	lsrs	r3, r3, #1
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fd53 	bl	8000574 <__aeabi_i2d>
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	4b45      	ldr	r3, [pc, #276]	@ (8001be8 <calculAngle+0x160>)
 8001ad4:	f7fe fee2 	bl	800089c <__aeabi_ddiv>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f7ff f8aa 	bl	8000c38 <__aeabi_d2f>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	617b      	str	r3, [r7, #20]
	float Angle = (Angle_LSA - Angle_FSA) * (h_LIDAR->processing.idx - 1)/(float)(h_LIDAR->processing.LSN-1) + Angle_FSA;
 8001ae8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001aec:	edd7 7a06 	vldr	s15, [r7, #24]
 8001af0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 3d62 	ldrb.w	r3, [r3, #3426]	@ 0xd62
 8001afa:	3b01      	subs	r3, #1
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b04:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3d5b 	ldrb.w	r3, [r3, #3419]	@ 0xd5b
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	ee07 3a90 	vmov	s15, r3
 8001b14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b1c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b24:	edc7 7a04 	vstr	s15, [r7, #16]
	float Angle_Correc = 0;
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
	if (Distance != 0)
 8001b2e:	edd7 7a00 	vldr	s15, [r7]
 8001b32:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3a:	d042      	beq.n	8001bc2 <calculAngle+0x13a>
	{
		float numerator = 21.8 * (155.3 - Distance);
 8001b3c:	6838      	ldr	r0, [r7, #0]
 8001b3e:	f7fe fd2b 	bl	8000598 <__aeabi_f2d>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	a124      	add	r1, pc, #144	@ (adr r1, 8001bd8 <calculAngle+0x150>)
 8001b48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b4c:	f7fe fbc4 	bl	80002d8 <__aeabi_dsub>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	a321      	add	r3, pc, #132	@ (adr r3, 8001be0 <calculAngle+0x158>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe fd73 	bl	8000648 <__aeabi_dmul>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f7ff f865 	bl	8000c38 <__aeabi_d2f>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	60fb      	str	r3, [r7, #12]
		float denominator = 155.3 * Distance;
 8001b72:	6838      	ldr	r0, [r7, #0]
 8001b74:	f7fe fd10 	bl	8000598 <__aeabi_f2d>
 8001b78:	a317      	add	r3, pc, #92	@ (adr r3, 8001bd8 <calculAngle+0x150>)
 8001b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7e:	f7fe fd63 	bl	8000648 <__aeabi_dmul>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f7ff f855 	bl	8000c38 <__aeabi_d2f>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	60bb      	str	r3, [r7, #8]
		Angle_Correc = atan(numerator / denominator);
 8001b92:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b96:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b9a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b9e:	ee16 0a90 	vmov	r0, s13
 8001ba2:	f7fe fcf9 	bl	8000598 <__aeabi_f2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	ec43 2b10 	vmov	d0, r2, r3
 8001bae:	f00d f9eb 	bl	800ef88 <atan>
 8001bb2:	ec53 2b10 	vmov	r2, r3, d0
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f7ff f83d 	bl	8000c38 <__aeabi_d2f>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	61fb      	str	r3, [r7, #28]
	}
	return Angle + Angle_Correc ;
 8001bc2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001bc6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bca:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001bce:	eeb0 0a67 	vmov.f32	s0, s15
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	9999999a 	.word	0x9999999a
 8001bdc:	40636999 	.word	0x40636999
 8001be0:	cccccccd 	.word	0xcccccccd
 8001be4:	4035cccc 	.word	0x4035cccc
 8001be8:	40500000 	.word	0x40500000

08001bec <LIDAR_start>:

HAL_StatusTypeDef LIDAR_start(h_LIDAR_t *h_LIDAR)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	printf("hello \n");
 8001bf4:	4809      	ldr	r0, [pc, #36]	@ (8001c1c <LIDAR_start+0x30>)
 8001bf6:	f009 fd2d 	bl	800b654 <puts>
	return HAL_UART_Receive_DMA(h_LIDAR->huart, h_LIDAR->data_buff, DATA_BUFF_SIZE);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f8d3 0b60 	ldr.w	r0, [r3, #2912]	@ 0xb60
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f603 3364 	addw	r3, r3, #2916	@ 0xb64
 8001c06:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f005 fcb6 	bl	800757c <HAL_UART_Receive_DMA>
 8001c10:	4603      	mov	r3, r0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	0800f5b4 	.word	0x0800f5b4

08001c20 <process>:

void process(h_LIDAR_t *h_LIDAR, uint16_t start, uint16_t end)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	803b      	strh	r3, [r7, #0]
    for (uint16_t i = start; i < end;)
 8001c30:	887b      	ldrh	r3, [r7, #2]
 8001c32:	83fb      	strh	r3, [r7, #30]
 8001c34:	e0c7      	b.n	8001dc6 <process+0x1a6>
    {
        // Lecture de l'en-tête (header)
        uint16_t header = (h_LIDAR->data_buff[i] << 8) | h_LIDAR->data_buff[i + 1];
 8001c36:	8bfb      	ldrh	r3, [r7, #30]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f893 3b64 	ldrb.w	r3, [r3, #2916]	@ 0xb64
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	b21a      	sxth	r2, r3
 8001c44:	8bfb      	ldrh	r3, [r7, #30]
 8001c46:	3301      	adds	r3, #1
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f893 3b64 	ldrb.w	r3, [r3, #2916]	@ 0xb64
 8001c50:	b21b      	sxth	r3, r3
 8001c52:	4313      	orrs	r3, r2
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	837b      	strh	r3, [r7, #26]

        if (header == h_LIDAR->info.start_sign)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f8b3 3b40 	ldrh.w	r3, [r3, #2880]	@ 0xb40
 8001c5e:	8b7a      	ldrh	r2, [r7, #26]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d103      	bne.n	8001c6c <process+0x4c>
        {
            i += 25; // Ignorer 27 octets pour ce type de header
 8001c64:	8bfb      	ldrh	r3, [r7, #30]
 8001c66:	3319      	adds	r3, #25
 8001c68:	83fb      	strh	r3, [r7, #30]
 8001c6a:	e0ac      	b.n	8001dc6 <process+0x1a6>
        }
        else if (header == h_LIDAR->processing.PH)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f8b3 3d58 	ldrh.w	r3, [r3, #3416]	@ 0xd58
 8001c72:	8b7a      	ldrh	r2, [r7, #26]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	f040 80a3 	bne.w	8001dc0 <process+0x1a0>
        {
            // Début du traitement
            h_LIDAR->processing.CT = h_LIDAR->data_buff[i + 2];
 8001c7a:	8bfb      	ldrh	r3, [r7, #30]
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	f893 2b64 	ldrb.w	r2, [r3, #2916]	@ 0xb64
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f883 2d5a 	strb.w	r2, [r3, #3418]	@ 0xd5a
            h_LIDAR->processing.LSN = h_LIDAR->data_buff[i + 3];
 8001c8c:	8bfb      	ldrh	r3, [r7, #30]
 8001c8e:	3303      	adds	r3, #3
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	f893 2b64 	ldrb.w	r2, [r3, #2916]	@ 0xb64
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f883 2d5b 	strb.w	r2, [r3, #3419]	@ 0xd5b
            h_LIDAR->processing.FSA = (h_LIDAR->data_buff[i + 5] << 8) | h_LIDAR->data_buff[i + 4];
 8001c9e:	8bfb      	ldrh	r3, [r7, #30]
 8001ca0:	3305      	adds	r3, #5
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	f893 3b64 	ldrb.w	r3, [r3, #2916]	@ 0xb64
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	b21a      	sxth	r2, r3
 8001cae:	8bfb      	ldrh	r3, [r7, #30]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	440b      	add	r3, r1
 8001cb6:	f893 3b64 	ldrb.w	r3, [r3, #2916]	@ 0xb64
 8001cba:	b21b      	sxth	r3, r3
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f8a3 2d5c 	strh.w	r2, [r3, #3420]	@ 0xd5c
            h_LIDAR->processing.LSA = (h_LIDAR->data_buff[i + 7] << 8) | h_LIDAR->data_buff[i + 6];
 8001cc8:	8bfb      	ldrh	r3, [r7, #30]
 8001cca:	3307      	adds	r3, #7
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	f893 3b64 	ldrb.w	r3, [r3, #2916]	@ 0xb64
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	b21a      	sxth	r2, r3
 8001cd8:	8bfb      	ldrh	r3, [r7, #30]
 8001cda:	3306      	adds	r3, #6
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	440b      	add	r3, r1
 8001ce0:	f893 3b64 	ldrb.w	r3, [r3, #2916]	@ 0xb64
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	b21b      	sxth	r3, r3
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f8a3 2d5e 	strh.w	r2, [r3, #3422]	@ 0xd5e
            h_LIDAR->processing.CS = (h_LIDAR->data_buff[i + 9] << 8) | h_LIDAR->data_buff[i + 8];
 8001cf2:	8bfb      	ldrh	r3, [r7, #30]
 8001cf4:	3309      	adds	r3, #9
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	f893 3b64 	ldrb.w	r3, [r3, #2916]	@ 0xb64
 8001cfe:	021b      	lsls	r3, r3, #8
 8001d00:	b21a      	sxth	r2, r3
 8001d02:	8bfb      	ldrh	r3, [r7, #30]
 8001d04:	3308      	adds	r3, #8
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	440b      	add	r3, r1
 8001d0a:	f893 3b64 	ldrb.w	r3, [r3, #2916]	@ 0xb64
 8001d0e:	b21b      	sxth	r3, r3
 8001d10:	4313      	orrs	r3, r2
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f8a3 2d60 	strh.w	r2, [r3, #3424]	@ 0xd60
            i += 10;
 8001d1c:	8bfb      	ldrh	r3, [r7, #30]
 8001d1e:	330a      	adds	r3, #10
 8001d20:	83fb      	strh	r3, [r7, #30]

            // Initialisation de l'indice
            h_LIDAR->processing.idx = 1;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2d62 	strb.w	r2, [r3, #3426]	@ 0xd62

            // Traitement des points
            uint16_t index;
            float Distance, Angle;

            for (uint16_t j = 0; j < h_LIDAR->processing.LSN; ++j)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	83bb      	strh	r3, [r7, #28]
 8001d2e:	e03f      	b.n	8001db0 <process+0x190>
            {
                // Lecture des distances
                Distance = ((h_LIDAR->data_buff[i + 1] << 8) | h_LIDAR->data_buff[i]) / 4.0f;
 8001d30:	8bfb      	ldrh	r3, [r7, #30]
 8001d32:	3301      	adds	r3, #1
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4413      	add	r3, r2
 8001d38:	f893 3b64 	ldrb.w	r3, [r3, #2916]	@ 0xb64
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	8bfa      	ldrh	r2, [r7, #30]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	440a      	add	r2, r1
 8001d44:	f892 2b64 	ldrb.w	r2, [r2, #2916]	@ 0xb64
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d52:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001d56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d5a:	edc7 7a05 	vstr	s15, [r7, #20]

                // Calcul des angles avec `idx`
                Angle = calculAngle(h_LIDAR, Distance);
 8001d5e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff fe90 	bl	8001a88 <calculAngle>
 8001d68:	ed87 0a04 	vstr	s0, [r7, #16]
                index = (uint16_t)(Angle);
 8001d6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d74:	ee17 3a90 	vmov	r3, s15
 8001d78:	81fb      	strh	r3, [r7, #14]

                // Mise à jour des données des points
                h_LIDAR->point[index].Distance = Distance;
 8001d7a:	89fb      	ldrh	r3, [r7, #14]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4413      	add	r3, r2
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	601a      	str	r2, [r3, #0]
                h_LIDAR->point[index].Angle = Angle;
 8001d86:	89fb      	ldrh	r3, [r7, #14]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3304      	adds	r3, #4
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	601a      	str	r2, [r3, #0]

                // Avancer dans le buffer
                i += 2;
 8001d94:	8bfb      	ldrh	r3, [r7, #30]
 8001d96:	3302      	adds	r3, #2
 8001d98:	83fb      	strh	r3, [r7, #30]

                // Mise à jour de l'indice
                h_LIDAR->processing.idx++;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3d62 	ldrb.w	r3, [r3, #3426]	@ 0xd62
 8001da0:	3301      	adds	r3, #1
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f883 2d62 	strb.w	r2, [r3, #3426]	@ 0xd62
            for (uint16_t j = 0; j < h_LIDAR->processing.LSN; ++j)
 8001daa:	8bbb      	ldrh	r3, [r7, #28]
 8001dac:	3301      	adds	r3, #1
 8001dae:	83bb      	strh	r3, [r7, #28]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3d5b 	ldrb.w	r3, [r3, #3419]	@ 0xd5b
 8001db6:	461a      	mov	r2, r3
 8001db8:	8bbb      	ldrh	r3, [r7, #28]
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d3b8      	bcc.n	8001d30 <process+0x110>
 8001dbe:	e002      	b.n	8001dc6 <process+0x1a6>
            }
        }
        else
        {
            i++; // Si aucun des cas ne correspond, passer au prochain octet
 8001dc0:	8bfb      	ldrh	r3, [r7, #30]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	83fb      	strh	r3, [r7, #30]
    for (uint16_t i = start; i < end;)
 8001dc6:	8bfa      	ldrh	r2, [r7, #30]
 8001dc8:	883b      	ldrh	r3, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	f4ff af33 	bcc.w	8001c36 <process+0x16>
        }
    }
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	3720      	adds	r7, #32
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <LIDAR_process_frame>:


void LIDAR_process_frame(h_LIDAR_t *LIDAR)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	if(flagDMA==1)
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <LIDAR_process_frame+0x3c>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d104      	bne.n	8001df6 <LIDAR_process_frame+0x1a>
	{
		process(LIDAR, 0, DATA_BUFF_SIZE/2) ;
 8001dec:	22fa      	movs	r2, #250	@ 0xfa
 8001dee:	2100      	movs	r1, #0
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff15 	bl	8001c20 <process>
	}
	if (flagDMA==2)
 8001df6:	4b08      	ldr	r3, [pc, #32]	@ (8001e18 <LIDAR_process_frame+0x3c>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d108      	bne.n	8001e10 <LIDAR_process_frame+0x34>
	{
		process(LIDAR, DATA_BUFF_SIZE/2,DATA_BUFF_SIZE) ;
 8001dfe:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001e02:	21fa      	movs	r1, #250	@ 0xfa
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff0b 	bl	8001c20 <process>
		flagDMA = 0 ;
 8001e0a:	4b03      	ldr	r3, [pc, #12]	@ (8001e18 <LIDAR_process_frame+0x3c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
	}
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	200001fd 	.word	0x200001fd

08001e1c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001e1c:	b5b0      	push	{r4, r5, r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001e22:	4b09      	ldr	r3, [pc, #36]	@ (8001e48 <MX_FREERTOS_Init+0x2c>)
 8001e24:	1d3c      	adds	r4, r7, #4
 8001e26:	461d      	mov	r5, r3
 8001e28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e2c:	682b      	ldr	r3, [r5, #0]
 8001e2e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	2100      	movs	r1, #0
 8001e34:	4618      	mov	r0, r3
 8001e36:	f006 ff9e 	bl	8008d76 <osThreadCreate>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4a03      	ldr	r2, [pc, #12]	@ (8001e4c <MX_FREERTOS_Init+0x30>)
 8001e3e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001e40:	bf00      	nop
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bdb0      	pop	{r4, r5, r7, pc}
 8001e48:	0800f5c8 	.word	0x0800f5c8
 8001e4c:	20000200 	.word	0x20000200

08001e50 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e58:	2001      	movs	r0, #1
 8001e5a:	f006 ffb3 	bl	8008dc4 <osDelay>
 8001e5e:	e7fb      	b.n	8001e58 <StartDefaultTask+0x8>

08001e60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08a      	sub	sp, #40	@ 0x28
 8001e64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
 8001e74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e76:	4b5a      	ldr	r3, [pc, #360]	@ (8001fe0 <MX_GPIO_Init+0x180>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7a:	4a59      	ldr	r2, [pc, #356]	@ (8001fe0 <MX_GPIO_Init+0x180>)
 8001e7c:	f043 0304 	orr.w	r3, r3, #4
 8001e80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e82:	4b57      	ldr	r3, [pc, #348]	@ (8001fe0 <MX_GPIO_Init+0x180>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e8e:	4b54      	ldr	r3, [pc, #336]	@ (8001fe0 <MX_GPIO_Init+0x180>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e92:	4a53      	ldr	r2, [pc, #332]	@ (8001fe0 <MX_GPIO_Init+0x180>)
 8001e94:	f043 0320 	orr.w	r3, r3, #32
 8001e98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e9a:	4b51      	ldr	r3, [pc, #324]	@ (8001fe0 <MX_GPIO_Init+0x180>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	4b4e      	ldr	r3, [pc, #312]	@ (8001fe0 <MX_GPIO_Init+0x180>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eaa:	4a4d      	ldr	r2, [pc, #308]	@ (8001fe0 <MX_GPIO_Init+0x180>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eb2:	4b4b      	ldr	r3, [pc, #300]	@ (8001fe0 <MX_GPIO_Init+0x180>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ebe:	4b48      	ldr	r3, [pc, #288]	@ (8001fe0 <MX_GPIO_Init+0x180>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec2:	4a47      	ldr	r2, [pc, #284]	@ (8001fe0 <MX_GPIO_Init+0x180>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eca:	4b45      	ldr	r3, [pc, #276]	@ (8001fe0 <MX_GPIO_Init+0x180>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001edc:	4841      	ldr	r0, [pc, #260]	@ (8001fe4 <MX_GPIO_Init+0x184>)
 8001ede:	f001 fe3b 	bl	8003b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CB_IN_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_RESET);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2190      	movs	r1, #144	@ 0x90
 8001ee6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eea:	f001 fe35 	bl	8003b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_RESET);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ef4:	483c      	ldr	r0, [pc, #240]	@ (8001fe8 <MX_GPIO_Init+0x188>)
 8001ef6:	f001 fe2f 	bl	8003b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001efa:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f00:	2301      	movs	r3, #1
 8001f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	4619      	mov	r1, r3
 8001f12:	4834      	ldr	r0, [pc, #208]	@ (8001fe4 <MX_GPIO_Init+0x184>)
 8001f14:	f001 fc9e 	bl	8003854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CB_OUT1_Pin|CB_OUT2_Pin;
 8001f18:	230c      	movs	r3, #12
 8001f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f1c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f30:	f001 fc90 	bl	8003854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CB_IN_Pin|DEV_EN_LIDAR_Pin;
 8001f34:	2390      	movs	r3, #144	@ 0x90
 8001f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f40:	2300      	movs	r3, #0
 8001f42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f4e:	f001 fc81 	bl	8003854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHAT_SOURIS_Pin;
 8001f52:	2320      	movs	r3, #32
 8001f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHAT_SOURIS_GPIO_Port, &GPIO_InitStruct);
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4619      	mov	r1, r3
 8001f66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f6a:	f001 fc73 	bl	8003854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin;
 8001f6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f74:	2301      	movs	r3, #1
 8001f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M_EN_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4619      	mov	r1, r3
 8001f86:	4818      	ldr	r0, [pc, #96]	@ (8001fe8 <MX_GPIO_Init+0x188>)
 8001f88:	f001 fc64 	bl	8003854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 8001f8c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f92:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4811      	ldr	r0, [pc, #68]	@ (8001fe8 <MX_GPIO_Init+0x188>)
 8001fa4:	f001 fc56 	bl	8003854 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2105      	movs	r1, #5
 8001fac:	2008      	movs	r0, #8
 8001fae:	f001 faaf 	bl	8003510 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001fb2:	2008      	movs	r0, #8
 8001fb4:	f001 fac6 	bl	8003544 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2105      	movs	r1, #5
 8001fbc:	2009      	movs	r0, #9
 8001fbe:	f001 faa7 	bl	8003510 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001fc2:	2009      	movs	r0, #9
 8001fc4:	f001 fabe 	bl	8003544 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2105      	movs	r1, #5
 8001fcc:	2017      	movs	r0, #23
 8001fce:	f001 fa9f 	bl	8003510 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001fd2:	2017      	movs	r0, #23
 8001fd4:	f001 fab6 	bl	8003544 <HAL_NVIC_EnableIRQ>

}
 8001fd8:	bf00      	nop
 8001fda:	3728      	adds	r7, #40	@ 0x28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	48000800 	.word	0x48000800
 8001fe8:	48000400 	.word	0x48000400

08001fec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8002060 <MX_I2C1_Init+0x74>)
 8001ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8002064 <MX_I2C1_Init+0x78>)
 8001ff4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xA0623C56;
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8002060 <MX_I2C1_Init+0x74>)
 8001ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8002068 <MX_I2C1_Init+0x7c>)
 8001ffa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ffc:	4b18      	ldr	r3, [pc, #96]	@ (8002060 <MX_I2C1_Init+0x74>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002002:	4b17      	ldr	r3, [pc, #92]	@ (8002060 <MX_I2C1_Init+0x74>)
 8002004:	2201      	movs	r2, #1
 8002006:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002008:	4b15      	ldr	r3, [pc, #84]	@ (8002060 <MX_I2C1_Init+0x74>)
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800200e:	4b14      	ldr	r3, [pc, #80]	@ (8002060 <MX_I2C1_Init+0x74>)
 8002010:	2200      	movs	r2, #0
 8002012:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002014:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <MX_I2C1_Init+0x74>)
 8002016:	2200      	movs	r2, #0
 8002018:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800201a:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <MX_I2C1_Init+0x74>)
 800201c:	2200      	movs	r2, #0
 800201e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002020:	4b0f      	ldr	r3, [pc, #60]	@ (8002060 <MX_I2C1_Init+0x74>)
 8002022:	2200      	movs	r2, #0
 8002024:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002026:	480e      	ldr	r0, [pc, #56]	@ (8002060 <MX_I2C1_Init+0x74>)
 8002028:	f001 fde0 	bl	8003bec <HAL_I2C_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002032:	f000 fb01 	bl	8002638 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002036:	2100      	movs	r1, #0
 8002038:	4809      	ldr	r0, [pc, #36]	@ (8002060 <MX_I2C1_Init+0x74>)
 800203a:	f002 fb63 	bl	8004704 <HAL_I2CEx_ConfigAnalogFilter>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002044:	f000 faf8 	bl	8002638 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002048:	2100      	movs	r1, #0
 800204a:	4805      	ldr	r0, [pc, #20]	@ (8002060 <MX_I2C1_Init+0x74>)
 800204c:	f002 fba5 	bl	800479a <HAL_I2CEx_ConfigDigitalFilter>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002056:	f000 faef 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000204 	.word	0x20000204
 8002064:	40005400 	.word	0x40005400
 8002068:	a0623c56 	.word	0xa0623c56

0800206c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b09a      	sub	sp, #104	@ 0x68
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002084:	f107 0310 	add.w	r3, r7, #16
 8002088:	2244      	movs	r2, #68	@ 0x44
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f009 fbe1 	bl	800b854 <memset>
  if(i2cHandle->Instance==I2C1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a1f      	ldr	r2, [pc, #124]	@ (8002114 <HAL_I2C_MspInit+0xa8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d136      	bne.n	800210a <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800209c:	2340      	movs	r3, #64	@ 0x40
 800209e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020a4:	f107 0310 	add.w	r3, r7, #16
 80020a8:	4618      	mov	r0, r3
 80020aa:	f003 f9d3 	bl	8005454 <HAL_RCCEx_PeriphCLKConfig>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80020b4:	f000 fac0 	bl	8002638 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b8:	4b17      	ldr	r3, [pc, #92]	@ (8002118 <HAL_I2C_MspInit+0xac>)
 80020ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020bc:	4a16      	ldr	r2, [pc, #88]	@ (8002118 <HAL_I2C_MspInit+0xac>)
 80020be:	f043 0302 	orr.w	r3, r3, #2
 80020c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020c4:	4b14      	ldr	r3, [pc, #80]	@ (8002118 <HAL_I2C_MspInit+0xac>)
 80020c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80020d0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80020d4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d6:	2312      	movs	r3, #18
 80020d8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020e2:	2304      	movs	r3, #4
 80020e4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020ea:	4619      	mov	r1, r3
 80020ec:	480b      	ldr	r0, [pc, #44]	@ (800211c <HAL_I2C_MspInit+0xb0>)
 80020ee:	f001 fbb1 	bl	8003854 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020f2:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <HAL_I2C_MspInit+0xac>)
 80020f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f6:	4a08      	ldr	r2, [pc, #32]	@ (8002118 <HAL_I2C_MspInit+0xac>)
 80020f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80020fe:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <HAL_I2C_MspInit+0xac>)
 8002100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002102:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800210a:	bf00      	nop
 800210c:	3768      	adds	r7, #104	@ 0x68
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40005400 	.word	0x40005400
 8002118:	40021000 	.word	0x40021000
 800211c:	48000400 	.word	0x48000400

08002120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002126:	f001 f8e2 	bl	80032ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800212a:	f000 f8ad 	bl	8002288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800212e:	f7ff fe97 	bl	8001e60 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002132:	f000 fc4f 	bl	80029d4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002136:	f000 fd0d 	bl	8002b54 <MX_TIM3_Init>
  MX_TIM4_Init();
 800213a:	f000 fd61 	bl	8002c00 <MX_TIM4_Init>
  MX_TIM16_Init();
 800213e:	f000 fdb5 	bl	8002cac <MX_TIM16_Init>
  MX_UART4_Init();
 8002142:	f000 ff71 	bl	8003028 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8002146:	f000 ffbb 	bl	80030c0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800214a:	f7ff ff4f 	bl	8001fec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	// Peripheral Initialization
	LIDAR_Init(&lidar, &huart3);
 800214e:	4936      	ldr	r1, [pc, #216]	@ (8002228 <main+0x108>)
 8002150:	4836      	ldr	r0, [pc, #216]	@ (800222c <main+0x10c>)
 8002152:	f7ff fc6f 	bl	8001a34 <LIDAR_Init>
	LIDAR_start(&lidar);
 8002156:	4835      	ldr	r0, [pc, #212]	@ (800222c <main+0x10c>)
 8002158:	f7ff fd48 	bl	8001bec <LIDAR_start>
	Moteur_init(&moteur_droit, &htim1, TIM_CHANNEL_1);
 800215c:	2200      	movs	r2, #0
 800215e:	4934      	ldr	r1, [pc, #208]	@ (8002230 <main+0x110>)
 8002160:	4834      	ldr	r0, [pc, #208]	@ (8002234 <main+0x114>)
 8002162:	f7ff f901 	bl	8001368 <Moteur_init>
	Moteur_init(&moteur_gauche, &htim1, TIM_CHANNEL_2);
 8002166:	2204      	movs	r2, #4
 8002168:	4931      	ldr	r1, [pc, #196]	@ (8002230 <main+0x110>)
 800216a:	4833      	ldr	r0, [pc, #204]	@ (8002238 <main+0x118>)
 800216c:	f7ff f8fc 	bl	8001368 <Moteur_init>
	Robot_Init(&robot, &moteur_droit, &moteur_gauche);
 8002170:	4a31      	ldr	r2, [pc, #196]	@ (8002238 <main+0x118>)
 8002172:	4930      	ldr	r1, [pc, #192]	@ (8002234 <main+0x114>)
 8002174:	4831      	ldr	r0, [pc, #196]	@ (800223c <main+0x11c>)
 8002176:	f7ff fa5a 	bl	800162e <Robot_Init>
	Robot_Start(&robot);
 800217a:	4830      	ldr	r0, [pc, #192]	@ (800223c <main+0x11c>)
 800217c:	f7ff fa12 	bl	80015a4 <Robot_Start>
	Moustache_Init();
 8002180:	f7ff fb8c 	bl	800189c <Moustache_Init>
	ADXL343_Init(&ADXL343, &hi2c1);
 8002184:	492e      	ldr	r1, [pc, #184]	@ (8002240 <main+0x120>)
 8002186:	482f      	ldr	r0, [pc, #188]	@ (8002244 <main+0x124>)
 8002188:	f7fe ffb0 	bl	80010ec <ADXL343_Init>
	//Create FreeRTOS tasks
	xTaskCreate(lidarTask, "Lidar Task", 256, NULL, 2, &lidarTaskHandle);
 800218c:	4b2e      	ldr	r3, [pc, #184]	@ (8002248 <main+0x128>)
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	2302      	movs	r3, #2
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	2300      	movs	r3, #0
 8002196:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800219a:	492c      	ldr	r1, [pc, #176]	@ (800224c <main+0x12c>)
 800219c:	482c      	ldr	r0, [pc, #176]	@ (8002250 <main+0x130>)
 800219e:	f006 fed9 	bl	8008f54 <xTaskCreate>
	xTaskCreate(ledBlinkTask, "LED Blink Task", 256, NULL,3, &ledBlinkTaskHandle);
 80021a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002254 <main+0x134>)
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	2303      	movs	r3, #3
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	2300      	movs	r3, #0
 80021ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021b0:	4929      	ldr	r1, [pc, #164]	@ (8002258 <main+0x138>)
 80021b2:	482a      	ldr	r0, [pc, #168]	@ (800225c <main+0x13c>)
 80021b4:	f006 fece 	bl	8008f54 <xTaskCreate>
	xTaskCreate(task_angle, "Angle Task", 256, NULL, 5, &h_task_angle);
 80021b8:	4b29      	ldr	r3, [pc, #164]	@ (8002260 <main+0x140>)
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	2305      	movs	r3, #5
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	2300      	movs	r3, #0
 80021c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021c6:	4927      	ldr	r1, [pc, #156]	@ (8002264 <main+0x144>)
 80021c8:	4827      	ldr	r0, [pc, #156]	@ (8002268 <main+0x148>)
 80021ca:	f006 fec3 	bl	8008f54 <xTaskCreate>
	xTaskCreate(modeChange, "mode", 128, NULL, 5, &modeTaskHandle);
 80021ce:	4b27      	ldr	r3, [pc, #156]	@ (800226c <main+0x14c>)
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	2305      	movs	r3, #5
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2300      	movs	r3, #0
 80021d8:	2280      	movs	r2, #128	@ 0x80
 80021da:	4925      	ldr	r1, [pc, #148]	@ (8002270 <main+0x150>)
 80021dc:	4825      	ldr	r0, [pc, #148]	@ (8002274 <main+0x154>)
 80021de:	f006 feb9 	bl	8008f54 <xTaskCreate>
	xTaskCreate(TapDetected, "TapDetected", 128, NULL, 5, &TapDetected_task);
 80021e2:	4b25      	ldr	r3, [pc, #148]	@ (8002278 <main+0x158>)
 80021e4:	9301      	str	r3, [sp, #4]
 80021e6:	2305      	movs	r3, #5
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	2300      	movs	r3, #0
 80021ec:	2280      	movs	r2, #128	@ 0x80
 80021ee:	4923      	ldr	r1, [pc, #140]	@ (800227c <main+0x15c>)
 80021f0:	4823      	ldr	r0, [pc, #140]	@ (8002280 <main+0x160>)
 80021f2:	f006 feaf 	bl	8008f54 <xTaskCreate>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80021f6:	f7ff fe11 	bl	8001e1c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80021fa:	f006 fdb5 	bl	8008d68 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
	{
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80021fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002202:	4820      	ldr	r0, [pc, #128]	@ (8002284 <main+0x164>)
 8002204:	f001 fcc0 	bl	8003b88 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002208:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800220c:	481d      	ldr	r0, [pc, #116]	@ (8002284 <main+0x164>)
 800220e:	f001 fcbb 	bl	8003b88 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8002212:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002216:	481b      	ldr	r0, [pc, #108]	@ (8002284 <main+0x164>)
 8002218:	f001 fcb6 	bl	8003b88 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800221c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002220:	f001 f89c 	bl	800335c <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8002224:	bf00      	nop
 8002226:	e7ea      	b.n	80021fe <main+0xde>
 8002228:	20001238 	.word	0x20001238
 800222c:	20000258 	.word	0x20000258
 8002230:	20001074 	.word	0x20001074
 8002234:	20000fd0 	.word	0x20000fd0
 8002238:	20000fe0 	.word	0x20000fe0
 800223c:	20000ff0 	.word	0x20000ff0
 8002240:	20000204 	.word	0x20000204
 8002244:	20001010 	.word	0x20001010
 8002248:	20000fbc 	.word	0x20000fbc
 800224c:	0800f5dc 	.word	0x0800f5dc
 8002250:	0800231d 	.word	0x0800231d
 8002254:	20000fc0 	.word	0x20000fc0
 8002258:	0800f5e8 	.word	0x0800f5e8
 800225c:	08002369 	.word	0x08002369
 8002260:	20000fc4 	.word	0x20000fc4
 8002264:	0800f5f8 	.word	0x0800f5f8
 8002268:	080023a1 	.word	0x080023a1
 800226c:	20000fcc 	.word	0x20000fcc
 8002270:	0800f604 	.word	0x0800f604
 8002274:	08002499 	.word	0x08002499
 8002278:	20000fc8 	.word	0x20000fc8
 800227c:	0800f60c 	.word	0x0800f60c
 8002280:	080024d1 	.word	0x080024d1
 8002284:	48000800 	.word	0x48000800

08002288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b094      	sub	sp, #80	@ 0x50
 800228c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800228e:	f107 0318 	add.w	r3, r7, #24
 8002292:	2238      	movs	r2, #56	@ 0x38
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f009 fadc 	bl	800b854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	609a      	str	r2, [r3, #8]
 80022a6:	60da      	str	r2, [r3, #12]
 80022a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80022aa:	2000      	movs	r0, #0
 80022ac:	f002 fac2 	bl	8004834 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022b0:	2301      	movs	r3, #1
 80022b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022b8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ba:	2302      	movs	r3, #2
 80022bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022be:	2303      	movs	r3, #3
 80022c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80022c2:	2304      	movs	r3, #4
 80022c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80022c6:	2355      	movs	r3, #85	@ 0x55
 80022c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022ca:	2302      	movs	r3, #2
 80022cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022ce:	2302      	movs	r3, #2
 80022d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022d2:	2302      	movs	r3, #2
 80022d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022d6:	f107 0318 	add.w	r3, r7, #24
 80022da:	4618      	mov	r0, r3
 80022dc:	f002 fb5e 	bl	800499c <HAL_RCC_OscConfig>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <SystemClock_Config+0x62>
  {
    Error_Handler();
 80022e6:	f000 f9a7 	bl	8002638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ea:	230f      	movs	r3, #15
 80022ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022ee:	2303      	movs	r3, #3
 80022f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	2104      	movs	r1, #4
 8002302:	4618      	mov	r0, r3
 8002304:	f002 fe5c 	bl	8004fc0 <HAL_RCC_ClockConfig>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800230e:	f000 f993 	bl	8002638 <Error_Handler>
  }
}
 8002312:	bf00      	nop
 8002314:	3750      	adds	r7, #80	@ 0x50
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <lidarTask>:

/* USER CODE BEGIN 4 */

//Lidar Task
void lidarTask(void *pvParameters) {
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	for (;;) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002324:	f04f 31ff 	mov.w	r1, #4294967295
 8002328:	2001      	movs	r0, #1
 800232a:	f007 fa6d 	bl	8009808 <ulTaskNotifyTake>
		flagDMA++;
 800232e:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <lidarTask+0x3c>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	3301      	adds	r3, #1
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <lidarTask+0x3c>)
 8002338:	701a      	strb	r2, [r3, #0]
		LIDAR_process_frame(&lidar);
 800233a:	4808      	ldr	r0, [pc, #32]	@ (800235c <lidarTask+0x40>)
 800233c:	f7ff fd4e 	bl	8001ddc <LIDAR_process_frame>
		printf("angle = give \n") ;
 8002340:	4807      	ldr	r0, [pc, #28]	@ (8002360 <lidarTask+0x44>)
 8002342:	f009 f987 	bl	800b654 <puts>
		xTaskNotifyGive(h_task_angle);
 8002346:	4b07      	ldr	r3, [pc, #28]	@ (8002364 <lidarTask+0x48>)
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	2300      	movs	r3, #0
 800234c:	2202      	movs	r2, #2
 800234e:	2100      	movs	r1, #0
 8002350:	f007 fb06 	bl	8009960 <xTaskGenericNotify>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002354:	bf00      	nop
 8002356:	e7e5      	b.n	8002324 <lidarTask+0x8>
 8002358:	200001fd 	.word	0x200001fd
 800235c:	20000258 	.word	0x20000258
 8002360:	0800f618 	.word	0x0800f618
 8002364:	20000fc4 	.word	0x20000fc4

08002368 <ledBlinkTask>:
	}
}

//LED Blink Task
void ledBlinkTask(void *pvParameters) {
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	for (;;) {
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8002370:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002374:	4809      	ldr	r0, [pc, #36]	@ (800239c <ledBlinkTask+0x34>)
 8002376:	f001 fc07 	bl	8003b88 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800237a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800237e:	4807      	ldr	r0, [pc, #28]	@ (800239c <ledBlinkTask+0x34>)
 8002380:	f001 fc02 	bl	8003b88 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8002384:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002388:	4804      	ldr	r0, [pc, #16]	@ (800239c <ledBlinkTask+0x34>)
 800238a:	f001 fbfd 	bl	8003b88 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(500));
 800238e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002392:	f006 ff2b 	bl	80091ec <vTaskDelay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8002396:	bf00      	nop
 8002398:	e7ea      	b.n	8002370 <ledBlinkTask+0x8>
 800239a:	bf00      	nop
 800239c:	48000800 	.word	0x48000800

080023a0 <task_angle>:
	}
}
//Task to process LIDAR angles
void task_angle(void *unused) {
 80023a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	6078      	str	r0, [r7, #4]
	for (;;) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ac:	2001      	movs	r0, #1
 80023ae:	f007 fa2b 	bl	8009808 <ulTaskNotifyTake>

		float angleSum = 0.0f;
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	60bb      	str	r3, [r7, #8]
		uint16_t validPoints = lidar.point[0].Distance;
 80023b8:	4b33      	ldr	r3, [pc, #204]	@ (8002488 <task_angle+0xe8>)
 80023ba:	edd3 7a00 	vldr	s15, [r3]
 80023be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023c2:	ee17 3a90 	vmov	r3, s15
 80023c6:	81fb      	strh	r3, [r7, #14]


		for (uint16_t i = 1; i < 360; ++i) {
 80023c8:	2301      	movs	r3, #1
 80023ca:	81bb      	strh	r3, [r7, #12]
 80023cc:	e04e      	b.n	800246c <task_angle+0xcc>
			if ((lidar.point[i].Distance < validPoints )&& (lidar.point[i].Distance) !=0  ) {
 80023ce:	89bb      	ldrh	r3, [r7, #12]
 80023d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002488 <task_angle+0xe8>)
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	ed93 7a00 	vldr	s14, [r3]
 80023da:	89fb      	ldrh	r3, [r7, #14]
 80023dc:	ee07 3a90 	vmov	s15, r3
 80023e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ec:	d51d      	bpl.n	800242a <task_angle+0x8a>
 80023ee:	89bb      	ldrh	r3, [r7, #12]
 80023f0:	4a25      	ldr	r2, [pc, #148]	@ (8002488 <task_angle+0xe8>)
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4413      	add	r3, r2
 80023f6:	edd3 7a00 	vldr	s15, [r3]
 80023fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002402:	d012      	beq.n	800242a <task_angle+0x8a>
				//angleSum += lidar.point[i].Angle;
				validPoints = lidar.point[i].Distance ;
 8002404:	89bb      	ldrh	r3, [r7, #12]
 8002406:	4a20      	ldr	r2, [pc, #128]	@ (8002488 <task_angle+0xe8>)
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4413      	add	r3, r2
 800240c:	edd3 7a00 	vldr	s15, [r3]
 8002410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002414:	ee17 3a90 	vmov	r3, s15
 8002418:	81fb      	strh	r3, [r7, #14]
				angle = lidar.point[i].Angle ;
 800241a:	89bb      	ldrh	r3, [r7, #12]
 800241c:	4a1a      	ldr	r2, [pc, #104]	@ (8002488 <task_angle+0xe8>)
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4413      	add	r3, r2
 8002422:	3304      	adds	r3, #4
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a19      	ldr	r2, [pc, #100]	@ (800248c <task_angle+0xec>)
 8002428:	6013      	str	r3, [r2, #0]
			}
			printf("le point %d a angle %f et diastance %f \r\n",i,lidar.point[i].Angle,lidar.point[i].Distance);
 800242a:	89be      	ldrh	r6, [r7, #12]
 800242c:	89bb      	ldrh	r3, [r7, #12]
 800242e:	4a16      	ldr	r2, [pc, #88]	@ (8002488 <task_angle+0xe8>)
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4413      	add	r3, r2
 8002434:	3304      	adds	r3, #4
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe f8ad 	bl	8000598 <__aeabi_f2d>
 800243e:	4604      	mov	r4, r0
 8002440:	460d      	mov	r5, r1
 8002442:	89bb      	ldrh	r3, [r7, #12]
 8002444:	4a10      	ldr	r2, [pc, #64]	@ (8002488 <task_angle+0xe8>)
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4413      	add	r3, r2
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f8a3 	bl	8000598 <__aeabi_f2d>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	e9cd 2300 	strd	r2, r3, [sp]
 800245a:	4622      	mov	r2, r4
 800245c:	462b      	mov	r3, r5
 800245e:	4631      	mov	r1, r6
 8002460:	480b      	ldr	r0, [pc, #44]	@ (8002490 <task_angle+0xf0>)
 8002462:	f009 f88f 	bl	800b584 <iprintf>
		for (uint16_t i = 1; i < 360; ++i) {
 8002466:	89bb      	ldrh	r3, [r7, #12]
 8002468:	3301      	adds	r3, #1
 800246a:	81bb      	strh	r3, [r7, #12]
 800246c:	89bb      	ldrh	r3, [r7, #12]
 800246e:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8002472:	d3ac      	bcc.n	80023ce <task_angle+0x2e>
		}

		Robot_setAngle(&robot, angle);
 8002474:	4b05      	ldr	r3, [pc, #20]	@ (800248c <task_angle+0xec>)
 8002476:	edd3 7a00 	vldr	s15, [r3]
 800247a:	eeb0 0a67 	vmov.f32	s0, s15
 800247e:	4805      	ldr	r0, [pc, #20]	@ (8002494 <task_angle+0xf4>)
 8002480:	f7ff f8fa 	bl	8001678 <Robot_setAngle>
	for (;;) {
 8002484:	e790      	b.n	80023a8 <task_angle+0x8>
 8002486:	bf00      	nop
 8002488:	20000258 	.word	0x20000258
 800248c:	2000100c 	.word	0x2000100c
 8002490:	0800f628 	.word	0x0800f628
 8002494:	20000ff0 	.word	0x20000ff0

08002498 <modeChange>:
	}
}

//mode change Task
void modeChange(void *param) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	uint32_t ulNotificationValue;

	for(;;) {
		ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	2001      	movs	r0, #1
 80024a6:	f007 f9af 	bl	8009808 <ulTaskNotifyTake>
 80024aa:	60f8      	str	r0, [r7, #12]
		if (ulNotificationValue != 0){
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f6      	beq.n	80024a0 <modeChange+0x8>
			if(robot.mode == 1)
 80024b2:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <modeChange+0x34>)
 80024b4:	7c1b      	ldrb	r3, [r3, #16]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d103      	bne.n	80024c2 <modeChange+0x2a>
			{
				robot.mode = 1;
 80024ba:	4b04      	ldr	r3, [pc, #16]	@ (80024cc <modeChange+0x34>)
 80024bc:	2201      	movs	r2, #1
 80024be:	741a      	strb	r2, [r3, #16]
 80024c0:	e7ee      	b.n	80024a0 <modeChange+0x8>
			}
			else
			{
				robot.mode = 0;
 80024c2:	4b02      	ldr	r3, [pc, #8]	@ (80024cc <modeChange+0x34>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	741a      	strb	r2, [r3, #16]
		ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80024c8:	e7ea      	b.n	80024a0 <modeChange+0x8>
 80024ca:	bf00      	nop
 80024cc:	20000ff0 	.word	0x20000ff0

080024d0 <TapDetected>:
			}
		}
	}
}
//Tap Detection Task
void TapDetected(void *param) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af04      	add	r7, sp, #16
 80024d6:	6078      	str	r0, [r7, #4]
	uint32_t ulNotificationValue;

	for(;;) {
		ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80024d8:	f04f 31ff 	mov.w	r1, #4294967295
 80024dc:	2001      	movs	r0, #1
 80024de:	f007 f993 	bl	8009808 <ulTaskNotifyTake>
 80024e2:	60f8      	str	r0, [r7, #12]
		if (ulNotificationValue != 0) {
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f6      	beq.n	80024d8 <TapDetected+0x8>
			uint8_t buf;
			HAL_I2C_Mem_Read(&hi2c1, ADXL343_ADDRESS, ADXL343_REG_INT_SOURCE,
 80024ea:	f04f 33ff 	mov.w	r3, #4294967295
 80024ee:	9302      	str	r3, [sp, #8]
 80024f0:	2301      	movs	r3, #1
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	f107 030b 	add.w	r3, r7, #11
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	2301      	movs	r3, #1
 80024fc:	2230      	movs	r2, #48	@ 0x30
 80024fe:	21a6      	movs	r1, #166	@ 0xa6
 8002500:	4803      	ldr	r0, [pc, #12]	@ (8002510 <TapDetected+0x40>)
 8002502:	f001 fd23 	bl	8003f4c <HAL_I2C_Mem_Read>
					I2C_MEMADD_SIZE_8BIT, &buf, 1, HAL_MAX_DELAY);
			Robot_Stop(&robot);
 8002506:	4803      	ldr	r0, [pc, #12]	@ (8002514 <TapDetected+0x44>)
 8002508:	f7ff f863 	bl	80015d2 <Robot_Stop>
		ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800250c:	e7e4      	b.n	80024d8 <TapDetected+0x8>
 800250e:	bf00      	nop
 8002510:	20000204 	.word	0x20000204
 8002514:	20000ff0 	.word	0x20000ff0

08002518 <HAL_GPIO_EXTI_Callback>:
}

//Fonctions CALLBACK

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin==CHAT_SOURIS_Pin))
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	2b20      	cmp	r3, #32
 8002526:	d115      	bne.n	8002554 <HAL_GPIO_EXTI_Callback+0x3c>
	{
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
		vTaskNotifyGiveFromISR(modeTaskHandle, &xHigherPriorityTaskWoken);
 800252c:	4b1a      	ldr	r3, [pc, #104]	@ (8002598 <HAL_GPIO_EXTI_Callback+0x80>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f107 020c 	add.w	r2, r7, #12
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f007 fbba 	bl	8009cb0 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d021      	beq.n	8002586 <HAL_GPIO_EXTI_Callback+0x6e>
 8002542:	4b16      	ldr	r3, [pc, #88]	@ (800259c <HAL_GPIO_EXTI_Callback+0x84>)
 8002544:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	f3bf 8f4f 	dsb	sy
 800254e:	f3bf 8f6f 	isb	sy
 8002552:	e018      	b.n	8002586 <HAL_GPIO_EXTI_Callback+0x6e>
	}
	else if((GPIO_Pin==INT2_Pin))
 8002554:	88fb      	ldrh	r3, [r7, #6]
 8002556:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800255a:	d114      	bne.n	8002586 <HAL_GPIO_EXTI_Callback+0x6e>
	{
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800255c:	2300      	movs	r3, #0
 800255e:	60bb      	str	r3, [r7, #8]
		vTaskNotifyGiveFromISR(TapDetected_task, &xHigherPriorityTaskWoken);
 8002560:	4b0f      	ldr	r3, [pc, #60]	@ (80025a0 <HAL_GPIO_EXTI_Callback+0x88>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f107 0208 	add.w	r2, r7, #8
 8002568:	4611      	mov	r1, r2
 800256a:	4618      	mov	r0, r3
 800256c:	f007 fba0 	bl	8009cb0 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d007      	beq.n	8002586 <HAL_GPIO_EXTI_Callback+0x6e>
 8002576:	4b09      	ldr	r3, [pc, #36]	@ (800259c <HAL_GPIO_EXTI_Callback+0x84>)
 8002578:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	f3bf 8f4f 	dsb	sy
 8002582:	f3bf 8f6f 	isb	sy
	}

	Moustache_HandleInterrupt(GPIO_Pin);
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff f9ad 	bl	80018e8 <Moustache_HandleInterrupt>
}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000fcc 	.word	0x20000fcc
 800259c:	e000ed04 	.word	0xe000ed04
 80025a0:	20000fc8 	.word	0x20000fc8

080025a4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	printf("angle = give \n") ;
 80025ac:	480d      	ldr	r0, [pc, #52]	@ (80025e4 <HAL_UART_RxCpltCallback+0x40>)
 80025ae:	f009 f851 	bl	800b654 <puts>
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
	vTaskNotifyGiveFromISR(lidarTaskHandle, &xHigherPriorityTaskWoken);
 80025b6:	4b0c      	ldr	r3, [pc, #48]	@ (80025e8 <HAL_UART_RxCpltCallback+0x44>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f107 020c 	add.w	r2, r7, #12
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f007 fb75 	bl	8009cb0 <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d007      	beq.n	80025dc <HAL_UART_RxCpltCallback+0x38>
 80025cc:	4b07      	ldr	r3, [pc, #28]	@ (80025ec <HAL_UART_RxCpltCallback+0x48>)
 80025ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	f3bf 8f6f 	isb	sy
}
 80025dc:	bf00      	nop
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	0800f618 	.word	0x0800f618
 80025e8:	20000fbc 	.word	0x20000fbc
 80025ec:	e000ed04 	.word	0xe000ed04

080025f0 <__io_putchar>:
int __io_putchar(int chr)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 80025f8:	1d39      	adds	r1, r7, #4
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	2201      	movs	r2, #1
 8002600:	4803      	ldr	r0, [pc, #12]	@ (8002610 <__io_putchar+0x20>)
 8002602:	f004 ff2c 	bl	800745e <HAL_UART_Transmit>
	return chr;
 8002606:	687b      	ldr	r3, [r7, #4]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	200011a4 	.word	0x200011a4

08002614 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a04      	ldr	r2, [pc, #16]	@ (8002634 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d101      	bne.n	800262a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002626:	f000 fe7b 	bl	8003320 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40001000 	.word	0x40001000

08002638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800263c:	b672      	cpsid	i
}
 800263e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002640:	bf00      	nop
 8002642:	e7fd      	b.n	8002640 <Error_Handler+0x8>

08002644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264a:	4b16      	ldr	r3, [pc, #88]	@ (80026a4 <HAL_MspInit+0x60>)
 800264c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800264e:	4a15      	ldr	r2, [pc, #84]	@ (80026a4 <HAL_MspInit+0x60>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	6613      	str	r3, [r2, #96]	@ 0x60
 8002656:	4b13      	ldr	r3, [pc, #76]	@ (80026a4 <HAL_MspInit+0x60>)
 8002658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	4b10      	ldr	r3, [pc, #64]	@ (80026a4 <HAL_MspInit+0x60>)
 8002664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002666:	4a0f      	ldr	r2, [pc, #60]	@ (80026a4 <HAL_MspInit+0x60>)
 8002668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800266c:	6593      	str	r3, [r2, #88]	@ 0x58
 800266e:	4b0d      	ldr	r3, [pc, #52]	@ (80026a4 <HAL_MspInit+0x60>)
 8002670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	210f      	movs	r1, #15
 800267e:	f06f 0001 	mvn.w	r0, #1
 8002682:	f000 ff45 	bl	8003510 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	2105      	movs	r1, #5
 800268a:	2005      	movs	r0, #5
 800268c:	f000 ff40 	bl	8003510 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002690:	2005      	movs	r0, #5
 8002692:	f000 ff57 	bl	8003544 <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002696:	f002 f971 	bl	800497c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000

080026a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08c      	sub	sp, #48	@ 0x30
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80026b8:	4b2c      	ldr	r3, [pc, #176]	@ (800276c <HAL_InitTick+0xc4>)
 80026ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026bc:	4a2b      	ldr	r2, [pc, #172]	@ (800276c <HAL_InitTick+0xc4>)
 80026be:	f043 0310 	orr.w	r3, r3, #16
 80026c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80026c4:	4b29      	ldr	r3, [pc, #164]	@ (800276c <HAL_InitTick+0xc4>)
 80026c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026d0:	f107 020c 	add.w	r2, r7, #12
 80026d4:	f107 0310 	add.w	r3, r7, #16
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f002 fe44 	bl	8005368 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80026e0:	f002 fe16 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 80026e4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e8:	4a21      	ldr	r2, [pc, #132]	@ (8002770 <HAL_InitTick+0xc8>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	0c9b      	lsrs	r3, r3, #18
 80026f0:	3b01      	subs	r3, #1
 80026f2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80026f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002774 <HAL_InitTick+0xcc>)
 80026f6:	4a20      	ldr	r2, [pc, #128]	@ (8002778 <HAL_InitTick+0xd0>)
 80026f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80026fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002774 <HAL_InitTick+0xcc>)
 80026fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002700:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002702:	4a1c      	ldr	r2, [pc, #112]	@ (8002774 <HAL_InitTick+0xcc>)
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002708:	4b1a      	ldr	r3, [pc, #104]	@ (8002774 <HAL_InitTick+0xcc>)
 800270a:	2200      	movs	r2, #0
 800270c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270e:	4b19      	ldr	r3, [pc, #100]	@ (8002774 <HAL_InitTick+0xcc>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002714:	4817      	ldr	r0, [pc, #92]	@ (8002774 <HAL_InitTick+0xcc>)
 8002716:	f003 f88d 	bl	8005834 <HAL_TIM_Base_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002720:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002724:	2b00      	cmp	r3, #0
 8002726:	d11b      	bne.n	8002760 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002728:	4812      	ldr	r0, [pc, #72]	@ (8002774 <HAL_InitTick+0xcc>)
 800272a:	f003 f8db 	bl	80058e4 <HAL_TIM_Base_Start_IT>
 800272e:	4603      	mov	r3, r0
 8002730:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002734:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002738:	2b00      	cmp	r3, #0
 800273a:	d111      	bne.n	8002760 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800273c:	2036      	movs	r0, #54	@ 0x36
 800273e:	f000 ff01 	bl	8003544 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b0f      	cmp	r3, #15
 8002746:	d808      	bhi.n	800275a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002748:	2200      	movs	r2, #0
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	2036      	movs	r0, #54	@ 0x36
 800274e:	f000 fedf 	bl	8003510 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002752:	4a0a      	ldr	r2, [pc, #40]	@ (800277c <HAL_InitTick+0xd4>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	e002      	b.n	8002760 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002760:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002764:	4618      	mov	r0, r3
 8002766:	3730      	adds	r7, #48	@ 0x30
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000
 8002770:	431bde83 	.word	0x431bde83
 8002774:	20001024 	.word	0x20001024
 8002778:	40001000 	.word	0x40001000
 800277c:	20000004 	.word	0x20000004

08002780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002784:	bf00      	nop
 8002786:	e7fd      	b.n	8002784 <NMI_Handler+0x4>

08002788 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800278c:	bf00      	nop
 800278e:	e7fd      	b.n	800278c <HardFault_Handler+0x4>

08002790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002794:	bf00      	nop
 8002796:	e7fd      	b.n	8002794 <MemManage_Handler+0x4>

08002798 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800279c:	bf00      	nop
 800279e:	e7fd      	b.n	800279c <BusFault_Handler+0x4>

080027a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a4:	bf00      	nop
 80027a6:	e7fd      	b.n	80027a4 <UsageFault_Handler+0x4>

080027a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CB_OUT1_Pin);
 80027c8:	2004      	movs	r0, #4
 80027ca:	f001 f9f7 	bl	8003bbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CB_OUT2_Pin);
 80027d6:	2008      	movs	r0, #8
 80027d8:	f001 f9f0 	bl	8003bbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}

080027e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CHAT_SOURIS_Pin);
 80027e4:	2020      	movs	r0, #32
 80027e6:	f001 f9e9 	bl	8003bbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT1_Pin);
 80027ea:	2040      	movs	r0, #64	@ 0x40
 80027ec:	f001 f9e6 	bl	8003bbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT2_Pin);
 80027f0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80027f4:	f001 f9e2 	bl	8003bbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027f8:	bf00      	nop
 80027fa:	bd80      	pop	{r7, pc}

080027fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002800:	4802      	ldr	r0, [pc, #8]	@ (800280c <USART3_IRQHandler+0x10>)
 8002802:	f004 ff07 	bl	8007614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20001238 	.word	0x20001238

08002810 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002814:	4802      	ldr	r0, [pc, #8]	@ (8002820 <TIM6_DAC_IRQHandler+0x10>)
 8002816:	f003 fb6d 	bl	8005ef4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20001024 	.word	0x20001024

08002824 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return 1;
 8002828:	2301      	movs	r3, #1
}
 800282a:	4618      	mov	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <_kill>:

int _kill(int pid, int sig)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800283e:	f009 f8b1 	bl	800b9a4 <__errno>
 8002842:	4603      	mov	r3, r0
 8002844:	2216      	movs	r2, #22
 8002846:	601a      	str	r2, [r3, #0]
  return -1;
 8002848:	f04f 33ff 	mov.w	r3, #4294967295
}
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <_exit>:

void _exit (int status)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800285c:	f04f 31ff 	mov.w	r1, #4294967295
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff ffe7 	bl	8002834 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002866:	bf00      	nop
 8002868:	e7fd      	b.n	8002866 <_exit+0x12>

0800286a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b086      	sub	sp, #24
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	e00a      	b.n	8002892 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800287c:	f3af 8000 	nop.w
 8002880:	4601      	mov	r1, r0
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	60ba      	str	r2, [r7, #8]
 8002888:	b2ca      	uxtb	r2, r1
 800288a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	3301      	adds	r3, #1
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	429a      	cmp	r2, r3
 8002898:	dbf0      	blt.n	800287c <_read+0x12>
  }

  return len;
 800289a:	687b      	ldr	r3, [r7, #4]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	e009      	b.n	80028ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	60ba      	str	r2, [r7, #8]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fe96 	bl	80025f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	3301      	adds	r3, #1
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	dbf1      	blt.n	80028b6 <_write+0x12>
  }
  return len;
 80028d2:	687b      	ldr	r3, [r7, #4]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <_close>:

int _close(int file)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002904:	605a      	str	r2, [r3, #4]
  return 0;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <_isatty>:

int _isatty(int file)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800291c:	2301      	movs	r3, #1
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800292a:	b480      	push	{r7}
 800292c:	b085      	sub	sp, #20
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800294c:	4a14      	ldr	r2, [pc, #80]	@ (80029a0 <_sbrk+0x5c>)
 800294e:	4b15      	ldr	r3, [pc, #84]	@ (80029a4 <_sbrk+0x60>)
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002958:	4b13      	ldr	r3, [pc, #76]	@ (80029a8 <_sbrk+0x64>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d102      	bne.n	8002966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002960:	4b11      	ldr	r3, [pc, #68]	@ (80029a8 <_sbrk+0x64>)
 8002962:	4a12      	ldr	r2, [pc, #72]	@ (80029ac <_sbrk+0x68>)
 8002964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002966:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <_sbrk+0x64>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4413      	add	r3, r2
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	429a      	cmp	r2, r3
 8002972:	d207      	bcs.n	8002984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002974:	f009 f816 	bl	800b9a4 <__errno>
 8002978:	4603      	mov	r3, r0
 800297a:	220c      	movs	r2, #12
 800297c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800297e:	f04f 33ff 	mov.w	r3, #4294967295
 8002982:	e009      	b.n	8002998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002984:	4b08      	ldr	r3, [pc, #32]	@ (80029a8 <_sbrk+0x64>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800298a:	4b07      	ldr	r3, [pc, #28]	@ (80029a8 <_sbrk+0x64>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4413      	add	r3, r2
 8002992:	4a05      	ldr	r2, [pc, #20]	@ (80029a8 <_sbrk+0x64>)
 8002994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002996:	68fb      	ldr	r3, [r7, #12]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20008000 	.word	0x20008000
 80029a4:	00000400 	.word	0x00000400
 80029a8:	20001070 	.word	0x20001070
 80029ac:	20003c80 	.word	0x20003c80

080029b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80029b4:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <SystemInit+0x20>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ba:	4a05      	ldr	r2, [pc, #20]	@ (80029d0 <SystemInit+0x20>)
 80029bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b09c      	sub	sp, #112	@ 0x70
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029da:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
 8002a04:	615a      	str	r2, [r3, #20]
 8002a06:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a08:	1d3b      	adds	r3, r7, #4
 8002a0a:	2234      	movs	r2, #52	@ 0x34
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f008 ff20 	bl	800b854 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a14:	4b4d      	ldr	r3, [pc, #308]	@ (8002b4c <MX_TIM1_Init+0x178>)
 8002a16:	4a4e      	ldr	r2, [pc, #312]	@ (8002b50 <MX_TIM1_Init+0x17c>)
 8002a18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002a1a:	4b4c      	ldr	r3, [pc, #304]	@ (8002b4c <MX_TIM1_Init+0x178>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a20:	4b4a      	ldr	r3, [pc, #296]	@ (8002b4c <MX_TIM1_Init+0x178>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8002a26:	4b49      	ldr	r3, [pc, #292]	@ (8002b4c <MX_TIM1_Init+0x178>)
 8002a28:	f242 1233 	movw	r2, #8499	@ 0x2133
 8002a2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a2e:	4b47      	ldr	r3, [pc, #284]	@ (8002b4c <MX_TIM1_Init+0x178>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a34:	4b45      	ldr	r3, [pc, #276]	@ (8002b4c <MX_TIM1_Init+0x178>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a3a:	4b44      	ldr	r3, [pc, #272]	@ (8002b4c <MX_TIM1_Init+0x178>)
 8002a3c:	2280      	movs	r2, #128	@ 0x80
 8002a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a40:	4842      	ldr	r0, [pc, #264]	@ (8002b4c <MX_TIM1_Init+0x178>)
 8002a42:	f002 fef7 	bl	8005834 <HAL_TIM_Base_Init>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002a4c:	f7ff fdf4 	bl	8002638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a54:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a56:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	483b      	ldr	r0, [pc, #236]	@ (8002b4c <MX_TIM1_Init+0x178>)
 8002a5e:	f003 fcad 	bl	80063bc <HAL_TIM_ConfigClockSource>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002a68:	f7ff fde6 	bl	8002638 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a6c:	4837      	ldr	r0, [pc, #220]	@ (8002b4c <MX_TIM1_Init+0x178>)
 8002a6e:	f002 ffa3 	bl	80059b8 <HAL_TIM_PWM_Init>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002a78:	f7ff fdde 	bl	8002638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a80:	2300      	movs	r3, #0
 8002a82:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a88:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	482f      	ldr	r0, [pc, #188]	@ (8002b4c <MX_TIM1_Init+0x178>)
 8002a90:	f004 fb1c 	bl	80070cc <HAL_TIMEx_MasterConfigSynchronization>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002a9a:	f7ff fdcd 	bl	8002638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a9e:	2360      	movs	r3, #96	@ 0x60
 8002aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 3400;
 8002aa2:	f640 5348 	movw	r3, #3400	@ 0xd48
 8002aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002aac:	2300      	movs	r3, #0
 8002aae:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002abc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4821      	ldr	r0, [pc, #132]	@ (8002b4c <MX_TIM1_Init+0x178>)
 8002ac6:	f003 fb65 	bl	8006194 <HAL_TIM_PWM_ConfigChannel>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002ad0:	f7ff fdb2 	bl	8002638 <Error_Handler>
  }
  sConfigOC.Pulse = 2400;
 8002ad4:	f44f 6316 	mov.w	r3, #2400	@ 0x960
 8002ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ada:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ade:	2204      	movs	r2, #4
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	481a      	ldr	r0, [pc, #104]	@ (8002b4c <MX_TIM1_Init+0x178>)
 8002ae4:	f003 fb56 	bl	8006194 <HAL_TIM_PWM_ConfigChannel>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8002aee:	f7ff fda3 	bl	8002638 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10;
 8002afe:	230a      	movs	r3, #10
 8002b00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002b10:	2300      	movs	r3, #0
 8002b12:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002b14:	2300      	movs	r3, #0
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002b18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002b22:	2300      	movs	r3, #0
 8002b24:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b2a:	1d3b      	adds	r3, r7, #4
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4807      	ldr	r0, [pc, #28]	@ (8002b4c <MX_TIM1_Init+0x178>)
 8002b30:	f004 fb4e 	bl	80071d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8002b3a:	f7ff fd7d 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b3e:	4803      	ldr	r0, [pc, #12]	@ (8002b4c <MX_TIM1_Init+0x178>)
 8002b40:	f000 f9f6 	bl	8002f30 <HAL_TIM_MspPostInit>

}
 8002b44:	bf00      	nop
 8002b46:	3770      	adds	r7, #112	@ 0x70
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20001074 	.word	0x20001074
 8002b50:	40012c00 	.word	0x40012c00

08002b54 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08c      	sub	sp, #48	@ 0x30
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b5a:	f107 030c 	add.w	r3, r7, #12
 8002b5e:	2224      	movs	r2, #36	@ 0x24
 8002b60:	2100      	movs	r1, #0
 8002b62:	4618      	mov	r0, r3
 8002b64:	f008 fe76 	bl	800b854 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b68:	463b      	mov	r3, r7
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b72:	4b21      	ldr	r3, [pc, #132]	@ (8002bf8 <MX_TIM3_Init+0xa4>)
 8002b74:	4a21      	ldr	r2, [pc, #132]	@ (8002bfc <MX_TIM3_Init+0xa8>)
 8002b76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b78:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf8 <MX_TIM3_Init+0xa4>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf8 <MX_TIM3_Init+0xa4>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b84:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf8 <MX_TIM3_Init+0xa4>)
 8002b86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf8 <MX_TIM3_Init+0xa4>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b92:	4b19      	ldr	r3, [pc, #100]	@ (8002bf8 <MX_TIM3_Init+0xa4>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002bac:	2300      	movs	r3, #0
 8002bae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002bbc:	f107 030c 	add.w	r3, r7, #12
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	480d      	ldr	r0, [pc, #52]	@ (8002bf8 <MX_TIM3_Init+0xa4>)
 8002bc4:	f003 f8f0 	bl	8005da8 <HAL_TIM_Encoder_Init>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002bce:	f7ff fd33 	bl	8002638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bda:	463b      	mov	r3, r7
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4806      	ldr	r0, [pc, #24]	@ (8002bf8 <MX_TIM3_Init+0xa4>)
 8002be0:	f004 fa74 	bl	80070cc <HAL_TIMEx_MasterConfigSynchronization>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002bea:	f7ff fd25 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bee:	bf00      	nop
 8002bf0:	3730      	adds	r7, #48	@ 0x30
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200010c0 	.word	0x200010c0
 8002bfc:	40000400 	.word	0x40000400

08002c00 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08c      	sub	sp, #48	@ 0x30
 8002c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c06:	f107 030c 	add.w	r3, r7, #12
 8002c0a:	2224      	movs	r2, #36	@ 0x24
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f008 fe20 	bl	800b854 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c14:	463b      	mov	r3, r7
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
 8002c1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c1e:	4b21      	ldr	r3, [pc, #132]	@ (8002ca4 <MX_TIM4_Init+0xa4>)
 8002c20:	4a21      	ldr	r2, [pc, #132]	@ (8002ca8 <MX_TIM4_Init+0xa8>)
 8002c22:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002c24:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca4 <MX_TIM4_Init+0xa4>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca4 <MX_TIM4_Init+0xa4>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002c30:	4b1c      	ldr	r3, [pc, #112]	@ (8002ca4 <MX_TIM4_Init+0xa4>)
 8002c32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c36:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca4 <MX_TIM4_Init+0xa4>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c3e:	4b19      	ldr	r3, [pc, #100]	@ (8002ca4 <MX_TIM4_Init+0xa4>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002c44:	2301      	movs	r3, #1
 8002c46:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c60:	2300      	movs	r3, #0
 8002c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002c68:	f107 030c 	add.w	r3, r7, #12
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	480d      	ldr	r0, [pc, #52]	@ (8002ca4 <MX_TIM4_Init+0xa4>)
 8002c70:	f003 f89a 	bl	8005da8 <HAL_TIM_Encoder_Init>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002c7a:	f7ff fcdd 	bl	8002638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c86:	463b      	mov	r3, r7
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4806      	ldr	r0, [pc, #24]	@ (8002ca4 <MX_TIM4_Init+0xa4>)
 8002c8c:	f004 fa1e 	bl	80070cc <HAL_TIMEx_MasterConfigSynchronization>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002c96:	f7ff fccf 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c9a:	bf00      	nop
 8002c9c:	3730      	adds	r7, #48	@ 0x30
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	2000110c 	.word	0x2000110c
 8002ca8:	40000800 	.word	0x40000800

08002cac <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b094      	sub	sp, #80	@ 0x50
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cb2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	60da      	str	r2, [r3, #12]
 8002cc0:	611a      	str	r2, [r3, #16]
 8002cc2:	615a      	str	r2, [r3, #20]
 8002cc4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002cc6:	463b      	mov	r3, r7
 8002cc8:	2234      	movs	r2, #52	@ 0x34
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f008 fdc1 	bl	800b854 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002cd2:	4b31      	ldr	r3, [pc, #196]	@ (8002d98 <MX_TIM16_Init+0xec>)
 8002cd4:	4a31      	ldr	r2, [pc, #196]	@ (8002d9c <MX_TIM16_Init+0xf0>)
 8002cd6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8002d98 <MX_TIM16_Init+0xec>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cde:	4b2e      	ldr	r3, [pc, #184]	@ (8002d98 <MX_TIM16_Init+0xec>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8002d98 <MX_TIM16_Init+0xec>)
 8002ce6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cea:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cec:	4b2a      	ldr	r3, [pc, #168]	@ (8002d98 <MX_TIM16_Init+0xec>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002cf2:	4b29      	ldr	r3, [pc, #164]	@ (8002d98 <MX_TIM16_Init+0xec>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cf8:	4b27      	ldr	r3, [pc, #156]	@ (8002d98 <MX_TIM16_Init+0xec>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002cfe:	4826      	ldr	r0, [pc, #152]	@ (8002d98 <MX_TIM16_Init+0xec>)
 8002d00:	f002 fd98 	bl	8005834 <HAL_TIM_Base_Init>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002d0a:	f7ff fc95 	bl	8002638 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002d0e:	4822      	ldr	r0, [pc, #136]	@ (8002d98 <MX_TIM16_Init+0xec>)
 8002d10:	f002 fe52 	bl	80059b8 <HAL_TIM_PWM_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002d1a:	f7ff fc8d 	bl	8002638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d1e:	2360      	movs	r3, #96	@ 0x60
 8002d20:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d26:	2300      	movs	r3, #0
 8002d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d32:	2300      	movs	r3, #0
 8002d34:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d36:	2300      	movs	r3, #0
 8002d38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d3a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d3e:	2200      	movs	r2, #0
 8002d40:	4619      	mov	r1, r3
 8002d42:	4815      	ldr	r0, [pc, #84]	@ (8002d98 <MX_TIM16_Init+0xec>)
 8002d44:	f003 fa26 	bl	8006194 <HAL_TIM_PWM_ConfigChannel>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8002d4e:	f7ff fc73 	bl	8002638 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d52:	2300      	movs	r3, #0
 8002d54:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d70:	2300      	movs	r3, #0
 8002d72:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002d74:	463b      	mov	r3, r7
 8002d76:	4619      	mov	r1, r3
 8002d78:	4807      	ldr	r0, [pc, #28]	@ (8002d98 <MX_TIM16_Init+0xec>)
 8002d7a:	f004 fa29 	bl	80071d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8002d84:	f7ff fc58 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002d88:	4803      	ldr	r0, [pc, #12]	@ (8002d98 <MX_TIM16_Init+0xec>)
 8002d8a:	f000 f8d1 	bl	8002f30 <HAL_TIM_MspPostInit>

}
 8002d8e:	bf00      	nop
 8002d90:	3750      	adds	r7, #80	@ 0x50
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20001158 	.word	0x20001158
 8002d9c:	40014400 	.word	0x40014400

08002da0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a13      	ldr	r2, [pc, #76]	@ (8002dfc <HAL_TIM_Base_MspInit+0x5c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d10c      	bne.n	8002dcc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002db2:	4b13      	ldr	r3, [pc, #76]	@ (8002e00 <HAL_TIM_Base_MspInit+0x60>)
 8002db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db6:	4a12      	ldr	r2, [pc, #72]	@ (8002e00 <HAL_TIM_Base_MspInit+0x60>)
 8002db8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002dbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002dbe:	4b10      	ldr	r3, [pc, #64]	@ (8002e00 <HAL_TIM_Base_MspInit+0x60>)
 8002dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002dca:	e010      	b.n	8002dee <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM16)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8002e04 <HAL_TIM_Base_MspInit+0x64>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d10b      	bne.n	8002dee <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e00 <HAL_TIM_Base_MspInit+0x60>)
 8002dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dda:	4a09      	ldr	r2, [pc, #36]	@ (8002e00 <HAL_TIM_Base_MspInit+0x60>)
 8002ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002de0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002de2:	4b07      	ldr	r3, [pc, #28]	@ (8002e00 <HAL_TIM_Base_MspInit+0x60>)
 8002de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]
}
 8002dee:	bf00      	nop
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40012c00 	.word	0x40012c00
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40014400 	.word	0x40014400

08002e08 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08c      	sub	sp, #48	@ 0x30
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e10:	f107 031c 	add.w	r3, r7, #28
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a3d      	ldr	r2, [pc, #244]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0x114>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d144      	bne.n	8002eb4 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f20 <HAL_TIM_Encoder_MspInit+0x118>)
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2e:	4a3c      	ldr	r2, [pc, #240]	@ (8002f20 <HAL_TIM_Encoder_MspInit+0x118>)
 8002e30:	f043 0302 	orr.w	r3, r3, #2
 8002e34:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e36:	4b3a      	ldr	r3, [pc, #232]	@ (8002f20 <HAL_TIM_Encoder_MspInit+0x118>)
 8002e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	61bb      	str	r3, [r7, #24]
 8002e40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e42:	4b37      	ldr	r3, [pc, #220]	@ (8002f20 <HAL_TIM_Encoder_MspInit+0x118>)
 8002e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e46:	4a36      	ldr	r2, [pc, #216]	@ (8002f20 <HAL_TIM_Encoder_MspInit+0x118>)
 8002e48:	f043 0304 	orr.w	r3, r3, #4
 8002e4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e4e:	4b34      	ldr	r3, [pc, #208]	@ (8002f20 <HAL_TIM_Encoder_MspInit+0x118>)
 8002e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5a:	4b31      	ldr	r3, [pc, #196]	@ (8002f20 <HAL_TIM_Encoder_MspInit+0x118>)
 8002e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e5e:	4a30      	ldr	r2, [pc, #192]	@ (8002f20 <HAL_TIM_Encoder_MspInit+0x118>)
 8002e60:	f043 0302 	orr.w	r3, r3, #2
 8002e64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e66:	4b2e      	ldr	r3, [pc, #184]	@ (8002f20 <HAL_TIM_Encoder_MspInit+0x118>)
 8002e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PHASEB2_Pin;
 8002e72:	2340      	movs	r3, #64	@ 0x40
 8002e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e76:	2302      	movs	r3, #2
 8002e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e82:	2302      	movs	r3, #2
 8002e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PHASEB2_GPIO_Port, &GPIO_InitStruct);
 8002e86:	f107 031c 	add.w	r3, r7, #28
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4825      	ldr	r0, [pc, #148]	@ (8002f24 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002e8e:	f000 fce1 	bl	8003854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PHASEA2_Pin;
 8002e92:	2320      	movs	r3, #32
 8002e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e96:	2302      	movs	r3, #2
 8002e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PHASEA2_GPIO_Port, &GPIO_InitStruct);
 8002ea6:	f107 031c 	add.w	r3, r7, #28
 8002eaa:	4619      	mov	r1, r3
 8002eac:	481e      	ldr	r0, [pc, #120]	@ (8002f28 <HAL_TIM_Encoder_MspInit+0x120>)
 8002eae:	f000 fcd1 	bl	8003854 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002eb2:	e02e      	b.n	8002f12 <HAL_TIM_Encoder_MspInit+0x10a>
  else if(tim_encoderHandle->Instance==TIM4)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8002f2c <HAL_TIM_Encoder_MspInit+0x124>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d129      	bne.n	8002f12 <HAL_TIM_Encoder_MspInit+0x10a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ebe:	4b18      	ldr	r3, [pc, #96]	@ (8002f20 <HAL_TIM_Encoder_MspInit+0x118>)
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec2:	4a17      	ldr	r2, [pc, #92]	@ (8002f20 <HAL_TIM_Encoder_MspInit+0x118>)
 8002ec4:	f043 0304 	orr.w	r3, r3, #4
 8002ec8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eca:	4b15      	ldr	r3, [pc, #84]	@ (8002f20 <HAL_TIM_Encoder_MspInit+0x118>)
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed6:	4b12      	ldr	r3, [pc, #72]	@ (8002f20 <HAL_TIM_Encoder_MspInit+0x118>)
 8002ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eda:	4a11      	ldr	r2, [pc, #68]	@ (8002f20 <HAL_TIM_Encoder_MspInit+0x118>)
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8002f20 <HAL_TIM_Encoder_MspInit+0x118>)
 8002ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PHASEB1_Pin|PHASEA1_Pin;
 8002eee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efc:	2300      	movs	r3, #0
 8002efe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002f00:	230a      	movs	r3, #10
 8002f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f04:	f107 031c 	add.w	r3, r7, #28
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f0e:	f000 fca1 	bl	8003854 <HAL_GPIO_Init>
}
 8002f12:	bf00      	nop
 8002f14:	3730      	adds	r7, #48	@ 0x30
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40000400 	.word	0x40000400
 8002f20:	40021000 	.word	0x40021000
 8002f24:	48000800 	.word	0x48000800
 8002f28:	48000400 	.word	0x48000400
 8002f2c:	40000800 	.word	0x40000800

08002f30 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08a      	sub	sp, #40	@ 0x28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f38:	f107 0314 	add.w	r3, r7, #20
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	60da      	str	r2, [r3, #12]
 8002f46:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a32      	ldr	r2, [pc, #200]	@ (8003018 <HAL_TIM_MspPostInit+0xe8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d13b      	bne.n	8002fca <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f52:	4b32      	ldr	r3, [pc, #200]	@ (800301c <HAL_TIM_MspPostInit+0xec>)
 8002f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f56:	4a31      	ldr	r2, [pc, #196]	@ (800301c <HAL_TIM_MspPostInit+0xec>)
 8002f58:	f043 0302 	orr.w	r3, r3, #2
 8002f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800301c <HAL_TIM_MspPostInit+0xec>)
 8002f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6a:	4b2c      	ldr	r3, [pc, #176]	@ (800301c <HAL_TIM_MspPostInit+0xec>)
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f6e:	4a2b      	ldr	r2, [pc, #172]	@ (800301c <HAL_TIM_MspPostInit+0xec>)
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f76:	4b29      	ldr	r3, [pc, #164]	@ (800301c <HAL_TIM_MspPostInit+0xec>)
 8002f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002f82:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f90:	2300      	movs	r3, #0
 8002f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002f94:	2306      	movs	r3, #6
 8002f96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f98:	f107 0314 	add.w	r3, r7, #20
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4820      	ldr	r0, [pc, #128]	@ (8003020 <HAL_TIM_MspPostInit+0xf0>)
 8002fa0:	f000 fc58 	bl	8003854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002fa4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002faa:	2302      	movs	r3, #2
 8002fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002fb6:	2306      	movs	r3, #6
 8002fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fba:	f107 0314 	add.w	r3, r7, #20
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fc4:	f000 fc46 	bl	8003854 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8002fc8:	e021      	b.n	800300e <HAL_TIM_MspPostInit+0xde>
  else if(timHandle->Instance==TIM16)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a15      	ldr	r2, [pc, #84]	@ (8003024 <HAL_TIM_MspPostInit+0xf4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d11c      	bne.n	800300e <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd4:	4b11      	ldr	r3, [pc, #68]	@ (800301c <HAL_TIM_MspPostInit+0xec>)
 8002fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd8:	4a10      	ldr	r2, [pc, #64]	@ (800301c <HAL_TIM_MspPostInit+0xec>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800301c <HAL_TIM_MspPostInit+0xec>)
 8002fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M_SCTR_LIDAR_Pin;
 8002fec:	2340      	movs	r3, #64	@ 0x40
 8002fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8003000:	f107 0314 	add.w	r3, r7, #20
 8003004:	4619      	mov	r1, r3
 8003006:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800300a:	f000 fc23 	bl	8003854 <HAL_GPIO_Init>
}
 800300e:	bf00      	nop
 8003010:	3728      	adds	r7, #40	@ 0x28
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40012c00 	.word	0x40012c00
 800301c:	40021000 	.word	0x40021000
 8003020:	48000400 	.word	0x48000400
 8003024:	40014400 	.word	0x40014400

08003028 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800302c:	4b22      	ldr	r3, [pc, #136]	@ (80030b8 <MX_UART4_Init+0x90>)
 800302e:	4a23      	ldr	r2, [pc, #140]	@ (80030bc <MX_UART4_Init+0x94>)
 8003030:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003032:	4b21      	ldr	r3, [pc, #132]	@ (80030b8 <MX_UART4_Init+0x90>)
 8003034:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003038:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800303a:	4b1f      	ldr	r3, [pc, #124]	@ (80030b8 <MX_UART4_Init+0x90>)
 800303c:	2200      	movs	r2, #0
 800303e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003040:	4b1d      	ldr	r3, [pc, #116]	@ (80030b8 <MX_UART4_Init+0x90>)
 8003042:	2200      	movs	r2, #0
 8003044:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003046:	4b1c      	ldr	r3, [pc, #112]	@ (80030b8 <MX_UART4_Init+0x90>)
 8003048:	2200      	movs	r2, #0
 800304a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800304c:	4b1a      	ldr	r3, [pc, #104]	@ (80030b8 <MX_UART4_Init+0x90>)
 800304e:	220c      	movs	r2, #12
 8003050:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003052:	4b19      	ldr	r3, [pc, #100]	@ (80030b8 <MX_UART4_Init+0x90>)
 8003054:	2200      	movs	r2, #0
 8003056:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003058:	4b17      	ldr	r3, [pc, #92]	@ (80030b8 <MX_UART4_Init+0x90>)
 800305a:	2200      	movs	r2, #0
 800305c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800305e:	4b16      	ldr	r3, [pc, #88]	@ (80030b8 <MX_UART4_Init+0x90>)
 8003060:	2200      	movs	r2, #0
 8003062:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003064:	4b14      	ldr	r3, [pc, #80]	@ (80030b8 <MX_UART4_Init+0x90>)
 8003066:	2200      	movs	r2, #0
 8003068:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800306a:	4b13      	ldr	r3, [pc, #76]	@ (80030b8 <MX_UART4_Init+0x90>)
 800306c:	2200      	movs	r2, #0
 800306e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003070:	4811      	ldr	r0, [pc, #68]	@ (80030b8 <MX_UART4_Init+0x90>)
 8003072:	f004 f9a4 	bl	80073be <HAL_UART_Init>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800307c:	f7ff fadc 	bl	8002638 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003080:	2100      	movs	r1, #0
 8003082:	480d      	ldr	r0, [pc, #52]	@ (80030b8 <MX_UART4_Init+0x90>)
 8003084:	f005 fd8e 	bl	8008ba4 <HAL_UARTEx_SetTxFifoThreshold>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800308e:	f7ff fad3 	bl	8002638 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003092:	2100      	movs	r1, #0
 8003094:	4808      	ldr	r0, [pc, #32]	@ (80030b8 <MX_UART4_Init+0x90>)
 8003096:	f005 fdc3 	bl	8008c20 <HAL_UARTEx_SetRxFifoThreshold>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80030a0:	f7ff faca 	bl	8002638 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80030a4:	4804      	ldr	r0, [pc, #16]	@ (80030b8 <MX_UART4_Init+0x90>)
 80030a6:	f005 fd44 	bl	8008b32 <HAL_UARTEx_DisableFifoMode>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80030b0:	f7ff fac2 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	200011a4 	.word	0x200011a4
 80030bc:	40004c00 	.word	0x40004c00

080030c0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80030c4:	4b22      	ldr	r3, [pc, #136]	@ (8003150 <MX_USART3_UART_Init+0x90>)
 80030c6:	4a23      	ldr	r2, [pc, #140]	@ (8003154 <MX_USART3_UART_Init+0x94>)
 80030c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80030ca:	4b21      	ldr	r3, [pc, #132]	@ (8003150 <MX_USART3_UART_Init+0x90>)
 80030cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80030d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003150 <MX_USART3_UART_Init+0x90>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003150 <MX_USART3_UART_Init+0x90>)
 80030da:	2200      	movs	r2, #0
 80030dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030de:	4b1c      	ldr	r3, [pc, #112]	@ (8003150 <MX_USART3_UART_Init+0x90>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003150 <MX_USART3_UART_Init+0x90>)
 80030e6:	220c      	movs	r2, #12
 80030e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ea:	4b19      	ldr	r3, [pc, #100]	@ (8003150 <MX_USART3_UART_Init+0x90>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030f0:	4b17      	ldr	r3, [pc, #92]	@ (8003150 <MX_USART3_UART_Init+0x90>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030f6:	4b16      	ldr	r3, [pc, #88]	@ (8003150 <MX_USART3_UART_Init+0x90>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030fc:	4b14      	ldr	r3, [pc, #80]	@ (8003150 <MX_USART3_UART_Init+0x90>)
 80030fe:	2200      	movs	r2, #0
 8003100:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003102:	4b13      	ldr	r3, [pc, #76]	@ (8003150 <MX_USART3_UART_Init+0x90>)
 8003104:	2200      	movs	r2, #0
 8003106:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003108:	4811      	ldr	r0, [pc, #68]	@ (8003150 <MX_USART3_UART_Init+0x90>)
 800310a:	f004 f958 	bl	80073be <HAL_UART_Init>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003114:	f7ff fa90 	bl	8002638 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003118:	2100      	movs	r1, #0
 800311a:	480d      	ldr	r0, [pc, #52]	@ (8003150 <MX_USART3_UART_Init+0x90>)
 800311c:	f005 fd42 	bl	8008ba4 <HAL_UARTEx_SetTxFifoThreshold>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003126:	f7ff fa87 	bl	8002638 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800312a:	2100      	movs	r1, #0
 800312c:	4808      	ldr	r0, [pc, #32]	@ (8003150 <MX_USART3_UART_Init+0x90>)
 800312e:	f005 fd77 	bl	8008c20 <HAL_UARTEx_SetRxFifoThreshold>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003138:	f7ff fa7e 	bl	8002638 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800313c:	4804      	ldr	r0, [pc, #16]	@ (8003150 <MX_USART3_UART_Init+0x90>)
 800313e:	f005 fcf8 	bl	8008b32 <HAL_UARTEx_DisableFifoMode>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003148:	f7ff fa76 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800314c:	bf00      	nop
 800314e:	bd80      	pop	{r7, pc}
 8003150:	20001238 	.word	0x20001238
 8003154:	40004800 	.word	0x40004800

08003158 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b09c      	sub	sp, #112	@ 0x70
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003160:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003170:	f107 0318 	add.w	r3, r7, #24
 8003174:	2244      	movs	r2, #68	@ 0x44
 8003176:	2100      	movs	r1, #0
 8003178:	4618      	mov	r0, r3
 800317a:	f008 fb6b 	bl	800b854 <memset>
  if(uartHandle->Instance==UART4)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a41      	ldr	r2, [pc, #260]	@ (8003288 <HAL_UART_MspInit+0x130>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d137      	bne.n	80031f8 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003188:	2308      	movs	r3, #8
 800318a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800318c:	2300      	movs	r3, #0
 800318e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003190:	f107 0318 	add.w	r3, r7, #24
 8003194:	4618      	mov	r0, r3
 8003196:	f002 f95d 	bl	8005454 <HAL_RCCEx_PeriphCLKConfig>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80031a0:	f7ff fa4a 	bl	8002638 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80031a4:	4b39      	ldr	r3, [pc, #228]	@ (800328c <HAL_UART_MspInit+0x134>)
 80031a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a8:	4a38      	ldr	r2, [pc, #224]	@ (800328c <HAL_UART_MspInit+0x134>)
 80031aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80031ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80031b0:	4b36      	ldr	r3, [pc, #216]	@ (800328c <HAL_UART_MspInit+0x134>)
 80031b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031bc:	4b33      	ldr	r3, [pc, #204]	@ (800328c <HAL_UART_MspInit+0x134>)
 80031be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c0:	4a32      	ldr	r2, [pc, #200]	@ (800328c <HAL_UART_MspInit+0x134>)
 80031c2:	f043 0304 	orr.w	r3, r3, #4
 80031c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031c8:	4b30      	ldr	r3, [pc, #192]	@ (800328c <HAL_UART_MspInit+0x134>)
 80031ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_SWD_Pin|RX_SWD_Pin;
 80031d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80031d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031da:	2302      	movs	r3, #2
 80031dc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e2:	2300      	movs	r3, #0
 80031e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80031e6:	2305      	movs	r3, #5
 80031e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ea:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80031ee:	4619      	mov	r1, r3
 80031f0:	4827      	ldr	r0, [pc, #156]	@ (8003290 <HAL_UART_MspInit+0x138>)
 80031f2:	f000 fb2f 	bl	8003854 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80031f6:	e043      	b.n	8003280 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a25      	ldr	r2, [pc, #148]	@ (8003294 <HAL_UART_MspInit+0x13c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d13e      	bne.n	8003280 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003202:	2304      	movs	r3, #4
 8003204:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003206:	2300      	movs	r3, #0
 8003208:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800320a:	f107 0318 	add.w	r3, r7, #24
 800320e:	4618      	mov	r0, r3
 8003210:	f002 f920 	bl	8005454 <HAL_RCCEx_PeriphCLKConfig>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800321a:	f7ff fa0d 	bl	8002638 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800321e:	4b1b      	ldr	r3, [pc, #108]	@ (800328c <HAL_UART_MspInit+0x134>)
 8003220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003222:	4a1a      	ldr	r2, [pc, #104]	@ (800328c <HAL_UART_MspInit+0x134>)
 8003224:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003228:	6593      	str	r3, [r2, #88]	@ 0x58
 800322a:	4b18      	ldr	r3, [pc, #96]	@ (800328c <HAL_UART_MspInit+0x134>)
 800322c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003236:	4b15      	ldr	r3, [pc, #84]	@ (800328c <HAL_UART_MspInit+0x134>)
 8003238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800323a:	4a14      	ldr	r2, [pc, #80]	@ (800328c <HAL_UART_MspInit+0x134>)
 800323c:	f043 0302 	orr.w	r3, r3, #2
 8003240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003242:	4b12      	ldr	r3, [pc, #72]	@ (800328c <HAL_UART_MspInit+0x134>)
 8003244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LIDAR_RX_Pin|LIDAR_TX_Pin;
 800324e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003252:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003254:	2302      	movs	r3, #2
 8003256:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	2300      	movs	r3, #0
 800325a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325c:	2300      	movs	r3, #0
 800325e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003260:	2307      	movs	r3, #7
 8003262:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003264:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003268:	4619      	mov	r1, r3
 800326a:	480b      	ldr	r0, [pc, #44]	@ (8003298 <HAL_UART_MspInit+0x140>)
 800326c:	f000 faf2 	bl	8003854 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003270:	2200      	movs	r2, #0
 8003272:	2100      	movs	r1, #0
 8003274:	2027      	movs	r0, #39	@ 0x27
 8003276:	f000 f94b 	bl	8003510 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800327a:	2027      	movs	r0, #39	@ 0x27
 800327c:	f000 f962 	bl	8003544 <HAL_NVIC_EnableIRQ>
}
 8003280:	bf00      	nop
 8003282:	3770      	adds	r7, #112	@ 0x70
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40004c00 	.word	0x40004c00
 800328c:	40021000 	.word	0x40021000
 8003290:	48000800 	.word	0x48000800
 8003294:	40004800 	.word	0x40004800
 8003298:	48000400 	.word	0x48000400

0800329c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800329c:	480d      	ldr	r0, [pc, #52]	@ (80032d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800329e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80032a0:	f7ff fb86 	bl	80029b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032a4:	480c      	ldr	r0, [pc, #48]	@ (80032d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80032a6:	490d      	ldr	r1, [pc, #52]	@ (80032dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80032a8:	4a0d      	ldr	r2, [pc, #52]	@ (80032e0 <LoopForever+0xe>)
  movs r3, #0
 80032aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80032ac:	e002      	b.n	80032b4 <LoopCopyDataInit>

080032ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032b2:	3304      	adds	r3, #4

080032b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032b8:	d3f9      	bcc.n	80032ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032ba:	4a0a      	ldr	r2, [pc, #40]	@ (80032e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032bc:	4c0a      	ldr	r4, [pc, #40]	@ (80032e8 <LoopForever+0x16>)
  movs r3, #0
 80032be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032c0:	e001      	b.n	80032c6 <LoopFillZerobss>

080032c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032c4:	3204      	adds	r2, #4

080032c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032c8:	d3fb      	bcc.n	80032c2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80032ca:	f008 fb71 	bl	800b9b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032ce:	f7fe ff27 	bl	8002120 <main>

080032d2 <LoopForever>:

LoopForever:
    b LoopForever
 80032d2:	e7fe      	b.n	80032d2 <LoopForever>
  ldr   r0, =_estack
 80032d4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80032d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032dc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80032e0:	0800fb18 	.word	0x0800fb18
  ldr r2, =_sbss
 80032e4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80032e8:	20003c80 	.word	0x20003c80

080032ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032ec:	e7fe      	b.n	80032ec <ADC1_2_IRQHandler>

080032ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032f8:	2003      	movs	r0, #3
 80032fa:	f000 f8fe 	bl	80034fa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032fe:	200f      	movs	r0, #15
 8003300:	f7ff f9d2 	bl	80026a8 <HAL_InitTick>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	71fb      	strb	r3, [r7, #7]
 800330e:	e001      	b.n	8003314 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003310:	f7ff f998 	bl	8002644 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003314:	79fb      	ldrb	r3, [r7, #7]

}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003324:	4b05      	ldr	r3, [pc, #20]	@ (800333c <HAL_IncTick+0x1c>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	4b05      	ldr	r3, [pc, #20]	@ (8003340 <HAL_IncTick+0x20>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4413      	add	r3, r2
 800332e:	4a03      	ldr	r2, [pc, #12]	@ (800333c <HAL_IncTick+0x1c>)
 8003330:	6013      	str	r3, [r2, #0]
}
 8003332:	bf00      	nop
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	200012cc 	.word	0x200012cc
 8003340:	20000008 	.word	0x20000008

08003344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return uwTick;
 8003348:	4b03      	ldr	r3, [pc, #12]	@ (8003358 <HAL_GetTick+0x14>)
 800334a:	681b      	ldr	r3, [r3, #0]
}
 800334c:	4618      	mov	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	200012cc 	.word	0x200012cc

0800335c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003364:	f7ff ffee 	bl	8003344 <HAL_GetTick>
 8003368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003374:	d004      	beq.n	8003380 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003376:	4b09      	ldr	r3, [pc, #36]	@ (800339c <HAL_Delay+0x40>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4413      	add	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003380:	bf00      	nop
 8003382:	f7ff ffdf 	bl	8003344 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	429a      	cmp	r2, r3
 8003390:	d8f7      	bhi.n	8003382 <HAL_Delay+0x26>
  {
  }
}
 8003392:	bf00      	nop
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000008 	.word	0x20000008

080033a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b0:	4b0c      	ldr	r3, [pc, #48]	@ (80033e4 <__NVIC_SetPriorityGrouping+0x44>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033bc:	4013      	ands	r3, r2
 80033be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033d2:	4a04      	ldr	r2, [pc, #16]	@ (80033e4 <__NVIC_SetPriorityGrouping+0x44>)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	60d3      	str	r3, [r2, #12]
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ec:	4b04      	ldr	r3, [pc, #16]	@ (8003400 <__NVIC_GetPriorityGrouping+0x18>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	0a1b      	lsrs	r3, r3, #8
 80033f2:	f003 0307 	and.w	r3, r3, #7
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003412:	2b00      	cmp	r3, #0
 8003414:	db0b      	blt.n	800342e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	f003 021f 	and.w	r2, r3, #31
 800341c:	4907      	ldr	r1, [pc, #28]	@ (800343c <__NVIC_EnableIRQ+0x38>)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	2001      	movs	r0, #1
 8003426:	fa00 f202 	lsl.w	r2, r0, r2
 800342a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	e000e100 	.word	0xe000e100

08003440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	6039      	str	r1, [r7, #0]
 800344a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003450:	2b00      	cmp	r3, #0
 8003452:	db0a      	blt.n	800346a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	b2da      	uxtb	r2, r3
 8003458:	490c      	ldr	r1, [pc, #48]	@ (800348c <__NVIC_SetPriority+0x4c>)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	0112      	lsls	r2, r2, #4
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	440b      	add	r3, r1
 8003464:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003468:	e00a      	b.n	8003480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	b2da      	uxtb	r2, r3
 800346e:	4908      	ldr	r1, [pc, #32]	@ (8003490 <__NVIC_SetPriority+0x50>)
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	3b04      	subs	r3, #4
 8003478:	0112      	lsls	r2, r2, #4
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	440b      	add	r3, r1
 800347e:	761a      	strb	r2, [r3, #24]
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	e000e100 	.word	0xe000e100
 8003490:	e000ed00 	.word	0xe000ed00

08003494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003494:	b480      	push	{r7}
 8003496:	b089      	sub	sp, #36	@ 0x24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f1c3 0307 	rsb	r3, r3, #7
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	bf28      	it	cs
 80034b2:	2304      	movcs	r3, #4
 80034b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3304      	adds	r3, #4
 80034ba:	2b06      	cmp	r3, #6
 80034bc:	d902      	bls.n	80034c4 <NVIC_EncodePriority+0x30>
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	3b03      	subs	r3, #3
 80034c2:	e000      	b.n	80034c6 <NVIC_EncodePriority+0x32>
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c8:	f04f 32ff 	mov.w	r2, #4294967295
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43da      	mvns	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	401a      	ands	r2, r3
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034dc:	f04f 31ff 	mov.w	r1, #4294967295
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	fa01 f303 	lsl.w	r3, r1, r3
 80034e6:	43d9      	mvns	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ec:	4313      	orrs	r3, r2
         );
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3724      	adds	r7, #36	@ 0x24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff ff4c 	bl	80033a0 <__NVIC_SetPriorityGrouping>
}
 8003508:	bf00      	nop
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800351e:	f7ff ff63 	bl	80033e8 <__NVIC_GetPriorityGrouping>
 8003522:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	68b9      	ldr	r1, [r7, #8]
 8003528:	6978      	ldr	r0, [r7, #20]
 800352a:	f7ff ffb3 	bl	8003494 <NVIC_EncodePriority>
 800352e:	4602      	mov	r2, r0
 8003530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003534:	4611      	mov	r1, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff ff82 	bl	8003440 <__NVIC_SetPriority>
}
 800353c:	bf00      	nop
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff ff56 	bl	8003404 <__NVIC_EnableIRQ>
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_DMA_Start_IT+0x20>
 800357c:	2302      	movs	r3, #2
 800357e:	e066      	b.n	800364e <HAL_DMA_Start_IT+0xee>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b01      	cmp	r3, #1
 8003592:	d155      	bne.n	8003640 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	68b9      	ldr	r1, [r7, #8]
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 f90c 	bl	80037d6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d008      	beq.n	80035d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 020e 	orr.w	r2, r2, #14
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	e00f      	b.n	80035f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0204 	bic.w	r2, r2, #4
 80035e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 020a 	orr.w	r2, r2, #10
 80035f6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d007      	beq.n	8003616 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003610:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003614:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361a:	2b00      	cmp	r3, #0
 800361c:	d007      	beq.n	800362e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003628:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800362c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0201 	orr.w	r2, r2, #1
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	e005      	b.n	800364c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003648:	2302      	movs	r3, #2
 800364a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800364c:	7dfb      	ldrb	r3, [r7, #23]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003656:	b480      	push	{r7}
 8003658:	b085      	sub	sp, #20
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d005      	beq.n	800367a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2204      	movs	r2, #4
 8003672:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
 8003678:	e037      	b.n	80036ea <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 020e 	bic.w	r2, r2, #14
 8003688:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003694:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003698:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0201 	bic.w	r2, r2, #1
 80036a8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ae:	f003 021f 	and.w	r2, r3, #31
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	2101      	movs	r1, #1
 80036b8:	fa01 f202 	lsl.w	r2, r1, r2
 80036bc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80036c6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00c      	beq.n	80036ea <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036de:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80036e8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d00d      	beq.n	800373c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2204      	movs	r2, #4
 8003724:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
 800373a:	e047      	b.n	80037cc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 020e 	bic.w	r2, r2, #14
 800374a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003766:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800376a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003770:	f003 021f 	and.w	r2, r3, #31
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003778:	2101      	movs	r1, #1
 800377a:	fa01 f202 	lsl.w	r2, r1, r2
 800377e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003788:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00c      	beq.n	80037ac <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4798      	blx	r3
    }
  }
  return status;
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b085      	sub	sp, #20
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80037ec:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d004      	beq.n	8003800 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037fe:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003804:	f003 021f 	and.w	r2, r3, #31
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380c:	2101      	movs	r1, #1
 800380e:	fa01 f202 	lsl.w	r2, r1, r2
 8003812:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b10      	cmp	r3, #16
 8003822:	d108      	bne.n	8003836 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003834:	e007      	b.n	8003846 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	60da      	str	r2, [r3, #12]
}
 8003846:	bf00      	nop
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003862:	e15a      	b.n	8003b1a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	2101      	movs	r1, #1
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	fa01 f303 	lsl.w	r3, r1, r3
 8003870:	4013      	ands	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 814c 	beq.w	8003b14 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f003 0303 	and.w	r3, r3, #3
 8003884:	2b01      	cmp	r3, #1
 8003886:	d005      	beq.n	8003894 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003890:	2b02      	cmp	r3, #2
 8003892:	d130      	bne.n	80038f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	2203      	movs	r2, #3
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4013      	ands	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038ca:	2201      	movs	r2, #1
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43db      	mvns	r3, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4013      	ands	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	091b      	lsrs	r3, r3, #4
 80038e0:	f003 0201 	and.w	r2, r3, #1
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	2b03      	cmp	r3, #3
 8003900:	d017      	beq.n	8003932 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	2203      	movs	r2, #3
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4013      	ands	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d123      	bne.n	8003986 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	08da      	lsrs	r2, r3, #3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3208      	adds	r2, #8
 8003946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800394a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	220f      	movs	r2, #15
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43db      	mvns	r3, r3
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4013      	ands	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	691a      	ldr	r2, [r3, #16]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	08da      	lsrs	r2, r3, #3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3208      	adds	r2, #8
 8003980:	6939      	ldr	r1, [r7, #16]
 8003982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	2203      	movs	r2, #3
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43db      	mvns	r3, r3
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	4013      	ands	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f003 0203 	and.w	r2, r3, #3
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 80a6 	beq.w	8003b14 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c8:	4b5b      	ldr	r3, [pc, #364]	@ (8003b38 <HAL_GPIO_Init+0x2e4>)
 80039ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039cc:	4a5a      	ldr	r2, [pc, #360]	@ (8003b38 <HAL_GPIO_Init+0x2e4>)
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80039d4:	4b58      	ldr	r3, [pc, #352]	@ (8003b38 <HAL_GPIO_Init+0x2e4>)
 80039d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039e0:	4a56      	ldr	r2, [pc, #344]	@ (8003b3c <HAL_GPIO_Init+0x2e8>)
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	089b      	lsrs	r3, r3, #2
 80039e6:	3302      	adds	r3, #2
 80039e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f003 0303 	and.w	r3, r3, #3
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	220f      	movs	r2, #15
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	43db      	mvns	r3, r3
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4013      	ands	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a0a:	d01f      	beq.n	8003a4c <HAL_GPIO_Init+0x1f8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a4c      	ldr	r2, [pc, #304]	@ (8003b40 <HAL_GPIO_Init+0x2ec>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d019      	beq.n	8003a48 <HAL_GPIO_Init+0x1f4>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a4b      	ldr	r2, [pc, #300]	@ (8003b44 <HAL_GPIO_Init+0x2f0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d013      	beq.n	8003a44 <HAL_GPIO_Init+0x1f0>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a4a      	ldr	r2, [pc, #296]	@ (8003b48 <HAL_GPIO_Init+0x2f4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00d      	beq.n	8003a40 <HAL_GPIO_Init+0x1ec>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a49      	ldr	r2, [pc, #292]	@ (8003b4c <HAL_GPIO_Init+0x2f8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d007      	beq.n	8003a3c <HAL_GPIO_Init+0x1e8>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a48      	ldr	r2, [pc, #288]	@ (8003b50 <HAL_GPIO_Init+0x2fc>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d101      	bne.n	8003a38 <HAL_GPIO_Init+0x1e4>
 8003a34:	2305      	movs	r3, #5
 8003a36:	e00a      	b.n	8003a4e <HAL_GPIO_Init+0x1fa>
 8003a38:	2306      	movs	r3, #6
 8003a3a:	e008      	b.n	8003a4e <HAL_GPIO_Init+0x1fa>
 8003a3c:	2304      	movs	r3, #4
 8003a3e:	e006      	b.n	8003a4e <HAL_GPIO_Init+0x1fa>
 8003a40:	2303      	movs	r3, #3
 8003a42:	e004      	b.n	8003a4e <HAL_GPIO_Init+0x1fa>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e002      	b.n	8003a4e <HAL_GPIO_Init+0x1fa>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e000      	b.n	8003a4e <HAL_GPIO_Init+0x1fa>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	f002 0203 	and.w	r2, r2, #3
 8003a54:	0092      	lsls	r2, r2, #2
 8003a56:	4093      	lsls	r3, r2
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a5e:	4937      	ldr	r1, [pc, #220]	@ (8003b3c <HAL_GPIO_Init+0x2e8>)
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	089b      	lsrs	r3, r3, #2
 8003a64:	3302      	adds	r3, #2
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a6c:	4b39      	ldr	r3, [pc, #228]	@ (8003b54 <HAL_GPIO_Init+0x300>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a90:	4a30      	ldr	r2, [pc, #192]	@ (8003b54 <HAL_GPIO_Init+0x300>)
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a96:	4b2f      	ldr	r3, [pc, #188]	@ (8003b54 <HAL_GPIO_Init+0x300>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003aba:	4a26      	ldr	r2, [pc, #152]	@ (8003b54 <HAL_GPIO_Init+0x300>)
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003ac0:	4b24      	ldr	r3, [pc, #144]	@ (8003b54 <HAL_GPIO_Init+0x300>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4013      	ands	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b54 <HAL_GPIO_Init+0x300>)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003aea:	4b1a      	ldr	r3, [pc, #104]	@ (8003b54 <HAL_GPIO_Init+0x300>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	43db      	mvns	r3, r3
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4013      	ands	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b0e:	4a11      	ldr	r2, [pc, #68]	@ (8003b54 <HAL_GPIO_Init+0x300>)
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	3301      	adds	r3, #1
 8003b18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	fa22 f303 	lsr.w	r3, r2, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f47f ae9d 	bne.w	8003864 <HAL_GPIO_Init+0x10>
  }
}
 8003b2a:	bf00      	nop
 8003b2c:	bf00      	nop
 8003b2e:	371c      	adds	r7, #28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40010000 	.word	0x40010000
 8003b40:	48000400 	.word	0x48000400
 8003b44:	48000800 	.word	0x48000800
 8003b48:	48000c00 	.word	0x48000c00
 8003b4c:	48001000 	.word	0x48001000
 8003b50:	48001400 	.word	0x48001400
 8003b54:	40010400 	.word	0x40010400

08003b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	460b      	mov	r3, r1
 8003b62:	807b      	strh	r3, [r7, #2]
 8003b64:	4613      	mov	r3, r2
 8003b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b68:	787b      	ldrb	r3, [r7, #1]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b6e:	887a      	ldrh	r2, [r7, #2]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b74:	e002      	b.n	8003b7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b76:	887a      	ldrh	r2, [r7, #2]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b9a:	887a      	ldrh	r2, [r7, #2]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	041a      	lsls	r2, r3, #16
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	43d9      	mvns	r1, r3
 8003ba6:	887b      	ldrh	r3, [r7, #2]
 8003ba8:	400b      	ands	r3, r1
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	619a      	str	r2, [r3, #24]
}
 8003bb0:	bf00      	nop
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003bc6:	4b08      	ldr	r3, [pc, #32]	@ (8003be8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d006      	beq.n	8003be0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bd2:	4a05      	ldr	r2, [pc, #20]	@ (8003be8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bd4:	88fb      	ldrh	r3, [r7, #6]
 8003bd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bd8:	88fb      	ldrh	r3, [r7, #6]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fe fc9c 	bl	8002518 <HAL_GPIO_EXTI_Callback>
  }
}
 8003be0:	bf00      	nop
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40010400 	.word	0x40010400

08003bec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e08d      	b.n	8003d1a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fe fa2a 	bl	800206c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2224      	movs	r2, #36	@ 0x24
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0201 	bic.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d107      	bne.n	8003c66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c62:	609a      	str	r2, [r3, #8]
 8003c64:	e006      	b.n	8003c74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d108      	bne.n	8003c8e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c8a:	605a      	str	r2, [r3, #4]
 8003c8c:	e007      	b.n	8003c9e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	69d9      	ldr	r1, [r3, #28]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1a      	ldr	r2, [r3, #32]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	4611      	mov	r1, r2
 8003d30:	461a      	mov	r2, r3
 8003d32:	4603      	mov	r3, r0
 8003d34:	817b      	strh	r3, [r7, #10]
 8003d36:	460b      	mov	r3, r1
 8003d38:	813b      	strh	r3, [r7, #8]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b20      	cmp	r3, #32
 8003d48:	f040 80f9 	bne.w	8003f3e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_I2C_Mem_Write+0x34>
 8003d52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d105      	bne.n	8003d64 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d5e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0ed      	b.n	8003f40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_I2C_Mem_Write+0x4e>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e0e6      	b.n	8003f40 <HAL_I2C_Mem_Write+0x21c>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d7a:	f7ff fae3 	bl	8003344 <HAL_GetTick>
 8003d7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	2319      	movs	r3, #25
 8003d86:	2201      	movs	r2, #1
 8003d88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 fac3 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0d1      	b.n	8003f40 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2221      	movs	r2, #33	@ 0x21
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2240      	movs	r2, #64	@ 0x40
 8003da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a3a      	ldr	r2, [r7, #32]
 8003db6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dc4:	88f8      	ldrh	r0, [r7, #6]
 8003dc6:	893a      	ldrh	r2, [r7, #8]
 8003dc8:	8979      	ldrh	r1, [r7, #10]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 f9d3 	bl	8004180 <I2C_RequestMemoryWrite>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0a9      	b.n	8003f40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2bff      	cmp	r3, #255	@ 0xff
 8003df4:	d90e      	bls.n	8003e14 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	22ff      	movs	r2, #255	@ 0xff
 8003dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	8979      	ldrh	r1, [r7, #10]
 8003e04:	2300      	movs	r3, #0
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 fc47 	bl	80046a0 <I2C_TransferConfig>
 8003e12:	e00f      	b.n	8003e34 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	8979      	ldrh	r1, [r7, #10]
 8003e26:	2300      	movs	r3, #0
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 fc36 	bl	80046a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 fac6 	bl	80043ca <I2C_WaitOnTXISFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e07b      	b.n	8003f40 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4c:	781a      	ldrb	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d034      	beq.n	8003eec <HAL_I2C_Mem_Write+0x1c8>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d130      	bne.n	8003eec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e90:	2200      	movs	r2, #0
 8003e92:	2180      	movs	r1, #128	@ 0x80
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 fa3f 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e04d      	b.n	8003f40 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	2bff      	cmp	r3, #255	@ 0xff
 8003eac:	d90e      	bls.n	8003ecc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	22ff      	movs	r2, #255	@ 0xff
 8003eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	8979      	ldrh	r1, [r7, #10]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 fbeb 	bl	80046a0 <I2C_TransferConfig>
 8003eca:	e00f      	b.n	8003eec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	8979      	ldrh	r1, [r7, #10]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 fbda 	bl	80046a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d19e      	bne.n	8003e34 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 faac 	bl	8004458 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e01a      	b.n	8003f40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f48 <HAL_I2C_Mem_Write+0x224>)
 8003f1e:	400b      	ands	r3, r1
 8003f20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	e000      	b.n	8003f40 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003f3e:	2302      	movs	r3, #2
  }
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	fe00e800 	.word	0xfe00e800

08003f4c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	4608      	mov	r0, r1
 8003f56:	4611      	mov	r1, r2
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	817b      	strh	r3, [r7, #10]
 8003f5e:	460b      	mov	r3, r1
 8003f60:	813b      	strh	r3, [r7, #8]
 8003f62:	4613      	mov	r3, r2
 8003f64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	f040 80fd 	bne.w	800416e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <HAL_I2C_Mem_Read+0x34>
 8003f7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d105      	bne.n	8003f8c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f86:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0f1      	b.n	8004170 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_I2C_Mem_Read+0x4e>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e0ea      	b.n	8004170 <HAL_I2C_Mem_Read+0x224>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003fa2:	f7ff f9cf 	bl	8003344 <HAL_GetTick>
 8003fa6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	2319      	movs	r3, #25
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 f9af 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0d5      	b.n	8004170 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2222      	movs	r2, #34	@ 0x22
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2240      	movs	r2, #64	@ 0x40
 8003fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a3a      	ldr	r2, [r7, #32]
 8003fde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003fe4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fec:	88f8      	ldrh	r0, [r7, #6]
 8003fee:	893a      	ldrh	r2, [r7, #8]
 8003ff0:	8979      	ldrh	r1, [r7, #10]
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f913 	bl	8004228 <I2C_RequestMemoryRead>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0ad      	b.n	8004170 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	2bff      	cmp	r3, #255	@ 0xff
 800401c:	d90e      	bls.n	800403c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	22ff      	movs	r2, #255	@ 0xff
 8004022:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004028:	b2da      	uxtb	r2, r3
 800402a:	8979      	ldrh	r1, [r7, #10]
 800402c:	4b52      	ldr	r3, [pc, #328]	@ (8004178 <HAL_I2C_Mem_Read+0x22c>)
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 fb33 	bl	80046a0 <I2C_TransferConfig>
 800403a:	e00f      	b.n	800405c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800404a:	b2da      	uxtb	r2, r3
 800404c:	8979      	ldrh	r1, [r7, #10]
 800404e:	4b4a      	ldr	r3, [pc, #296]	@ (8004178 <HAL_I2C_Mem_Read+0x22c>)
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 fb22 	bl	80046a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004062:	2200      	movs	r2, #0
 8004064:	2104      	movs	r1, #4
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 f956 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e07c      	b.n	8004170 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d034      	beq.n	800411c <HAL_I2C_Mem_Read+0x1d0>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d130      	bne.n	800411c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c0:	2200      	movs	r2, #0
 80040c2:	2180      	movs	r1, #128	@ 0x80
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f927 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e04d      	b.n	8004170 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2bff      	cmp	r3, #255	@ 0xff
 80040dc:	d90e      	bls.n	80040fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	22ff      	movs	r2, #255	@ 0xff
 80040e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	8979      	ldrh	r1, [r7, #10]
 80040ec:	2300      	movs	r3, #0
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 fad3 	bl	80046a0 <I2C_TransferConfig>
 80040fa:	e00f      	b.n	800411c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410a:	b2da      	uxtb	r2, r3
 800410c:	8979      	ldrh	r1, [r7, #10]
 800410e:	2300      	movs	r3, #0
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 fac2 	bl	80046a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d19a      	bne.n	800405c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 f994 	bl	8004458 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e01a      	b.n	8004170 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2220      	movs	r2, #32
 8004140:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6859      	ldr	r1, [r3, #4]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	4b0b      	ldr	r3, [pc, #44]	@ (800417c <HAL_I2C_Mem_Read+0x230>)
 800414e:	400b      	ands	r3, r1
 8004150:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	e000      	b.n	8004170 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800416e:	2302      	movs	r3, #2
  }
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	80002400 	.word	0x80002400
 800417c:	fe00e800 	.word	0xfe00e800

08004180 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af02      	add	r7, sp, #8
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	4608      	mov	r0, r1
 800418a:	4611      	mov	r1, r2
 800418c:	461a      	mov	r2, r3
 800418e:	4603      	mov	r3, r0
 8004190:	817b      	strh	r3, [r7, #10]
 8004192:	460b      	mov	r3, r1
 8004194:	813b      	strh	r3, [r7, #8]
 8004196:	4613      	mov	r3, r2
 8004198:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	b2da      	uxtb	r2, r3
 800419e:	8979      	ldrh	r1, [r7, #10]
 80041a0:	4b20      	ldr	r3, [pc, #128]	@ (8004224 <I2C_RequestMemoryWrite+0xa4>)
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 fa79 	bl	80046a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ae:	69fa      	ldr	r2, [r7, #28]
 80041b0:	69b9      	ldr	r1, [r7, #24]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f909 	bl	80043ca <I2C_WaitOnTXISFlagUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e02c      	b.n	800421c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041c2:	88fb      	ldrh	r3, [r7, #6]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d105      	bne.n	80041d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041c8:	893b      	ldrh	r3, [r7, #8]
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80041d2:	e015      	b.n	8004200 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041d4:	893b      	ldrh	r3, [r7, #8]
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	b29b      	uxth	r3, r3
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	69b9      	ldr	r1, [r7, #24]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f8ef 	bl	80043ca <I2C_WaitOnTXISFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e012      	b.n	800421c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041f6:	893b      	ldrh	r3, [r7, #8]
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2200      	movs	r2, #0
 8004208:	2180      	movs	r1, #128	@ 0x80
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 f884 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	80002000 	.word	0x80002000

08004228 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af02      	add	r7, sp, #8
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	4608      	mov	r0, r1
 8004232:	4611      	mov	r1, r2
 8004234:	461a      	mov	r2, r3
 8004236:	4603      	mov	r3, r0
 8004238:	817b      	strh	r3, [r7, #10]
 800423a:	460b      	mov	r3, r1
 800423c:	813b      	strh	r3, [r7, #8]
 800423e:	4613      	mov	r3, r2
 8004240:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	b2da      	uxtb	r2, r3
 8004246:	8979      	ldrh	r1, [r7, #10]
 8004248:	4b20      	ldr	r3, [pc, #128]	@ (80042cc <I2C_RequestMemoryRead+0xa4>)
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	2300      	movs	r3, #0
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fa26 	bl	80046a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004254:	69fa      	ldr	r2, [r7, #28]
 8004256:	69b9      	ldr	r1, [r7, #24]
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f8b6 	bl	80043ca <I2C_WaitOnTXISFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e02c      	b.n	80042c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004268:	88fb      	ldrh	r3, [r7, #6]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d105      	bne.n	800427a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800426e:	893b      	ldrh	r3, [r7, #8]
 8004270:	b2da      	uxtb	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	629a      	str	r2, [r3, #40]	@ 0x28
 8004278:	e015      	b.n	80042a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800427a:	893b      	ldrh	r3, [r7, #8]
 800427c:	0a1b      	lsrs	r3, r3, #8
 800427e:	b29b      	uxth	r3, r3
 8004280:	b2da      	uxtb	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	69b9      	ldr	r1, [r7, #24]
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f89c 	bl	80043ca <I2C_WaitOnTXISFlagUntilTimeout>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e012      	b.n	80042c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800429c:	893b      	ldrh	r3, [r7, #8]
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	2200      	movs	r2, #0
 80042ae:	2140      	movs	r1, #64	@ 0x40
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f831 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	80002000 	.word	0x80002000

080042d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d103      	bne.n	80042ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2200      	movs	r2, #0
 80042ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d007      	beq.n	800430c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699a      	ldr	r2, [r3, #24]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	619a      	str	r2, [r3, #24]
  }
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	4613      	mov	r3, r2
 8004326:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004328:	e03b      	b.n	80043a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	6839      	ldr	r1, [r7, #0]
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 f8d6 	bl	80044e0 <I2C_IsErrorOccurred>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e041      	b.n	80043c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004344:	d02d      	beq.n	80043a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004346:	f7fe fffd 	bl	8003344 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d302      	bcc.n	800435c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d122      	bne.n	80043a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699a      	ldr	r2, [r3, #24]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	4013      	ands	r3, r2
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	429a      	cmp	r2, r3
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	461a      	mov	r2, r3
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	429a      	cmp	r2, r3
 8004378:	d113      	bne.n	80043a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437e:	f043 0220 	orr.w	r2, r3, #32
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2220      	movs	r2, #32
 800438a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e00f      	b.n	80043c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	699a      	ldr	r2, [r3, #24]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4013      	ands	r3, r2
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	bf0c      	ite	eq
 80043b2:	2301      	moveq	r3, #1
 80043b4:	2300      	movne	r3, #0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	79fb      	ldrb	r3, [r7, #7]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d0b4      	beq.n	800432a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043d6:	e033      	b.n	8004440 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	68b9      	ldr	r1, [r7, #8]
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f87f 	bl	80044e0 <I2C_IsErrorOccurred>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e031      	b.n	8004450 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f2:	d025      	beq.n	8004440 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f4:	f7fe ffa6 	bl	8003344 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	429a      	cmp	r2, r3
 8004402:	d302      	bcc.n	800440a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d11a      	bne.n	8004440 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b02      	cmp	r3, #2
 8004416:	d013      	beq.n	8004440 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441c:	f043 0220 	orr.w	r2, r3, #32
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e007      	b.n	8004450 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b02      	cmp	r3, #2
 800444c:	d1c4      	bne.n	80043d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004464:	e02f      	b.n	80044c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f838 	bl	80044e0 <I2C_IsErrorOccurred>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e02d      	b.n	80044d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447a:	f7fe ff63 	bl	8003344 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	429a      	cmp	r2, r3
 8004488:	d302      	bcc.n	8004490 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d11a      	bne.n	80044c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b20      	cmp	r3, #32
 800449c:	d013      	beq.n	80044c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a2:	f043 0220 	orr.w	r2, r3, #32
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e007      	b.n	80044d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d1c8      	bne.n	8004466 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08a      	sub	sp, #40	@ 0x28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2b00      	cmp	r3, #0
 800450a:	d068      	beq.n	80045de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2210      	movs	r2, #16
 8004512:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004514:	e049      	b.n	80045aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451c:	d045      	beq.n	80045aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800451e:	f7fe ff11 	bl	8003344 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	429a      	cmp	r2, r3
 800452c:	d302      	bcc.n	8004534 <I2C_IsErrorOccurred+0x54>
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d13a      	bne.n	80045aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800453e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004546:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004552:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004556:	d121      	bne.n	800459c <I2C_IsErrorOccurred+0xbc>
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800455e:	d01d      	beq.n	800459c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004560:	7cfb      	ldrb	r3, [r7, #19]
 8004562:	2b20      	cmp	r3, #32
 8004564:	d01a      	beq.n	800459c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004574:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004576:	f7fe fee5 	bl	8003344 <HAL_GetTick>
 800457a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800457c:	e00e      	b.n	800459c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800457e:	f7fe fee1 	bl	8003344 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b19      	cmp	r3, #25
 800458a:	d907      	bls.n	800459c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	f043 0320 	orr.w	r3, r3, #32
 8004592:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800459a:	e006      	b.n	80045aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	d1e9      	bne.n	800457e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d003      	beq.n	80045c0 <I2C_IsErrorOccurred+0xe0>
 80045b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0aa      	beq.n	8004516 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80045c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d103      	bne.n	80045d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2220      	movs	r2, #32
 80045ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	f043 0304 	orr.w	r3, r3, #4
 80045d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00b      	beq.n	8004608 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004600:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00b      	beq.n	800462a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	f043 0308 	orr.w	r3, r3, #8
 8004618:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004622:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00b      	beq.n	800464c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	f043 0302 	orr.w	r3, r3, #2
 800463a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004644:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800464c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01c      	beq.n	800468e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f7ff fe3b 	bl	80042d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6859      	ldr	r1, [r3, #4]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	4b0d      	ldr	r3, [pc, #52]	@ (800469c <I2C_IsErrorOccurred+0x1bc>)
 8004666:	400b      	ands	r3, r1
 8004668:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	431a      	orrs	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2220      	movs	r2, #32
 800467a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800468e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004692:	4618      	mov	r0, r3
 8004694:	3728      	adds	r7, #40	@ 0x28
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	fe00e800 	.word	0xfe00e800

080046a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	607b      	str	r3, [r7, #4]
 80046aa:	460b      	mov	r3, r1
 80046ac:	817b      	strh	r3, [r7, #10]
 80046ae:	4613      	mov	r3, r2
 80046b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046b2:	897b      	ldrh	r3, [r7, #10]
 80046b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046b8:	7a7b      	ldrb	r3, [r7, #9]
 80046ba:	041b      	lsls	r3, r3, #16
 80046bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80046ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	0d5b      	lsrs	r3, r3, #21
 80046da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80046de:	4b08      	ldr	r3, [pc, #32]	@ (8004700 <I2C_TransferConfig+0x60>)
 80046e0:	430b      	orrs	r3, r1
 80046e2:	43db      	mvns	r3, r3
 80046e4:	ea02 0103 	and.w	r1, r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80046f2:	bf00      	nop
 80046f4:	371c      	adds	r7, #28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	03ff63ff 	.word	0x03ff63ff

08004704 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b20      	cmp	r3, #32
 8004718:	d138      	bne.n	800478c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004724:	2302      	movs	r3, #2
 8004726:	e032      	b.n	800478e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2224      	movs	r2, #36	@ 0x24
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0201 	bic.w	r2, r2, #1
 8004746:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004756:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6819      	ldr	r1, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0201 	orr.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	e000      	b.n	800478e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800478c:	2302      	movs	r3, #2
  }
}
 800478e:	4618      	mov	r0, r3
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800479a:	b480      	push	{r7}
 800479c:	b085      	sub	sp, #20
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d139      	bne.n	8004824 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e033      	b.n	8004826 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2224      	movs	r2, #36	@ 0x24
 80047ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0201 	bic.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80047ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	021b      	lsls	r3, r3, #8
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004820:	2300      	movs	r3, #0
 8004822:	e000      	b.n	8004826 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004824:	2302      	movs	r3, #2
  }
}
 8004826:	4618      	mov	r0, r3
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
	...

08004834 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d141      	bne.n	80048c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004842:	4b4b      	ldr	r3, [pc, #300]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800484a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800484e:	d131      	bne.n	80048b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004850:	4b47      	ldr	r3, [pc, #284]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004852:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004856:	4a46      	ldr	r2, [pc, #280]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004858:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800485c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004860:	4b43      	ldr	r3, [pc, #268]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004868:	4a41      	ldr	r2, [pc, #260]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800486e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004870:	4b40      	ldr	r3, [pc, #256]	@ (8004974 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2232      	movs	r2, #50	@ 0x32
 8004876:	fb02 f303 	mul.w	r3, r2, r3
 800487a:	4a3f      	ldr	r2, [pc, #252]	@ (8004978 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800487c:	fba2 2303 	umull	r2, r3, r2, r3
 8004880:	0c9b      	lsrs	r3, r3, #18
 8004882:	3301      	adds	r3, #1
 8004884:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004886:	e002      	b.n	800488e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	3b01      	subs	r3, #1
 800488c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800488e:	4b38      	ldr	r3, [pc, #224]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800489a:	d102      	bne.n	80048a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f2      	bne.n	8004888 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048a2:	4b33      	ldr	r3, [pc, #204]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ae:	d158      	bne.n	8004962 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e057      	b.n	8004964 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048b4:	4b2e      	ldr	r3, [pc, #184]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048ba:	4a2d      	ldr	r2, [pc, #180]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80048c4:	e04d      	b.n	8004962 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048cc:	d141      	bne.n	8004952 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048ce:	4b28      	ldr	r3, [pc, #160]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048da:	d131      	bne.n	8004940 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048dc:	4b24      	ldr	r3, [pc, #144]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048e2:	4a23      	ldr	r2, [pc, #140]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048ec:	4b20      	ldr	r3, [pc, #128]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004974 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2232      	movs	r2, #50	@ 0x32
 8004902:	fb02 f303 	mul.w	r3, r2, r3
 8004906:	4a1c      	ldr	r2, [pc, #112]	@ (8004978 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004908:	fba2 2303 	umull	r2, r3, r2, r3
 800490c:	0c9b      	lsrs	r3, r3, #18
 800490e:	3301      	adds	r3, #1
 8004910:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004912:	e002      	b.n	800491a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	3b01      	subs	r3, #1
 8004918:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800491a:	4b15      	ldr	r3, [pc, #84]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004926:	d102      	bne.n	800492e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f2      	bne.n	8004914 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800492e:	4b10      	ldr	r3, [pc, #64]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800493a:	d112      	bne.n	8004962 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e011      	b.n	8004964 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004940:	4b0b      	ldr	r3, [pc, #44]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004946:	4a0a      	ldr	r2, [pc, #40]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800494c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004950:	e007      	b.n	8004962 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004952:	4b07      	ldr	r3, [pc, #28]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800495a:	4a05      	ldr	r2, [pc, #20]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800495c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004960:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	40007000 	.word	0x40007000
 8004974:	20000000 	.word	0x20000000
 8004978:	431bde83 	.word	0x431bde83

0800497c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004980:	4b05      	ldr	r3, [pc, #20]	@ (8004998 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	4a04      	ldr	r2, [pc, #16]	@ (8004998 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004986:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800498a:	6093      	str	r3, [r2, #8]
}
 800498c:	bf00      	nop
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	40007000 	.word	0x40007000

0800499c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b088      	sub	sp, #32
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e2fe      	b.n	8004fac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d075      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ba:	4b97      	ldr	r3, [pc, #604]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
 80049c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049c4:	4b94      	ldr	r3, [pc, #592]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f003 0303 	and.w	r3, r3, #3
 80049cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	2b0c      	cmp	r3, #12
 80049d2:	d102      	bne.n	80049da <HAL_RCC_OscConfig+0x3e>
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d002      	beq.n	80049e0 <HAL_RCC_OscConfig+0x44>
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d10b      	bne.n	80049f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e0:	4b8d      	ldr	r3, [pc, #564]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d05b      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x108>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d157      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e2d9      	b.n	8004fac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a00:	d106      	bne.n	8004a10 <HAL_RCC_OscConfig+0x74>
 8004a02:	4b85      	ldr	r3, [pc, #532]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a84      	ldr	r2, [pc, #528]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	e01d      	b.n	8004a4c <HAL_RCC_OscConfig+0xb0>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a18:	d10c      	bne.n	8004a34 <HAL_RCC_OscConfig+0x98>
 8004a1a:	4b7f      	ldr	r3, [pc, #508]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a7e      	ldr	r2, [pc, #504]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004a20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	4b7c      	ldr	r3, [pc, #496]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a7b      	ldr	r2, [pc, #492]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	e00b      	b.n	8004a4c <HAL_RCC_OscConfig+0xb0>
 8004a34:	4b78      	ldr	r3, [pc, #480]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a77      	ldr	r2, [pc, #476]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004a3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	4b75      	ldr	r3, [pc, #468]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a74      	ldr	r2, [pc, #464]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004a46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d013      	beq.n	8004a7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7fe fc76 	bl	8003344 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a5c:	f7fe fc72 	bl	8003344 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	@ 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e29e      	b.n	8004fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a6e:	4b6a      	ldr	r3, [pc, #424]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0xc0>
 8004a7a:	e014      	b.n	8004aa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7c:	f7fe fc62 	bl	8003344 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a84:	f7fe fc5e 	bl	8003344 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b64      	cmp	r3, #100	@ 0x64
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e28a      	b.n	8004fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a96:	4b60      	ldr	r3, [pc, #384]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0xe8>
 8004aa2:	e000      	b.n	8004aa6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d075      	beq.n	8004b9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ab2:	4b59      	ldr	r3, [pc, #356]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 030c 	and.w	r3, r3, #12
 8004aba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004abc:	4b56      	ldr	r3, [pc, #344]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f003 0303 	and.w	r3, r3, #3
 8004ac4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	2b0c      	cmp	r3, #12
 8004aca:	d102      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x136>
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d002      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x13c>
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d11f      	bne.n	8004b18 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ad8:	4b4f      	ldr	r3, [pc, #316]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <HAL_RCC_OscConfig+0x154>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e25d      	b.n	8004fac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af0:	4b49      	ldr	r3, [pc, #292]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	061b      	lsls	r3, r3, #24
 8004afe:	4946      	ldr	r1, [pc, #280]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b04:	4b45      	ldr	r3, [pc, #276]	@ (8004c1c <HAL_RCC_OscConfig+0x280>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fd fdcd 	bl	80026a8 <HAL_InitTick>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d043      	beq.n	8004b9c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e249      	b.n	8004fac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d023      	beq.n	8004b68 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b20:	4b3d      	ldr	r3, [pc, #244]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a3c      	ldr	r2, [pc, #240]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004b26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fe fc0a 	bl	8003344 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b34:	f7fe fc06 	bl	8003344 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e232      	b.n	8004fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b46:	4b34      	ldr	r3, [pc, #208]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f0      	beq.n	8004b34 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b52:	4b31      	ldr	r3, [pc, #196]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	061b      	lsls	r3, r3, #24
 8004b60:	492d      	ldr	r1, [pc, #180]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	604b      	str	r3, [r1, #4]
 8004b66:	e01a      	b.n	8004b9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b68:	4b2b      	ldr	r3, [pc, #172]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a2a      	ldr	r2, [pc, #168]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004b6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b74:	f7fe fbe6 	bl	8003344 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b7c:	f7fe fbe2 	bl	8003344 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e20e      	b.n	8004fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b8e:	4b22      	ldr	r3, [pc, #136]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f0      	bne.n	8004b7c <HAL_RCC_OscConfig+0x1e0>
 8004b9a:	e000      	b.n	8004b9e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d041      	beq.n	8004c2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d01c      	beq.n	8004bec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bb2:	4b19      	ldr	r3, [pc, #100]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bb8:	4a17      	ldr	r2, [pc, #92]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004bba:	f043 0301 	orr.w	r3, r3, #1
 8004bbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc2:	f7fe fbbf 	bl	8003344 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bca:	f7fe fbbb 	bl	8003344 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e1e7      	b.n	8004fac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0ef      	beq.n	8004bca <HAL_RCC_OscConfig+0x22e>
 8004bea:	e020      	b.n	8004c2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bec:	4b0a      	ldr	r3, [pc, #40]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bf2:	4a09      	ldr	r2, [pc, #36]	@ (8004c18 <HAL_RCC_OscConfig+0x27c>)
 8004bf4:	f023 0301 	bic.w	r3, r3, #1
 8004bf8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfc:	f7fe fba2 	bl	8003344 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c02:	e00d      	b.n	8004c20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c04:	f7fe fb9e 	bl	8003344 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d906      	bls.n	8004c20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e1ca      	b.n	8004fac <HAL_RCC_OscConfig+0x610>
 8004c16:	bf00      	nop
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c20:	4b8c      	ldr	r3, [pc, #560]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1ea      	bne.n	8004c04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 80a6 	beq.w	8004d88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c40:	4b84      	ldr	r3, [pc, #528]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_RCC_OscConfig+0x2b4>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e000      	b.n	8004c52 <HAL_RCC_OscConfig+0x2b6>
 8004c50:	2300      	movs	r3, #0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00d      	beq.n	8004c72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c56:	4b7f      	ldr	r3, [pc, #508]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c60:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c62:	4b7c      	ldr	r3, [pc, #496]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c72:	4b79      	ldr	r3, [pc, #484]	@ (8004e58 <HAL_RCC_OscConfig+0x4bc>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d118      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c7e:	4b76      	ldr	r3, [pc, #472]	@ (8004e58 <HAL_RCC_OscConfig+0x4bc>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a75      	ldr	r2, [pc, #468]	@ (8004e58 <HAL_RCC_OscConfig+0x4bc>)
 8004c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c8a:	f7fe fb5b 	bl	8003344 <HAL_GetTick>
 8004c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c92:	f7fe fb57 	bl	8003344 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e183      	b.n	8004fac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ca4:	4b6c      	ldr	r3, [pc, #432]	@ (8004e58 <HAL_RCC_OscConfig+0x4bc>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0f0      	beq.n	8004c92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d108      	bne.n	8004cca <HAL_RCC_OscConfig+0x32e>
 8004cb8:	4b66      	ldr	r3, [pc, #408]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cbe:	4a65      	ldr	r2, [pc, #404]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004cc0:	f043 0301 	orr.w	r3, r3, #1
 8004cc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cc8:	e024      	b.n	8004d14 <HAL_RCC_OscConfig+0x378>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2b05      	cmp	r3, #5
 8004cd0:	d110      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x358>
 8004cd2:	4b60      	ldr	r3, [pc, #384]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd8:	4a5e      	ldr	r2, [pc, #376]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004cda:	f043 0304 	orr.w	r3, r3, #4
 8004cde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ce2:	4b5c      	ldr	r3, [pc, #368]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce8:	4a5a      	ldr	r2, [pc, #360]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004cea:	f043 0301 	orr.w	r3, r3, #1
 8004cee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cf2:	e00f      	b.n	8004d14 <HAL_RCC_OscConfig+0x378>
 8004cf4:	4b57      	ldr	r3, [pc, #348]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfa:	4a56      	ldr	r2, [pc, #344]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004cfc:	f023 0301 	bic.w	r3, r3, #1
 8004d00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d04:	4b53      	ldr	r3, [pc, #332]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d0a:	4a52      	ldr	r2, [pc, #328]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004d0c:	f023 0304 	bic.w	r3, r3, #4
 8004d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d016      	beq.n	8004d4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1c:	f7fe fb12 	bl	8003344 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d22:	e00a      	b.n	8004d3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d24:	f7fe fb0e 	bl	8003344 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e138      	b.n	8004fac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d3a:	4b46      	ldr	r3, [pc, #280]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0ed      	beq.n	8004d24 <HAL_RCC_OscConfig+0x388>
 8004d48:	e015      	b.n	8004d76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4a:	f7fe fafb 	bl	8003344 <HAL_GetTick>
 8004d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d50:	e00a      	b.n	8004d68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d52:	f7fe faf7 	bl	8003344 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e121      	b.n	8004fac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d68:	4b3a      	ldr	r3, [pc, #232]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1ed      	bne.n	8004d52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d76:	7ffb      	ldrb	r3, [r7, #31]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d105      	bne.n	8004d88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d7c:	4b35      	ldr	r3, [pc, #212]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d80:	4a34      	ldr	r2, [pc, #208]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004d82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d86:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0320 	and.w	r3, r3, #32
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d03c      	beq.n	8004e0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01c      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004da2:	4a2c      	ldr	r2, [pc, #176]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dac:	f7fe faca 	bl	8003344 <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004db4:	f7fe fac6 	bl	8003344 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e0f2      	b.n	8004fac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dc6:	4b23      	ldr	r3, [pc, #140]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0ef      	beq.n	8004db4 <HAL_RCC_OscConfig+0x418>
 8004dd4:	e01b      	b.n	8004e0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de6:	f7fe faad 	bl	8003344 <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dec:	e008      	b.n	8004e00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dee:	f7fe faa9 	bl	8003344 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e0d5      	b.n	8004fac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e00:	4b14      	ldr	r3, [pc, #80]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004e02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1ef      	bne.n	8004dee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 80c9 	beq.w	8004faa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e18:	4b0e      	ldr	r3, [pc, #56]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 030c 	and.w	r3, r3, #12
 8004e20:	2b0c      	cmp	r3, #12
 8004e22:	f000 8083 	beq.w	8004f2c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d15e      	bne.n	8004eec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e2e:	4b09      	ldr	r3, [pc, #36]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a08      	ldr	r2, [pc, #32]	@ (8004e54 <HAL_RCC_OscConfig+0x4b8>)
 8004e34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3a:	f7fe fa83 	bl	8003344 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e40:	e00c      	b.n	8004e5c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e42:	f7fe fa7f 	bl	8003344 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d905      	bls.n	8004e5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e0ab      	b.n	8004fac <HAL_RCC_OscConfig+0x610>
 8004e54:	40021000 	.word	0x40021000
 8004e58:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e5c:	4b55      	ldr	r3, [pc, #340]	@ (8004fb4 <HAL_RCC_OscConfig+0x618>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1ec      	bne.n	8004e42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e68:	4b52      	ldr	r3, [pc, #328]	@ (8004fb4 <HAL_RCC_OscConfig+0x618>)
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	4b52      	ldr	r3, [pc, #328]	@ (8004fb8 <HAL_RCC_OscConfig+0x61c>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6a11      	ldr	r1, [r2, #32]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e78:	3a01      	subs	r2, #1
 8004e7a:	0112      	lsls	r2, r2, #4
 8004e7c:	4311      	orrs	r1, r2
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004e82:	0212      	lsls	r2, r2, #8
 8004e84:	4311      	orrs	r1, r2
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e8a:	0852      	lsrs	r2, r2, #1
 8004e8c:	3a01      	subs	r2, #1
 8004e8e:	0552      	lsls	r2, r2, #21
 8004e90:	4311      	orrs	r1, r2
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e96:	0852      	lsrs	r2, r2, #1
 8004e98:	3a01      	subs	r2, #1
 8004e9a:	0652      	lsls	r2, r2, #25
 8004e9c:	4311      	orrs	r1, r2
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ea2:	06d2      	lsls	r2, r2, #27
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	4943      	ldr	r1, [pc, #268]	@ (8004fb4 <HAL_RCC_OscConfig+0x618>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eac:	4b41      	ldr	r3, [pc, #260]	@ (8004fb4 <HAL_RCC_OscConfig+0x618>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a40      	ldr	r2, [pc, #256]	@ (8004fb4 <HAL_RCC_OscConfig+0x618>)
 8004eb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eb6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8004fb4 <HAL_RCC_OscConfig+0x618>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	4a3d      	ldr	r2, [pc, #244]	@ (8004fb4 <HAL_RCC_OscConfig+0x618>)
 8004ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ec2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec4:	f7fe fa3e 	bl	8003344 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ecc:	f7fe fa3a 	bl	8003344 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e066      	b.n	8004fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ede:	4b35      	ldr	r3, [pc, #212]	@ (8004fb4 <HAL_RCC_OscConfig+0x618>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0f0      	beq.n	8004ecc <HAL_RCC_OscConfig+0x530>
 8004eea:	e05e      	b.n	8004faa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eec:	4b31      	ldr	r3, [pc, #196]	@ (8004fb4 <HAL_RCC_OscConfig+0x618>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a30      	ldr	r2, [pc, #192]	@ (8004fb4 <HAL_RCC_OscConfig+0x618>)
 8004ef2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef8:	f7fe fa24 	bl	8003344 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f00:	f7fe fa20 	bl	8003344 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e04c      	b.n	8004fac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f12:	4b28      	ldr	r3, [pc, #160]	@ (8004fb4 <HAL_RCC_OscConfig+0x618>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f0      	bne.n	8004f00 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f1e:	4b25      	ldr	r3, [pc, #148]	@ (8004fb4 <HAL_RCC_OscConfig+0x618>)
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	4924      	ldr	r1, [pc, #144]	@ (8004fb4 <HAL_RCC_OscConfig+0x618>)
 8004f24:	4b25      	ldr	r3, [pc, #148]	@ (8004fbc <HAL_RCC_OscConfig+0x620>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	60cb      	str	r3, [r1, #12]
 8004f2a:	e03e      	b.n	8004faa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e039      	b.n	8004fac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004f38:	4b1e      	ldr	r3, [pc, #120]	@ (8004fb4 <HAL_RCC_OscConfig+0x618>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f003 0203 	and.w	r2, r3, #3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d12c      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f56:	3b01      	subs	r3, #1
 8004f58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d123      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f68:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d11b      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f78:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d113      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f88:	085b      	lsrs	r3, r3, #1
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d109      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f9c:	085b      	lsrs	r3, r3, #1
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d001      	beq.n	8004faa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3720      	adds	r7, #32
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	019f800c 	.word	0x019f800c
 8004fbc:	feeefffc 	.word	0xfeeefffc

08004fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e11e      	b.n	8005216 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fd8:	4b91      	ldr	r3, [pc, #580]	@ (8005220 <HAL_RCC_ClockConfig+0x260>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 030f 	and.w	r3, r3, #15
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d910      	bls.n	8005008 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe6:	4b8e      	ldr	r3, [pc, #568]	@ (8005220 <HAL_RCC_ClockConfig+0x260>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f023 020f 	bic.w	r2, r3, #15
 8004fee:	498c      	ldr	r1, [pc, #560]	@ (8005220 <HAL_RCC_ClockConfig+0x260>)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff6:	4b8a      	ldr	r3, [pc, #552]	@ (8005220 <HAL_RCC_ClockConfig+0x260>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d001      	beq.n	8005008 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e106      	b.n	8005216 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d073      	beq.n	80050fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b03      	cmp	r3, #3
 800501a:	d129      	bne.n	8005070 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800501c:	4b81      	ldr	r3, [pc, #516]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e0f4      	b.n	8005216 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800502c:	f000 f9ce 	bl	80053cc <RCC_GetSysClockFreqFromPLLSource>
 8005030:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	4a7c      	ldr	r2, [pc, #496]	@ (8005228 <HAL_RCC_ClockConfig+0x268>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d93f      	bls.n	80050ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800503a:	4b7a      	ldr	r3, [pc, #488]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d009      	beq.n	800505a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800504e:	2b00      	cmp	r3, #0
 8005050:	d033      	beq.n	80050ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005056:	2b00      	cmp	r3, #0
 8005058:	d12f      	bne.n	80050ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800505a:	4b72      	ldr	r3, [pc, #456]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005062:	4a70      	ldr	r2, [pc, #448]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 8005064:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005068:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800506a:	2380      	movs	r3, #128	@ 0x80
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	e024      	b.n	80050ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	2b02      	cmp	r3, #2
 8005076:	d107      	bne.n	8005088 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005078:	4b6a      	ldr	r3, [pc, #424]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d109      	bne.n	8005098 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e0c6      	b.n	8005216 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005088:	4b66      	ldr	r3, [pc, #408]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e0be      	b.n	8005216 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005098:	f000 f8ce 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 800509c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	4a61      	ldr	r2, [pc, #388]	@ (8005228 <HAL_RCC_ClockConfig+0x268>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d909      	bls.n	80050ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050a6:	4b5f      	ldr	r3, [pc, #380]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050ae:	4a5d      	ldr	r2, [pc, #372]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 80050b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80050b6:	2380      	movs	r3, #128	@ 0x80
 80050b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050ba:	4b5a      	ldr	r3, [pc, #360]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f023 0203 	bic.w	r2, r3, #3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	4957      	ldr	r1, [pc, #348]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050cc:	f7fe f93a 	bl	8003344 <HAL_GetTick>
 80050d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050d2:	e00a      	b.n	80050ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050d4:	f7fe f936 	bl	8003344 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e095      	b.n	8005216 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ea:	4b4e      	ldr	r3, [pc, #312]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 020c 	and.w	r2, r3, #12
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d1eb      	bne.n	80050d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d023      	beq.n	8005150 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005114:	4b43      	ldr	r3, [pc, #268]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	4a42      	ldr	r2, [pc, #264]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 800511a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800511e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800512c:	4b3d      	ldr	r3, [pc, #244]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005134:	4a3b      	ldr	r2, [pc, #236]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 8005136:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800513a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800513c:	4b39      	ldr	r3, [pc, #228]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	4936      	ldr	r1, [pc, #216]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 800514a:	4313      	orrs	r3, r2
 800514c:	608b      	str	r3, [r1, #8]
 800514e:	e008      	b.n	8005162 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2b80      	cmp	r3, #128	@ 0x80
 8005154:	d105      	bne.n	8005162 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005156:	4b33      	ldr	r3, [pc, #204]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	4a32      	ldr	r2, [pc, #200]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 800515c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005160:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005162:	4b2f      	ldr	r3, [pc, #188]	@ (8005220 <HAL_RCC_ClockConfig+0x260>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d21d      	bcs.n	80051ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005170:	4b2b      	ldr	r3, [pc, #172]	@ (8005220 <HAL_RCC_ClockConfig+0x260>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f023 020f 	bic.w	r2, r3, #15
 8005178:	4929      	ldr	r1, [pc, #164]	@ (8005220 <HAL_RCC_ClockConfig+0x260>)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	4313      	orrs	r3, r2
 800517e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005180:	f7fe f8e0 	bl	8003344 <HAL_GetTick>
 8005184:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005186:	e00a      	b.n	800519e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005188:	f7fe f8dc 	bl	8003344 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005196:	4293      	cmp	r3, r2
 8005198:	d901      	bls.n	800519e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e03b      	b.n	8005216 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800519e:	4b20      	ldr	r3, [pc, #128]	@ (8005220 <HAL_RCC_ClockConfig+0x260>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 030f 	and.w	r3, r3, #15
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d1ed      	bne.n	8005188 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d008      	beq.n	80051ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	4917      	ldr	r1, [pc, #92]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d009      	beq.n	80051ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051d6:	4b13      	ldr	r3, [pc, #76]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	490f      	ldr	r1, [pc, #60]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051ea:	f000 f825 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 80051ee:	4602      	mov	r2, r0
 80051f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005224 <HAL_RCC_ClockConfig+0x264>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	490c      	ldr	r1, [pc, #48]	@ (800522c <HAL_RCC_ClockConfig+0x26c>)
 80051fc:	5ccb      	ldrb	r3, [r1, r3]
 80051fe:	f003 031f 	and.w	r3, r3, #31
 8005202:	fa22 f303 	lsr.w	r3, r2, r3
 8005206:	4a0a      	ldr	r2, [pc, #40]	@ (8005230 <HAL_RCC_ClockConfig+0x270>)
 8005208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800520a:	4b0a      	ldr	r3, [pc, #40]	@ (8005234 <HAL_RCC_ClockConfig+0x274>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f7fd fa4a 	bl	80026a8 <HAL_InitTick>
 8005214:	4603      	mov	r3, r0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	40022000 	.word	0x40022000
 8005224:	40021000 	.word	0x40021000
 8005228:	04c4b400 	.word	0x04c4b400
 800522c:	0800f65c 	.word	0x0800f65c
 8005230:	20000000 	.word	0x20000000
 8005234:	20000004 	.word	0x20000004

08005238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800523e:	4b2c      	ldr	r3, [pc, #176]	@ (80052f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 030c 	and.w	r3, r3, #12
 8005246:	2b04      	cmp	r3, #4
 8005248:	d102      	bne.n	8005250 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800524a:	4b2a      	ldr	r3, [pc, #168]	@ (80052f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800524c:	613b      	str	r3, [r7, #16]
 800524e:	e047      	b.n	80052e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005250:	4b27      	ldr	r3, [pc, #156]	@ (80052f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 030c 	and.w	r3, r3, #12
 8005258:	2b08      	cmp	r3, #8
 800525a:	d102      	bne.n	8005262 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800525c:	4b25      	ldr	r3, [pc, #148]	@ (80052f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800525e:	613b      	str	r3, [r7, #16]
 8005260:	e03e      	b.n	80052e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005262:	4b23      	ldr	r3, [pc, #140]	@ (80052f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 030c 	and.w	r3, r3, #12
 800526a:	2b0c      	cmp	r3, #12
 800526c:	d136      	bne.n	80052dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800526e:	4b20      	ldr	r3, [pc, #128]	@ (80052f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005278:	4b1d      	ldr	r3, [pc, #116]	@ (80052f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	091b      	lsrs	r3, r3, #4
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	3301      	adds	r3, #1
 8005284:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b03      	cmp	r3, #3
 800528a:	d10c      	bne.n	80052a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800528c:	4a19      	ldr	r2, [pc, #100]	@ (80052f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	fbb2 f3f3 	udiv	r3, r2, r3
 8005294:	4a16      	ldr	r2, [pc, #88]	@ (80052f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005296:	68d2      	ldr	r2, [r2, #12]
 8005298:	0a12      	lsrs	r2, r2, #8
 800529a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800529e:	fb02 f303 	mul.w	r3, r2, r3
 80052a2:	617b      	str	r3, [r7, #20]
      break;
 80052a4:	e00c      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052a6:	4a13      	ldr	r2, [pc, #76]	@ (80052f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ae:	4a10      	ldr	r2, [pc, #64]	@ (80052f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052b0:	68d2      	ldr	r2, [r2, #12]
 80052b2:	0a12      	lsrs	r2, r2, #8
 80052b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052b8:	fb02 f303 	mul.w	r3, r2, r3
 80052bc:	617b      	str	r3, [r7, #20]
      break;
 80052be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052c0:	4b0b      	ldr	r3, [pc, #44]	@ (80052f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	0e5b      	lsrs	r3, r3, #25
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	3301      	adds	r3, #1
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d8:	613b      	str	r3, [r7, #16]
 80052da:	e001      	b.n	80052e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80052e0:	693b      	ldr	r3, [r7, #16]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	40021000 	.word	0x40021000
 80052f4:	00f42400 	.word	0x00f42400

080052f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052fc:	4b03      	ldr	r3, [pc, #12]	@ (800530c <HAL_RCC_GetHCLKFreq+0x14>)
 80052fe:	681b      	ldr	r3, [r3, #0]
}
 8005300:	4618      	mov	r0, r3
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	20000000 	.word	0x20000000

08005310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005314:	f7ff fff0 	bl	80052f8 <HAL_RCC_GetHCLKFreq>
 8005318:	4602      	mov	r2, r0
 800531a:	4b06      	ldr	r3, [pc, #24]	@ (8005334 <HAL_RCC_GetPCLK1Freq+0x24>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	0a1b      	lsrs	r3, r3, #8
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	4904      	ldr	r1, [pc, #16]	@ (8005338 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005326:	5ccb      	ldrb	r3, [r1, r3]
 8005328:	f003 031f 	and.w	r3, r3, #31
 800532c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005330:	4618      	mov	r0, r3
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40021000 	.word	0x40021000
 8005338:	0800f66c 	.word	0x0800f66c

0800533c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005340:	f7ff ffda 	bl	80052f8 <HAL_RCC_GetHCLKFreq>
 8005344:	4602      	mov	r2, r0
 8005346:	4b06      	ldr	r3, [pc, #24]	@ (8005360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	0adb      	lsrs	r3, r3, #11
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	4904      	ldr	r1, [pc, #16]	@ (8005364 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005352:	5ccb      	ldrb	r3, [r1, r3]
 8005354:	f003 031f 	and.w	r3, r3, #31
 8005358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800535c:	4618      	mov	r0, r3
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40021000 	.word	0x40021000
 8005364:	0800f66c 	.word	0x0800f66c

08005368 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	220f      	movs	r2, #15
 8005376:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005378:	4b12      	ldr	r3, [pc, #72]	@ (80053c4 <HAL_RCC_GetClockConfig+0x5c>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f003 0203 	and.w	r2, r3, #3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005384:	4b0f      	ldr	r3, [pc, #60]	@ (80053c4 <HAL_RCC_GetClockConfig+0x5c>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005390:	4b0c      	ldr	r3, [pc, #48]	@ (80053c4 <HAL_RCC_GetClockConfig+0x5c>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800539c:	4b09      	ldr	r3, [pc, #36]	@ (80053c4 <HAL_RCC_GetClockConfig+0x5c>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	08db      	lsrs	r3, r3, #3
 80053a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80053aa:	4b07      	ldr	r3, [pc, #28]	@ (80053c8 <HAL_RCC_GetClockConfig+0x60>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 020f 	and.w	r2, r3, #15
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	601a      	str	r2, [r3, #0]
}
 80053b6:	bf00      	nop
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40021000 	.word	0x40021000
 80053c8:	40022000 	.word	0x40022000

080053cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053d2:	4b1e      	ldr	r3, [pc, #120]	@ (800544c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f003 0303 	and.w	r3, r3, #3
 80053da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053dc:	4b1b      	ldr	r3, [pc, #108]	@ (800544c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	091b      	lsrs	r3, r3, #4
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	3301      	adds	r3, #1
 80053e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	2b03      	cmp	r3, #3
 80053ee:	d10c      	bne.n	800540a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053f0:	4a17      	ldr	r2, [pc, #92]	@ (8005450 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f8:	4a14      	ldr	r2, [pc, #80]	@ (800544c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053fa:	68d2      	ldr	r2, [r2, #12]
 80053fc:	0a12      	lsrs	r2, r2, #8
 80053fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005402:	fb02 f303 	mul.w	r3, r2, r3
 8005406:	617b      	str	r3, [r7, #20]
    break;
 8005408:	e00c      	b.n	8005424 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800540a:	4a11      	ldr	r2, [pc, #68]	@ (8005450 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005412:	4a0e      	ldr	r2, [pc, #56]	@ (800544c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005414:	68d2      	ldr	r2, [r2, #12]
 8005416:	0a12      	lsrs	r2, r2, #8
 8005418:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800541c:	fb02 f303 	mul.w	r3, r2, r3
 8005420:	617b      	str	r3, [r7, #20]
    break;
 8005422:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005424:	4b09      	ldr	r3, [pc, #36]	@ (800544c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	0e5b      	lsrs	r3, r3, #25
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	3301      	adds	r3, #1
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	fbb2 f3f3 	udiv	r3, r2, r3
 800543c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800543e:	687b      	ldr	r3, [r7, #4]
}
 8005440:	4618      	mov	r0, r3
 8005442:	371c      	adds	r7, #28
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	40021000 	.word	0x40021000
 8005450:	00f42400 	.word	0x00f42400

08005454 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800545c:	2300      	movs	r3, #0
 800545e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005460:	2300      	movs	r3, #0
 8005462:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 8098 	beq.w	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005472:	2300      	movs	r3, #0
 8005474:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005476:	4b43      	ldr	r3, [pc, #268]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10d      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005482:	4b40      	ldr	r3, [pc, #256]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005486:	4a3f      	ldr	r2, [pc, #252]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800548c:	6593      	str	r3, [r2, #88]	@ 0x58
 800548e:	4b3d      	ldr	r3, [pc, #244]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005496:	60bb      	str	r3, [r7, #8]
 8005498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800549a:	2301      	movs	r3, #1
 800549c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800549e:	4b3a      	ldr	r3, [pc, #232]	@ (8005588 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a39      	ldr	r2, [pc, #228]	@ (8005588 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054aa:	f7fd ff4b 	bl	8003344 <HAL_GetTick>
 80054ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054b0:	e009      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b2:	f7fd ff47 	bl	8003344 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d902      	bls.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	74fb      	strb	r3, [r7, #19]
        break;
 80054c4:	e005      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054c6:	4b30      	ldr	r3, [pc, #192]	@ (8005588 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0ef      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80054d2:	7cfb      	ldrb	r3, [r7, #19]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d159      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054d8:	4b2a      	ldr	r3, [pc, #168]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d01e      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d019      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054f4:	4b23      	ldr	r3, [pc, #140]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005500:	4b20      	ldr	r3, [pc, #128]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005506:	4a1f      	ldr	r2, [pc, #124]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800550c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005510:	4b1c      	ldr	r3, [pc, #112]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005516:	4a1b      	ldr	r2, [pc, #108]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005518:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800551c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005520:	4a18      	ldr	r2, [pc, #96]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d016      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005532:	f7fd ff07 	bl	8003344 <HAL_GetTick>
 8005536:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005538:	e00b      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800553a:	f7fd ff03 	bl	8003344 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005548:	4293      	cmp	r3, r2
 800554a:	d902      	bls.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	74fb      	strb	r3, [r7, #19]
            break;
 8005550:	e006      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005552:	4b0c      	ldr	r3, [pc, #48]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d0ec      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005560:	7cfb      	ldrb	r3, [r7, #19]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10b      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005566:	4b07      	ldr	r3, [pc, #28]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800556c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005574:	4903      	ldr	r1, [pc, #12]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800557c:	e008      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800557e:	7cfb      	ldrb	r3, [r7, #19]
 8005580:	74bb      	strb	r3, [r7, #18]
 8005582:	e005      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005584:	40021000 	.word	0x40021000
 8005588:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558c:	7cfb      	ldrb	r3, [r7, #19]
 800558e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005590:	7c7b      	ldrb	r3, [r7, #17]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d105      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005596:	4ba6      	ldr	r3, [pc, #664]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800559a:	4aa5      	ldr	r2, [pc, #660]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800559c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055ae:	4ba0      	ldr	r3, [pc, #640]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b4:	f023 0203 	bic.w	r2, r3, #3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	499c      	ldr	r1, [pc, #624]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055d0:	4b97      	ldr	r3, [pc, #604]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d6:	f023 020c 	bic.w	r2, r3, #12
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	4994      	ldr	r1, [pc, #592]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055f2:	4b8f      	ldr	r3, [pc, #572]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	498b      	ldr	r1, [pc, #556]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005602:	4313      	orrs	r3, r2
 8005604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005614:	4b86      	ldr	r3, [pc, #536]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800561a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	4983      	ldr	r1, [pc, #524]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005624:	4313      	orrs	r3, r2
 8005626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005636:	4b7e      	ldr	r3, [pc, #504]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	497a      	ldr	r1, [pc, #488]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005646:	4313      	orrs	r3, r2
 8005648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00a      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005658:	4b75      	ldr	r3, [pc, #468]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800565e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	4972      	ldr	r1, [pc, #456]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800567a:	4b6d      	ldr	r3, [pc, #436]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800567c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005680:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	4969      	ldr	r1, [pc, #420]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00a      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800569c:	4b64      	ldr	r3, [pc, #400]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800569e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	4961      	ldr	r1, [pc, #388]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056be:	4b5c      	ldr	r3, [pc, #368]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056cc:	4958      	ldr	r1, [pc, #352]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d015      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056e0:	4b53      	ldr	r3, [pc, #332]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ee:	4950      	ldr	r1, [pc, #320]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056fe:	d105      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005700:	4b4b      	ldr	r3, [pc, #300]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	4a4a      	ldr	r2, [pc, #296]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005706:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800570a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005714:	2b00      	cmp	r3, #0
 8005716:	d015      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005718:	4b45      	ldr	r3, [pc, #276]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800571a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800571e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005726:	4942      	ldr	r1, [pc, #264]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005728:	4313      	orrs	r3, r2
 800572a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005732:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005736:	d105      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005738:	4b3d      	ldr	r3, [pc, #244]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	4a3c      	ldr	r2, [pc, #240]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800573e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005742:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d015      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005750:	4b37      	ldr	r3, [pc, #220]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005756:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575e:	4934      	ldr	r1, [pc, #208]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005760:	4313      	orrs	r3, r2
 8005762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800576e:	d105      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005770:	4b2f      	ldr	r3, [pc, #188]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	4a2e      	ldr	r2, [pc, #184]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005776:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800577a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d015      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005788:	4b29      	ldr	r3, [pc, #164]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800578a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005796:	4926      	ldr	r1, [pc, #152]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005798:	4313      	orrs	r3, r2
 800579a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057a6:	d105      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057a8:	4b21      	ldr	r3, [pc, #132]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	4a20      	ldr	r2, [pc, #128]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d015      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ce:	4918      	ldr	r1, [pc, #96]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057de:	d105      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057e0:	4b13      	ldr	r3, [pc, #76]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	4a12      	ldr	r2, [pc, #72]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d015      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005806:	490a      	ldr	r1, [pc, #40]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005808:	4313      	orrs	r3, r2
 800580a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005812:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005816:	d105      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005818:	4b05      	ldr	r3, [pc, #20]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	4a04      	ldr	r2, [pc, #16]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800581e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005822:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005824:	7cbb      	ldrb	r3, [r7, #18]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	40021000 	.word	0x40021000

08005834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e049      	b.n	80058da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fd faa0 	bl	8002da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3304      	adds	r3, #4
 8005870:	4619      	mov	r1, r3
 8005872:	4610      	mov	r0, r2
 8005874:	f000 fec4 	bl	8006600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d001      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e04a      	b.n	8005992 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a21      	ldr	r2, [pc, #132]	@ (80059a0 <HAL_TIM_Base_Start_IT+0xbc>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d018      	beq.n	8005950 <HAL_TIM_Base_Start_IT+0x6c>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005926:	d013      	beq.n	8005950 <HAL_TIM_Base_Start_IT+0x6c>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a1d      	ldr	r2, [pc, #116]	@ (80059a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00e      	beq.n	8005950 <HAL_TIM_Base_Start_IT+0x6c>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1c      	ldr	r2, [pc, #112]	@ (80059a8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d009      	beq.n	8005950 <HAL_TIM_Base_Start_IT+0x6c>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a1a      	ldr	r2, [pc, #104]	@ (80059ac <HAL_TIM_Base_Start_IT+0xc8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d004      	beq.n	8005950 <HAL_TIM_Base_Start_IT+0x6c>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a19      	ldr	r2, [pc, #100]	@ (80059b0 <HAL_TIM_Base_Start_IT+0xcc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d115      	bne.n	800597c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	4b17      	ldr	r3, [pc, #92]	@ (80059b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005958:	4013      	ands	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b06      	cmp	r3, #6
 8005960:	d015      	beq.n	800598e <HAL_TIM_Base_Start_IT+0xaa>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005968:	d011      	beq.n	800598e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f042 0201 	orr.w	r2, r2, #1
 8005978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597a:	e008      	b.n	800598e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0201 	orr.w	r2, r2, #1
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	e000      	b.n	8005990 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800598e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40012c00 	.word	0x40012c00
 80059a4:	40000400 	.word	0x40000400
 80059a8:	40000800 	.word	0x40000800
 80059ac:	40013400 	.word	0x40013400
 80059b0:	40014000 	.word	0x40014000
 80059b4:	00010007 	.word	0x00010007

080059b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e049      	b.n	8005a5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f841 	bl	8005a66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3304      	adds	r3, #4
 80059f4:	4619      	mov	r1, r3
 80059f6:	4610      	mov	r0, r2
 80059f8:	f000 fe02 	bl	8006600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a6e:	bf00      	nop
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
	...

08005a7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d109      	bne.n	8005aa0 <HAL_TIM_PWM_Start+0x24>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	bf14      	ite	ne
 8005a98:	2301      	movne	r3, #1
 8005a9a:	2300      	moveq	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	e03c      	b.n	8005b1a <HAL_TIM_PWM_Start+0x9e>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d109      	bne.n	8005aba <HAL_TIM_PWM_Start+0x3e>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	bf14      	ite	ne
 8005ab2:	2301      	movne	r3, #1
 8005ab4:	2300      	moveq	r3, #0
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	e02f      	b.n	8005b1a <HAL_TIM_PWM_Start+0x9e>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d109      	bne.n	8005ad4 <HAL_TIM_PWM_Start+0x58>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	bf14      	ite	ne
 8005acc:	2301      	movne	r3, #1
 8005ace:	2300      	moveq	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	e022      	b.n	8005b1a <HAL_TIM_PWM_Start+0x9e>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b0c      	cmp	r3, #12
 8005ad8:	d109      	bne.n	8005aee <HAL_TIM_PWM_Start+0x72>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	bf14      	ite	ne
 8005ae6:	2301      	movne	r3, #1
 8005ae8:	2300      	moveq	r3, #0
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	e015      	b.n	8005b1a <HAL_TIM_PWM_Start+0x9e>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b10      	cmp	r3, #16
 8005af2:	d109      	bne.n	8005b08 <HAL_TIM_PWM_Start+0x8c>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	bf14      	ite	ne
 8005b00:	2301      	movne	r3, #1
 8005b02:	2300      	moveq	r3, #0
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	e008      	b.n	8005b1a <HAL_TIM_PWM_Start+0x9e>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	bf14      	ite	ne
 8005b14:	2301      	movne	r3, #1
 8005b16:	2300      	moveq	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e097      	b.n	8005c52 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d104      	bne.n	8005b32 <HAL_TIM_PWM_Start+0xb6>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b30:	e023      	b.n	8005b7a <HAL_TIM_PWM_Start+0xfe>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d104      	bne.n	8005b42 <HAL_TIM_PWM_Start+0xc6>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b40:	e01b      	b.n	8005b7a <HAL_TIM_PWM_Start+0xfe>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d104      	bne.n	8005b52 <HAL_TIM_PWM_Start+0xd6>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b50:	e013      	b.n	8005b7a <HAL_TIM_PWM_Start+0xfe>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b0c      	cmp	r3, #12
 8005b56:	d104      	bne.n	8005b62 <HAL_TIM_PWM_Start+0xe6>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b60:	e00b      	b.n	8005b7a <HAL_TIM_PWM_Start+0xfe>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b10      	cmp	r3, #16
 8005b66:	d104      	bne.n	8005b72 <HAL_TIM_PWM_Start+0xf6>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b70:	e003      	b.n	8005b7a <HAL_TIM_PWM_Start+0xfe>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2202      	movs	r2, #2
 8005b76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	6839      	ldr	r1, [r7, #0]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f001 f96a 	bl	8006e5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a33      	ldr	r2, [pc, #204]	@ (8005c5c <HAL_TIM_PWM_Start+0x1e0>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d013      	beq.n	8005bba <HAL_TIM_PWM_Start+0x13e>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a32      	ldr	r2, [pc, #200]	@ (8005c60 <HAL_TIM_PWM_Start+0x1e4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00e      	beq.n	8005bba <HAL_TIM_PWM_Start+0x13e>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a30      	ldr	r2, [pc, #192]	@ (8005c64 <HAL_TIM_PWM_Start+0x1e8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d009      	beq.n	8005bba <HAL_TIM_PWM_Start+0x13e>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a2f      	ldr	r2, [pc, #188]	@ (8005c68 <HAL_TIM_PWM_Start+0x1ec>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d004      	beq.n	8005bba <HAL_TIM_PWM_Start+0x13e>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a2d      	ldr	r2, [pc, #180]	@ (8005c6c <HAL_TIM_PWM_Start+0x1f0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d101      	bne.n	8005bbe <HAL_TIM_PWM_Start+0x142>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <HAL_TIM_PWM_Start+0x144>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d007      	beq.n	8005bd4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bd2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a20      	ldr	r2, [pc, #128]	@ (8005c5c <HAL_TIM_PWM_Start+0x1e0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d018      	beq.n	8005c10 <HAL_TIM_PWM_Start+0x194>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005be6:	d013      	beq.n	8005c10 <HAL_TIM_PWM_Start+0x194>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a20      	ldr	r2, [pc, #128]	@ (8005c70 <HAL_TIM_PWM_Start+0x1f4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d00e      	beq.n	8005c10 <HAL_TIM_PWM_Start+0x194>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8005c74 <HAL_TIM_PWM_Start+0x1f8>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d009      	beq.n	8005c10 <HAL_TIM_PWM_Start+0x194>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a17      	ldr	r2, [pc, #92]	@ (8005c60 <HAL_TIM_PWM_Start+0x1e4>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d004      	beq.n	8005c10 <HAL_TIM_PWM_Start+0x194>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a16      	ldr	r2, [pc, #88]	@ (8005c64 <HAL_TIM_PWM_Start+0x1e8>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d115      	bne.n	8005c3c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	4b18      	ldr	r3, [pc, #96]	@ (8005c78 <HAL_TIM_PWM_Start+0x1fc>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2b06      	cmp	r3, #6
 8005c20:	d015      	beq.n	8005c4e <HAL_TIM_PWM_Start+0x1d2>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c28:	d011      	beq.n	8005c4e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 0201 	orr.w	r2, r2, #1
 8005c38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c3a:	e008      	b.n	8005c4e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0201 	orr.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	e000      	b.n	8005c50 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	40012c00 	.word	0x40012c00
 8005c60:	40013400 	.word	0x40013400
 8005c64:	40014000 	.word	0x40014000
 8005c68:	40014400 	.word	0x40014400
 8005c6c:	40014800 	.word	0x40014800
 8005c70:	40000400 	.word	0x40000400
 8005c74:	40000800 	.word	0x40000800
 8005c78:	00010007 	.word	0x00010007

08005c7c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	6839      	ldr	r1, [r7, #0]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f001 f8e4 	bl	8006e5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a3e      	ldr	r2, [pc, #248]	@ (8005d94 <HAL_TIM_PWM_Stop+0x118>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d013      	beq.n	8005cc6 <HAL_TIM_PWM_Stop+0x4a>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a3d      	ldr	r2, [pc, #244]	@ (8005d98 <HAL_TIM_PWM_Stop+0x11c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00e      	beq.n	8005cc6 <HAL_TIM_PWM_Stop+0x4a>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a3b      	ldr	r2, [pc, #236]	@ (8005d9c <HAL_TIM_PWM_Stop+0x120>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d009      	beq.n	8005cc6 <HAL_TIM_PWM_Stop+0x4a>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a3a      	ldr	r2, [pc, #232]	@ (8005da0 <HAL_TIM_PWM_Stop+0x124>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d004      	beq.n	8005cc6 <HAL_TIM_PWM_Stop+0x4a>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a38      	ldr	r2, [pc, #224]	@ (8005da4 <HAL_TIM_PWM_Stop+0x128>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d101      	bne.n	8005cca <HAL_TIM_PWM_Stop+0x4e>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e000      	b.n	8005ccc <HAL_TIM_PWM_Stop+0x50>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d017      	beq.n	8005d00 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6a1a      	ldr	r2, [r3, #32]
 8005cd6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005cda:	4013      	ands	r3, r2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10f      	bne.n	8005d00 <HAL_TIM_PWM_Stop+0x84>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6a1a      	ldr	r2, [r3, #32]
 8005ce6:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d107      	bne.n	8005d00 <HAL_TIM_PWM_Stop+0x84>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005cfe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6a1a      	ldr	r2, [r3, #32]
 8005d06:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10f      	bne.n	8005d30 <HAL_TIM_PWM_Stop+0xb4>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6a1a      	ldr	r2, [r3, #32]
 8005d16:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d107      	bne.n	8005d30 <HAL_TIM_PWM_Stop+0xb4>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 0201 	bic.w	r2, r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d104      	bne.n	8005d40 <HAL_TIM_PWM_Stop+0xc4>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d3e:	e023      	b.n	8005d88 <HAL_TIM_PWM_Stop+0x10c>
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d104      	bne.n	8005d50 <HAL_TIM_PWM_Stop+0xd4>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d4e:	e01b      	b.n	8005d88 <HAL_TIM_PWM_Stop+0x10c>
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	2b08      	cmp	r3, #8
 8005d54:	d104      	bne.n	8005d60 <HAL_TIM_PWM_Stop+0xe4>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d5e:	e013      	b.n	8005d88 <HAL_TIM_PWM_Stop+0x10c>
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2b0c      	cmp	r3, #12
 8005d64:	d104      	bne.n	8005d70 <HAL_TIM_PWM_Stop+0xf4>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d6e:	e00b      	b.n	8005d88 <HAL_TIM_PWM_Stop+0x10c>
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2b10      	cmp	r3, #16
 8005d74:	d104      	bne.n	8005d80 <HAL_TIM_PWM_Stop+0x104>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d7e:	e003      	b.n	8005d88 <HAL_TIM_PWM_Stop+0x10c>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	40012c00 	.word	0x40012c00
 8005d98:	40013400 	.word	0x40013400
 8005d9c:	40014000 	.word	0x40014000
 8005da0:	40014400 	.word	0x40014400
 8005da4:	40014800 	.word	0x40014800

08005da8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e097      	b.n	8005eec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d106      	bne.n	8005dd6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7fd f819 	bl	8002e08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	6812      	ldr	r2, [r2, #0]
 8005de8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005dec:	f023 0307 	bic.w	r3, r3, #7
 8005df0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	3304      	adds	r3, #4
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	f000 fbff 	bl	8006600 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e2a:	f023 0303 	bic.w	r3, r3, #3
 8005e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	021b      	lsls	r3, r3, #8
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005e48:	f023 030c 	bic.w	r3, r3, #12
 8005e4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	021b      	lsls	r3, r3, #8
 8005e64:	4313      	orrs	r3, r2
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	011a      	lsls	r2, r3, #4
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	031b      	lsls	r3, r3, #12
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005e86:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005e8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d020      	beq.n	8005f58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f003 0302 	and.w	r3, r3, #2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d01b      	beq.n	8005f58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0202 	mvn.w	r2, #2
 8005f28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fb40 	bl	80065c4 <HAL_TIM_IC_CaptureCallback>
 8005f44:	e005      	b.n	8005f52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fb32 	bl	80065b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fb43 	bl	80065d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f003 0304 	and.w	r3, r3, #4
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d020      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01b      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0204 	mvn.w	r2, #4
 8005f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2202      	movs	r2, #2
 8005f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fb1a 	bl	80065c4 <HAL_TIM_IC_CaptureCallback>
 8005f90:	e005      	b.n	8005f9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fb0c 	bl	80065b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fb1d 	bl	80065d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f003 0308 	and.w	r3, r3, #8
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d020      	beq.n	8005ff0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f003 0308 	and.w	r3, r3, #8
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01b      	beq.n	8005ff0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0208 	mvn.w	r2, #8
 8005fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2204      	movs	r2, #4
 8005fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 faf4 	bl	80065c4 <HAL_TIM_IC_CaptureCallback>
 8005fdc:	e005      	b.n	8005fea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fae6 	bl	80065b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 faf7 	bl	80065d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f003 0310 	and.w	r3, r3, #16
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d020      	beq.n	800603c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f003 0310 	and.w	r3, r3, #16
 8006000:	2b00      	cmp	r3, #0
 8006002:	d01b      	beq.n	800603c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0210 	mvn.w	r2, #16
 800600c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2208      	movs	r2, #8
 8006012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 face 	bl	80065c4 <HAL_TIM_IC_CaptureCallback>
 8006028:	e005      	b.n	8006036 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fac0 	bl	80065b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fad1 	bl	80065d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00c      	beq.n	8006060 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	d007      	beq.n	8006060 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f06f 0201 	mvn.w	r2, #1
 8006058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fc fada 	bl	8002614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006066:	2b00      	cmp	r3, #0
 8006068:	d104      	bne.n	8006074 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00c      	beq.n	800608e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800607a:	2b00      	cmp	r3, #0
 800607c:	d007      	beq.n	800608e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f001 f937 	bl	80072fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00c      	beq.n	80060b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d007      	beq.n	80060b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80060aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f001 f92f 	bl	8007310 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00c      	beq.n	80060d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d007      	beq.n	80060d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 fa8b 	bl	80065ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f003 0320 	and.w	r3, r3, #32
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00c      	beq.n	80060fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f003 0320 	and.w	r3, r3, #32
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d007      	beq.n	80060fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f06f 0220 	mvn.w	r2, #32
 80060f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f001 f8f7 	bl	80072e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00c      	beq.n	800611e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d007      	beq.n	800611e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f001 f903 	bl	8007324 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00c      	beq.n	8006142 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d007      	beq.n	8006142 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800613a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f001 f8fb 	bl	8007338 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00c      	beq.n	8006166 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d007      	beq.n	8006166 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800615e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f001 f8f3 	bl	800734c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00c      	beq.n	800618a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d007      	beq.n	800618a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f001 f8eb 	bl	8007360 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800618a:	bf00      	nop
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
	...

08006194 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d101      	bne.n	80061b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061ae:	2302      	movs	r3, #2
 80061b0:	e0ff      	b.n	80063b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b14      	cmp	r3, #20
 80061be:	f200 80f0 	bhi.w	80063a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80061c2:	a201      	add	r2, pc, #4	@ (adr r2, 80061c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c8:	0800621d 	.word	0x0800621d
 80061cc:	080063a3 	.word	0x080063a3
 80061d0:	080063a3 	.word	0x080063a3
 80061d4:	080063a3 	.word	0x080063a3
 80061d8:	0800625d 	.word	0x0800625d
 80061dc:	080063a3 	.word	0x080063a3
 80061e0:	080063a3 	.word	0x080063a3
 80061e4:	080063a3 	.word	0x080063a3
 80061e8:	0800629f 	.word	0x0800629f
 80061ec:	080063a3 	.word	0x080063a3
 80061f0:	080063a3 	.word	0x080063a3
 80061f4:	080063a3 	.word	0x080063a3
 80061f8:	080062df 	.word	0x080062df
 80061fc:	080063a3 	.word	0x080063a3
 8006200:	080063a3 	.word	0x080063a3
 8006204:	080063a3 	.word	0x080063a3
 8006208:	08006321 	.word	0x08006321
 800620c:	080063a3 	.word	0x080063a3
 8006210:	080063a3 	.word	0x080063a3
 8006214:	080063a3 	.word	0x080063a3
 8006218:	08006361 	.word	0x08006361
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68b9      	ldr	r1, [r7, #8]
 8006222:	4618      	mov	r0, r3
 8006224:	f000 fa88 	bl	8006738 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699a      	ldr	r2, [r3, #24]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0208 	orr.w	r2, r2, #8
 8006236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699a      	ldr	r2, [r3, #24]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 0204 	bic.w	r2, r2, #4
 8006246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6999      	ldr	r1, [r3, #24]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	691a      	ldr	r2, [r3, #16]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	619a      	str	r2, [r3, #24]
      break;
 800625a:	e0a5      	b.n	80063a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68b9      	ldr	r1, [r7, #8]
 8006262:	4618      	mov	r0, r3
 8006264:	f000 faf8 	bl	8006858 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	699a      	ldr	r2, [r3, #24]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006276:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699a      	ldr	r2, [r3, #24]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006286:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6999      	ldr	r1, [r3, #24]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	021a      	lsls	r2, r3, #8
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	619a      	str	r2, [r3, #24]
      break;
 800629c:	e084      	b.n	80063a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68b9      	ldr	r1, [r7, #8]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 fb61 	bl	800696c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69da      	ldr	r2, [r3, #28]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f042 0208 	orr.w	r2, r2, #8
 80062b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	69da      	ldr	r2, [r3, #28]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0204 	bic.w	r2, r2, #4
 80062c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69d9      	ldr	r1, [r3, #28]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	691a      	ldr	r2, [r3, #16]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	430a      	orrs	r2, r1
 80062da:	61da      	str	r2, [r3, #28]
      break;
 80062dc:	e064      	b.n	80063a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68b9      	ldr	r1, [r7, #8]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 fbc9 	bl	8006a7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	69da      	ldr	r2, [r3, #28]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	69da      	ldr	r2, [r3, #28]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006308:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	69d9      	ldr	r1, [r3, #28]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	021a      	lsls	r2, r3, #8
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	61da      	str	r2, [r3, #28]
      break;
 800631e:	e043      	b.n	80063a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68b9      	ldr	r1, [r7, #8]
 8006326:	4618      	mov	r0, r3
 8006328:	f000 fc32 	bl	8006b90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0208 	orr.w	r2, r2, #8
 800633a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0204 	bic.w	r2, r2, #4
 800634a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	691a      	ldr	r2, [r3, #16]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800635e:	e023      	b.n	80063a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68b9      	ldr	r1, [r7, #8]
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fc76 	bl	8006c58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800637a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800638a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	021a      	lsls	r2, r3, #8
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80063a0:	e002      	b.n	80063a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	75fb      	strb	r3, [r7, #23]
      break;
 80063a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop

080063bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d101      	bne.n	80063d8 <HAL_TIM_ConfigClockSource+0x1c>
 80063d4:	2302      	movs	r3, #2
 80063d6:	e0de      	b.n	8006596 <HAL_TIM_ConfigClockSource+0x1da>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80063f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80063fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006402:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a63      	ldr	r2, [pc, #396]	@ (80065a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006412:	4293      	cmp	r3, r2
 8006414:	f000 80a9 	beq.w	800656a <HAL_TIM_ConfigClockSource+0x1ae>
 8006418:	4a61      	ldr	r2, [pc, #388]	@ (80065a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800641a:	4293      	cmp	r3, r2
 800641c:	f200 80ae 	bhi.w	800657c <HAL_TIM_ConfigClockSource+0x1c0>
 8006420:	4a60      	ldr	r2, [pc, #384]	@ (80065a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006422:	4293      	cmp	r3, r2
 8006424:	f000 80a1 	beq.w	800656a <HAL_TIM_ConfigClockSource+0x1ae>
 8006428:	4a5e      	ldr	r2, [pc, #376]	@ (80065a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	f200 80a6 	bhi.w	800657c <HAL_TIM_ConfigClockSource+0x1c0>
 8006430:	4a5d      	ldr	r2, [pc, #372]	@ (80065a8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006432:	4293      	cmp	r3, r2
 8006434:	f000 8099 	beq.w	800656a <HAL_TIM_ConfigClockSource+0x1ae>
 8006438:	4a5b      	ldr	r2, [pc, #364]	@ (80065a8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800643a:	4293      	cmp	r3, r2
 800643c:	f200 809e 	bhi.w	800657c <HAL_TIM_ConfigClockSource+0x1c0>
 8006440:	4a5a      	ldr	r2, [pc, #360]	@ (80065ac <HAL_TIM_ConfigClockSource+0x1f0>)
 8006442:	4293      	cmp	r3, r2
 8006444:	f000 8091 	beq.w	800656a <HAL_TIM_ConfigClockSource+0x1ae>
 8006448:	4a58      	ldr	r2, [pc, #352]	@ (80065ac <HAL_TIM_ConfigClockSource+0x1f0>)
 800644a:	4293      	cmp	r3, r2
 800644c:	f200 8096 	bhi.w	800657c <HAL_TIM_ConfigClockSource+0x1c0>
 8006450:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006454:	f000 8089 	beq.w	800656a <HAL_TIM_ConfigClockSource+0x1ae>
 8006458:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800645c:	f200 808e 	bhi.w	800657c <HAL_TIM_ConfigClockSource+0x1c0>
 8006460:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006464:	d03e      	beq.n	80064e4 <HAL_TIM_ConfigClockSource+0x128>
 8006466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800646a:	f200 8087 	bhi.w	800657c <HAL_TIM_ConfigClockSource+0x1c0>
 800646e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006472:	f000 8086 	beq.w	8006582 <HAL_TIM_ConfigClockSource+0x1c6>
 8006476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800647a:	d87f      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x1c0>
 800647c:	2b70      	cmp	r3, #112	@ 0x70
 800647e:	d01a      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0xfa>
 8006480:	2b70      	cmp	r3, #112	@ 0x70
 8006482:	d87b      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x1c0>
 8006484:	2b60      	cmp	r3, #96	@ 0x60
 8006486:	d050      	beq.n	800652a <HAL_TIM_ConfigClockSource+0x16e>
 8006488:	2b60      	cmp	r3, #96	@ 0x60
 800648a:	d877      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x1c0>
 800648c:	2b50      	cmp	r3, #80	@ 0x50
 800648e:	d03c      	beq.n	800650a <HAL_TIM_ConfigClockSource+0x14e>
 8006490:	2b50      	cmp	r3, #80	@ 0x50
 8006492:	d873      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x1c0>
 8006494:	2b40      	cmp	r3, #64	@ 0x40
 8006496:	d058      	beq.n	800654a <HAL_TIM_ConfigClockSource+0x18e>
 8006498:	2b40      	cmp	r3, #64	@ 0x40
 800649a:	d86f      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x1c0>
 800649c:	2b30      	cmp	r3, #48	@ 0x30
 800649e:	d064      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x1ae>
 80064a0:	2b30      	cmp	r3, #48	@ 0x30
 80064a2:	d86b      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x1c0>
 80064a4:	2b20      	cmp	r3, #32
 80064a6:	d060      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x1ae>
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d867      	bhi.n	800657c <HAL_TIM_ConfigClockSource+0x1c0>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d05c      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x1ae>
 80064b0:	2b10      	cmp	r3, #16
 80064b2:	d05a      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x1ae>
 80064b4:	e062      	b.n	800657c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064c6:	f000 fca9 	bl	8006e1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80064d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	609a      	str	r2, [r3, #8]
      break;
 80064e2:	e04f      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064f4:	f000 fc92 	bl	8006e1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689a      	ldr	r2, [r3, #8]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006506:	609a      	str	r2, [r3, #8]
      break;
 8006508:	e03c      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006516:	461a      	mov	r2, r3
 8006518:	f000 fc04 	bl	8006d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2150      	movs	r1, #80	@ 0x50
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fc5d 	bl	8006de2 <TIM_ITRx_SetConfig>
      break;
 8006528:	e02c      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006536:	461a      	mov	r2, r3
 8006538:	f000 fc23 	bl	8006d82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2160      	movs	r1, #96	@ 0x60
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fc4d 	bl	8006de2 <TIM_ITRx_SetConfig>
      break;
 8006548:	e01c      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006556:	461a      	mov	r2, r3
 8006558:	f000 fbe4 	bl	8006d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2140      	movs	r1, #64	@ 0x40
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fc3d 	bl	8006de2 <TIM_ITRx_SetConfig>
      break;
 8006568:	e00c      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4619      	mov	r1, r3
 8006574:	4610      	mov	r0, r2
 8006576:	f000 fc34 	bl	8006de2 <TIM_ITRx_SetConfig>
      break;
 800657a:	e003      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	73fb      	strb	r3, [r7, #15]
      break;
 8006580:	e000      	b.n	8006584 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006582:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006594:	7bfb      	ldrb	r3, [r7, #15]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	00100070 	.word	0x00100070
 80065a4:	00100040 	.word	0x00100040
 80065a8:	00100030 	.word	0x00100030
 80065ac:	00100020 	.word	0x00100020

080065b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a42      	ldr	r2, [pc, #264]	@ (800671c <TIM_Base_SetConfig+0x11c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d00f      	beq.n	8006638 <TIM_Base_SetConfig+0x38>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800661e:	d00b      	beq.n	8006638 <TIM_Base_SetConfig+0x38>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a3f      	ldr	r2, [pc, #252]	@ (8006720 <TIM_Base_SetConfig+0x120>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d007      	beq.n	8006638 <TIM_Base_SetConfig+0x38>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a3e      	ldr	r2, [pc, #248]	@ (8006724 <TIM_Base_SetConfig+0x124>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d003      	beq.n	8006638 <TIM_Base_SetConfig+0x38>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a3d      	ldr	r2, [pc, #244]	@ (8006728 <TIM_Base_SetConfig+0x128>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d108      	bne.n	800664a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800663e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a33      	ldr	r2, [pc, #204]	@ (800671c <TIM_Base_SetConfig+0x11c>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d01b      	beq.n	800668a <TIM_Base_SetConfig+0x8a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006658:	d017      	beq.n	800668a <TIM_Base_SetConfig+0x8a>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a30      	ldr	r2, [pc, #192]	@ (8006720 <TIM_Base_SetConfig+0x120>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d013      	beq.n	800668a <TIM_Base_SetConfig+0x8a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a2f      	ldr	r2, [pc, #188]	@ (8006724 <TIM_Base_SetConfig+0x124>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00f      	beq.n	800668a <TIM_Base_SetConfig+0x8a>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a2e      	ldr	r2, [pc, #184]	@ (8006728 <TIM_Base_SetConfig+0x128>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00b      	beq.n	800668a <TIM_Base_SetConfig+0x8a>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a2d      	ldr	r2, [pc, #180]	@ (800672c <TIM_Base_SetConfig+0x12c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d007      	beq.n	800668a <TIM_Base_SetConfig+0x8a>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a2c      	ldr	r2, [pc, #176]	@ (8006730 <TIM_Base_SetConfig+0x130>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d003      	beq.n	800668a <TIM_Base_SetConfig+0x8a>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a2b      	ldr	r2, [pc, #172]	@ (8006734 <TIM_Base_SetConfig+0x134>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d108      	bne.n	800669c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	4313      	orrs	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a16      	ldr	r2, [pc, #88]	@ (800671c <TIM_Base_SetConfig+0x11c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00f      	beq.n	80066e8 <TIM_Base_SetConfig+0xe8>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a17      	ldr	r2, [pc, #92]	@ (8006728 <TIM_Base_SetConfig+0x128>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00b      	beq.n	80066e8 <TIM_Base_SetConfig+0xe8>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a16      	ldr	r2, [pc, #88]	@ (800672c <TIM_Base_SetConfig+0x12c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d007      	beq.n	80066e8 <TIM_Base_SetConfig+0xe8>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a15      	ldr	r2, [pc, #84]	@ (8006730 <TIM_Base_SetConfig+0x130>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d003      	beq.n	80066e8 <TIM_Base_SetConfig+0xe8>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a14      	ldr	r2, [pc, #80]	@ (8006734 <TIM_Base_SetConfig+0x134>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d103      	bne.n	80066f0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	691a      	ldr	r2, [r3, #16]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d105      	bne.n	800670e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	f023 0201 	bic.w	r2, r3, #1
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	611a      	str	r2, [r3, #16]
  }
}
 800670e:	bf00      	nop
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	40012c00 	.word	0x40012c00
 8006720:	40000400 	.word	0x40000400
 8006724:	40000800 	.word	0x40000800
 8006728:	40013400 	.word	0x40013400
 800672c:	40014000 	.word	0x40014000
 8006730:	40014400 	.word	0x40014400
 8006734:	40014800 	.word	0x40014800

08006738 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	f023 0201 	bic.w	r2, r3, #1
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800676a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f023 0303 	bic.w	r3, r3, #3
 8006772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	4313      	orrs	r3, r2
 800677c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f023 0302 	bic.w	r3, r3, #2
 8006784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	4313      	orrs	r3, r2
 800678e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a2c      	ldr	r2, [pc, #176]	@ (8006844 <TIM_OC1_SetConfig+0x10c>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d00f      	beq.n	80067b8 <TIM_OC1_SetConfig+0x80>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a2b      	ldr	r2, [pc, #172]	@ (8006848 <TIM_OC1_SetConfig+0x110>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d00b      	beq.n	80067b8 <TIM_OC1_SetConfig+0x80>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a2a      	ldr	r2, [pc, #168]	@ (800684c <TIM_OC1_SetConfig+0x114>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d007      	beq.n	80067b8 <TIM_OC1_SetConfig+0x80>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a29      	ldr	r2, [pc, #164]	@ (8006850 <TIM_OC1_SetConfig+0x118>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d003      	beq.n	80067b8 <TIM_OC1_SetConfig+0x80>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a28      	ldr	r2, [pc, #160]	@ (8006854 <TIM_OC1_SetConfig+0x11c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d10c      	bne.n	80067d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f023 0308 	bic.w	r3, r3, #8
 80067be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f023 0304 	bic.w	r3, r3, #4
 80067d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006844 <TIM_OC1_SetConfig+0x10c>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d00f      	beq.n	80067fa <TIM_OC1_SetConfig+0xc2>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a1a      	ldr	r2, [pc, #104]	@ (8006848 <TIM_OC1_SetConfig+0x110>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d00b      	beq.n	80067fa <TIM_OC1_SetConfig+0xc2>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a19      	ldr	r2, [pc, #100]	@ (800684c <TIM_OC1_SetConfig+0x114>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d007      	beq.n	80067fa <TIM_OC1_SetConfig+0xc2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a18      	ldr	r2, [pc, #96]	@ (8006850 <TIM_OC1_SetConfig+0x118>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d003      	beq.n	80067fa <TIM_OC1_SetConfig+0xc2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a17      	ldr	r2, [pc, #92]	@ (8006854 <TIM_OC1_SetConfig+0x11c>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d111      	bne.n	800681e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	4313      	orrs	r3, r2
 8006812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4313      	orrs	r3, r2
 800681c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	621a      	str	r2, [r3, #32]
}
 8006838:	bf00      	nop
 800683a:	371c      	adds	r7, #28
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	40012c00 	.word	0x40012c00
 8006848:	40013400 	.word	0x40013400
 800684c:	40014000 	.word	0x40014000
 8006850:	40014400 	.word	0x40014400
 8006854:	40014800 	.word	0x40014800

08006858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	f023 0210 	bic.w	r2, r3, #16
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800688a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	021b      	lsls	r3, r3, #8
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4313      	orrs	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f023 0320 	bic.w	r3, r3, #32
 80068a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	011b      	lsls	r3, r3, #4
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a28      	ldr	r2, [pc, #160]	@ (8006958 <TIM_OC2_SetConfig+0x100>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d003      	beq.n	80068c4 <TIM_OC2_SetConfig+0x6c>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a27      	ldr	r2, [pc, #156]	@ (800695c <TIM_OC2_SetConfig+0x104>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d10d      	bne.n	80068e0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a1d      	ldr	r2, [pc, #116]	@ (8006958 <TIM_OC2_SetConfig+0x100>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d00f      	beq.n	8006908 <TIM_OC2_SetConfig+0xb0>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a1c      	ldr	r2, [pc, #112]	@ (800695c <TIM_OC2_SetConfig+0x104>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d00b      	beq.n	8006908 <TIM_OC2_SetConfig+0xb0>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006960 <TIM_OC2_SetConfig+0x108>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d007      	beq.n	8006908 <TIM_OC2_SetConfig+0xb0>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a1a      	ldr	r2, [pc, #104]	@ (8006964 <TIM_OC2_SetConfig+0x10c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d003      	beq.n	8006908 <TIM_OC2_SetConfig+0xb0>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a19      	ldr	r2, [pc, #100]	@ (8006968 <TIM_OC2_SetConfig+0x110>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d113      	bne.n	8006930 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800690e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006916:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	4313      	orrs	r3, r2
 8006922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	4313      	orrs	r3, r2
 800692e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	621a      	str	r2, [r3, #32]
}
 800694a:	bf00      	nop
 800694c:	371c      	adds	r7, #28
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	40012c00 	.word	0x40012c00
 800695c:	40013400 	.word	0x40013400
 8006960:	40014000 	.word	0x40014000
 8006964:	40014400 	.word	0x40014400
 8006968:	40014800 	.word	0x40014800

0800696c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800696c:	b480      	push	{r7}
 800696e:	b087      	sub	sp, #28
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a1b      	ldr	r3, [r3, #32]
 8006980:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800699a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800699e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0303 	bic.w	r3, r3, #3
 80069a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80069b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	021b      	lsls	r3, r3, #8
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a27      	ldr	r2, [pc, #156]	@ (8006a68 <TIM_OC3_SetConfig+0xfc>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d003      	beq.n	80069d6 <TIM_OC3_SetConfig+0x6a>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a26      	ldr	r2, [pc, #152]	@ (8006a6c <TIM_OC3_SetConfig+0x100>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d10d      	bne.n	80069f2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	021b      	lsls	r3, r3, #8
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006a68 <TIM_OC3_SetConfig+0xfc>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00f      	beq.n	8006a1a <TIM_OC3_SetConfig+0xae>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a1b      	ldr	r2, [pc, #108]	@ (8006a6c <TIM_OC3_SetConfig+0x100>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d00b      	beq.n	8006a1a <TIM_OC3_SetConfig+0xae>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a1a      	ldr	r2, [pc, #104]	@ (8006a70 <TIM_OC3_SetConfig+0x104>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d007      	beq.n	8006a1a <TIM_OC3_SetConfig+0xae>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a19      	ldr	r2, [pc, #100]	@ (8006a74 <TIM_OC3_SetConfig+0x108>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d003      	beq.n	8006a1a <TIM_OC3_SetConfig+0xae>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a18      	ldr	r2, [pc, #96]	@ (8006a78 <TIM_OC3_SetConfig+0x10c>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d113      	bne.n	8006a42 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	011b      	lsls	r3, r3, #4
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	621a      	str	r2, [r3, #32]
}
 8006a5c:	bf00      	nop
 8006a5e:	371c      	adds	r7, #28
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	40012c00 	.word	0x40012c00
 8006a6c:	40013400 	.word	0x40013400
 8006a70:	40014000 	.word	0x40014000
 8006a74:	40014400 	.word	0x40014400
 8006a78:	40014800 	.word	0x40014800

08006a7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006aaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006aca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	031b      	lsls	r3, r3, #12
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a28      	ldr	r2, [pc, #160]	@ (8006b7c <TIM_OC4_SetConfig+0x100>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d003      	beq.n	8006ae8 <TIM_OC4_SetConfig+0x6c>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a27      	ldr	r2, [pc, #156]	@ (8006b80 <TIM_OC4_SetConfig+0x104>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d10d      	bne.n	8006b04 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	031b      	lsls	r3, r3, #12
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a1d      	ldr	r2, [pc, #116]	@ (8006b7c <TIM_OC4_SetConfig+0x100>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00f      	beq.n	8006b2c <TIM_OC4_SetConfig+0xb0>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8006b80 <TIM_OC4_SetConfig+0x104>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00b      	beq.n	8006b2c <TIM_OC4_SetConfig+0xb0>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a1b      	ldr	r2, [pc, #108]	@ (8006b84 <TIM_OC4_SetConfig+0x108>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d007      	beq.n	8006b2c <TIM_OC4_SetConfig+0xb0>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8006b88 <TIM_OC4_SetConfig+0x10c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d003      	beq.n	8006b2c <TIM_OC4_SetConfig+0xb0>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a19      	ldr	r2, [pc, #100]	@ (8006b8c <TIM_OC4_SetConfig+0x110>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d113      	bne.n	8006b54 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b32:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b3a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	019b      	lsls	r3, r3, #6
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	019b      	lsls	r3, r3, #6
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	621a      	str	r2, [r3, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	40012c00 	.word	0x40012c00
 8006b80:	40013400 	.word	0x40013400
 8006b84:	40014000 	.word	0x40014000
 8006b88:	40014400 	.word	0x40014400
 8006b8c:	40014800 	.word	0x40014800

08006b90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006bd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	041b      	lsls	r3, r3, #16
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a17      	ldr	r2, [pc, #92]	@ (8006c44 <TIM_OC5_SetConfig+0xb4>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d00f      	beq.n	8006c0a <TIM_OC5_SetConfig+0x7a>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a16      	ldr	r2, [pc, #88]	@ (8006c48 <TIM_OC5_SetConfig+0xb8>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d00b      	beq.n	8006c0a <TIM_OC5_SetConfig+0x7a>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a15      	ldr	r2, [pc, #84]	@ (8006c4c <TIM_OC5_SetConfig+0xbc>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d007      	beq.n	8006c0a <TIM_OC5_SetConfig+0x7a>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a14      	ldr	r2, [pc, #80]	@ (8006c50 <TIM_OC5_SetConfig+0xc0>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d003      	beq.n	8006c0a <TIM_OC5_SetConfig+0x7a>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a13      	ldr	r2, [pc, #76]	@ (8006c54 <TIM_OC5_SetConfig+0xc4>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d109      	bne.n	8006c1e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	021b      	lsls	r3, r3, #8
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	621a      	str	r2, [r3, #32]
}
 8006c38:	bf00      	nop
 8006c3a:	371c      	adds	r7, #28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	40012c00 	.word	0x40012c00
 8006c48:	40013400 	.word	0x40013400
 8006c4c:	40014000 	.word	0x40014000
 8006c50:	40014400 	.word	0x40014400
 8006c54:	40014800 	.word	0x40014800

08006c58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	021b      	lsls	r3, r3, #8
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	051b      	lsls	r3, r3, #20
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a18      	ldr	r2, [pc, #96]	@ (8006d10 <TIM_OC6_SetConfig+0xb8>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d00f      	beq.n	8006cd4 <TIM_OC6_SetConfig+0x7c>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a17      	ldr	r2, [pc, #92]	@ (8006d14 <TIM_OC6_SetConfig+0xbc>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d00b      	beq.n	8006cd4 <TIM_OC6_SetConfig+0x7c>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a16      	ldr	r2, [pc, #88]	@ (8006d18 <TIM_OC6_SetConfig+0xc0>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d007      	beq.n	8006cd4 <TIM_OC6_SetConfig+0x7c>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a15      	ldr	r2, [pc, #84]	@ (8006d1c <TIM_OC6_SetConfig+0xc4>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d003      	beq.n	8006cd4 <TIM_OC6_SetConfig+0x7c>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a14      	ldr	r2, [pc, #80]	@ (8006d20 <TIM_OC6_SetConfig+0xc8>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d109      	bne.n	8006ce8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006cda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	029b      	lsls	r3, r3, #10
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	621a      	str	r2, [r3, #32]
}
 8006d02:	bf00      	nop
 8006d04:	371c      	adds	r7, #28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	40012c00 	.word	0x40012c00
 8006d14:	40013400 	.word	0x40013400
 8006d18:	40014000 	.word	0x40014000
 8006d1c:	40014400 	.word	0x40014400
 8006d20:	40014800 	.word	0x40014800

08006d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	f023 0201 	bic.w	r2, r3, #1
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	011b      	lsls	r3, r3, #4
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f023 030a 	bic.w	r3, r3, #10
 8006d60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	621a      	str	r2, [r3, #32]
}
 8006d76:	bf00      	nop
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b087      	sub	sp, #28
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	60b9      	str	r1, [r7, #8]
 8006d8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a1b      	ldr	r3, [r3, #32]
 8006d98:	f023 0210 	bic.w	r2, r3, #16
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006dac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	031b      	lsls	r3, r3, #12
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006dbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	011b      	lsls	r3, r3, #4
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	621a      	str	r2, [r3, #32]
}
 8006dd6:	bf00      	nop
 8006dd8:	371c      	adds	r7, #28
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b085      	sub	sp, #20
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006df8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	f043 0307 	orr.w	r3, r3, #7
 8006e08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	609a      	str	r2, [r3, #8]
}
 8006e10:	bf00      	nop
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
 8006e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	021a      	lsls	r2, r3, #8
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	609a      	str	r2, [r3, #8]
}
 8006e50:	bf00      	nop
 8006e52:	371c      	adds	r7, #28
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f003 031f 	and.w	r3, r3, #31
 8006e6e:	2201      	movs	r2, #1
 8006e70:	fa02 f303 	lsl.w	r3, r2, r3
 8006e74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6a1a      	ldr	r2, [r3, #32]
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	43db      	mvns	r3, r3
 8006e7e:	401a      	ands	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a1a      	ldr	r2, [r3, #32]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f003 031f 	and.w	r3, r3, #31
 8006e8e:	6879      	ldr	r1, [r7, #4]
 8006e90:	fa01 f303 	lsl.w	r3, r1, r3
 8006e94:	431a      	orrs	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	621a      	str	r2, [r3, #32]
}
 8006e9a:	bf00      	nop
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
	...

08006ea8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d109      	bne.n	8006ecc <HAL_TIMEx_PWMN_Start+0x24>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	bf14      	ite	ne
 8006ec4:	2301      	movne	r3, #1
 8006ec6:	2300      	moveq	r3, #0
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	e022      	b.n	8006f12 <HAL_TIMEx_PWMN_Start+0x6a>
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d109      	bne.n	8006ee6 <HAL_TIMEx_PWMN_Start+0x3e>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	bf14      	ite	ne
 8006ede:	2301      	movne	r3, #1
 8006ee0:	2300      	moveq	r3, #0
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	e015      	b.n	8006f12 <HAL_TIMEx_PWMN_Start+0x6a>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b08      	cmp	r3, #8
 8006eea:	d109      	bne.n	8006f00 <HAL_TIMEx_PWMN_Start+0x58>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	bf14      	ite	ne
 8006ef8:	2301      	movne	r3, #1
 8006efa:	2300      	moveq	r3, #0
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	e008      	b.n	8006f12 <HAL_TIMEx_PWMN_Start+0x6a>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	bf14      	ite	ne
 8006f0c:	2301      	movne	r3, #1
 8006f0e:	2300      	moveq	r3, #0
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e069      	b.n	8006fee <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d104      	bne.n	8006f2a <HAL_TIMEx_PWMN_Start+0x82>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f28:	e013      	b.n	8006f52 <HAL_TIMEx_PWMN_Start+0xaa>
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b04      	cmp	r3, #4
 8006f2e:	d104      	bne.n	8006f3a <HAL_TIMEx_PWMN_Start+0x92>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2202      	movs	r2, #2
 8006f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f38:	e00b      	b.n	8006f52 <HAL_TIMEx_PWMN_Start+0xaa>
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d104      	bne.n	8006f4a <HAL_TIMEx_PWMN_Start+0xa2>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2202      	movs	r2, #2
 8006f44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f48:	e003      	b.n	8006f52 <HAL_TIMEx_PWMN_Start+0xaa>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2204      	movs	r2, #4
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 fa0a 	bl	8007374 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f6e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a20      	ldr	r2, [pc, #128]	@ (8006ff8 <HAL_TIMEx_PWMN_Start+0x150>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d018      	beq.n	8006fac <HAL_TIMEx_PWMN_Start+0x104>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f82:	d013      	beq.n	8006fac <HAL_TIMEx_PWMN_Start+0x104>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a1c      	ldr	r2, [pc, #112]	@ (8006ffc <HAL_TIMEx_PWMN_Start+0x154>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d00e      	beq.n	8006fac <HAL_TIMEx_PWMN_Start+0x104>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a1b      	ldr	r2, [pc, #108]	@ (8007000 <HAL_TIMEx_PWMN_Start+0x158>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d009      	beq.n	8006fac <HAL_TIMEx_PWMN_Start+0x104>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a19      	ldr	r2, [pc, #100]	@ (8007004 <HAL_TIMEx_PWMN_Start+0x15c>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d004      	beq.n	8006fac <HAL_TIMEx_PWMN_Start+0x104>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a18      	ldr	r2, [pc, #96]	@ (8007008 <HAL_TIMEx_PWMN_Start+0x160>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d115      	bne.n	8006fd8 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689a      	ldr	r2, [r3, #8]
 8006fb2:	4b16      	ldr	r3, [pc, #88]	@ (800700c <HAL_TIMEx_PWMN_Start+0x164>)
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2b06      	cmp	r3, #6
 8006fbc:	d015      	beq.n	8006fea <HAL_TIMEx_PWMN_Start+0x142>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fc4:	d011      	beq.n	8006fea <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f042 0201 	orr.w	r2, r2, #1
 8006fd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fd6:	e008      	b.n	8006fea <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f042 0201 	orr.w	r2, r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]
 8006fe8:	e000      	b.n	8006fec <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	40012c00 	.word	0x40012c00
 8006ffc:	40000400 	.word	0x40000400
 8007000:	40000800 	.word	0x40000800
 8007004:	40013400 	.word	0x40013400
 8007008:	40014000 	.word	0x40014000
 800700c:	00010007 	.word	0x00010007

08007010 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2200      	movs	r2, #0
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	4618      	mov	r0, r3
 8007024:	f000 f9a6 	bl	8007374 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6a1a      	ldr	r2, [r3, #32]
 800702e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007032:	4013      	ands	r3, r2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10f      	bne.n	8007058 <HAL_TIMEx_PWMN_Stop+0x48>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6a1a      	ldr	r2, [r3, #32]
 800703e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007042:	4013      	ands	r3, r2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d107      	bne.n	8007058 <HAL_TIMEx_PWMN_Stop+0x48>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007056:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6a1a      	ldr	r2, [r3, #32]
 800705e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007062:	4013      	ands	r3, r2
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10f      	bne.n	8007088 <HAL_TIMEx_PWMN_Stop+0x78>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6a1a      	ldr	r2, [r3, #32]
 800706e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007072:	4013      	ands	r3, r2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d107      	bne.n	8007088 <HAL_TIMEx_PWMN_Stop+0x78>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 0201 	bic.w	r2, r2, #1
 8007086:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d104      	bne.n	8007098 <HAL_TIMEx_PWMN_Stop+0x88>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007096:	e013      	b.n	80070c0 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	2b04      	cmp	r3, #4
 800709c:	d104      	bne.n	80070a8 <HAL_TIMEx_PWMN_Stop+0x98>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070a6:	e00b      	b.n	80070c0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	2b08      	cmp	r3, #8
 80070ac:	d104      	bne.n	80070b8 <HAL_TIMEx_PWMN_Stop+0xa8>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80070b6:	e003      	b.n	80070c0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
	...

080070cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d101      	bne.n	80070e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070e0:	2302      	movs	r3, #2
 80070e2:	e065      	b.n	80071b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a2c      	ldr	r2, [pc, #176]	@ (80071bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d004      	beq.n	8007118 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a2b      	ldr	r2, [pc, #172]	@ (80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d108      	bne.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800711e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	4313      	orrs	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007130:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007134:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	4313      	orrs	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a1b      	ldr	r2, [pc, #108]	@ (80071bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d018      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800715a:	d013      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a18      	ldr	r2, [pc, #96]	@ (80071c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d00e      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a17      	ldr	r2, [pc, #92]	@ (80071c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d009      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a12      	ldr	r2, [pc, #72]	@ (80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d004      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a13      	ldr	r2, [pc, #76]	@ (80071cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d10c      	bne.n	800719e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800718a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	4313      	orrs	r3, r2
 8007194:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	40012c00 	.word	0x40012c00
 80071c0:	40013400 	.word	0x40013400
 80071c4:	40000400 	.word	0x40000400
 80071c8:	40000800 	.word	0x40000800
 80071cc:	40014000 	.word	0x40014000

080071d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d101      	bne.n	80071ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80071e8:	2302      	movs	r3, #2
 80071ea:	e073      	b.n	80072d4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	4313      	orrs	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	4313      	orrs	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	4313      	orrs	r3, r2
 800721c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4313      	orrs	r3, r2
 800722a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	4313      	orrs	r3, r2
 8007246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007252:	4313      	orrs	r3, r2
 8007254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	041b      	lsls	r3, r3, #16
 8007262:	4313      	orrs	r3, r2
 8007264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	4313      	orrs	r3, r2
 8007272:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a19      	ldr	r2, [pc, #100]	@ (80072e0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d004      	beq.n	8007288 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a18      	ldr	r2, [pc, #96]	@ (80072e4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d11c      	bne.n	80072c2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007292:	051b      	lsls	r3, r3, #20
 8007294:	4313      	orrs	r3, r2
 8007296:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072be:	4313      	orrs	r3, r2
 80072c0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	40012c00 	.word	0x40012c00
 80072e4:	40013400 	.word	0x40013400

080072e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007374:	b480      	push	{r7}
 8007376:	b087      	sub	sp, #28
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	f003 030f 	and.w	r3, r3, #15
 8007386:	2204      	movs	r2, #4
 8007388:	fa02 f303 	lsl.w	r3, r2, r3
 800738c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6a1a      	ldr	r2, [r3, #32]
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	43db      	mvns	r3, r3
 8007396:	401a      	ands	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6a1a      	ldr	r2, [r3, #32]
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f003 030f 	and.w	r3, r3, #15
 80073a6:	6879      	ldr	r1, [r7, #4]
 80073a8:	fa01 f303 	lsl.w	r3, r1, r3
 80073ac:	431a      	orrs	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	621a      	str	r2, [r3, #32]
}
 80073b2:	bf00      	nop
 80073b4:	371c      	adds	r7, #28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b082      	sub	sp, #8
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d101      	bne.n	80073d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e042      	b.n	8007456 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d106      	bne.n	80073e8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7fb feb8 	bl	8003158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2224      	movs	r2, #36	@ 0x24
 80073ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0201 	bic.w	r2, r2, #1
 80073fe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007404:	2b00      	cmp	r3, #0
 8007406:	d002      	beq.n	800740e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 ff3b 	bl	8008284 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fc6c 	bl	8007cec <UART_SetConfig>
 8007414:	4603      	mov	r3, r0
 8007416:	2b01      	cmp	r3, #1
 8007418:	d101      	bne.n	800741e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e01b      	b.n	8007456 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800742c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800743c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f042 0201 	orr.w	r2, r2, #1
 800744c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 ffba 	bl	80083c8 <UART_CheckIdleState>
 8007454:	4603      	mov	r3, r0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b08a      	sub	sp, #40	@ 0x28
 8007462:	af02      	add	r7, sp, #8
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	60b9      	str	r1, [r7, #8]
 8007468:	603b      	str	r3, [r7, #0]
 800746a:	4613      	mov	r3, r2
 800746c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007474:	2b20      	cmp	r3, #32
 8007476:	d17b      	bne.n	8007570 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d002      	beq.n	8007484 <HAL_UART_Transmit+0x26>
 800747e:	88fb      	ldrh	r3, [r7, #6]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e074      	b.n	8007572 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2221      	movs	r2, #33	@ 0x21
 8007494:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007498:	f7fb ff54 	bl	8003344 <HAL_GetTick>
 800749c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	88fa      	ldrh	r2, [r7, #6]
 80074a2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	88fa      	ldrh	r2, [r7, #6]
 80074aa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074b6:	d108      	bne.n	80074ca <HAL_UART_Transmit+0x6c>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d104      	bne.n	80074ca <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80074c0:	2300      	movs	r3, #0
 80074c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	61bb      	str	r3, [r7, #24]
 80074c8:	e003      	b.n	80074d2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074ce:	2300      	movs	r3, #0
 80074d0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074d2:	e030      	b.n	8007536 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	2200      	movs	r2, #0
 80074dc:	2180      	movs	r1, #128	@ 0x80
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f001 f81c 	bl	800851c <UART_WaitOnFlagUntilTimeout>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d005      	beq.n	80074f6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2220      	movs	r2, #32
 80074ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e03d      	b.n	8007572 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10b      	bne.n	8007514 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800750a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	3302      	adds	r3, #2
 8007510:	61bb      	str	r3, [r7, #24]
 8007512:	e007      	b.n	8007524 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	781a      	ldrb	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	3301      	adds	r3, #1
 8007522:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800752a:	b29b      	uxth	r3, r3
 800752c:	3b01      	subs	r3, #1
 800752e:	b29a      	uxth	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800753c:	b29b      	uxth	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1c8      	bne.n	80074d4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2200      	movs	r2, #0
 800754a:	2140      	movs	r1, #64	@ 0x40
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 ffe5 	bl	800851c <UART_WaitOnFlagUntilTimeout>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d005      	beq.n	8007564 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2220      	movs	r2, #32
 800755c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e006      	b.n	8007572 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2220      	movs	r2, #32
 8007568:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800756c:	2300      	movs	r3, #0
 800756e:	e000      	b.n	8007572 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007570:	2302      	movs	r3, #2
  }
}
 8007572:	4618      	mov	r0, r3
 8007574:	3720      	adds	r7, #32
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b08a      	sub	sp, #40	@ 0x28
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	4613      	mov	r3, r2
 8007588:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007590:	2b20      	cmp	r3, #32
 8007592:	d137      	bne.n	8007604 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d002      	beq.n	80075a0 <HAL_UART_Receive_DMA+0x24>
 800759a:	88fb      	ldrh	r3, [r7, #6]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e030      	b.n	8007606 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a18      	ldr	r2, [pc, #96]	@ (8007610 <HAL_UART_Receive_DMA+0x94>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d01f      	beq.n	80075f4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d018      	beq.n	80075f4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	e853 3f00 	ldrex	r3, [r3]
 80075ce:	613b      	str	r3, [r7, #16]
   return(result);
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80075d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	461a      	mov	r2, r3
 80075de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e0:	623b      	str	r3, [r7, #32]
 80075e2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e4:	69f9      	ldr	r1, [r7, #28]
 80075e6:	6a3a      	ldr	r2, [r7, #32]
 80075e8:	e841 2300 	strex	r3, r2, [r1]
 80075ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1e6      	bne.n	80075c2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80075f4:	88fb      	ldrh	r3, [r7, #6]
 80075f6:	461a      	mov	r2, r3
 80075f8:	68b9      	ldr	r1, [r7, #8]
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f000 fffc 	bl	80085f8 <UART_Start_Receive_DMA>
 8007600:	4603      	mov	r3, r0
 8007602:	e000      	b.n	8007606 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007604:	2302      	movs	r3, #2
  }
}
 8007606:	4618      	mov	r0, r3
 8007608:	3728      	adds	r7, #40	@ 0x28
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	40008000 	.word	0x40008000

08007614 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b0ba      	sub	sp, #232	@ 0xe8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	69db      	ldr	r3, [r3, #28]
 8007622:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800763a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800763e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007642:	4013      	ands	r3, r2
 8007644:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007648:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800764c:	2b00      	cmp	r3, #0
 800764e:	d11b      	bne.n	8007688 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007654:	f003 0320 	and.w	r3, r3, #32
 8007658:	2b00      	cmp	r3, #0
 800765a:	d015      	beq.n	8007688 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800765c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007660:	f003 0320 	and.w	r3, r3, #32
 8007664:	2b00      	cmp	r3, #0
 8007666:	d105      	bne.n	8007674 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800766c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d009      	beq.n	8007688 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 8300 	beq.w	8007c7e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	4798      	blx	r3
      }
      return;
 8007686:	e2fa      	b.n	8007c7e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007688:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 8123 	beq.w	80078d8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007692:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007696:	4b8d      	ldr	r3, [pc, #564]	@ (80078cc <HAL_UART_IRQHandler+0x2b8>)
 8007698:	4013      	ands	r3, r2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d106      	bne.n	80076ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800769e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80076a2:	4b8b      	ldr	r3, [pc, #556]	@ (80078d0 <HAL_UART_IRQHandler+0x2bc>)
 80076a4:	4013      	ands	r3, r2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 8116 	beq.w	80078d8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d011      	beq.n	80076dc <HAL_UART_IRQHandler+0xc8>
 80076b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00b      	beq.n	80076dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2201      	movs	r2, #1
 80076ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076d2:	f043 0201 	orr.w	r2, r3, #1
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076e0:	f003 0302 	and.w	r3, r3, #2
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d011      	beq.n	800770c <HAL_UART_IRQHandler+0xf8>
 80076e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00b      	beq.n	800770c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2202      	movs	r2, #2
 80076fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007702:	f043 0204 	orr.w	r2, r3, #4
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800770c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007710:	f003 0304 	and.w	r3, r3, #4
 8007714:	2b00      	cmp	r3, #0
 8007716:	d011      	beq.n	800773c <HAL_UART_IRQHandler+0x128>
 8007718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00b      	beq.n	800773c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2204      	movs	r2, #4
 800772a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007732:	f043 0202 	orr.w	r2, r3, #2
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800773c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007740:	f003 0308 	and.w	r3, r3, #8
 8007744:	2b00      	cmp	r3, #0
 8007746:	d017      	beq.n	8007778 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800774c:	f003 0320 	and.w	r3, r3, #32
 8007750:	2b00      	cmp	r3, #0
 8007752:	d105      	bne.n	8007760 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007754:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007758:	4b5c      	ldr	r3, [pc, #368]	@ (80078cc <HAL_UART_IRQHandler+0x2b8>)
 800775a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00b      	beq.n	8007778 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2208      	movs	r2, #8
 8007766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800776e:	f043 0208 	orr.w	r2, r3, #8
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800777c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007780:	2b00      	cmp	r3, #0
 8007782:	d012      	beq.n	80077aa <HAL_UART_IRQHandler+0x196>
 8007784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007788:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00c      	beq.n	80077aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007798:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077a0:	f043 0220 	orr.w	r2, r3, #32
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 8266 	beq.w	8007c82 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ba:	f003 0320 	and.w	r3, r3, #32
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d013      	beq.n	80077ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077c6:	f003 0320 	and.w	r3, r3, #32
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d105      	bne.n	80077da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d007      	beq.n	80077ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077fe:	2b40      	cmp	r3, #64	@ 0x40
 8007800:	d005      	beq.n	800780e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007806:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800780a:	2b00      	cmp	r3, #0
 800780c:	d054      	beq.n	80078b8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 ffd9 	bl	80087c6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800781e:	2b40      	cmp	r3, #64	@ 0x40
 8007820:	d146      	bne.n	80078b0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	3308      	adds	r3, #8
 8007828:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007838:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800783c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007840:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3308      	adds	r3, #8
 800784a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800784e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007852:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007856:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800785a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800785e:	e841 2300 	strex	r3, r2, [r1]
 8007862:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1d9      	bne.n	8007822 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007874:	2b00      	cmp	r3, #0
 8007876:	d017      	beq.n	80078a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800787e:	4a15      	ldr	r2, [pc, #84]	@ (80078d4 <HAL_UART_IRQHandler+0x2c0>)
 8007880:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007888:	4618      	mov	r0, r3
 800788a:	f7fb ff3d 	bl	8003708 <HAL_DMA_Abort_IT>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d019      	beq.n	80078c8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800789a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80078a2:	4610      	mov	r0, r2
 80078a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a6:	e00f      	b.n	80078c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fa09 	bl	8007cc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ae:	e00b      	b.n	80078c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fa05 	bl	8007cc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b6:	e007      	b.n	80078c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fa01 	bl	8007cc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80078c6:	e1dc      	b.n	8007c82 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c8:	bf00      	nop
    return;
 80078ca:	e1da      	b.n	8007c82 <HAL_UART_IRQHandler+0x66e>
 80078cc:	10000001 	.word	0x10000001
 80078d0:	04000120 	.word	0x04000120
 80078d4:	08008a7d 	.word	0x08008a7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078dc:	2b01      	cmp	r3, #1
 80078de:	f040 8170 	bne.w	8007bc2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80078e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078e6:	f003 0310 	and.w	r3, r3, #16
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 8169 	beq.w	8007bc2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80078f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078f4:	f003 0310 	and.w	r3, r3, #16
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 8162 	beq.w	8007bc2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2210      	movs	r2, #16
 8007904:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007910:	2b40      	cmp	r3, #64	@ 0x40
 8007912:	f040 80d8 	bne.w	8007ac6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007924:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007928:	2b00      	cmp	r3, #0
 800792a:	f000 80af 	beq.w	8007a8c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007934:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007938:	429a      	cmp	r2, r3
 800793a:	f080 80a7 	bcs.w	8007a8c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007944:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0320 	and.w	r3, r3, #32
 8007956:	2b00      	cmp	r3, #0
 8007958:	f040 8087 	bne.w	8007a6a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007964:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007968:	e853 3f00 	ldrex	r3, [r3]
 800796c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007970:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007974:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007978:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	461a      	mov	r2, r3
 8007982:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007986:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800798a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007992:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007996:	e841 2300 	strex	r3, r2, [r1]
 800799a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800799e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1da      	bne.n	800795c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3308      	adds	r3, #8
 80079ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079b0:	e853 3f00 	ldrex	r3, [r3]
 80079b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80079b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079b8:	f023 0301 	bic.w	r3, r3, #1
 80079bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3308      	adds	r3, #8
 80079c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80079ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80079ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80079d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80079d6:	e841 2300 	strex	r3, r2, [r1]
 80079da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80079dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1e1      	bne.n	80079a6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3308      	adds	r3, #8
 80079e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079ec:	e853 3f00 	ldrex	r3, [r3]
 80079f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80079f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	3308      	adds	r3, #8
 8007a02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007a06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a0e:	e841 2300 	strex	r3, r2, [r1]
 8007a12:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1e3      	bne.n	80079e2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2220      	movs	r2, #32
 8007a1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a38:	f023 0310 	bic.w	r3, r3, #16
 8007a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	461a      	mov	r2, r3
 8007a46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a4c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a52:	e841 2300 	strex	r3, r2, [r1]
 8007a56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1e4      	bne.n	8007a28 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7fb fdf6 	bl	8003656 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2202      	movs	r2, #2
 8007a6e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f925 	bl	8007cd4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007a8a:	e0fc      	b.n	8007c86 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a96:	429a      	cmp	r2, r3
 8007a98:	f040 80f5 	bne.w	8007c86 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0320 	and.w	r3, r3, #32
 8007aaa:	2b20      	cmp	r3, #32
 8007aac:	f040 80eb 	bne.w	8007c86 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f908 	bl	8007cd4 <HAL_UARTEx_RxEventCallback>
      return;
 8007ac4:	e0df      	b.n	8007c86 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 80d1 	beq.w	8007c8a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007ae8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 80cc 	beq.w	8007c8a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007afa:	e853 3f00 	ldrex	r3, [r3]
 8007afe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b1c:	e841 2300 	strex	r3, r2, [r1]
 8007b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1e4      	bne.n	8007af2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3308      	adds	r3, #8
 8007b2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b32:	e853 3f00 	ldrex	r3, [r3]
 8007b36:	623b      	str	r3, [r7, #32]
   return(result);
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b3e:	f023 0301 	bic.w	r3, r3, #1
 8007b42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007b50:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b58:	e841 2300 	strex	r3, r2, [r1]
 8007b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1e1      	bne.n	8007b28 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2220      	movs	r2, #32
 8007b68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	e853 3f00 	ldrex	r3, [r3]
 8007b84:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f023 0310 	bic.w	r3, r3, #16
 8007b8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	461a      	mov	r2, r3
 8007b96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007b9a:	61fb      	str	r3, [r7, #28]
 8007b9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9e:	69b9      	ldr	r1, [r7, #24]
 8007ba0:	69fa      	ldr	r2, [r7, #28]
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	617b      	str	r3, [r7, #20]
   return(result);
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1e4      	bne.n	8007b78 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007bb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007bb8:	4619      	mov	r1, r3
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f88a 	bl	8007cd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007bc0:	e063      	b.n	8007c8a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00e      	beq.n	8007bec <HAL_UART_IRQHandler+0x5d8>
 8007bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d008      	beq.n	8007bec <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007be2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 ff86 	bl	8008af6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bea:	e051      	b.n	8007c90 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d014      	beq.n	8007c22 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d105      	bne.n	8007c10 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d008      	beq.n	8007c22 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d03a      	beq.n	8007c8e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	4798      	blx	r3
    }
    return;
 8007c20:	e035      	b.n	8007c8e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d009      	beq.n	8007c42 <HAL_UART_IRQHandler+0x62e>
 8007c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 ff30 	bl	8008aa0 <UART_EndTransmit_IT>
    return;
 8007c40:	e026      	b.n	8007c90 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d009      	beq.n	8007c62 <HAL_UART_IRQHandler+0x64e>
 8007c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c52:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 ff5f 	bl	8008b1e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c60:	e016      	b.n	8007c90 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d010      	beq.n	8007c90 <HAL_UART_IRQHandler+0x67c>
 8007c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	da0c      	bge.n	8007c90 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 ff47 	bl	8008b0a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c7c:	e008      	b.n	8007c90 <HAL_UART_IRQHandler+0x67c>
      return;
 8007c7e:	bf00      	nop
 8007c80:	e006      	b.n	8007c90 <HAL_UART_IRQHandler+0x67c>
    return;
 8007c82:	bf00      	nop
 8007c84:	e004      	b.n	8007c90 <HAL_UART_IRQHandler+0x67c>
      return;
 8007c86:	bf00      	nop
 8007c88:	e002      	b.n	8007c90 <HAL_UART_IRQHandler+0x67c>
      return;
 8007c8a:	bf00      	nop
 8007c8c:	e000      	b.n	8007c90 <HAL_UART_IRQHandler+0x67c>
    return;
 8007c8e:	bf00      	nop
  }
}
 8007c90:	37e8      	adds	r7, #232	@ 0xe8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop

08007c98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cf0:	b08c      	sub	sp, #48	@ 0x30
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	689a      	ldr	r2, [r3, #8]
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	431a      	orrs	r2, r3
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	69db      	ldr	r3, [r3, #28]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	4bab      	ldr	r3, [pc, #684]	@ (8007fc8 <UART_SetConfig+0x2dc>)
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	6812      	ldr	r2, [r2, #0]
 8007d22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d24:	430b      	orrs	r3, r1
 8007d26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	68da      	ldr	r2, [r3, #12]
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4aa0      	ldr	r2, [pc, #640]	@ (8007fcc <UART_SetConfig+0x2e0>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d004      	beq.n	8007d58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d54:	4313      	orrs	r3, r2
 8007d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007d62:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	6812      	ldr	r2, [r2, #0]
 8007d6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d6c:	430b      	orrs	r3, r1
 8007d6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d76:	f023 010f 	bic.w	r1, r3, #15
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a91      	ldr	r2, [pc, #580]	@ (8007fd0 <UART_SetConfig+0x2e4>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d125      	bne.n	8007ddc <UART_SetConfig+0xf0>
 8007d90:	4b90      	ldr	r3, [pc, #576]	@ (8007fd4 <UART_SetConfig+0x2e8>)
 8007d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d96:	f003 0303 	and.w	r3, r3, #3
 8007d9a:	2b03      	cmp	r3, #3
 8007d9c:	d81a      	bhi.n	8007dd4 <UART_SetConfig+0xe8>
 8007d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007da4 <UART_SetConfig+0xb8>)
 8007da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da4:	08007db5 	.word	0x08007db5
 8007da8:	08007dc5 	.word	0x08007dc5
 8007dac:	08007dbd 	.word	0x08007dbd
 8007db0:	08007dcd 	.word	0x08007dcd
 8007db4:	2301      	movs	r3, #1
 8007db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dba:	e0d6      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dc2:	e0d2      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007dc4:	2304      	movs	r3, #4
 8007dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dca:	e0ce      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007dcc:	2308      	movs	r3, #8
 8007dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dd2:	e0ca      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007dd4:	2310      	movs	r3, #16
 8007dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dda:	e0c6      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a7d      	ldr	r2, [pc, #500]	@ (8007fd8 <UART_SetConfig+0x2ec>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d138      	bne.n	8007e58 <UART_SetConfig+0x16c>
 8007de6:	4b7b      	ldr	r3, [pc, #492]	@ (8007fd4 <UART_SetConfig+0x2e8>)
 8007de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dec:	f003 030c 	and.w	r3, r3, #12
 8007df0:	2b0c      	cmp	r3, #12
 8007df2:	d82d      	bhi.n	8007e50 <UART_SetConfig+0x164>
 8007df4:	a201      	add	r2, pc, #4	@ (adr r2, 8007dfc <UART_SetConfig+0x110>)
 8007df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfa:	bf00      	nop
 8007dfc:	08007e31 	.word	0x08007e31
 8007e00:	08007e51 	.word	0x08007e51
 8007e04:	08007e51 	.word	0x08007e51
 8007e08:	08007e51 	.word	0x08007e51
 8007e0c:	08007e41 	.word	0x08007e41
 8007e10:	08007e51 	.word	0x08007e51
 8007e14:	08007e51 	.word	0x08007e51
 8007e18:	08007e51 	.word	0x08007e51
 8007e1c:	08007e39 	.word	0x08007e39
 8007e20:	08007e51 	.word	0x08007e51
 8007e24:	08007e51 	.word	0x08007e51
 8007e28:	08007e51 	.word	0x08007e51
 8007e2c:	08007e49 	.word	0x08007e49
 8007e30:	2300      	movs	r3, #0
 8007e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e36:	e098      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007e38:	2302      	movs	r3, #2
 8007e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e3e:	e094      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007e40:	2304      	movs	r3, #4
 8007e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e46:	e090      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007e48:	2308      	movs	r3, #8
 8007e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e4e:	e08c      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007e50:	2310      	movs	r3, #16
 8007e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e56:	e088      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a5f      	ldr	r2, [pc, #380]	@ (8007fdc <UART_SetConfig+0x2f0>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d125      	bne.n	8007eae <UART_SetConfig+0x1c2>
 8007e62:	4b5c      	ldr	r3, [pc, #368]	@ (8007fd4 <UART_SetConfig+0x2e8>)
 8007e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007e6c:	2b30      	cmp	r3, #48	@ 0x30
 8007e6e:	d016      	beq.n	8007e9e <UART_SetConfig+0x1b2>
 8007e70:	2b30      	cmp	r3, #48	@ 0x30
 8007e72:	d818      	bhi.n	8007ea6 <UART_SetConfig+0x1ba>
 8007e74:	2b20      	cmp	r3, #32
 8007e76:	d00a      	beq.n	8007e8e <UART_SetConfig+0x1a2>
 8007e78:	2b20      	cmp	r3, #32
 8007e7a:	d814      	bhi.n	8007ea6 <UART_SetConfig+0x1ba>
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <UART_SetConfig+0x19a>
 8007e80:	2b10      	cmp	r3, #16
 8007e82:	d008      	beq.n	8007e96 <UART_SetConfig+0x1aa>
 8007e84:	e00f      	b.n	8007ea6 <UART_SetConfig+0x1ba>
 8007e86:	2300      	movs	r3, #0
 8007e88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e8c:	e06d      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007e8e:	2302      	movs	r3, #2
 8007e90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e94:	e069      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007e96:	2304      	movs	r3, #4
 8007e98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e9c:	e065      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007e9e:	2308      	movs	r3, #8
 8007ea0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ea4:	e061      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007ea6:	2310      	movs	r3, #16
 8007ea8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eac:	e05d      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a4b      	ldr	r2, [pc, #300]	@ (8007fe0 <UART_SetConfig+0x2f4>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d125      	bne.n	8007f04 <UART_SetConfig+0x218>
 8007eb8:	4b46      	ldr	r3, [pc, #280]	@ (8007fd4 <UART_SetConfig+0x2e8>)
 8007eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ebe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007ec2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ec4:	d016      	beq.n	8007ef4 <UART_SetConfig+0x208>
 8007ec6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ec8:	d818      	bhi.n	8007efc <UART_SetConfig+0x210>
 8007eca:	2b80      	cmp	r3, #128	@ 0x80
 8007ecc:	d00a      	beq.n	8007ee4 <UART_SetConfig+0x1f8>
 8007ece:	2b80      	cmp	r3, #128	@ 0x80
 8007ed0:	d814      	bhi.n	8007efc <UART_SetConfig+0x210>
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d002      	beq.n	8007edc <UART_SetConfig+0x1f0>
 8007ed6:	2b40      	cmp	r3, #64	@ 0x40
 8007ed8:	d008      	beq.n	8007eec <UART_SetConfig+0x200>
 8007eda:	e00f      	b.n	8007efc <UART_SetConfig+0x210>
 8007edc:	2300      	movs	r3, #0
 8007ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ee2:	e042      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eea:	e03e      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007eec:	2304      	movs	r3, #4
 8007eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ef2:	e03a      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007ef4:	2308      	movs	r3, #8
 8007ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007efa:	e036      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007efc:	2310      	movs	r3, #16
 8007efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f02:	e032      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a30      	ldr	r2, [pc, #192]	@ (8007fcc <UART_SetConfig+0x2e0>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d12a      	bne.n	8007f64 <UART_SetConfig+0x278>
 8007f0e:	4b31      	ldr	r3, [pc, #196]	@ (8007fd4 <UART_SetConfig+0x2e8>)
 8007f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007f18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f1c:	d01a      	beq.n	8007f54 <UART_SetConfig+0x268>
 8007f1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f22:	d81b      	bhi.n	8007f5c <UART_SetConfig+0x270>
 8007f24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f28:	d00c      	beq.n	8007f44 <UART_SetConfig+0x258>
 8007f2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f2e:	d815      	bhi.n	8007f5c <UART_SetConfig+0x270>
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d003      	beq.n	8007f3c <UART_SetConfig+0x250>
 8007f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f38:	d008      	beq.n	8007f4c <UART_SetConfig+0x260>
 8007f3a:	e00f      	b.n	8007f5c <UART_SetConfig+0x270>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f42:	e012      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007f44:	2302      	movs	r3, #2
 8007f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f4a:	e00e      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007f4c:	2304      	movs	r3, #4
 8007f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f52:	e00a      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007f54:	2308      	movs	r3, #8
 8007f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f5a:	e006      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007f5c:	2310      	movs	r3, #16
 8007f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f62:	e002      	b.n	8007f6a <UART_SetConfig+0x27e>
 8007f64:	2310      	movs	r3, #16
 8007f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a17      	ldr	r2, [pc, #92]	@ (8007fcc <UART_SetConfig+0x2e0>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	f040 80a8 	bne.w	80080c6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f7a:	2b08      	cmp	r3, #8
 8007f7c:	d834      	bhi.n	8007fe8 <UART_SetConfig+0x2fc>
 8007f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f84 <UART_SetConfig+0x298>)
 8007f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f84:	08007fa9 	.word	0x08007fa9
 8007f88:	08007fe9 	.word	0x08007fe9
 8007f8c:	08007fb1 	.word	0x08007fb1
 8007f90:	08007fe9 	.word	0x08007fe9
 8007f94:	08007fb7 	.word	0x08007fb7
 8007f98:	08007fe9 	.word	0x08007fe9
 8007f9c:	08007fe9 	.word	0x08007fe9
 8007fa0:	08007fe9 	.word	0x08007fe9
 8007fa4:	08007fbf 	.word	0x08007fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fa8:	f7fd f9b2 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 8007fac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fae:	e021      	b.n	8007ff4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8007fe4 <UART_SetConfig+0x2f8>)
 8007fb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007fb4:	e01e      	b.n	8007ff4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fb6:	f7fd f93f 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 8007fba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fbc:	e01a      	b.n	8007ff4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007fc4:	e016      	b.n	8007ff4 <UART_SetConfig+0x308>
 8007fc6:	bf00      	nop
 8007fc8:	cfff69f3 	.word	0xcfff69f3
 8007fcc:	40008000 	.word	0x40008000
 8007fd0:	40013800 	.word	0x40013800
 8007fd4:	40021000 	.word	0x40021000
 8007fd8:	40004400 	.word	0x40004400
 8007fdc:	40004800 	.word	0x40004800
 8007fe0:	40004c00 	.word	0x40004c00
 8007fe4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007ff2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 812a 	beq.w	8008250 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008000:	4a9e      	ldr	r2, [pc, #632]	@ (800827c <UART_SetConfig+0x590>)
 8008002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008006:	461a      	mov	r2, r3
 8008008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800a:	fbb3 f3f2 	udiv	r3, r3, r2
 800800e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	685a      	ldr	r2, [r3, #4]
 8008014:	4613      	mov	r3, r2
 8008016:	005b      	lsls	r3, r3, #1
 8008018:	4413      	add	r3, r2
 800801a:	69ba      	ldr	r2, [r7, #24]
 800801c:	429a      	cmp	r2, r3
 800801e:	d305      	bcc.n	800802c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	429a      	cmp	r2, r3
 800802a:	d903      	bls.n	8008034 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008032:	e10d      	b.n	8008250 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008036:	2200      	movs	r2, #0
 8008038:	60bb      	str	r3, [r7, #8]
 800803a:	60fa      	str	r2, [r7, #12]
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008040:	4a8e      	ldr	r2, [pc, #568]	@ (800827c <UART_SetConfig+0x590>)
 8008042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008046:	b29b      	uxth	r3, r3
 8008048:	2200      	movs	r2, #0
 800804a:	603b      	str	r3, [r7, #0]
 800804c:	607a      	str	r2, [r7, #4]
 800804e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008052:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008056:	f7f8 fe3f 	bl	8000cd8 <__aeabi_uldivmod>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	4610      	mov	r0, r2
 8008060:	4619      	mov	r1, r3
 8008062:	f04f 0200 	mov.w	r2, #0
 8008066:	f04f 0300 	mov.w	r3, #0
 800806a:	020b      	lsls	r3, r1, #8
 800806c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008070:	0202      	lsls	r2, r0, #8
 8008072:	6979      	ldr	r1, [r7, #20]
 8008074:	6849      	ldr	r1, [r1, #4]
 8008076:	0849      	lsrs	r1, r1, #1
 8008078:	2000      	movs	r0, #0
 800807a:	460c      	mov	r4, r1
 800807c:	4605      	mov	r5, r0
 800807e:	eb12 0804 	adds.w	r8, r2, r4
 8008082:	eb43 0905 	adc.w	r9, r3, r5
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	469a      	mov	sl, r3
 800808e:	4693      	mov	fp, r2
 8008090:	4652      	mov	r2, sl
 8008092:	465b      	mov	r3, fp
 8008094:	4640      	mov	r0, r8
 8008096:	4649      	mov	r1, r9
 8008098:	f7f8 fe1e 	bl	8000cd8 <__aeabi_uldivmod>
 800809c:	4602      	mov	r2, r0
 800809e:	460b      	mov	r3, r1
 80080a0:	4613      	mov	r3, r2
 80080a2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080aa:	d308      	bcc.n	80080be <UART_SetConfig+0x3d2>
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080b2:	d204      	bcs.n	80080be <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6a3a      	ldr	r2, [r7, #32]
 80080ba:	60da      	str	r2, [r3, #12]
 80080bc:	e0c8      	b.n	8008250 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80080c4:	e0c4      	b.n	8008250 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	69db      	ldr	r3, [r3, #28]
 80080ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080ce:	d167      	bne.n	80081a0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80080d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80080d4:	2b08      	cmp	r3, #8
 80080d6:	d828      	bhi.n	800812a <UART_SetConfig+0x43e>
 80080d8:	a201      	add	r2, pc, #4	@ (adr r2, 80080e0 <UART_SetConfig+0x3f4>)
 80080da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080de:	bf00      	nop
 80080e0:	08008105 	.word	0x08008105
 80080e4:	0800810d 	.word	0x0800810d
 80080e8:	08008115 	.word	0x08008115
 80080ec:	0800812b 	.word	0x0800812b
 80080f0:	0800811b 	.word	0x0800811b
 80080f4:	0800812b 	.word	0x0800812b
 80080f8:	0800812b 	.word	0x0800812b
 80080fc:	0800812b 	.word	0x0800812b
 8008100:	08008123 	.word	0x08008123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008104:	f7fd f904 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 8008108:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800810a:	e014      	b.n	8008136 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800810c:	f7fd f916 	bl	800533c <HAL_RCC_GetPCLK2Freq>
 8008110:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008112:	e010      	b.n	8008136 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008114:	4b5a      	ldr	r3, [pc, #360]	@ (8008280 <UART_SetConfig+0x594>)
 8008116:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008118:	e00d      	b.n	8008136 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800811a:	f7fd f88d 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 800811e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008120:	e009      	b.n	8008136 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008122:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008126:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008128:	e005      	b.n	8008136 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800812a:	2300      	movs	r3, #0
 800812c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008134:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008138:	2b00      	cmp	r3, #0
 800813a:	f000 8089 	beq.w	8008250 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008142:	4a4e      	ldr	r2, [pc, #312]	@ (800827c <UART_SetConfig+0x590>)
 8008144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008148:	461a      	mov	r2, r3
 800814a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800814c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008150:	005a      	lsls	r2, r3, #1
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	085b      	lsrs	r3, r3, #1
 8008158:	441a      	add	r2, r3
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008162:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	2b0f      	cmp	r3, #15
 8008168:	d916      	bls.n	8008198 <UART_SetConfig+0x4ac>
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008170:	d212      	bcs.n	8008198 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	b29b      	uxth	r3, r3
 8008176:	f023 030f 	bic.w	r3, r3, #15
 800817a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	085b      	lsrs	r3, r3, #1
 8008180:	b29b      	uxth	r3, r3
 8008182:	f003 0307 	and.w	r3, r3, #7
 8008186:	b29a      	uxth	r2, r3
 8008188:	8bfb      	ldrh	r3, [r7, #30]
 800818a:	4313      	orrs	r3, r2
 800818c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	8bfa      	ldrh	r2, [r7, #30]
 8008194:	60da      	str	r2, [r3, #12]
 8008196:	e05b      	b.n	8008250 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800819e:	e057      	b.n	8008250 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80081a4:	2b08      	cmp	r3, #8
 80081a6:	d828      	bhi.n	80081fa <UART_SetConfig+0x50e>
 80081a8:	a201      	add	r2, pc, #4	@ (adr r2, 80081b0 <UART_SetConfig+0x4c4>)
 80081aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ae:	bf00      	nop
 80081b0:	080081d5 	.word	0x080081d5
 80081b4:	080081dd 	.word	0x080081dd
 80081b8:	080081e5 	.word	0x080081e5
 80081bc:	080081fb 	.word	0x080081fb
 80081c0:	080081eb 	.word	0x080081eb
 80081c4:	080081fb 	.word	0x080081fb
 80081c8:	080081fb 	.word	0x080081fb
 80081cc:	080081fb 	.word	0x080081fb
 80081d0:	080081f3 	.word	0x080081f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081d4:	f7fd f89c 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 80081d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081da:	e014      	b.n	8008206 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081dc:	f7fd f8ae 	bl	800533c <HAL_RCC_GetPCLK2Freq>
 80081e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081e2:	e010      	b.n	8008206 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081e4:	4b26      	ldr	r3, [pc, #152]	@ (8008280 <UART_SetConfig+0x594>)
 80081e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081e8:	e00d      	b.n	8008206 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081ea:	f7fd f825 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 80081ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081f0:	e009      	b.n	8008206 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081f8:	e005      	b.n	8008206 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80081fa:	2300      	movs	r3, #0
 80081fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008204:	bf00      	nop
    }

    if (pclk != 0U)
 8008206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008208:	2b00      	cmp	r3, #0
 800820a:	d021      	beq.n	8008250 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008210:	4a1a      	ldr	r2, [pc, #104]	@ (800827c <UART_SetConfig+0x590>)
 8008212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008216:	461a      	mov	r2, r3
 8008218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821a:	fbb3 f2f2 	udiv	r2, r3, r2
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	085b      	lsrs	r3, r3, #1
 8008224:	441a      	add	r2, r3
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	fbb2 f3f3 	udiv	r3, r2, r3
 800822e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008230:	6a3b      	ldr	r3, [r7, #32]
 8008232:	2b0f      	cmp	r3, #15
 8008234:	d909      	bls.n	800824a <UART_SetConfig+0x55e>
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800823c:	d205      	bcs.n	800824a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	b29a      	uxth	r2, r3
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	60da      	str	r2, [r3, #12]
 8008248:	e002      	b.n	8008250 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	2201      	movs	r2, #1
 8008254:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	2201      	movs	r2, #1
 800825c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	2200      	movs	r2, #0
 8008264:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	2200      	movs	r2, #0
 800826a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800826c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008270:	4618      	mov	r0, r3
 8008272:	3730      	adds	r7, #48	@ 0x30
 8008274:	46bd      	mov	sp, r7
 8008276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800827a:	bf00      	nop
 800827c:	0800f674 	.word	0x0800f674
 8008280:	00f42400 	.word	0x00f42400

08008284 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008290:	f003 0308 	and.w	r3, r3, #8
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00a      	beq.n	80082ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	430a      	orrs	r2, r1
 80082ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00a      	beq.n	80082d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	430a      	orrs	r2, r1
 80082ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d4:	f003 0302 	and.w	r3, r3, #2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00a      	beq.n	80082f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	430a      	orrs	r2, r1
 80082f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f6:	f003 0304 	and.w	r3, r3, #4
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00a      	beq.n	8008314 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	430a      	orrs	r2, r1
 8008312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008318:	f003 0310 	and.w	r3, r3, #16
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00a      	beq.n	8008336 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800833a:	f003 0320 	and.w	r3, r3, #32
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00a      	beq.n	8008358 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	430a      	orrs	r2, r1
 8008356:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800835c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008360:	2b00      	cmp	r3, #0
 8008362:	d01a      	beq.n	800839a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	430a      	orrs	r2, r1
 8008378:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800837e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008382:	d10a      	bne.n	800839a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	430a      	orrs	r2, r1
 8008398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800839e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00a      	beq.n	80083bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	430a      	orrs	r2, r1
 80083ba:	605a      	str	r2, [r3, #4]
  }
}
 80083bc:	bf00      	nop
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b098      	sub	sp, #96	@ 0x60
 80083cc:	af02      	add	r7, sp, #8
 80083ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083d8:	f7fa ffb4 	bl	8003344 <HAL_GetTick>
 80083dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0308 	and.w	r3, r3, #8
 80083e8:	2b08      	cmp	r3, #8
 80083ea:	d12f      	bne.n	800844c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083f4:	2200      	movs	r2, #0
 80083f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f88e 	bl	800851c <UART_WaitOnFlagUntilTimeout>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d022      	beq.n	800844c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800840e:	e853 3f00 	ldrex	r3, [r3]
 8008412:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800841a:	653b      	str	r3, [r7, #80]	@ 0x50
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	461a      	mov	r2, r3
 8008422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008424:	647b      	str	r3, [r7, #68]	@ 0x44
 8008426:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008428:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800842a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800842c:	e841 2300 	strex	r3, r2, [r1]
 8008430:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1e6      	bne.n	8008406 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2220      	movs	r2, #32
 800843c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008448:	2303      	movs	r3, #3
 800844a:	e063      	b.n	8008514 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0304 	and.w	r3, r3, #4
 8008456:	2b04      	cmp	r3, #4
 8008458:	d149      	bne.n	80084ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800845a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008462:	2200      	movs	r2, #0
 8008464:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f857 	bl	800851c <UART_WaitOnFlagUntilTimeout>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d03c      	beq.n	80084ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847c:	e853 3f00 	ldrex	r3, [r3]
 8008480:	623b      	str	r3, [r7, #32]
   return(result);
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008488:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	461a      	mov	r2, r3
 8008490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008492:	633b      	str	r3, [r7, #48]	@ 0x30
 8008494:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800849a:	e841 2300 	strex	r3, r2, [r1]
 800849e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1e6      	bne.n	8008474 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3308      	adds	r3, #8
 80084ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	e853 3f00 	ldrex	r3, [r3]
 80084b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f023 0301 	bic.w	r3, r3, #1
 80084bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	3308      	adds	r3, #8
 80084c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084c6:	61fa      	str	r2, [r7, #28]
 80084c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ca:	69b9      	ldr	r1, [r7, #24]
 80084cc:	69fa      	ldr	r2, [r7, #28]
 80084ce:	e841 2300 	strex	r3, r2, [r1]
 80084d2:	617b      	str	r3, [r7, #20]
   return(result);
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1e5      	bne.n	80084a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2220      	movs	r2, #32
 80084de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084ea:	2303      	movs	r3, #3
 80084ec:	e012      	b.n	8008514 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2220      	movs	r2, #32
 80084f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2220      	movs	r2, #32
 80084fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3758      	adds	r7, #88	@ 0x58
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	603b      	str	r3, [r7, #0]
 8008528:	4613      	mov	r3, r2
 800852a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800852c:	e04f      	b.n	80085ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008534:	d04b      	beq.n	80085ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008536:	f7fa ff05 	bl	8003344 <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	69ba      	ldr	r2, [r7, #24]
 8008542:	429a      	cmp	r2, r3
 8008544:	d302      	bcc.n	800854c <UART_WaitOnFlagUntilTimeout+0x30>
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d101      	bne.n	8008550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800854c:	2303      	movs	r3, #3
 800854e:	e04e      	b.n	80085ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0304 	and.w	r3, r3, #4
 800855a:	2b00      	cmp	r3, #0
 800855c:	d037      	beq.n	80085ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	2b80      	cmp	r3, #128	@ 0x80
 8008562:	d034      	beq.n	80085ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	2b40      	cmp	r3, #64	@ 0x40
 8008568:	d031      	beq.n	80085ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	69db      	ldr	r3, [r3, #28]
 8008570:	f003 0308 	and.w	r3, r3, #8
 8008574:	2b08      	cmp	r3, #8
 8008576:	d110      	bne.n	800859a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2208      	movs	r2, #8
 800857e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f000 f920 	bl	80087c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2208      	movs	r2, #8
 800858a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e029      	b.n	80085ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	69db      	ldr	r3, [r3, #28]
 80085a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085a8:	d111      	bne.n	80085ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80085b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f000 f906 	bl	80087c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2220      	movs	r2, #32
 80085be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80085ca:	2303      	movs	r3, #3
 80085cc:	e00f      	b.n	80085ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	69da      	ldr	r2, [r3, #28]
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	4013      	ands	r3, r2
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	429a      	cmp	r2, r3
 80085dc:	bf0c      	ite	eq
 80085de:	2301      	moveq	r3, #1
 80085e0:	2300      	movne	r3, #0
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	461a      	mov	r2, r3
 80085e6:	79fb      	ldrb	r3, [r7, #7]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d0a0      	beq.n	800852e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
	...

080085f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b096      	sub	sp, #88	@ 0x58
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	4613      	mov	r3, r2
 8008604:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	88fa      	ldrh	r2, [r7, #6]
 8008610:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2222      	movs	r2, #34	@ 0x22
 8008620:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800862a:	2b00      	cmp	r3, #0
 800862c:	d02d      	beq.n	800868a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008634:	4a40      	ldr	r2, [pc, #256]	@ (8008738 <UART_Start_Receive_DMA+0x140>)
 8008636:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800863e:	4a3f      	ldr	r2, [pc, #252]	@ (800873c <UART_Start_Receive_DMA+0x144>)
 8008640:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008648:	4a3d      	ldr	r2, [pc, #244]	@ (8008740 <UART_Start_Receive_DMA+0x148>)
 800864a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008652:	2200      	movs	r2, #0
 8008654:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3324      	adds	r3, #36	@ 0x24
 8008662:	4619      	mov	r1, r3
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008668:	461a      	mov	r2, r3
 800866a:	88fb      	ldrh	r3, [r7, #6]
 800866c:	f7fa ff78 	bl	8003560 <HAL_DMA_Start_IT>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d009      	beq.n	800868a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2210      	movs	r2, #16
 800867a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2220      	movs	r2, #32
 8008682:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e051      	b.n	800872e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d018      	beq.n	80086c4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800869a:	e853 3f00 	ldrex	r3, [r3]
 800869e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	461a      	mov	r2, r3
 80086ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086b2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80086b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086b8:	e841 2300 	strex	r3, r2, [r1]
 80086bc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80086be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e6      	bne.n	8008692 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3308      	adds	r3, #8
 80086ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ce:	e853 3f00 	ldrex	r3, [r3]
 80086d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d6:	f043 0301 	orr.w	r3, r3, #1
 80086da:	653b      	str	r3, [r7, #80]	@ 0x50
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3308      	adds	r3, #8
 80086e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80086e4:	637a      	str	r2, [r7, #52]	@ 0x34
 80086e6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80086ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086ec:	e841 2300 	strex	r3, r2, [r1]
 80086f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80086f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1e5      	bne.n	80086c4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	3308      	adds	r3, #8
 80086fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	e853 3f00 	ldrex	r3, [r3]
 8008706:	613b      	str	r3, [r7, #16]
   return(result);
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800870e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	3308      	adds	r3, #8
 8008716:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008718:	623a      	str	r2, [r7, #32]
 800871a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871c:	69f9      	ldr	r1, [r7, #28]
 800871e:	6a3a      	ldr	r2, [r7, #32]
 8008720:	e841 2300 	strex	r3, r2, [r1]
 8008724:	61bb      	str	r3, [r7, #24]
   return(result);
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e5      	bne.n	80086f8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3758      	adds	r7, #88	@ 0x58
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	08008893 	.word	0x08008893
 800873c:	080089bf 	.word	0x080089bf
 8008740:	080089fd 	.word	0x080089fd

08008744 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008744:	b480      	push	{r7}
 8008746:	b08f      	sub	sp, #60	@ 0x3c
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008752:	6a3b      	ldr	r3, [r7, #32]
 8008754:	e853 3f00 	ldrex	r3, [r3]
 8008758:	61fb      	str	r3, [r7, #28]
   return(result);
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008760:	637b      	str	r3, [r7, #52]	@ 0x34
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	461a      	mov	r2, r3
 8008768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800876a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800876c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008770:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008772:	e841 2300 	strex	r3, r2, [r1]
 8008776:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1e6      	bne.n	800874c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3308      	adds	r3, #8
 8008784:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	e853 3f00 	ldrex	r3, [r3]
 800878c:	60bb      	str	r3, [r7, #8]
   return(result);
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008794:	633b      	str	r3, [r7, #48]	@ 0x30
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	3308      	adds	r3, #8
 800879c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800879e:	61ba      	str	r2, [r7, #24]
 80087a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a2:	6979      	ldr	r1, [r7, #20]
 80087a4:	69ba      	ldr	r2, [r7, #24]
 80087a6:	e841 2300 	strex	r3, r2, [r1]
 80087aa:	613b      	str	r3, [r7, #16]
   return(result);
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1e5      	bne.n	800877e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2220      	movs	r2, #32
 80087b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80087ba:	bf00      	nop
 80087bc:	373c      	adds	r7, #60	@ 0x3c
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b095      	sub	sp, #84	@ 0x54
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087d6:	e853 3f00 	ldrex	r3, [r3]
 80087da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	461a      	mov	r2, r3
 80087ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80087ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087f4:	e841 2300 	strex	r3, r2, [r1]
 80087f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1e6      	bne.n	80087ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	3308      	adds	r3, #8
 8008806:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008808:	6a3b      	ldr	r3, [r7, #32]
 800880a:	e853 3f00 	ldrex	r3, [r3]
 800880e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008816:	f023 0301 	bic.w	r3, r3, #1
 800881a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3308      	adds	r3, #8
 8008822:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008824:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008826:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008828:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800882a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800882c:	e841 2300 	strex	r3, r2, [r1]
 8008830:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1e3      	bne.n	8008800 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800883c:	2b01      	cmp	r3, #1
 800883e:	d118      	bne.n	8008872 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	e853 3f00 	ldrex	r3, [r3]
 800884c:	60bb      	str	r3, [r7, #8]
   return(result);
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	f023 0310 	bic.w	r3, r3, #16
 8008854:	647b      	str	r3, [r7, #68]	@ 0x44
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	461a      	mov	r2, r3
 800885c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800885e:	61bb      	str	r3, [r7, #24]
 8008860:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008862:	6979      	ldr	r1, [r7, #20]
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	e841 2300 	strex	r3, r2, [r1]
 800886a:	613b      	str	r3, [r7, #16]
   return(result);
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1e6      	bne.n	8008840 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2220      	movs	r2, #32
 8008876:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008886:	bf00      	nop
 8008888:	3754      	adds	r7, #84	@ 0x54
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr

08008892 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b09c      	sub	sp, #112	@ 0x70
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800889e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0320 	and.w	r3, r3, #32
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d171      	bne.n	8008992 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80088ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088b0:	2200      	movs	r2, #0
 80088b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088be:	e853 3f00 	ldrex	r3, [r3]
 80088c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	461a      	mov	r2, r3
 80088d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088d6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088dc:	e841 2300 	strex	r3, r2, [r1]
 80088e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1e6      	bne.n	80088b6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3308      	adds	r3, #8
 80088ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f2:	e853 3f00 	ldrex	r3, [r3]
 80088f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088fa:	f023 0301 	bic.w	r3, r3, #1
 80088fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8008900:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3308      	adds	r3, #8
 8008906:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008908:	647a      	str	r2, [r7, #68]	@ 0x44
 800890a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800890e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008910:	e841 2300 	strex	r3, r2, [r1]
 8008914:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1e5      	bne.n	80088e8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800891c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3308      	adds	r3, #8
 8008922:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008926:	e853 3f00 	ldrex	r3, [r3]
 800892a:	623b      	str	r3, [r7, #32]
   return(result);
 800892c:	6a3b      	ldr	r3, [r7, #32]
 800892e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008932:	663b      	str	r3, [r7, #96]	@ 0x60
 8008934:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	3308      	adds	r3, #8
 800893a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800893c:	633a      	str	r2, [r7, #48]	@ 0x30
 800893e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008940:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008942:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008944:	e841 2300 	strex	r3, r2, [r1]
 8008948:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800894a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1e5      	bne.n	800891c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008950:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008952:	2220      	movs	r2, #32
 8008954:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008958:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800895a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800895c:	2b01      	cmp	r3, #1
 800895e:	d118      	bne.n	8008992 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008960:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	e853 3f00 	ldrex	r3, [r3]
 800896c:	60fb      	str	r3, [r7, #12]
   return(result);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f023 0310 	bic.w	r3, r3, #16
 8008974:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008976:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	461a      	mov	r2, r3
 800897c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800897e:	61fb      	str	r3, [r7, #28]
 8008980:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008982:	69b9      	ldr	r1, [r7, #24]
 8008984:	69fa      	ldr	r2, [r7, #28]
 8008986:	e841 2300 	strex	r3, r2, [r1]
 800898a:	617b      	str	r3, [r7, #20]
   return(result);
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1e6      	bne.n	8008960 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008994:	2200      	movs	r2, #0
 8008996:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008998:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800899a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800899c:	2b01      	cmp	r3, #1
 800899e:	d107      	bne.n	80089b0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80089a6:	4619      	mov	r1, r3
 80089a8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80089aa:	f7ff f993 	bl	8007cd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80089ae:	e002      	b.n	80089b6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80089b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80089b2:	f7f9 fdf7 	bl	80025a4 <HAL_UART_RxCpltCallback>
}
 80089b6:	bf00      	nop
 80089b8:	3770      	adds	r7, #112	@ 0x70
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ca:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2201      	movs	r2, #1
 80089d0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d109      	bne.n	80089ee <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80089e0:	085b      	lsrs	r3, r3, #1
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	4619      	mov	r1, r3
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f7ff f974 	bl	8007cd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80089ec:	e002      	b.n	80089f4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f7ff f95c 	bl	8007cac <HAL_UART_RxHalfCpltCallback>
}
 80089f4:	bf00      	nop
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a08:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a10:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a18:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a24:	2b80      	cmp	r3, #128	@ 0x80
 8008a26:	d109      	bne.n	8008a3c <UART_DMAError+0x40>
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	2b21      	cmp	r3, #33	@ 0x21
 8008a2c:	d106      	bne.n	8008a3c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008a36:	6978      	ldr	r0, [r7, #20]
 8008a38:	f7ff fe84 	bl	8008744 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a46:	2b40      	cmp	r3, #64	@ 0x40
 8008a48:	d109      	bne.n	8008a5e <UART_DMAError+0x62>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2b22      	cmp	r3, #34	@ 0x22
 8008a4e:	d106      	bne.n	8008a5e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008a58:	6978      	ldr	r0, [r7, #20]
 8008a5a:	f7ff feb4 	bl	80087c6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a64:	f043 0210 	orr.w	r2, r3, #16
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a6e:	6978      	ldr	r0, [r7, #20]
 8008a70:	f7ff f926 	bl	8007cc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a74:	bf00      	nop
 8008a76:	3718      	adds	r7, #24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f7ff f914 	bl	8007cc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a98:	bf00      	nop
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	e853 3f00 	ldrex	r3, [r3]
 8008ab4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008abc:	61fb      	str	r3, [r7, #28]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	61bb      	str	r3, [r7, #24]
 8008ac8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aca:	6979      	ldr	r1, [r7, #20]
 8008acc:	69ba      	ldr	r2, [r7, #24]
 8008ace:	e841 2300 	strex	r3, r2, [r1]
 8008ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1e6      	bne.n	8008aa8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2220      	movs	r2, #32
 8008ade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f7ff f8d5 	bl	8007c98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008aee:	bf00      	nop
 8008af0:	3720      	adds	r7, #32
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008af6:	b480      	push	{r7}
 8008af8:	b083      	sub	sp, #12
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008afe:	bf00      	nop
 8008b00:	370c      	adds	r7, #12
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	b083      	sub	sp, #12
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008b12:	bf00      	nop
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008b26:	bf00      	nop
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b085      	sub	sp, #20
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d101      	bne.n	8008b48 <HAL_UARTEx_DisableFifoMode+0x16>
 8008b44:	2302      	movs	r3, #2
 8008b46:	e027      	b.n	8008b98 <HAL_UARTEx_DisableFifoMode+0x66>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2224      	movs	r2, #36	@ 0x24
 8008b54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f022 0201 	bic.w	r2, r2, #1
 8008b6e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008b76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2220      	movs	r2, #32
 8008b8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3714      	adds	r7, #20
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d101      	bne.n	8008bbc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008bb8:	2302      	movs	r3, #2
 8008bba:	e02d      	b.n	8008c18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2224      	movs	r2, #36	@ 0x24
 8008bc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f022 0201 	bic.w	r2, r2, #1
 8008be2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	683a      	ldr	r2, [r7, #0]
 8008bf4:	430a      	orrs	r2, r1
 8008bf6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f84f 	bl	8008c9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2220      	movs	r2, #32
 8008c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d101      	bne.n	8008c38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c34:	2302      	movs	r3, #2
 8008c36:	e02d      	b.n	8008c94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2224      	movs	r2, #36	@ 0x24
 8008c44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f022 0201 	bic.w	r2, r2, #1
 8008c5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	430a      	orrs	r2, r1
 8008c72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f811 	bl	8008c9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2220      	movs	r2, #32
 8008c86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d108      	bne.n	8008cbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008cbc:	e031      	b.n	8008d22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008cbe:	2308      	movs	r3, #8
 8008cc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008cc2:	2308      	movs	r3, #8
 8008cc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	0e5b      	lsrs	r3, r3, #25
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	f003 0307 	and.w	r3, r3, #7
 8008cd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	0f5b      	lsrs	r3, r3, #29
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	f003 0307 	and.w	r3, r3, #7
 8008ce4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ce6:	7bbb      	ldrb	r3, [r7, #14]
 8008ce8:	7b3a      	ldrb	r2, [r7, #12]
 8008cea:	4911      	ldr	r1, [pc, #68]	@ (8008d30 <UARTEx_SetNbDataToProcess+0x94>)
 8008cec:	5c8a      	ldrb	r2, [r1, r2]
 8008cee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008cf2:	7b3a      	ldrb	r2, [r7, #12]
 8008cf4:	490f      	ldr	r1, [pc, #60]	@ (8008d34 <UARTEx_SetNbDataToProcess+0x98>)
 8008cf6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cf8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
 8008d06:	7b7a      	ldrb	r2, [r7, #13]
 8008d08:	4909      	ldr	r1, [pc, #36]	@ (8008d30 <UARTEx_SetNbDataToProcess+0x94>)
 8008d0a:	5c8a      	ldrb	r2, [r1, r2]
 8008d0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d10:	7b7a      	ldrb	r2, [r7, #13]
 8008d12:	4908      	ldr	r1, [pc, #32]	@ (8008d34 <UARTEx_SetNbDataToProcess+0x98>)
 8008d14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d16:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008d22:	bf00      	nop
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	0800f68c 	.word	0x0800f68c
 8008d34:	0800f694 	.word	0x0800f694

08008d38 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	4603      	mov	r3, r0
 8008d40:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008d42:	2300      	movs	r3, #0
 8008d44:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d4a:	2b84      	cmp	r3, #132	@ 0x84
 8008d4c:	d005      	beq.n	8008d5a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008d4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	4413      	add	r3, r2
 8008d56:	3303      	adds	r3, #3
 8008d58:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3714      	adds	r7, #20
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008d6c:	f000 fa74 	bl	8009258 <vTaskStartScheduler>
  
  return osOK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008d76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d78:	b087      	sub	sp, #28
 8008d7a:	af02      	add	r7, sp, #8
 8008d7c:	6078      	str	r0, [r7, #4]
 8008d7e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685c      	ldr	r4, [r3, #4]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d8c:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7ff ffcf 	bl	8008d38 <makeFreeRtosPriority>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	f107 030c 	add.w	r3, r7, #12
 8008da0:	9301      	str	r3, [sp, #4]
 8008da2:	9200      	str	r2, [sp, #0]
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	4632      	mov	r2, r6
 8008da8:	4629      	mov	r1, r5
 8008daa:	4620      	mov	r0, r4
 8008dac:	f000 f8d2 	bl	8008f54 <xTaskCreate>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d001      	beq.n	8008dba <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8008db6:	2300      	movs	r3, #0
 8008db8:	e000      	b.n	8008dbc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8008dba:	68fb      	ldr	r3, [r7, #12]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3714      	adds	r7, #20
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008dc4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <osDelay+0x16>
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	e000      	b.n	8008ddc <osDelay+0x18>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 fa05 	bl	80091ec <vTaskDelay>
  
  return osOK;
 8008de2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f103 0208 	add.w	r2, r3, #8
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f04f 32ff 	mov.w	r2, #4294967295
 8008e04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f103 0208 	add.w	r2, r3, #8
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f103 0208 	add.w	r2, r3, #8
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008e3a:	bf00      	nop
 8008e3c:	370c      	adds	r7, #12
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e46:	b480      	push	{r7}
 8008e48:	b085      	sub	sp, #20
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	689a      	ldr	r2, [r3, #8]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	683a      	ldr	r2, [r7, #0]
 8008e6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	1c5a      	adds	r2, r3, #1
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	601a      	str	r2, [r3, #0]
}
 8008e82:	bf00      	nop
 8008e84:	3714      	adds	r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e8e:	b480      	push	{r7}
 8008e90:	b085      	sub	sp, #20
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ea4:	d103      	bne.n	8008eae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	60fb      	str	r3, [r7, #12]
 8008eac:	e00c      	b.n	8008ec8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	3308      	adds	r3, #8
 8008eb2:	60fb      	str	r3, [r7, #12]
 8008eb4:	e002      	b.n	8008ebc <vListInsert+0x2e>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	60fb      	str	r3, [r7, #12]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68ba      	ldr	r2, [r7, #8]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d2f6      	bcs.n	8008eb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	683a      	ldr	r2, [r7, #0]
 8008ed6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	1c5a      	adds	r2, r3, #1
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	601a      	str	r2, [r3, #0]
}
 8008ef4:	bf00      	nop
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	691b      	ldr	r3, [r3, #16]
 8008f0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	6892      	ldr	r2, [r2, #8]
 8008f16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	6852      	ldr	r2, [r2, #4]
 8008f20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d103      	bne.n	8008f34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	689a      	ldr	r2, [r3, #8]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	1e5a      	subs	r2, r3, #1
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3714      	adds	r7, #20
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b08c      	sub	sp, #48	@ 0x30
 8008f58:	af04      	add	r7, sp, #16
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	603b      	str	r3, [r7, #0]
 8008f60:	4613      	mov	r3, r2
 8008f62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008f64:	88fb      	ldrh	r3, [r7, #6]
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f001 f9ef 	bl	800a34c <pvPortMalloc>
 8008f6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00e      	beq.n	8008f94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f76:	20a0      	movs	r0, #160	@ 0xa0
 8008f78:	f001 f9e8 	bl	800a34c <pvPortMalloc>
 8008f7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f8a:	e005      	b.n	8008f98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f8c:	6978      	ldr	r0, [r7, #20]
 8008f8e:	f001 faab 	bl	800a4e8 <vPortFree>
 8008f92:	e001      	b.n	8008f98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f94:	2300      	movs	r3, #0
 8008f96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d013      	beq.n	8008fc6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f9e:	88fa      	ldrh	r2, [r7, #6]
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	9303      	str	r3, [sp, #12]
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	9302      	str	r3, [sp, #8]
 8008fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008faa:	9301      	str	r3, [sp, #4]
 8008fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	68b9      	ldr	r1, [r7, #8]
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f000 f80f 	bl	8008fd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fba:	69f8      	ldr	r0, [r7, #28]
 8008fbc:	f000 f8ac 	bl	8009118 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	61bb      	str	r3, [r7, #24]
 8008fc4:	e002      	b.n	8008fcc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8008fca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008fcc:	69bb      	ldr	r3, [r7, #24]
	}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3720      	adds	r7, #32
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
	...

08008fd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b088      	sub	sp, #32
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
 8008fe4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	4413      	add	r3, r2
 8008ff6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	f023 0307 	bic.w	r3, r3, #7
 8008ffe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	f003 0307 	and.w	r3, r3, #7
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00b      	beq.n	8009022 <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800900a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800901c:	bf00      	nop
 800901e:	bf00      	nop
 8009020:	e7fd      	b.n	800901e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d01f      	beq.n	8009068 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009028:	2300      	movs	r3, #0
 800902a:	61fb      	str	r3, [r7, #28]
 800902c:	e012      	b.n	8009054 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	4413      	add	r3, r2
 8009034:	7819      	ldrb	r1, [r3, #0]
 8009036:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	4413      	add	r3, r2
 800903c:	3334      	adds	r3, #52	@ 0x34
 800903e:	460a      	mov	r2, r1
 8009040:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	4413      	add	r3, r2
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d006      	beq.n	800905c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	3301      	adds	r3, #1
 8009052:	61fb      	str	r3, [r7, #28]
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	2b0f      	cmp	r3, #15
 8009058:	d9e9      	bls.n	800902e <prvInitialiseNewTask+0x56>
 800905a:	e000      	b.n	800905e <prvInitialiseNewTask+0x86>
			{
				break;
 800905c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800905e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009060:	2200      	movs	r2, #0
 8009062:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009066:	e003      	b.n	8009070 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800906a:	2200      	movs	r2, #0
 800906c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009072:	2b06      	cmp	r3, #6
 8009074:	d901      	bls.n	800907a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009076:	2306      	movs	r3, #6
 8009078:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800907a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800907e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009082:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009084:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009088:	2200      	movs	r2, #0
 800908a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800908c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908e:	3304      	adds	r3, #4
 8009090:	4618      	mov	r0, r3
 8009092:	f7ff fecb 	bl	8008e2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009098:	3318      	adds	r3, #24
 800909a:	4618      	mov	r0, r3
 800909c:	f7ff fec6 	bl	8008e2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80090a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a8:	f1c3 0207 	rsb	r2, r3, #7
 80090ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80090b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090b4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80090b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b8:	2200      	movs	r2, #0
 80090ba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80090c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c8:	334c      	adds	r3, #76	@ 0x4c
 80090ca:	224c      	movs	r2, #76	@ 0x4c
 80090cc:	2100      	movs	r1, #0
 80090ce:	4618      	mov	r0, r3
 80090d0:	f002 fbc0 	bl	800b854 <memset>
 80090d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d6:	4a0d      	ldr	r2, [pc, #52]	@ (800910c <prvInitialiseNewTask+0x134>)
 80090d8:	651a      	str	r2, [r3, #80]	@ 0x50
 80090da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090dc:	4a0c      	ldr	r2, [pc, #48]	@ (8009110 <prvInitialiseNewTask+0x138>)
 80090de:	655a      	str	r2, [r3, #84]	@ 0x54
 80090e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e2:	4a0c      	ldr	r2, [pc, #48]	@ (8009114 <prvInitialiseNewTask+0x13c>)
 80090e4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	68f9      	ldr	r1, [r7, #12]
 80090ea:	69b8      	ldr	r0, [r7, #24]
 80090ec:	f000 fedc 	bl	8009ea8 <pxPortInitialiseStack>
 80090f0:	4602      	mov	r2, r0
 80090f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80090f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d002      	beq.n	8009102 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80090fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009100:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009102:	bf00      	nop
 8009104:	3720      	adds	r7, #32
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	20003b34 	.word	0x20003b34
 8009110:	20003b9c 	.word	0x20003b9c
 8009114:	20003c04 	.word	0x20003c04

08009118 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009120:	f000 fff2 	bl	800a108 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009124:	4b2a      	ldr	r3, [pc, #168]	@ (80091d0 <prvAddNewTaskToReadyList+0xb8>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	3301      	adds	r3, #1
 800912a:	4a29      	ldr	r2, [pc, #164]	@ (80091d0 <prvAddNewTaskToReadyList+0xb8>)
 800912c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800912e:	4b29      	ldr	r3, [pc, #164]	@ (80091d4 <prvAddNewTaskToReadyList+0xbc>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d109      	bne.n	800914a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009136:	4a27      	ldr	r2, [pc, #156]	@ (80091d4 <prvAddNewTaskToReadyList+0xbc>)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800913c:	4b24      	ldr	r3, [pc, #144]	@ (80091d0 <prvAddNewTaskToReadyList+0xb8>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d110      	bne.n	8009166 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009144:	f000 fabc 	bl	80096c0 <prvInitialiseTaskLists>
 8009148:	e00d      	b.n	8009166 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800914a:	4b23      	ldr	r3, [pc, #140]	@ (80091d8 <prvAddNewTaskToReadyList+0xc0>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d109      	bne.n	8009166 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009152:	4b20      	ldr	r3, [pc, #128]	@ (80091d4 <prvAddNewTaskToReadyList+0xbc>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800915c:	429a      	cmp	r2, r3
 800915e:	d802      	bhi.n	8009166 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009160:	4a1c      	ldr	r2, [pc, #112]	@ (80091d4 <prvAddNewTaskToReadyList+0xbc>)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009166:	4b1d      	ldr	r3, [pc, #116]	@ (80091dc <prvAddNewTaskToReadyList+0xc4>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3301      	adds	r3, #1
 800916c:	4a1b      	ldr	r2, [pc, #108]	@ (80091dc <prvAddNewTaskToReadyList+0xc4>)
 800916e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009174:	2201      	movs	r2, #1
 8009176:	409a      	lsls	r2, r3
 8009178:	4b19      	ldr	r3, [pc, #100]	@ (80091e0 <prvAddNewTaskToReadyList+0xc8>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4313      	orrs	r3, r2
 800917e:	4a18      	ldr	r2, [pc, #96]	@ (80091e0 <prvAddNewTaskToReadyList+0xc8>)
 8009180:	6013      	str	r3, [r2, #0]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009186:	4613      	mov	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	4a15      	ldr	r2, [pc, #84]	@ (80091e4 <prvAddNewTaskToReadyList+0xcc>)
 8009190:	441a      	add	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	3304      	adds	r3, #4
 8009196:	4619      	mov	r1, r3
 8009198:	4610      	mov	r0, r2
 800919a:	f7ff fe54 	bl	8008e46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800919e:	f000 ffe5 	bl	800a16c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80091a2:	4b0d      	ldr	r3, [pc, #52]	@ (80091d8 <prvAddNewTaskToReadyList+0xc0>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00e      	beq.n	80091c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80091aa:	4b0a      	ldr	r3, [pc, #40]	@ (80091d4 <prvAddNewTaskToReadyList+0xbc>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d207      	bcs.n	80091c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80091b8:	4b0b      	ldr	r3, [pc, #44]	@ (80091e8 <prvAddNewTaskToReadyList+0xd0>)
 80091ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091be:	601a      	str	r2, [r3, #0]
 80091c0:	f3bf 8f4f 	dsb	sy
 80091c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091c8:	bf00      	nop
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	200013d0 	.word	0x200013d0
 80091d4:	200012d0 	.word	0x200012d0
 80091d8:	200013dc 	.word	0x200013dc
 80091dc:	200013ec 	.word	0x200013ec
 80091e0:	200013d8 	.word	0x200013d8
 80091e4:	200012d4 	.word	0x200012d4
 80091e8:	e000ed04 	.word	0xe000ed04

080091ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80091f4:	2300      	movs	r3, #0
 80091f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d018      	beq.n	8009230 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80091fe:	4b14      	ldr	r3, [pc, #80]	@ (8009250 <vTaskDelay+0x64>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00b      	beq.n	800921e <vTaskDelay+0x32>
	__asm volatile
 8009206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920a:	f383 8811 	msr	BASEPRI, r3
 800920e:	f3bf 8f6f 	isb	sy
 8009212:	f3bf 8f4f 	dsb	sy
 8009216:	60bb      	str	r3, [r7, #8]
}
 8009218:	bf00      	nop
 800921a:	bf00      	nop
 800921c:	e7fd      	b.n	800921a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800921e:	f000 f86d 	bl	80092fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009222:	2100      	movs	r1, #0
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fdd9 	bl	8009ddc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800922a:	f000 f875 	bl	8009318 <xTaskResumeAll>
 800922e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d107      	bne.n	8009246 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009236:	4b07      	ldr	r3, [pc, #28]	@ (8009254 <vTaskDelay+0x68>)
 8009238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800923c:	601a      	str	r2, [r3, #0]
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009246:	bf00      	nop
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	200013f8 	.word	0x200013f8
 8009254:	e000ed04 	.word	0xe000ed04

08009258 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800925e:	4b1f      	ldr	r3, [pc, #124]	@ (80092dc <vTaskStartScheduler+0x84>)
 8009260:	9301      	str	r3, [sp, #4]
 8009262:	2300      	movs	r3, #0
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	2300      	movs	r3, #0
 8009268:	2280      	movs	r2, #128	@ 0x80
 800926a:	491d      	ldr	r1, [pc, #116]	@ (80092e0 <vTaskStartScheduler+0x88>)
 800926c:	481d      	ldr	r0, [pc, #116]	@ (80092e4 <vTaskStartScheduler+0x8c>)
 800926e:	f7ff fe71 	bl	8008f54 <xTaskCreate>
 8009272:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d11b      	bne.n	80092b2 <vTaskStartScheduler+0x5a>
	__asm volatile
 800927a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800927e:	f383 8811 	msr	BASEPRI, r3
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	60bb      	str	r3, [r7, #8]
}
 800928c:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800928e:	4b16      	ldr	r3, [pc, #88]	@ (80092e8 <vTaskStartScheduler+0x90>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	334c      	adds	r3, #76	@ 0x4c
 8009294:	4a15      	ldr	r2, [pc, #84]	@ (80092ec <vTaskStartScheduler+0x94>)
 8009296:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009298:	4b15      	ldr	r3, [pc, #84]	@ (80092f0 <vTaskStartScheduler+0x98>)
 800929a:	f04f 32ff 	mov.w	r2, #4294967295
 800929e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80092a0:	4b14      	ldr	r3, [pc, #80]	@ (80092f4 <vTaskStartScheduler+0x9c>)
 80092a2:	2201      	movs	r2, #1
 80092a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80092a6:	4b14      	ldr	r3, [pc, #80]	@ (80092f8 <vTaskStartScheduler+0xa0>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80092ac:	f000 fe88 	bl	8009fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80092b0:	e00f      	b.n	80092d2 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b8:	d10b      	bne.n	80092d2 <vTaskStartScheduler+0x7a>
	__asm volatile
 80092ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092be:	f383 8811 	msr	BASEPRI, r3
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	607b      	str	r3, [r7, #4]
}
 80092cc:	bf00      	nop
 80092ce:	bf00      	nop
 80092d0:	e7fd      	b.n	80092ce <vTaskStartScheduler+0x76>
}
 80092d2:	bf00      	nop
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	200013f4 	.word	0x200013f4
 80092e0:	0800f654 	.word	0x0800f654
 80092e4:	08009691 	.word	0x08009691
 80092e8:	200012d0 	.word	0x200012d0
 80092ec:	2000001c 	.word	0x2000001c
 80092f0:	200013f0 	.word	0x200013f0
 80092f4:	200013dc 	.word	0x200013dc
 80092f8:	200013d4 	.word	0x200013d4

080092fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80092fc:	b480      	push	{r7}
 80092fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009300:	4b04      	ldr	r3, [pc, #16]	@ (8009314 <vTaskSuspendAll+0x18>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	3301      	adds	r3, #1
 8009306:	4a03      	ldr	r2, [pc, #12]	@ (8009314 <vTaskSuspendAll+0x18>)
 8009308:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800930a:	bf00      	nop
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr
 8009314:	200013f8 	.word	0x200013f8

08009318 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800931e:	2300      	movs	r3, #0
 8009320:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009322:	2300      	movs	r3, #0
 8009324:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009326:	4b42      	ldr	r3, [pc, #264]	@ (8009430 <xTaskResumeAll+0x118>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d10b      	bne.n	8009346 <xTaskResumeAll+0x2e>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	603b      	str	r3, [r7, #0]
}
 8009340:	bf00      	nop
 8009342:	bf00      	nop
 8009344:	e7fd      	b.n	8009342 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009346:	f000 fedf 	bl	800a108 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800934a:	4b39      	ldr	r3, [pc, #228]	@ (8009430 <xTaskResumeAll+0x118>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3b01      	subs	r3, #1
 8009350:	4a37      	ldr	r2, [pc, #220]	@ (8009430 <xTaskResumeAll+0x118>)
 8009352:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009354:	4b36      	ldr	r3, [pc, #216]	@ (8009430 <xTaskResumeAll+0x118>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d161      	bne.n	8009420 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800935c:	4b35      	ldr	r3, [pc, #212]	@ (8009434 <xTaskResumeAll+0x11c>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d05d      	beq.n	8009420 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009364:	e02e      	b.n	80093c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009366:	4b34      	ldr	r3, [pc, #208]	@ (8009438 <xTaskResumeAll+0x120>)
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	3318      	adds	r3, #24
 8009372:	4618      	mov	r0, r3
 8009374:	f7ff fdc4 	bl	8008f00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	3304      	adds	r3, #4
 800937c:	4618      	mov	r0, r3
 800937e:	f7ff fdbf 	bl	8008f00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009386:	2201      	movs	r2, #1
 8009388:	409a      	lsls	r2, r3
 800938a:	4b2c      	ldr	r3, [pc, #176]	@ (800943c <xTaskResumeAll+0x124>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4313      	orrs	r3, r2
 8009390:	4a2a      	ldr	r2, [pc, #168]	@ (800943c <xTaskResumeAll+0x124>)
 8009392:	6013      	str	r3, [r2, #0]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009398:	4613      	mov	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	4413      	add	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	4a27      	ldr	r2, [pc, #156]	@ (8009440 <xTaskResumeAll+0x128>)
 80093a2:	441a      	add	r2, r3
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	3304      	adds	r3, #4
 80093a8:	4619      	mov	r1, r3
 80093aa:	4610      	mov	r0, r2
 80093ac:	f7ff fd4b 	bl	8008e46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093b4:	4b23      	ldr	r3, [pc, #140]	@ (8009444 <xTaskResumeAll+0x12c>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d302      	bcc.n	80093c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80093be:	4b22      	ldr	r3, [pc, #136]	@ (8009448 <xTaskResumeAll+0x130>)
 80093c0:	2201      	movs	r2, #1
 80093c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093c4:	4b1c      	ldr	r3, [pc, #112]	@ (8009438 <xTaskResumeAll+0x120>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1cc      	bne.n	8009366 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d001      	beq.n	80093d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093d2:	f000 f9f9 	bl	80097c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80093d6:	4b1d      	ldr	r3, [pc, #116]	@ (800944c <xTaskResumeAll+0x134>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d010      	beq.n	8009404 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80093e2:	f000 f837 	bl	8009454 <xTaskIncrementTick>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d002      	beq.n	80093f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80093ec:	4b16      	ldr	r3, [pc, #88]	@ (8009448 <xTaskResumeAll+0x130>)
 80093ee:	2201      	movs	r2, #1
 80093f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d1f1      	bne.n	80093e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80093fe:	4b13      	ldr	r3, [pc, #76]	@ (800944c <xTaskResumeAll+0x134>)
 8009400:	2200      	movs	r2, #0
 8009402:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009404:	4b10      	ldr	r3, [pc, #64]	@ (8009448 <xTaskResumeAll+0x130>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d009      	beq.n	8009420 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800940c:	2301      	movs	r3, #1
 800940e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009410:	4b0f      	ldr	r3, [pc, #60]	@ (8009450 <xTaskResumeAll+0x138>)
 8009412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009416:	601a      	str	r2, [r3, #0]
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009420:	f000 fea4 	bl	800a16c <vPortExitCritical>

	return xAlreadyYielded;
 8009424:	68bb      	ldr	r3, [r7, #8]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	200013f8 	.word	0x200013f8
 8009434:	200013d0 	.word	0x200013d0
 8009438:	20001390 	.word	0x20001390
 800943c:	200013d8 	.word	0x200013d8
 8009440:	200012d4 	.word	0x200012d4
 8009444:	200012d0 	.word	0x200012d0
 8009448:	200013e4 	.word	0x200013e4
 800944c:	200013e0 	.word	0x200013e0
 8009450:	e000ed04 	.word	0xe000ed04

08009454 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b086      	sub	sp, #24
 8009458:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800945a:	2300      	movs	r3, #0
 800945c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800945e:	4b4f      	ldr	r3, [pc, #316]	@ (800959c <xTaskIncrementTick+0x148>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	f040 808f 	bne.w	8009586 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009468:	4b4d      	ldr	r3, [pc, #308]	@ (80095a0 <xTaskIncrementTick+0x14c>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3301      	adds	r3, #1
 800946e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009470:	4a4b      	ldr	r2, [pc, #300]	@ (80095a0 <xTaskIncrementTick+0x14c>)
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d121      	bne.n	80094c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800947c:	4b49      	ldr	r3, [pc, #292]	@ (80095a4 <xTaskIncrementTick+0x150>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00b      	beq.n	800949e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	603b      	str	r3, [r7, #0]
}
 8009498:	bf00      	nop
 800949a:	bf00      	nop
 800949c:	e7fd      	b.n	800949a <xTaskIncrementTick+0x46>
 800949e:	4b41      	ldr	r3, [pc, #260]	@ (80095a4 <xTaskIncrementTick+0x150>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	60fb      	str	r3, [r7, #12]
 80094a4:	4b40      	ldr	r3, [pc, #256]	@ (80095a8 <xTaskIncrementTick+0x154>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a3e      	ldr	r2, [pc, #248]	@ (80095a4 <xTaskIncrementTick+0x150>)
 80094aa:	6013      	str	r3, [r2, #0]
 80094ac:	4a3e      	ldr	r2, [pc, #248]	@ (80095a8 <xTaskIncrementTick+0x154>)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6013      	str	r3, [r2, #0]
 80094b2:	4b3e      	ldr	r3, [pc, #248]	@ (80095ac <xTaskIncrementTick+0x158>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	3301      	adds	r3, #1
 80094b8:	4a3c      	ldr	r2, [pc, #240]	@ (80095ac <xTaskIncrementTick+0x158>)
 80094ba:	6013      	str	r3, [r2, #0]
 80094bc:	f000 f984 	bl	80097c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80094c0:	4b3b      	ldr	r3, [pc, #236]	@ (80095b0 <xTaskIncrementTick+0x15c>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	693a      	ldr	r2, [r7, #16]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d348      	bcc.n	800955c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094ca:	4b36      	ldr	r3, [pc, #216]	@ (80095a4 <xTaskIncrementTick+0x150>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d104      	bne.n	80094de <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094d4:	4b36      	ldr	r3, [pc, #216]	@ (80095b0 <xTaskIncrementTick+0x15c>)
 80094d6:	f04f 32ff 	mov.w	r2, #4294967295
 80094da:	601a      	str	r2, [r3, #0]
					break;
 80094dc:	e03e      	b.n	800955c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094de:	4b31      	ldr	r3, [pc, #196]	@ (80095a4 <xTaskIncrementTick+0x150>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d203      	bcs.n	80094fe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80094f6:	4a2e      	ldr	r2, [pc, #184]	@ (80095b0 <xTaskIncrementTick+0x15c>)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80094fc:	e02e      	b.n	800955c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	3304      	adds	r3, #4
 8009502:	4618      	mov	r0, r3
 8009504:	f7ff fcfc 	bl	8008f00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800950c:	2b00      	cmp	r3, #0
 800950e:	d004      	beq.n	800951a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	3318      	adds	r3, #24
 8009514:	4618      	mov	r0, r3
 8009516:	f7ff fcf3 	bl	8008f00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800951e:	2201      	movs	r2, #1
 8009520:	409a      	lsls	r2, r3
 8009522:	4b24      	ldr	r3, [pc, #144]	@ (80095b4 <xTaskIncrementTick+0x160>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4313      	orrs	r3, r2
 8009528:	4a22      	ldr	r2, [pc, #136]	@ (80095b4 <xTaskIncrementTick+0x160>)
 800952a:	6013      	str	r3, [r2, #0]
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009530:	4613      	mov	r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4413      	add	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4a1f      	ldr	r2, [pc, #124]	@ (80095b8 <xTaskIncrementTick+0x164>)
 800953a:	441a      	add	r2, r3
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	3304      	adds	r3, #4
 8009540:	4619      	mov	r1, r3
 8009542:	4610      	mov	r0, r2
 8009544:	f7ff fc7f 	bl	8008e46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800954c:	4b1b      	ldr	r3, [pc, #108]	@ (80095bc <xTaskIncrementTick+0x168>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009552:	429a      	cmp	r2, r3
 8009554:	d3b9      	bcc.n	80094ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009556:	2301      	movs	r3, #1
 8009558:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800955a:	e7b6      	b.n	80094ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800955c:	4b17      	ldr	r3, [pc, #92]	@ (80095bc <xTaskIncrementTick+0x168>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009562:	4915      	ldr	r1, [pc, #84]	@ (80095b8 <xTaskIncrementTick+0x164>)
 8009564:	4613      	mov	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	4413      	add	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	440b      	add	r3, r1
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d901      	bls.n	8009578 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009574:	2301      	movs	r3, #1
 8009576:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009578:	4b11      	ldr	r3, [pc, #68]	@ (80095c0 <xTaskIncrementTick+0x16c>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d007      	beq.n	8009590 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009580:	2301      	movs	r3, #1
 8009582:	617b      	str	r3, [r7, #20]
 8009584:	e004      	b.n	8009590 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009586:	4b0f      	ldr	r3, [pc, #60]	@ (80095c4 <xTaskIncrementTick+0x170>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3301      	adds	r3, #1
 800958c:	4a0d      	ldr	r2, [pc, #52]	@ (80095c4 <xTaskIncrementTick+0x170>)
 800958e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009590:	697b      	ldr	r3, [r7, #20]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	200013f8 	.word	0x200013f8
 80095a0:	200013d4 	.word	0x200013d4
 80095a4:	20001388 	.word	0x20001388
 80095a8:	2000138c 	.word	0x2000138c
 80095ac:	200013e8 	.word	0x200013e8
 80095b0:	200013f0 	.word	0x200013f0
 80095b4:	200013d8 	.word	0x200013d8
 80095b8:	200012d4 	.word	0x200012d4
 80095bc:	200012d0 	.word	0x200012d0
 80095c0:	200013e4 	.word	0x200013e4
 80095c4:	200013e0 	.word	0x200013e0

080095c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80095c8:	b480      	push	{r7}
 80095ca:	b087      	sub	sp, #28
 80095cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095ce:	4b2a      	ldr	r3, [pc, #168]	@ (8009678 <vTaskSwitchContext+0xb0>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d003      	beq.n	80095de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80095d6:	4b29      	ldr	r3, [pc, #164]	@ (800967c <vTaskSwitchContext+0xb4>)
 80095d8:	2201      	movs	r2, #1
 80095da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80095dc:	e045      	b.n	800966a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80095de:	4b27      	ldr	r3, [pc, #156]	@ (800967c <vTaskSwitchContext+0xb4>)
 80095e0:	2200      	movs	r2, #0
 80095e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095e4:	4b26      	ldr	r3, [pc, #152]	@ (8009680 <vTaskSwitchContext+0xb8>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	fab3 f383 	clz	r3, r3
 80095f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80095f2:	7afb      	ldrb	r3, [r7, #11]
 80095f4:	f1c3 031f 	rsb	r3, r3, #31
 80095f8:	617b      	str	r3, [r7, #20]
 80095fa:	4922      	ldr	r1, [pc, #136]	@ (8009684 <vTaskSwitchContext+0xbc>)
 80095fc:	697a      	ldr	r2, [r7, #20]
 80095fe:	4613      	mov	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4413      	add	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	440b      	add	r3, r1
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d10b      	bne.n	8009626 <vTaskSwitchContext+0x5e>
	__asm volatile
 800960e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	607b      	str	r3, [r7, #4]
}
 8009620:	bf00      	nop
 8009622:	bf00      	nop
 8009624:	e7fd      	b.n	8009622 <vTaskSwitchContext+0x5a>
 8009626:	697a      	ldr	r2, [r7, #20]
 8009628:	4613      	mov	r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4413      	add	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4a14      	ldr	r2, [pc, #80]	@ (8009684 <vTaskSwitchContext+0xbc>)
 8009632:	4413      	add	r3, r2
 8009634:	613b      	str	r3, [r7, #16]
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	685a      	ldr	r2, [r3, #4]
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	605a      	str	r2, [r3, #4]
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	685a      	ldr	r2, [r3, #4]
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	3308      	adds	r3, #8
 8009648:	429a      	cmp	r2, r3
 800964a:	d104      	bne.n	8009656 <vTaskSwitchContext+0x8e>
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	685a      	ldr	r2, [r3, #4]
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	605a      	str	r2, [r3, #4]
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	4a0a      	ldr	r2, [pc, #40]	@ (8009688 <vTaskSwitchContext+0xc0>)
 800965e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009660:	4b09      	ldr	r3, [pc, #36]	@ (8009688 <vTaskSwitchContext+0xc0>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	334c      	adds	r3, #76	@ 0x4c
 8009666:	4a09      	ldr	r2, [pc, #36]	@ (800968c <vTaskSwitchContext+0xc4>)
 8009668:	6013      	str	r3, [r2, #0]
}
 800966a:	bf00      	nop
 800966c:	371c      	adds	r7, #28
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	200013f8 	.word	0x200013f8
 800967c:	200013e4 	.word	0x200013e4
 8009680:	200013d8 	.word	0x200013d8
 8009684:	200012d4 	.word	0x200012d4
 8009688:	200012d0 	.word	0x200012d0
 800968c:	2000001c 	.word	0x2000001c

08009690 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009698:	f000 f852 	bl	8009740 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800969c:	4b06      	ldr	r3, [pc, #24]	@ (80096b8 <prvIdleTask+0x28>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d9f9      	bls.n	8009698 <prvIdleTask+0x8>
			{
				taskYIELD();
 80096a4:	4b05      	ldr	r3, [pc, #20]	@ (80096bc <prvIdleTask+0x2c>)
 80096a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80096b4:	e7f0      	b.n	8009698 <prvIdleTask+0x8>
 80096b6:	bf00      	nop
 80096b8:	200012d4 	.word	0x200012d4
 80096bc:	e000ed04 	.word	0xe000ed04

080096c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096c6:	2300      	movs	r3, #0
 80096c8:	607b      	str	r3, [r7, #4]
 80096ca:	e00c      	b.n	80096e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	4613      	mov	r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4413      	add	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4a12      	ldr	r2, [pc, #72]	@ (8009720 <prvInitialiseTaskLists+0x60>)
 80096d8:	4413      	add	r3, r2
 80096da:	4618      	mov	r0, r3
 80096dc:	f7ff fb86 	bl	8008dec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	3301      	adds	r3, #1
 80096e4:	607b      	str	r3, [r7, #4]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2b06      	cmp	r3, #6
 80096ea:	d9ef      	bls.n	80096cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80096ec:	480d      	ldr	r0, [pc, #52]	@ (8009724 <prvInitialiseTaskLists+0x64>)
 80096ee:	f7ff fb7d 	bl	8008dec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096f2:	480d      	ldr	r0, [pc, #52]	@ (8009728 <prvInitialiseTaskLists+0x68>)
 80096f4:	f7ff fb7a 	bl	8008dec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096f8:	480c      	ldr	r0, [pc, #48]	@ (800972c <prvInitialiseTaskLists+0x6c>)
 80096fa:	f7ff fb77 	bl	8008dec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096fe:	480c      	ldr	r0, [pc, #48]	@ (8009730 <prvInitialiseTaskLists+0x70>)
 8009700:	f7ff fb74 	bl	8008dec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009704:	480b      	ldr	r0, [pc, #44]	@ (8009734 <prvInitialiseTaskLists+0x74>)
 8009706:	f7ff fb71 	bl	8008dec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800970a:	4b0b      	ldr	r3, [pc, #44]	@ (8009738 <prvInitialiseTaskLists+0x78>)
 800970c:	4a05      	ldr	r2, [pc, #20]	@ (8009724 <prvInitialiseTaskLists+0x64>)
 800970e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009710:	4b0a      	ldr	r3, [pc, #40]	@ (800973c <prvInitialiseTaskLists+0x7c>)
 8009712:	4a05      	ldr	r2, [pc, #20]	@ (8009728 <prvInitialiseTaskLists+0x68>)
 8009714:	601a      	str	r2, [r3, #0]
}
 8009716:	bf00      	nop
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	200012d4 	.word	0x200012d4
 8009724:	20001360 	.word	0x20001360
 8009728:	20001374 	.word	0x20001374
 800972c:	20001390 	.word	0x20001390
 8009730:	200013a4 	.word	0x200013a4
 8009734:	200013bc 	.word	0x200013bc
 8009738:	20001388 	.word	0x20001388
 800973c:	2000138c 	.word	0x2000138c

08009740 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009746:	e019      	b.n	800977c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009748:	f000 fcde 	bl	800a108 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800974c:	4b10      	ldr	r3, [pc, #64]	@ (8009790 <prvCheckTasksWaitingTermination+0x50>)
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	3304      	adds	r3, #4
 8009758:	4618      	mov	r0, r3
 800975a:	f7ff fbd1 	bl	8008f00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800975e:	4b0d      	ldr	r3, [pc, #52]	@ (8009794 <prvCheckTasksWaitingTermination+0x54>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	3b01      	subs	r3, #1
 8009764:	4a0b      	ldr	r2, [pc, #44]	@ (8009794 <prvCheckTasksWaitingTermination+0x54>)
 8009766:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009768:	4b0b      	ldr	r3, [pc, #44]	@ (8009798 <prvCheckTasksWaitingTermination+0x58>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	3b01      	subs	r3, #1
 800976e:	4a0a      	ldr	r2, [pc, #40]	@ (8009798 <prvCheckTasksWaitingTermination+0x58>)
 8009770:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009772:	f000 fcfb 	bl	800a16c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f810 	bl	800979c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800977c:	4b06      	ldr	r3, [pc, #24]	@ (8009798 <prvCheckTasksWaitingTermination+0x58>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1e1      	bne.n	8009748 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009784:	bf00      	nop
 8009786:	bf00      	nop
 8009788:	3708      	adds	r7, #8
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	200013a4 	.word	0x200013a4
 8009794:	200013d0 	.word	0x200013d0
 8009798:	200013b8 	.word	0x200013b8

0800979c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	334c      	adds	r3, #76	@ 0x4c
 80097a8:	4618      	mov	r0, r3
 80097aa:	f002 f86f 	bl	800b88c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097b2:	4618      	mov	r0, r3
 80097b4:	f000 fe98 	bl	800a4e8 <vPortFree>
			vPortFree( pxTCB );
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fe95 	bl	800a4e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80097be:	bf00      	nop
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
	...

080097c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097ce:	4b0c      	ldr	r3, [pc, #48]	@ (8009800 <prvResetNextTaskUnblockTime+0x38>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d104      	bne.n	80097e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009804 <prvResetNextTaskUnblockTime+0x3c>)
 80097da:	f04f 32ff 	mov.w	r2, #4294967295
 80097de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80097e0:	e008      	b.n	80097f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097e2:	4b07      	ldr	r3, [pc, #28]	@ (8009800 <prvResetNextTaskUnblockTime+0x38>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	4a04      	ldr	r2, [pc, #16]	@ (8009804 <prvResetNextTaskUnblockTime+0x3c>)
 80097f2:	6013      	str	r3, [r2, #0]
}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr
 8009800:	20001388 	.word	0x20001388
 8009804:	200013f0 	.word	0x200013f0

08009808 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8009812:	f000 fc79 	bl	800a108 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8009816:	4b20      	ldr	r3, [pc, #128]	@ (8009898 <ulTaskNotifyTake+0x90>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800981e:	2b00      	cmp	r3, #0
 8009820:	d113      	bne.n	800984a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009822:	4b1d      	ldr	r3, [pc, #116]	@ (8009898 <ulTaskNotifyTake+0x90>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00b      	beq.n	800984a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009832:	2101      	movs	r1, #1
 8009834:	6838      	ldr	r0, [r7, #0]
 8009836:	f000 fad1 	bl	8009ddc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800983a:	4b18      	ldr	r3, [pc, #96]	@ (800989c <ulTaskNotifyTake+0x94>)
 800983c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009840:	601a      	str	r2, [r3, #0]
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800984a:	f000 fc8f 	bl	800a16c <vPortExitCritical>

		taskENTER_CRITICAL();
 800984e:	f000 fc5b 	bl	800a108 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8009852:	4b11      	ldr	r3, [pc, #68]	@ (8009898 <ulTaskNotifyTake+0x90>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800985a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00e      	beq.n	8009880 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d005      	beq.n	8009874 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8009868:	4b0b      	ldr	r3, [pc, #44]	@ (8009898 <ulTaskNotifyTake+0x90>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2200      	movs	r2, #0
 800986e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8009872:	e005      	b.n	8009880 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8009874:	4b08      	ldr	r3, [pc, #32]	@ (8009898 <ulTaskNotifyTake+0x90>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	3a01      	subs	r2, #1
 800987c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009880:	4b05      	ldr	r3, [pc, #20]	@ (8009898 <ulTaskNotifyTake+0x90>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 800988a:	f000 fc6f 	bl	800a16c <vPortExitCritical>

		return ulReturn;
 800988e:	68fb      	ldr	r3, [r7, #12]
	}
 8009890:	4618      	mov	r0, r3
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	200012d0 	.word	0x200012d0
 800989c:	e000ed04 	.word	0xe000ed04

080098a0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]
 80098ac:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80098ae:	f000 fc2b 	bl	800a108 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80098b2:	4b29      	ldr	r3, [pc, #164]	@ (8009958 <xTaskNotifyWait+0xb8>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d01c      	beq.n	80098fa <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80098c0:	4b25      	ldr	r3, [pc, #148]	@ (8009958 <xTaskNotifyWait+0xb8>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80098c8:	68fa      	ldr	r2, [r7, #12]
 80098ca:	43d2      	mvns	r2, r2
 80098cc:	400a      	ands	r2, r1
 80098ce:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80098d2:	4b21      	ldr	r3, [pc, #132]	@ (8009958 <xTaskNotifyWait+0xb8>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00b      	beq.n	80098fa <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80098e2:	2101      	movs	r1, #1
 80098e4:	6838      	ldr	r0, [r7, #0]
 80098e6:	f000 fa79 	bl	8009ddc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80098ea:	4b1c      	ldr	r3, [pc, #112]	@ (800995c <xTaskNotifyWait+0xbc>)
 80098ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098f0:	601a      	str	r2, [r3, #0]
 80098f2:	f3bf 8f4f 	dsb	sy
 80098f6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80098fa:	f000 fc37 	bl	800a16c <vPortExitCritical>

		taskENTER_CRITICAL();
 80098fe:	f000 fc03 	bl	800a108 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d005      	beq.n	8009914 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009908:	4b13      	ldr	r3, [pc, #76]	@ (8009958 <xTaskNotifyWait+0xb8>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009914:	4b10      	ldr	r3, [pc, #64]	@ (8009958 <xTaskNotifyWait+0xb8>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b02      	cmp	r3, #2
 8009920:	d002      	beq.n	8009928 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009922:	2300      	movs	r3, #0
 8009924:	617b      	str	r3, [r7, #20]
 8009926:	e00a      	b.n	800993e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009928:	4b0b      	ldr	r3, [pc, #44]	@ (8009958 <xTaskNotifyWait+0xb8>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	43d2      	mvns	r2, r2
 8009934:	400a      	ands	r2, r1
 8009936:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 800993a:	2301      	movs	r3, #1
 800993c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800993e:	4b06      	ldr	r3, [pc, #24]	@ (8009958 <xTaskNotifyWait+0xb8>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2200      	movs	r2, #0
 8009944:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8009948:	f000 fc10 	bl	800a16c <vPortExitCritical>

		return xReturn;
 800994c:	697b      	ldr	r3, [r7, #20]
	}
 800994e:	4618      	mov	r0, r3
 8009950:	3718      	adds	r7, #24
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	200012d0 	.word	0x200012d0
 800995c:	e000ed04 	.word	0xe000ed04

08009960 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009960:	b580      	push	{r7, lr}
 8009962:	b08a      	sub	sp, #40	@ 0x28
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	603b      	str	r3, [r7, #0]
 800996c:	4613      	mov	r3, r2
 800996e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009970:	2301      	movs	r3, #1
 8009972:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d10b      	bne.n	8009992 <xTaskGenericNotify+0x32>
	__asm volatile
 800997a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	61bb      	str	r3, [r7, #24]
}
 800998c:	bf00      	nop
 800998e:	bf00      	nop
 8009990:	e7fd      	b.n	800998e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009996:	f000 fbb7 	bl	800a108 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d004      	beq.n	80099aa <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80099a0:	6a3b      	ldr	r3, [r7, #32]
 80099a2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80099b0:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80099b2:	6a3b      	ldr	r3, [r7, #32]
 80099b4:	2202      	movs	r2, #2
 80099b6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 80099ba:	79fb      	ldrb	r3, [r7, #7]
 80099bc:	2b04      	cmp	r3, #4
 80099be:	d82e      	bhi.n	8009a1e <xTaskGenericNotify+0xbe>
 80099c0:	a201      	add	r2, pc, #4	@ (adr r2, 80099c8 <xTaskGenericNotify+0x68>)
 80099c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c6:	bf00      	nop
 80099c8:	08009a43 	.word	0x08009a43
 80099cc:	080099dd 	.word	0x080099dd
 80099d0:	080099ef 	.word	0x080099ef
 80099d4:	080099ff 	.word	0x080099ff
 80099d8:	08009a09 	.word	0x08009a09
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80099dc:	6a3b      	ldr	r3, [r7, #32]
 80099de:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	431a      	orrs	r2, r3
 80099e6:	6a3b      	ldr	r3, [r7, #32]
 80099e8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80099ec:	e02c      	b.n	8009a48 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80099ee:	6a3b      	ldr	r3, [r7, #32]
 80099f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80099f4:	1c5a      	adds	r2, r3, #1
 80099f6:	6a3b      	ldr	r3, [r7, #32]
 80099f8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80099fc:	e024      	b.n	8009a48 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80099fe:	6a3b      	ldr	r3, [r7, #32]
 8009a00:	68ba      	ldr	r2, [r7, #8]
 8009a02:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009a06:	e01f      	b.n	8009a48 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009a08:	7ffb      	ldrb	r3, [r7, #31]
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d004      	beq.n	8009a18 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009a0e:	6a3b      	ldr	r3, [r7, #32]
 8009a10:	68ba      	ldr	r2, [r7, #8]
 8009a12:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009a16:	e017      	b.n	8009a48 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8009a1c:	e014      	b.n	8009a48 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009a1e:	6a3b      	ldr	r3, [r7, #32]
 8009a20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a28:	d00d      	beq.n	8009a46 <xTaskGenericNotify+0xe6>
	__asm volatile
 8009a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a2e:	f383 8811 	msr	BASEPRI, r3
 8009a32:	f3bf 8f6f 	isb	sy
 8009a36:	f3bf 8f4f 	dsb	sy
 8009a3a:	617b      	str	r3, [r7, #20]
}
 8009a3c:	bf00      	nop
 8009a3e:	bf00      	nop
 8009a40:	e7fd      	b.n	8009a3e <xTaskGenericNotify+0xde>
					break;
 8009a42:	bf00      	nop
 8009a44:	e000      	b.n	8009a48 <xTaskGenericNotify+0xe8>

					break;
 8009a46:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009a48:	7ffb      	ldrb	r3, [r7, #31]
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d13a      	bne.n	8009ac4 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a4e:	6a3b      	ldr	r3, [r7, #32]
 8009a50:	3304      	adds	r3, #4
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7ff fa54 	bl	8008f00 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009a58:	6a3b      	ldr	r3, [r7, #32]
 8009a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	409a      	lsls	r2, r3
 8009a60:	4b1c      	ldr	r3, [pc, #112]	@ (8009ad4 <xTaskGenericNotify+0x174>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	4a1b      	ldr	r2, [pc, #108]	@ (8009ad4 <xTaskGenericNotify+0x174>)
 8009a68:	6013      	str	r3, [r2, #0]
 8009a6a:	6a3b      	ldr	r3, [r7, #32]
 8009a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a6e:	4613      	mov	r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4413      	add	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4a18      	ldr	r2, [pc, #96]	@ (8009ad8 <xTaskGenericNotify+0x178>)
 8009a78:	441a      	add	r2, r3
 8009a7a:	6a3b      	ldr	r3, [r7, #32]
 8009a7c:	3304      	adds	r3, #4
 8009a7e:	4619      	mov	r1, r3
 8009a80:	4610      	mov	r0, r2
 8009a82:	f7ff f9e0 	bl	8008e46 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009a86:	6a3b      	ldr	r3, [r7, #32]
 8009a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00b      	beq.n	8009aa6 <xTaskGenericNotify+0x146>
	__asm volatile
 8009a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	613b      	str	r3, [r7, #16]
}
 8009aa0:	bf00      	nop
 8009aa2:	bf00      	nop
 8009aa4:	e7fd      	b.n	8009aa2 <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009aa6:	6a3b      	ldr	r3, [r7, #32]
 8009aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8009adc <xTaskGenericNotify+0x17c>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d907      	bls.n	8009ac4 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8009ae0 <xTaskGenericNotify+0x180>)
 8009ab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009aba:	601a      	str	r2, [r3, #0]
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009ac4:	f000 fb52 	bl	800a16c <vPortExitCritical>

		return xReturn;
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3728      	adds	r7, #40	@ 0x28
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	200013d8 	.word	0x200013d8
 8009ad8:	200012d4 	.word	0x200012d4
 8009adc:	200012d0 	.word	0x200012d0
 8009ae0:	e000ed04 	.word	0xe000ed04

08009ae4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b08e      	sub	sp, #56	@ 0x38
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	603b      	str	r3, [r7, #0]
 8009af0:	4613      	mov	r3, r2
 8009af2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009af4:	2301      	movs	r3, #1
 8009af6:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d10b      	bne.n	8009b16 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009b10:	bf00      	nop
 8009b12:	bf00      	nop
 8009b14:	e7fd      	b.n	8009b12 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b16:	f000 fbd7 	bl	800a2c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009b1e:	f3ef 8211 	mrs	r2, BASEPRI
 8009b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b26:	f383 8811 	msr	BASEPRI, r3
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	623a      	str	r2, [r7, #32]
 8009b34:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009b36:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d004      	beq.n	8009b4a <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b42:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8009b50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b56:	2202      	movs	r2, #2
 8009b58:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8009b5c:	79fb      	ldrb	r3, [r7, #7]
 8009b5e:	2b04      	cmp	r3, #4
 8009b60:	d82e      	bhi.n	8009bc0 <xTaskGenericNotifyFromISR+0xdc>
 8009b62:	a201      	add	r2, pc, #4	@ (adr r2, 8009b68 <xTaskGenericNotifyFromISR+0x84>)
 8009b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b68:	08009be5 	.word	0x08009be5
 8009b6c:	08009b7d 	.word	0x08009b7d
 8009b70:	08009b8f 	.word	0x08009b8f
 8009b74:	08009b9f 	.word	0x08009b9f
 8009b78:	08009ba9 	.word	0x08009ba9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b7e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	431a      	orrs	r2, r3
 8009b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b88:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009b8c:	e02d      	b.n	8009bea <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009b94:	1c5a      	adds	r2, r3, #1
 8009b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b98:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009b9c:	e025      	b.n	8009bea <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba0:	68ba      	ldr	r2, [r7, #8]
 8009ba2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8009ba6:	e020      	b.n	8009bea <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009ba8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009bac:	2b02      	cmp	r3, #2
 8009bae:	d004      	beq.n	8009bba <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009bb8:	e017      	b.n	8009bea <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8009bbe:	e014      	b.n	8009bea <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bca:	d00d      	beq.n	8009be8 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8009bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd0:	f383 8811 	msr	BASEPRI, r3
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	f3bf 8f4f 	dsb	sy
 8009bdc:	61bb      	str	r3, [r7, #24]
}
 8009bde:	bf00      	nop
 8009be0:	bf00      	nop
 8009be2:	e7fd      	b.n	8009be0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8009be4:	bf00      	nop
 8009be6:	e000      	b.n	8009bea <xTaskGenericNotifyFromISR+0x106>
					break;
 8009be8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009bea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d146      	bne.n	8009c80 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00b      	beq.n	8009c12 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8009bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	617b      	str	r3, [r7, #20]
}
 8009c0c:	bf00      	nop
 8009c0e:	bf00      	nop
 8009c10:	e7fd      	b.n	8009c0e <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c12:	4b21      	ldr	r3, [pc, #132]	@ (8009c98 <xTaskGenericNotifyFromISR+0x1b4>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d11c      	bne.n	8009c54 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7ff f96e 	bl	8008f00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c28:	2201      	movs	r2, #1
 8009c2a:	409a      	lsls	r2, r3
 8009c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8009c9c <xTaskGenericNotifyFromISR+0x1b8>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4313      	orrs	r3, r2
 8009c32:	4a1a      	ldr	r2, [pc, #104]	@ (8009c9c <xTaskGenericNotifyFromISR+0x1b8>)
 8009c34:	6013      	str	r3, [r2, #0]
 8009c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	4413      	add	r3, r2
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	4a17      	ldr	r2, [pc, #92]	@ (8009ca0 <xTaskGenericNotifyFromISR+0x1bc>)
 8009c44:	441a      	add	r2, r3
 8009c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c48:	3304      	adds	r3, #4
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	4610      	mov	r0, r2
 8009c4e:	f7ff f8fa 	bl	8008e46 <vListInsertEnd>
 8009c52:	e005      	b.n	8009c60 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c56:	3318      	adds	r3, #24
 8009c58:	4619      	mov	r1, r3
 8009c5a:	4812      	ldr	r0, [pc, #72]	@ (8009ca4 <xTaskGenericNotifyFromISR+0x1c0>)
 8009c5c:	f7ff f8f3 	bl	8008e46 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c64:	4b10      	ldr	r3, [pc, #64]	@ (8009ca8 <xTaskGenericNotifyFromISR+0x1c4>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d908      	bls.n	8009c80 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d002      	beq.n	8009c7a <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009c74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c76:	2201      	movs	r2, #1
 8009c78:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8009cac <xTaskGenericNotifyFromISR+0x1c8>)
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	601a      	str	r2, [r3, #0]
 8009c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c82:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009c8a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3738      	adds	r7, #56	@ 0x38
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	200013f8 	.word	0x200013f8
 8009c9c:	200013d8 	.word	0x200013d8
 8009ca0:	200012d4 	.word	0x200012d4
 8009ca4:	20001390 	.word	0x20001390
 8009ca8:	200012d0 	.word	0x200012d0
 8009cac:	200013e4 	.word	0x200013e4

08009cb0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b08a      	sub	sp, #40	@ 0x28
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10b      	bne.n	8009cd8 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8009cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	61bb      	str	r3, [r7, #24]
}
 8009cd2:	bf00      	nop
 8009cd4:	bf00      	nop
 8009cd6:	e7fd      	b.n	8009cd4 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009cd8:	f000 faf6 	bl	800a2c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8009ce0:	f3ef 8211 	mrs	r2, BASEPRI
 8009ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	617a      	str	r2, [r7, #20]
 8009cf6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009cf8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009cfa:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cfe:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8009d02:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d06:	2202      	movs	r2, #2
 8009d08:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d12:	1c5a      	adds	r2, r3, #1
 8009d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d16:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009d1a:	7ffb      	ldrb	r3, [r7, #31]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d146      	bne.n	8009dae <vTaskNotifyGiveFromISR+0xfe>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00b      	beq.n	8009d40 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8009d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d2c:	f383 8811 	msr	BASEPRI, r3
 8009d30:	f3bf 8f6f 	isb	sy
 8009d34:	f3bf 8f4f 	dsb	sy
 8009d38:	60fb      	str	r3, [r7, #12]
}
 8009d3a:	bf00      	nop
 8009d3c:	bf00      	nop
 8009d3e:	e7fd      	b.n	8009d3c <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d40:	4b20      	ldr	r3, [pc, #128]	@ (8009dc4 <vTaskNotifyGiveFromISR+0x114>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d11c      	bne.n	8009d82 <vTaskNotifyGiveFromISR+0xd2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4a:	3304      	adds	r3, #4
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7ff f8d7 	bl	8008f00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d56:	2201      	movs	r2, #1
 8009d58:	409a      	lsls	r2, r3
 8009d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8009dc8 <vTaskNotifyGiveFromISR+0x118>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	4a19      	ldr	r2, [pc, #100]	@ (8009dc8 <vTaskNotifyGiveFromISR+0x118>)
 8009d62:	6013      	str	r3, [r2, #0]
 8009d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d68:	4613      	mov	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4413      	add	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4a16      	ldr	r2, [pc, #88]	@ (8009dcc <vTaskNotifyGiveFromISR+0x11c>)
 8009d72:	441a      	add	r2, r3
 8009d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d76:	3304      	adds	r3, #4
 8009d78:	4619      	mov	r1, r3
 8009d7a:	4610      	mov	r0, r2
 8009d7c:	f7ff f863 	bl	8008e46 <vListInsertEnd>
 8009d80:	e005      	b.n	8009d8e <vTaskNotifyGiveFromISR+0xde>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d84:	3318      	adds	r3, #24
 8009d86:	4619      	mov	r1, r3
 8009d88:	4811      	ldr	r0, [pc, #68]	@ (8009dd0 <vTaskNotifyGiveFromISR+0x120>)
 8009d8a:	f7ff f85c 	bl	8008e46 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d92:	4b10      	ldr	r3, [pc, #64]	@ (8009dd4 <vTaskNotifyGiveFromISR+0x124>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d908      	bls.n	8009dae <vTaskNotifyGiveFromISR+0xfe>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d002      	beq.n	8009da8 <vTaskNotifyGiveFromISR+0xf8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	2201      	movs	r2, #1
 8009da6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009da8:	4b0b      	ldr	r3, [pc, #44]	@ (8009dd8 <vTaskNotifyGiveFromISR+0x128>)
 8009daa:	2201      	movs	r2, #1
 8009dac:	601a      	str	r2, [r3, #0]
 8009dae:	6a3b      	ldr	r3, [r7, #32]
 8009db0:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	f383 8811 	msr	BASEPRI, r3
}
 8009db8:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8009dba:	bf00      	nop
 8009dbc:	3728      	adds	r7, #40	@ 0x28
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	200013f8 	.word	0x200013f8
 8009dc8:	200013d8 	.word	0x200013d8
 8009dcc:	200012d4 	.word	0x200012d4
 8009dd0:	20001390 	.word	0x20001390
 8009dd4:	200012d0 	.word	0x200012d0
 8009dd8:	200013e4 	.word	0x200013e4

08009ddc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009de6:	4b29      	ldr	r3, [pc, #164]	@ (8009e8c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dec:	4b28      	ldr	r3, [pc, #160]	@ (8009e90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	3304      	adds	r3, #4
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7ff f884 	bl	8008f00 <uxListRemove>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d10b      	bne.n	8009e16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009dfe:	4b24      	ldr	r3, [pc, #144]	@ (8009e90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e04:	2201      	movs	r2, #1
 8009e06:	fa02 f303 	lsl.w	r3, r2, r3
 8009e0a:	43da      	mvns	r2, r3
 8009e0c:	4b21      	ldr	r3, [pc, #132]	@ (8009e94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4013      	ands	r3, r2
 8009e12:	4a20      	ldr	r2, [pc, #128]	@ (8009e94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009e14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e1c:	d10a      	bne.n	8009e34 <prvAddCurrentTaskToDelayedList+0x58>
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d007      	beq.n	8009e34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e24:	4b1a      	ldr	r3, [pc, #104]	@ (8009e90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	3304      	adds	r3, #4
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	481a      	ldr	r0, [pc, #104]	@ (8009e98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009e2e:	f7ff f80a 	bl	8008e46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e32:	e026      	b.n	8009e82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4413      	add	r3, r2
 8009e3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e3c:	4b14      	ldr	r3, [pc, #80]	@ (8009e90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68ba      	ldr	r2, [r7, #8]
 8009e42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d209      	bcs.n	8009e60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e4c:	4b13      	ldr	r3, [pc, #76]	@ (8009e9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	4b0f      	ldr	r3, [pc, #60]	@ (8009e90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3304      	adds	r3, #4
 8009e56:	4619      	mov	r1, r3
 8009e58:	4610      	mov	r0, r2
 8009e5a:	f7ff f818 	bl	8008e8e <vListInsert>
}
 8009e5e:	e010      	b.n	8009e82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e60:	4b0f      	ldr	r3, [pc, #60]	@ (8009ea0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	4b0a      	ldr	r3, [pc, #40]	@ (8009e90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	3304      	adds	r3, #4
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	f7ff f80e 	bl	8008e8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e72:	4b0c      	ldr	r3, [pc, #48]	@ (8009ea4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68ba      	ldr	r2, [r7, #8]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d202      	bcs.n	8009e82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009e7c:	4a09      	ldr	r2, [pc, #36]	@ (8009ea4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	6013      	str	r3, [r2, #0]
}
 8009e82:	bf00      	nop
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	200013d4 	.word	0x200013d4
 8009e90:	200012d0 	.word	0x200012d0
 8009e94:	200013d8 	.word	0x200013d8
 8009e98:	200013bc 	.word	0x200013bc
 8009e9c:	2000138c 	.word	0x2000138c
 8009ea0:	20001388 	.word	0x20001388
 8009ea4:	200013f0 	.word	0x200013f0

08009ea8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	3b04      	subs	r3, #4
 8009eb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009ec0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	3b04      	subs	r3, #4
 8009ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	f023 0201 	bic.w	r2, r3, #1
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	3b04      	subs	r3, #4
 8009ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ed8:	4a0c      	ldr	r2, [pc, #48]	@ (8009f0c <pxPortInitialiseStack+0x64>)
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	3b14      	subs	r3, #20
 8009ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	3b04      	subs	r3, #4
 8009eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f06f 0202 	mvn.w	r2, #2
 8009ef6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	3b20      	subs	r3, #32
 8009efc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009efe:	68fb      	ldr	r3, [r7, #12]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3714      	adds	r7, #20
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr
 8009f0c:	08009f11 	.word	0x08009f11

08009f10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f16:	2300      	movs	r3, #0
 8009f18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f1a:	4b13      	ldr	r3, [pc, #76]	@ (8009f68 <prvTaskExitError+0x58>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f22:	d00b      	beq.n	8009f3c <prvTaskExitError+0x2c>
	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	60fb      	str	r3, [r7, #12]
}
 8009f36:	bf00      	nop
 8009f38:	bf00      	nop
 8009f3a:	e7fd      	b.n	8009f38 <prvTaskExitError+0x28>
	__asm volatile
 8009f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f40:	f383 8811 	msr	BASEPRI, r3
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	60bb      	str	r3, [r7, #8]
}
 8009f4e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f50:	bf00      	nop
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d0fc      	beq.n	8009f52 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f58:	bf00      	nop
 8009f5a:	bf00      	nop
 8009f5c:	3714      	adds	r7, #20
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr
 8009f66:	bf00      	nop
 8009f68:	2000000c 	.word	0x2000000c
 8009f6c:	00000000 	.word	0x00000000

08009f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f70:	4b07      	ldr	r3, [pc, #28]	@ (8009f90 <pxCurrentTCBConst2>)
 8009f72:	6819      	ldr	r1, [r3, #0]
 8009f74:	6808      	ldr	r0, [r1, #0]
 8009f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7a:	f380 8809 	msr	PSP, r0
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f04f 0000 	mov.w	r0, #0
 8009f86:	f380 8811 	msr	BASEPRI, r0
 8009f8a:	4770      	bx	lr
 8009f8c:	f3af 8000 	nop.w

08009f90 <pxCurrentTCBConst2>:
 8009f90:	200012d0 	.word	0x200012d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f94:	bf00      	nop
 8009f96:	bf00      	nop

08009f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f98:	4808      	ldr	r0, [pc, #32]	@ (8009fbc <prvPortStartFirstTask+0x24>)
 8009f9a:	6800      	ldr	r0, [r0, #0]
 8009f9c:	6800      	ldr	r0, [r0, #0]
 8009f9e:	f380 8808 	msr	MSP, r0
 8009fa2:	f04f 0000 	mov.w	r0, #0
 8009fa6:	f380 8814 	msr	CONTROL, r0
 8009faa:	b662      	cpsie	i
 8009fac:	b661      	cpsie	f
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	f3bf 8f6f 	isb	sy
 8009fb6:	df00      	svc	0
 8009fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009fba:	bf00      	nop
 8009fbc:	e000ed08 	.word	0xe000ed08

08009fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b086      	sub	sp, #24
 8009fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009fc6:	4b47      	ldr	r3, [pc, #284]	@ (800a0e4 <xPortStartScheduler+0x124>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a47      	ldr	r2, [pc, #284]	@ (800a0e8 <xPortStartScheduler+0x128>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d10b      	bne.n	8009fe8 <xPortStartScheduler+0x28>
	__asm volatile
 8009fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	613b      	str	r3, [r7, #16]
}
 8009fe2:	bf00      	nop
 8009fe4:	bf00      	nop
 8009fe6:	e7fd      	b.n	8009fe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009fe8:	4b3e      	ldr	r3, [pc, #248]	@ (800a0e4 <xPortStartScheduler+0x124>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a3f      	ldr	r2, [pc, #252]	@ (800a0ec <xPortStartScheduler+0x12c>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d10b      	bne.n	800a00a <xPortStartScheduler+0x4a>
	__asm volatile
 8009ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff6:	f383 8811 	msr	BASEPRI, r3
 8009ffa:	f3bf 8f6f 	isb	sy
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	60fb      	str	r3, [r7, #12]
}
 800a004:	bf00      	nop
 800a006:	bf00      	nop
 800a008:	e7fd      	b.n	800a006 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a00a:	4b39      	ldr	r3, [pc, #228]	@ (800a0f0 <xPortStartScheduler+0x130>)
 800a00c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	b2db      	uxtb	r3, r3
 800a014:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	22ff      	movs	r2, #255	@ 0xff
 800a01a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	b2db      	uxtb	r3, r3
 800a022:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a024:	78fb      	ldrb	r3, [r7, #3]
 800a026:	b2db      	uxtb	r3, r3
 800a028:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a02c:	b2da      	uxtb	r2, r3
 800a02e:	4b31      	ldr	r3, [pc, #196]	@ (800a0f4 <xPortStartScheduler+0x134>)
 800a030:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a032:	4b31      	ldr	r3, [pc, #196]	@ (800a0f8 <xPortStartScheduler+0x138>)
 800a034:	2207      	movs	r2, #7
 800a036:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a038:	e009      	b.n	800a04e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a03a:	4b2f      	ldr	r3, [pc, #188]	@ (800a0f8 <xPortStartScheduler+0x138>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	3b01      	subs	r3, #1
 800a040:	4a2d      	ldr	r2, [pc, #180]	@ (800a0f8 <xPortStartScheduler+0x138>)
 800a042:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a044:	78fb      	ldrb	r3, [r7, #3]
 800a046:	b2db      	uxtb	r3, r3
 800a048:	005b      	lsls	r3, r3, #1
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a04e:	78fb      	ldrb	r3, [r7, #3]
 800a050:	b2db      	uxtb	r3, r3
 800a052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a056:	2b80      	cmp	r3, #128	@ 0x80
 800a058:	d0ef      	beq.n	800a03a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a05a:	4b27      	ldr	r3, [pc, #156]	@ (800a0f8 <xPortStartScheduler+0x138>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f1c3 0307 	rsb	r3, r3, #7
 800a062:	2b04      	cmp	r3, #4
 800a064:	d00b      	beq.n	800a07e <xPortStartScheduler+0xbe>
	__asm volatile
 800a066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a06a:	f383 8811 	msr	BASEPRI, r3
 800a06e:	f3bf 8f6f 	isb	sy
 800a072:	f3bf 8f4f 	dsb	sy
 800a076:	60bb      	str	r3, [r7, #8]
}
 800a078:	bf00      	nop
 800a07a:	bf00      	nop
 800a07c:	e7fd      	b.n	800a07a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a07e:	4b1e      	ldr	r3, [pc, #120]	@ (800a0f8 <xPortStartScheduler+0x138>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	021b      	lsls	r3, r3, #8
 800a084:	4a1c      	ldr	r2, [pc, #112]	@ (800a0f8 <xPortStartScheduler+0x138>)
 800a086:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a088:	4b1b      	ldr	r3, [pc, #108]	@ (800a0f8 <xPortStartScheduler+0x138>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a090:	4a19      	ldr	r2, [pc, #100]	@ (800a0f8 <xPortStartScheduler+0x138>)
 800a092:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	b2da      	uxtb	r2, r3
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a09c:	4b17      	ldr	r3, [pc, #92]	@ (800a0fc <xPortStartScheduler+0x13c>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a16      	ldr	r2, [pc, #88]	@ (800a0fc <xPortStartScheduler+0x13c>)
 800a0a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a0a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a0a8:	4b14      	ldr	r3, [pc, #80]	@ (800a0fc <xPortStartScheduler+0x13c>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a13      	ldr	r2, [pc, #76]	@ (800a0fc <xPortStartScheduler+0x13c>)
 800a0ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a0b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a0b4:	f000 f8da 	bl	800a26c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a0b8:	4b11      	ldr	r3, [pc, #68]	@ (800a100 <xPortStartScheduler+0x140>)
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a0be:	f000 f8f9 	bl	800a2b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a0c2:	4b10      	ldr	r3, [pc, #64]	@ (800a104 <xPortStartScheduler+0x144>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a0f      	ldr	r2, [pc, #60]	@ (800a104 <xPortStartScheduler+0x144>)
 800a0c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a0cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a0ce:	f7ff ff63 	bl	8009f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a0d2:	f7ff fa79 	bl	80095c8 <vTaskSwitchContext>
	prvTaskExitError();
 800a0d6:	f7ff ff1b 	bl	8009f10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3718      	adds	r7, #24
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	e000ed00 	.word	0xe000ed00
 800a0e8:	410fc271 	.word	0x410fc271
 800a0ec:	410fc270 	.word	0x410fc270
 800a0f0:	e000e400 	.word	0xe000e400
 800a0f4:	200013fc 	.word	0x200013fc
 800a0f8:	20001400 	.word	0x20001400
 800a0fc:	e000ed20 	.word	0xe000ed20
 800a100:	2000000c 	.word	0x2000000c
 800a104:	e000ef34 	.word	0xe000ef34

0800a108 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	607b      	str	r3, [r7, #4]
}
 800a120:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a122:	4b10      	ldr	r3, [pc, #64]	@ (800a164 <vPortEnterCritical+0x5c>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	3301      	adds	r3, #1
 800a128:	4a0e      	ldr	r2, [pc, #56]	@ (800a164 <vPortEnterCritical+0x5c>)
 800a12a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a12c:	4b0d      	ldr	r3, [pc, #52]	@ (800a164 <vPortEnterCritical+0x5c>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b01      	cmp	r3, #1
 800a132:	d110      	bne.n	800a156 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a134:	4b0c      	ldr	r3, [pc, #48]	@ (800a168 <vPortEnterCritical+0x60>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00b      	beq.n	800a156 <vPortEnterCritical+0x4e>
	__asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	603b      	str	r3, [r7, #0]
}
 800a150:	bf00      	nop
 800a152:	bf00      	nop
 800a154:	e7fd      	b.n	800a152 <vPortEnterCritical+0x4a>
	}
}
 800a156:	bf00      	nop
 800a158:	370c      	adds	r7, #12
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	2000000c 	.word	0x2000000c
 800a168:	e000ed04 	.word	0xe000ed04

0800a16c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a172:	4b12      	ldr	r3, [pc, #72]	@ (800a1bc <vPortExitCritical+0x50>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d10b      	bne.n	800a192 <vPortExitCritical+0x26>
	__asm volatile
 800a17a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a17e:	f383 8811 	msr	BASEPRI, r3
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	607b      	str	r3, [r7, #4]
}
 800a18c:	bf00      	nop
 800a18e:	bf00      	nop
 800a190:	e7fd      	b.n	800a18e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a192:	4b0a      	ldr	r3, [pc, #40]	@ (800a1bc <vPortExitCritical+0x50>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	3b01      	subs	r3, #1
 800a198:	4a08      	ldr	r2, [pc, #32]	@ (800a1bc <vPortExitCritical+0x50>)
 800a19a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a19c:	4b07      	ldr	r3, [pc, #28]	@ (800a1bc <vPortExitCritical+0x50>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d105      	bne.n	800a1b0 <vPortExitCritical+0x44>
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	f383 8811 	msr	BASEPRI, r3
}
 800a1ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a1b0:	bf00      	nop
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr
 800a1bc:	2000000c 	.word	0x2000000c

0800a1c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a1c0:	f3ef 8009 	mrs	r0, PSP
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	4b15      	ldr	r3, [pc, #84]	@ (800a220 <pxCurrentTCBConst>)
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	f01e 0f10 	tst.w	lr, #16
 800a1d0:	bf08      	it	eq
 800a1d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a1d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1da:	6010      	str	r0, [r2, #0]
 800a1dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a1e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a1e4:	f380 8811 	msr	BASEPRI, r0
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	f3bf 8f6f 	isb	sy
 800a1f0:	f7ff f9ea 	bl	80095c8 <vTaskSwitchContext>
 800a1f4:	f04f 0000 	mov.w	r0, #0
 800a1f8:	f380 8811 	msr	BASEPRI, r0
 800a1fc:	bc09      	pop	{r0, r3}
 800a1fe:	6819      	ldr	r1, [r3, #0]
 800a200:	6808      	ldr	r0, [r1, #0]
 800a202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a206:	f01e 0f10 	tst.w	lr, #16
 800a20a:	bf08      	it	eq
 800a20c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a210:	f380 8809 	msr	PSP, r0
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	f3af 8000 	nop.w

0800a220 <pxCurrentTCBConst>:
 800a220:	200012d0 	.word	0x200012d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a224:	bf00      	nop
 800a226:	bf00      	nop

0800a228 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
	__asm volatile
 800a22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a232:	f383 8811 	msr	BASEPRI, r3
 800a236:	f3bf 8f6f 	isb	sy
 800a23a:	f3bf 8f4f 	dsb	sy
 800a23e:	607b      	str	r3, [r7, #4]
}
 800a240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a242:	f7ff f907 	bl	8009454 <xTaskIncrementTick>
 800a246:	4603      	mov	r3, r0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d003      	beq.n	800a254 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a24c:	4b06      	ldr	r3, [pc, #24]	@ (800a268 <SysTick_Handler+0x40>)
 800a24e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a252:	601a      	str	r2, [r3, #0]
 800a254:	2300      	movs	r3, #0
 800a256:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	f383 8811 	msr	BASEPRI, r3
}
 800a25e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a260:	bf00      	nop
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	e000ed04 	.word	0xe000ed04

0800a26c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a26c:	b480      	push	{r7}
 800a26e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a270:	4b0b      	ldr	r3, [pc, #44]	@ (800a2a0 <vPortSetupTimerInterrupt+0x34>)
 800a272:	2200      	movs	r2, #0
 800a274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a276:	4b0b      	ldr	r3, [pc, #44]	@ (800a2a4 <vPortSetupTimerInterrupt+0x38>)
 800a278:	2200      	movs	r2, #0
 800a27a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a27c:	4b0a      	ldr	r3, [pc, #40]	@ (800a2a8 <vPortSetupTimerInterrupt+0x3c>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a0a      	ldr	r2, [pc, #40]	@ (800a2ac <vPortSetupTimerInterrupt+0x40>)
 800a282:	fba2 2303 	umull	r2, r3, r2, r3
 800a286:	099b      	lsrs	r3, r3, #6
 800a288:	4a09      	ldr	r2, [pc, #36]	@ (800a2b0 <vPortSetupTimerInterrupt+0x44>)
 800a28a:	3b01      	subs	r3, #1
 800a28c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a28e:	4b04      	ldr	r3, [pc, #16]	@ (800a2a0 <vPortSetupTimerInterrupt+0x34>)
 800a290:	2207      	movs	r2, #7
 800a292:	601a      	str	r2, [r3, #0]
}
 800a294:	bf00      	nop
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr
 800a29e:	bf00      	nop
 800a2a0:	e000e010 	.word	0xe000e010
 800a2a4:	e000e018 	.word	0xe000e018
 800a2a8:	20000000 	.word	0x20000000
 800a2ac:	10624dd3 	.word	0x10624dd3
 800a2b0:	e000e014 	.word	0xe000e014

0800a2b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a2b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a2c4 <vPortEnableVFP+0x10>
 800a2b8:	6801      	ldr	r1, [r0, #0]
 800a2ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a2be:	6001      	str	r1, [r0, #0]
 800a2c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a2c2:	bf00      	nop
 800a2c4:	e000ed88 	.word	0xe000ed88

0800a2c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a2ce:	f3ef 8305 	mrs	r3, IPSR
 800a2d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2b0f      	cmp	r3, #15
 800a2d8:	d915      	bls.n	800a306 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a2da:	4a18      	ldr	r2, [pc, #96]	@ (800a33c <vPortValidateInterruptPriority+0x74>)
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	4413      	add	r3, r2
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a2e4:	4b16      	ldr	r3, [pc, #88]	@ (800a340 <vPortValidateInterruptPriority+0x78>)
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	7afa      	ldrb	r2, [r7, #11]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d20b      	bcs.n	800a306 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f2:	f383 8811 	msr	BASEPRI, r3
 800a2f6:	f3bf 8f6f 	isb	sy
 800a2fa:	f3bf 8f4f 	dsb	sy
 800a2fe:	607b      	str	r3, [r7, #4]
}
 800a300:	bf00      	nop
 800a302:	bf00      	nop
 800a304:	e7fd      	b.n	800a302 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a306:	4b0f      	ldr	r3, [pc, #60]	@ (800a344 <vPortValidateInterruptPriority+0x7c>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a30e:	4b0e      	ldr	r3, [pc, #56]	@ (800a348 <vPortValidateInterruptPriority+0x80>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	429a      	cmp	r2, r3
 800a314:	d90b      	bls.n	800a32e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a31a:	f383 8811 	msr	BASEPRI, r3
 800a31e:	f3bf 8f6f 	isb	sy
 800a322:	f3bf 8f4f 	dsb	sy
 800a326:	603b      	str	r3, [r7, #0]
}
 800a328:	bf00      	nop
 800a32a:	bf00      	nop
 800a32c:	e7fd      	b.n	800a32a <vPortValidateInterruptPriority+0x62>
	}
 800a32e:	bf00      	nop
 800a330:	3714      	adds	r7, #20
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr
 800a33a:	bf00      	nop
 800a33c:	e000e3f0 	.word	0xe000e3f0
 800a340:	200013fc 	.word	0x200013fc
 800a344:	e000ed0c 	.word	0xe000ed0c
 800a348:	20001400 	.word	0x20001400

0800a34c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b08a      	sub	sp, #40	@ 0x28
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a354:	2300      	movs	r3, #0
 800a356:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a358:	f7fe ffd0 	bl	80092fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a35c:	4b5c      	ldr	r3, [pc, #368]	@ (800a4d0 <pvPortMalloc+0x184>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d101      	bne.n	800a368 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a364:	f000 f924 	bl	800a5b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a368:	4b5a      	ldr	r3, [pc, #360]	@ (800a4d4 <pvPortMalloc+0x188>)
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4013      	ands	r3, r2
 800a370:	2b00      	cmp	r3, #0
 800a372:	f040 8095 	bne.w	800a4a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d01e      	beq.n	800a3ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a37c:	2208      	movs	r2, #8
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4413      	add	r3, r2
 800a382:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f003 0307 	and.w	r3, r3, #7
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d015      	beq.n	800a3ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f023 0307 	bic.w	r3, r3, #7
 800a394:	3308      	adds	r3, #8
 800a396:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f003 0307 	and.w	r3, r3, #7
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00b      	beq.n	800a3ba <pvPortMalloc+0x6e>
	__asm volatile
 800a3a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a6:	f383 8811 	msr	BASEPRI, r3
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	617b      	str	r3, [r7, #20]
}
 800a3b4:	bf00      	nop
 800a3b6:	bf00      	nop
 800a3b8:	e7fd      	b.n	800a3b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d06f      	beq.n	800a4a0 <pvPortMalloc+0x154>
 800a3c0:	4b45      	ldr	r3, [pc, #276]	@ (800a4d8 <pvPortMalloc+0x18c>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d86a      	bhi.n	800a4a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a3ca:	4b44      	ldr	r3, [pc, #272]	@ (800a4dc <pvPortMalloc+0x190>)
 800a3cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a3ce:	4b43      	ldr	r3, [pc, #268]	@ (800a4dc <pvPortMalloc+0x190>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3d4:	e004      	b.n	800a3e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d903      	bls.n	800a3f2 <pvPortMalloc+0xa6>
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1f1      	bne.n	800a3d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a3f2:	4b37      	ldr	r3, [pc, #220]	@ (800a4d0 <pvPortMalloc+0x184>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d051      	beq.n	800a4a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a3fc:	6a3b      	ldr	r3, [r7, #32]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2208      	movs	r2, #8
 800a402:	4413      	add	r3, r2
 800a404:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	6a3b      	ldr	r3, [r7, #32]
 800a40c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a410:	685a      	ldr	r2, [r3, #4]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	1ad2      	subs	r2, r2, r3
 800a416:	2308      	movs	r3, #8
 800a418:	005b      	lsls	r3, r3, #1
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d920      	bls.n	800a460 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a41e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4413      	add	r3, r2
 800a424:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	f003 0307 	and.w	r3, r3, #7
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d00b      	beq.n	800a448 <pvPortMalloc+0xfc>
	__asm volatile
 800a430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a434:	f383 8811 	msr	BASEPRI, r3
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	613b      	str	r3, [r7, #16]
}
 800a442:	bf00      	nop
 800a444:	bf00      	nop
 800a446:	e7fd      	b.n	800a444 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a44a:	685a      	ldr	r2, [r3, #4]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	1ad2      	subs	r2, r2, r3
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a45a:	69b8      	ldr	r0, [r7, #24]
 800a45c:	f000 f90a 	bl	800a674 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a460:	4b1d      	ldr	r3, [pc, #116]	@ (800a4d8 <pvPortMalloc+0x18c>)
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	4a1b      	ldr	r2, [pc, #108]	@ (800a4d8 <pvPortMalloc+0x18c>)
 800a46c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a46e:	4b1a      	ldr	r3, [pc, #104]	@ (800a4d8 <pvPortMalloc+0x18c>)
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	4b1b      	ldr	r3, [pc, #108]	@ (800a4e0 <pvPortMalloc+0x194>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	429a      	cmp	r2, r3
 800a478:	d203      	bcs.n	800a482 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a47a:	4b17      	ldr	r3, [pc, #92]	@ (800a4d8 <pvPortMalloc+0x18c>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a18      	ldr	r2, [pc, #96]	@ (800a4e0 <pvPortMalloc+0x194>)
 800a480:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a484:	685a      	ldr	r2, [r3, #4]
 800a486:	4b13      	ldr	r3, [pc, #76]	@ (800a4d4 <pvPortMalloc+0x188>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	431a      	orrs	r2, r3
 800a48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a48e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a492:	2200      	movs	r2, #0
 800a494:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a496:	4b13      	ldr	r3, [pc, #76]	@ (800a4e4 <pvPortMalloc+0x198>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	3301      	adds	r3, #1
 800a49c:	4a11      	ldr	r2, [pc, #68]	@ (800a4e4 <pvPortMalloc+0x198>)
 800a49e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a4a0:	f7fe ff3a 	bl	8009318 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	f003 0307 	and.w	r3, r3, #7
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00b      	beq.n	800a4c6 <pvPortMalloc+0x17a>
	__asm volatile
 800a4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	60fb      	str	r3, [r7, #12]
}
 800a4c0:	bf00      	nop
 800a4c2:	bf00      	nop
 800a4c4:	e7fd      	b.n	800a4c2 <pvPortMalloc+0x176>
	return pvReturn;
 800a4c6:	69fb      	ldr	r3, [r7, #28]
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3728      	adds	r7, #40	@ 0x28
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	20003b1c 	.word	0x20003b1c
 800a4d4:	20003b30 	.word	0x20003b30
 800a4d8:	20003b20 	.word	0x20003b20
 800a4dc:	20003b14 	.word	0x20003b14
 800a4e0:	20003b24 	.word	0x20003b24
 800a4e4:	20003b28 	.word	0x20003b28

0800a4e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b086      	sub	sp, #24
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d04f      	beq.n	800a59a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a4fa:	2308      	movs	r3, #8
 800a4fc:	425b      	negs	r3, r3
 800a4fe:	697a      	ldr	r2, [r7, #20]
 800a500:	4413      	add	r3, r2
 800a502:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	685a      	ldr	r2, [r3, #4]
 800a50c:	4b25      	ldr	r3, [pc, #148]	@ (800a5a4 <vPortFree+0xbc>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4013      	ands	r3, r2
 800a512:	2b00      	cmp	r3, #0
 800a514:	d10b      	bne.n	800a52e <vPortFree+0x46>
	__asm volatile
 800a516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a51a:	f383 8811 	msr	BASEPRI, r3
 800a51e:	f3bf 8f6f 	isb	sy
 800a522:	f3bf 8f4f 	dsb	sy
 800a526:	60fb      	str	r3, [r7, #12]
}
 800a528:	bf00      	nop
 800a52a:	bf00      	nop
 800a52c:	e7fd      	b.n	800a52a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d00b      	beq.n	800a54e <vPortFree+0x66>
	__asm volatile
 800a536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a53a:	f383 8811 	msr	BASEPRI, r3
 800a53e:	f3bf 8f6f 	isb	sy
 800a542:	f3bf 8f4f 	dsb	sy
 800a546:	60bb      	str	r3, [r7, #8]
}
 800a548:	bf00      	nop
 800a54a:	bf00      	nop
 800a54c:	e7fd      	b.n	800a54a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	685a      	ldr	r2, [r3, #4]
 800a552:	4b14      	ldr	r3, [pc, #80]	@ (800a5a4 <vPortFree+0xbc>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4013      	ands	r3, r2
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d01e      	beq.n	800a59a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d11a      	bne.n	800a59a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	685a      	ldr	r2, [r3, #4]
 800a568:	4b0e      	ldr	r3, [pc, #56]	@ (800a5a4 <vPortFree+0xbc>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	43db      	mvns	r3, r3
 800a56e:	401a      	ands	r2, r3
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a574:	f7fe fec2 	bl	80092fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	685a      	ldr	r2, [r3, #4]
 800a57c:	4b0a      	ldr	r3, [pc, #40]	@ (800a5a8 <vPortFree+0xc0>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4413      	add	r3, r2
 800a582:	4a09      	ldr	r2, [pc, #36]	@ (800a5a8 <vPortFree+0xc0>)
 800a584:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a586:	6938      	ldr	r0, [r7, #16]
 800a588:	f000 f874 	bl	800a674 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a58c:	4b07      	ldr	r3, [pc, #28]	@ (800a5ac <vPortFree+0xc4>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	3301      	adds	r3, #1
 800a592:	4a06      	ldr	r2, [pc, #24]	@ (800a5ac <vPortFree+0xc4>)
 800a594:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a596:	f7fe febf 	bl	8009318 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a59a:	bf00      	nop
 800a59c:	3718      	adds	r7, #24
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	20003b30 	.word	0x20003b30
 800a5a8:	20003b20 	.word	0x20003b20
 800a5ac:	20003b2c 	.word	0x20003b2c

0800a5b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a5b6:	f242 7310 	movw	r3, #10000	@ 0x2710
 800a5ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a5bc:	4b27      	ldr	r3, [pc, #156]	@ (800a65c <prvHeapInit+0xac>)
 800a5be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f003 0307 	and.w	r3, r3, #7
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00c      	beq.n	800a5e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	3307      	adds	r3, #7
 800a5ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f023 0307 	bic.w	r3, r3, #7
 800a5d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	4a1f      	ldr	r2, [pc, #124]	@ (800a65c <prvHeapInit+0xac>)
 800a5e0:	4413      	add	r3, r2
 800a5e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a5e8:	4a1d      	ldr	r2, [pc, #116]	@ (800a660 <prvHeapInit+0xb0>)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a5ee:	4b1c      	ldr	r3, [pc, #112]	@ (800a660 <prvHeapInit+0xb0>)
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a5fc:	2208      	movs	r2, #8
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	1a9b      	subs	r3, r3, r2
 800a602:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f023 0307 	bic.w	r3, r3, #7
 800a60a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	4a15      	ldr	r2, [pc, #84]	@ (800a664 <prvHeapInit+0xb4>)
 800a610:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a612:	4b14      	ldr	r3, [pc, #80]	@ (800a664 <prvHeapInit+0xb4>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2200      	movs	r2, #0
 800a618:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a61a:	4b12      	ldr	r3, [pc, #72]	@ (800a664 <prvHeapInit+0xb4>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2200      	movs	r2, #0
 800a620:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	1ad2      	subs	r2, r2, r3
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a630:	4b0c      	ldr	r3, [pc, #48]	@ (800a664 <prvHeapInit+0xb4>)
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	4a0a      	ldr	r2, [pc, #40]	@ (800a668 <prvHeapInit+0xb8>)
 800a63e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	4a09      	ldr	r2, [pc, #36]	@ (800a66c <prvHeapInit+0xbc>)
 800a646:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a648:	4b09      	ldr	r3, [pc, #36]	@ (800a670 <prvHeapInit+0xc0>)
 800a64a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a64e:	601a      	str	r2, [r3, #0]
}
 800a650:	bf00      	nop
 800a652:	3714      	adds	r7, #20
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr
 800a65c:	20001404 	.word	0x20001404
 800a660:	20003b14 	.word	0x20003b14
 800a664:	20003b1c 	.word	0x20003b1c
 800a668:	20003b24 	.word	0x20003b24
 800a66c:	20003b20 	.word	0x20003b20
 800a670:	20003b30 	.word	0x20003b30

0800a674 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a674:	b480      	push	{r7}
 800a676:	b085      	sub	sp, #20
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a67c:	4b28      	ldr	r3, [pc, #160]	@ (800a720 <prvInsertBlockIntoFreeList+0xac>)
 800a67e:	60fb      	str	r3, [r7, #12]
 800a680:	e002      	b.n	800a688 <prvInsertBlockIntoFreeList+0x14>
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	60fb      	str	r3, [r7, #12]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d8f7      	bhi.n	800a682 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	4413      	add	r3, r2
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d108      	bne.n	800a6b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	685a      	ldr	r2, [r3, #4]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	441a      	add	r2, r3
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	68ba      	ldr	r2, [r7, #8]
 800a6c0:	441a      	add	r2, r3
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d118      	bne.n	800a6fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	4b15      	ldr	r3, [pc, #84]	@ (800a724 <prvInsertBlockIntoFreeList+0xb0>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d00d      	beq.n	800a6f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	685a      	ldr	r2, [r3, #4]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	441a      	add	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	601a      	str	r2, [r3, #0]
 800a6f0:	e008      	b.n	800a704 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a6f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a724 <prvInsertBlockIntoFreeList+0xb0>)
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	601a      	str	r2, [r3, #0]
 800a6fa:	e003      	b.n	800a704 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d002      	beq.n	800a712 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a712:	bf00      	nop
 800a714:	3714      	adds	r7, #20
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	20003b14 	.word	0x20003b14
 800a724:	20003b1c 	.word	0x20003b1c

0800a728 <__cvt>:
 800a728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a72c:	ec57 6b10 	vmov	r6, r7, d0
 800a730:	2f00      	cmp	r7, #0
 800a732:	460c      	mov	r4, r1
 800a734:	4619      	mov	r1, r3
 800a736:	463b      	mov	r3, r7
 800a738:	bfbb      	ittet	lt
 800a73a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a73e:	461f      	movlt	r7, r3
 800a740:	2300      	movge	r3, #0
 800a742:	232d      	movlt	r3, #45	@ 0x2d
 800a744:	700b      	strb	r3, [r1, #0]
 800a746:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a748:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a74c:	4691      	mov	r9, r2
 800a74e:	f023 0820 	bic.w	r8, r3, #32
 800a752:	bfbc      	itt	lt
 800a754:	4632      	movlt	r2, r6
 800a756:	4616      	movlt	r6, r2
 800a758:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a75c:	d005      	beq.n	800a76a <__cvt+0x42>
 800a75e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a762:	d100      	bne.n	800a766 <__cvt+0x3e>
 800a764:	3401      	adds	r4, #1
 800a766:	2102      	movs	r1, #2
 800a768:	e000      	b.n	800a76c <__cvt+0x44>
 800a76a:	2103      	movs	r1, #3
 800a76c:	ab03      	add	r3, sp, #12
 800a76e:	9301      	str	r3, [sp, #4]
 800a770:	ab02      	add	r3, sp, #8
 800a772:	9300      	str	r3, [sp, #0]
 800a774:	ec47 6b10 	vmov	d0, r6, r7
 800a778:	4653      	mov	r3, sl
 800a77a:	4622      	mov	r2, r4
 800a77c:	f001 f9dc 	bl	800bb38 <_dtoa_r>
 800a780:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a784:	4605      	mov	r5, r0
 800a786:	d119      	bne.n	800a7bc <__cvt+0x94>
 800a788:	f019 0f01 	tst.w	r9, #1
 800a78c:	d00e      	beq.n	800a7ac <__cvt+0x84>
 800a78e:	eb00 0904 	add.w	r9, r0, r4
 800a792:	2200      	movs	r2, #0
 800a794:	2300      	movs	r3, #0
 800a796:	4630      	mov	r0, r6
 800a798:	4639      	mov	r1, r7
 800a79a:	f7f6 f9bd 	bl	8000b18 <__aeabi_dcmpeq>
 800a79e:	b108      	cbz	r0, 800a7a4 <__cvt+0x7c>
 800a7a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a7a4:	2230      	movs	r2, #48	@ 0x30
 800a7a6:	9b03      	ldr	r3, [sp, #12]
 800a7a8:	454b      	cmp	r3, r9
 800a7aa:	d31e      	bcc.n	800a7ea <__cvt+0xc2>
 800a7ac:	9b03      	ldr	r3, [sp, #12]
 800a7ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7b0:	1b5b      	subs	r3, r3, r5
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	6013      	str	r3, [r2, #0]
 800a7b6:	b004      	add	sp, #16
 800a7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a7c0:	eb00 0904 	add.w	r9, r0, r4
 800a7c4:	d1e5      	bne.n	800a792 <__cvt+0x6a>
 800a7c6:	7803      	ldrb	r3, [r0, #0]
 800a7c8:	2b30      	cmp	r3, #48	@ 0x30
 800a7ca:	d10a      	bne.n	800a7e2 <__cvt+0xba>
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	4639      	mov	r1, r7
 800a7d4:	f7f6 f9a0 	bl	8000b18 <__aeabi_dcmpeq>
 800a7d8:	b918      	cbnz	r0, 800a7e2 <__cvt+0xba>
 800a7da:	f1c4 0401 	rsb	r4, r4, #1
 800a7de:	f8ca 4000 	str.w	r4, [sl]
 800a7e2:	f8da 3000 	ldr.w	r3, [sl]
 800a7e6:	4499      	add	r9, r3
 800a7e8:	e7d3      	b.n	800a792 <__cvt+0x6a>
 800a7ea:	1c59      	adds	r1, r3, #1
 800a7ec:	9103      	str	r1, [sp, #12]
 800a7ee:	701a      	strb	r2, [r3, #0]
 800a7f0:	e7d9      	b.n	800a7a6 <__cvt+0x7e>

0800a7f2 <__exponent>:
 800a7f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7f4:	2900      	cmp	r1, #0
 800a7f6:	bfba      	itte	lt
 800a7f8:	4249      	neglt	r1, r1
 800a7fa:	232d      	movlt	r3, #45	@ 0x2d
 800a7fc:	232b      	movge	r3, #43	@ 0x2b
 800a7fe:	2909      	cmp	r1, #9
 800a800:	7002      	strb	r2, [r0, #0]
 800a802:	7043      	strb	r3, [r0, #1]
 800a804:	dd29      	ble.n	800a85a <__exponent+0x68>
 800a806:	f10d 0307 	add.w	r3, sp, #7
 800a80a:	461d      	mov	r5, r3
 800a80c:	270a      	movs	r7, #10
 800a80e:	461a      	mov	r2, r3
 800a810:	fbb1 f6f7 	udiv	r6, r1, r7
 800a814:	fb07 1416 	mls	r4, r7, r6, r1
 800a818:	3430      	adds	r4, #48	@ 0x30
 800a81a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a81e:	460c      	mov	r4, r1
 800a820:	2c63      	cmp	r4, #99	@ 0x63
 800a822:	f103 33ff 	add.w	r3, r3, #4294967295
 800a826:	4631      	mov	r1, r6
 800a828:	dcf1      	bgt.n	800a80e <__exponent+0x1c>
 800a82a:	3130      	adds	r1, #48	@ 0x30
 800a82c:	1e94      	subs	r4, r2, #2
 800a82e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a832:	1c41      	adds	r1, r0, #1
 800a834:	4623      	mov	r3, r4
 800a836:	42ab      	cmp	r3, r5
 800a838:	d30a      	bcc.n	800a850 <__exponent+0x5e>
 800a83a:	f10d 0309 	add.w	r3, sp, #9
 800a83e:	1a9b      	subs	r3, r3, r2
 800a840:	42ac      	cmp	r4, r5
 800a842:	bf88      	it	hi
 800a844:	2300      	movhi	r3, #0
 800a846:	3302      	adds	r3, #2
 800a848:	4403      	add	r3, r0
 800a84a:	1a18      	subs	r0, r3, r0
 800a84c:	b003      	add	sp, #12
 800a84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a850:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a854:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a858:	e7ed      	b.n	800a836 <__exponent+0x44>
 800a85a:	2330      	movs	r3, #48	@ 0x30
 800a85c:	3130      	adds	r1, #48	@ 0x30
 800a85e:	7083      	strb	r3, [r0, #2]
 800a860:	70c1      	strb	r1, [r0, #3]
 800a862:	1d03      	adds	r3, r0, #4
 800a864:	e7f1      	b.n	800a84a <__exponent+0x58>
	...

0800a868 <_printf_float>:
 800a868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86c:	b08d      	sub	sp, #52	@ 0x34
 800a86e:	460c      	mov	r4, r1
 800a870:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a874:	4616      	mov	r6, r2
 800a876:	461f      	mov	r7, r3
 800a878:	4605      	mov	r5, r0
 800a87a:	f000 fff3 	bl	800b864 <_localeconv_r>
 800a87e:	6803      	ldr	r3, [r0, #0]
 800a880:	9304      	str	r3, [sp, #16]
 800a882:	4618      	mov	r0, r3
 800a884:	f7f5 fd1c 	bl	80002c0 <strlen>
 800a888:	2300      	movs	r3, #0
 800a88a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a88c:	f8d8 3000 	ldr.w	r3, [r8]
 800a890:	9005      	str	r0, [sp, #20]
 800a892:	3307      	adds	r3, #7
 800a894:	f023 0307 	bic.w	r3, r3, #7
 800a898:	f103 0208 	add.w	r2, r3, #8
 800a89c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a8a0:	f8d4 b000 	ldr.w	fp, [r4]
 800a8a4:	f8c8 2000 	str.w	r2, [r8]
 800a8a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a8b0:	9307      	str	r3, [sp, #28]
 800a8b2:	f8cd 8018 	str.w	r8, [sp, #24]
 800a8b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a8ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8be:	4b9c      	ldr	r3, [pc, #624]	@ (800ab30 <_printf_float+0x2c8>)
 800a8c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8c4:	f7f6 f95a 	bl	8000b7c <__aeabi_dcmpun>
 800a8c8:	bb70      	cbnz	r0, 800a928 <_printf_float+0xc0>
 800a8ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8ce:	4b98      	ldr	r3, [pc, #608]	@ (800ab30 <_printf_float+0x2c8>)
 800a8d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8d4:	f7f6 f934 	bl	8000b40 <__aeabi_dcmple>
 800a8d8:	bb30      	cbnz	r0, 800a928 <_printf_float+0xc0>
 800a8da:	2200      	movs	r2, #0
 800a8dc:	2300      	movs	r3, #0
 800a8de:	4640      	mov	r0, r8
 800a8e0:	4649      	mov	r1, r9
 800a8e2:	f7f6 f923 	bl	8000b2c <__aeabi_dcmplt>
 800a8e6:	b110      	cbz	r0, 800a8ee <_printf_float+0x86>
 800a8e8:	232d      	movs	r3, #45	@ 0x2d
 800a8ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8ee:	4a91      	ldr	r2, [pc, #580]	@ (800ab34 <_printf_float+0x2cc>)
 800a8f0:	4b91      	ldr	r3, [pc, #580]	@ (800ab38 <_printf_float+0x2d0>)
 800a8f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a8f6:	bf94      	ite	ls
 800a8f8:	4690      	movls	r8, r2
 800a8fa:	4698      	movhi	r8, r3
 800a8fc:	2303      	movs	r3, #3
 800a8fe:	6123      	str	r3, [r4, #16]
 800a900:	f02b 0304 	bic.w	r3, fp, #4
 800a904:	6023      	str	r3, [r4, #0]
 800a906:	f04f 0900 	mov.w	r9, #0
 800a90a:	9700      	str	r7, [sp, #0]
 800a90c:	4633      	mov	r3, r6
 800a90e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a910:	4621      	mov	r1, r4
 800a912:	4628      	mov	r0, r5
 800a914:	f000 f9d2 	bl	800acbc <_printf_common>
 800a918:	3001      	adds	r0, #1
 800a91a:	f040 808d 	bne.w	800aa38 <_printf_float+0x1d0>
 800a91e:	f04f 30ff 	mov.w	r0, #4294967295
 800a922:	b00d      	add	sp, #52	@ 0x34
 800a924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a928:	4642      	mov	r2, r8
 800a92a:	464b      	mov	r3, r9
 800a92c:	4640      	mov	r0, r8
 800a92e:	4649      	mov	r1, r9
 800a930:	f7f6 f924 	bl	8000b7c <__aeabi_dcmpun>
 800a934:	b140      	cbz	r0, 800a948 <_printf_float+0xe0>
 800a936:	464b      	mov	r3, r9
 800a938:	2b00      	cmp	r3, #0
 800a93a:	bfbc      	itt	lt
 800a93c:	232d      	movlt	r3, #45	@ 0x2d
 800a93e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a942:	4a7e      	ldr	r2, [pc, #504]	@ (800ab3c <_printf_float+0x2d4>)
 800a944:	4b7e      	ldr	r3, [pc, #504]	@ (800ab40 <_printf_float+0x2d8>)
 800a946:	e7d4      	b.n	800a8f2 <_printf_float+0x8a>
 800a948:	6863      	ldr	r3, [r4, #4]
 800a94a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a94e:	9206      	str	r2, [sp, #24]
 800a950:	1c5a      	adds	r2, r3, #1
 800a952:	d13b      	bne.n	800a9cc <_printf_float+0x164>
 800a954:	2306      	movs	r3, #6
 800a956:	6063      	str	r3, [r4, #4]
 800a958:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a95c:	2300      	movs	r3, #0
 800a95e:	6022      	str	r2, [r4, #0]
 800a960:	9303      	str	r3, [sp, #12]
 800a962:	ab0a      	add	r3, sp, #40	@ 0x28
 800a964:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a968:	ab09      	add	r3, sp, #36	@ 0x24
 800a96a:	9300      	str	r3, [sp, #0]
 800a96c:	6861      	ldr	r1, [r4, #4]
 800a96e:	ec49 8b10 	vmov	d0, r8, r9
 800a972:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a976:	4628      	mov	r0, r5
 800a978:	f7ff fed6 	bl	800a728 <__cvt>
 800a97c:	9b06      	ldr	r3, [sp, #24]
 800a97e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a980:	2b47      	cmp	r3, #71	@ 0x47
 800a982:	4680      	mov	r8, r0
 800a984:	d129      	bne.n	800a9da <_printf_float+0x172>
 800a986:	1cc8      	adds	r0, r1, #3
 800a988:	db02      	blt.n	800a990 <_printf_float+0x128>
 800a98a:	6863      	ldr	r3, [r4, #4]
 800a98c:	4299      	cmp	r1, r3
 800a98e:	dd41      	ble.n	800aa14 <_printf_float+0x1ac>
 800a990:	f1aa 0a02 	sub.w	sl, sl, #2
 800a994:	fa5f fa8a 	uxtb.w	sl, sl
 800a998:	3901      	subs	r1, #1
 800a99a:	4652      	mov	r2, sl
 800a99c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a9a0:	9109      	str	r1, [sp, #36]	@ 0x24
 800a9a2:	f7ff ff26 	bl	800a7f2 <__exponent>
 800a9a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9a8:	1813      	adds	r3, r2, r0
 800a9aa:	2a01      	cmp	r2, #1
 800a9ac:	4681      	mov	r9, r0
 800a9ae:	6123      	str	r3, [r4, #16]
 800a9b0:	dc02      	bgt.n	800a9b8 <_printf_float+0x150>
 800a9b2:	6822      	ldr	r2, [r4, #0]
 800a9b4:	07d2      	lsls	r2, r2, #31
 800a9b6:	d501      	bpl.n	800a9bc <_printf_float+0x154>
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	6123      	str	r3, [r4, #16]
 800a9bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d0a2      	beq.n	800a90a <_printf_float+0xa2>
 800a9c4:	232d      	movs	r3, #45	@ 0x2d
 800a9c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9ca:	e79e      	b.n	800a90a <_printf_float+0xa2>
 800a9cc:	9a06      	ldr	r2, [sp, #24]
 800a9ce:	2a47      	cmp	r2, #71	@ 0x47
 800a9d0:	d1c2      	bne.n	800a958 <_printf_float+0xf0>
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1c0      	bne.n	800a958 <_printf_float+0xf0>
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e7bd      	b.n	800a956 <_printf_float+0xee>
 800a9da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a9de:	d9db      	bls.n	800a998 <_printf_float+0x130>
 800a9e0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a9e4:	d118      	bne.n	800aa18 <_printf_float+0x1b0>
 800a9e6:	2900      	cmp	r1, #0
 800a9e8:	6863      	ldr	r3, [r4, #4]
 800a9ea:	dd0b      	ble.n	800aa04 <_printf_float+0x19c>
 800a9ec:	6121      	str	r1, [r4, #16]
 800a9ee:	b913      	cbnz	r3, 800a9f6 <_printf_float+0x18e>
 800a9f0:	6822      	ldr	r2, [r4, #0]
 800a9f2:	07d0      	lsls	r0, r2, #31
 800a9f4:	d502      	bpl.n	800a9fc <_printf_float+0x194>
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	440b      	add	r3, r1
 800a9fa:	6123      	str	r3, [r4, #16]
 800a9fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a9fe:	f04f 0900 	mov.w	r9, #0
 800aa02:	e7db      	b.n	800a9bc <_printf_float+0x154>
 800aa04:	b913      	cbnz	r3, 800aa0c <_printf_float+0x1a4>
 800aa06:	6822      	ldr	r2, [r4, #0]
 800aa08:	07d2      	lsls	r2, r2, #31
 800aa0a:	d501      	bpl.n	800aa10 <_printf_float+0x1a8>
 800aa0c:	3302      	adds	r3, #2
 800aa0e:	e7f4      	b.n	800a9fa <_printf_float+0x192>
 800aa10:	2301      	movs	r3, #1
 800aa12:	e7f2      	b.n	800a9fa <_printf_float+0x192>
 800aa14:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800aa18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa1a:	4299      	cmp	r1, r3
 800aa1c:	db05      	blt.n	800aa2a <_printf_float+0x1c2>
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	6121      	str	r1, [r4, #16]
 800aa22:	07d8      	lsls	r0, r3, #31
 800aa24:	d5ea      	bpl.n	800a9fc <_printf_float+0x194>
 800aa26:	1c4b      	adds	r3, r1, #1
 800aa28:	e7e7      	b.n	800a9fa <_printf_float+0x192>
 800aa2a:	2900      	cmp	r1, #0
 800aa2c:	bfd4      	ite	le
 800aa2e:	f1c1 0202 	rsble	r2, r1, #2
 800aa32:	2201      	movgt	r2, #1
 800aa34:	4413      	add	r3, r2
 800aa36:	e7e0      	b.n	800a9fa <_printf_float+0x192>
 800aa38:	6823      	ldr	r3, [r4, #0]
 800aa3a:	055a      	lsls	r2, r3, #21
 800aa3c:	d407      	bmi.n	800aa4e <_printf_float+0x1e6>
 800aa3e:	6923      	ldr	r3, [r4, #16]
 800aa40:	4642      	mov	r2, r8
 800aa42:	4631      	mov	r1, r6
 800aa44:	4628      	mov	r0, r5
 800aa46:	47b8      	blx	r7
 800aa48:	3001      	adds	r0, #1
 800aa4a:	d12b      	bne.n	800aaa4 <_printf_float+0x23c>
 800aa4c:	e767      	b.n	800a91e <_printf_float+0xb6>
 800aa4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aa52:	f240 80dd 	bls.w	800ac10 <_printf_float+0x3a8>
 800aa56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	f7f6 f85b 	bl	8000b18 <__aeabi_dcmpeq>
 800aa62:	2800      	cmp	r0, #0
 800aa64:	d033      	beq.n	800aace <_printf_float+0x266>
 800aa66:	4a37      	ldr	r2, [pc, #220]	@ (800ab44 <_printf_float+0x2dc>)
 800aa68:	2301      	movs	r3, #1
 800aa6a:	4631      	mov	r1, r6
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	47b8      	blx	r7
 800aa70:	3001      	adds	r0, #1
 800aa72:	f43f af54 	beq.w	800a91e <_printf_float+0xb6>
 800aa76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aa7a:	4543      	cmp	r3, r8
 800aa7c:	db02      	blt.n	800aa84 <_printf_float+0x21c>
 800aa7e:	6823      	ldr	r3, [r4, #0]
 800aa80:	07d8      	lsls	r0, r3, #31
 800aa82:	d50f      	bpl.n	800aaa4 <_printf_float+0x23c>
 800aa84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa88:	4631      	mov	r1, r6
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	47b8      	blx	r7
 800aa8e:	3001      	adds	r0, #1
 800aa90:	f43f af45 	beq.w	800a91e <_printf_float+0xb6>
 800aa94:	f04f 0900 	mov.w	r9, #0
 800aa98:	f108 38ff 	add.w	r8, r8, #4294967295
 800aa9c:	f104 0a1a 	add.w	sl, r4, #26
 800aaa0:	45c8      	cmp	r8, r9
 800aaa2:	dc09      	bgt.n	800aab8 <_printf_float+0x250>
 800aaa4:	6823      	ldr	r3, [r4, #0]
 800aaa6:	079b      	lsls	r3, r3, #30
 800aaa8:	f100 8103 	bmi.w	800acb2 <_printf_float+0x44a>
 800aaac:	68e0      	ldr	r0, [r4, #12]
 800aaae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aab0:	4298      	cmp	r0, r3
 800aab2:	bfb8      	it	lt
 800aab4:	4618      	movlt	r0, r3
 800aab6:	e734      	b.n	800a922 <_printf_float+0xba>
 800aab8:	2301      	movs	r3, #1
 800aaba:	4652      	mov	r2, sl
 800aabc:	4631      	mov	r1, r6
 800aabe:	4628      	mov	r0, r5
 800aac0:	47b8      	blx	r7
 800aac2:	3001      	adds	r0, #1
 800aac4:	f43f af2b 	beq.w	800a91e <_printf_float+0xb6>
 800aac8:	f109 0901 	add.w	r9, r9, #1
 800aacc:	e7e8      	b.n	800aaa0 <_printf_float+0x238>
 800aace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	dc39      	bgt.n	800ab48 <_printf_float+0x2e0>
 800aad4:	4a1b      	ldr	r2, [pc, #108]	@ (800ab44 <_printf_float+0x2dc>)
 800aad6:	2301      	movs	r3, #1
 800aad8:	4631      	mov	r1, r6
 800aada:	4628      	mov	r0, r5
 800aadc:	47b8      	blx	r7
 800aade:	3001      	adds	r0, #1
 800aae0:	f43f af1d 	beq.w	800a91e <_printf_float+0xb6>
 800aae4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800aae8:	ea59 0303 	orrs.w	r3, r9, r3
 800aaec:	d102      	bne.n	800aaf4 <_printf_float+0x28c>
 800aaee:	6823      	ldr	r3, [r4, #0]
 800aaf0:	07d9      	lsls	r1, r3, #31
 800aaf2:	d5d7      	bpl.n	800aaa4 <_printf_float+0x23c>
 800aaf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaf8:	4631      	mov	r1, r6
 800aafa:	4628      	mov	r0, r5
 800aafc:	47b8      	blx	r7
 800aafe:	3001      	adds	r0, #1
 800ab00:	f43f af0d 	beq.w	800a91e <_printf_float+0xb6>
 800ab04:	f04f 0a00 	mov.w	sl, #0
 800ab08:	f104 0b1a 	add.w	fp, r4, #26
 800ab0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab0e:	425b      	negs	r3, r3
 800ab10:	4553      	cmp	r3, sl
 800ab12:	dc01      	bgt.n	800ab18 <_printf_float+0x2b0>
 800ab14:	464b      	mov	r3, r9
 800ab16:	e793      	b.n	800aa40 <_printf_float+0x1d8>
 800ab18:	2301      	movs	r3, #1
 800ab1a:	465a      	mov	r2, fp
 800ab1c:	4631      	mov	r1, r6
 800ab1e:	4628      	mov	r0, r5
 800ab20:	47b8      	blx	r7
 800ab22:	3001      	adds	r0, #1
 800ab24:	f43f aefb 	beq.w	800a91e <_printf_float+0xb6>
 800ab28:	f10a 0a01 	add.w	sl, sl, #1
 800ab2c:	e7ee      	b.n	800ab0c <_printf_float+0x2a4>
 800ab2e:	bf00      	nop
 800ab30:	7fefffff 	.word	0x7fefffff
 800ab34:	0800f69c 	.word	0x0800f69c
 800ab38:	0800f6a0 	.word	0x0800f6a0
 800ab3c:	0800f6a4 	.word	0x0800f6a4
 800ab40:	0800f6a8 	.word	0x0800f6a8
 800ab44:	0800f6ac 	.word	0x0800f6ac
 800ab48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ab4a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ab4e:	4553      	cmp	r3, sl
 800ab50:	bfa8      	it	ge
 800ab52:	4653      	movge	r3, sl
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	4699      	mov	r9, r3
 800ab58:	dc36      	bgt.n	800abc8 <_printf_float+0x360>
 800ab5a:	f04f 0b00 	mov.w	fp, #0
 800ab5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab62:	f104 021a 	add.w	r2, r4, #26
 800ab66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ab68:	9306      	str	r3, [sp, #24]
 800ab6a:	eba3 0309 	sub.w	r3, r3, r9
 800ab6e:	455b      	cmp	r3, fp
 800ab70:	dc31      	bgt.n	800abd6 <_printf_float+0x36e>
 800ab72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab74:	459a      	cmp	sl, r3
 800ab76:	dc3a      	bgt.n	800abee <_printf_float+0x386>
 800ab78:	6823      	ldr	r3, [r4, #0]
 800ab7a:	07da      	lsls	r2, r3, #31
 800ab7c:	d437      	bmi.n	800abee <_printf_float+0x386>
 800ab7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab80:	ebaa 0903 	sub.w	r9, sl, r3
 800ab84:	9b06      	ldr	r3, [sp, #24]
 800ab86:	ebaa 0303 	sub.w	r3, sl, r3
 800ab8a:	4599      	cmp	r9, r3
 800ab8c:	bfa8      	it	ge
 800ab8e:	4699      	movge	r9, r3
 800ab90:	f1b9 0f00 	cmp.w	r9, #0
 800ab94:	dc33      	bgt.n	800abfe <_printf_float+0x396>
 800ab96:	f04f 0800 	mov.w	r8, #0
 800ab9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab9e:	f104 0b1a 	add.w	fp, r4, #26
 800aba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aba4:	ebaa 0303 	sub.w	r3, sl, r3
 800aba8:	eba3 0309 	sub.w	r3, r3, r9
 800abac:	4543      	cmp	r3, r8
 800abae:	f77f af79 	ble.w	800aaa4 <_printf_float+0x23c>
 800abb2:	2301      	movs	r3, #1
 800abb4:	465a      	mov	r2, fp
 800abb6:	4631      	mov	r1, r6
 800abb8:	4628      	mov	r0, r5
 800abba:	47b8      	blx	r7
 800abbc:	3001      	adds	r0, #1
 800abbe:	f43f aeae 	beq.w	800a91e <_printf_float+0xb6>
 800abc2:	f108 0801 	add.w	r8, r8, #1
 800abc6:	e7ec      	b.n	800aba2 <_printf_float+0x33a>
 800abc8:	4642      	mov	r2, r8
 800abca:	4631      	mov	r1, r6
 800abcc:	4628      	mov	r0, r5
 800abce:	47b8      	blx	r7
 800abd0:	3001      	adds	r0, #1
 800abd2:	d1c2      	bne.n	800ab5a <_printf_float+0x2f2>
 800abd4:	e6a3      	b.n	800a91e <_printf_float+0xb6>
 800abd6:	2301      	movs	r3, #1
 800abd8:	4631      	mov	r1, r6
 800abda:	4628      	mov	r0, r5
 800abdc:	9206      	str	r2, [sp, #24]
 800abde:	47b8      	blx	r7
 800abe0:	3001      	adds	r0, #1
 800abe2:	f43f ae9c 	beq.w	800a91e <_printf_float+0xb6>
 800abe6:	9a06      	ldr	r2, [sp, #24]
 800abe8:	f10b 0b01 	add.w	fp, fp, #1
 800abec:	e7bb      	b.n	800ab66 <_printf_float+0x2fe>
 800abee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abf2:	4631      	mov	r1, r6
 800abf4:	4628      	mov	r0, r5
 800abf6:	47b8      	blx	r7
 800abf8:	3001      	adds	r0, #1
 800abfa:	d1c0      	bne.n	800ab7e <_printf_float+0x316>
 800abfc:	e68f      	b.n	800a91e <_printf_float+0xb6>
 800abfe:	9a06      	ldr	r2, [sp, #24]
 800ac00:	464b      	mov	r3, r9
 800ac02:	4442      	add	r2, r8
 800ac04:	4631      	mov	r1, r6
 800ac06:	4628      	mov	r0, r5
 800ac08:	47b8      	blx	r7
 800ac0a:	3001      	adds	r0, #1
 800ac0c:	d1c3      	bne.n	800ab96 <_printf_float+0x32e>
 800ac0e:	e686      	b.n	800a91e <_printf_float+0xb6>
 800ac10:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ac14:	f1ba 0f01 	cmp.w	sl, #1
 800ac18:	dc01      	bgt.n	800ac1e <_printf_float+0x3b6>
 800ac1a:	07db      	lsls	r3, r3, #31
 800ac1c:	d536      	bpl.n	800ac8c <_printf_float+0x424>
 800ac1e:	2301      	movs	r3, #1
 800ac20:	4642      	mov	r2, r8
 800ac22:	4631      	mov	r1, r6
 800ac24:	4628      	mov	r0, r5
 800ac26:	47b8      	blx	r7
 800ac28:	3001      	adds	r0, #1
 800ac2a:	f43f ae78 	beq.w	800a91e <_printf_float+0xb6>
 800ac2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac32:	4631      	mov	r1, r6
 800ac34:	4628      	mov	r0, r5
 800ac36:	47b8      	blx	r7
 800ac38:	3001      	adds	r0, #1
 800ac3a:	f43f ae70 	beq.w	800a91e <_printf_float+0xb6>
 800ac3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ac42:	2200      	movs	r2, #0
 800ac44:	2300      	movs	r3, #0
 800ac46:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac4a:	f7f5 ff65 	bl	8000b18 <__aeabi_dcmpeq>
 800ac4e:	b9c0      	cbnz	r0, 800ac82 <_printf_float+0x41a>
 800ac50:	4653      	mov	r3, sl
 800ac52:	f108 0201 	add.w	r2, r8, #1
 800ac56:	4631      	mov	r1, r6
 800ac58:	4628      	mov	r0, r5
 800ac5a:	47b8      	blx	r7
 800ac5c:	3001      	adds	r0, #1
 800ac5e:	d10c      	bne.n	800ac7a <_printf_float+0x412>
 800ac60:	e65d      	b.n	800a91e <_printf_float+0xb6>
 800ac62:	2301      	movs	r3, #1
 800ac64:	465a      	mov	r2, fp
 800ac66:	4631      	mov	r1, r6
 800ac68:	4628      	mov	r0, r5
 800ac6a:	47b8      	blx	r7
 800ac6c:	3001      	adds	r0, #1
 800ac6e:	f43f ae56 	beq.w	800a91e <_printf_float+0xb6>
 800ac72:	f108 0801 	add.w	r8, r8, #1
 800ac76:	45d0      	cmp	r8, sl
 800ac78:	dbf3      	blt.n	800ac62 <_printf_float+0x3fa>
 800ac7a:	464b      	mov	r3, r9
 800ac7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ac80:	e6df      	b.n	800aa42 <_printf_float+0x1da>
 800ac82:	f04f 0800 	mov.w	r8, #0
 800ac86:	f104 0b1a 	add.w	fp, r4, #26
 800ac8a:	e7f4      	b.n	800ac76 <_printf_float+0x40e>
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	4642      	mov	r2, r8
 800ac90:	e7e1      	b.n	800ac56 <_printf_float+0x3ee>
 800ac92:	2301      	movs	r3, #1
 800ac94:	464a      	mov	r2, r9
 800ac96:	4631      	mov	r1, r6
 800ac98:	4628      	mov	r0, r5
 800ac9a:	47b8      	blx	r7
 800ac9c:	3001      	adds	r0, #1
 800ac9e:	f43f ae3e 	beq.w	800a91e <_printf_float+0xb6>
 800aca2:	f108 0801 	add.w	r8, r8, #1
 800aca6:	68e3      	ldr	r3, [r4, #12]
 800aca8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800acaa:	1a5b      	subs	r3, r3, r1
 800acac:	4543      	cmp	r3, r8
 800acae:	dcf0      	bgt.n	800ac92 <_printf_float+0x42a>
 800acb0:	e6fc      	b.n	800aaac <_printf_float+0x244>
 800acb2:	f04f 0800 	mov.w	r8, #0
 800acb6:	f104 0919 	add.w	r9, r4, #25
 800acba:	e7f4      	b.n	800aca6 <_printf_float+0x43e>

0800acbc <_printf_common>:
 800acbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acc0:	4616      	mov	r6, r2
 800acc2:	4698      	mov	r8, r3
 800acc4:	688a      	ldr	r2, [r1, #8]
 800acc6:	690b      	ldr	r3, [r1, #16]
 800acc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800accc:	4293      	cmp	r3, r2
 800acce:	bfb8      	it	lt
 800acd0:	4613      	movlt	r3, r2
 800acd2:	6033      	str	r3, [r6, #0]
 800acd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800acd8:	4607      	mov	r7, r0
 800acda:	460c      	mov	r4, r1
 800acdc:	b10a      	cbz	r2, 800ace2 <_printf_common+0x26>
 800acde:	3301      	adds	r3, #1
 800ace0:	6033      	str	r3, [r6, #0]
 800ace2:	6823      	ldr	r3, [r4, #0]
 800ace4:	0699      	lsls	r1, r3, #26
 800ace6:	bf42      	ittt	mi
 800ace8:	6833      	ldrmi	r3, [r6, #0]
 800acea:	3302      	addmi	r3, #2
 800acec:	6033      	strmi	r3, [r6, #0]
 800acee:	6825      	ldr	r5, [r4, #0]
 800acf0:	f015 0506 	ands.w	r5, r5, #6
 800acf4:	d106      	bne.n	800ad04 <_printf_common+0x48>
 800acf6:	f104 0a19 	add.w	sl, r4, #25
 800acfa:	68e3      	ldr	r3, [r4, #12]
 800acfc:	6832      	ldr	r2, [r6, #0]
 800acfe:	1a9b      	subs	r3, r3, r2
 800ad00:	42ab      	cmp	r3, r5
 800ad02:	dc26      	bgt.n	800ad52 <_printf_common+0x96>
 800ad04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad08:	6822      	ldr	r2, [r4, #0]
 800ad0a:	3b00      	subs	r3, #0
 800ad0c:	bf18      	it	ne
 800ad0e:	2301      	movne	r3, #1
 800ad10:	0692      	lsls	r2, r2, #26
 800ad12:	d42b      	bmi.n	800ad6c <_printf_common+0xb0>
 800ad14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad18:	4641      	mov	r1, r8
 800ad1a:	4638      	mov	r0, r7
 800ad1c:	47c8      	blx	r9
 800ad1e:	3001      	adds	r0, #1
 800ad20:	d01e      	beq.n	800ad60 <_printf_common+0xa4>
 800ad22:	6823      	ldr	r3, [r4, #0]
 800ad24:	6922      	ldr	r2, [r4, #16]
 800ad26:	f003 0306 	and.w	r3, r3, #6
 800ad2a:	2b04      	cmp	r3, #4
 800ad2c:	bf02      	ittt	eq
 800ad2e:	68e5      	ldreq	r5, [r4, #12]
 800ad30:	6833      	ldreq	r3, [r6, #0]
 800ad32:	1aed      	subeq	r5, r5, r3
 800ad34:	68a3      	ldr	r3, [r4, #8]
 800ad36:	bf0c      	ite	eq
 800ad38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad3c:	2500      	movne	r5, #0
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	bfc4      	itt	gt
 800ad42:	1a9b      	subgt	r3, r3, r2
 800ad44:	18ed      	addgt	r5, r5, r3
 800ad46:	2600      	movs	r6, #0
 800ad48:	341a      	adds	r4, #26
 800ad4a:	42b5      	cmp	r5, r6
 800ad4c:	d11a      	bne.n	800ad84 <_printf_common+0xc8>
 800ad4e:	2000      	movs	r0, #0
 800ad50:	e008      	b.n	800ad64 <_printf_common+0xa8>
 800ad52:	2301      	movs	r3, #1
 800ad54:	4652      	mov	r2, sl
 800ad56:	4641      	mov	r1, r8
 800ad58:	4638      	mov	r0, r7
 800ad5a:	47c8      	blx	r9
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	d103      	bne.n	800ad68 <_printf_common+0xac>
 800ad60:	f04f 30ff 	mov.w	r0, #4294967295
 800ad64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad68:	3501      	adds	r5, #1
 800ad6a:	e7c6      	b.n	800acfa <_printf_common+0x3e>
 800ad6c:	18e1      	adds	r1, r4, r3
 800ad6e:	1c5a      	adds	r2, r3, #1
 800ad70:	2030      	movs	r0, #48	@ 0x30
 800ad72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad76:	4422      	add	r2, r4
 800ad78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ad7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ad80:	3302      	adds	r3, #2
 800ad82:	e7c7      	b.n	800ad14 <_printf_common+0x58>
 800ad84:	2301      	movs	r3, #1
 800ad86:	4622      	mov	r2, r4
 800ad88:	4641      	mov	r1, r8
 800ad8a:	4638      	mov	r0, r7
 800ad8c:	47c8      	blx	r9
 800ad8e:	3001      	adds	r0, #1
 800ad90:	d0e6      	beq.n	800ad60 <_printf_common+0xa4>
 800ad92:	3601      	adds	r6, #1
 800ad94:	e7d9      	b.n	800ad4a <_printf_common+0x8e>
	...

0800ad98 <_printf_i>:
 800ad98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad9c:	7e0f      	ldrb	r7, [r1, #24]
 800ad9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ada0:	2f78      	cmp	r7, #120	@ 0x78
 800ada2:	4691      	mov	r9, r2
 800ada4:	4680      	mov	r8, r0
 800ada6:	460c      	mov	r4, r1
 800ada8:	469a      	mov	sl, r3
 800adaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800adae:	d807      	bhi.n	800adc0 <_printf_i+0x28>
 800adb0:	2f62      	cmp	r7, #98	@ 0x62
 800adb2:	d80a      	bhi.n	800adca <_printf_i+0x32>
 800adb4:	2f00      	cmp	r7, #0
 800adb6:	f000 80d2 	beq.w	800af5e <_printf_i+0x1c6>
 800adba:	2f58      	cmp	r7, #88	@ 0x58
 800adbc:	f000 80b9 	beq.w	800af32 <_printf_i+0x19a>
 800adc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800adc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800adc8:	e03a      	b.n	800ae40 <_printf_i+0xa8>
 800adca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800adce:	2b15      	cmp	r3, #21
 800add0:	d8f6      	bhi.n	800adc0 <_printf_i+0x28>
 800add2:	a101      	add	r1, pc, #4	@ (adr r1, 800add8 <_printf_i+0x40>)
 800add4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800add8:	0800ae31 	.word	0x0800ae31
 800addc:	0800ae45 	.word	0x0800ae45
 800ade0:	0800adc1 	.word	0x0800adc1
 800ade4:	0800adc1 	.word	0x0800adc1
 800ade8:	0800adc1 	.word	0x0800adc1
 800adec:	0800adc1 	.word	0x0800adc1
 800adf0:	0800ae45 	.word	0x0800ae45
 800adf4:	0800adc1 	.word	0x0800adc1
 800adf8:	0800adc1 	.word	0x0800adc1
 800adfc:	0800adc1 	.word	0x0800adc1
 800ae00:	0800adc1 	.word	0x0800adc1
 800ae04:	0800af45 	.word	0x0800af45
 800ae08:	0800ae6f 	.word	0x0800ae6f
 800ae0c:	0800aeff 	.word	0x0800aeff
 800ae10:	0800adc1 	.word	0x0800adc1
 800ae14:	0800adc1 	.word	0x0800adc1
 800ae18:	0800af67 	.word	0x0800af67
 800ae1c:	0800adc1 	.word	0x0800adc1
 800ae20:	0800ae6f 	.word	0x0800ae6f
 800ae24:	0800adc1 	.word	0x0800adc1
 800ae28:	0800adc1 	.word	0x0800adc1
 800ae2c:	0800af07 	.word	0x0800af07
 800ae30:	6833      	ldr	r3, [r6, #0]
 800ae32:	1d1a      	adds	r2, r3, #4
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	6032      	str	r2, [r6, #0]
 800ae38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae40:	2301      	movs	r3, #1
 800ae42:	e09d      	b.n	800af80 <_printf_i+0x1e8>
 800ae44:	6833      	ldr	r3, [r6, #0]
 800ae46:	6820      	ldr	r0, [r4, #0]
 800ae48:	1d19      	adds	r1, r3, #4
 800ae4a:	6031      	str	r1, [r6, #0]
 800ae4c:	0606      	lsls	r6, r0, #24
 800ae4e:	d501      	bpl.n	800ae54 <_printf_i+0xbc>
 800ae50:	681d      	ldr	r5, [r3, #0]
 800ae52:	e003      	b.n	800ae5c <_printf_i+0xc4>
 800ae54:	0645      	lsls	r5, r0, #25
 800ae56:	d5fb      	bpl.n	800ae50 <_printf_i+0xb8>
 800ae58:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ae5c:	2d00      	cmp	r5, #0
 800ae5e:	da03      	bge.n	800ae68 <_printf_i+0xd0>
 800ae60:	232d      	movs	r3, #45	@ 0x2d
 800ae62:	426d      	negs	r5, r5
 800ae64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae68:	4859      	ldr	r0, [pc, #356]	@ (800afd0 <_printf_i+0x238>)
 800ae6a:	230a      	movs	r3, #10
 800ae6c:	e011      	b.n	800ae92 <_printf_i+0xfa>
 800ae6e:	6821      	ldr	r1, [r4, #0]
 800ae70:	6833      	ldr	r3, [r6, #0]
 800ae72:	0608      	lsls	r0, r1, #24
 800ae74:	f853 5b04 	ldr.w	r5, [r3], #4
 800ae78:	d402      	bmi.n	800ae80 <_printf_i+0xe8>
 800ae7a:	0649      	lsls	r1, r1, #25
 800ae7c:	bf48      	it	mi
 800ae7e:	b2ad      	uxthmi	r5, r5
 800ae80:	2f6f      	cmp	r7, #111	@ 0x6f
 800ae82:	4853      	ldr	r0, [pc, #332]	@ (800afd0 <_printf_i+0x238>)
 800ae84:	6033      	str	r3, [r6, #0]
 800ae86:	bf14      	ite	ne
 800ae88:	230a      	movne	r3, #10
 800ae8a:	2308      	moveq	r3, #8
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ae92:	6866      	ldr	r6, [r4, #4]
 800ae94:	60a6      	str	r6, [r4, #8]
 800ae96:	2e00      	cmp	r6, #0
 800ae98:	bfa2      	ittt	ge
 800ae9a:	6821      	ldrge	r1, [r4, #0]
 800ae9c:	f021 0104 	bicge.w	r1, r1, #4
 800aea0:	6021      	strge	r1, [r4, #0]
 800aea2:	b90d      	cbnz	r5, 800aea8 <_printf_i+0x110>
 800aea4:	2e00      	cmp	r6, #0
 800aea6:	d04b      	beq.n	800af40 <_printf_i+0x1a8>
 800aea8:	4616      	mov	r6, r2
 800aeaa:	fbb5 f1f3 	udiv	r1, r5, r3
 800aeae:	fb03 5711 	mls	r7, r3, r1, r5
 800aeb2:	5dc7      	ldrb	r7, [r0, r7]
 800aeb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aeb8:	462f      	mov	r7, r5
 800aeba:	42bb      	cmp	r3, r7
 800aebc:	460d      	mov	r5, r1
 800aebe:	d9f4      	bls.n	800aeaa <_printf_i+0x112>
 800aec0:	2b08      	cmp	r3, #8
 800aec2:	d10b      	bne.n	800aedc <_printf_i+0x144>
 800aec4:	6823      	ldr	r3, [r4, #0]
 800aec6:	07df      	lsls	r7, r3, #31
 800aec8:	d508      	bpl.n	800aedc <_printf_i+0x144>
 800aeca:	6923      	ldr	r3, [r4, #16]
 800aecc:	6861      	ldr	r1, [r4, #4]
 800aece:	4299      	cmp	r1, r3
 800aed0:	bfde      	ittt	le
 800aed2:	2330      	movle	r3, #48	@ 0x30
 800aed4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aed8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aedc:	1b92      	subs	r2, r2, r6
 800aede:	6122      	str	r2, [r4, #16]
 800aee0:	f8cd a000 	str.w	sl, [sp]
 800aee4:	464b      	mov	r3, r9
 800aee6:	aa03      	add	r2, sp, #12
 800aee8:	4621      	mov	r1, r4
 800aeea:	4640      	mov	r0, r8
 800aeec:	f7ff fee6 	bl	800acbc <_printf_common>
 800aef0:	3001      	adds	r0, #1
 800aef2:	d14a      	bne.n	800af8a <_printf_i+0x1f2>
 800aef4:	f04f 30ff 	mov.w	r0, #4294967295
 800aef8:	b004      	add	sp, #16
 800aefa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aefe:	6823      	ldr	r3, [r4, #0]
 800af00:	f043 0320 	orr.w	r3, r3, #32
 800af04:	6023      	str	r3, [r4, #0]
 800af06:	4833      	ldr	r0, [pc, #204]	@ (800afd4 <_printf_i+0x23c>)
 800af08:	2778      	movs	r7, #120	@ 0x78
 800af0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af0e:	6823      	ldr	r3, [r4, #0]
 800af10:	6831      	ldr	r1, [r6, #0]
 800af12:	061f      	lsls	r7, r3, #24
 800af14:	f851 5b04 	ldr.w	r5, [r1], #4
 800af18:	d402      	bmi.n	800af20 <_printf_i+0x188>
 800af1a:	065f      	lsls	r7, r3, #25
 800af1c:	bf48      	it	mi
 800af1e:	b2ad      	uxthmi	r5, r5
 800af20:	6031      	str	r1, [r6, #0]
 800af22:	07d9      	lsls	r1, r3, #31
 800af24:	bf44      	itt	mi
 800af26:	f043 0320 	orrmi.w	r3, r3, #32
 800af2a:	6023      	strmi	r3, [r4, #0]
 800af2c:	b11d      	cbz	r5, 800af36 <_printf_i+0x19e>
 800af2e:	2310      	movs	r3, #16
 800af30:	e7ac      	b.n	800ae8c <_printf_i+0xf4>
 800af32:	4827      	ldr	r0, [pc, #156]	@ (800afd0 <_printf_i+0x238>)
 800af34:	e7e9      	b.n	800af0a <_printf_i+0x172>
 800af36:	6823      	ldr	r3, [r4, #0]
 800af38:	f023 0320 	bic.w	r3, r3, #32
 800af3c:	6023      	str	r3, [r4, #0]
 800af3e:	e7f6      	b.n	800af2e <_printf_i+0x196>
 800af40:	4616      	mov	r6, r2
 800af42:	e7bd      	b.n	800aec0 <_printf_i+0x128>
 800af44:	6833      	ldr	r3, [r6, #0]
 800af46:	6825      	ldr	r5, [r4, #0]
 800af48:	6961      	ldr	r1, [r4, #20]
 800af4a:	1d18      	adds	r0, r3, #4
 800af4c:	6030      	str	r0, [r6, #0]
 800af4e:	062e      	lsls	r6, r5, #24
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	d501      	bpl.n	800af58 <_printf_i+0x1c0>
 800af54:	6019      	str	r1, [r3, #0]
 800af56:	e002      	b.n	800af5e <_printf_i+0x1c6>
 800af58:	0668      	lsls	r0, r5, #25
 800af5a:	d5fb      	bpl.n	800af54 <_printf_i+0x1bc>
 800af5c:	8019      	strh	r1, [r3, #0]
 800af5e:	2300      	movs	r3, #0
 800af60:	6123      	str	r3, [r4, #16]
 800af62:	4616      	mov	r6, r2
 800af64:	e7bc      	b.n	800aee0 <_printf_i+0x148>
 800af66:	6833      	ldr	r3, [r6, #0]
 800af68:	1d1a      	adds	r2, r3, #4
 800af6a:	6032      	str	r2, [r6, #0]
 800af6c:	681e      	ldr	r6, [r3, #0]
 800af6e:	6862      	ldr	r2, [r4, #4]
 800af70:	2100      	movs	r1, #0
 800af72:	4630      	mov	r0, r6
 800af74:	f7f5 f954 	bl	8000220 <memchr>
 800af78:	b108      	cbz	r0, 800af7e <_printf_i+0x1e6>
 800af7a:	1b80      	subs	r0, r0, r6
 800af7c:	6060      	str	r0, [r4, #4]
 800af7e:	6863      	ldr	r3, [r4, #4]
 800af80:	6123      	str	r3, [r4, #16]
 800af82:	2300      	movs	r3, #0
 800af84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af88:	e7aa      	b.n	800aee0 <_printf_i+0x148>
 800af8a:	6923      	ldr	r3, [r4, #16]
 800af8c:	4632      	mov	r2, r6
 800af8e:	4649      	mov	r1, r9
 800af90:	4640      	mov	r0, r8
 800af92:	47d0      	blx	sl
 800af94:	3001      	adds	r0, #1
 800af96:	d0ad      	beq.n	800aef4 <_printf_i+0x15c>
 800af98:	6823      	ldr	r3, [r4, #0]
 800af9a:	079b      	lsls	r3, r3, #30
 800af9c:	d413      	bmi.n	800afc6 <_printf_i+0x22e>
 800af9e:	68e0      	ldr	r0, [r4, #12]
 800afa0:	9b03      	ldr	r3, [sp, #12]
 800afa2:	4298      	cmp	r0, r3
 800afa4:	bfb8      	it	lt
 800afa6:	4618      	movlt	r0, r3
 800afa8:	e7a6      	b.n	800aef8 <_printf_i+0x160>
 800afaa:	2301      	movs	r3, #1
 800afac:	4632      	mov	r2, r6
 800afae:	4649      	mov	r1, r9
 800afb0:	4640      	mov	r0, r8
 800afb2:	47d0      	blx	sl
 800afb4:	3001      	adds	r0, #1
 800afb6:	d09d      	beq.n	800aef4 <_printf_i+0x15c>
 800afb8:	3501      	adds	r5, #1
 800afba:	68e3      	ldr	r3, [r4, #12]
 800afbc:	9903      	ldr	r1, [sp, #12]
 800afbe:	1a5b      	subs	r3, r3, r1
 800afc0:	42ab      	cmp	r3, r5
 800afc2:	dcf2      	bgt.n	800afaa <_printf_i+0x212>
 800afc4:	e7eb      	b.n	800af9e <_printf_i+0x206>
 800afc6:	2500      	movs	r5, #0
 800afc8:	f104 0619 	add.w	r6, r4, #25
 800afcc:	e7f5      	b.n	800afba <_printf_i+0x222>
 800afce:	bf00      	nop
 800afd0:	0800f6ae 	.word	0x0800f6ae
 800afd4:	0800f6bf 	.word	0x0800f6bf

0800afd8 <_scanf_float>:
 800afd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afdc:	b087      	sub	sp, #28
 800afde:	4617      	mov	r7, r2
 800afe0:	9303      	str	r3, [sp, #12]
 800afe2:	688b      	ldr	r3, [r1, #8]
 800afe4:	1e5a      	subs	r2, r3, #1
 800afe6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800afea:	bf81      	itttt	hi
 800afec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800aff0:	eb03 0b05 	addhi.w	fp, r3, r5
 800aff4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800aff8:	608b      	strhi	r3, [r1, #8]
 800affa:	680b      	ldr	r3, [r1, #0]
 800affc:	460a      	mov	r2, r1
 800affe:	f04f 0500 	mov.w	r5, #0
 800b002:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b006:	f842 3b1c 	str.w	r3, [r2], #28
 800b00a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b00e:	4680      	mov	r8, r0
 800b010:	460c      	mov	r4, r1
 800b012:	bf98      	it	ls
 800b014:	f04f 0b00 	movls.w	fp, #0
 800b018:	9201      	str	r2, [sp, #4]
 800b01a:	4616      	mov	r6, r2
 800b01c:	46aa      	mov	sl, r5
 800b01e:	46a9      	mov	r9, r5
 800b020:	9502      	str	r5, [sp, #8]
 800b022:	68a2      	ldr	r2, [r4, #8]
 800b024:	b152      	cbz	r2, 800b03c <_scanf_float+0x64>
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	2b4e      	cmp	r3, #78	@ 0x4e
 800b02c:	d864      	bhi.n	800b0f8 <_scanf_float+0x120>
 800b02e:	2b40      	cmp	r3, #64	@ 0x40
 800b030:	d83c      	bhi.n	800b0ac <_scanf_float+0xd4>
 800b032:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b036:	b2c8      	uxtb	r0, r1
 800b038:	280e      	cmp	r0, #14
 800b03a:	d93a      	bls.n	800b0b2 <_scanf_float+0xda>
 800b03c:	f1b9 0f00 	cmp.w	r9, #0
 800b040:	d003      	beq.n	800b04a <_scanf_float+0x72>
 800b042:	6823      	ldr	r3, [r4, #0]
 800b044:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b048:	6023      	str	r3, [r4, #0]
 800b04a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b04e:	f1ba 0f01 	cmp.w	sl, #1
 800b052:	f200 8117 	bhi.w	800b284 <_scanf_float+0x2ac>
 800b056:	9b01      	ldr	r3, [sp, #4]
 800b058:	429e      	cmp	r6, r3
 800b05a:	f200 8108 	bhi.w	800b26e <_scanf_float+0x296>
 800b05e:	2001      	movs	r0, #1
 800b060:	b007      	add	sp, #28
 800b062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b066:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b06a:	2a0d      	cmp	r2, #13
 800b06c:	d8e6      	bhi.n	800b03c <_scanf_float+0x64>
 800b06e:	a101      	add	r1, pc, #4	@ (adr r1, 800b074 <_scanf_float+0x9c>)
 800b070:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b074:	0800b1bb 	.word	0x0800b1bb
 800b078:	0800b03d 	.word	0x0800b03d
 800b07c:	0800b03d 	.word	0x0800b03d
 800b080:	0800b03d 	.word	0x0800b03d
 800b084:	0800b21b 	.word	0x0800b21b
 800b088:	0800b1f3 	.word	0x0800b1f3
 800b08c:	0800b03d 	.word	0x0800b03d
 800b090:	0800b03d 	.word	0x0800b03d
 800b094:	0800b1c9 	.word	0x0800b1c9
 800b098:	0800b03d 	.word	0x0800b03d
 800b09c:	0800b03d 	.word	0x0800b03d
 800b0a0:	0800b03d 	.word	0x0800b03d
 800b0a4:	0800b03d 	.word	0x0800b03d
 800b0a8:	0800b181 	.word	0x0800b181
 800b0ac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b0b0:	e7db      	b.n	800b06a <_scanf_float+0x92>
 800b0b2:	290e      	cmp	r1, #14
 800b0b4:	d8c2      	bhi.n	800b03c <_scanf_float+0x64>
 800b0b6:	a001      	add	r0, pc, #4	@ (adr r0, 800b0bc <_scanf_float+0xe4>)
 800b0b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b0bc:	0800b171 	.word	0x0800b171
 800b0c0:	0800b03d 	.word	0x0800b03d
 800b0c4:	0800b171 	.word	0x0800b171
 800b0c8:	0800b207 	.word	0x0800b207
 800b0cc:	0800b03d 	.word	0x0800b03d
 800b0d0:	0800b119 	.word	0x0800b119
 800b0d4:	0800b157 	.word	0x0800b157
 800b0d8:	0800b157 	.word	0x0800b157
 800b0dc:	0800b157 	.word	0x0800b157
 800b0e0:	0800b157 	.word	0x0800b157
 800b0e4:	0800b157 	.word	0x0800b157
 800b0e8:	0800b157 	.word	0x0800b157
 800b0ec:	0800b157 	.word	0x0800b157
 800b0f0:	0800b157 	.word	0x0800b157
 800b0f4:	0800b157 	.word	0x0800b157
 800b0f8:	2b6e      	cmp	r3, #110	@ 0x6e
 800b0fa:	d809      	bhi.n	800b110 <_scanf_float+0x138>
 800b0fc:	2b60      	cmp	r3, #96	@ 0x60
 800b0fe:	d8b2      	bhi.n	800b066 <_scanf_float+0x8e>
 800b100:	2b54      	cmp	r3, #84	@ 0x54
 800b102:	d07b      	beq.n	800b1fc <_scanf_float+0x224>
 800b104:	2b59      	cmp	r3, #89	@ 0x59
 800b106:	d199      	bne.n	800b03c <_scanf_float+0x64>
 800b108:	2d07      	cmp	r5, #7
 800b10a:	d197      	bne.n	800b03c <_scanf_float+0x64>
 800b10c:	2508      	movs	r5, #8
 800b10e:	e02c      	b.n	800b16a <_scanf_float+0x192>
 800b110:	2b74      	cmp	r3, #116	@ 0x74
 800b112:	d073      	beq.n	800b1fc <_scanf_float+0x224>
 800b114:	2b79      	cmp	r3, #121	@ 0x79
 800b116:	e7f6      	b.n	800b106 <_scanf_float+0x12e>
 800b118:	6821      	ldr	r1, [r4, #0]
 800b11a:	05c8      	lsls	r0, r1, #23
 800b11c:	d51b      	bpl.n	800b156 <_scanf_float+0x17e>
 800b11e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b122:	6021      	str	r1, [r4, #0]
 800b124:	f109 0901 	add.w	r9, r9, #1
 800b128:	f1bb 0f00 	cmp.w	fp, #0
 800b12c:	d003      	beq.n	800b136 <_scanf_float+0x15e>
 800b12e:	3201      	adds	r2, #1
 800b130:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b134:	60a2      	str	r2, [r4, #8]
 800b136:	68a3      	ldr	r3, [r4, #8]
 800b138:	3b01      	subs	r3, #1
 800b13a:	60a3      	str	r3, [r4, #8]
 800b13c:	6923      	ldr	r3, [r4, #16]
 800b13e:	3301      	adds	r3, #1
 800b140:	6123      	str	r3, [r4, #16]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	3b01      	subs	r3, #1
 800b146:	2b00      	cmp	r3, #0
 800b148:	607b      	str	r3, [r7, #4]
 800b14a:	f340 8087 	ble.w	800b25c <_scanf_float+0x284>
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	3301      	adds	r3, #1
 800b152:	603b      	str	r3, [r7, #0]
 800b154:	e765      	b.n	800b022 <_scanf_float+0x4a>
 800b156:	eb1a 0105 	adds.w	r1, sl, r5
 800b15a:	f47f af6f 	bne.w	800b03c <_scanf_float+0x64>
 800b15e:	6822      	ldr	r2, [r4, #0]
 800b160:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b164:	6022      	str	r2, [r4, #0]
 800b166:	460d      	mov	r5, r1
 800b168:	468a      	mov	sl, r1
 800b16a:	f806 3b01 	strb.w	r3, [r6], #1
 800b16e:	e7e2      	b.n	800b136 <_scanf_float+0x15e>
 800b170:	6822      	ldr	r2, [r4, #0]
 800b172:	0610      	lsls	r0, r2, #24
 800b174:	f57f af62 	bpl.w	800b03c <_scanf_float+0x64>
 800b178:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b17c:	6022      	str	r2, [r4, #0]
 800b17e:	e7f4      	b.n	800b16a <_scanf_float+0x192>
 800b180:	f1ba 0f00 	cmp.w	sl, #0
 800b184:	d10e      	bne.n	800b1a4 <_scanf_float+0x1cc>
 800b186:	f1b9 0f00 	cmp.w	r9, #0
 800b18a:	d10e      	bne.n	800b1aa <_scanf_float+0x1d2>
 800b18c:	6822      	ldr	r2, [r4, #0]
 800b18e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b192:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b196:	d108      	bne.n	800b1aa <_scanf_float+0x1d2>
 800b198:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b19c:	6022      	str	r2, [r4, #0]
 800b19e:	f04f 0a01 	mov.w	sl, #1
 800b1a2:	e7e2      	b.n	800b16a <_scanf_float+0x192>
 800b1a4:	f1ba 0f02 	cmp.w	sl, #2
 800b1a8:	d055      	beq.n	800b256 <_scanf_float+0x27e>
 800b1aa:	2d01      	cmp	r5, #1
 800b1ac:	d002      	beq.n	800b1b4 <_scanf_float+0x1dc>
 800b1ae:	2d04      	cmp	r5, #4
 800b1b0:	f47f af44 	bne.w	800b03c <_scanf_float+0x64>
 800b1b4:	3501      	adds	r5, #1
 800b1b6:	b2ed      	uxtb	r5, r5
 800b1b8:	e7d7      	b.n	800b16a <_scanf_float+0x192>
 800b1ba:	f1ba 0f01 	cmp.w	sl, #1
 800b1be:	f47f af3d 	bne.w	800b03c <_scanf_float+0x64>
 800b1c2:	f04f 0a02 	mov.w	sl, #2
 800b1c6:	e7d0      	b.n	800b16a <_scanf_float+0x192>
 800b1c8:	b97d      	cbnz	r5, 800b1ea <_scanf_float+0x212>
 800b1ca:	f1b9 0f00 	cmp.w	r9, #0
 800b1ce:	f47f af38 	bne.w	800b042 <_scanf_float+0x6a>
 800b1d2:	6822      	ldr	r2, [r4, #0]
 800b1d4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b1d8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b1dc:	f040 8108 	bne.w	800b3f0 <_scanf_float+0x418>
 800b1e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b1e4:	6022      	str	r2, [r4, #0]
 800b1e6:	2501      	movs	r5, #1
 800b1e8:	e7bf      	b.n	800b16a <_scanf_float+0x192>
 800b1ea:	2d03      	cmp	r5, #3
 800b1ec:	d0e2      	beq.n	800b1b4 <_scanf_float+0x1dc>
 800b1ee:	2d05      	cmp	r5, #5
 800b1f0:	e7de      	b.n	800b1b0 <_scanf_float+0x1d8>
 800b1f2:	2d02      	cmp	r5, #2
 800b1f4:	f47f af22 	bne.w	800b03c <_scanf_float+0x64>
 800b1f8:	2503      	movs	r5, #3
 800b1fa:	e7b6      	b.n	800b16a <_scanf_float+0x192>
 800b1fc:	2d06      	cmp	r5, #6
 800b1fe:	f47f af1d 	bne.w	800b03c <_scanf_float+0x64>
 800b202:	2507      	movs	r5, #7
 800b204:	e7b1      	b.n	800b16a <_scanf_float+0x192>
 800b206:	6822      	ldr	r2, [r4, #0]
 800b208:	0591      	lsls	r1, r2, #22
 800b20a:	f57f af17 	bpl.w	800b03c <_scanf_float+0x64>
 800b20e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b212:	6022      	str	r2, [r4, #0]
 800b214:	f8cd 9008 	str.w	r9, [sp, #8]
 800b218:	e7a7      	b.n	800b16a <_scanf_float+0x192>
 800b21a:	6822      	ldr	r2, [r4, #0]
 800b21c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b220:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b224:	d006      	beq.n	800b234 <_scanf_float+0x25c>
 800b226:	0550      	lsls	r0, r2, #21
 800b228:	f57f af08 	bpl.w	800b03c <_scanf_float+0x64>
 800b22c:	f1b9 0f00 	cmp.w	r9, #0
 800b230:	f000 80de 	beq.w	800b3f0 <_scanf_float+0x418>
 800b234:	0591      	lsls	r1, r2, #22
 800b236:	bf58      	it	pl
 800b238:	9902      	ldrpl	r1, [sp, #8]
 800b23a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b23e:	bf58      	it	pl
 800b240:	eba9 0101 	subpl.w	r1, r9, r1
 800b244:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b248:	bf58      	it	pl
 800b24a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b24e:	6022      	str	r2, [r4, #0]
 800b250:	f04f 0900 	mov.w	r9, #0
 800b254:	e789      	b.n	800b16a <_scanf_float+0x192>
 800b256:	f04f 0a03 	mov.w	sl, #3
 800b25a:	e786      	b.n	800b16a <_scanf_float+0x192>
 800b25c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b260:	4639      	mov	r1, r7
 800b262:	4640      	mov	r0, r8
 800b264:	4798      	blx	r3
 800b266:	2800      	cmp	r0, #0
 800b268:	f43f aedb 	beq.w	800b022 <_scanf_float+0x4a>
 800b26c:	e6e6      	b.n	800b03c <_scanf_float+0x64>
 800b26e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b272:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b276:	463a      	mov	r2, r7
 800b278:	4640      	mov	r0, r8
 800b27a:	4798      	blx	r3
 800b27c:	6923      	ldr	r3, [r4, #16]
 800b27e:	3b01      	subs	r3, #1
 800b280:	6123      	str	r3, [r4, #16]
 800b282:	e6e8      	b.n	800b056 <_scanf_float+0x7e>
 800b284:	1e6b      	subs	r3, r5, #1
 800b286:	2b06      	cmp	r3, #6
 800b288:	d824      	bhi.n	800b2d4 <_scanf_float+0x2fc>
 800b28a:	2d02      	cmp	r5, #2
 800b28c:	d836      	bhi.n	800b2fc <_scanf_float+0x324>
 800b28e:	9b01      	ldr	r3, [sp, #4]
 800b290:	429e      	cmp	r6, r3
 800b292:	f67f aee4 	bls.w	800b05e <_scanf_float+0x86>
 800b296:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b29a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b29e:	463a      	mov	r2, r7
 800b2a0:	4640      	mov	r0, r8
 800b2a2:	4798      	blx	r3
 800b2a4:	6923      	ldr	r3, [r4, #16]
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	6123      	str	r3, [r4, #16]
 800b2aa:	e7f0      	b.n	800b28e <_scanf_float+0x2b6>
 800b2ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b2b0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b2b4:	463a      	mov	r2, r7
 800b2b6:	4640      	mov	r0, r8
 800b2b8:	4798      	blx	r3
 800b2ba:	6923      	ldr	r3, [r4, #16]
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	6123      	str	r3, [r4, #16]
 800b2c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2c4:	fa5f fa8a 	uxtb.w	sl, sl
 800b2c8:	f1ba 0f02 	cmp.w	sl, #2
 800b2cc:	d1ee      	bne.n	800b2ac <_scanf_float+0x2d4>
 800b2ce:	3d03      	subs	r5, #3
 800b2d0:	b2ed      	uxtb	r5, r5
 800b2d2:	1b76      	subs	r6, r6, r5
 800b2d4:	6823      	ldr	r3, [r4, #0]
 800b2d6:	05da      	lsls	r2, r3, #23
 800b2d8:	d530      	bpl.n	800b33c <_scanf_float+0x364>
 800b2da:	055b      	lsls	r3, r3, #21
 800b2dc:	d511      	bpl.n	800b302 <_scanf_float+0x32a>
 800b2de:	9b01      	ldr	r3, [sp, #4]
 800b2e0:	429e      	cmp	r6, r3
 800b2e2:	f67f aebc 	bls.w	800b05e <_scanf_float+0x86>
 800b2e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b2ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b2ee:	463a      	mov	r2, r7
 800b2f0:	4640      	mov	r0, r8
 800b2f2:	4798      	blx	r3
 800b2f4:	6923      	ldr	r3, [r4, #16]
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	6123      	str	r3, [r4, #16]
 800b2fa:	e7f0      	b.n	800b2de <_scanf_float+0x306>
 800b2fc:	46aa      	mov	sl, r5
 800b2fe:	46b3      	mov	fp, r6
 800b300:	e7de      	b.n	800b2c0 <_scanf_float+0x2e8>
 800b302:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b306:	6923      	ldr	r3, [r4, #16]
 800b308:	2965      	cmp	r1, #101	@ 0x65
 800b30a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b30e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b312:	6123      	str	r3, [r4, #16]
 800b314:	d00c      	beq.n	800b330 <_scanf_float+0x358>
 800b316:	2945      	cmp	r1, #69	@ 0x45
 800b318:	d00a      	beq.n	800b330 <_scanf_float+0x358>
 800b31a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b31e:	463a      	mov	r2, r7
 800b320:	4640      	mov	r0, r8
 800b322:	4798      	blx	r3
 800b324:	6923      	ldr	r3, [r4, #16]
 800b326:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b32a:	3b01      	subs	r3, #1
 800b32c:	1eb5      	subs	r5, r6, #2
 800b32e:	6123      	str	r3, [r4, #16]
 800b330:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b334:	463a      	mov	r2, r7
 800b336:	4640      	mov	r0, r8
 800b338:	4798      	blx	r3
 800b33a:	462e      	mov	r6, r5
 800b33c:	6822      	ldr	r2, [r4, #0]
 800b33e:	f012 0210 	ands.w	r2, r2, #16
 800b342:	d001      	beq.n	800b348 <_scanf_float+0x370>
 800b344:	2000      	movs	r0, #0
 800b346:	e68b      	b.n	800b060 <_scanf_float+0x88>
 800b348:	7032      	strb	r2, [r6, #0]
 800b34a:	6823      	ldr	r3, [r4, #0]
 800b34c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b354:	d11c      	bne.n	800b390 <_scanf_float+0x3b8>
 800b356:	9b02      	ldr	r3, [sp, #8]
 800b358:	454b      	cmp	r3, r9
 800b35a:	eba3 0209 	sub.w	r2, r3, r9
 800b35e:	d123      	bne.n	800b3a8 <_scanf_float+0x3d0>
 800b360:	9901      	ldr	r1, [sp, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	4640      	mov	r0, r8
 800b366:	f002 fd5f 	bl	800de28 <_strtod_r>
 800b36a:	9b03      	ldr	r3, [sp, #12]
 800b36c:	6821      	ldr	r1, [r4, #0]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f011 0f02 	tst.w	r1, #2
 800b374:	ec57 6b10 	vmov	r6, r7, d0
 800b378:	f103 0204 	add.w	r2, r3, #4
 800b37c:	d01f      	beq.n	800b3be <_scanf_float+0x3e6>
 800b37e:	9903      	ldr	r1, [sp, #12]
 800b380:	600a      	str	r2, [r1, #0]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	e9c3 6700 	strd	r6, r7, [r3]
 800b388:	68e3      	ldr	r3, [r4, #12]
 800b38a:	3301      	adds	r3, #1
 800b38c:	60e3      	str	r3, [r4, #12]
 800b38e:	e7d9      	b.n	800b344 <_scanf_float+0x36c>
 800b390:	9b04      	ldr	r3, [sp, #16]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d0e4      	beq.n	800b360 <_scanf_float+0x388>
 800b396:	9905      	ldr	r1, [sp, #20]
 800b398:	230a      	movs	r3, #10
 800b39a:	3101      	adds	r1, #1
 800b39c:	4640      	mov	r0, r8
 800b39e:	f002 fdc3 	bl	800df28 <_strtol_r>
 800b3a2:	9b04      	ldr	r3, [sp, #16]
 800b3a4:	9e05      	ldr	r6, [sp, #20]
 800b3a6:	1ac2      	subs	r2, r0, r3
 800b3a8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b3ac:	429e      	cmp	r6, r3
 800b3ae:	bf28      	it	cs
 800b3b0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b3b4:	4910      	ldr	r1, [pc, #64]	@ (800b3f8 <_scanf_float+0x420>)
 800b3b6:	4630      	mov	r0, r6
 800b3b8:	f000 f954 	bl	800b664 <siprintf>
 800b3bc:	e7d0      	b.n	800b360 <_scanf_float+0x388>
 800b3be:	f011 0f04 	tst.w	r1, #4
 800b3c2:	9903      	ldr	r1, [sp, #12]
 800b3c4:	600a      	str	r2, [r1, #0]
 800b3c6:	d1dc      	bne.n	800b382 <_scanf_float+0x3aa>
 800b3c8:	681d      	ldr	r5, [r3, #0]
 800b3ca:	4632      	mov	r2, r6
 800b3cc:	463b      	mov	r3, r7
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	4639      	mov	r1, r7
 800b3d2:	f7f5 fbd3 	bl	8000b7c <__aeabi_dcmpun>
 800b3d6:	b128      	cbz	r0, 800b3e4 <_scanf_float+0x40c>
 800b3d8:	4808      	ldr	r0, [pc, #32]	@ (800b3fc <_scanf_float+0x424>)
 800b3da:	f000 fb1f 	bl	800ba1c <nanf>
 800b3de:	ed85 0a00 	vstr	s0, [r5]
 800b3e2:	e7d1      	b.n	800b388 <_scanf_float+0x3b0>
 800b3e4:	4630      	mov	r0, r6
 800b3e6:	4639      	mov	r1, r7
 800b3e8:	f7f5 fc26 	bl	8000c38 <__aeabi_d2f>
 800b3ec:	6028      	str	r0, [r5, #0]
 800b3ee:	e7cb      	b.n	800b388 <_scanf_float+0x3b0>
 800b3f0:	f04f 0900 	mov.w	r9, #0
 800b3f4:	e629      	b.n	800b04a <_scanf_float+0x72>
 800b3f6:	bf00      	nop
 800b3f8:	0800f6d0 	.word	0x0800f6d0
 800b3fc:	0800fa65 	.word	0x0800fa65

0800b400 <std>:
 800b400:	2300      	movs	r3, #0
 800b402:	b510      	push	{r4, lr}
 800b404:	4604      	mov	r4, r0
 800b406:	e9c0 3300 	strd	r3, r3, [r0]
 800b40a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b40e:	6083      	str	r3, [r0, #8]
 800b410:	8181      	strh	r1, [r0, #12]
 800b412:	6643      	str	r3, [r0, #100]	@ 0x64
 800b414:	81c2      	strh	r2, [r0, #14]
 800b416:	6183      	str	r3, [r0, #24]
 800b418:	4619      	mov	r1, r3
 800b41a:	2208      	movs	r2, #8
 800b41c:	305c      	adds	r0, #92	@ 0x5c
 800b41e:	f000 fa19 	bl	800b854 <memset>
 800b422:	4b0d      	ldr	r3, [pc, #52]	@ (800b458 <std+0x58>)
 800b424:	6263      	str	r3, [r4, #36]	@ 0x24
 800b426:	4b0d      	ldr	r3, [pc, #52]	@ (800b45c <std+0x5c>)
 800b428:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b42a:	4b0d      	ldr	r3, [pc, #52]	@ (800b460 <std+0x60>)
 800b42c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b42e:	4b0d      	ldr	r3, [pc, #52]	@ (800b464 <std+0x64>)
 800b430:	6323      	str	r3, [r4, #48]	@ 0x30
 800b432:	4b0d      	ldr	r3, [pc, #52]	@ (800b468 <std+0x68>)
 800b434:	6224      	str	r4, [r4, #32]
 800b436:	429c      	cmp	r4, r3
 800b438:	d006      	beq.n	800b448 <std+0x48>
 800b43a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b43e:	4294      	cmp	r4, r2
 800b440:	d002      	beq.n	800b448 <std+0x48>
 800b442:	33d0      	adds	r3, #208	@ 0xd0
 800b444:	429c      	cmp	r4, r3
 800b446:	d105      	bne.n	800b454 <std+0x54>
 800b448:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b450:	f000 bad2 	b.w	800b9f8 <__retarget_lock_init_recursive>
 800b454:	bd10      	pop	{r4, pc}
 800b456:	bf00      	nop
 800b458:	0800b6a5 	.word	0x0800b6a5
 800b45c:	0800b6c7 	.word	0x0800b6c7
 800b460:	0800b6ff 	.word	0x0800b6ff
 800b464:	0800b723 	.word	0x0800b723
 800b468:	20003b34 	.word	0x20003b34

0800b46c <stdio_exit_handler>:
 800b46c:	4a02      	ldr	r2, [pc, #8]	@ (800b478 <stdio_exit_handler+0xc>)
 800b46e:	4903      	ldr	r1, [pc, #12]	@ (800b47c <stdio_exit_handler+0x10>)
 800b470:	4803      	ldr	r0, [pc, #12]	@ (800b480 <stdio_exit_handler+0x14>)
 800b472:	f000 b869 	b.w	800b548 <_fwalk_sglue>
 800b476:	bf00      	nop
 800b478:	20000010 	.word	0x20000010
 800b47c:	0800e569 	.word	0x0800e569
 800b480:	20000020 	.word	0x20000020

0800b484 <cleanup_stdio>:
 800b484:	6841      	ldr	r1, [r0, #4]
 800b486:	4b0c      	ldr	r3, [pc, #48]	@ (800b4b8 <cleanup_stdio+0x34>)
 800b488:	4299      	cmp	r1, r3
 800b48a:	b510      	push	{r4, lr}
 800b48c:	4604      	mov	r4, r0
 800b48e:	d001      	beq.n	800b494 <cleanup_stdio+0x10>
 800b490:	f003 f86a 	bl	800e568 <_fflush_r>
 800b494:	68a1      	ldr	r1, [r4, #8]
 800b496:	4b09      	ldr	r3, [pc, #36]	@ (800b4bc <cleanup_stdio+0x38>)
 800b498:	4299      	cmp	r1, r3
 800b49a:	d002      	beq.n	800b4a2 <cleanup_stdio+0x1e>
 800b49c:	4620      	mov	r0, r4
 800b49e:	f003 f863 	bl	800e568 <_fflush_r>
 800b4a2:	68e1      	ldr	r1, [r4, #12]
 800b4a4:	4b06      	ldr	r3, [pc, #24]	@ (800b4c0 <cleanup_stdio+0x3c>)
 800b4a6:	4299      	cmp	r1, r3
 800b4a8:	d004      	beq.n	800b4b4 <cleanup_stdio+0x30>
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4b0:	f003 b85a 	b.w	800e568 <_fflush_r>
 800b4b4:	bd10      	pop	{r4, pc}
 800b4b6:	bf00      	nop
 800b4b8:	20003b34 	.word	0x20003b34
 800b4bc:	20003b9c 	.word	0x20003b9c
 800b4c0:	20003c04 	.word	0x20003c04

0800b4c4 <global_stdio_init.part.0>:
 800b4c4:	b510      	push	{r4, lr}
 800b4c6:	4b0b      	ldr	r3, [pc, #44]	@ (800b4f4 <global_stdio_init.part.0+0x30>)
 800b4c8:	4c0b      	ldr	r4, [pc, #44]	@ (800b4f8 <global_stdio_init.part.0+0x34>)
 800b4ca:	4a0c      	ldr	r2, [pc, #48]	@ (800b4fc <global_stdio_init.part.0+0x38>)
 800b4cc:	601a      	str	r2, [r3, #0]
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	2104      	movs	r1, #4
 800b4d4:	f7ff ff94 	bl	800b400 <std>
 800b4d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b4dc:	2201      	movs	r2, #1
 800b4de:	2109      	movs	r1, #9
 800b4e0:	f7ff ff8e 	bl	800b400 <std>
 800b4e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b4e8:	2202      	movs	r2, #2
 800b4ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4ee:	2112      	movs	r1, #18
 800b4f0:	f7ff bf86 	b.w	800b400 <std>
 800b4f4:	20003c6c 	.word	0x20003c6c
 800b4f8:	20003b34 	.word	0x20003b34
 800b4fc:	0800b46d 	.word	0x0800b46d

0800b500 <__sfp_lock_acquire>:
 800b500:	4801      	ldr	r0, [pc, #4]	@ (800b508 <__sfp_lock_acquire+0x8>)
 800b502:	f000 ba7a 	b.w	800b9fa <__retarget_lock_acquire_recursive>
 800b506:	bf00      	nop
 800b508:	20003c75 	.word	0x20003c75

0800b50c <__sfp_lock_release>:
 800b50c:	4801      	ldr	r0, [pc, #4]	@ (800b514 <__sfp_lock_release+0x8>)
 800b50e:	f000 ba75 	b.w	800b9fc <__retarget_lock_release_recursive>
 800b512:	bf00      	nop
 800b514:	20003c75 	.word	0x20003c75

0800b518 <__sinit>:
 800b518:	b510      	push	{r4, lr}
 800b51a:	4604      	mov	r4, r0
 800b51c:	f7ff fff0 	bl	800b500 <__sfp_lock_acquire>
 800b520:	6a23      	ldr	r3, [r4, #32]
 800b522:	b11b      	cbz	r3, 800b52c <__sinit+0x14>
 800b524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b528:	f7ff bff0 	b.w	800b50c <__sfp_lock_release>
 800b52c:	4b04      	ldr	r3, [pc, #16]	@ (800b540 <__sinit+0x28>)
 800b52e:	6223      	str	r3, [r4, #32]
 800b530:	4b04      	ldr	r3, [pc, #16]	@ (800b544 <__sinit+0x2c>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d1f5      	bne.n	800b524 <__sinit+0xc>
 800b538:	f7ff ffc4 	bl	800b4c4 <global_stdio_init.part.0>
 800b53c:	e7f2      	b.n	800b524 <__sinit+0xc>
 800b53e:	bf00      	nop
 800b540:	0800b485 	.word	0x0800b485
 800b544:	20003c6c 	.word	0x20003c6c

0800b548 <_fwalk_sglue>:
 800b548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b54c:	4607      	mov	r7, r0
 800b54e:	4688      	mov	r8, r1
 800b550:	4614      	mov	r4, r2
 800b552:	2600      	movs	r6, #0
 800b554:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b558:	f1b9 0901 	subs.w	r9, r9, #1
 800b55c:	d505      	bpl.n	800b56a <_fwalk_sglue+0x22>
 800b55e:	6824      	ldr	r4, [r4, #0]
 800b560:	2c00      	cmp	r4, #0
 800b562:	d1f7      	bne.n	800b554 <_fwalk_sglue+0xc>
 800b564:	4630      	mov	r0, r6
 800b566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b56a:	89ab      	ldrh	r3, [r5, #12]
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d907      	bls.n	800b580 <_fwalk_sglue+0x38>
 800b570:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b574:	3301      	adds	r3, #1
 800b576:	d003      	beq.n	800b580 <_fwalk_sglue+0x38>
 800b578:	4629      	mov	r1, r5
 800b57a:	4638      	mov	r0, r7
 800b57c:	47c0      	blx	r8
 800b57e:	4306      	orrs	r6, r0
 800b580:	3568      	adds	r5, #104	@ 0x68
 800b582:	e7e9      	b.n	800b558 <_fwalk_sglue+0x10>

0800b584 <iprintf>:
 800b584:	b40f      	push	{r0, r1, r2, r3}
 800b586:	b507      	push	{r0, r1, r2, lr}
 800b588:	4906      	ldr	r1, [pc, #24]	@ (800b5a4 <iprintf+0x20>)
 800b58a:	ab04      	add	r3, sp, #16
 800b58c:	6808      	ldr	r0, [r1, #0]
 800b58e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b592:	6881      	ldr	r1, [r0, #8]
 800b594:	9301      	str	r3, [sp, #4]
 800b596:	f002 fe4b 	bl	800e230 <_vfiprintf_r>
 800b59a:	b003      	add	sp, #12
 800b59c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5a0:	b004      	add	sp, #16
 800b5a2:	4770      	bx	lr
 800b5a4:	2000001c 	.word	0x2000001c

0800b5a8 <_puts_r>:
 800b5a8:	6a03      	ldr	r3, [r0, #32]
 800b5aa:	b570      	push	{r4, r5, r6, lr}
 800b5ac:	6884      	ldr	r4, [r0, #8]
 800b5ae:	4605      	mov	r5, r0
 800b5b0:	460e      	mov	r6, r1
 800b5b2:	b90b      	cbnz	r3, 800b5b8 <_puts_r+0x10>
 800b5b4:	f7ff ffb0 	bl	800b518 <__sinit>
 800b5b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b5ba:	07db      	lsls	r3, r3, #31
 800b5bc:	d405      	bmi.n	800b5ca <_puts_r+0x22>
 800b5be:	89a3      	ldrh	r3, [r4, #12]
 800b5c0:	0598      	lsls	r0, r3, #22
 800b5c2:	d402      	bmi.n	800b5ca <_puts_r+0x22>
 800b5c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b5c6:	f000 fa18 	bl	800b9fa <__retarget_lock_acquire_recursive>
 800b5ca:	89a3      	ldrh	r3, [r4, #12]
 800b5cc:	0719      	lsls	r1, r3, #28
 800b5ce:	d502      	bpl.n	800b5d6 <_puts_r+0x2e>
 800b5d0:	6923      	ldr	r3, [r4, #16]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d135      	bne.n	800b642 <_puts_r+0x9a>
 800b5d6:	4621      	mov	r1, r4
 800b5d8:	4628      	mov	r0, r5
 800b5da:	f000 f8e5 	bl	800b7a8 <__swsetup_r>
 800b5de:	b380      	cbz	r0, 800b642 <_puts_r+0x9a>
 800b5e0:	f04f 35ff 	mov.w	r5, #4294967295
 800b5e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b5e6:	07da      	lsls	r2, r3, #31
 800b5e8:	d405      	bmi.n	800b5f6 <_puts_r+0x4e>
 800b5ea:	89a3      	ldrh	r3, [r4, #12]
 800b5ec:	059b      	lsls	r3, r3, #22
 800b5ee:	d402      	bmi.n	800b5f6 <_puts_r+0x4e>
 800b5f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b5f2:	f000 fa03 	bl	800b9fc <__retarget_lock_release_recursive>
 800b5f6:	4628      	mov	r0, r5
 800b5f8:	bd70      	pop	{r4, r5, r6, pc}
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	da04      	bge.n	800b608 <_puts_r+0x60>
 800b5fe:	69a2      	ldr	r2, [r4, #24]
 800b600:	429a      	cmp	r2, r3
 800b602:	dc17      	bgt.n	800b634 <_puts_r+0x8c>
 800b604:	290a      	cmp	r1, #10
 800b606:	d015      	beq.n	800b634 <_puts_r+0x8c>
 800b608:	6823      	ldr	r3, [r4, #0]
 800b60a:	1c5a      	adds	r2, r3, #1
 800b60c:	6022      	str	r2, [r4, #0]
 800b60e:	7019      	strb	r1, [r3, #0]
 800b610:	68a3      	ldr	r3, [r4, #8]
 800b612:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b616:	3b01      	subs	r3, #1
 800b618:	60a3      	str	r3, [r4, #8]
 800b61a:	2900      	cmp	r1, #0
 800b61c:	d1ed      	bne.n	800b5fa <_puts_r+0x52>
 800b61e:	2b00      	cmp	r3, #0
 800b620:	da11      	bge.n	800b646 <_puts_r+0x9e>
 800b622:	4622      	mov	r2, r4
 800b624:	210a      	movs	r1, #10
 800b626:	4628      	mov	r0, r5
 800b628:	f000 f87f 	bl	800b72a <__swbuf_r>
 800b62c:	3001      	adds	r0, #1
 800b62e:	d0d7      	beq.n	800b5e0 <_puts_r+0x38>
 800b630:	250a      	movs	r5, #10
 800b632:	e7d7      	b.n	800b5e4 <_puts_r+0x3c>
 800b634:	4622      	mov	r2, r4
 800b636:	4628      	mov	r0, r5
 800b638:	f000 f877 	bl	800b72a <__swbuf_r>
 800b63c:	3001      	adds	r0, #1
 800b63e:	d1e7      	bne.n	800b610 <_puts_r+0x68>
 800b640:	e7ce      	b.n	800b5e0 <_puts_r+0x38>
 800b642:	3e01      	subs	r6, #1
 800b644:	e7e4      	b.n	800b610 <_puts_r+0x68>
 800b646:	6823      	ldr	r3, [r4, #0]
 800b648:	1c5a      	adds	r2, r3, #1
 800b64a:	6022      	str	r2, [r4, #0]
 800b64c:	220a      	movs	r2, #10
 800b64e:	701a      	strb	r2, [r3, #0]
 800b650:	e7ee      	b.n	800b630 <_puts_r+0x88>
	...

0800b654 <puts>:
 800b654:	4b02      	ldr	r3, [pc, #8]	@ (800b660 <puts+0xc>)
 800b656:	4601      	mov	r1, r0
 800b658:	6818      	ldr	r0, [r3, #0]
 800b65a:	f7ff bfa5 	b.w	800b5a8 <_puts_r>
 800b65e:	bf00      	nop
 800b660:	2000001c 	.word	0x2000001c

0800b664 <siprintf>:
 800b664:	b40e      	push	{r1, r2, r3}
 800b666:	b500      	push	{lr}
 800b668:	b09c      	sub	sp, #112	@ 0x70
 800b66a:	ab1d      	add	r3, sp, #116	@ 0x74
 800b66c:	9002      	str	r0, [sp, #8]
 800b66e:	9006      	str	r0, [sp, #24]
 800b670:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b674:	4809      	ldr	r0, [pc, #36]	@ (800b69c <siprintf+0x38>)
 800b676:	9107      	str	r1, [sp, #28]
 800b678:	9104      	str	r1, [sp, #16]
 800b67a:	4909      	ldr	r1, [pc, #36]	@ (800b6a0 <siprintf+0x3c>)
 800b67c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b680:	9105      	str	r1, [sp, #20]
 800b682:	6800      	ldr	r0, [r0, #0]
 800b684:	9301      	str	r3, [sp, #4]
 800b686:	a902      	add	r1, sp, #8
 800b688:	f002 fcac 	bl	800dfe4 <_svfiprintf_r>
 800b68c:	9b02      	ldr	r3, [sp, #8]
 800b68e:	2200      	movs	r2, #0
 800b690:	701a      	strb	r2, [r3, #0]
 800b692:	b01c      	add	sp, #112	@ 0x70
 800b694:	f85d eb04 	ldr.w	lr, [sp], #4
 800b698:	b003      	add	sp, #12
 800b69a:	4770      	bx	lr
 800b69c:	2000001c 	.word	0x2000001c
 800b6a0:	ffff0208 	.word	0xffff0208

0800b6a4 <__sread>:
 800b6a4:	b510      	push	{r4, lr}
 800b6a6:	460c      	mov	r4, r1
 800b6a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6ac:	f000 f956 	bl	800b95c <_read_r>
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	bfab      	itete	ge
 800b6b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b6b6:	89a3      	ldrhlt	r3, [r4, #12]
 800b6b8:	181b      	addge	r3, r3, r0
 800b6ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b6be:	bfac      	ite	ge
 800b6c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b6c2:	81a3      	strhlt	r3, [r4, #12]
 800b6c4:	bd10      	pop	{r4, pc}

0800b6c6 <__swrite>:
 800b6c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ca:	461f      	mov	r7, r3
 800b6cc:	898b      	ldrh	r3, [r1, #12]
 800b6ce:	05db      	lsls	r3, r3, #23
 800b6d0:	4605      	mov	r5, r0
 800b6d2:	460c      	mov	r4, r1
 800b6d4:	4616      	mov	r6, r2
 800b6d6:	d505      	bpl.n	800b6e4 <__swrite+0x1e>
 800b6d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6dc:	2302      	movs	r3, #2
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f000 f92a 	bl	800b938 <_lseek_r>
 800b6e4:	89a3      	ldrh	r3, [r4, #12]
 800b6e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b6ee:	81a3      	strh	r3, [r4, #12]
 800b6f0:	4632      	mov	r2, r6
 800b6f2:	463b      	mov	r3, r7
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6fa:	f000 b941 	b.w	800b980 <_write_r>

0800b6fe <__sseek>:
 800b6fe:	b510      	push	{r4, lr}
 800b700:	460c      	mov	r4, r1
 800b702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b706:	f000 f917 	bl	800b938 <_lseek_r>
 800b70a:	1c43      	adds	r3, r0, #1
 800b70c:	89a3      	ldrh	r3, [r4, #12]
 800b70e:	bf15      	itete	ne
 800b710:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b712:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b716:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b71a:	81a3      	strheq	r3, [r4, #12]
 800b71c:	bf18      	it	ne
 800b71e:	81a3      	strhne	r3, [r4, #12]
 800b720:	bd10      	pop	{r4, pc}

0800b722 <__sclose>:
 800b722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b726:	f000 b8a1 	b.w	800b86c <_close_r>

0800b72a <__swbuf_r>:
 800b72a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b72c:	460e      	mov	r6, r1
 800b72e:	4614      	mov	r4, r2
 800b730:	4605      	mov	r5, r0
 800b732:	b118      	cbz	r0, 800b73c <__swbuf_r+0x12>
 800b734:	6a03      	ldr	r3, [r0, #32]
 800b736:	b90b      	cbnz	r3, 800b73c <__swbuf_r+0x12>
 800b738:	f7ff feee 	bl	800b518 <__sinit>
 800b73c:	69a3      	ldr	r3, [r4, #24]
 800b73e:	60a3      	str	r3, [r4, #8]
 800b740:	89a3      	ldrh	r3, [r4, #12]
 800b742:	071a      	lsls	r2, r3, #28
 800b744:	d501      	bpl.n	800b74a <__swbuf_r+0x20>
 800b746:	6923      	ldr	r3, [r4, #16]
 800b748:	b943      	cbnz	r3, 800b75c <__swbuf_r+0x32>
 800b74a:	4621      	mov	r1, r4
 800b74c:	4628      	mov	r0, r5
 800b74e:	f000 f82b 	bl	800b7a8 <__swsetup_r>
 800b752:	b118      	cbz	r0, 800b75c <__swbuf_r+0x32>
 800b754:	f04f 37ff 	mov.w	r7, #4294967295
 800b758:	4638      	mov	r0, r7
 800b75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b75c:	6823      	ldr	r3, [r4, #0]
 800b75e:	6922      	ldr	r2, [r4, #16]
 800b760:	1a98      	subs	r0, r3, r2
 800b762:	6963      	ldr	r3, [r4, #20]
 800b764:	b2f6      	uxtb	r6, r6
 800b766:	4283      	cmp	r3, r0
 800b768:	4637      	mov	r7, r6
 800b76a:	dc05      	bgt.n	800b778 <__swbuf_r+0x4e>
 800b76c:	4621      	mov	r1, r4
 800b76e:	4628      	mov	r0, r5
 800b770:	f002 fefa 	bl	800e568 <_fflush_r>
 800b774:	2800      	cmp	r0, #0
 800b776:	d1ed      	bne.n	800b754 <__swbuf_r+0x2a>
 800b778:	68a3      	ldr	r3, [r4, #8]
 800b77a:	3b01      	subs	r3, #1
 800b77c:	60a3      	str	r3, [r4, #8]
 800b77e:	6823      	ldr	r3, [r4, #0]
 800b780:	1c5a      	adds	r2, r3, #1
 800b782:	6022      	str	r2, [r4, #0]
 800b784:	701e      	strb	r6, [r3, #0]
 800b786:	6962      	ldr	r2, [r4, #20]
 800b788:	1c43      	adds	r3, r0, #1
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d004      	beq.n	800b798 <__swbuf_r+0x6e>
 800b78e:	89a3      	ldrh	r3, [r4, #12]
 800b790:	07db      	lsls	r3, r3, #31
 800b792:	d5e1      	bpl.n	800b758 <__swbuf_r+0x2e>
 800b794:	2e0a      	cmp	r6, #10
 800b796:	d1df      	bne.n	800b758 <__swbuf_r+0x2e>
 800b798:	4621      	mov	r1, r4
 800b79a:	4628      	mov	r0, r5
 800b79c:	f002 fee4 	bl	800e568 <_fflush_r>
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d0d9      	beq.n	800b758 <__swbuf_r+0x2e>
 800b7a4:	e7d6      	b.n	800b754 <__swbuf_r+0x2a>
	...

0800b7a8 <__swsetup_r>:
 800b7a8:	b538      	push	{r3, r4, r5, lr}
 800b7aa:	4b29      	ldr	r3, [pc, #164]	@ (800b850 <__swsetup_r+0xa8>)
 800b7ac:	4605      	mov	r5, r0
 800b7ae:	6818      	ldr	r0, [r3, #0]
 800b7b0:	460c      	mov	r4, r1
 800b7b2:	b118      	cbz	r0, 800b7bc <__swsetup_r+0x14>
 800b7b4:	6a03      	ldr	r3, [r0, #32]
 800b7b6:	b90b      	cbnz	r3, 800b7bc <__swsetup_r+0x14>
 800b7b8:	f7ff feae 	bl	800b518 <__sinit>
 800b7bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7c0:	0719      	lsls	r1, r3, #28
 800b7c2:	d422      	bmi.n	800b80a <__swsetup_r+0x62>
 800b7c4:	06da      	lsls	r2, r3, #27
 800b7c6:	d407      	bmi.n	800b7d8 <__swsetup_r+0x30>
 800b7c8:	2209      	movs	r2, #9
 800b7ca:	602a      	str	r2, [r5, #0]
 800b7cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7d0:	81a3      	strh	r3, [r4, #12]
 800b7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d6:	e033      	b.n	800b840 <__swsetup_r+0x98>
 800b7d8:	0758      	lsls	r0, r3, #29
 800b7da:	d512      	bpl.n	800b802 <__swsetup_r+0x5a>
 800b7dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7de:	b141      	cbz	r1, 800b7f2 <__swsetup_r+0x4a>
 800b7e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b7e4:	4299      	cmp	r1, r3
 800b7e6:	d002      	beq.n	800b7ee <__swsetup_r+0x46>
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	f000 ff69 	bl	800c6c0 <_free_r>
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7f2:	89a3      	ldrh	r3, [r4, #12]
 800b7f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b7f8:	81a3      	strh	r3, [r4, #12]
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	6063      	str	r3, [r4, #4]
 800b7fe:	6923      	ldr	r3, [r4, #16]
 800b800:	6023      	str	r3, [r4, #0]
 800b802:	89a3      	ldrh	r3, [r4, #12]
 800b804:	f043 0308 	orr.w	r3, r3, #8
 800b808:	81a3      	strh	r3, [r4, #12]
 800b80a:	6923      	ldr	r3, [r4, #16]
 800b80c:	b94b      	cbnz	r3, 800b822 <__swsetup_r+0x7a>
 800b80e:	89a3      	ldrh	r3, [r4, #12]
 800b810:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b818:	d003      	beq.n	800b822 <__swsetup_r+0x7a>
 800b81a:	4621      	mov	r1, r4
 800b81c:	4628      	mov	r0, r5
 800b81e:	f002 fef1 	bl	800e604 <__smakebuf_r>
 800b822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b826:	f013 0201 	ands.w	r2, r3, #1
 800b82a:	d00a      	beq.n	800b842 <__swsetup_r+0x9a>
 800b82c:	2200      	movs	r2, #0
 800b82e:	60a2      	str	r2, [r4, #8]
 800b830:	6962      	ldr	r2, [r4, #20]
 800b832:	4252      	negs	r2, r2
 800b834:	61a2      	str	r2, [r4, #24]
 800b836:	6922      	ldr	r2, [r4, #16]
 800b838:	b942      	cbnz	r2, 800b84c <__swsetup_r+0xa4>
 800b83a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b83e:	d1c5      	bne.n	800b7cc <__swsetup_r+0x24>
 800b840:	bd38      	pop	{r3, r4, r5, pc}
 800b842:	0799      	lsls	r1, r3, #30
 800b844:	bf58      	it	pl
 800b846:	6962      	ldrpl	r2, [r4, #20]
 800b848:	60a2      	str	r2, [r4, #8]
 800b84a:	e7f4      	b.n	800b836 <__swsetup_r+0x8e>
 800b84c:	2000      	movs	r0, #0
 800b84e:	e7f7      	b.n	800b840 <__swsetup_r+0x98>
 800b850:	2000001c 	.word	0x2000001c

0800b854 <memset>:
 800b854:	4402      	add	r2, r0
 800b856:	4603      	mov	r3, r0
 800b858:	4293      	cmp	r3, r2
 800b85a:	d100      	bne.n	800b85e <memset+0xa>
 800b85c:	4770      	bx	lr
 800b85e:	f803 1b01 	strb.w	r1, [r3], #1
 800b862:	e7f9      	b.n	800b858 <memset+0x4>

0800b864 <_localeconv_r>:
 800b864:	4800      	ldr	r0, [pc, #0]	@ (800b868 <_localeconv_r+0x4>)
 800b866:	4770      	bx	lr
 800b868:	2000015c 	.word	0x2000015c

0800b86c <_close_r>:
 800b86c:	b538      	push	{r3, r4, r5, lr}
 800b86e:	4d06      	ldr	r5, [pc, #24]	@ (800b888 <_close_r+0x1c>)
 800b870:	2300      	movs	r3, #0
 800b872:	4604      	mov	r4, r0
 800b874:	4608      	mov	r0, r1
 800b876:	602b      	str	r3, [r5, #0]
 800b878:	f7f7 f830 	bl	80028dc <_close>
 800b87c:	1c43      	adds	r3, r0, #1
 800b87e:	d102      	bne.n	800b886 <_close_r+0x1a>
 800b880:	682b      	ldr	r3, [r5, #0]
 800b882:	b103      	cbz	r3, 800b886 <_close_r+0x1a>
 800b884:	6023      	str	r3, [r4, #0]
 800b886:	bd38      	pop	{r3, r4, r5, pc}
 800b888:	20003c70 	.word	0x20003c70

0800b88c <_reclaim_reent>:
 800b88c:	4b29      	ldr	r3, [pc, #164]	@ (800b934 <_reclaim_reent+0xa8>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4283      	cmp	r3, r0
 800b892:	b570      	push	{r4, r5, r6, lr}
 800b894:	4604      	mov	r4, r0
 800b896:	d04b      	beq.n	800b930 <_reclaim_reent+0xa4>
 800b898:	69c3      	ldr	r3, [r0, #28]
 800b89a:	b1ab      	cbz	r3, 800b8c8 <_reclaim_reent+0x3c>
 800b89c:	68db      	ldr	r3, [r3, #12]
 800b89e:	b16b      	cbz	r3, 800b8bc <_reclaim_reent+0x30>
 800b8a0:	2500      	movs	r5, #0
 800b8a2:	69e3      	ldr	r3, [r4, #28]
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	5959      	ldr	r1, [r3, r5]
 800b8a8:	2900      	cmp	r1, #0
 800b8aa:	d13b      	bne.n	800b924 <_reclaim_reent+0x98>
 800b8ac:	3504      	adds	r5, #4
 800b8ae:	2d80      	cmp	r5, #128	@ 0x80
 800b8b0:	d1f7      	bne.n	800b8a2 <_reclaim_reent+0x16>
 800b8b2:	69e3      	ldr	r3, [r4, #28]
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	68d9      	ldr	r1, [r3, #12]
 800b8b8:	f000 ff02 	bl	800c6c0 <_free_r>
 800b8bc:	69e3      	ldr	r3, [r4, #28]
 800b8be:	6819      	ldr	r1, [r3, #0]
 800b8c0:	b111      	cbz	r1, 800b8c8 <_reclaim_reent+0x3c>
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	f000 fefc 	bl	800c6c0 <_free_r>
 800b8c8:	6961      	ldr	r1, [r4, #20]
 800b8ca:	b111      	cbz	r1, 800b8d2 <_reclaim_reent+0x46>
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	f000 fef7 	bl	800c6c0 <_free_r>
 800b8d2:	69e1      	ldr	r1, [r4, #28]
 800b8d4:	b111      	cbz	r1, 800b8dc <_reclaim_reent+0x50>
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f000 fef2 	bl	800c6c0 <_free_r>
 800b8dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b8de:	b111      	cbz	r1, 800b8e6 <_reclaim_reent+0x5a>
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	f000 feed 	bl	800c6c0 <_free_r>
 800b8e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8e8:	b111      	cbz	r1, 800b8f0 <_reclaim_reent+0x64>
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f000 fee8 	bl	800c6c0 <_free_r>
 800b8f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b8f2:	b111      	cbz	r1, 800b8fa <_reclaim_reent+0x6e>
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	f000 fee3 	bl	800c6c0 <_free_r>
 800b8fa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b8fc:	b111      	cbz	r1, 800b904 <_reclaim_reent+0x78>
 800b8fe:	4620      	mov	r0, r4
 800b900:	f000 fede 	bl	800c6c0 <_free_r>
 800b904:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b906:	b111      	cbz	r1, 800b90e <_reclaim_reent+0x82>
 800b908:	4620      	mov	r0, r4
 800b90a:	f000 fed9 	bl	800c6c0 <_free_r>
 800b90e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b910:	b111      	cbz	r1, 800b918 <_reclaim_reent+0x8c>
 800b912:	4620      	mov	r0, r4
 800b914:	f000 fed4 	bl	800c6c0 <_free_r>
 800b918:	6a23      	ldr	r3, [r4, #32]
 800b91a:	b14b      	cbz	r3, 800b930 <_reclaim_reent+0xa4>
 800b91c:	4620      	mov	r0, r4
 800b91e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b922:	4718      	bx	r3
 800b924:	680e      	ldr	r6, [r1, #0]
 800b926:	4620      	mov	r0, r4
 800b928:	f000 feca 	bl	800c6c0 <_free_r>
 800b92c:	4631      	mov	r1, r6
 800b92e:	e7bb      	b.n	800b8a8 <_reclaim_reent+0x1c>
 800b930:	bd70      	pop	{r4, r5, r6, pc}
 800b932:	bf00      	nop
 800b934:	2000001c 	.word	0x2000001c

0800b938 <_lseek_r>:
 800b938:	b538      	push	{r3, r4, r5, lr}
 800b93a:	4d07      	ldr	r5, [pc, #28]	@ (800b958 <_lseek_r+0x20>)
 800b93c:	4604      	mov	r4, r0
 800b93e:	4608      	mov	r0, r1
 800b940:	4611      	mov	r1, r2
 800b942:	2200      	movs	r2, #0
 800b944:	602a      	str	r2, [r5, #0]
 800b946:	461a      	mov	r2, r3
 800b948:	f7f6 ffef 	bl	800292a <_lseek>
 800b94c:	1c43      	adds	r3, r0, #1
 800b94e:	d102      	bne.n	800b956 <_lseek_r+0x1e>
 800b950:	682b      	ldr	r3, [r5, #0]
 800b952:	b103      	cbz	r3, 800b956 <_lseek_r+0x1e>
 800b954:	6023      	str	r3, [r4, #0]
 800b956:	bd38      	pop	{r3, r4, r5, pc}
 800b958:	20003c70 	.word	0x20003c70

0800b95c <_read_r>:
 800b95c:	b538      	push	{r3, r4, r5, lr}
 800b95e:	4d07      	ldr	r5, [pc, #28]	@ (800b97c <_read_r+0x20>)
 800b960:	4604      	mov	r4, r0
 800b962:	4608      	mov	r0, r1
 800b964:	4611      	mov	r1, r2
 800b966:	2200      	movs	r2, #0
 800b968:	602a      	str	r2, [r5, #0]
 800b96a:	461a      	mov	r2, r3
 800b96c:	f7f6 ff7d 	bl	800286a <_read>
 800b970:	1c43      	adds	r3, r0, #1
 800b972:	d102      	bne.n	800b97a <_read_r+0x1e>
 800b974:	682b      	ldr	r3, [r5, #0]
 800b976:	b103      	cbz	r3, 800b97a <_read_r+0x1e>
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	bd38      	pop	{r3, r4, r5, pc}
 800b97c:	20003c70 	.word	0x20003c70

0800b980 <_write_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	4d07      	ldr	r5, [pc, #28]	@ (800b9a0 <_write_r+0x20>)
 800b984:	4604      	mov	r4, r0
 800b986:	4608      	mov	r0, r1
 800b988:	4611      	mov	r1, r2
 800b98a:	2200      	movs	r2, #0
 800b98c:	602a      	str	r2, [r5, #0]
 800b98e:	461a      	mov	r2, r3
 800b990:	f7f6 ff88 	bl	80028a4 <_write>
 800b994:	1c43      	adds	r3, r0, #1
 800b996:	d102      	bne.n	800b99e <_write_r+0x1e>
 800b998:	682b      	ldr	r3, [r5, #0]
 800b99a:	b103      	cbz	r3, 800b99e <_write_r+0x1e>
 800b99c:	6023      	str	r3, [r4, #0]
 800b99e:	bd38      	pop	{r3, r4, r5, pc}
 800b9a0:	20003c70 	.word	0x20003c70

0800b9a4 <__errno>:
 800b9a4:	4b01      	ldr	r3, [pc, #4]	@ (800b9ac <__errno+0x8>)
 800b9a6:	6818      	ldr	r0, [r3, #0]
 800b9a8:	4770      	bx	lr
 800b9aa:	bf00      	nop
 800b9ac:	2000001c 	.word	0x2000001c

0800b9b0 <__libc_init_array>:
 800b9b0:	b570      	push	{r4, r5, r6, lr}
 800b9b2:	4d0d      	ldr	r5, [pc, #52]	@ (800b9e8 <__libc_init_array+0x38>)
 800b9b4:	4c0d      	ldr	r4, [pc, #52]	@ (800b9ec <__libc_init_array+0x3c>)
 800b9b6:	1b64      	subs	r4, r4, r5
 800b9b8:	10a4      	asrs	r4, r4, #2
 800b9ba:	2600      	movs	r6, #0
 800b9bc:	42a6      	cmp	r6, r4
 800b9be:	d109      	bne.n	800b9d4 <__libc_init_array+0x24>
 800b9c0:	4d0b      	ldr	r5, [pc, #44]	@ (800b9f0 <__libc_init_array+0x40>)
 800b9c2:	4c0c      	ldr	r4, [pc, #48]	@ (800b9f4 <__libc_init_array+0x44>)
 800b9c4:	f003 fc80 	bl	800f2c8 <_init>
 800b9c8:	1b64      	subs	r4, r4, r5
 800b9ca:	10a4      	asrs	r4, r4, #2
 800b9cc:	2600      	movs	r6, #0
 800b9ce:	42a6      	cmp	r6, r4
 800b9d0:	d105      	bne.n	800b9de <__libc_init_array+0x2e>
 800b9d2:	bd70      	pop	{r4, r5, r6, pc}
 800b9d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9d8:	4798      	blx	r3
 800b9da:	3601      	adds	r6, #1
 800b9dc:	e7ee      	b.n	800b9bc <__libc_init_array+0xc>
 800b9de:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9e2:	4798      	blx	r3
 800b9e4:	3601      	adds	r6, #1
 800b9e6:	e7f2      	b.n	800b9ce <__libc_init_array+0x1e>
 800b9e8:	0800fb10 	.word	0x0800fb10
 800b9ec:	0800fb10 	.word	0x0800fb10
 800b9f0:	0800fb10 	.word	0x0800fb10
 800b9f4:	0800fb14 	.word	0x0800fb14

0800b9f8 <__retarget_lock_init_recursive>:
 800b9f8:	4770      	bx	lr

0800b9fa <__retarget_lock_acquire_recursive>:
 800b9fa:	4770      	bx	lr

0800b9fc <__retarget_lock_release_recursive>:
 800b9fc:	4770      	bx	lr

0800b9fe <memcpy>:
 800b9fe:	440a      	add	r2, r1
 800ba00:	4291      	cmp	r1, r2
 800ba02:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba06:	d100      	bne.n	800ba0a <memcpy+0xc>
 800ba08:	4770      	bx	lr
 800ba0a:	b510      	push	{r4, lr}
 800ba0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba10:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba14:	4291      	cmp	r1, r2
 800ba16:	d1f9      	bne.n	800ba0c <memcpy+0xe>
 800ba18:	bd10      	pop	{r4, pc}
	...

0800ba1c <nanf>:
 800ba1c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ba24 <nanf+0x8>
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	7fc00000 	.word	0x7fc00000

0800ba28 <quorem>:
 800ba28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba2c:	6903      	ldr	r3, [r0, #16]
 800ba2e:	690c      	ldr	r4, [r1, #16]
 800ba30:	42a3      	cmp	r3, r4
 800ba32:	4607      	mov	r7, r0
 800ba34:	db7e      	blt.n	800bb34 <quorem+0x10c>
 800ba36:	3c01      	subs	r4, #1
 800ba38:	f101 0814 	add.w	r8, r1, #20
 800ba3c:	00a3      	lsls	r3, r4, #2
 800ba3e:	f100 0514 	add.w	r5, r0, #20
 800ba42:	9300      	str	r3, [sp, #0]
 800ba44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba48:	9301      	str	r3, [sp, #4]
 800ba4a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ba4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba52:	3301      	adds	r3, #1
 800ba54:	429a      	cmp	r2, r3
 800ba56:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ba5a:	fbb2 f6f3 	udiv	r6, r2, r3
 800ba5e:	d32e      	bcc.n	800babe <quorem+0x96>
 800ba60:	f04f 0a00 	mov.w	sl, #0
 800ba64:	46c4      	mov	ip, r8
 800ba66:	46ae      	mov	lr, r5
 800ba68:	46d3      	mov	fp, sl
 800ba6a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ba6e:	b298      	uxth	r0, r3
 800ba70:	fb06 a000 	mla	r0, r6, r0, sl
 800ba74:	0c02      	lsrs	r2, r0, #16
 800ba76:	0c1b      	lsrs	r3, r3, #16
 800ba78:	fb06 2303 	mla	r3, r6, r3, r2
 800ba7c:	f8de 2000 	ldr.w	r2, [lr]
 800ba80:	b280      	uxth	r0, r0
 800ba82:	b292      	uxth	r2, r2
 800ba84:	1a12      	subs	r2, r2, r0
 800ba86:	445a      	add	r2, fp
 800ba88:	f8de 0000 	ldr.w	r0, [lr]
 800ba8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ba96:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ba9a:	b292      	uxth	r2, r2
 800ba9c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800baa0:	45e1      	cmp	r9, ip
 800baa2:	f84e 2b04 	str.w	r2, [lr], #4
 800baa6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800baaa:	d2de      	bcs.n	800ba6a <quorem+0x42>
 800baac:	9b00      	ldr	r3, [sp, #0]
 800baae:	58eb      	ldr	r3, [r5, r3]
 800bab0:	b92b      	cbnz	r3, 800babe <quorem+0x96>
 800bab2:	9b01      	ldr	r3, [sp, #4]
 800bab4:	3b04      	subs	r3, #4
 800bab6:	429d      	cmp	r5, r3
 800bab8:	461a      	mov	r2, r3
 800baba:	d32f      	bcc.n	800bb1c <quorem+0xf4>
 800babc:	613c      	str	r4, [r7, #16]
 800babe:	4638      	mov	r0, r7
 800bac0:	f001 f9c2 	bl	800ce48 <__mcmp>
 800bac4:	2800      	cmp	r0, #0
 800bac6:	db25      	blt.n	800bb14 <quorem+0xec>
 800bac8:	4629      	mov	r1, r5
 800baca:	2000      	movs	r0, #0
 800bacc:	f858 2b04 	ldr.w	r2, [r8], #4
 800bad0:	f8d1 c000 	ldr.w	ip, [r1]
 800bad4:	fa1f fe82 	uxth.w	lr, r2
 800bad8:	fa1f f38c 	uxth.w	r3, ip
 800badc:	eba3 030e 	sub.w	r3, r3, lr
 800bae0:	4403      	add	r3, r0
 800bae2:	0c12      	lsrs	r2, r2, #16
 800bae4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bae8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800baec:	b29b      	uxth	r3, r3
 800baee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800baf2:	45c1      	cmp	r9, r8
 800baf4:	f841 3b04 	str.w	r3, [r1], #4
 800baf8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bafc:	d2e6      	bcs.n	800bacc <quorem+0xa4>
 800bafe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb06:	b922      	cbnz	r2, 800bb12 <quorem+0xea>
 800bb08:	3b04      	subs	r3, #4
 800bb0a:	429d      	cmp	r5, r3
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	d30b      	bcc.n	800bb28 <quorem+0x100>
 800bb10:	613c      	str	r4, [r7, #16]
 800bb12:	3601      	adds	r6, #1
 800bb14:	4630      	mov	r0, r6
 800bb16:	b003      	add	sp, #12
 800bb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb1c:	6812      	ldr	r2, [r2, #0]
 800bb1e:	3b04      	subs	r3, #4
 800bb20:	2a00      	cmp	r2, #0
 800bb22:	d1cb      	bne.n	800babc <quorem+0x94>
 800bb24:	3c01      	subs	r4, #1
 800bb26:	e7c6      	b.n	800bab6 <quorem+0x8e>
 800bb28:	6812      	ldr	r2, [r2, #0]
 800bb2a:	3b04      	subs	r3, #4
 800bb2c:	2a00      	cmp	r2, #0
 800bb2e:	d1ef      	bne.n	800bb10 <quorem+0xe8>
 800bb30:	3c01      	subs	r4, #1
 800bb32:	e7ea      	b.n	800bb0a <quorem+0xe2>
 800bb34:	2000      	movs	r0, #0
 800bb36:	e7ee      	b.n	800bb16 <quorem+0xee>

0800bb38 <_dtoa_r>:
 800bb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb3c:	69c7      	ldr	r7, [r0, #28]
 800bb3e:	b099      	sub	sp, #100	@ 0x64
 800bb40:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bb44:	ec55 4b10 	vmov	r4, r5, d0
 800bb48:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bb4a:	9109      	str	r1, [sp, #36]	@ 0x24
 800bb4c:	4683      	mov	fp, r0
 800bb4e:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb50:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb52:	b97f      	cbnz	r7, 800bb74 <_dtoa_r+0x3c>
 800bb54:	2010      	movs	r0, #16
 800bb56:	f000 fdfd 	bl	800c754 <malloc>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	f8cb 001c 	str.w	r0, [fp, #28]
 800bb60:	b920      	cbnz	r0, 800bb6c <_dtoa_r+0x34>
 800bb62:	4ba7      	ldr	r3, [pc, #668]	@ (800be00 <_dtoa_r+0x2c8>)
 800bb64:	21ef      	movs	r1, #239	@ 0xef
 800bb66:	48a7      	ldr	r0, [pc, #668]	@ (800be04 <_dtoa_r+0x2cc>)
 800bb68:	f002 fdee 	bl	800e748 <__assert_func>
 800bb6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bb70:	6007      	str	r7, [r0, #0]
 800bb72:	60c7      	str	r7, [r0, #12]
 800bb74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb78:	6819      	ldr	r1, [r3, #0]
 800bb7a:	b159      	cbz	r1, 800bb94 <_dtoa_r+0x5c>
 800bb7c:	685a      	ldr	r2, [r3, #4]
 800bb7e:	604a      	str	r2, [r1, #4]
 800bb80:	2301      	movs	r3, #1
 800bb82:	4093      	lsls	r3, r2
 800bb84:	608b      	str	r3, [r1, #8]
 800bb86:	4658      	mov	r0, fp
 800bb88:	f000 feda 	bl	800c940 <_Bfree>
 800bb8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb90:	2200      	movs	r2, #0
 800bb92:	601a      	str	r2, [r3, #0]
 800bb94:	1e2b      	subs	r3, r5, #0
 800bb96:	bfb9      	ittee	lt
 800bb98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bb9c:	9303      	strlt	r3, [sp, #12]
 800bb9e:	2300      	movge	r3, #0
 800bba0:	6033      	strge	r3, [r6, #0]
 800bba2:	9f03      	ldr	r7, [sp, #12]
 800bba4:	4b98      	ldr	r3, [pc, #608]	@ (800be08 <_dtoa_r+0x2d0>)
 800bba6:	bfbc      	itt	lt
 800bba8:	2201      	movlt	r2, #1
 800bbaa:	6032      	strlt	r2, [r6, #0]
 800bbac:	43bb      	bics	r3, r7
 800bbae:	d112      	bne.n	800bbd6 <_dtoa_r+0x9e>
 800bbb0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bbb2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bbb6:	6013      	str	r3, [r2, #0]
 800bbb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bbbc:	4323      	orrs	r3, r4
 800bbbe:	f000 854d 	beq.w	800c65c <_dtoa_r+0xb24>
 800bbc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bbc4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800be1c <_dtoa_r+0x2e4>
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	f000 854f 	beq.w	800c66c <_dtoa_r+0xb34>
 800bbce:	f10a 0303 	add.w	r3, sl, #3
 800bbd2:	f000 bd49 	b.w	800c668 <_dtoa_r+0xb30>
 800bbd6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	ec51 0b17 	vmov	r0, r1, d7
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bbe6:	f7f4 ff97 	bl	8000b18 <__aeabi_dcmpeq>
 800bbea:	4680      	mov	r8, r0
 800bbec:	b158      	cbz	r0, 800bc06 <_dtoa_r+0xce>
 800bbee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	6013      	str	r3, [r2, #0]
 800bbf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bbf6:	b113      	cbz	r3, 800bbfe <_dtoa_r+0xc6>
 800bbf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bbfa:	4b84      	ldr	r3, [pc, #528]	@ (800be0c <_dtoa_r+0x2d4>)
 800bbfc:	6013      	str	r3, [r2, #0]
 800bbfe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800be20 <_dtoa_r+0x2e8>
 800bc02:	f000 bd33 	b.w	800c66c <_dtoa_r+0xb34>
 800bc06:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bc0a:	aa16      	add	r2, sp, #88	@ 0x58
 800bc0c:	a917      	add	r1, sp, #92	@ 0x5c
 800bc0e:	4658      	mov	r0, fp
 800bc10:	f001 fa3a 	bl	800d088 <__d2b>
 800bc14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bc18:	4681      	mov	r9, r0
 800bc1a:	2e00      	cmp	r6, #0
 800bc1c:	d077      	beq.n	800bd0e <_dtoa_r+0x1d6>
 800bc1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc20:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bc24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bc30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bc34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bc38:	4619      	mov	r1, r3
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	4b74      	ldr	r3, [pc, #464]	@ (800be10 <_dtoa_r+0x2d8>)
 800bc3e:	f7f4 fb4b 	bl	80002d8 <__aeabi_dsub>
 800bc42:	a369      	add	r3, pc, #420	@ (adr r3, 800bde8 <_dtoa_r+0x2b0>)
 800bc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc48:	f7f4 fcfe 	bl	8000648 <__aeabi_dmul>
 800bc4c:	a368      	add	r3, pc, #416	@ (adr r3, 800bdf0 <_dtoa_r+0x2b8>)
 800bc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc52:	f7f4 fb43 	bl	80002dc <__adddf3>
 800bc56:	4604      	mov	r4, r0
 800bc58:	4630      	mov	r0, r6
 800bc5a:	460d      	mov	r5, r1
 800bc5c:	f7f4 fc8a 	bl	8000574 <__aeabi_i2d>
 800bc60:	a365      	add	r3, pc, #404	@ (adr r3, 800bdf8 <_dtoa_r+0x2c0>)
 800bc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc66:	f7f4 fcef 	bl	8000648 <__aeabi_dmul>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	4620      	mov	r0, r4
 800bc70:	4629      	mov	r1, r5
 800bc72:	f7f4 fb33 	bl	80002dc <__adddf3>
 800bc76:	4604      	mov	r4, r0
 800bc78:	460d      	mov	r5, r1
 800bc7a:	f7f4 ff95 	bl	8000ba8 <__aeabi_d2iz>
 800bc7e:	2200      	movs	r2, #0
 800bc80:	4607      	mov	r7, r0
 800bc82:	2300      	movs	r3, #0
 800bc84:	4620      	mov	r0, r4
 800bc86:	4629      	mov	r1, r5
 800bc88:	f7f4 ff50 	bl	8000b2c <__aeabi_dcmplt>
 800bc8c:	b140      	cbz	r0, 800bca0 <_dtoa_r+0x168>
 800bc8e:	4638      	mov	r0, r7
 800bc90:	f7f4 fc70 	bl	8000574 <__aeabi_i2d>
 800bc94:	4622      	mov	r2, r4
 800bc96:	462b      	mov	r3, r5
 800bc98:	f7f4 ff3e 	bl	8000b18 <__aeabi_dcmpeq>
 800bc9c:	b900      	cbnz	r0, 800bca0 <_dtoa_r+0x168>
 800bc9e:	3f01      	subs	r7, #1
 800bca0:	2f16      	cmp	r7, #22
 800bca2:	d851      	bhi.n	800bd48 <_dtoa_r+0x210>
 800bca4:	4b5b      	ldr	r3, [pc, #364]	@ (800be14 <_dtoa_r+0x2dc>)
 800bca6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcb2:	f7f4 ff3b 	bl	8000b2c <__aeabi_dcmplt>
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	d048      	beq.n	800bd4c <_dtoa_r+0x214>
 800bcba:	3f01      	subs	r7, #1
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	9312      	str	r3, [sp, #72]	@ 0x48
 800bcc0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bcc2:	1b9b      	subs	r3, r3, r6
 800bcc4:	1e5a      	subs	r2, r3, #1
 800bcc6:	bf44      	itt	mi
 800bcc8:	f1c3 0801 	rsbmi	r8, r3, #1
 800bccc:	2300      	movmi	r3, #0
 800bcce:	9208      	str	r2, [sp, #32]
 800bcd0:	bf54      	ite	pl
 800bcd2:	f04f 0800 	movpl.w	r8, #0
 800bcd6:	9308      	strmi	r3, [sp, #32]
 800bcd8:	2f00      	cmp	r7, #0
 800bcda:	db39      	blt.n	800bd50 <_dtoa_r+0x218>
 800bcdc:	9b08      	ldr	r3, [sp, #32]
 800bcde:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bce0:	443b      	add	r3, r7
 800bce2:	9308      	str	r3, [sp, #32]
 800bce4:	2300      	movs	r3, #0
 800bce6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcea:	2b09      	cmp	r3, #9
 800bcec:	d864      	bhi.n	800bdb8 <_dtoa_r+0x280>
 800bcee:	2b05      	cmp	r3, #5
 800bcf0:	bfc4      	itt	gt
 800bcf2:	3b04      	subgt	r3, #4
 800bcf4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bcf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcf8:	f1a3 0302 	sub.w	r3, r3, #2
 800bcfc:	bfcc      	ite	gt
 800bcfe:	2400      	movgt	r4, #0
 800bd00:	2401      	movle	r4, #1
 800bd02:	2b03      	cmp	r3, #3
 800bd04:	d863      	bhi.n	800bdce <_dtoa_r+0x296>
 800bd06:	e8df f003 	tbb	[pc, r3]
 800bd0a:	372a      	.short	0x372a
 800bd0c:	5535      	.short	0x5535
 800bd0e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bd12:	441e      	add	r6, r3
 800bd14:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bd18:	2b20      	cmp	r3, #32
 800bd1a:	bfc1      	itttt	gt
 800bd1c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bd20:	409f      	lslgt	r7, r3
 800bd22:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bd26:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bd2a:	bfd6      	itet	le
 800bd2c:	f1c3 0320 	rsble	r3, r3, #32
 800bd30:	ea47 0003 	orrgt.w	r0, r7, r3
 800bd34:	fa04 f003 	lslle.w	r0, r4, r3
 800bd38:	f7f4 fc0c 	bl	8000554 <__aeabi_ui2d>
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bd42:	3e01      	subs	r6, #1
 800bd44:	9214      	str	r2, [sp, #80]	@ 0x50
 800bd46:	e777      	b.n	800bc38 <_dtoa_r+0x100>
 800bd48:	2301      	movs	r3, #1
 800bd4a:	e7b8      	b.n	800bcbe <_dtoa_r+0x186>
 800bd4c:	9012      	str	r0, [sp, #72]	@ 0x48
 800bd4e:	e7b7      	b.n	800bcc0 <_dtoa_r+0x188>
 800bd50:	427b      	negs	r3, r7
 800bd52:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd54:	2300      	movs	r3, #0
 800bd56:	eba8 0807 	sub.w	r8, r8, r7
 800bd5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd5c:	e7c4      	b.n	800bce8 <_dtoa_r+0x1b0>
 800bd5e:	2300      	movs	r3, #0
 800bd60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	dc35      	bgt.n	800bdd4 <_dtoa_r+0x29c>
 800bd68:	2301      	movs	r3, #1
 800bd6a:	9300      	str	r3, [sp, #0]
 800bd6c:	9307      	str	r3, [sp, #28]
 800bd6e:	461a      	mov	r2, r3
 800bd70:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd72:	e00b      	b.n	800bd8c <_dtoa_r+0x254>
 800bd74:	2301      	movs	r3, #1
 800bd76:	e7f3      	b.n	800bd60 <_dtoa_r+0x228>
 800bd78:	2300      	movs	r3, #0
 800bd7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd7e:	18fb      	adds	r3, r7, r3
 800bd80:	9300      	str	r3, [sp, #0]
 800bd82:	3301      	adds	r3, #1
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	9307      	str	r3, [sp, #28]
 800bd88:	bfb8      	it	lt
 800bd8a:	2301      	movlt	r3, #1
 800bd8c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bd90:	2100      	movs	r1, #0
 800bd92:	2204      	movs	r2, #4
 800bd94:	f102 0514 	add.w	r5, r2, #20
 800bd98:	429d      	cmp	r5, r3
 800bd9a:	d91f      	bls.n	800bddc <_dtoa_r+0x2a4>
 800bd9c:	6041      	str	r1, [r0, #4]
 800bd9e:	4658      	mov	r0, fp
 800bda0:	f000 fd8e 	bl	800c8c0 <_Balloc>
 800bda4:	4682      	mov	sl, r0
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d13c      	bne.n	800be24 <_dtoa_r+0x2ec>
 800bdaa:	4b1b      	ldr	r3, [pc, #108]	@ (800be18 <_dtoa_r+0x2e0>)
 800bdac:	4602      	mov	r2, r0
 800bdae:	f240 11af 	movw	r1, #431	@ 0x1af
 800bdb2:	e6d8      	b.n	800bb66 <_dtoa_r+0x2e>
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	e7e0      	b.n	800bd7a <_dtoa_r+0x242>
 800bdb8:	2401      	movs	r4, #1
 800bdba:	2300      	movs	r3, #0
 800bdbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdbe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bdc0:	f04f 33ff 	mov.w	r3, #4294967295
 800bdc4:	9300      	str	r3, [sp, #0]
 800bdc6:	9307      	str	r3, [sp, #28]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	2312      	movs	r3, #18
 800bdcc:	e7d0      	b.n	800bd70 <_dtoa_r+0x238>
 800bdce:	2301      	movs	r3, #1
 800bdd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdd2:	e7f5      	b.n	800bdc0 <_dtoa_r+0x288>
 800bdd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdd6:	9300      	str	r3, [sp, #0]
 800bdd8:	9307      	str	r3, [sp, #28]
 800bdda:	e7d7      	b.n	800bd8c <_dtoa_r+0x254>
 800bddc:	3101      	adds	r1, #1
 800bdde:	0052      	lsls	r2, r2, #1
 800bde0:	e7d8      	b.n	800bd94 <_dtoa_r+0x25c>
 800bde2:	bf00      	nop
 800bde4:	f3af 8000 	nop.w
 800bde8:	636f4361 	.word	0x636f4361
 800bdec:	3fd287a7 	.word	0x3fd287a7
 800bdf0:	8b60c8b3 	.word	0x8b60c8b3
 800bdf4:	3fc68a28 	.word	0x3fc68a28
 800bdf8:	509f79fb 	.word	0x509f79fb
 800bdfc:	3fd34413 	.word	0x3fd34413
 800be00:	0800f6e2 	.word	0x0800f6e2
 800be04:	0800f6f9 	.word	0x0800f6f9
 800be08:	7ff00000 	.word	0x7ff00000
 800be0c:	0800f6ad 	.word	0x0800f6ad
 800be10:	3ff80000 	.word	0x3ff80000
 800be14:	0800f7f0 	.word	0x0800f7f0
 800be18:	0800f751 	.word	0x0800f751
 800be1c:	0800f6de 	.word	0x0800f6de
 800be20:	0800f6ac 	.word	0x0800f6ac
 800be24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be28:	6018      	str	r0, [r3, #0]
 800be2a:	9b07      	ldr	r3, [sp, #28]
 800be2c:	2b0e      	cmp	r3, #14
 800be2e:	f200 80a4 	bhi.w	800bf7a <_dtoa_r+0x442>
 800be32:	2c00      	cmp	r4, #0
 800be34:	f000 80a1 	beq.w	800bf7a <_dtoa_r+0x442>
 800be38:	2f00      	cmp	r7, #0
 800be3a:	dd33      	ble.n	800bea4 <_dtoa_r+0x36c>
 800be3c:	4bad      	ldr	r3, [pc, #692]	@ (800c0f4 <_dtoa_r+0x5bc>)
 800be3e:	f007 020f 	and.w	r2, r7, #15
 800be42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be46:	ed93 7b00 	vldr	d7, [r3]
 800be4a:	05f8      	lsls	r0, r7, #23
 800be4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800be50:	ea4f 1427 	mov.w	r4, r7, asr #4
 800be54:	d516      	bpl.n	800be84 <_dtoa_r+0x34c>
 800be56:	4ba8      	ldr	r3, [pc, #672]	@ (800c0f8 <_dtoa_r+0x5c0>)
 800be58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800be60:	f7f4 fd1c 	bl	800089c <__aeabi_ddiv>
 800be64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be68:	f004 040f 	and.w	r4, r4, #15
 800be6c:	2603      	movs	r6, #3
 800be6e:	4da2      	ldr	r5, [pc, #648]	@ (800c0f8 <_dtoa_r+0x5c0>)
 800be70:	b954      	cbnz	r4, 800be88 <_dtoa_r+0x350>
 800be72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be7a:	f7f4 fd0f 	bl	800089c <__aeabi_ddiv>
 800be7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be82:	e028      	b.n	800bed6 <_dtoa_r+0x39e>
 800be84:	2602      	movs	r6, #2
 800be86:	e7f2      	b.n	800be6e <_dtoa_r+0x336>
 800be88:	07e1      	lsls	r1, r4, #31
 800be8a:	d508      	bpl.n	800be9e <_dtoa_r+0x366>
 800be8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be90:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be94:	f7f4 fbd8 	bl	8000648 <__aeabi_dmul>
 800be98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be9c:	3601      	adds	r6, #1
 800be9e:	1064      	asrs	r4, r4, #1
 800bea0:	3508      	adds	r5, #8
 800bea2:	e7e5      	b.n	800be70 <_dtoa_r+0x338>
 800bea4:	f000 80d2 	beq.w	800c04c <_dtoa_r+0x514>
 800bea8:	427c      	negs	r4, r7
 800beaa:	4b92      	ldr	r3, [pc, #584]	@ (800c0f4 <_dtoa_r+0x5bc>)
 800beac:	4d92      	ldr	r5, [pc, #584]	@ (800c0f8 <_dtoa_r+0x5c0>)
 800beae:	f004 020f 	and.w	r2, r4, #15
 800beb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800beb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bebe:	f7f4 fbc3 	bl	8000648 <__aeabi_dmul>
 800bec2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bec6:	1124      	asrs	r4, r4, #4
 800bec8:	2300      	movs	r3, #0
 800beca:	2602      	movs	r6, #2
 800becc:	2c00      	cmp	r4, #0
 800bece:	f040 80b2 	bne.w	800c036 <_dtoa_r+0x4fe>
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d1d3      	bne.n	800be7e <_dtoa_r+0x346>
 800bed6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bed8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f000 80b7 	beq.w	800c050 <_dtoa_r+0x518>
 800bee2:	4b86      	ldr	r3, [pc, #536]	@ (800c0fc <_dtoa_r+0x5c4>)
 800bee4:	2200      	movs	r2, #0
 800bee6:	4620      	mov	r0, r4
 800bee8:	4629      	mov	r1, r5
 800beea:	f7f4 fe1f 	bl	8000b2c <__aeabi_dcmplt>
 800beee:	2800      	cmp	r0, #0
 800bef0:	f000 80ae 	beq.w	800c050 <_dtoa_r+0x518>
 800bef4:	9b07      	ldr	r3, [sp, #28]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f000 80aa 	beq.w	800c050 <_dtoa_r+0x518>
 800befc:	9b00      	ldr	r3, [sp, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	dd37      	ble.n	800bf72 <_dtoa_r+0x43a>
 800bf02:	1e7b      	subs	r3, r7, #1
 800bf04:	9304      	str	r3, [sp, #16]
 800bf06:	4620      	mov	r0, r4
 800bf08:	4b7d      	ldr	r3, [pc, #500]	@ (800c100 <_dtoa_r+0x5c8>)
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	4629      	mov	r1, r5
 800bf0e:	f7f4 fb9b 	bl	8000648 <__aeabi_dmul>
 800bf12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf16:	9c00      	ldr	r4, [sp, #0]
 800bf18:	3601      	adds	r6, #1
 800bf1a:	4630      	mov	r0, r6
 800bf1c:	f7f4 fb2a 	bl	8000574 <__aeabi_i2d>
 800bf20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf24:	f7f4 fb90 	bl	8000648 <__aeabi_dmul>
 800bf28:	4b76      	ldr	r3, [pc, #472]	@ (800c104 <_dtoa_r+0x5cc>)
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f7f4 f9d6 	bl	80002dc <__adddf3>
 800bf30:	4605      	mov	r5, r0
 800bf32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bf36:	2c00      	cmp	r4, #0
 800bf38:	f040 808d 	bne.w	800c056 <_dtoa_r+0x51e>
 800bf3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf40:	4b71      	ldr	r3, [pc, #452]	@ (800c108 <_dtoa_r+0x5d0>)
 800bf42:	2200      	movs	r2, #0
 800bf44:	f7f4 f9c8 	bl	80002d8 <__aeabi_dsub>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf50:	462a      	mov	r2, r5
 800bf52:	4633      	mov	r3, r6
 800bf54:	f7f4 fe08 	bl	8000b68 <__aeabi_dcmpgt>
 800bf58:	2800      	cmp	r0, #0
 800bf5a:	f040 828b 	bne.w	800c474 <_dtoa_r+0x93c>
 800bf5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf62:	462a      	mov	r2, r5
 800bf64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bf68:	f7f4 fde0 	bl	8000b2c <__aeabi_dcmplt>
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	f040 8128 	bne.w	800c1c2 <_dtoa_r+0x68a>
 800bf72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bf76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bf7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	f2c0 815a 	blt.w	800c236 <_dtoa_r+0x6fe>
 800bf82:	2f0e      	cmp	r7, #14
 800bf84:	f300 8157 	bgt.w	800c236 <_dtoa_r+0x6fe>
 800bf88:	4b5a      	ldr	r3, [pc, #360]	@ (800c0f4 <_dtoa_r+0x5bc>)
 800bf8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bf8e:	ed93 7b00 	vldr	d7, [r3]
 800bf92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	ed8d 7b00 	vstr	d7, [sp]
 800bf9a:	da03      	bge.n	800bfa4 <_dtoa_r+0x46c>
 800bf9c:	9b07      	ldr	r3, [sp, #28]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	f340 8101 	ble.w	800c1a6 <_dtoa_r+0x66e>
 800bfa4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bfa8:	4656      	mov	r6, sl
 800bfaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfae:	4620      	mov	r0, r4
 800bfb0:	4629      	mov	r1, r5
 800bfb2:	f7f4 fc73 	bl	800089c <__aeabi_ddiv>
 800bfb6:	f7f4 fdf7 	bl	8000ba8 <__aeabi_d2iz>
 800bfba:	4680      	mov	r8, r0
 800bfbc:	f7f4 fada 	bl	8000574 <__aeabi_i2d>
 800bfc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfc4:	f7f4 fb40 	bl	8000648 <__aeabi_dmul>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	460b      	mov	r3, r1
 800bfcc:	4620      	mov	r0, r4
 800bfce:	4629      	mov	r1, r5
 800bfd0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bfd4:	f7f4 f980 	bl	80002d8 <__aeabi_dsub>
 800bfd8:	f806 4b01 	strb.w	r4, [r6], #1
 800bfdc:	9d07      	ldr	r5, [sp, #28]
 800bfde:	eba6 040a 	sub.w	r4, r6, sl
 800bfe2:	42a5      	cmp	r5, r4
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	f040 8117 	bne.w	800c21a <_dtoa_r+0x6e2>
 800bfec:	f7f4 f976 	bl	80002dc <__adddf3>
 800bff0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bff4:	4604      	mov	r4, r0
 800bff6:	460d      	mov	r5, r1
 800bff8:	f7f4 fdb6 	bl	8000b68 <__aeabi_dcmpgt>
 800bffc:	2800      	cmp	r0, #0
 800bffe:	f040 80f9 	bne.w	800c1f4 <_dtoa_r+0x6bc>
 800c002:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c006:	4620      	mov	r0, r4
 800c008:	4629      	mov	r1, r5
 800c00a:	f7f4 fd85 	bl	8000b18 <__aeabi_dcmpeq>
 800c00e:	b118      	cbz	r0, 800c018 <_dtoa_r+0x4e0>
 800c010:	f018 0f01 	tst.w	r8, #1
 800c014:	f040 80ee 	bne.w	800c1f4 <_dtoa_r+0x6bc>
 800c018:	4649      	mov	r1, r9
 800c01a:	4658      	mov	r0, fp
 800c01c:	f000 fc90 	bl	800c940 <_Bfree>
 800c020:	2300      	movs	r3, #0
 800c022:	7033      	strb	r3, [r6, #0]
 800c024:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c026:	3701      	adds	r7, #1
 800c028:	601f      	str	r7, [r3, #0]
 800c02a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f000 831d 	beq.w	800c66c <_dtoa_r+0xb34>
 800c032:	601e      	str	r6, [r3, #0]
 800c034:	e31a      	b.n	800c66c <_dtoa_r+0xb34>
 800c036:	07e2      	lsls	r2, r4, #31
 800c038:	d505      	bpl.n	800c046 <_dtoa_r+0x50e>
 800c03a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c03e:	f7f4 fb03 	bl	8000648 <__aeabi_dmul>
 800c042:	3601      	adds	r6, #1
 800c044:	2301      	movs	r3, #1
 800c046:	1064      	asrs	r4, r4, #1
 800c048:	3508      	adds	r5, #8
 800c04a:	e73f      	b.n	800becc <_dtoa_r+0x394>
 800c04c:	2602      	movs	r6, #2
 800c04e:	e742      	b.n	800bed6 <_dtoa_r+0x39e>
 800c050:	9c07      	ldr	r4, [sp, #28]
 800c052:	9704      	str	r7, [sp, #16]
 800c054:	e761      	b.n	800bf1a <_dtoa_r+0x3e2>
 800c056:	4b27      	ldr	r3, [pc, #156]	@ (800c0f4 <_dtoa_r+0x5bc>)
 800c058:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c05a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c05e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c062:	4454      	add	r4, sl
 800c064:	2900      	cmp	r1, #0
 800c066:	d053      	beq.n	800c110 <_dtoa_r+0x5d8>
 800c068:	4928      	ldr	r1, [pc, #160]	@ (800c10c <_dtoa_r+0x5d4>)
 800c06a:	2000      	movs	r0, #0
 800c06c:	f7f4 fc16 	bl	800089c <__aeabi_ddiv>
 800c070:	4633      	mov	r3, r6
 800c072:	462a      	mov	r2, r5
 800c074:	f7f4 f930 	bl	80002d8 <__aeabi_dsub>
 800c078:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c07c:	4656      	mov	r6, sl
 800c07e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c082:	f7f4 fd91 	bl	8000ba8 <__aeabi_d2iz>
 800c086:	4605      	mov	r5, r0
 800c088:	f7f4 fa74 	bl	8000574 <__aeabi_i2d>
 800c08c:	4602      	mov	r2, r0
 800c08e:	460b      	mov	r3, r1
 800c090:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c094:	f7f4 f920 	bl	80002d8 <__aeabi_dsub>
 800c098:	3530      	adds	r5, #48	@ 0x30
 800c09a:	4602      	mov	r2, r0
 800c09c:	460b      	mov	r3, r1
 800c09e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0a2:	f806 5b01 	strb.w	r5, [r6], #1
 800c0a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c0aa:	f7f4 fd3f 	bl	8000b2c <__aeabi_dcmplt>
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	d171      	bne.n	800c196 <_dtoa_r+0x65e>
 800c0b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0b6:	4911      	ldr	r1, [pc, #68]	@ (800c0fc <_dtoa_r+0x5c4>)
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	f7f4 f90d 	bl	80002d8 <__aeabi_dsub>
 800c0be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c0c2:	f7f4 fd33 	bl	8000b2c <__aeabi_dcmplt>
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	f040 8095 	bne.w	800c1f6 <_dtoa_r+0x6be>
 800c0cc:	42a6      	cmp	r6, r4
 800c0ce:	f43f af50 	beq.w	800bf72 <_dtoa_r+0x43a>
 800c0d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c0d6:	4b0a      	ldr	r3, [pc, #40]	@ (800c100 <_dtoa_r+0x5c8>)
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f7f4 fab5 	bl	8000648 <__aeabi_dmul>
 800c0de:	4b08      	ldr	r3, [pc, #32]	@ (800c100 <_dtoa_r+0x5c8>)
 800c0e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0ea:	f7f4 faad 	bl	8000648 <__aeabi_dmul>
 800c0ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0f2:	e7c4      	b.n	800c07e <_dtoa_r+0x546>
 800c0f4:	0800f7f0 	.word	0x0800f7f0
 800c0f8:	0800f7c8 	.word	0x0800f7c8
 800c0fc:	3ff00000 	.word	0x3ff00000
 800c100:	40240000 	.word	0x40240000
 800c104:	401c0000 	.word	0x401c0000
 800c108:	40140000 	.word	0x40140000
 800c10c:	3fe00000 	.word	0x3fe00000
 800c110:	4631      	mov	r1, r6
 800c112:	4628      	mov	r0, r5
 800c114:	f7f4 fa98 	bl	8000648 <__aeabi_dmul>
 800c118:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c11c:	9415      	str	r4, [sp, #84]	@ 0x54
 800c11e:	4656      	mov	r6, sl
 800c120:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c124:	f7f4 fd40 	bl	8000ba8 <__aeabi_d2iz>
 800c128:	4605      	mov	r5, r0
 800c12a:	f7f4 fa23 	bl	8000574 <__aeabi_i2d>
 800c12e:	4602      	mov	r2, r0
 800c130:	460b      	mov	r3, r1
 800c132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c136:	f7f4 f8cf 	bl	80002d8 <__aeabi_dsub>
 800c13a:	3530      	adds	r5, #48	@ 0x30
 800c13c:	f806 5b01 	strb.w	r5, [r6], #1
 800c140:	4602      	mov	r2, r0
 800c142:	460b      	mov	r3, r1
 800c144:	42a6      	cmp	r6, r4
 800c146:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c14a:	f04f 0200 	mov.w	r2, #0
 800c14e:	d124      	bne.n	800c19a <_dtoa_r+0x662>
 800c150:	4bac      	ldr	r3, [pc, #688]	@ (800c404 <_dtoa_r+0x8cc>)
 800c152:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c156:	f7f4 f8c1 	bl	80002dc <__adddf3>
 800c15a:	4602      	mov	r2, r0
 800c15c:	460b      	mov	r3, r1
 800c15e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c162:	f7f4 fd01 	bl	8000b68 <__aeabi_dcmpgt>
 800c166:	2800      	cmp	r0, #0
 800c168:	d145      	bne.n	800c1f6 <_dtoa_r+0x6be>
 800c16a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c16e:	49a5      	ldr	r1, [pc, #660]	@ (800c404 <_dtoa_r+0x8cc>)
 800c170:	2000      	movs	r0, #0
 800c172:	f7f4 f8b1 	bl	80002d8 <__aeabi_dsub>
 800c176:	4602      	mov	r2, r0
 800c178:	460b      	mov	r3, r1
 800c17a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c17e:	f7f4 fcd5 	bl	8000b2c <__aeabi_dcmplt>
 800c182:	2800      	cmp	r0, #0
 800c184:	f43f aef5 	beq.w	800bf72 <_dtoa_r+0x43a>
 800c188:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c18a:	1e73      	subs	r3, r6, #1
 800c18c:	9315      	str	r3, [sp, #84]	@ 0x54
 800c18e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c192:	2b30      	cmp	r3, #48	@ 0x30
 800c194:	d0f8      	beq.n	800c188 <_dtoa_r+0x650>
 800c196:	9f04      	ldr	r7, [sp, #16]
 800c198:	e73e      	b.n	800c018 <_dtoa_r+0x4e0>
 800c19a:	4b9b      	ldr	r3, [pc, #620]	@ (800c408 <_dtoa_r+0x8d0>)
 800c19c:	f7f4 fa54 	bl	8000648 <__aeabi_dmul>
 800c1a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1a4:	e7bc      	b.n	800c120 <_dtoa_r+0x5e8>
 800c1a6:	d10c      	bne.n	800c1c2 <_dtoa_r+0x68a>
 800c1a8:	4b98      	ldr	r3, [pc, #608]	@ (800c40c <_dtoa_r+0x8d4>)
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1b0:	f7f4 fa4a 	bl	8000648 <__aeabi_dmul>
 800c1b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1b8:	f7f4 fccc 	bl	8000b54 <__aeabi_dcmpge>
 800c1bc:	2800      	cmp	r0, #0
 800c1be:	f000 8157 	beq.w	800c470 <_dtoa_r+0x938>
 800c1c2:	2400      	movs	r4, #0
 800c1c4:	4625      	mov	r5, r4
 800c1c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1c8:	43db      	mvns	r3, r3
 800c1ca:	9304      	str	r3, [sp, #16]
 800c1cc:	4656      	mov	r6, sl
 800c1ce:	2700      	movs	r7, #0
 800c1d0:	4621      	mov	r1, r4
 800c1d2:	4658      	mov	r0, fp
 800c1d4:	f000 fbb4 	bl	800c940 <_Bfree>
 800c1d8:	2d00      	cmp	r5, #0
 800c1da:	d0dc      	beq.n	800c196 <_dtoa_r+0x65e>
 800c1dc:	b12f      	cbz	r7, 800c1ea <_dtoa_r+0x6b2>
 800c1de:	42af      	cmp	r7, r5
 800c1e0:	d003      	beq.n	800c1ea <_dtoa_r+0x6b2>
 800c1e2:	4639      	mov	r1, r7
 800c1e4:	4658      	mov	r0, fp
 800c1e6:	f000 fbab 	bl	800c940 <_Bfree>
 800c1ea:	4629      	mov	r1, r5
 800c1ec:	4658      	mov	r0, fp
 800c1ee:	f000 fba7 	bl	800c940 <_Bfree>
 800c1f2:	e7d0      	b.n	800c196 <_dtoa_r+0x65e>
 800c1f4:	9704      	str	r7, [sp, #16]
 800c1f6:	4633      	mov	r3, r6
 800c1f8:	461e      	mov	r6, r3
 800c1fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1fe:	2a39      	cmp	r2, #57	@ 0x39
 800c200:	d107      	bne.n	800c212 <_dtoa_r+0x6da>
 800c202:	459a      	cmp	sl, r3
 800c204:	d1f8      	bne.n	800c1f8 <_dtoa_r+0x6c0>
 800c206:	9a04      	ldr	r2, [sp, #16]
 800c208:	3201      	adds	r2, #1
 800c20a:	9204      	str	r2, [sp, #16]
 800c20c:	2230      	movs	r2, #48	@ 0x30
 800c20e:	f88a 2000 	strb.w	r2, [sl]
 800c212:	781a      	ldrb	r2, [r3, #0]
 800c214:	3201      	adds	r2, #1
 800c216:	701a      	strb	r2, [r3, #0]
 800c218:	e7bd      	b.n	800c196 <_dtoa_r+0x65e>
 800c21a:	4b7b      	ldr	r3, [pc, #492]	@ (800c408 <_dtoa_r+0x8d0>)
 800c21c:	2200      	movs	r2, #0
 800c21e:	f7f4 fa13 	bl	8000648 <__aeabi_dmul>
 800c222:	2200      	movs	r2, #0
 800c224:	2300      	movs	r3, #0
 800c226:	4604      	mov	r4, r0
 800c228:	460d      	mov	r5, r1
 800c22a:	f7f4 fc75 	bl	8000b18 <__aeabi_dcmpeq>
 800c22e:	2800      	cmp	r0, #0
 800c230:	f43f aebb 	beq.w	800bfaa <_dtoa_r+0x472>
 800c234:	e6f0      	b.n	800c018 <_dtoa_r+0x4e0>
 800c236:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c238:	2a00      	cmp	r2, #0
 800c23a:	f000 80db 	beq.w	800c3f4 <_dtoa_r+0x8bc>
 800c23e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c240:	2a01      	cmp	r2, #1
 800c242:	f300 80bf 	bgt.w	800c3c4 <_dtoa_r+0x88c>
 800c246:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c248:	2a00      	cmp	r2, #0
 800c24a:	f000 80b7 	beq.w	800c3bc <_dtoa_r+0x884>
 800c24e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c252:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c254:	4646      	mov	r6, r8
 800c256:	9a08      	ldr	r2, [sp, #32]
 800c258:	2101      	movs	r1, #1
 800c25a:	441a      	add	r2, r3
 800c25c:	4658      	mov	r0, fp
 800c25e:	4498      	add	r8, r3
 800c260:	9208      	str	r2, [sp, #32]
 800c262:	f000 fc6b 	bl	800cb3c <__i2b>
 800c266:	4605      	mov	r5, r0
 800c268:	b15e      	cbz	r6, 800c282 <_dtoa_r+0x74a>
 800c26a:	9b08      	ldr	r3, [sp, #32]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	dd08      	ble.n	800c282 <_dtoa_r+0x74a>
 800c270:	42b3      	cmp	r3, r6
 800c272:	9a08      	ldr	r2, [sp, #32]
 800c274:	bfa8      	it	ge
 800c276:	4633      	movge	r3, r6
 800c278:	eba8 0803 	sub.w	r8, r8, r3
 800c27c:	1af6      	subs	r6, r6, r3
 800c27e:	1ad3      	subs	r3, r2, r3
 800c280:	9308      	str	r3, [sp, #32]
 800c282:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c284:	b1f3      	cbz	r3, 800c2c4 <_dtoa_r+0x78c>
 800c286:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c288:	2b00      	cmp	r3, #0
 800c28a:	f000 80b7 	beq.w	800c3fc <_dtoa_r+0x8c4>
 800c28e:	b18c      	cbz	r4, 800c2b4 <_dtoa_r+0x77c>
 800c290:	4629      	mov	r1, r5
 800c292:	4622      	mov	r2, r4
 800c294:	4658      	mov	r0, fp
 800c296:	f000 fd11 	bl	800ccbc <__pow5mult>
 800c29a:	464a      	mov	r2, r9
 800c29c:	4601      	mov	r1, r0
 800c29e:	4605      	mov	r5, r0
 800c2a0:	4658      	mov	r0, fp
 800c2a2:	f000 fc61 	bl	800cb68 <__multiply>
 800c2a6:	4649      	mov	r1, r9
 800c2a8:	9004      	str	r0, [sp, #16]
 800c2aa:	4658      	mov	r0, fp
 800c2ac:	f000 fb48 	bl	800c940 <_Bfree>
 800c2b0:	9b04      	ldr	r3, [sp, #16]
 800c2b2:	4699      	mov	r9, r3
 800c2b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2b6:	1b1a      	subs	r2, r3, r4
 800c2b8:	d004      	beq.n	800c2c4 <_dtoa_r+0x78c>
 800c2ba:	4649      	mov	r1, r9
 800c2bc:	4658      	mov	r0, fp
 800c2be:	f000 fcfd 	bl	800ccbc <__pow5mult>
 800c2c2:	4681      	mov	r9, r0
 800c2c4:	2101      	movs	r1, #1
 800c2c6:	4658      	mov	r0, fp
 800c2c8:	f000 fc38 	bl	800cb3c <__i2b>
 800c2cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f000 81cf 	beq.w	800c674 <_dtoa_r+0xb3c>
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	4601      	mov	r1, r0
 800c2da:	4658      	mov	r0, fp
 800c2dc:	f000 fcee 	bl	800ccbc <__pow5mult>
 800c2e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	f300 8095 	bgt.w	800c414 <_dtoa_r+0x8dc>
 800c2ea:	9b02      	ldr	r3, [sp, #8]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	f040 8087 	bne.w	800c400 <_dtoa_r+0x8c8>
 800c2f2:	9b03      	ldr	r3, [sp, #12]
 800c2f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	f040 8089 	bne.w	800c410 <_dtoa_r+0x8d8>
 800c2fe:	9b03      	ldr	r3, [sp, #12]
 800c300:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c304:	0d1b      	lsrs	r3, r3, #20
 800c306:	051b      	lsls	r3, r3, #20
 800c308:	b12b      	cbz	r3, 800c316 <_dtoa_r+0x7de>
 800c30a:	9b08      	ldr	r3, [sp, #32]
 800c30c:	3301      	adds	r3, #1
 800c30e:	9308      	str	r3, [sp, #32]
 800c310:	f108 0801 	add.w	r8, r8, #1
 800c314:	2301      	movs	r3, #1
 800c316:	930a      	str	r3, [sp, #40]	@ 0x28
 800c318:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	f000 81b0 	beq.w	800c680 <_dtoa_r+0xb48>
 800c320:	6923      	ldr	r3, [r4, #16]
 800c322:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c326:	6918      	ldr	r0, [r3, #16]
 800c328:	f000 fbbc 	bl	800caa4 <__hi0bits>
 800c32c:	f1c0 0020 	rsb	r0, r0, #32
 800c330:	9b08      	ldr	r3, [sp, #32]
 800c332:	4418      	add	r0, r3
 800c334:	f010 001f 	ands.w	r0, r0, #31
 800c338:	d077      	beq.n	800c42a <_dtoa_r+0x8f2>
 800c33a:	f1c0 0320 	rsb	r3, r0, #32
 800c33e:	2b04      	cmp	r3, #4
 800c340:	dd6b      	ble.n	800c41a <_dtoa_r+0x8e2>
 800c342:	9b08      	ldr	r3, [sp, #32]
 800c344:	f1c0 001c 	rsb	r0, r0, #28
 800c348:	4403      	add	r3, r0
 800c34a:	4480      	add	r8, r0
 800c34c:	4406      	add	r6, r0
 800c34e:	9308      	str	r3, [sp, #32]
 800c350:	f1b8 0f00 	cmp.w	r8, #0
 800c354:	dd05      	ble.n	800c362 <_dtoa_r+0x82a>
 800c356:	4649      	mov	r1, r9
 800c358:	4642      	mov	r2, r8
 800c35a:	4658      	mov	r0, fp
 800c35c:	f000 fd08 	bl	800cd70 <__lshift>
 800c360:	4681      	mov	r9, r0
 800c362:	9b08      	ldr	r3, [sp, #32]
 800c364:	2b00      	cmp	r3, #0
 800c366:	dd05      	ble.n	800c374 <_dtoa_r+0x83c>
 800c368:	4621      	mov	r1, r4
 800c36a:	461a      	mov	r2, r3
 800c36c:	4658      	mov	r0, fp
 800c36e:	f000 fcff 	bl	800cd70 <__lshift>
 800c372:	4604      	mov	r4, r0
 800c374:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c376:	2b00      	cmp	r3, #0
 800c378:	d059      	beq.n	800c42e <_dtoa_r+0x8f6>
 800c37a:	4621      	mov	r1, r4
 800c37c:	4648      	mov	r0, r9
 800c37e:	f000 fd63 	bl	800ce48 <__mcmp>
 800c382:	2800      	cmp	r0, #0
 800c384:	da53      	bge.n	800c42e <_dtoa_r+0x8f6>
 800c386:	1e7b      	subs	r3, r7, #1
 800c388:	9304      	str	r3, [sp, #16]
 800c38a:	4649      	mov	r1, r9
 800c38c:	2300      	movs	r3, #0
 800c38e:	220a      	movs	r2, #10
 800c390:	4658      	mov	r0, fp
 800c392:	f000 faf7 	bl	800c984 <__multadd>
 800c396:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c398:	4681      	mov	r9, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f000 8172 	beq.w	800c684 <_dtoa_r+0xb4c>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	4629      	mov	r1, r5
 800c3a4:	220a      	movs	r2, #10
 800c3a6:	4658      	mov	r0, fp
 800c3a8:	f000 faec 	bl	800c984 <__multadd>
 800c3ac:	9b00      	ldr	r3, [sp, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	4605      	mov	r5, r0
 800c3b2:	dc67      	bgt.n	800c484 <_dtoa_r+0x94c>
 800c3b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	dc41      	bgt.n	800c43e <_dtoa_r+0x906>
 800c3ba:	e063      	b.n	800c484 <_dtoa_r+0x94c>
 800c3bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c3be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c3c2:	e746      	b.n	800c252 <_dtoa_r+0x71a>
 800c3c4:	9b07      	ldr	r3, [sp, #28]
 800c3c6:	1e5c      	subs	r4, r3, #1
 800c3c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3ca:	42a3      	cmp	r3, r4
 800c3cc:	bfbf      	itttt	lt
 800c3ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c3d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c3d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c3d4:	1ae3      	sublt	r3, r4, r3
 800c3d6:	bfb4      	ite	lt
 800c3d8:	18d2      	addlt	r2, r2, r3
 800c3da:	1b1c      	subge	r4, r3, r4
 800c3dc:	9b07      	ldr	r3, [sp, #28]
 800c3de:	bfbc      	itt	lt
 800c3e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c3e2:	2400      	movlt	r4, #0
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	bfb5      	itete	lt
 800c3e8:	eba8 0603 	sublt.w	r6, r8, r3
 800c3ec:	9b07      	ldrge	r3, [sp, #28]
 800c3ee:	2300      	movlt	r3, #0
 800c3f0:	4646      	movge	r6, r8
 800c3f2:	e730      	b.n	800c256 <_dtoa_r+0x71e>
 800c3f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c3f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c3f8:	4646      	mov	r6, r8
 800c3fa:	e735      	b.n	800c268 <_dtoa_r+0x730>
 800c3fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c3fe:	e75c      	b.n	800c2ba <_dtoa_r+0x782>
 800c400:	2300      	movs	r3, #0
 800c402:	e788      	b.n	800c316 <_dtoa_r+0x7de>
 800c404:	3fe00000 	.word	0x3fe00000
 800c408:	40240000 	.word	0x40240000
 800c40c:	40140000 	.word	0x40140000
 800c410:	9b02      	ldr	r3, [sp, #8]
 800c412:	e780      	b.n	800c316 <_dtoa_r+0x7de>
 800c414:	2300      	movs	r3, #0
 800c416:	930a      	str	r3, [sp, #40]	@ 0x28
 800c418:	e782      	b.n	800c320 <_dtoa_r+0x7e8>
 800c41a:	d099      	beq.n	800c350 <_dtoa_r+0x818>
 800c41c:	9a08      	ldr	r2, [sp, #32]
 800c41e:	331c      	adds	r3, #28
 800c420:	441a      	add	r2, r3
 800c422:	4498      	add	r8, r3
 800c424:	441e      	add	r6, r3
 800c426:	9208      	str	r2, [sp, #32]
 800c428:	e792      	b.n	800c350 <_dtoa_r+0x818>
 800c42a:	4603      	mov	r3, r0
 800c42c:	e7f6      	b.n	800c41c <_dtoa_r+0x8e4>
 800c42e:	9b07      	ldr	r3, [sp, #28]
 800c430:	9704      	str	r7, [sp, #16]
 800c432:	2b00      	cmp	r3, #0
 800c434:	dc20      	bgt.n	800c478 <_dtoa_r+0x940>
 800c436:	9300      	str	r3, [sp, #0]
 800c438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c43a:	2b02      	cmp	r3, #2
 800c43c:	dd1e      	ble.n	800c47c <_dtoa_r+0x944>
 800c43e:	9b00      	ldr	r3, [sp, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	f47f aec0 	bne.w	800c1c6 <_dtoa_r+0x68e>
 800c446:	4621      	mov	r1, r4
 800c448:	2205      	movs	r2, #5
 800c44a:	4658      	mov	r0, fp
 800c44c:	f000 fa9a 	bl	800c984 <__multadd>
 800c450:	4601      	mov	r1, r0
 800c452:	4604      	mov	r4, r0
 800c454:	4648      	mov	r0, r9
 800c456:	f000 fcf7 	bl	800ce48 <__mcmp>
 800c45a:	2800      	cmp	r0, #0
 800c45c:	f77f aeb3 	ble.w	800c1c6 <_dtoa_r+0x68e>
 800c460:	4656      	mov	r6, sl
 800c462:	2331      	movs	r3, #49	@ 0x31
 800c464:	f806 3b01 	strb.w	r3, [r6], #1
 800c468:	9b04      	ldr	r3, [sp, #16]
 800c46a:	3301      	adds	r3, #1
 800c46c:	9304      	str	r3, [sp, #16]
 800c46e:	e6ae      	b.n	800c1ce <_dtoa_r+0x696>
 800c470:	9c07      	ldr	r4, [sp, #28]
 800c472:	9704      	str	r7, [sp, #16]
 800c474:	4625      	mov	r5, r4
 800c476:	e7f3      	b.n	800c460 <_dtoa_r+0x928>
 800c478:	9b07      	ldr	r3, [sp, #28]
 800c47a:	9300      	str	r3, [sp, #0]
 800c47c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c47e:	2b00      	cmp	r3, #0
 800c480:	f000 8104 	beq.w	800c68c <_dtoa_r+0xb54>
 800c484:	2e00      	cmp	r6, #0
 800c486:	dd05      	ble.n	800c494 <_dtoa_r+0x95c>
 800c488:	4629      	mov	r1, r5
 800c48a:	4632      	mov	r2, r6
 800c48c:	4658      	mov	r0, fp
 800c48e:	f000 fc6f 	bl	800cd70 <__lshift>
 800c492:	4605      	mov	r5, r0
 800c494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c496:	2b00      	cmp	r3, #0
 800c498:	d05a      	beq.n	800c550 <_dtoa_r+0xa18>
 800c49a:	6869      	ldr	r1, [r5, #4]
 800c49c:	4658      	mov	r0, fp
 800c49e:	f000 fa0f 	bl	800c8c0 <_Balloc>
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	b928      	cbnz	r0, 800c4b2 <_dtoa_r+0x97a>
 800c4a6:	4b84      	ldr	r3, [pc, #528]	@ (800c6b8 <_dtoa_r+0xb80>)
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c4ae:	f7ff bb5a 	b.w	800bb66 <_dtoa_r+0x2e>
 800c4b2:	692a      	ldr	r2, [r5, #16]
 800c4b4:	3202      	adds	r2, #2
 800c4b6:	0092      	lsls	r2, r2, #2
 800c4b8:	f105 010c 	add.w	r1, r5, #12
 800c4bc:	300c      	adds	r0, #12
 800c4be:	f7ff fa9e 	bl	800b9fe <memcpy>
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	4631      	mov	r1, r6
 800c4c6:	4658      	mov	r0, fp
 800c4c8:	f000 fc52 	bl	800cd70 <__lshift>
 800c4cc:	f10a 0301 	add.w	r3, sl, #1
 800c4d0:	9307      	str	r3, [sp, #28]
 800c4d2:	9b00      	ldr	r3, [sp, #0]
 800c4d4:	4453      	add	r3, sl
 800c4d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4d8:	9b02      	ldr	r3, [sp, #8]
 800c4da:	f003 0301 	and.w	r3, r3, #1
 800c4de:	462f      	mov	r7, r5
 800c4e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4e2:	4605      	mov	r5, r0
 800c4e4:	9b07      	ldr	r3, [sp, #28]
 800c4e6:	4621      	mov	r1, r4
 800c4e8:	3b01      	subs	r3, #1
 800c4ea:	4648      	mov	r0, r9
 800c4ec:	9300      	str	r3, [sp, #0]
 800c4ee:	f7ff fa9b 	bl	800ba28 <quorem>
 800c4f2:	4639      	mov	r1, r7
 800c4f4:	9002      	str	r0, [sp, #8]
 800c4f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c4fa:	4648      	mov	r0, r9
 800c4fc:	f000 fca4 	bl	800ce48 <__mcmp>
 800c500:	462a      	mov	r2, r5
 800c502:	9008      	str	r0, [sp, #32]
 800c504:	4621      	mov	r1, r4
 800c506:	4658      	mov	r0, fp
 800c508:	f000 fcba 	bl	800ce80 <__mdiff>
 800c50c:	68c2      	ldr	r2, [r0, #12]
 800c50e:	4606      	mov	r6, r0
 800c510:	bb02      	cbnz	r2, 800c554 <_dtoa_r+0xa1c>
 800c512:	4601      	mov	r1, r0
 800c514:	4648      	mov	r0, r9
 800c516:	f000 fc97 	bl	800ce48 <__mcmp>
 800c51a:	4602      	mov	r2, r0
 800c51c:	4631      	mov	r1, r6
 800c51e:	4658      	mov	r0, fp
 800c520:	920e      	str	r2, [sp, #56]	@ 0x38
 800c522:	f000 fa0d 	bl	800c940 <_Bfree>
 800c526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c528:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c52a:	9e07      	ldr	r6, [sp, #28]
 800c52c:	ea43 0102 	orr.w	r1, r3, r2
 800c530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c532:	4319      	orrs	r1, r3
 800c534:	d110      	bne.n	800c558 <_dtoa_r+0xa20>
 800c536:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c53a:	d029      	beq.n	800c590 <_dtoa_r+0xa58>
 800c53c:	9b08      	ldr	r3, [sp, #32]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	dd02      	ble.n	800c548 <_dtoa_r+0xa10>
 800c542:	9b02      	ldr	r3, [sp, #8]
 800c544:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c548:	9b00      	ldr	r3, [sp, #0]
 800c54a:	f883 8000 	strb.w	r8, [r3]
 800c54e:	e63f      	b.n	800c1d0 <_dtoa_r+0x698>
 800c550:	4628      	mov	r0, r5
 800c552:	e7bb      	b.n	800c4cc <_dtoa_r+0x994>
 800c554:	2201      	movs	r2, #1
 800c556:	e7e1      	b.n	800c51c <_dtoa_r+0x9e4>
 800c558:	9b08      	ldr	r3, [sp, #32]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	db04      	blt.n	800c568 <_dtoa_r+0xa30>
 800c55e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c560:	430b      	orrs	r3, r1
 800c562:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c564:	430b      	orrs	r3, r1
 800c566:	d120      	bne.n	800c5aa <_dtoa_r+0xa72>
 800c568:	2a00      	cmp	r2, #0
 800c56a:	dded      	ble.n	800c548 <_dtoa_r+0xa10>
 800c56c:	4649      	mov	r1, r9
 800c56e:	2201      	movs	r2, #1
 800c570:	4658      	mov	r0, fp
 800c572:	f000 fbfd 	bl	800cd70 <__lshift>
 800c576:	4621      	mov	r1, r4
 800c578:	4681      	mov	r9, r0
 800c57a:	f000 fc65 	bl	800ce48 <__mcmp>
 800c57e:	2800      	cmp	r0, #0
 800c580:	dc03      	bgt.n	800c58a <_dtoa_r+0xa52>
 800c582:	d1e1      	bne.n	800c548 <_dtoa_r+0xa10>
 800c584:	f018 0f01 	tst.w	r8, #1
 800c588:	d0de      	beq.n	800c548 <_dtoa_r+0xa10>
 800c58a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c58e:	d1d8      	bne.n	800c542 <_dtoa_r+0xa0a>
 800c590:	9a00      	ldr	r2, [sp, #0]
 800c592:	2339      	movs	r3, #57	@ 0x39
 800c594:	7013      	strb	r3, [r2, #0]
 800c596:	4633      	mov	r3, r6
 800c598:	461e      	mov	r6, r3
 800c59a:	3b01      	subs	r3, #1
 800c59c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c5a0:	2a39      	cmp	r2, #57	@ 0x39
 800c5a2:	d052      	beq.n	800c64a <_dtoa_r+0xb12>
 800c5a4:	3201      	adds	r2, #1
 800c5a6:	701a      	strb	r2, [r3, #0]
 800c5a8:	e612      	b.n	800c1d0 <_dtoa_r+0x698>
 800c5aa:	2a00      	cmp	r2, #0
 800c5ac:	dd07      	ble.n	800c5be <_dtoa_r+0xa86>
 800c5ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c5b2:	d0ed      	beq.n	800c590 <_dtoa_r+0xa58>
 800c5b4:	9a00      	ldr	r2, [sp, #0]
 800c5b6:	f108 0301 	add.w	r3, r8, #1
 800c5ba:	7013      	strb	r3, [r2, #0]
 800c5bc:	e608      	b.n	800c1d0 <_dtoa_r+0x698>
 800c5be:	9b07      	ldr	r3, [sp, #28]
 800c5c0:	9a07      	ldr	r2, [sp, #28]
 800c5c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c5c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d028      	beq.n	800c61e <_dtoa_r+0xae6>
 800c5cc:	4649      	mov	r1, r9
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	220a      	movs	r2, #10
 800c5d2:	4658      	mov	r0, fp
 800c5d4:	f000 f9d6 	bl	800c984 <__multadd>
 800c5d8:	42af      	cmp	r7, r5
 800c5da:	4681      	mov	r9, r0
 800c5dc:	f04f 0300 	mov.w	r3, #0
 800c5e0:	f04f 020a 	mov.w	r2, #10
 800c5e4:	4639      	mov	r1, r7
 800c5e6:	4658      	mov	r0, fp
 800c5e8:	d107      	bne.n	800c5fa <_dtoa_r+0xac2>
 800c5ea:	f000 f9cb 	bl	800c984 <__multadd>
 800c5ee:	4607      	mov	r7, r0
 800c5f0:	4605      	mov	r5, r0
 800c5f2:	9b07      	ldr	r3, [sp, #28]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	9307      	str	r3, [sp, #28]
 800c5f8:	e774      	b.n	800c4e4 <_dtoa_r+0x9ac>
 800c5fa:	f000 f9c3 	bl	800c984 <__multadd>
 800c5fe:	4629      	mov	r1, r5
 800c600:	4607      	mov	r7, r0
 800c602:	2300      	movs	r3, #0
 800c604:	220a      	movs	r2, #10
 800c606:	4658      	mov	r0, fp
 800c608:	f000 f9bc 	bl	800c984 <__multadd>
 800c60c:	4605      	mov	r5, r0
 800c60e:	e7f0      	b.n	800c5f2 <_dtoa_r+0xaba>
 800c610:	9b00      	ldr	r3, [sp, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	bfcc      	ite	gt
 800c616:	461e      	movgt	r6, r3
 800c618:	2601      	movle	r6, #1
 800c61a:	4456      	add	r6, sl
 800c61c:	2700      	movs	r7, #0
 800c61e:	4649      	mov	r1, r9
 800c620:	2201      	movs	r2, #1
 800c622:	4658      	mov	r0, fp
 800c624:	f000 fba4 	bl	800cd70 <__lshift>
 800c628:	4621      	mov	r1, r4
 800c62a:	4681      	mov	r9, r0
 800c62c:	f000 fc0c 	bl	800ce48 <__mcmp>
 800c630:	2800      	cmp	r0, #0
 800c632:	dcb0      	bgt.n	800c596 <_dtoa_r+0xa5e>
 800c634:	d102      	bne.n	800c63c <_dtoa_r+0xb04>
 800c636:	f018 0f01 	tst.w	r8, #1
 800c63a:	d1ac      	bne.n	800c596 <_dtoa_r+0xa5e>
 800c63c:	4633      	mov	r3, r6
 800c63e:	461e      	mov	r6, r3
 800c640:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c644:	2a30      	cmp	r2, #48	@ 0x30
 800c646:	d0fa      	beq.n	800c63e <_dtoa_r+0xb06>
 800c648:	e5c2      	b.n	800c1d0 <_dtoa_r+0x698>
 800c64a:	459a      	cmp	sl, r3
 800c64c:	d1a4      	bne.n	800c598 <_dtoa_r+0xa60>
 800c64e:	9b04      	ldr	r3, [sp, #16]
 800c650:	3301      	adds	r3, #1
 800c652:	9304      	str	r3, [sp, #16]
 800c654:	2331      	movs	r3, #49	@ 0x31
 800c656:	f88a 3000 	strb.w	r3, [sl]
 800c65a:	e5b9      	b.n	800c1d0 <_dtoa_r+0x698>
 800c65c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c65e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c6bc <_dtoa_r+0xb84>
 800c662:	b11b      	cbz	r3, 800c66c <_dtoa_r+0xb34>
 800c664:	f10a 0308 	add.w	r3, sl, #8
 800c668:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c66a:	6013      	str	r3, [r2, #0]
 800c66c:	4650      	mov	r0, sl
 800c66e:	b019      	add	sp, #100	@ 0x64
 800c670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c676:	2b01      	cmp	r3, #1
 800c678:	f77f ae37 	ble.w	800c2ea <_dtoa_r+0x7b2>
 800c67c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c67e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c680:	2001      	movs	r0, #1
 800c682:	e655      	b.n	800c330 <_dtoa_r+0x7f8>
 800c684:	9b00      	ldr	r3, [sp, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	f77f aed6 	ble.w	800c438 <_dtoa_r+0x900>
 800c68c:	4656      	mov	r6, sl
 800c68e:	4621      	mov	r1, r4
 800c690:	4648      	mov	r0, r9
 800c692:	f7ff f9c9 	bl	800ba28 <quorem>
 800c696:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c69a:	f806 8b01 	strb.w	r8, [r6], #1
 800c69e:	9b00      	ldr	r3, [sp, #0]
 800c6a0:	eba6 020a 	sub.w	r2, r6, sl
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	ddb3      	ble.n	800c610 <_dtoa_r+0xad8>
 800c6a8:	4649      	mov	r1, r9
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	220a      	movs	r2, #10
 800c6ae:	4658      	mov	r0, fp
 800c6b0:	f000 f968 	bl	800c984 <__multadd>
 800c6b4:	4681      	mov	r9, r0
 800c6b6:	e7ea      	b.n	800c68e <_dtoa_r+0xb56>
 800c6b8:	0800f751 	.word	0x0800f751
 800c6bc:	0800f6d5 	.word	0x0800f6d5

0800c6c0 <_free_r>:
 800c6c0:	b538      	push	{r3, r4, r5, lr}
 800c6c2:	4605      	mov	r5, r0
 800c6c4:	2900      	cmp	r1, #0
 800c6c6:	d041      	beq.n	800c74c <_free_r+0x8c>
 800c6c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6cc:	1f0c      	subs	r4, r1, #4
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	bfb8      	it	lt
 800c6d2:	18e4      	addlt	r4, r4, r3
 800c6d4:	f000 f8e8 	bl	800c8a8 <__malloc_lock>
 800c6d8:	4a1d      	ldr	r2, [pc, #116]	@ (800c750 <_free_r+0x90>)
 800c6da:	6813      	ldr	r3, [r2, #0]
 800c6dc:	b933      	cbnz	r3, 800c6ec <_free_r+0x2c>
 800c6de:	6063      	str	r3, [r4, #4]
 800c6e0:	6014      	str	r4, [r2, #0]
 800c6e2:	4628      	mov	r0, r5
 800c6e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6e8:	f000 b8e4 	b.w	800c8b4 <__malloc_unlock>
 800c6ec:	42a3      	cmp	r3, r4
 800c6ee:	d908      	bls.n	800c702 <_free_r+0x42>
 800c6f0:	6820      	ldr	r0, [r4, #0]
 800c6f2:	1821      	adds	r1, r4, r0
 800c6f4:	428b      	cmp	r3, r1
 800c6f6:	bf01      	itttt	eq
 800c6f8:	6819      	ldreq	r1, [r3, #0]
 800c6fa:	685b      	ldreq	r3, [r3, #4]
 800c6fc:	1809      	addeq	r1, r1, r0
 800c6fe:	6021      	streq	r1, [r4, #0]
 800c700:	e7ed      	b.n	800c6de <_free_r+0x1e>
 800c702:	461a      	mov	r2, r3
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	b10b      	cbz	r3, 800c70c <_free_r+0x4c>
 800c708:	42a3      	cmp	r3, r4
 800c70a:	d9fa      	bls.n	800c702 <_free_r+0x42>
 800c70c:	6811      	ldr	r1, [r2, #0]
 800c70e:	1850      	adds	r0, r2, r1
 800c710:	42a0      	cmp	r0, r4
 800c712:	d10b      	bne.n	800c72c <_free_r+0x6c>
 800c714:	6820      	ldr	r0, [r4, #0]
 800c716:	4401      	add	r1, r0
 800c718:	1850      	adds	r0, r2, r1
 800c71a:	4283      	cmp	r3, r0
 800c71c:	6011      	str	r1, [r2, #0]
 800c71e:	d1e0      	bne.n	800c6e2 <_free_r+0x22>
 800c720:	6818      	ldr	r0, [r3, #0]
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	6053      	str	r3, [r2, #4]
 800c726:	4408      	add	r0, r1
 800c728:	6010      	str	r0, [r2, #0]
 800c72a:	e7da      	b.n	800c6e2 <_free_r+0x22>
 800c72c:	d902      	bls.n	800c734 <_free_r+0x74>
 800c72e:	230c      	movs	r3, #12
 800c730:	602b      	str	r3, [r5, #0]
 800c732:	e7d6      	b.n	800c6e2 <_free_r+0x22>
 800c734:	6820      	ldr	r0, [r4, #0]
 800c736:	1821      	adds	r1, r4, r0
 800c738:	428b      	cmp	r3, r1
 800c73a:	bf04      	itt	eq
 800c73c:	6819      	ldreq	r1, [r3, #0]
 800c73e:	685b      	ldreq	r3, [r3, #4]
 800c740:	6063      	str	r3, [r4, #4]
 800c742:	bf04      	itt	eq
 800c744:	1809      	addeq	r1, r1, r0
 800c746:	6021      	streq	r1, [r4, #0]
 800c748:	6054      	str	r4, [r2, #4]
 800c74a:	e7ca      	b.n	800c6e2 <_free_r+0x22>
 800c74c:	bd38      	pop	{r3, r4, r5, pc}
 800c74e:	bf00      	nop
 800c750:	20003c7c 	.word	0x20003c7c

0800c754 <malloc>:
 800c754:	4b02      	ldr	r3, [pc, #8]	@ (800c760 <malloc+0xc>)
 800c756:	4601      	mov	r1, r0
 800c758:	6818      	ldr	r0, [r3, #0]
 800c75a:	f000 b825 	b.w	800c7a8 <_malloc_r>
 800c75e:	bf00      	nop
 800c760:	2000001c 	.word	0x2000001c

0800c764 <sbrk_aligned>:
 800c764:	b570      	push	{r4, r5, r6, lr}
 800c766:	4e0f      	ldr	r6, [pc, #60]	@ (800c7a4 <sbrk_aligned+0x40>)
 800c768:	460c      	mov	r4, r1
 800c76a:	6831      	ldr	r1, [r6, #0]
 800c76c:	4605      	mov	r5, r0
 800c76e:	b911      	cbnz	r1, 800c776 <sbrk_aligned+0x12>
 800c770:	f001 ffd2 	bl	800e718 <_sbrk_r>
 800c774:	6030      	str	r0, [r6, #0]
 800c776:	4621      	mov	r1, r4
 800c778:	4628      	mov	r0, r5
 800c77a:	f001 ffcd 	bl	800e718 <_sbrk_r>
 800c77e:	1c43      	adds	r3, r0, #1
 800c780:	d103      	bne.n	800c78a <sbrk_aligned+0x26>
 800c782:	f04f 34ff 	mov.w	r4, #4294967295
 800c786:	4620      	mov	r0, r4
 800c788:	bd70      	pop	{r4, r5, r6, pc}
 800c78a:	1cc4      	adds	r4, r0, #3
 800c78c:	f024 0403 	bic.w	r4, r4, #3
 800c790:	42a0      	cmp	r0, r4
 800c792:	d0f8      	beq.n	800c786 <sbrk_aligned+0x22>
 800c794:	1a21      	subs	r1, r4, r0
 800c796:	4628      	mov	r0, r5
 800c798:	f001 ffbe 	bl	800e718 <_sbrk_r>
 800c79c:	3001      	adds	r0, #1
 800c79e:	d1f2      	bne.n	800c786 <sbrk_aligned+0x22>
 800c7a0:	e7ef      	b.n	800c782 <sbrk_aligned+0x1e>
 800c7a2:	bf00      	nop
 800c7a4:	20003c78 	.word	0x20003c78

0800c7a8 <_malloc_r>:
 800c7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7ac:	1ccd      	adds	r5, r1, #3
 800c7ae:	f025 0503 	bic.w	r5, r5, #3
 800c7b2:	3508      	adds	r5, #8
 800c7b4:	2d0c      	cmp	r5, #12
 800c7b6:	bf38      	it	cc
 800c7b8:	250c      	movcc	r5, #12
 800c7ba:	2d00      	cmp	r5, #0
 800c7bc:	4606      	mov	r6, r0
 800c7be:	db01      	blt.n	800c7c4 <_malloc_r+0x1c>
 800c7c0:	42a9      	cmp	r1, r5
 800c7c2:	d904      	bls.n	800c7ce <_malloc_r+0x26>
 800c7c4:	230c      	movs	r3, #12
 800c7c6:	6033      	str	r3, [r6, #0]
 800c7c8:	2000      	movs	r0, #0
 800c7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c8a4 <_malloc_r+0xfc>
 800c7d2:	f000 f869 	bl	800c8a8 <__malloc_lock>
 800c7d6:	f8d8 3000 	ldr.w	r3, [r8]
 800c7da:	461c      	mov	r4, r3
 800c7dc:	bb44      	cbnz	r4, 800c830 <_malloc_r+0x88>
 800c7de:	4629      	mov	r1, r5
 800c7e0:	4630      	mov	r0, r6
 800c7e2:	f7ff ffbf 	bl	800c764 <sbrk_aligned>
 800c7e6:	1c43      	adds	r3, r0, #1
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	d158      	bne.n	800c89e <_malloc_r+0xf6>
 800c7ec:	f8d8 4000 	ldr.w	r4, [r8]
 800c7f0:	4627      	mov	r7, r4
 800c7f2:	2f00      	cmp	r7, #0
 800c7f4:	d143      	bne.n	800c87e <_malloc_r+0xd6>
 800c7f6:	2c00      	cmp	r4, #0
 800c7f8:	d04b      	beq.n	800c892 <_malloc_r+0xea>
 800c7fa:	6823      	ldr	r3, [r4, #0]
 800c7fc:	4639      	mov	r1, r7
 800c7fe:	4630      	mov	r0, r6
 800c800:	eb04 0903 	add.w	r9, r4, r3
 800c804:	f001 ff88 	bl	800e718 <_sbrk_r>
 800c808:	4581      	cmp	r9, r0
 800c80a:	d142      	bne.n	800c892 <_malloc_r+0xea>
 800c80c:	6821      	ldr	r1, [r4, #0]
 800c80e:	1a6d      	subs	r5, r5, r1
 800c810:	4629      	mov	r1, r5
 800c812:	4630      	mov	r0, r6
 800c814:	f7ff ffa6 	bl	800c764 <sbrk_aligned>
 800c818:	3001      	adds	r0, #1
 800c81a:	d03a      	beq.n	800c892 <_malloc_r+0xea>
 800c81c:	6823      	ldr	r3, [r4, #0]
 800c81e:	442b      	add	r3, r5
 800c820:	6023      	str	r3, [r4, #0]
 800c822:	f8d8 3000 	ldr.w	r3, [r8]
 800c826:	685a      	ldr	r2, [r3, #4]
 800c828:	bb62      	cbnz	r2, 800c884 <_malloc_r+0xdc>
 800c82a:	f8c8 7000 	str.w	r7, [r8]
 800c82e:	e00f      	b.n	800c850 <_malloc_r+0xa8>
 800c830:	6822      	ldr	r2, [r4, #0]
 800c832:	1b52      	subs	r2, r2, r5
 800c834:	d420      	bmi.n	800c878 <_malloc_r+0xd0>
 800c836:	2a0b      	cmp	r2, #11
 800c838:	d917      	bls.n	800c86a <_malloc_r+0xc2>
 800c83a:	1961      	adds	r1, r4, r5
 800c83c:	42a3      	cmp	r3, r4
 800c83e:	6025      	str	r5, [r4, #0]
 800c840:	bf18      	it	ne
 800c842:	6059      	strne	r1, [r3, #4]
 800c844:	6863      	ldr	r3, [r4, #4]
 800c846:	bf08      	it	eq
 800c848:	f8c8 1000 	streq.w	r1, [r8]
 800c84c:	5162      	str	r2, [r4, r5]
 800c84e:	604b      	str	r3, [r1, #4]
 800c850:	4630      	mov	r0, r6
 800c852:	f000 f82f 	bl	800c8b4 <__malloc_unlock>
 800c856:	f104 000b 	add.w	r0, r4, #11
 800c85a:	1d23      	adds	r3, r4, #4
 800c85c:	f020 0007 	bic.w	r0, r0, #7
 800c860:	1ac2      	subs	r2, r0, r3
 800c862:	bf1c      	itt	ne
 800c864:	1a1b      	subne	r3, r3, r0
 800c866:	50a3      	strne	r3, [r4, r2]
 800c868:	e7af      	b.n	800c7ca <_malloc_r+0x22>
 800c86a:	6862      	ldr	r2, [r4, #4]
 800c86c:	42a3      	cmp	r3, r4
 800c86e:	bf0c      	ite	eq
 800c870:	f8c8 2000 	streq.w	r2, [r8]
 800c874:	605a      	strne	r2, [r3, #4]
 800c876:	e7eb      	b.n	800c850 <_malloc_r+0xa8>
 800c878:	4623      	mov	r3, r4
 800c87a:	6864      	ldr	r4, [r4, #4]
 800c87c:	e7ae      	b.n	800c7dc <_malloc_r+0x34>
 800c87e:	463c      	mov	r4, r7
 800c880:	687f      	ldr	r7, [r7, #4]
 800c882:	e7b6      	b.n	800c7f2 <_malloc_r+0x4a>
 800c884:	461a      	mov	r2, r3
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	42a3      	cmp	r3, r4
 800c88a:	d1fb      	bne.n	800c884 <_malloc_r+0xdc>
 800c88c:	2300      	movs	r3, #0
 800c88e:	6053      	str	r3, [r2, #4]
 800c890:	e7de      	b.n	800c850 <_malloc_r+0xa8>
 800c892:	230c      	movs	r3, #12
 800c894:	6033      	str	r3, [r6, #0]
 800c896:	4630      	mov	r0, r6
 800c898:	f000 f80c 	bl	800c8b4 <__malloc_unlock>
 800c89c:	e794      	b.n	800c7c8 <_malloc_r+0x20>
 800c89e:	6005      	str	r5, [r0, #0]
 800c8a0:	e7d6      	b.n	800c850 <_malloc_r+0xa8>
 800c8a2:	bf00      	nop
 800c8a4:	20003c7c 	.word	0x20003c7c

0800c8a8 <__malloc_lock>:
 800c8a8:	4801      	ldr	r0, [pc, #4]	@ (800c8b0 <__malloc_lock+0x8>)
 800c8aa:	f7ff b8a6 	b.w	800b9fa <__retarget_lock_acquire_recursive>
 800c8ae:	bf00      	nop
 800c8b0:	20003c74 	.word	0x20003c74

0800c8b4 <__malloc_unlock>:
 800c8b4:	4801      	ldr	r0, [pc, #4]	@ (800c8bc <__malloc_unlock+0x8>)
 800c8b6:	f7ff b8a1 	b.w	800b9fc <__retarget_lock_release_recursive>
 800c8ba:	bf00      	nop
 800c8bc:	20003c74 	.word	0x20003c74

0800c8c0 <_Balloc>:
 800c8c0:	b570      	push	{r4, r5, r6, lr}
 800c8c2:	69c6      	ldr	r6, [r0, #28]
 800c8c4:	4604      	mov	r4, r0
 800c8c6:	460d      	mov	r5, r1
 800c8c8:	b976      	cbnz	r6, 800c8e8 <_Balloc+0x28>
 800c8ca:	2010      	movs	r0, #16
 800c8cc:	f7ff ff42 	bl	800c754 <malloc>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	61e0      	str	r0, [r4, #28]
 800c8d4:	b920      	cbnz	r0, 800c8e0 <_Balloc+0x20>
 800c8d6:	4b18      	ldr	r3, [pc, #96]	@ (800c938 <_Balloc+0x78>)
 800c8d8:	4818      	ldr	r0, [pc, #96]	@ (800c93c <_Balloc+0x7c>)
 800c8da:	216b      	movs	r1, #107	@ 0x6b
 800c8dc:	f001 ff34 	bl	800e748 <__assert_func>
 800c8e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c8e4:	6006      	str	r6, [r0, #0]
 800c8e6:	60c6      	str	r6, [r0, #12]
 800c8e8:	69e6      	ldr	r6, [r4, #28]
 800c8ea:	68f3      	ldr	r3, [r6, #12]
 800c8ec:	b183      	cbz	r3, 800c910 <_Balloc+0x50>
 800c8ee:	69e3      	ldr	r3, [r4, #28]
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c8f6:	b9b8      	cbnz	r0, 800c928 <_Balloc+0x68>
 800c8f8:	2101      	movs	r1, #1
 800c8fa:	fa01 f605 	lsl.w	r6, r1, r5
 800c8fe:	1d72      	adds	r2, r6, #5
 800c900:	0092      	lsls	r2, r2, #2
 800c902:	4620      	mov	r0, r4
 800c904:	f001 ff3e 	bl	800e784 <_calloc_r>
 800c908:	b160      	cbz	r0, 800c924 <_Balloc+0x64>
 800c90a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c90e:	e00e      	b.n	800c92e <_Balloc+0x6e>
 800c910:	2221      	movs	r2, #33	@ 0x21
 800c912:	2104      	movs	r1, #4
 800c914:	4620      	mov	r0, r4
 800c916:	f001 ff35 	bl	800e784 <_calloc_r>
 800c91a:	69e3      	ldr	r3, [r4, #28]
 800c91c:	60f0      	str	r0, [r6, #12]
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d1e4      	bne.n	800c8ee <_Balloc+0x2e>
 800c924:	2000      	movs	r0, #0
 800c926:	bd70      	pop	{r4, r5, r6, pc}
 800c928:	6802      	ldr	r2, [r0, #0]
 800c92a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c92e:	2300      	movs	r3, #0
 800c930:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c934:	e7f7      	b.n	800c926 <_Balloc+0x66>
 800c936:	bf00      	nop
 800c938:	0800f6e2 	.word	0x0800f6e2
 800c93c:	0800f762 	.word	0x0800f762

0800c940 <_Bfree>:
 800c940:	b570      	push	{r4, r5, r6, lr}
 800c942:	69c6      	ldr	r6, [r0, #28]
 800c944:	4605      	mov	r5, r0
 800c946:	460c      	mov	r4, r1
 800c948:	b976      	cbnz	r6, 800c968 <_Bfree+0x28>
 800c94a:	2010      	movs	r0, #16
 800c94c:	f7ff ff02 	bl	800c754 <malloc>
 800c950:	4602      	mov	r2, r0
 800c952:	61e8      	str	r0, [r5, #28]
 800c954:	b920      	cbnz	r0, 800c960 <_Bfree+0x20>
 800c956:	4b09      	ldr	r3, [pc, #36]	@ (800c97c <_Bfree+0x3c>)
 800c958:	4809      	ldr	r0, [pc, #36]	@ (800c980 <_Bfree+0x40>)
 800c95a:	218f      	movs	r1, #143	@ 0x8f
 800c95c:	f001 fef4 	bl	800e748 <__assert_func>
 800c960:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c964:	6006      	str	r6, [r0, #0]
 800c966:	60c6      	str	r6, [r0, #12]
 800c968:	b13c      	cbz	r4, 800c97a <_Bfree+0x3a>
 800c96a:	69eb      	ldr	r3, [r5, #28]
 800c96c:	6862      	ldr	r2, [r4, #4]
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c974:	6021      	str	r1, [r4, #0]
 800c976:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c97a:	bd70      	pop	{r4, r5, r6, pc}
 800c97c:	0800f6e2 	.word	0x0800f6e2
 800c980:	0800f762 	.word	0x0800f762

0800c984 <__multadd>:
 800c984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c988:	690d      	ldr	r5, [r1, #16]
 800c98a:	4607      	mov	r7, r0
 800c98c:	460c      	mov	r4, r1
 800c98e:	461e      	mov	r6, r3
 800c990:	f101 0c14 	add.w	ip, r1, #20
 800c994:	2000      	movs	r0, #0
 800c996:	f8dc 3000 	ldr.w	r3, [ip]
 800c99a:	b299      	uxth	r1, r3
 800c99c:	fb02 6101 	mla	r1, r2, r1, r6
 800c9a0:	0c1e      	lsrs	r6, r3, #16
 800c9a2:	0c0b      	lsrs	r3, r1, #16
 800c9a4:	fb02 3306 	mla	r3, r2, r6, r3
 800c9a8:	b289      	uxth	r1, r1
 800c9aa:	3001      	adds	r0, #1
 800c9ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c9b0:	4285      	cmp	r5, r0
 800c9b2:	f84c 1b04 	str.w	r1, [ip], #4
 800c9b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c9ba:	dcec      	bgt.n	800c996 <__multadd+0x12>
 800c9bc:	b30e      	cbz	r6, 800ca02 <__multadd+0x7e>
 800c9be:	68a3      	ldr	r3, [r4, #8]
 800c9c0:	42ab      	cmp	r3, r5
 800c9c2:	dc19      	bgt.n	800c9f8 <__multadd+0x74>
 800c9c4:	6861      	ldr	r1, [r4, #4]
 800c9c6:	4638      	mov	r0, r7
 800c9c8:	3101      	adds	r1, #1
 800c9ca:	f7ff ff79 	bl	800c8c0 <_Balloc>
 800c9ce:	4680      	mov	r8, r0
 800c9d0:	b928      	cbnz	r0, 800c9de <__multadd+0x5a>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	4b0c      	ldr	r3, [pc, #48]	@ (800ca08 <__multadd+0x84>)
 800c9d6:	480d      	ldr	r0, [pc, #52]	@ (800ca0c <__multadd+0x88>)
 800c9d8:	21ba      	movs	r1, #186	@ 0xba
 800c9da:	f001 feb5 	bl	800e748 <__assert_func>
 800c9de:	6922      	ldr	r2, [r4, #16]
 800c9e0:	3202      	adds	r2, #2
 800c9e2:	f104 010c 	add.w	r1, r4, #12
 800c9e6:	0092      	lsls	r2, r2, #2
 800c9e8:	300c      	adds	r0, #12
 800c9ea:	f7ff f808 	bl	800b9fe <memcpy>
 800c9ee:	4621      	mov	r1, r4
 800c9f0:	4638      	mov	r0, r7
 800c9f2:	f7ff ffa5 	bl	800c940 <_Bfree>
 800c9f6:	4644      	mov	r4, r8
 800c9f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c9fc:	3501      	adds	r5, #1
 800c9fe:	615e      	str	r6, [r3, #20]
 800ca00:	6125      	str	r5, [r4, #16]
 800ca02:	4620      	mov	r0, r4
 800ca04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca08:	0800f751 	.word	0x0800f751
 800ca0c:	0800f762 	.word	0x0800f762

0800ca10 <__s2b>:
 800ca10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca14:	460c      	mov	r4, r1
 800ca16:	4615      	mov	r5, r2
 800ca18:	461f      	mov	r7, r3
 800ca1a:	2209      	movs	r2, #9
 800ca1c:	3308      	adds	r3, #8
 800ca1e:	4606      	mov	r6, r0
 800ca20:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca24:	2100      	movs	r1, #0
 800ca26:	2201      	movs	r2, #1
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	db09      	blt.n	800ca40 <__s2b+0x30>
 800ca2c:	4630      	mov	r0, r6
 800ca2e:	f7ff ff47 	bl	800c8c0 <_Balloc>
 800ca32:	b940      	cbnz	r0, 800ca46 <__s2b+0x36>
 800ca34:	4602      	mov	r2, r0
 800ca36:	4b19      	ldr	r3, [pc, #100]	@ (800ca9c <__s2b+0x8c>)
 800ca38:	4819      	ldr	r0, [pc, #100]	@ (800caa0 <__s2b+0x90>)
 800ca3a:	21d3      	movs	r1, #211	@ 0xd3
 800ca3c:	f001 fe84 	bl	800e748 <__assert_func>
 800ca40:	0052      	lsls	r2, r2, #1
 800ca42:	3101      	adds	r1, #1
 800ca44:	e7f0      	b.n	800ca28 <__s2b+0x18>
 800ca46:	9b08      	ldr	r3, [sp, #32]
 800ca48:	6143      	str	r3, [r0, #20]
 800ca4a:	2d09      	cmp	r5, #9
 800ca4c:	f04f 0301 	mov.w	r3, #1
 800ca50:	6103      	str	r3, [r0, #16]
 800ca52:	dd16      	ble.n	800ca82 <__s2b+0x72>
 800ca54:	f104 0909 	add.w	r9, r4, #9
 800ca58:	46c8      	mov	r8, r9
 800ca5a:	442c      	add	r4, r5
 800ca5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ca60:	4601      	mov	r1, r0
 800ca62:	3b30      	subs	r3, #48	@ 0x30
 800ca64:	220a      	movs	r2, #10
 800ca66:	4630      	mov	r0, r6
 800ca68:	f7ff ff8c 	bl	800c984 <__multadd>
 800ca6c:	45a0      	cmp	r8, r4
 800ca6e:	d1f5      	bne.n	800ca5c <__s2b+0x4c>
 800ca70:	f1a5 0408 	sub.w	r4, r5, #8
 800ca74:	444c      	add	r4, r9
 800ca76:	1b2d      	subs	r5, r5, r4
 800ca78:	1963      	adds	r3, r4, r5
 800ca7a:	42bb      	cmp	r3, r7
 800ca7c:	db04      	blt.n	800ca88 <__s2b+0x78>
 800ca7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca82:	340a      	adds	r4, #10
 800ca84:	2509      	movs	r5, #9
 800ca86:	e7f6      	b.n	800ca76 <__s2b+0x66>
 800ca88:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ca8c:	4601      	mov	r1, r0
 800ca8e:	3b30      	subs	r3, #48	@ 0x30
 800ca90:	220a      	movs	r2, #10
 800ca92:	4630      	mov	r0, r6
 800ca94:	f7ff ff76 	bl	800c984 <__multadd>
 800ca98:	e7ee      	b.n	800ca78 <__s2b+0x68>
 800ca9a:	bf00      	nop
 800ca9c:	0800f751 	.word	0x0800f751
 800caa0:	0800f762 	.word	0x0800f762

0800caa4 <__hi0bits>:
 800caa4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800caa8:	4603      	mov	r3, r0
 800caaa:	bf36      	itet	cc
 800caac:	0403      	lslcc	r3, r0, #16
 800caae:	2000      	movcs	r0, #0
 800cab0:	2010      	movcc	r0, #16
 800cab2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cab6:	bf3c      	itt	cc
 800cab8:	021b      	lslcc	r3, r3, #8
 800caba:	3008      	addcc	r0, #8
 800cabc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cac0:	bf3c      	itt	cc
 800cac2:	011b      	lslcc	r3, r3, #4
 800cac4:	3004      	addcc	r0, #4
 800cac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800caca:	bf3c      	itt	cc
 800cacc:	009b      	lslcc	r3, r3, #2
 800cace:	3002      	addcc	r0, #2
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	db05      	blt.n	800cae0 <__hi0bits+0x3c>
 800cad4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cad8:	f100 0001 	add.w	r0, r0, #1
 800cadc:	bf08      	it	eq
 800cade:	2020      	moveq	r0, #32
 800cae0:	4770      	bx	lr

0800cae2 <__lo0bits>:
 800cae2:	6803      	ldr	r3, [r0, #0]
 800cae4:	4602      	mov	r2, r0
 800cae6:	f013 0007 	ands.w	r0, r3, #7
 800caea:	d00b      	beq.n	800cb04 <__lo0bits+0x22>
 800caec:	07d9      	lsls	r1, r3, #31
 800caee:	d421      	bmi.n	800cb34 <__lo0bits+0x52>
 800caf0:	0798      	lsls	r0, r3, #30
 800caf2:	bf49      	itett	mi
 800caf4:	085b      	lsrmi	r3, r3, #1
 800caf6:	089b      	lsrpl	r3, r3, #2
 800caf8:	2001      	movmi	r0, #1
 800cafa:	6013      	strmi	r3, [r2, #0]
 800cafc:	bf5c      	itt	pl
 800cafe:	6013      	strpl	r3, [r2, #0]
 800cb00:	2002      	movpl	r0, #2
 800cb02:	4770      	bx	lr
 800cb04:	b299      	uxth	r1, r3
 800cb06:	b909      	cbnz	r1, 800cb0c <__lo0bits+0x2a>
 800cb08:	0c1b      	lsrs	r3, r3, #16
 800cb0a:	2010      	movs	r0, #16
 800cb0c:	b2d9      	uxtb	r1, r3
 800cb0e:	b909      	cbnz	r1, 800cb14 <__lo0bits+0x32>
 800cb10:	3008      	adds	r0, #8
 800cb12:	0a1b      	lsrs	r3, r3, #8
 800cb14:	0719      	lsls	r1, r3, #28
 800cb16:	bf04      	itt	eq
 800cb18:	091b      	lsreq	r3, r3, #4
 800cb1a:	3004      	addeq	r0, #4
 800cb1c:	0799      	lsls	r1, r3, #30
 800cb1e:	bf04      	itt	eq
 800cb20:	089b      	lsreq	r3, r3, #2
 800cb22:	3002      	addeq	r0, #2
 800cb24:	07d9      	lsls	r1, r3, #31
 800cb26:	d403      	bmi.n	800cb30 <__lo0bits+0x4e>
 800cb28:	085b      	lsrs	r3, r3, #1
 800cb2a:	f100 0001 	add.w	r0, r0, #1
 800cb2e:	d003      	beq.n	800cb38 <__lo0bits+0x56>
 800cb30:	6013      	str	r3, [r2, #0]
 800cb32:	4770      	bx	lr
 800cb34:	2000      	movs	r0, #0
 800cb36:	4770      	bx	lr
 800cb38:	2020      	movs	r0, #32
 800cb3a:	4770      	bx	lr

0800cb3c <__i2b>:
 800cb3c:	b510      	push	{r4, lr}
 800cb3e:	460c      	mov	r4, r1
 800cb40:	2101      	movs	r1, #1
 800cb42:	f7ff febd 	bl	800c8c0 <_Balloc>
 800cb46:	4602      	mov	r2, r0
 800cb48:	b928      	cbnz	r0, 800cb56 <__i2b+0x1a>
 800cb4a:	4b05      	ldr	r3, [pc, #20]	@ (800cb60 <__i2b+0x24>)
 800cb4c:	4805      	ldr	r0, [pc, #20]	@ (800cb64 <__i2b+0x28>)
 800cb4e:	f240 1145 	movw	r1, #325	@ 0x145
 800cb52:	f001 fdf9 	bl	800e748 <__assert_func>
 800cb56:	2301      	movs	r3, #1
 800cb58:	6144      	str	r4, [r0, #20]
 800cb5a:	6103      	str	r3, [r0, #16]
 800cb5c:	bd10      	pop	{r4, pc}
 800cb5e:	bf00      	nop
 800cb60:	0800f751 	.word	0x0800f751
 800cb64:	0800f762 	.word	0x0800f762

0800cb68 <__multiply>:
 800cb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb6c:	4614      	mov	r4, r2
 800cb6e:	690a      	ldr	r2, [r1, #16]
 800cb70:	6923      	ldr	r3, [r4, #16]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	bfa8      	it	ge
 800cb76:	4623      	movge	r3, r4
 800cb78:	460f      	mov	r7, r1
 800cb7a:	bfa4      	itt	ge
 800cb7c:	460c      	movge	r4, r1
 800cb7e:	461f      	movge	r7, r3
 800cb80:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cb84:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cb88:	68a3      	ldr	r3, [r4, #8]
 800cb8a:	6861      	ldr	r1, [r4, #4]
 800cb8c:	eb0a 0609 	add.w	r6, sl, r9
 800cb90:	42b3      	cmp	r3, r6
 800cb92:	b085      	sub	sp, #20
 800cb94:	bfb8      	it	lt
 800cb96:	3101      	addlt	r1, #1
 800cb98:	f7ff fe92 	bl	800c8c0 <_Balloc>
 800cb9c:	b930      	cbnz	r0, 800cbac <__multiply+0x44>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	4b44      	ldr	r3, [pc, #272]	@ (800ccb4 <__multiply+0x14c>)
 800cba2:	4845      	ldr	r0, [pc, #276]	@ (800ccb8 <__multiply+0x150>)
 800cba4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cba8:	f001 fdce 	bl	800e748 <__assert_func>
 800cbac:	f100 0514 	add.w	r5, r0, #20
 800cbb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cbb4:	462b      	mov	r3, r5
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	4543      	cmp	r3, r8
 800cbba:	d321      	bcc.n	800cc00 <__multiply+0x98>
 800cbbc:	f107 0114 	add.w	r1, r7, #20
 800cbc0:	f104 0214 	add.w	r2, r4, #20
 800cbc4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cbc8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cbcc:	9302      	str	r3, [sp, #8]
 800cbce:	1b13      	subs	r3, r2, r4
 800cbd0:	3b15      	subs	r3, #21
 800cbd2:	f023 0303 	bic.w	r3, r3, #3
 800cbd6:	3304      	adds	r3, #4
 800cbd8:	f104 0715 	add.w	r7, r4, #21
 800cbdc:	42ba      	cmp	r2, r7
 800cbde:	bf38      	it	cc
 800cbe0:	2304      	movcc	r3, #4
 800cbe2:	9301      	str	r3, [sp, #4]
 800cbe4:	9b02      	ldr	r3, [sp, #8]
 800cbe6:	9103      	str	r1, [sp, #12]
 800cbe8:	428b      	cmp	r3, r1
 800cbea:	d80c      	bhi.n	800cc06 <__multiply+0x9e>
 800cbec:	2e00      	cmp	r6, #0
 800cbee:	dd03      	ble.n	800cbf8 <__multiply+0x90>
 800cbf0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d05b      	beq.n	800ccb0 <__multiply+0x148>
 800cbf8:	6106      	str	r6, [r0, #16]
 800cbfa:	b005      	add	sp, #20
 800cbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc00:	f843 2b04 	str.w	r2, [r3], #4
 800cc04:	e7d8      	b.n	800cbb8 <__multiply+0x50>
 800cc06:	f8b1 a000 	ldrh.w	sl, [r1]
 800cc0a:	f1ba 0f00 	cmp.w	sl, #0
 800cc0e:	d024      	beq.n	800cc5a <__multiply+0xf2>
 800cc10:	f104 0e14 	add.w	lr, r4, #20
 800cc14:	46a9      	mov	r9, r5
 800cc16:	f04f 0c00 	mov.w	ip, #0
 800cc1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cc1e:	f8d9 3000 	ldr.w	r3, [r9]
 800cc22:	fa1f fb87 	uxth.w	fp, r7
 800cc26:	b29b      	uxth	r3, r3
 800cc28:	fb0a 330b 	mla	r3, sl, fp, r3
 800cc2c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cc30:	f8d9 7000 	ldr.w	r7, [r9]
 800cc34:	4463      	add	r3, ip
 800cc36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cc3a:	fb0a c70b 	mla	r7, sl, fp, ip
 800cc3e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cc48:	4572      	cmp	r2, lr
 800cc4a:	f849 3b04 	str.w	r3, [r9], #4
 800cc4e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cc52:	d8e2      	bhi.n	800cc1a <__multiply+0xb2>
 800cc54:	9b01      	ldr	r3, [sp, #4]
 800cc56:	f845 c003 	str.w	ip, [r5, r3]
 800cc5a:	9b03      	ldr	r3, [sp, #12]
 800cc5c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cc60:	3104      	adds	r1, #4
 800cc62:	f1b9 0f00 	cmp.w	r9, #0
 800cc66:	d021      	beq.n	800ccac <__multiply+0x144>
 800cc68:	682b      	ldr	r3, [r5, #0]
 800cc6a:	f104 0c14 	add.w	ip, r4, #20
 800cc6e:	46ae      	mov	lr, r5
 800cc70:	f04f 0a00 	mov.w	sl, #0
 800cc74:	f8bc b000 	ldrh.w	fp, [ip]
 800cc78:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cc7c:	fb09 770b 	mla	r7, r9, fp, r7
 800cc80:	4457      	add	r7, sl
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cc88:	f84e 3b04 	str.w	r3, [lr], #4
 800cc8c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cc90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cc94:	f8be 3000 	ldrh.w	r3, [lr]
 800cc98:	fb09 330a 	mla	r3, r9, sl, r3
 800cc9c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cca0:	4562      	cmp	r2, ip
 800cca2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cca6:	d8e5      	bhi.n	800cc74 <__multiply+0x10c>
 800cca8:	9f01      	ldr	r7, [sp, #4]
 800ccaa:	51eb      	str	r3, [r5, r7]
 800ccac:	3504      	adds	r5, #4
 800ccae:	e799      	b.n	800cbe4 <__multiply+0x7c>
 800ccb0:	3e01      	subs	r6, #1
 800ccb2:	e79b      	b.n	800cbec <__multiply+0x84>
 800ccb4:	0800f751 	.word	0x0800f751
 800ccb8:	0800f762 	.word	0x0800f762

0800ccbc <__pow5mult>:
 800ccbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccc0:	4615      	mov	r5, r2
 800ccc2:	f012 0203 	ands.w	r2, r2, #3
 800ccc6:	4607      	mov	r7, r0
 800ccc8:	460e      	mov	r6, r1
 800ccca:	d007      	beq.n	800ccdc <__pow5mult+0x20>
 800cccc:	4c25      	ldr	r4, [pc, #148]	@ (800cd64 <__pow5mult+0xa8>)
 800ccce:	3a01      	subs	r2, #1
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ccd6:	f7ff fe55 	bl	800c984 <__multadd>
 800ccda:	4606      	mov	r6, r0
 800ccdc:	10ad      	asrs	r5, r5, #2
 800ccde:	d03d      	beq.n	800cd5c <__pow5mult+0xa0>
 800cce0:	69fc      	ldr	r4, [r7, #28]
 800cce2:	b97c      	cbnz	r4, 800cd04 <__pow5mult+0x48>
 800cce4:	2010      	movs	r0, #16
 800cce6:	f7ff fd35 	bl	800c754 <malloc>
 800ccea:	4602      	mov	r2, r0
 800ccec:	61f8      	str	r0, [r7, #28]
 800ccee:	b928      	cbnz	r0, 800ccfc <__pow5mult+0x40>
 800ccf0:	4b1d      	ldr	r3, [pc, #116]	@ (800cd68 <__pow5mult+0xac>)
 800ccf2:	481e      	ldr	r0, [pc, #120]	@ (800cd6c <__pow5mult+0xb0>)
 800ccf4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ccf8:	f001 fd26 	bl	800e748 <__assert_func>
 800ccfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd00:	6004      	str	r4, [r0, #0]
 800cd02:	60c4      	str	r4, [r0, #12]
 800cd04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cd08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd0c:	b94c      	cbnz	r4, 800cd22 <__pow5mult+0x66>
 800cd0e:	f240 2171 	movw	r1, #625	@ 0x271
 800cd12:	4638      	mov	r0, r7
 800cd14:	f7ff ff12 	bl	800cb3c <__i2b>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd1e:	4604      	mov	r4, r0
 800cd20:	6003      	str	r3, [r0, #0]
 800cd22:	f04f 0900 	mov.w	r9, #0
 800cd26:	07eb      	lsls	r3, r5, #31
 800cd28:	d50a      	bpl.n	800cd40 <__pow5mult+0x84>
 800cd2a:	4631      	mov	r1, r6
 800cd2c:	4622      	mov	r2, r4
 800cd2e:	4638      	mov	r0, r7
 800cd30:	f7ff ff1a 	bl	800cb68 <__multiply>
 800cd34:	4631      	mov	r1, r6
 800cd36:	4680      	mov	r8, r0
 800cd38:	4638      	mov	r0, r7
 800cd3a:	f7ff fe01 	bl	800c940 <_Bfree>
 800cd3e:	4646      	mov	r6, r8
 800cd40:	106d      	asrs	r5, r5, #1
 800cd42:	d00b      	beq.n	800cd5c <__pow5mult+0xa0>
 800cd44:	6820      	ldr	r0, [r4, #0]
 800cd46:	b938      	cbnz	r0, 800cd58 <__pow5mult+0x9c>
 800cd48:	4622      	mov	r2, r4
 800cd4a:	4621      	mov	r1, r4
 800cd4c:	4638      	mov	r0, r7
 800cd4e:	f7ff ff0b 	bl	800cb68 <__multiply>
 800cd52:	6020      	str	r0, [r4, #0]
 800cd54:	f8c0 9000 	str.w	r9, [r0]
 800cd58:	4604      	mov	r4, r0
 800cd5a:	e7e4      	b.n	800cd26 <__pow5mult+0x6a>
 800cd5c:	4630      	mov	r0, r6
 800cd5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd62:	bf00      	nop
 800cd64:	0800f7bc 	.word	0x0800f7bc
 800cd68:	0800f6e2 	.word	0x0800f6e2
 800cd6c:	0800f762 	.word	0x0800f762

0800cd70 <__lshift>:
 800cd70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd74:	460c      	mov	r4, r1
 800cd76:	6849      	ldr	r1, [r1, #4]
 800cd78:	6923      	ldr	r3, [r4, #16]
 800cd7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cd7e:	68a3      	ldr	r3, [r4, #8]
 800cd80:	4607      	mov	r7, r0
 800cd82:	4691      	mov	r9, r2
 800cd84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cd88:	f108 0601 	add.w	r6, r8, #1
 800cd8c:	42b3      	cmp	r3, r6
 800cd8e:	db0b      	blt.n	800cda8 <__lshift+0x38>
 800cd90:	4638      	mov	r0, r7
 800cd92:	f7ff fd95 	bl	800c8c0 <_Balloc>
 800cd96:	4605      	mov	r5, r0
 800cd98:	b948      	cbnz	r0, 800cdae <__lshift+0x3e>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	4b28      	ldr	r3, [pc, #160]	@ (800ce40 <__lshift+0xd0>)
 800cd9e:	4829      	ldr	r0, [pc, #164]	@ (800ce44 <__lshift+0xd4>)
 800cda0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cda4:	f001 fcd0 	bl	800e748 <__assert_func>
 800cda8:	3101      	adds	r1, #1
 800cdaa:	005b      	lsls	r3, r3, #1
 800cdac:	e7ee      	b.n	800cd8c <__lshift+0x1c>
 800cdae:	2300      	movs	r3, #0
 800cdb0:	f100 0114 	add.w	r1, r0, #20
 800cdb4:	f100 0210 	add.w	r2, r0, #16
 800cdb8:	4618      	mov	r0, r3
 800cdba:	4553      	cmp	r3, sl
 800cdbc:	db33      	blt.n	800ce26 <__lshift+0xb6>
 800cdbe:	6920      	ldr	r0, [r4, #16]
 800cdc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cdc4:	f104 0314 	add.w	r3, r4, #20
 800cdc8:	f019 091f 	ands.w	r9, r9, #31
 800cdcc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cdd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cdd4:	d02b      	beq.n	800ce2e <__lshift+0xbe>
 800cdd6:	f1c9 0e20 	rsb	lr, r9, #32
 800cdda:	468a      	mov	sl, r1
 800cddc:	2200      	movs	r2, #0
 800cdde:	6818      	ldr	r0, [r3, #0]
 800cde0:	fa00 f009 	lsl.w	r0, r0, r9
 800cde4:	4310      	orrs	r0, r2
 800cde6:	f84a 0b04 	str.w	r0, [sl], #4
 800cdea:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdee:	459c      	cmp	ip, r3
 800cdf0:	fa22 f20e 	lsr.w	r2, r2, lr
 800cdf4:	d8f3      	bhi.n	800cdde <__lshift+0x6e>
 800cdf6:	ebac 0304 	sub.w	r3, ip, r4
 800cdfa:	3b15      	subs	r3, #21
 800cdfc:	f023 0303 	bic.w	r3, r3, #3
 800ce00:	3304      	adds	r3, #4
 800ce02:	f104 0015 	add.w	r0, r4, #21
 800ce06:	4584      	cmp	ip, r0
 800ce08:	bf38      	it	cc
 800ce0a:	2304      	movcc	r3, #4
 800ce0c:	50ca      	str	r2, [r1, r3]
 800ce0e:	b10a      	cbz	r2, 800ce14 <__lshift+0xa4>
 800ce10:	f108 0602 	add.w	r6, r8, #2
 800ce14:	3e01      	subs	r6, #1
 800ce16:	4638      	mov	r0, r7
 800ce18:	612e      	str	r6, [r5, #16]
 800ce1a:	4621      	mov	r1, r4
 800ce1c:	f7ff fd90 	bl	800c940 <_Bfree>
 800ce20:	4628      	mov	r0, r5
 800ce22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce26:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	e7c5      	b.n	800cdba <__lshift+0x4a>
 800ce2e:	3904      	subs	r1, #4
 800ce30:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce34:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce38:	459c      	cmp	ip, r3
 800ce3a:	d8f9      	bhi.n	800ce30 <__lshift+0xc0>
 800ce3c:	e7ea      	b.n	800ce14 <__lshift+0xa4>
 800ce3e:	bf00      	nop
 800ce40:	0800f751 	.word	0x0800f751
 800ce44:	0800f762 	.word	0x0800f762

0800ce48 <__mcmp>:
 800ce48:	690a      	ldr	r2, [r1, #16]
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	6900      	ldr	r0, [r0, #16]
 800ce4e:	1a80      	subs	r0, r0, r2
 800ce50:	b530      	push	{r4, r5, lr}
 800ce52:	d10e      	bne.n	800ce72 <__mcmp+0x2a>
 800ce54:	3314      	adds	r3, #20
 800ce56:	3114      	adds	r1, #20
 800ce58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ce5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ce60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ce64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ce68:	4295      	cmp	r5, r2
 800ce6a:	d003      	beq.n	800ce74 <__mcmp+0x2c>
 800ce6c:	d205      	bcs.n	800ce7a <__mcmp+0x32>
 800ce6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ce72:	bd30      	pop	{r4, r5, pc}
 800ce74:	42a3      	cmp	r3, r4
 800ce76:	d3f3      	bcc.n	800ce60 <__mcmp+0x18>
 800ce78:	e7fb      	b.n	800ce72 <__mcmp+0x2a>
 800ce7a:	2001      	movs	r0, #1
 800ce7c:	e7f9      	b.n	800ce72 <__mcmp+0x2a>
	...

0800ce80 <__mdiff>:
 800ce80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce84:	4689      	mov	r9, r1
 800ce86:	4606      	mov	r6, r0
 800ce88:	4611      	mov	r1, r2
 800ce8a:	4648      	mov	r0, r9
 800ce8c:	4614      	mov	r4, r2
 800ce8e:	f7ff ffdb 	bl	800ce48 <__mcmp>
 800ce92:	1e05      	subs	r5, r0, #0
 800ce94:	d112      	bne.n	800cebc <__mdiff+0x3c>
 800ce96:	4629      	mov	r1, r5
 800ce98:	4630      	mov	r0, r6
 800ce9a:	f7ff fd11 	bl	800c8c0 <_Balloc>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	b928      	cbnz	r0, 800ceae <__mdiff+0x2e>
 800cea2:	4b3f      	ldr	r3, [pc, #252]	@ (800cfa0 <__mdiff+0x120>)
 800cea4:	f240 2137 	movw	r1, #567	@ 0x237
 800cea8:	483e      	ldr	r0, [pc, #248]	@ (800cfa4 <__mdiff+0x124>)
 800ceaa:	f001 fc4d 	bl	800e748 <__assert_func>
 800ceae:	2301      	movs	r3, #1
 800ceb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ceb4:	4610      	mov	r0, r2
 800ceb6:	b003      	add	sp, #12
 800ceb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cebc:	bfbc      	itt	lt
 800cebe:	464b      	movlt	r3, r9
 800cec0:	46a1      	movlt	r9, r4
 800cec2:	4630      	mov	r0, r6
 800cec4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cec8:	bfba      	itte	lt
 800ceca:	461c      	movlt	r4, r3
 800cecc:	2501      	movlt	r5, #1
 800cece:	2500      	movge	r5, #0
 800ced0:	f7ff fcf6 	bl	800c8c0 <_Balloc>
 800ced4:	4602      	mov	r2, r0
 800ced6:	b918      	cbnz	r0, 800cee0 <__mdiff+0x60>
 800ced8:	4b31      	ldr	r3, [pc, #196]	@ (800cfa0 <__mdiff+0x120>)
 800ceda:	f240 2145 	movw	r1, #581	@ 0x245
 800cede:	e7e3      	b.n	800cea8 <__mdiff+0x28>
 800cee0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cee4:	6926      	ldr	r6, [r4, #16]
 800cee6:	60c5      	str	r5, [r0, #12]
 800cee8:	f109 0310 	add.w	r3, r9, #16
 800ceec:	f109 0514 	add.w	r5, r9, #20
 800cef0:	f104 0e14 	add.w	lr, r4, #20
 800cef4:	f100 0b14 	add.w	fp, r0, #20
 800cef8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cefc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cf00:	9301      	str	r3, [sp, #4]
 800cf02:	46d9      	mov	r9, fp
 800cf04:	f04f 0c00 	mov.w	ip, #0
 800cf08:	9b01      	ldr	r3, [sp, #4]
 800cf0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cf0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cf12:	9301      	str	r3, [sp, #4]
 800cf14:	fa1f f38a 	uxth.w	r3, sl
 800cf18:	4619      	mov	r1, r3
 800cf1a:	b283      	uxth	r3, r0
 800cf1c:	1acb      	subs	r3, r1, r3
 800cf1e:	0c00      	lsrs	r0, r0, #16
 800cf20:	4463      	add	r3, ip
 800cf22:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cf26:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cf30:	4576      	cmp	r6, lr
 800cf32:	f849 3b04 	str.w	r3, [r9], #4
 800cf36:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cf3a:	d8e5      	bhi.n	800cf08 <__mdiff+0x88>
 800cf3c:	1b33      	subs	r3, r6, r4
 800cf3e:	3b15      	subs	r3, #21
 800cf40:	f023 0303 	bic.w	r3, r3, #3
 800cf44:	3415      	adds	r4, #21
 800cf46:	3304      	adds	r3, #4
 800cf48:	42a6      	cmp	r6, r4
 800cf4a:	bf38      	it	cc
 800cf4c:	2304      	movcc	r3, #4
 800cf4e:	441d      	add	r5, r3
 800cf50:	445b      	add	r3, fp
 800cf52:	461e      	mov	r6, r3
 800cf54:	462c      	mov	r4, r5
 800cf56:	4544      	cmp	r4, r8
 800cf58:	d30e      	bcc.n	800cf78 <__mdiff+0xf8>
 800cf5a:	f108 0103 	add.w	r1, r8, #3
 800cf5e:	1b49      	subs	r1, r1, r5
 800cf60:	f021 0103 	bic.w	r1, r1, #3
 800cf64:	3d03      	subs	r5, #3
 800cf66:	45a8      	cmp	r8, r5
 800cf68:	bf38      	it	cc
 800cf6a:	2100      	movcc	r1, #0
 800cf6c:	440b      	add	r3, r1
 800cf6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cf72:	b191      	cbz	r1, 800cf9a <__mdiff+0x11a>
 800cf74:	6117      	str	r7, [r2, #16]
 800cf76:	e79d      	b.n	800ceb4 <__mdiff+0x34>
 800cf78:	f854 1b04 	ldr.w	r1, [r4], #4
 800cf7c:	46e6      	mov	lr, ip
 800cf7e:	0c08      	lsrs	r0, r1, #16
 800cf80:	fa1c fc81 	uxtah	ip, ip, r1
 800cf84:	4471      	add	r1, lr
 800cf86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cf8a:	b289      	uxth	r1, r1
 800cf8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cf90:	f846 1b04 	str.w	r1, [r6], #4
 800cf94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cf98:	e7dd      	b.n	800cf56 <__mdiff+0xd6>
 800cf9a:	3f01      	subs	r7, #1
 800cf9c:	e7e7      	b.n	800cf6e <__mdiff+0xee>
 800cf9e:	bf00      	nop
 800cfa0:	0800f751 	.word	0x0800f751
 800cfa4:	0800f762 	.word	0x0800f762

0800cfa8 <__ulp>:
 800cfa8:	b082      	sub	sp, #8
 800cfaa:	ed8d 0b00 	vstr	d0, [sp]
 800cfae:	9a01      	ldr	r2, [sp, #4]
 800cfb0:	4b0f      	ldr	r3, [pc, #60]	@ (800cff0 <__ulp+0x48>)
 800cfb2:	4013      	ands	r3, r2
 800cfb4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	dc08      	bgt.n	800cfce <__ulp+0x26>
 800cfbc:	425b      	negs	r3, r3
 800cfbe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cfc2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cfc6:	da04      	bge.n	800cfd2 <__ulp+0x2a>
 800cfc8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cfcc:	4113      	asrs	r3, r2
 800cfce:	2200      	movs	r2, #0
 800cfd0:	e008      	b.n	800cfe4 <__ulp+0x3c>
 800cfd2:	f1a2 0314 	sub.w	r3, r2, #20
 800cfd6:	2b1e      	cmp	r3, #30
 800cfd8:	bfda      	itte	le
 800cfda:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cfde:	40da      	lsrle	r2, r3
 800cfe0:	2201      	movgt	r2, #1
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	4610      	mov	r0, r2
 800cfe8:	ec41 0b10 	vmov	d0, r0, r1
 800cfec:	b002      	add	sp, #8
 800cfee:	4770      	bx	lr
 800cff0:	7ff00000 	.word	0x7ff00000

0800cff4 <__b2d>:
 800cff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cff8:	6906      	ldr	r6, [r0, #16]
 800cffa:	f100 0814 	add.w	r8, r0, #20
 800cffe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d002:	1f37      	subs	r7, r6, #4
 800d004:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d008:	4610      	mov	r0, r2
 800d00a:	f7ff fd4b 	bl	800caa4 <__hi0bits>
 800d00e:	f1c0 0320 	rsb	r3, r0, #32
 800d012:	280a      	cmp	r0, #10
 800d014:	600b      	str	r3, [r1, #0]
 800d016:	491b      	ldr	r1, [pc, #108]	@ (800d084 <__b2d+0x90>)
 800d018:	dc15      	bgt.n	800d046 <__b2d+0x52>
 800d01a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d01e:	fa22 f30c 	lsr.w	r3, r2, ip
 800d022:	45b8      	cmp	r8, r7
 800d024:	ea43 0501 	orr.w	r5, r3, r1
 800d028:	bf34      	ite	cc
 800d02a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d02e:	2300      	movcs	r3, #0
 800d030:	3015      	adds	r0, #21
 800d032:	fa02 f000 	lsl.w	r0, r2, r0
 800d036:	fa23 f30c 	lsr.w	r3, r3, ip
 800d03a:	4303      	orrs	r3, r0
 800d03c:	461c      	mov	r4, r3
 800d03e:	ec45 4b10 	vmov	d0, r4, r5
 800d042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d046:	45b8      	cmp	r8, r7
 800d048:	bf3a      	itte	cc
 800d04a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d04e:	f1a6 0708 	subcc.w	r7, r6, #8
 800d052:	2300      	movcs	r3, #0
 800d054:	380b      	subs	r0, #11
 800d056:	d012      	beq.n	800d07e <__b2d+0x8a>
 800d058:	f1c0 0120 	rsb	r1, r0, #32
 800d05c:	fa23 f401 	lsr.w	r4, r3, r1
 800d060:	4082      	lsls	r2, r0
 800d062:	4322      	orrs	r2, r4
 800d064:	4547      	cmp	r7, r8
 800d066:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d06a:	bf8c      	ite	hi
 800d06c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d070:	2200      	movls	r2, #0
 800d072:	4083      	lsls	r3, r0
 800d074:	40ca      	lsrs	r2, r1
 800d076:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d07a:	4313      	orrs	r3, r2
 800d07c:	e7de      	b.n	800d03c <__b2d+0x48>
 800d07e:	ea42 0501 	orr.w	r5, r2, r1
 800d082:	e7db      	b.n	800d03c <__b2d+0x48>
 800d084:	3ff00000 	.word	0x3ff00000

0800d088 <__d2b>:
 800d088:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d08c:	460f      	mov	r7, r1
 800d08e:	2101      	movs	r1, #1
 800d090:	ec59 8b10 	vmov	r8, r9, d0
 800d094:	4616      	mov	r6, r2
 800d096:	f7ff fc13 	bl	800c8c0 <_Balloc>
 800d09a:	4604      	mov	r4, r0
 800d09c:	b930      	cbnz	r0, 800d0ac <__d2b+0x24>
 800d09e:	4602      	mov	r2, r0
 800d0a0:	4b23      	ldr	r3, [pc, #140]	@ (800d130 <__d2b+0xa8>)
 800d0a2:	4824      	ldr	r0, [pc, #144]	@ (800d134 <__d2b+0xac>)
 800d0a4:	f240 310f 	movw	r1, #783	@ 0x30f
 800d0a8:	f001 fb4e 	bl	800e748 <__assert_func>
 800d0ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d0b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d0b4:	b10d      	cbz	r5, 800d0ba <__d2b+0x32>
 800d0b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d0ba:	9301      	str	r3, [sp, #4]
 800d0bc:	f1b8 0300 	subs.w	r3, r8, #0
 800d0c0:	d023      	beq.n	800d10a <__d2b+0x82>
 800d0c2:	4668      	mov	r0, sp
 800d0c4:	9300      	str	r3, [sp, #0]
 800d0c6:	f7ff fd0c 	bl	800cae2 <__lo0bits>
 800d0ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d0ce:	b1d0      	cbz	r0, 800d106 <__d2b+0x7e>
 800d0d0:	f1c0 0320 	rsb	r3, r0, #32
 800d0d4:	fa02 f303 	lsl.w	r3, r2, r3
 800d0d8:	430b      	orrs	r3, r1
 800d0da:	40c2      	lsrs	r2, r0
 800d0dc:	6163      	str	r3, [r4, #20]
 800d0de:	9201      	str	r2, [sp, #4]
 800d0e0:	9b01      	ldr	r3, [sp, #4]
 800d0e2:	61a3      	str	r3, [r4, #24]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	bf0c      	ite	eq
 800d0e8:	2201      	moveq	r2, #1
 800d0ea:	2202      	movne	r2, #2
 800d0ec:	6122      	str	r2, [r4, #16]
 800d0ee:	b1a5      	cbz	r5, 800d11a <__d2b+0x92>
 800d0f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d0f4:	4405      	add	r5, r0
 800d0f6:	603d      	str	r5, [r7, #0]
 800d0f8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d0fc:	6030      	str	r0, [r6, #0]
 800d0fe:	4620      	mov	r0, r4
 800d100:	b003      	add	sp, #12
 800d102:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d106:	6161      	str	r1, [r4, #20]
 800d108:	e7ea      	b.n	800d0e0 <__d2b+0x58>
 800d10a:	a801      	add	r0, sp, #4
 800d10c:	f7ff fce9 	bl	800cae2 <__lo0bits>
 800d110:	9b01      	ldr	r3, [sp, #4]
 800d112:	6163      	str	r3, [r4, #20]
 800d114:	3020      	adds	r0, #32
 800d116:	2201      	movs	r2, #1
 800d118:	e7e8      	b.n	800d0ec <__d2b+0x64>
 800d11a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d11e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d122:	6038      	str	r0, [r7, #0]
 800d124:	6918      	ldr	r0, [r3, #16]
 800d126:	f7ff fcbd 	bl	800caa4 <__hi0bits>
 800d12a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d12e:	e7e5      	b.n	800d0fc <__d2b+0x74>
 800d130:	0800f751 	.word	0x0800f751
 800d134:	0800f762 	.word	0x0800f762

0800d138 <__ratio>:
 800d138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d13c:	b085      	sub	sp, #20
 800d13e:	e9cd 1000 	strd	r1, r0, [sp]
 800d142:	a902      	add	r1, sp, #8
 800d144:	f7ff ff56 	bl	800cff4 <__b2d>
 800d148:	9800      	ldr	r0, [sp, #0]
 800d14a:	a903      	add	r1, sp, #12
 800d14c:	ec55 4b10 	vmov	r4, r5, d0
 800d150:	f7ff ff50 	bl	800cff4 <__b2d>
 800d154:	9b01      	ldr	r3, [sp, #4]
 800d156:	6919      	ldr	r1, [r3, #16]
 800d158:	9b00      	ldr	r3, [sp, #0]
 800d15a:	691b      	ldr	r3, [r3, #16]
 800d15c:	1ac9      	subs	r1, r1, r3
 800d15e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d162:	1a9b      	subs	r3, r3, r2
 800d164:	ec5b ab10 	vmov	sl, fp, d0
 800d168:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	bfce      	itee	gt
 800d170:	462a      	movgt	r2, r5
 800d172:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d176:	465a      	movle	r2, fp
 800d178:	462f      	mov	r7, r5
 800d17a:	46d9      	mov	r9, fp
 800d17c:	bfcc      	ite	gt
 800d17e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d182:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d186:	464b      	mov	r3, r9
 800d188:	4652      	mov	r2, sl
 800d18a:	4620      	mov	r0, r4
 800d18c:	4639      	mov	r1, r7
 800d18e:	f7f3 fb85 	bl	800089c <__aeabi_ddiv>
 800d192:	ec41 0b10 	vmov	d0, r0, r1
 800d196:	b005      	add	sp, #20
 800d198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d19c <__copybits>:
 800d19c:	3901      	subs	r1, #1
 800d19e:	b570      	push	{r4, r5, r6, lr}
 800d1a0:	1149      	asrs	r1, r1, #5
 800d1a2:	6914      	ldr	r4, [r2, #16]
 800d1a4:	3101      	adds	r1, #1
 800d1a6:	f102 0314 	add.w	r3, r2, #20
 800d1aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d1ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d1b2:	1f05      	subs	r5, r0, #4
 800d1b4:	42a3      	cmp	r3, r4
 800d1b6:	d30c      	bcc.n	800d1d2 <__copybits+0x36>
 800d1b8:	1aa3      	subs	r3, r4, r2
 800d1ba:	3b11      	subs	r3, #17
 800d1bc:	f023 0303 	bic.w	r3, r3, #3
 800d1c0:	3211      	adds	r2, #17
 800d1c2:	42a2      	cmp	r2, r4
 800d1c4:	bf88      	it	hi
 800d1c6:	2300      	movhi	r3, #0
 800d1c8:	4418      	add	r0, r3
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	4288      	cmp	r0, r1
 800d1ce:	d305      	bcc.n	800d1dc <__copybits+0x40>
 800d1d0:	bd70      	pop	{r4, r5, r6, pc}
 800d1d2:	f853 6b04 	ldr.w	r6, [r3], #4
 800d1d6:	f845 6f04 	str.w	r6, [r5, #4]!
 800d1da:	e7eb      	b.n	800d1b4 <__copybits+0x18>
 800d1dc:	f840 3b04 	str.w	r3, [r0], #4
 800d1e0:	e7f4      	b.n	800d1cc <__copybits+0x30>

0800d1e2 <__any_on>:
 800d1e2:	f100 0214 	add.w	r2, r0, #20
 800d1e6:	6900      	ldr	r0, [r0, #16]
 800d1e8:	114b      	asrs	r3, r1, #5
 800d1ea:	4298      	cmp	r0, r3
 800d1ec:	b510      	push	{r4, lr}
 800d1ee:	db11      	blt.n	800d214 <__any_on+0x32>
 800d1f0:	dd0a      	ble.n	800d208 <__any_on+0x26>
 800d1f2:	f011 011f 	ands.w	r1, r1, #31
 800d1f6:	d007      	beq.n	800d208 <__any_on+0x26>
 800d1f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d1fc:	fa24 f001 	lsr.w	r0, r4, r1
 800d200:	fa00 f101 	lsl.w	r1, r0, r1
 800d204:	428c      	cmp	r4, r1
 800d206:	d10b      	bne.n	800d220 <__any_on+0x3e>
 800d208:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d803      	bhi.n	800d218 <__any_on+0x36>
 800d210:	2000      	movs	r0, #0
 800d212:	bd10      	pop	{r4, pc}
 800d214:	4603      	mov	r3, r0
 800d216:	e7f7      	b.n	800d208 <__any_on+0x26>
 800d218:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d21c:	2900      	cmp	r1, #0
 800d21e:	d0f5      	beq.n	800d20c <__any_on+0x2a>
 800d220:	2001      	movs	r0, #1
 800d222:	e7f6      	b.n	800d212 <__any_on+0x30>

0800d224 <sulp>:
 800d224:	b570      	push	{r4, r5, r6, lr}
 800d226:	4604      	mov	r4, r0
 800d228:	460d      	mov	r5, r1
 800d22a:	ec45 4b10 	vmov	d0, r4, r5
 800d22e:	4616      	mov	r6, r2
 800d230:	f7ff feba 	bl	800cfa8 <__ulp>
 800d234:	ec51 0b10 	vmov	r0, r1, d0
 800d238:	b17e      	cbz	r6, 800d25a <sulp+0x36>
 800d23a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d23e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d242:	2b00      	cmp	r3, #0
 800d244:	dd09      	ble.n	800d25a <sulp+0x36>
 800d246:	051b      	lsls	r3, r3, #20
 800d248:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d24c:	2400      	movs	r4, #0
 800d24e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d252:	4622      	mov	r2, r4
 800d254:	462b      	mov	r3, r5
 800d256:	f7f3 f9f7 	bl	8000648 <__aeabi_dmul>
 800d25a:	ec41 0b10 	vmov	d0, r0, r1
 800d25e:	bd70      	pop	{r4, r5, r6, pc}

0800d260 <_strtod_l>:
 800d260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d264:	b09f      	sub	sp, #124	@ 0x7c
 800d266:	460c      	mov	r4, r1
 800d268:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d26a:	2200      	movs	r2, #0
 800d26c:	921a      	str	r2, [sp, #104]	@ 0x68
 800d26e:	9005      	str	r0, [sp, #20]
 800d270:	f04f 0a00 	mov.w	sl, #0
 800d274:	f04f 0b00 	mov.w	fp, #0
 800d278:	460a      	mov	r2, r1
 800d27a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d27c:	7811      	ldrb	r1, [r2, #0]
 800d27e:	292b      	cmp	r1, #43	@ 0x2b
 800d280:	d04a      	beq.n	800d318 <_strtod_l+0xb8>
 800d282:	d838      	bhi.n	800d2f6 <_strtod_l+0x96>
 800d284:	290d      	cmp	r1, #13
 800d286:	d832      	bhi.n	800d2ee <_strtod_l+0x8e>
 800d288:	2908      	cmp	r1, #8
 800d28a:	d832      	bhi.n	800d2f2 <_strtod_l+0x92>
 800d28c:	2900      	cmp	r1, #0
 800d28e:	d03b      	beq.n	800d308 <_strtod_l+0xa8>
 800d290:	2200      	movs	r2, #0
 800d292:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d294:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d296:	782a      	ldrb	r2, [r5, #0]
 800d298:	2a30      	cmp	r2, #48	@ 0x30
 800d29a:	f040 80b3 	bne.w	800d404 <_strtod_l+0x1a4>
 800d29e:	786a      	ldrb	r2, [r5, #1]
 800d2a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d2a4:	2a58      	cmp	r2, #88	@ 0x58
 800d2a6:	d16e      	bne.n	800d386 <_strtod_l+0x126>
 800d2a8:	9302      	str	r3, [sp, #8]
 800d2aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2ac:	9301      	str	r3, [sp, #4]
 800d2ae:	ab1a      	add	r3, sp, #104	@ 0x68
 800d2b0:	9300      	str	r3, [sp, #0]
 800d2b2:	4a8e      	ldr	r2, [pc, #568]	@ (800d4ec <_strtod_l+0x28c>)
 800d2b4:	9805      	ldr	r0, [sp, #20]
 800d2b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d2b8:	a919      	add	r1, sp, #100	@ 0x64
 800d2ba:	f001 fadf 	bl	800e87c <__gethex>
 800d2be:	f010 060f 	ands.w	r6, r0, #15
 800d2c2:	4604      	mov	r4, r0
 800d2c4:	d005      	beq.n	800d2d2 <_strtod_l+0x72>
 800d2c6:	2e06      	cmp	r6, #6
 800d2c8:	d128      	bne.n	800d31c <_strtod_l+0xbc>
 800d2ca:	3501      	adds	r5, #1
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	9519      	str	r5, [sp, #100]	@ 0x64
 800d2d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	f040 858e 	bne.w	800ddf6 <_strtod_l+0xb96>
 800d2da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2dc:	b1cb      	cbz	r3, 800d312 <_strtod_l+0xb2>
 800d2de:	4652      	mov	r2, sl
 800d2e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d2e4:	ec43 2b10 	vmov	d0, r2, r3
 800d2e8:	b01f      	add	sp, #124	@ 0x7c
 800d2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ee:	2920      	cmp	r1, #32
 800d2f0:	d1ce      	bne.n	800d290 <_strtod_l+0x30>
 800d2f2:	3201      	adds	r2, #1
 800d2f4:	e7c1      	b.n	800d27a <_strtod_l+0x1a>
 800d2f6:	292d      	cmp	r1, #45	@ 0x2d
 800d2f8:	d1ca      	bne.n	800d290 <_strtod_l+0x30>
 800d2fa:	2101      	movs	r1, #1
 800d2fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d2fe:	1c51      	adds	r1, r2, #1
 800d300:	9119      	str	r1, [sp, #100]	@ 0x64
 800d302:	7852      	ldrb	r2, [r2, #1]
 800d304:	2a00      	cmp	r2, #0
 800d306:	d1c5      	bne.n	800d294 <_strtod_l+0x34>
 800d308:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d30a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f040 8570 	bne.w	800ddf2 <_strtod_l+0xb92>
 800d312:	4652      	mov	r2, sl
 800d314:	465b      	mov	r3, fp
 800d316:	e7e5      	b.n	800d2e4 <_strtod_l+0x84>
 800d318:	2100      	movs	r1, #0
 800d31a:	e7ef      	b.n	800d2fc <_strtod_l+0x9c>
 800d31c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d31e:	b13a      	cbz	r2, 800d330 <_strtod_l+0xd0>
 800d320:	2135      	movs	r1, #53	@ 0x35
 800d322:	a81c      	add	r0, sp, #112	@ 0x70
 800d324:	f7ff ff3a 	bl	800d19c <__copybits>
 800d328:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d32a:	9805      	ldr	r0, [sp, #20]
 800d32c:	f7ff fb08 	bl	800c940 <_Bfree>
 800d330:	3e01      	subs	r6, #1
 800d332:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d334:	2e04      	cmp	r6, #4
 800d336:	d806      	bhi.n	800d346 <_strtod_l+0xe6>
 800d338:	e8df f006 	tbb	[pc, r6]
 800d33c:	201d0314 	.word	0x201d0314
 800d340:	14          	.byte	0x14
 800d341:	00          	.byte	0x00
 800d342:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d346:	05e1      	lsls	r1, r4, #23
 800d348:	bf48      	it	mi
 800d34a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d34e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d352:	0d1b      	lsrs	r3, r3, #20
 800d354:	051b      	lsls	r3, r3, #20
 800d356:	2b00      	cmp	r3, #0
 800d358:	d1bb      	bne.n	800d2d2 <_strtod_l+0x72>
 800d35a:	f7fe fb23 	bl	800b9a4 <__errno>
 800d35e:	2322      	movs	r3, #34	@ 0x22
 800d360:	6003      	str	r3, [r0, #0]
 800d362:	e7b6      	b.n	800d2d2 <_strtod_l+0x72>
 800d364:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d368:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d36c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d370:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d374:	e7e7      	b.n	800d346 <_strtod_l+0xe6>
 800d376:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d4f4 <_strtod_l+0x294>
 800d37a:	e7e4      	b.n	800d346 <_strtod_l+0xe6>
 800d37c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d380:	f04f 3aff 	mov.w	sl, #4294967295
 800d384:	e7df      	b.n	800d346 <_strtod_l+0xe6>
 800d386:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d388:	1c5a      	adds	r2, r3, #1
 800d38a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d38c:	785b      	ldrb	r3, [r3, #1]
 800d38e:	2b30      	cmp	r3, #48	@ 0x30
 800d390:	d0f9      	beq.n	800d386 <_strtod_l+0x126>
 800d392:	2b00      	cmp	r3, #0
 800d394:	d09d      	beq.n	800d2d2 <_strtod_l+0x72>
 800d396:	2301      	movs	r3, #1
 800d398:	9309      	str	r3, [sp, #36]	@ 0x24
 800d39a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d39c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d39e:	2300      	movs	r3, #0
 800d3a0:	9308      	str	r3, [sp, #32]
 800d3a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3a4:	461f      	mov	r7, r3
 800d3a6:	220a      	movs	r2, #10
 800d3a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d3aa:	7805      	ldrb	r5, [r0, #0]
 800d3ac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d3b0:	b2d9      	uxtb	r1, r3
 800d3b2:	2909      	cmp	r1, #9
 800d3b4:	d928      	bls.n	800d408 <_strtod_l+0x1a8>
 800d3b6:	494e      	ldr	r1, [pc, #312]	@ (800d4f0 <_strtod_l+0x290>)
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	f001 f979 	bl	800e6b0 <strncmp>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	d032      	beq.n	800d428 <_strtod_l+0x1c8>
 800d3c2:	2000      	movs	r0, #0
 800d3c4:	462a      	mov	r2, r5
 800d3c6:	4681      	mov	r9, r0
 800d3c8:	463d      	mov	r5, r7
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	2a65      	cmp	r2, #101	@ 0x65
 800d3ce:	d001      	beq.n	800d3d4 <_strtod_l+0x174>
 800d3d0:	2a45      	cmp	r2, #69	@ 0x45
 800d3d2:	d114      	bne.n	800d3fe <_strtod_l+0x19e>
 800d3d4:	b91d      	cbnz	r5, 800d3de <_strtod_l+0x17e>
 800d3d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3d8:	4302      	orrs	r2, r0
 800d3da:	d095      	beq.n	800d308 <_strtod_l+0xa8>
 800d3dc:	2500      	movs	r5, #0
 800d3de:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d3e0:	1c62      	adds	r2, r4, #1
 800d3e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d3e4:	7862      	ldrb	r2, [r4, #1]
 800d3e6:	2a2b      	cmp	r2, #43	@ 0x2b
 800d3e8:	d077      	beq.n	800d4da <_strtod_l+0x27a>
 800d3ea:	2a2d      	cmp	r2, #45	@ 0x2d
 800d3ec:	d07b      	beq.n	800d4e6 <_strtod_l+0x286>
 800d3ee:	f04f 0c00 	mov.w	ip, #0
 800d3f2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d3f6:	2909      	cmp	r1, #9
 800d3f8:	f240 8082 	bls.w	800d500 <_strtod_l+0x2a0>
 800d3fc:	9419      	str	r4, [sp, #100]	@ 0x64
 800d3fe:	f04f 0800 	mov.w	r8, #0
 800d402:	e0a2      	b.n	800d54a <_strtod_l+0x2ea>
 800d404:	2300      	movs	r3, #0
 800d406:	e7c7      	b.n	800d398 <_strtod_l+0x138>
 800d408:	2f08      	cmp	r7, #8
 800d40a:	bfd5      	itete	le
 800d40c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d40e:	9908      	ldrgt	r1, [sp, #32]
 800d410:	fb02 3301 	mlale	r3, r2, r1, r3
 800d414:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d418:	f100 0001 	add.w	r0, r0, #1
 800d41c:	bfd4      	ite	le
 800d41e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d420:	9308      	strgt	r3, [sp, #32]
 800d422:	3701      	adds	r7, #1
 800d424:	9019      	str	r0, [sp, #100]	@ 0x64
 800d426:	e7bf      	b.n	800d3a8 <_strtod_l+0x148>
 800d428:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d42a:	1c5a      	adds	r2, r3, #1
 800d42c:	9219      	str	r2, [sp, #100]	@ 0x64
 800d42e:	785a      	ldrb	r2, [r3, #1]
 800d430:	b37f      	cbz	r7, 800d492 <_strtod_l+0x232>
 800d432:	4681      	mov	r9, r0
 800d434:	463d      	mov	r5, r7
 800d436:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d43a:	2b09      	cmp	r3, #9
 800d43c:	d912      	bls.n	800d464 <_strtod_l+0x204>
 800d43e:	2301      	movs	r3, #1
 800d440:	e7c4      	b.n	800d3cc <_strtod_l+0x16c>
 800d442:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d444:	1c5a      	adds	r2, r3, #1
 800d446:	9219      	str	r2, [sp, #100]	@ 0x64
 800d448:	785a      	ldrb	r2, [r3, #1]
 800d44a:	3001      	adds	r0, #1
 800d44c:	2a30      	cmp	r2, #48	@ 0x30
 800d44e:	d0f8      	beq.n	800d442 <_strtod_l+0x1e2>
 800d450:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d454:	2b08      	cmp	r3, #8
 800d456:	f200 84d3 	bhi.w	800de00 <_strtod_l+0xba0>
 800d45a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d45c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d45e:	4681      	mov	r9, r0
 800d460:	2000      	movs	r0, #0
 800d462:	4605      	mov	r5, r0
 800d464:	3a30      	subs	r2, #48	@ 0x30
 800d466:	f100 0301 	add.w	r3, r0, #1
 800d46a:	d02a      	beq.n	800d4c2 <_strtod_l+0x262>
 800d46c:	4499      	add	r9, r3
 800d46e:	eb00 0c05 	add.w	ip, r0, r5
 800d472:	462b      	mov	r3, r5
 800d474:	210a      	movs	r1, #10
 800d476:	4563      	cmp	r3, ip
 800d478:	d10d      	bne.n	800d496 <_strtod_l+0x236>
 800d47a:	1c69      	adds	r1, r5, #1
 800d47c:	4401      	add	r1, r0
 800d47e:	4428      	add	r0, r5
 800d480:	2808      	cmp	r0, #8
 800d482:	dc16      	bgt.n	800d4b2 <_strtod_l+0x252>
 800d484:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d486:	230a      	movs	r3, #10
 800d488:	fb03 2300 	mla	r3, r3, r0, r2
 800d48c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d48e:	2300      	movs	r3, #0
 800d490:	e018      	b.n	800d4c4 <_strtod_l+0x264>
 800d492:	4638      	mov	r0, r7
 800d494:	e7da      	b.n	800d44c <_strtod_l+0x1ec>
 800d496:	2b08      	cmp	r3, #8
 800d498:	f103 0301 	add.w	r3, r3, #1
 800d49c:	dc03      	bgt.n	800d4a6 <_strtod_l+0x246>
 800d49e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d4a0:	434e      	muls	r6, r1
 800d4a2:	960a      	str	r6, [sp, #40]	@ 0x28
 800d4a4:	e7e7      	b.n	800d476 <_strtod_l+0x216>
 800d4a6:	2b10      	cmp	r3, #16
 800d4a8:	bfde      	ittt	le
 800d4aa:	9e08      	ldrle	r6, [sp, #32]
 800d4ac:	434e      	mulle	r6, r1
 800d4ae:	9608      	strle	r6, [sp, #32]
 800d4b0:	e7e1      	b.n	800d476 <_strtod_l+0x216>
 800d4b2:	280f      	cmp	r0, #15
 800d4b4:	dceb      	bgt.n	800d48e <_strtod_l+0x22e>
 800d4b6:	9808      	ldr	r0, [sp, #32]
 800d4b8:	230a      	movs	r3, #10
 800d4ba:	fb03 2300 	mla	r3, r3, r0, r2
 800d4be:	9308      	str	r3, [sp, #32]
 800d4c0:	e7e5      	b.n	800d48e <_strtod_l+0x22e>
 800d4c2:	4629      	mov	r1, r5
 800d4c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d4c6:	1c50      	adds	r0, r2, #1
 800d4c8:	9019      	str	r0, [sp, #100]	@ 0x64
 800d4ca:	7852      	ldrb	r2, [r2, #1]
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	460d      	mov	r5, r1
 800d4d0:	e7b1      	b.n	800d436 <_strtod_l+0x1d6>
 800d4d2:	f04f 0900 	mov.w	r9, #0
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e77d      	b.n	800d3d6 <_strtod_l+0x176>
 800d4da:	f04f 0c00 	mov.w	ip, #0
 800d4de:	1ca2      	adds	r2, r4, #2
 800d4e0:	9219      	str	r2, [sp, #100]	@ 0x64
 800d4e2:	78a2      	ldrb	r2, [r4, #2]
 800d4e4:	e785      	b.n	800d3f2 <_strtod_l+0x192>
 800d4e6:	f04f 0c01 	mov.w	ip, #1
 800d4ea:	e7f8      	b.n	800d4de <_strtod_l+0x27e>
 800d4ec:	0800f8d0 	.word	0x0800f8d0
 800d4f0:	0800f8b8 	.word	0x0800f8b8
 800d4f4:	7ff00000 	.word	0x7ff00000
 800d4f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d4fa:	1c51      	adds	r1, r2, #1
 800d4fc:	9119      	str	r1, [sp, #100]	@ 0x64
 800d4fe:	7852      	ldrb	r2, [r2, #1]
 800d500:	2a30      	cmp	r2, #48	@ 0x30
 800d502:	d0f9      	beq.n	800d4f8 <_strtod_l+0x298>
 800d504:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d508:	2908      	cmp	r1, #8
 800d50a:	f63f af78 	bhi.w	800d3fe <_strtod_l+0x19e>
 800d50e:	3a30      	subs	r2, #48	@ 0x30
 800d510:	920e      	str	r2, [sp, #56]	@ 0x38
 800d512:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d514:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d516:	f04f 080a 	mov.w	r8, #10
 800d51a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d51c:	1c56      	adds	r6, r2, #1
 800d51e:	9619      	str	r6, [sp, #100]	@ 0x64
 800d520:	7852      	ldrb	r2, [r2, #1]
 800d522:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d526:	f1be 0f09 	cmp.w	lr, #9
 800d52a:	d939      	bls.n	800d5a0 <_strtod_l+0x340>
 800d52c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d52e:	1a76      	subs	r6, r6, r1
 800d530:	2e08      	cmp	r6, #8
 800d532:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d536:	dc03      	bgt.n	800d540 <_strtod_l+0x2e0>
 800d538:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d53a:	4588      	cmp	r8, r1
 800d53c:	bfa8      	it	ge
 800d53e:	4688      	movge	r8, r1
 800d540:	f1bc 0f00 	cmp.w	ip, #0
 800d544:	d001      	beq.n	800d54a <_strtod_l+0x2ea>
 800d546:	f1c8 0800 	rsb	r8, r8, #0
 800d54a:	2d00      	cmp	r5, #0
 800d54c:	d14e      	bne.n	800d5ec <_strtod_l+0x38c>
 800d54e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d550:	4308      	orrs	r0, r1
 800d552:	f47f aebe 	bne.w	800d2d2 <_strtod_l+0x72>
 800d556:	2b00      	cmp	r3, #0
 800d558:	f47f aed6 	bne.w	800d308 <_strtod_l+0xa8>
 800d55c:	2a69      	cmp	r2, #105	@ 0x69
 800d55e:	d028      	beq.n	800d5b2 <_strtod_l+0x352>
 800d560:	dc25      	bgt.n	800d5ae <_strtod_l+0x34e>
 800d562:	2a49      	cmp	r2, #73	@ 0x49
 800d564:	d025      	beq.n	800d5b2 <_strtod_l+0x352>
 800d566:	2a4e      	cmp	r2, #78	@ 0x4e
 800d568:	f47f aece 	bne.w	800d308 <_strtod_l+0xa8>
 800d56c:	499b      	ldr	r1, [pc, #620]	@ (800d7dc <_strtod_l+0x57c>)
 800d56e:	a819      	add	r0, sp, #100	@ 0x64
 800d570:	f001 fba6 	bl	800ecc0 <__match>
 800d574:	2800      	cmp	r0, #0
 800d576:	f43f aec7 	beq.w	800d308 <_strtod_l+0xa8>
 800d57a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	2b28      	cmp	r3, #40	@ 0x28
 800d580:	d12e      	bne.n	800d5e0 <_strtod_l+0x380>
 800d582:	4997      	ldr	r1, [pc, #604]	@ (800d7e0 <_strtod_l+0x580>)
 800d584:	aa1c      	add	r2, sp, #112	@ 0x70
 800d586:	a819      	add	r0, sp, #100	@ 0x64
 800d588:	f001 fbae 	bl	800ece8 <__hexnan>
 800d58c:	2805      	cmp	r0, #5
 800d58e:	d127      	bne.n	800d5e0 <_strtod_l+0x380>
 800d590:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d592:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d596:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d59a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d59e:	e698      	b.n	800d2d2 <_strtod_l+0x72>
 800d5a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d5a2:	fb08 2101 	mla	r1, r8, r1, r2
 800d5a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d5aa:	920e      	str	r2, [sp, #56]	@ 0x38
 800d5ac:	e7b5      	b.n	800d51a <_strtod_l+0x2ba>
 800d5ae:	2a6e      	cmp	r2, #110	@ 0x6e
 800d5b0:	e7da      	b.n	800d568 <_strtod_l+0x308>
 800d5b2:	498c      	ldr	r1, [pc, #560]	@ (800d7e4 <_strtod_l+0x584>)
 800d5b4:	a819      	add	r0, sp, #100	@ 0x64
 800d5b6:	f001 fb83 	bl	800ecc0 <__match>
 800d5ba:	2800      	cmp	r0, #0
 800d5bc:	f43f aea4 	beq.w	800d308 <_strtod_l+0xa8>
 800d5c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5c2:	4989      	ldr	r1, [pc, #548]	@ (800d7e8 <_strtod_l+0x588>)
 800d5c4:	3b01      	subs	r3, #1
 800d5c6:	a819      	add	r0, sp, #100	@ 0x64
 800d5c8:	9319      	str	r3, [sp, #100]	@ 0x64
 800d5ca:	f001 fb79 	bl	800ecc0 <__match>
 800d5ce:	b910      	cbnz	r0, 800d5d6 <_strtod_l+0x376>
 800d5d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800d5d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d7f8 <_strtod_l+0x598>
 800d5da:	f04f 0a00 	mov.w	sl, #0
 800d5de:	e678      	b.n	800d2d2 <_strtod_l+0x72>
 800d5e0:	4882      	ldr	r0, [pc, #520]	@ (800d7ec <_strtod_l+0x58c>)
 800d5e2:	f001 f8a9 	bl	800e738 <nan>
 800d5e6:	ec5b ab10 	vmov	sl, fp, d0
 800d5ea:	e672      	b.n	800d2d2 <_strtod_l+0x72>
 800d5ec:	eba8 0309 	sub.w	r3, r8, r9
 800d5f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d5f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5f4:	2f00      	cmp	r7, #0
 800d5f6:	bf08      	it	eq
 800d5f8:	462f      	moveq	r7, r5
 800d5fa:	2d10      	cmp	r5, #16
 800d5fc:	462c      	mov	r4, r5
 800d5fe:	bfa8      	it	ge
 800d600:	2410      	movge	r4, #16
 800d602:	f7f2 ffa7 	bl	8000554 <__aeabi_ui2d>
 800d606:	2d09      	cmp	r5, #9
 800d608:	4682      	mov	sl, r0
 800d60a:	468b      	mov	fp, r1
 800d60c:	dc13      	bgt.n	800d636 <_strtod_l+0x3d6>
 800d60e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d610:	2b00      	cmp	r3, #0
 800d612:	f43f ae5e 	beq.w	800d2d2 <_strtod_l+0x72>
 800d616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d618:	dd78      	ble.n	800d70c <_strtod_l+0x4ac>
 800d61a:	2b16      	cmp	r3, #22
 800d61c:	dc5f      	bgt.n	800d6de <_strtod_l+0x47e>
 800d61e:	4974      	ldr	r1, [pc, #464]	@ (800d7f0 <_strtod_l+0x590>)
 800d620:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d624:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d628:	4652      	mov	r2, sl
 800d62a:	465b      	mov	r3, fp
 800d62c:	f7f3 f80c 	bl	8000648 <__aeabi_dmul>
 800d630:	4682      	mov	sl, r0
 800d632:	468b      	mov	fp, r1
 800d634:	e64d      	b.n	800d2d2 <_strtod_l+0x72>
 800d636:	4b6e      	ldr	r3, [pc, #440]	@ (800d7f0 <_strtod_l+0x590>)
 800d638:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d63c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d640:	f7f3 f802 	bl	8000648 <__aeabi_dmul>
 800d644:	4682      	mov	sl, r0
 800d646:	9808      	ldr	r0, [sp, #32]
 800d648:	468b      	mov	fp, r1
 800d64a:	f7f2 ff83 	bl	8000554 <__aeabi_ui2d>
 800d64e:	4602      	mov	r2, r0
 800d650:	460b      	mov	r3, r1
 800d652:	4650      	mov	r0, sl
 800d654:	4659      	mov	r1, fp
 800d656:	f7f2 fe41 	bl	80002dc <__adddf3>
 800d65a:	2d0f      	cmp	r5, #15
 800d65c:	4682      	mov	sl, r0
 800d65e:	468b      	mov	fp, r1
 800d660:	ddd5      	ble.n	800d60e <_strtod_l+0x3ae>
 800d662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d664:	1b2c      	subs	r4, r5, r4
 800d666:	441c      	add	r4, r3
 800d668:	2c00      	cmp	r4, #0
 800d66a:	f340 8096 	ble.w	800d79a <_strtod_l+0x53a>
 800d66e:	f014 030f 	ands.w	r3, r4, #15
 800d672:	d00a      	beq.n	800d68a <_strtod_l+0x42a>
 800d674:	495e      	ldr	r1, [pc, #376]	@ (800d7f0 <_strtod_l+0x590>)
 800d676:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d67a:	4652      	mov	r2, sl
 800d67c:	465b      	mov	r3, fp
 800d67e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d682:	f7f2 ffe1 	bl	8000648 <__aeabi_dmul>
 800d686:	4682      	mov	sl, r0
 800d688:	468b      	mov	fp, r1
 800d68a:	f034 040f 	bics.w	r4, r4, #15
 800d68e:	d073      	beq.n	800d778 <_strtod_l+0x518>
 800d690:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d694:	dd48      	ble.n	800d728 <_strtod_l+0x4c8>
 800d696:	2400      	movs	r4, #0
 800d698:	46a0      	mov	r8, r4
 800d69a:	940a      	str	r4, [sp, #40]	@ 0x28
 800d69c:	46a1      	mov	r9, r4
 800d69e:	9a05      	ldr	r2, [sp, #20]
 800d6a0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d7f8 <_strtod_l+0x598>
 800d6a4:	2322      	movs	r3, #34	@ 0x22
 800d6a6:	6013      	str	r3, [r2, #0]
 800d6a8:	f04f 0a00 	mov.w	sl, #0
 800d6ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	f43f ae0f 	beq.w	800d2d2 <_strtod_l+0x72>
 800d6b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d6b6:	9805      	ldr	r0, [sp, #20]
 800d6b8:	f7ff f942 	bl	800c940 <_Bfree>
 800d6bc:	9805      	ldr	r0, [sp, #20]
 800d6be:	4649      	mov	r1, r9
 800d6c0:	f7ff f93e 	bl	800c940 <_Bfree>
 800d6c4:	9805      	ldr	r0, [sp, #20]
 800d6c6:	4641      	mov	r1, r8
 800d6c8:	f7ff f93a 	bl	800c940 <_Bfree>
 800d6cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d6ce:	9805      	ldr	r0, [sp, #20]
 800d6d0:	f7ff f936 	bl	800c940 <_Bfree>
 800d6d4:	9805      	ldr	r0, [sp, #20]
 800d6d6:	4621      	mov	r1, r4
 800d6d8:	f7ff f932 	bl	800c940 <_Bfree>
 800d6dc:	e5f9      	b.n	800d2d2 <_strtod_l+0x72>
 800d6de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	dbbc      	blt.n	800d662 <_strtod_l+0x402>
 800d6e8:	4c41      	ldr	r4, [pc, #260]	@ (800d7f0 <_strtod_l+0x590>)
 800d6ea:	f1c5 050f 	rsb	r5, r5, #15
 800d6ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d6f2:	4652      	mov	r2, sl
 800d6f4:	465b      	mov	r3, fp
 800d6f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6fa:	f7f2 ffa5 	bl	8000648 <__aeabi_dmul>
 800d6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d700:	1b5d      	subs	r5, r3, r5
 800d702:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d706:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d70a:	e78f      	b.n	800d62c <_strtod_l+0x3cc>
 800d70c:	3316      	adds	r3, #22
 800d70e:	dba8      	blt.n	800d662 <_strtod_l+0x402>
 800d710:	4b37      	ldr	r3, [pc, #220]	@ (800d7f0 <_strtod_l+0x590>)
 800d712:	eba9 0808 	sub.w	r8, r9, r8
 800d716:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d71a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d71e:	4650      	mov	r0, sl
 800d720:	4659      	mov	r1, fp
 800d722:	f7f3 f8bb 	bl	800089c <__aeabi_ddiv>
 800d726:	e783      	b.n	800d630 <_strtod_l+0x3d0>
 800d728:	4b32      	ldr	r3, [pc, #200]	@ (800d7f4 <_strtod_l+0x594>)
 800d72a:	9308      	str	r3, [sp, #32]
 800d72c:	2300      	movs	r3, #0
 800d72e:	1124      	asrs	r4, r4, #4
 800d730:	4650      	mov	r0, sl
 800d732:	4659      	mov	r1, fp
 800d734:	461e      	mov	r6, r3
 800d736:	2c01      	cmp	r4, #1
 800d738:	dc21      	bgt.n	800d77e <_strtod_l+0x51e>
 800d73a:	b10b      	cbz	r3, 800d740 <_strtod_l+0x4e0>
 800d73c:	4682      	mov	sl, r0
 800d73e:	468b      	mov	fp, r1
 800d740:	492c      	ldr	r1, [pc, #176]	@ (800d7f4 <_strtod_l+0x594>)
 800d742:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d746:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d74a:	4652      	mov	r2, sl
 800d74c:	465b      	mov	r3, fp
 800d74e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d752:	f7f2 ff79 	bl	8000648 <__aeabi_dmul>
 800d756:	4b28      	ldr	r3, [pc, #160]	@ (800d7f8 <_strtod_l+0x598>)
 800d758:	460a      	mov	r2, r1
 800d75a:	400b      	ands	r3, r1
 800d75c:	4927      	ldr	r1, [pc, #156]	@ (800d7fc <_strtod_l+0x59c>)
 800d75e:	428b      	cmp	r3, r1
 800d760:	4682      	mov	sl, r0
 800d762:	d898      	bhi.n	800d696 <_strtod_l+0x436>
 800d764:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d768:	428b      	cmp	r3, r1
 800d76a:	bf86      	itte	hi
 800d76c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d800 <_strtod_l+0x5a0>
 800d770:	f04f 3aff 	movhi.w	sl, #4294967295
 800d774:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d778:	2300      	movs	r3, #0
 800d77a:	9308      	str	r3, [sp, #32]
 800d77c:	e07a      	b.n	800d874 <_strtod_l+0x614>
 800d77e:	07e2      	lsls	r2, r4, #31
 800d780:	d505      	bpl.n	800d78e <_strtod_l+0x52e>
 800d782:	9b08      	ldr	r3, [sp, #32]
 800d784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d788:	f7f2 ff5e 	bl	8000648 <__aeabi_dmul>
 800d78c:	2301      	movs	r3, #1
 800d78e:	9a08      	ldr	r2, [sp, #32]
 800d790:	3208      	adds	r2, #8
 800d792:	3601      	adds	r6, #1
 800d794:	1064      	asrs	r4, r4, #1
 800d796:	9208      	str	r2, [sp, #32]
 800d798:	e7cd      	b.n	800d736 <_strtod_l+0x4d6>
 800d79a:	d0ed      	beq.n	800d778 <_strtod_l+0x518>
 800d79c:	4264      	negs	r4, r4
 800d79e:	f014 020f 	ands.w	r2, r4, #15
 800d7a2:	d00a      	beq.n	800d7ba <_strtod_l+0x55a>
 800d7a4:	4b12      	ldr	r3, [pc, #72]	@ (800d7f0 <_strtod_l+0x590>)
 800d7a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7aa:	4650      	mov	r0, sl
 800d7ac:	4659      	mov	r1, fp
 800d7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b2:	f7f3 f873 	bl	800089c <__aeabi_ddiv>
 800d7b6:	4682      	mov	sl, r0
 800d7b8:	468b      	mov	fp, r1
 800d7ba:	1124      	asrs	r4, r4, #4
 800d7bc:	d0dc      	beq.n	800d778 <_strtod_l+0x518>
 800d7be:	2c1f      	cmp	r4, #31
 800d7c0:	dd20      	ble.n	800d804 <_strtod_l+0x5a4>
 800d7c2:	2400      	movs	r4, #0
 800d7c4:	46a0      	mov	r8, r4
 800d7c6:	940a      	str	r4, [sp, #40]	@ 0x28
 800d7c8:	46a1      	mov	r9, r4
 800d7ca:	9a05      	ldr	r2, [sp, #20]
 800d7cc:	2322      	movs	r3, #34	@ 0x22
 800d7ce:	f04f 0a00 	mov.w	sl, #0
 800d7d2:	f04f 0b00 	mov.w	fp, #0
 800d7d6:	6013      	str	r3, [r2, #0]
 800d7d8:	e768      	b.n	800d6ac <_strtod_l+0x44c>
 800d7da:	bf00      	nop
 800d7dc:	0800f6a9 	.word	0x0800f6a9
 800d7e0:	0800f8bc 	.word	0x0800f8bc
 800d7e4:	0800f6a1 	.word	0x0800f6a1
 800d7e8:	0800f6d8 	.word	0x0800f6d8
 800d7ec:	0800fa65 	.word	0x0800fa65
 800d7f0:	0800f7f0 	.word	0x0800f7f0
 800d7f4:	0800f7c8 	.word	0x0800f7c8
 800d7f8:	7ff00000 	.word	0x7ff00000
 800d7fc:	7ca00000 	.word	0x7ca00000
 800d800:	7fefffff 	.word	0x7fefffff
 800d804:	f014 0310 	ands.w	r3, r4, #16
 800d808:	bf18      	it	ne
 800d80a:	236a      	movne	r3, #106	@ 0x6a
 800d80c:	4ea9      	ldr	r6, [pc, #676]	@ (800dab4 <_strtod_l+0x854>)
 800d80e:	9308      	str	r3, [sp, #32]
 800d810:	4650      	mov	r0, sl
 800d812:	4659      	mov	r1, fp
 800d814:	2300      	movs	r3, #0
 800d816:	07e2      	lsls	r2, r4, #31
 800d818:	d504      	bpl.n	800d824 <_strtod_l+0x5c4>
 800d81a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d81e:	f7f2 ff13 	bl	8000648 <__aeabi_dmul>
 800d822:	2301      	movs	r3, #1
 800d824:	1064      	asrs	r4, r4, #1
 800d826:	f106 0608 	add.w	r6, r6, #8
 800d82a:	d1f4      	bne.n	800d816 <_strtod_l+0x5b6>
 800d82c:	b10b      	cbz	r3, 800d832 <_strtod_l+0x5d2>
 800d82e:	4682      	mov	sl, r0
 800d830:	468b      	mov	fp, r1
 800d832:	9b08      	ldr	r3, [sp, #32]
 800d834:	b1b3      	cbz	r3, 800d864 <_strtod_l+0x604>
 800d836:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d83a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d83e:	2b00      	cmp	r3, #0
 800d840:	4659      	mov	r1, fp
 800d842:	dd0f      	ble.n	800d864 <_strtod_l+0x604>
 800d844:	2b1f      	cmp	r3, #31
 800d846:	dd55      	ble.n	800d8f4 <_strtod_l+0x694>
 800d848:	2b34      	cmp	r3, #52	@ 0x34
 800d84a:	bfde      	ittt	le
 800d84c:	f04f 33ff 	movle.w	r3, #4294967295
 800d850:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d854:	4093      	lslle	r3, r2
 800d856:	f04f 0a00 	mov.w	sl, #0
 800d85a:	bfcc      	ite	gt
 800d85c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d860:	ea03 0b01 	andle.w	fp, r3, r1
 800d864:	2200      	movs	r2, #0
 800d866:	2300      	movs	r3, #0
 800d868:	4650      	mov	r0, sl
 800d86a:	4659      	mov	r1, fp
 800d86c:	f7f3 f954 	bl	8000b18 <__aeabi_dcmpeq>
 800d870:	2800      	cmp	r0, #0
 800d872:	d1a6      	bne.n	800d7c2 <_strtod_l+0x562>
 800d874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d876:	9300      	str	r3, [sp, #0]
 800d878:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d87a:	9805      	ldr	r0, [sp, #20]
 800d87c:	462b      	mov	r3, r5
 800d87e:	463a      	mov	r2, r7
 800d880:	f7ff f8c6 	bl	800ca10 <__s2b>
 800d884:	900a      	str	r0, [sp, #40]	@ 0x28
 800d886:	2800      	cmp	r0, #0
 800d888:	f43f af05 	beq.w	800d696 <_strtod_l+0x436>
 800d88c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d88e:	2a00      	cmp	r2, #0
 800d890:	eba9 0308 	sub.w	r3, r9, r8
 800d894:	bfa8      	it	ge
 800d896:	2300      	movge	r3, #0
 800d898:	9312      	str	r3, [sp, #72]	@ 0x48
 800d89a:	2400      	movs	r4, #0
 800d89c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d8a0:	9316      	str	r3, [sp, #88]	@ 0x58
 800d8a2:	46a0      	mov	r8, r4
 800d8a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8a6:	9805      	ldr	r0, [sp, #20]
 800d8a8:	6859      	ldr	r1, [r3, #4]
 800d8aa:	f7ff f809 	bl	800c8c0 <_Balloc>
 800d8ae:	4681      	mov	r9, r0
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	f43f aef4 	beq.w	800d69e <_strtod_l+0x43e>
 800d8b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8b8:	691a      	ldr	r2, [r3, #16]
 800d8ba:	3202      	adds	r2, #2
 800d8bc:	f103 010c 	add.w	r1, r3, #12
 800d8c0:	0092      	lsls	r2, r2, #2
 800d8c2:	300c      	adds	r0, #12
 800d8c4:	f7fe f89b 	bl	800b9fe <memcpy>
 800d8c8:	ec4b ab10 	vmov	d0, sl, fp
 800d8cc:	9805      	ldr	r0, [sp, #20]
 800d8ce:	aa1c      	add	r2, sp, #112	@ 0x70
 800d8d0:	a91b      	add	r1, sp, #108	@ 0x6c
 800d8d2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d8d6:	f7ff fbd7 	bl	800d088 <__d2b>
 800d8da:	901a      	str	r0, [sp, #104]	@ 0x68
 800d8dc:	2800      	cmp	r0, #0
 800d8de:	f43f aede 	beq.w	800d69e <_strtod_l+0x43e>
 800d8e2:	9805      	ldr	r0, [sp, #20]
 800d8e4:	2101      	movs	r1, #1
 800d8e6:	f7ff f929 	bl	800cb3c <__i2b>
 800d8ea:	4680      	mov	r8, r0
 800d8ec:	b948      	cbnz	r0, 800d902 <_strtod_l+0x6a2>
 800d8ee:	f04f 0800 	mov.w	r8, #0
 800d8f2:	e6d4      	b.n	800d69e <_strtod_l+0x43e>
 800d8f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d8f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d8fc:	ea03 0a0a 	and.w	sl, r3, sl
 800d900:	e7b0      	b.n	800d864 <_strtod_l+0x604>
 800d902:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d904:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d906:	2d00      	cmp	r5, #0
 800d908:	bfab      	itete	ge
 800d90a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d90c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d90e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d910:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d912:	bfac      	ite	ge
 800d914:	18ef      	addge	r7, r5, r3
 800d916:	1b5e      	sublt	r6, r3, r5
 800d918:	9b08      	ldr	r3, [sp, #32]
 800d91a:	1aed      	subs	r5, r5, r3
 800d91c:	4415      	add	r5, r2
 800d91e:	4b66      	ldr	r3, [pc, #408]	@ (800dab8 <_strtod_l+0x858>)
 800d920:	3d01      	subs	r5, #1
 800d922:	429d      	cmp	r5, r3
 800d924:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d928:	da50      	bge.n	800d9cc <_strtod_l+0x76c>
 800d92a:	1b5b      	subs	r3, r3, r5
 800d92c:	2b1f      	cmp	r3, #31
 800d92e:	eba2 0203 	sub.w	r2, r2, r3
 800d932:	f04f 0101 	mov.w	r1, #1
 800d936:	dc3d      	bgt.n	800d9b4 <_strtod_l+0x754>
 800d938:	fa01 f303 	lsl.w	r3, r1, r3
 800d93c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d93e:	2300      	movs	r3, #0
 800d940:	9310      	str	r3, [sp, #64]	@ 0x40
 800d942:	18bd      	adds	r5, r7, r2
 800d944:	9b08      	ldr	r3, [sp, #32]
 800d946:	42af      	cmp	r7, r5
 800d948:	4416      	add	r6, r2
 800d94a:	441e      	add	r6, r3
 800d94c:	463b      	mov	r3, r7
 800d94e:	bfa8      	it	ge
 800d950:	462b      	movge	r3, r5
 800d952:	42b3      	cmp	r3, r6
 800d954:	bfa8      	it	ge
 800d956:	4633      	movge	r3, r6
 800d958:	2b00      	cmp	r3, #0
 800d95a:	bfc2      	ittt	gt
 800d95c:	1aed      	subgt	r5, r5, r3
 800d95e:	1af6      	subgt	r6, r6, r3
 800d960:	1aff      	subgt	r7, r7, r3
 800d962:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d964:	2b00      	cmp	r3, #0
 800d966:	dd16      	ble.n	800d996 <_strtod_l+0x736>
 800d968:	4641      	mov	r1, r8
 800d96a:	9805      	ldr	r0, [sp, #20]
 800d96c:	461a      	mov	r2, r3
 800d96e:	f7ff f9a5 	bl	800ccbc <__pow5mult>
 800d972:	4680      	mov	r8, r0
 800d974:	2800      	cmp	r0, #0
 800d976:	d0ba      	beq.n	800d8ee <_strtod_l+0x68e>
 800d978:	4601      	mov	r1, r0
 800d97a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d97c:	9805      	ldr	r0, [sp, #20]
 800d97e:	f7ff f8f3 	bl	800cb68 <__multiply>
 800d982:	900e      	str	r0, [sp, #56]	@ 0x38
 800d984:	2800      	cmp	r0, #0
 800d986:	f43f ae8a 	beq.w	800d69e <_strtod_l+0x43e>
 800d98a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d98c:	9805      	ldr	r0, [sp, #20]
 800d98e:	f7fe ffd7 	bl	800c940 <_Bfree>
 800d992:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d994:	931a      	str	r3, [sp, #104]	@ 0x68
 800d996:	2d00      	cmp	r5, #0
 800d998:	dc1d      	bgt.n	800d9d6 <_strtod_l+0x776>
 800d99a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	dd23      	ble.n	800d9e8 <_strtod_l+0x788>
 800d9a0:	4649      	mov	r1, r9
 800d9a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d9a4:	9805      	ldr	r0, [sp, #20]
 800d9a6:	f7ff f989 	bl	800ccbc <__pow5mult>
 800d9aa:	4681      	mov	r9, r0
 800d9ac:	b9e0      	cbnz	r0, 800d9e8 <_strtod_l+0x788>
 800d9ae:	f04f 0900 	mov.w	r9, #0
 800d9b2:	e674      	b.n	800d69e <_strtod_l+0x43e>
 800d9b4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d9b8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d9bc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d9c0:	35e2      	adds	r5, #226	@ 0xe2
 800d9c2:	fa01 f305 	lsl.w	r3, r1, r5
 800d9c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d9c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d9ca:	e7ba      	b.n	800d942 <_strtod_l+0x6e2>
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d9d4:	e7b5      	b.n	800d942 <_strtod_l+0x6e2>
 800d9d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d9d8:	9805      	ldr	r0, [sp, #20]
 800d9da:	462a      	mov	r2, r5
 800d9dc:	f7ff f9c8 	bl	800cd70 <__lshift>
 800d9e0:	901a      	str	r0, [sp, #104]	@ 0x68
 800d9e2:	2800      	cmp	r0, #0
 800d9e4:	d1d9      	bne.n	800d99a <_strtod_l+0x73a>
 800d9e6:	e65a      	b.n	800d69e <_strtod_l+0x43e>
 800d9e8:	2e00      	cmp	r6, #0
 800d9ea:	dd07      	ble.n	800d9fc <_strtod_l+0x79c>
 800d9ec:	4649      	mov	r1, r9
 800d9ee:	9805      	ldr	r0, [sp, #20]
 800d9f0:	4632      	mov	r2, r6
 800d9f2:	f7ff f9bd 	bl	800cd70 <__lshift>
 800d9f6:	4681      	mov	r9, r0
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	d0d8      	beq.n	800d9ae <_strtod_l+0x74e>
 800d9fc:	2f00      	cmp	r7, #0
 800d9fe:	dd08      	ble.n	800da12 <_strtod_l+0x7b2>
 800da00:	4641      	mov	r1, r8
 800da02:	9805      	ldr	r0, [sp, #20]
 800da04:	463a      	mov	r2, r7
 800da06:	f7ff f9b3 	bl	800cd70 <__lshift>
 800da0a:	4680      	mov	r8, r0
 800da0c:	2800      	cmp	r0, #0
 800da0e:	f43f ae46 	beq.w	800d69e <_strtod_l+0x43e>
 800da12:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800da14:	9805      	ldr	r0, [sp, #20]
 800da16:	464a      	mov	r2, r9
 800da18:	f7ff fa32 	bl	800ce80 <__mdiff>
 800da1c:	4604      	mov	r4, r0
 800da1e:	2800      	cmp	r0, #0
 800da20:	f43f ae3d 	beq.w	800d69e <_strtod_l+0x43e>
 800da24:	68c3      	ldr	r3, [r0, #12]
 800da26:	930f      	str	r3, [sp, #60]	@ 0x3c
 800da28:	2300      	movs	r3, #0
 800da2a:	60c3      	str	r3, [r0, #12]
 800da2c:	4641      	mov	r1, r8
 800da2e:	f7ff fa0b 	bl	800ce48 <__mcmp>
 800da32:	2800      	cmp	r0, #0
 800da34:	da46      	bge.n	800dac4 <_strtod_l+0x864>
 800da36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da38:	ea53 030a 	orrs.w	r3, r3, sl
 800da3c:	d16c      	bne.n	800db18 <_strtod_l+0x8b8>
 800da3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da42:	2b00      	cmp	r3, #0
 800da44:	d168      	bne.n	800db18 <_strtod_l+0x8b8>
 800da46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800da4a:	0d1b      	lsrs	r3, r3, #20
 800da4c:	051b      	lsls	r3, r3, #20
 800da4e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800da52:	d961      	bls.n	800db18 <_strtod_l+0x8b8>
 800da54:	6963      	ldr	r3, [r4, #20]
 800da56:	b913      	cbnz	r3, 800da5e <_strtod_l+0x7fe>
 800da58:	6923      	ldr	r3, [r4, #16]
 800da5a:	2b01      	cmp	r3, #1
 800da5c:	dd5c      	ble.n	800db18 <_strtod_l+0x8b8>
 800da5e:	4621      	mov	r1, r4
 800da60:	2201      	movs	r2, #1
 800da62:	9805      	ldr	r0, [sp, #20]
 800da64:	f7ff f984 	bl	800cd70 <__lshift>
 800da68:	4641      	mov	r1, r8
 800da6a:	4604      	mov	r4, r0
 800da6c:	f7ff f9ec 	bl	800ce48 <__mcmp>
 800da70:	2800      	cmp	r0, #0
 800da72:	dd51      	ble.n	800db18 <_strtod_l+0x8b8>
 800da74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800da78:	9a08      	ldr	r2, [sp, #32]
 800da7a:	0d1b      	lsrs	r3, r3, #20
 800da7c:	051b      	lsls	r3, r3, #20
 800da7e:	2a00      	cmp	r2, #0
 800da80:	d06b      	beq.n	800db5a <_strtod_l+0x8fa>
 800da82:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800da86:	d868      	bhi.n	800db5a <_strtod_l+0x8fa>
 800da88:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800da8c:	f67f ae9d 	bls.w	800d7ca <_strtod_l+0x56a>
 800da90:	4b0a      	ldr	r3, [pc, #40]	@ (800dabc <_strtod_l+0x85c>)
 800da92:	4650      	mov	r0, sl
 800da94:	4659      	mov	r1, fp
 800da96:	2200      	movs	r2, #0
 800da98:	f7f2 fdd6 	bl	8000648 <__aeabi_dmul>
 800da9c:	4b08      	ldr	r3, [pc, #32]	@ (800dac0 <_strtod_l+0x860>)
 800da9e:	400b      	ands	r3, r1
 800daa0:	4682      	mov	sl, r0
 800daa2:	468b      	mov	fp, r1
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	f47f ae05 	bne.w	800d6b4 <_strtod_l+0x454>
 800daaa:	9a05      	ldr	r2, [sp, #20]
 800daac:	2322      	movs	r3, #34	@ 0x22
 800daae:	6013      	str	r3, [r2, #0]
 800dab0:	e600      	b.n	800d6b4 <_strtod_l+0x454>
 800dab2:	bf00      	nop
 800dab4:	0800f8e8 	.word	0x0800f8e8
 800dab8:	fffffc02 	.word	0xfffffc02
 800dabc:	39500000 	.word	0x39500000
 800dac0:	7ff00000 	.word	0x7ff00000
 800dac4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800dac8:	d165      	bne.n	800db96 <_strtod_l+0x936>
 800daca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dacc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dad0:	b35a      	cbz	r2, 800db2a <_strtod_l+0x8ca>
 800dad2:	4a9f      	ldr	r2, [pc, #636]	@ (800dd50 <_strtod_l+0xaf0>)
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d12b      	bne.n	800db30 <_strtod_l+0x8d0>
 800dad8:	9b08      	ldr	r3, [sp, #32]
 800dada:	4651      	mov	r1, sl
 800dadc:	b303      	cbz	r3, 800db20 <_strtod_l+0x8c0>
 800dade:	4b9d      	ldr	r3, [pc, #628]	@ (800dd54 <_strtod_l+0xaf4>)
 800dae0:	465a      	mov	r2, fp
 800dae2:	4013      	ands	r3, r2
 800dae4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dae8:	f04f 32ff 	mov.w	r2, #4294967295
 800daec:	d81b      	bhi.n	800db26 <_strtod_l+0x8c6>
 800daee:	0d1b      	lsrs	r3, r3, #20
 800daf0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800daf4:	fa02 f303 	lsl.w	r3, r2, r3
 800daf8:	4299      	cmp	r1, r3
 800dafa:	d119      	bne.n	800db30 <_strtod_l+0x8d0>
 800dafc:	4b96      	ldr	r3, [pc, #600]	@ (800dd58 <_strtod_l+0xaf8>)
 800dafe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db00:	429a      	cmp	r2, r3
 800db02:	d102      	bne.n	800db0a <_strtod_l+0x8aa>
 800db04:	3101      	adds	r1, #1
 800db06:	f43f adca 	beq.w	800d69e <_strtod_l+0x43e>
 800db0a:	4b92      	ldr	r3, [pc, #584]	@ (800dd54 <_strtod_l+0xaf4>)
 800db0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db0e:	401a      	ands	r2, r3
 800db10:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800db14:	f04f 0a00 	mov.w	sl, #0
 800db18:	9b08      	ldr	r3, [sp, #32]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d1b8      	bne.n	800da90 <_strtod_l+0x830>
 800db1e:	e5c9      	b.n	800d6b4 <_strtod_l+0x454>
 800db20:	f04f 33ff 	mov.w	r3, #4294967295
 800db24:	e7e8      	b.n	800daf8 <_strtod_l+0x898>
 800db26:	4613      	mov	r3, r2
 800db28:	e7e6      	b.n	800daf8 <_strtod_l+0x898>
 800db2a:	ea53 030a 	orrs.w	r3, r3, sl
 800db2e:	d0a1      	beq.n	800da74 <_strtod_l+0x814>
 800db30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800db32:	b1db      	cbz	r3, 800db6c <_strtod_l+0x90c>
 800db34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db36:	4213      	tst	r3, r2
 800db38:	d0ee      	beq.n	800db18 <_strtod_l+0x8b8>
 800db3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db3c:	9a08      	ldr	r2, [sp, #32]
 800db3e:	4650      	mov	r0, sl
 800db40:	4659      	mov	r1, fp
 800db42:	b1bb      	cbz	r3, 800db74 <_strtod_l+0x914>
 800db44:	f7ff fb6e 	bl	800d224 <sulp>
 800db48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800db4c:	ec53 2b10 	vmov	r2, r3, d0
 800db50:	f7f2 fbc4 	bl	80002dc <__adddf3>
 800db54:	4682      	mov	sl, r0
 800db56:	468b      	mov	fp, r1
 800db58:	e7de      	b.n	800db18 <_strtod_l+0x8b8>
 800db5a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800db5e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800db62:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800db66:	f04f 3aff 	mov.w	sl, #4294967295
 800db6a:	e7d5      	b.n	800db18 <_strtod_l+0x8b8>
 800db6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800db6e:	ea13 0f0a 	tst.w	r3, sl
 800db72:	e7e1      	b.n	800db38 <_strtod_l+0x8d8>
 800db74:	f7ff fb56 	bl	800d224 <sulp>
 800db78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800db7c:	ec53 2b10 	vmov	r2, r3, d0
 800db80:	f7f2 fbaa 	bl	80002d8 <__aeabi_dsub>
 800db84:	2200      	movs	r2, #0
 800db86:	2300      	movs	r3, #0
 800db88:	4682      	mov	sl, r0
 800db8a:	468b      	mov	fp, r1
 800db8c:	f7f2 ffc4 	bl	8000b18 <__aeabi_dcmpeq>
 800db90:	2800      	cmp	r0, #0
 800db92:	d0c1      	beq.n	800db18 <_strtod_l+0x8b8>
 800db94:	e619      	b.n	800d7ca <_strtod_l+0x56a>
 800db96:	4641      	mov	r1, r8
 800db98:	4620      	mov	r0, r4
 800db9a:	f7ff facd 	bl	800d138 <__ratio>
 800db9e:	ec57 6b10 	vmov	r6, r7, d0
 800dba2:	2200      	movs	r2, #0
 800dba4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dba8:	4630      	mov	r0, r6
 800dbaa:	4639      	mov	r1, r7
 800dbac:	f7f2 ffc8 	bl	8000b40 <__aeabi_dcmple>
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d06f      	beq.n	800dc94 <_strtod_l+0xa34>
 800dbb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d17a      	bne.n	800dcb0 <_strtod_l+0xa50>
 800dbba:	f1ba 0f00 	cmp.w	sl, #0
 800dbbe:	d158      	bne.n	800dc72 <_strtod_l+0xa12>
 800dbc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dbc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d15a      	bne.n	800dc80 <_strtod_l+0xa20>
 800dbca:	4b64      	ldr	r3, [pc, #400]	@ (800dd5c <_strtod_l+0xafc>)
 800dbcc:	2200      	movs	r2, #0
 800dbce:	4630      	mov	r0, r6
 800dbd0:	4639      	mov	r1, r7
 800dbd2:	f7f2 ffab 	bl	8000b2c <__aeabi_dcmplt>
 800dbd6:	2800      	cmp	r0, #0
 800dbd8:	d159      	bne.n	800dc8e <_strtod_l+0xa2e>
 800dbda:	4630      	mov	r0, r6
 800dbdc:	4639      	mov	r1, r7
 800dbde:	4b60      	ldr	r3, [pc, #384]	@ (800dd60 <_strtod_l+0xb00>)
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f7f2 fd31 	bl	8000648 <__aeabi_dmul>
 800dbe6:	4606      	mov	r6, r0
 800dbe8:	460f      	mov	r7, r1
 800dbea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800dbee:	9606      	str	r6, [sp, #24]
 800dbf0:	9307      	str	r3, [sp, #28]
 800dbf2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dbf6:	4d57      	ldr	r5, [pc, #348]	@ (800dd54 <_strtod_l+0xaf4>)
 800dbf8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dbfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dbfe:	401d      	ands	r5, r3
 800dc00:	4b58      	ldr	r3, [pc, #352]	@ (800dd64 <_strtod_l+0xb04>)
 800dc02:	429d      	cmp	r5, r3
 800dc04:	f040 80b2 	bne.w	800dd6c <_strtod_l+0xb0c>
 800dc08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc0a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800dc0e:	ec4b ab10 	vmov	d0, sl, fp
 800dc12:	f7ff f9c9 	bl	800cfa8 <__ulp>
 800dc16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dc1a:	ec51 0b10 	vmov	r0, r1, d0
 800dc1e:	f7f2 fd13 	bl	8000648 <__aeabi_dmul>
 800dc22:	4652      	mov	r2, sl
 800dc24:	465b      	mov	r3, fp
 800dc26:	f7f2 fb59 	bl	80002dc <__adddf3>
 800dc2a:	460b      	mov	r3, r1
 800dc2c:	4949      	ldr	r1, [pc, #292]	@ (800dd54 <_strtod_l+0xaf4>)
 800dc2e:	4a4e      	ldr	r2, [pc, #312]	@ (800dd68 <_strtod_l+0xb08>)
 800dc30:	4019      	ands	r1, r3
 800dc32:	4291      	cmp	r1, r2
 800dc34:	4682      	mov	sl, r0
 800dc36:	d942      	bls.n	800dcbe <_strtod_l+0xa5e>
 800dc38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dc3a:	4b47      	ldr	r3, [pc, #284]	@ (800dd58 <_strtod_l+0xaf8>)
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d103      	bne.n	800dc48 <_strtod_l+0x9e8>
 800dc40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dc42:	3301      	adds	r3, #1
 800dc44:	f43f ad2b 	beq.w	800d69e <_strtod_l+0x43e>
 800dc48:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800dd58 <_strtod_l+0xaf8>
 800dc4c:	f04f 3aff 	mov.w	sl, #4294967295
 800dc50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc52:	9805      	ldr	r0, [sp, #20]
 800dc54:	f7fe fe74 	bl	800c940 <_Bfree>
 800dc58:	9805      	ldr	r0, [sp, #20]
 800dc5a:	4649      	mov	r1, r9
 800dc5c:	f7fe fe70 	bl	800c940 <_Bfree>
 800dc60:	9805      	ldr	r0, [sp, #20]
 800dc62:	4641      	mov	r1, r8
 800dc64:	f7fe fe6c 	bl	800c940 <_Bfree>
 800dc68:	9805      	ldr	r0, [sp, #20]
 800dc6a:	4621      	mov	r1, r4
 800dc6c:	f7fe fe68 	bl	800c940 <_Bfree>
 800dc70:	e618      	b.n	800d8a4 <_strtod_l+0x644>
 800dc72:	f1ba 0f01 	cmp.w	sl, #1
 800dc76:	d103      	bne.n	800dc80 <_strtod_l+0xa20>
 800dc78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	f43f ada5 	beq.w	800d7ca <_strtod_l+0x56a>
 800dc80:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800dd30 <_strtod_l+0xad0>
 800dc84:	4f35      	ldr	r7, [pc, #212]	@ (800dd5c <_strtod_l+0xafc>)
 800dc86:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dc8a:	2600      	movs	r6, #0
 800dc8c:	e7b1      	b.n	800dbf2 <_strtod_l+0x992>
 800dc8e:	4f34      	ldr	r7, [pc, #208]	@ (800dd60 <_strtod_l+0xb00>)
 800dc90:	2600      	movs	r6, #0
 800dc92:	e7aa      	b.n	800dbea <_strtod_l+0x98a>
 800dc94:	4b32      	ldr	r3, [pc, #200]	@ (800dd60 <_strtod_l+0xb00>)
 800dc96:	4630      	mov	r0, r6
 800dc98:	4639      	mov	r1, r7
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	f7f2 fcd4 	bl	8000648 <__aeabi_dmul>
 800dca0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dca2:	4606      	mov	r6, r0
 800dca4:	460f      	mov	r7, r1
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d09f      	beq.n	800dbea <_strtod_l+0x98a>
 800dcaa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800dcae:	e7a0      	b.n	800dbf2 <_strtod_l+0x992>
 800dcb0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800dd38 <_strtod_l+0xad8>
 800dcb4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dcb8:	ec57 6b17 	vmov	r6, r7, d7
 800dcbc:	e799      	b.n	800dbf2 <_strtod_l+0x992>
 800dcbe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800dcc2:	9b08      	ldr	r3, [sp, #32]
 800dcc4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d1c1      	bne.n	800dc50 <_strtod_l+0x9f0>
 800dccc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dcd0:	0d1b      	lsrs	r3, r3, #20
 800dcd2:	051b      	lsls	r3, r3, #20
 800dcd4:	429d      	cmp	r5, r3
 800dcd6:	d1bb      	bne.n	800dc50 <_strtod_l+0x9f0>
 800dcd8:	4630      	mov	r0, r6
 800dcda:	4639      	mov	r1, r7
 800dcdc:	f7f3 f814 	bl	8000d08 <__aeabi_d2lz>
 800dce0:	f7f2 fc84 	bl	80005ec <__aeabi_l2d>
 800dce4:	4602      	mov	r2, r0
 800dce6:	460b      	mov	r3, r1
 800dce8:	4630      	mov	r0, r6
 800dcea:	4639      	mov	r1, r7
 800dcec:	f7f2 faf4 	bl	80002d8 <__aeabi_dsub>
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	4602      	mov	r2, r0
 800dcf4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800dcf8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800dcfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcfe:	ea46 060a 	orr.w	r6, r6, sl
 800dd02:	431e      	orrs	r6, r3
 800dd04:	d06f      	beq.n	800dde6 <_strtod_l+0xb86>
 800dd06:	a30e      	add	r3, pc, #56	@ (adr r3, 800dd40 <_strtod_l+0xae0>)
 800dd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd0c:	f7f2 ff0e 	bl	8000b2c <__aeabi_dcmplt>
 800dd10:	2800      	cmp	r0, #0
 800dd12:	f47f accf 	bne.w	800d6b4 <_strtod_l+0x454>
 800dd16:	a30c      	add	r3, pc, #48	@ (adr r3, 800dd48 <_strtod_l+0xae8>)
 800dd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd20:	f7f2 ff22 	bl	8000b68 <__aeabi_dcmpgt>
 800dd24:	2800      	cmp	r0, #0
 800dd26:	d093      	beq.n	800dc50 <_strtod_l+0x9f0>
 800dd28:	e4c4      	b.n	800d6b4 <_strtod_l+0x454>
 800dd2a:	bf00      	nop
 800dd2c:	f3af 8000 	nop.w
 800dd30:	00000000 	.word	0x00000000
 800dd34:	bff00000 	.word	0xbff00000
 800dd38:	00000000 	.word	0x00000000
 800dd3c:	3ff00000 	.word	0x3ff00000
 800dd40:	94a03595 	.word	0x94a03595
 800dd44:	3fdfffff 	.word	0x3fdfffff
 800dd48:	35afe535 	.word	0x35afe535
 800dd4c:	3fe00000 	.word	0x3fe00000
 800dd50:	000fffff 	.word	0x000fffff
 800dd54:	7ff00000 	.word	0x7ff00000
 800dd58:	7fefffff 	.word	0x7fefffff
 800dd5c:	3ff00000 	.word	0x3ff00000
 800dd60:	3fe00000 	.word	0x3fe00000
 800dd64:	7fe00000 	.word	0x7fe00000
 800dd68:	7c9fffff 	.word	0x7c9fffff
 800dd6c:	9b08      	ldr	r3, [sp, #32]
 800dd6e:	b323      	cbz	r3, 800ddba <_strtod_l+0xb5a>
 800dd70:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800dd74:	d821      	bhi.n	800ddba <_strtod_l+0xb5a>
 800dd76:	a328      	add	r3, pc, #160	@ (adr r3, 800de18 <_strtod_l+0xbb8>)
 800dd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7c:	4630      	mov	r0, r6
 800dd7e:	4639      	mov	r1, r7
 800dd80:	f7f2 fede 	bl	8000b40 <__aeabi_dcmple>
 800dd84:	b1a0      	cbz	r0, 800ddb0 <_strtod_l+0xb50>
 800dd86:	4639      	mov	r1, r7
 800dd88:	4630      	mov	r0, r6
 800dd8a:	f7f2 ff35 	bl	8000bf8 <__aeabi_d2uiz>
 800dd8e:	2801      	cmp	r0, #1
 800dd90:	bf38      	it	cc
 800dd92:	2001      	movcc	r0, #1
 800dd94:	f7f2 fbde 	bl	8000554 <__aeabi_ui2d>
 800dd98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd9a:	4606      	mov	r6, r0
 800dd9c:	460f      	mov	r7, r1
 800dd9e:	b9fb      	cbnz	r3, 800dde0 <_strtod_l+0xb80>
 800dda0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dda4:	9014      	str	r0, [sp, #80]	@ 0x50
 800dda6:	9315      	str	r3, [sp, #84]	@ 0x54
 800dda8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ddac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ddb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ddb2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ddb6:	1b5b      	subs	r3, r3, r5
 800ddb8:	9311      	str	r3, [sp, #68]	@ 0x44
 800ddba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ddbe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ddc2:	f7ff f8f1 	bl	800cfa8 <__ulp>
 800ddc6:	4650      	mov	r0, sl
 800ddc8:	ec53 2b10 	vmov	r2, r3, d0
 800ddcc:	4659      	mov	r1, fp
 800ddce:	f7f2 fc3b 	bl	8000648 <__aeabi_dmul>
 800ddd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ddd6:	f7f2 fa81 	bl	80002dc <__adddf3>
 800ddda:	4682      	mov	sl, r0
 800dddc:	468b      	mov	fp, r1
 800ddde:	e770      	b.n	800dcc2 <_strtod_l+0xa62>
 800dde0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800dde4:	e7e0      	b.n	800dda8 <_strtod_l+0xb48>
 800dde6:	a30e      	add	r3, pc, #56	@ (adr r3, 800de20 <_strtod_l+0xbc0>)
 800dde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddec:	f7f2 fe9e 	bl	8000b2c <__aeabi_dcmplt>
 800ddf0:	e798      	b.n	800dd24 <_strtod_l+0xac4>
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ddf6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ddf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ddfa:	6013      	str	r3, [r2, #0]
 800ddfc:	f7ff ba6d 	b.w	800d2da <_strtod_l+0x7a>
 800de00:	2a65      	cmp	r2, #101	@ 0x65
 800de02:	f43f ab66 	beq.w	800d4d2 <_strtod_l+0x272>
 800de06:	2a45      	cmp	r2, #69	@ 0x45
 800de08:	f43f ab63 	beq.w	800d4d2 <_strtod_l+0x272>
 800de0c:	2301      	movs	r3, #1
 800de0e:	f7ff bb9e 	b.w	800d54e <_strtod_l+0x2ee>
 800de12:	bf00      	nop
 800de14:	f3af 8000 	nop.w
 800de18:	ffc00000 	.word	0xffc00000
 800de1c:	41dfffff 	.word	0x41dfffff
 800de20:	94a03595 	.word	0x94a03595
 800de24:	3fcfffff 	.word	0x3fcfffff

0800de28 <_strtod_r>:
 800de28:	4b01      	ldr	r3, [pc, #4]	@ (800de30 <_strtod_r+0x8>)
 800de2a:	f7ff ba19 	b.w	800d260 <_strtod_l>
 800de2e:	bf00      	nop
 800de30:	2000006c 	.word	0x2000006c

0800de34 <_strtol_l.constprop.0>:
 800de34:	2b24      	cmp	r3, #36	@ 0x24
 800de36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de3a:	4686      	mov	lr, r0
 800de3c:	4690      	mov	r8, r2
 800de3e:	d801      	bhi.n	800de44 <_strtol_l.constprop.0+0x10>
 800de40:	2b01      	cmp	r3, #1
 800de42:	d106      	bne.n	800de52 <_strtol_l.constprop.0+0x1e>
 800de44:	f7fd fdae 	bl	800b9a4 <__errno>
 800de48:	2316      	movs	r3, #22
 800de4a:	6003      	str	r3, [r0, #0]
 800de4c:	2000      	movs	r0, #0
 800de4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de52:	4834      	ldr	r0, [pc, #208]	@ (800df24 <_strtol_l.constprop.0+0xf0>)
 800de54:	460d      	mov	r5, r1
 800de56:	462a      	mov	r2, r5
 800de58:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de5c:	5d06      	ldrb	r6, [r0, r4]
 800de5e:	f016 0608 	ands.w	r6, r6, #8
 800de62:	d1f8      	bne.n	800de56 <_strtol_l.constprop.0+0x22>
 800de64:	2c2d      	cmp	r4, #45	@ 0x2d
 800de66:	d12d      	bne.n	800dec4 <_strtol_l.constprop.0+0x90>
 800de68:	782c      	ldrb	r4, [r5, #0]
 800de6a:	2601      	movs	r6, #1
 800de6c:	1c95      	adds	r5, r2, #2
 800de6e:	f033 0210 	bics.w	r2, r3, #16
 800de72:	d109      	bne.n	800de88 <_strtol_l.constprop.0+0x54>
 800de74:	2c30      	cmp	r4, #48	@ 0x30
 800de76:	d12a      	bne.n	800dece <_strtol_l.constprop.0+0x9a>
 800de78:	782a      	ldrb	r2, [r5, #0]
 800de7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800de7e:	2a58      	cmp	r2, #88	@ 0x58
 800de80:	d125      	bne.n	800dece <_strtol_l.constprop.0+0x9a>
 800de82:	786c      	ldrb	r4, [r5, #1]
 800de84:	2310      	movs	r3, #16
 800de86:	3502      	adds	r5, #2
 800de88:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800de8c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800de90:	2200      	movs	r2, #0
 800de92:	fbbc f9f3 	udiv	r9, ip, r3
 800de96:	4610      	mov	r0, r2
 800de98:	fb03 ca19 	mls	sl, r3, r9, ip
 800de9c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800dea0:	2f09      	cmp	r7, #9
 800dea2:	d81b      	bhi.n	800dedc <_strtol_l.constprop.0+0xa8>
 800dea4:	463c      	mov	r4, r7
 800dea6:	42a3      	cmp	r3, r4
 800dea8:	dd27      	ble.n	800defa <_strtol_l.constprop.0+0xc6>
 800deaa:	1c57      	adds	r7, r2, #1
 800deac:	d007      	beq.n	800debe <_strtol_l.constprop.0+0x8a>
 800deae:	4581      	cmp	r9, r0
 800deb0:	d320      	bcc.n	800def4 <_strtol_l.constprop.0+0xc0>
 800deb2:	d101      	bne.n	800deb8 <_strtol_l.constprop.0+0x84>
 800deb4:	45a2      	cmp	sl, r4
 800deb6:	db1d      	blt.n	800def4 <_strtol_l.constprop.0+0xc0>
 800deb8:	fb00 4003 	mla	r0, r0, r3, r4
 800debc:	2201      	movs	r2, #1
 800debe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dec2:	e7eb      	b.n	800de9c <_strtol_l.constprop.0+0x68>
 800dec4:	2c2b      	cmp	r4, #43	@ 0x2b
 800dec6:	bf04      	itt	eq
 800dec8:	782c      	ldrbeq	r4, [r5, #0]
 800deca:	1c95      	addeq	r5, r2, #2
 800decc:	e7cf      	b.n	800de6e <_strtol_l.constprop.0+0x3a>
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d1da      	bne.n	800de88 <_strtol_l.constprop.0+0x54>
 800ded2:	2c30      	cmp	r4, #48	@ 0x30
 800ded4:	bf0c      	ite	eq
 800ded6:	2308      	moveq	r3, #8
 800ded8:	230a      	movne	r3, #10
 800deda:	e7d5      	b.n	800de88 <_strtol_l.constprop.0+0x54>
 800dedc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dee0:	2f19      	cmp	r7, #25
 800dee2:	d801      	bhi.n	800dee8 <_strtol_l.constprop.0+0xb4>
 800dee4:	3c37      	subs	r4, #55	@ 0x37
 800dee6:	e7de      	b.n	800dea6 <_strtol_l.constprop.0+0x72>
 800dee8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800deec:	2f19      	cmp	r7, #25
 800deee:	d804      	bhi.n	800defa <_strtol_l.constprop.0+0xc6>
 800def0:	3c57      	subs	r4, #87	@ 0x57
 800def2:	e7d8      	b.n	800dea6 <_strtol_l.constprop.0+0x72>
 800def4:	f04f 32ff 	mov.w	r2, #4294967295
 800def8:	e7e1      	b.n	800debe <_strtol_l.constprop.0+0x8a>
 800defa:	1c53      	adds	r3, r2, #1
 800defc:	d108      	bne.n	800df10 <_strtol_l.constprop.0+0xdc>
 800defe:	2322      	movs	r3, #34	@ 0x22
 800df00:	f8ce 3000 	str.w	r3, [lr]
 800df04:	4660      	mov	r0, ip
 800df06:	f1b8 0f00 	cmp.w	r8, #0
 800df0a:	d0a0      	beq.n	800de4e <_strtol_l.constprop.0+0x1a>
 800df0c:	1e69      	subs	r1, r5, #1
 800df0e:	e006      	b.n	800df1e <_strtol_l.constprop.0+0xea>
 800df10:	b106      	cbz	r6, 800df14 <_strtol_l.constprop.0+0xe0>
 800df12:	4240      	negs	r0, r0
 800df14:	f1b8 0f00 	cmp.w	r8, #0
 800df18:	d099      	beq.n	800de4e <_strtol_l.constprop.0+0x1a>
 800df1a:	2a00      	cmp	r2, #0
 800df1c:	d1f6      	bne.n	800df0c <_strtol_l.constprop.0+0xd8>
 800df1e:	f8c8 1000 	str.w	r1, [r8]
 800df22:	e794      	b.n	800de4e <_strtol_l.constprop.0+0x1a>
 800df24:	0800f911 	.word	0x0800f911

0800df28 <_strtol_r>:
 800df28:	f7ff bf84 	b.w	800de34 <_strtol_l.constprop.0>

0800df2c <__ssputs_r>:
 800df2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df30:	688e      	ldr	r6, [r1, #8]
 800df32:	461f      	mov	r7, r3
 800df34:	42be      	cmp	r6, r7
 800df36:	680b      	ldr	r3, [r1, #0]
 800df38:	4682      	mov	sl, r0
 800df3a:	460c      	mov	r4, r1
 800df3c:	4690      	mov	r8, r2
 800df3e:	d82d      	bhi.n	800df9c <__ssputs_r+0x70>
 800df40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800df44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800df48:	d026      	beq.n	800df98 <__ssputs_r+0x6c>
 800df4a:	6965      	ldr	r5, [r4, #20]
 800df4c:	6909      	ldr	r1, [r1, #16]
 800df4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df52:	eba3 0901 	sub.w	r9, r3, r1
 800df56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df5a:	1c7b      	adds	r3, r7, #1
 800df5c:	444b      	add	r3, r9
 800df5e:	106d      	asrs	r5, r5, #1
 800df60:	429d      	cmp	r5, r3
 800df62:	bf38      	it	cc
 800df64:	461d      	movcc	r5, r3
 800df66:	0553      	lsls	r3, r2, #21
 800df68:	d527      	bpl.n	800dfba <__ssputs_r+0x8e>
 800df6a:	4629      	mov	r1, r5
 800df6c:	f7fe fc1c 	bl	800c7a8 <_malloc_r>
 800df70:	4606      	mov	r6, r0
 800df72:	b360      	cbz	r0, 800dfce <__ssputs_r+0xa2>
 800df74:	6921      	ldr	r1, [r4, #16]
 800df76:	464a      	mov	r2, r9
 800df78:	f7fd fd41 	bl	800b9fe <memcpy>
 800df7c:	89a3      	ldrh	r3, [r4, #12]
 800df7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800df82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df86:	81a3      	strh	r3, [r4, #12]
 800df88:	6126      	str	r6, [r4, #16]
 800df8a:	6165      	str	r5, [r4, #20]
 800df8c:	444e      	add	r6, r9
 800df8e:	eba5 0509 	sub.w	r5, r5, r9
 800df92:	6026      	str	r6, [r4, #0]
 800df94:	60a5      	str	r5, [r4, #8]
 800df96:	463e      	mov	r6, r7
 800df98:	42be      	cmp	r6, r7
 800df9a:	d900      	bls.n	800df9e <__ssputs_r+0x72>
 800df9c:	463e      	mov	r6, r7
 800df9e:	6820      	ldr	r0, [r4, #0]
 800dfa0:	4632      	mov	r2, r6
 800dfa2:	4641      	mov	r1, r8
 800dfa4:	f000 fb6a 	bl	800e67c <memmove>
 800dfa8:	68a3      	ldr	r3, [r4, #8]
 800dfaa:	1b9b      	subs	r3, r3, r6
 800dfac:	60a3      	str	r3, [r4, #8]
 800dfae:	6823      	ldr	r3, [r4, #0]
 800dfb0:	4433      	add	r3, r6
 800dfb2:	6023      	str	r3, [r4, #0]
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfba:	462a      	mov	r2, r5
 800dfbc:	f000 ff41 	bl	800ee42 <_realloc_r>
 800dfc0:	4606      	mov	r6, r0
 800dfc2:	2800      	cmp	r0, #0
 800dfc4:	d1e0      	bne.n	800df88 <__ssputs_r+0x5c>
 800dfc6:	6921      	ldr	r1, [r4, #16]
 800dfc8:	4650      	mov	r0, sl
 800dfca:	f7fe fb79 	bl	800c6c0 <_free_r>
 800dfce:	230c      	movs	r3, #12
 800dfd0:	f8ca 3000 	str.w	r3, [sl]
 800dfd4:	89a3      	ldrh	r3, [r4, #12]
 800dfd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfda:	81a3      	strh	r3, [r4, #12]
 800dfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800dfe0:	e7e9      	b.n	800dfb6 <__ssputs_r+0x8a>
	...

0800dfe4 <_svfiprintf_r>:
 800dfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe8:	4698      	mov	r8, r3
 800dfea:	898b      	ldrh	r3, [r1, #12]
 800dfec:	061b      	lsls	r3, r3, #24
 800dfee:	b09d      	sub	sp, #116	@ 0x74
 800dff0:	4607      	mov	r7, r0
 800dff2:	460d      	mov	r5, r1
 800dff4:	4614      	mov	r4, r2
 800dff6:	d510      	bpl.n	800e01a <_svfiprintf_r+0x36>
 800dff8:	690b      	ldr	r3, [r1, #16]
 800dffa:	b973      	cbnz	r3, 800e01a <_svfiprintf_r+0x36>
 800dffc:	2140      	movs	r1, #64	@ 0x40
 800dffe:	f7fe fbd3 	bl	800c7a8 <_malloc_r>
 800e002:	6028      	str	r0, [r5, #0]
 800e004:	6128      	str	r0, [r5, #16]
 800e006:	b930      	cbnz	r0, 800e016 <_svfiprintf_r+0x32>
 800e008:	230c      	movs	r3, #12
 800e00a:	603b      	str	r3, [r7, #0]
 800e00c:	f04f 30ff 	mov.w	r0, #4294967295
 800e010:	b01d      	add	sp, #116	@ 0x74
 800e012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e016:	2340      	movs	r3, #64	@ 0x40
 800e018:	616b      	str	r3, [r5, #20]
 800e01a:	2300      	movs	r3, #0
 800e01c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e01e:	2320      	movs	r3, #32
 800e020:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e024:	f8cd 800c 	str.w	r8, [sp, #12]
 800e028:	2330      	movs	r3, #48	@ 0x30
 800e02a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e1c8 <_svfiprintf_r+0x1e4>
 800e02e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e032:	f04f 0901 	mov.w	r9, #1
 800e036:	4623      	mov	r3, r4
 800e038:	469a      	mov	sl, r3
 800e03a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e03e:	b10a      	cbz	r2, 800e044 <_svfiprintf_r+0x60>
 800e040:	2a25      	cmp	r2, #37	@ 0x25
 800e042:	d1f9      	bne.n	800e038 <_svfiprintf_r+0x54>
 800e044:	ebba 0b04 	subs.w	fp, sl, r4
 800e048:	d00b      	beq.n	800e062 <_svfiprintf_r+0x7e>
 800e04a:	465b      	mov	r3, fp
 800e04c:	4622      	mov	r2, r4
 800e04e:	4629      	mov	r1, r5
 800e050:	4638      	mov	r0, r7
 800e052:	f7ff ff6b 	bl	800df2c <__ssputs_r>
 800e056:	3001      	adds	r0, #1
 800e058:	f000 80a7 	beq.w	800e1aa <_svfiprintf_r+0x1c6>
 800e05c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e05e:	445a      	add	r2, fp
 800e060:	9209      	str	r2, [sp, #36]	@ 0x24
 800e062:	f89a 3000 	ldrb.w	r3, [sl]
 800e066:	2b00      	cmp	r3, #0
 800e068:	f000 809f 	beq.w	800e1aa <_svfiprintf_r+0x1c6>
 800e06c:	2300      	movs	r3, #0
 800e06e:	f04f 32ff 	mov.w	r2, #4294967295
 800e072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e076:	f10a 0a01 	add.w	sl, sl, #1
 800e07a:	9304      	str	r3, [sp, #16]
 800e07c:	9307      	str	r3, [sp, #28]
 800e07e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e082:	931a      	str	r3, [sp, #104]	@ 0x68
 800e084:	4654      	mov	r4, sl
 800e086:	2205      	movs	r2, #5
 800e088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e08c:	484e      	ldr	r0, [pc, #312]	@ (800e1c8 <_svfiprintf_r+0x1e4>)
 800e08e:	f7f2 f8c7 	bl	8000220 <memchr>
 800e092:	9a04      	ldr	r2, [sp, #16]
 800e094:	b9d8      	cbnz	r0, 800e0ce <_svfiprintf_r+0xea>
 800e096:	06d0      	lsls	r0, r2, #27
 800e098:	bf44      	itt	mi
 800e09a:	2320      	movmi	r3, #32
 800e09c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0a0:	0711      	lsls	r1, r2, #28
 800e0a2:	bf44      	itt	mi
 800e0a4:	232b      	movmi	r3, #43	@ 0x2b
 800e0a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0aa:	f89a 3000 	ldrb.w	r3, [sl]
 800e0ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0b0:	d015      	beq.n	800e0de <_svfiprintf_r+0xfa>
 800e0b2:	9a07      	ldr	r2, [sp, #28]
 800e0b4:	4654      	mov	r4, sl
 800e0b6:	2000      	movs	r0, #0
 800e0b8:	f04f 0c0a 	mov.w	ip, #10
 800e0bc:	4621      	mov	r1, r4
 800e0be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0c2:	3b30      	subs	r3, #48	@ 0x30
 800e0c4:	2b09      	cmp	r3, #9
 800e0c6:	d94b      	bls.n	800e160 <_svfiprintf_r+0x17c>
 800e0c8:	b1b0      	cbz	r0, 800e0f8 <_svfiprintf_r+0x114>
 800e0ca:	9207      	str	r2, [sp, #28]
 800e0cc:	e014      	b.n	800e0f8 <_svfiprintf_r+0x114>
 800e0ce:	eba0 0308 	sub.w	r3, r0, r8
 800e0d2:	fa09 f303 	lsl.w	r3, r9, r3
 800e0d6:	4313      	orrs	r3, r2
 800e0d8:	9304      	str	r3, [sp, #16]
 800e0da:	46a2      	mov	sl, r4
 800e0dc:	e7d2      	b.n	800e084 <_svfiprintf_r+0xa0>
 800e0de:	9b03      	ldr	r3, [sp, #12]
 800e0e0:	1d19      	adds	r1, r3, #4
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	9103      	str	r1, [sp, #12]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	bfbb      	ittet	lt
 800e0ea:	425b      	neglt	r3, r3
 800e0ec:	f042 0202 	orrlt.w	r2, r2, #2
 800e0f0:	9307      	strge	r3, [sp, #28]
 800e0f2:	9307      	strlt	r3, [sp, #28]
 800e0f4:	bfb8      	it	lt
 800e0f6:	9204      	strlt	r2, [sp, #16]
 800e0f8:	7823      	ldrb	r3, [r4, #0]
 800e0fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800e0fc:	d10a      	bne.n	800e114 <_svfiprintf_r+0x130>
 800e0fe:	7863      	ldrb	r3, [r4, #1]
 800e100:	2b2a      	cmp	r3, #42	@ 0x2a
 800e102:	d132      	bne.n	800e16a <_svfiprintf_r+0x186>
 800e104:	9b03      	ldr	r3, [sp, #12]
 800e106:	1d1a      	adds	r2, r3, #4
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	9203      	str	r2, [sp, #12]
 800e10c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e110:	3402      	adds	r4, #2
 800e112:	9305      	str	r3, [sp, #20]
 800e114:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e1d8 <_svfiprintf_r+0x1f4>
 800e118:	7821      	ldrb	r1, [r4, #0]
 800e11a:	2203      	movs	r2, #3
 800e11c:	4650      	mov	r0, sl
 800e11e:	f7f2 f87f 	bl	8000220 <memchr>
 800e122:	b138      	cbz	r0, 800e134 <_svfiprintf_r+0x150>
 800e124:	9b04      	ldr	r3, [sp, #16]
 800e126:	eba0 000a 	sub.w	r0, r0, sl
 800e12a:	2240      	movs	r2, #64	@ 0x40
 800e12c:	4082      	lsls	r2, r0
 800e12e:	4313      	orrs	r3, r2
 800e130:	3401      	adds	r4, #1
 800e132:	9304      	str	r3, [sp, #16]
 800e134:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e138:	4824      	ldr	r0, [pc, #144]	@ (800e1cc <_svfiprintf_r+0x1e8>)
 800e13a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e13e:	2206      	movs	r2, #6
 800e140:	f7f2 f86e 	bl	8000220 <memchr>
 800e144:	2800      	cmp	r0, #0
 800e146:	d036      	beq.n	800e1b6 <_svfiprintf_r+0x1d2>
 800e148:	4b21      	ldr	r3, [pc, #132]	@ (800e1d0 <_svfiprintf_r+0x1ec>)
 800e14a:	bb1b      	cbnz	r3, 800e194 <_svfiprintf_r+0x1b0>
 800e14c:	9b03      	ldr	r3, [sp, #12]
 800e14e:	3307      	adds	r3, #7
 800e150:	f023 0307 	bic.w	r3, r3, #7
 800e154:	3308      	adds	r3, #8
 800e156:	9303      	str	r3, [sp, #12]
 800e158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e15a:	4433      	add	r3, r6
 800e15c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e15e:	e76a      	b.n	800e036 <_svfiprintf_r+0x52>
 800e160:	fb0c 3202 	mla	r2, ip, r2, r3
 800e164:	460c      	mov	r4, r1
 800e166:	2001      	movs	r0, #1
 800e168:	e7a8      	b.n	800e0bc <_svfiprintf_r+0xd8>
 800e16a:	2300      	movs	r3, #0
 800e16c:	3401      	adds	r4, #1
 800e16e:	9305      	str	r3, [sp, #20]
 800e170:	4619      	mov	r1, r3
 800e172:	f04f 0c0a 	mov.w	ip, #10
 800e176:	4620      	mov	r0, r4
 800e178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e17c:	3a30      	subs	r2, #48	@ 0x30
 800e17e:	2a09      	cmp	r2, #9
 800e180:	d903      	bls.n	800e18a <_svfiprintf_r+0x1a6>
 800e182:	2b00      	cmp	r3, #0
 800e184:	d0c6      	beq.n	800e114 <_svfiprintf_r+0x130>
 800e186:	9105      	str	r1, [sp, #20]
 800e188:	e7c4      	b.n	800e114 <_svfiprintf_r+0x130>
 800e18a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e18e:	4604      	mov	r4, r0
 800e190:	2301      	movs	r3, #1
 800e192:	e7f0      	b.n	800e176 <_svfiprintf_r+0x192>
 800e194:	ab03      	add	r3, sp, #12
 800e196:	9300      	str	r3, [sp, #0]
 800e198:	462a      	mov	r2, r5
 800e19a:	4b0e      	ldr	r3, [pc, #56]	@ (800e1d4 <_svfiprintf_r+0x1f0>)
 800e19c:	a904      	add	r1, sp, #16
 800e19e:	4638      	mov	r0, r7
 800e1a0:	f7fc fb62 	bl	800a868 <_printf_float>
 800e1a4:	1c42      	adds	r2, r0, #1
 800e1a6:	4606      	mov	r6, r0
 800e1a8:	d1d6      	bne.n	800e158 <_svfiprintf_r+0x174>
 800e1aa:	89ab      	ldrh	r3, [r5, #12]
 800e1ac:	065b      	lsls	r3, r3, #25
 800e1ae:	f53f af2d 	bmi.w	800e00c <_svfiprintf_r+0x28>
 800e1b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e1b4:	e72c      	b.n	800e010 <_svfiprintf_r+0x2c>
 800e1b6:	ab03      	add	r3, sp, #12
 800e1b8:	9300      	str	r3, [sp, #0]
 800e1ba:	462a      	mov	r2, r5
 800e1bc:	4b05      	ldr	r3, [pc, #20]	@ (800e1d4 <_svfiprintf_r+0x1f0>)
 800e1be:	a904      	add	r1, sp, #16
 800e1c0:	4638      	mov	r0, r7
 800e1c2:	f7fc fde9 	bl	800ad98 <_printf_i>
 800e1c6:	e7ed      	b.n	800e1a4 <_svfiprintf_r+0x1c0>
 800e1c8:	0800fa11 	.word	0x0800fa11
 800e1cc:	0800fa1b 	.word	0x0800fa1b
 800e1d0:	0800a869 	.word	0x0800a869
 800e1d4:	0800df2d 	.word	0x0800df2d
 800e1d8:	0800fa17 	.word	0x0800fa17

0800e1dc <__sfputc_r>:
 800e1dc:	6893      	ldr	r3, [r2, #8]
 800e1de:	3b01      	subs	r3, #1
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	b410      	push	{r4}
 800e1e4:	6093      	str	r3, [r2, #8]
 800e1e6:	da08      	bge.n	800e1fa <__sfputc_r+0x1e>
 800e1e8:	6994      	ldr	r4, [r2, #24]
 800e1ea:	42a3      	cmp	r3, r4
 800e1ec:	db01      	blt.n	800e1f2 <__sfputc_r+0x16>
 800e1ee:	290a      	cmp	r1, #10
 800e1f0:	d103      	bne.n	800e1fa <__sfputc_r+0x1e>
 800e1f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1f6:	f7fd ba98 	b.w	800b72a <__swbuf_r>
 800e1fa:	6813      	ldr	r3, [r2, #0]
 800e1fc:	1c58      	adds	r0, r3, #1
 800e1fe:	6010      	str	r0, [r2, #0]
 800e200:	7019      	strb	r1, [r3, #0]
 800e202:	4608      	mov	r0, r1
 800e204:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e208:	4770      	bx	lr

0800e20a <__sfputs_r>:
 800e20a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e20c:	4606      	mov	r6, r0
 800e20e:	460f      	mov	r7, r1
 800e210:	4614      	mov	r4, r2
 800e212:	18d5      	adds	r5, r2, r3
 800e214:	42ac      	cmp	r4, r5
 800e216:	d101      	bne.n	800e21c <__sfputs_r+0x12>
 800e218:	2000      	movs	r0, #0
 800e21a:	e007      	b.n	800e22c <__sfputs_r+0x22>
 800e21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e220:	463a      	mov	r2, r7
 800e222:	4630      	mov	r0, r6
 800e224:	f7ff ffda 	bl	800e1dc <__sfputc_r>
 800e228:	1c43      	adds	r3, r0, #1
 800e22a:	d1f3      	bne.n	800e214 <__sfputs_r+0xa>
 800e22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e230 <_vfiprintf_r>:
 800e230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e234:	460d      	mov	r5, r1
 800e236:	b09d      	sub	sp, #116	@ 0x74
 800e238:	4614      	mov	r4, r2
 800e23a:	4698      	mov	r8, r3
 800e23c:	4606      	mov	r6, r0
 800e23e:	b118      	cbz	r0, 800e248 <_vfiprintf_r+0x18>
 800e240:	6a03      	ldr	r3, [r0, #32]
 800e242:	b90b      	cbnz	r3, 800e248 <_vfiprintf_r+0x18>
 800e244:	f7fd f968 	bl	800b518 <__sinit>
 800e248:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e24a:	07d9      	lsls	r1, r3, #31
 800e24c:	d405      	bmi.n	800e25a <_vfiprintf_r+0x2a>
 800e24e:	89ab      	ldrh	r3, [r5, #12]
 800e250:	059a      	lsls	r2, r3, #22
 800e252:	d402      	bmi.n	800e25a <_vfiprintf_r+0x2a>
 800e254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e256:	f7fd fbd0 	bl	800b9fa <__retarget_lock_acquire_recursive>
 800e25a:	89ab      	ldrh	r3, [r5, #12]
 800e25c:	071b      	lsls	r3, r3, #28
 800e25e:	d501      	bpl.n	800e264 <_vfiprintf_r+0x34>
 800e260:	692b      	ldr	r3, [r5, #16]
 800e262:	b99b      	cbnz	r3, 800e28c <_vfiprintf_r+0x5c>
 800e264:	4629      	mov	r1, r5
 800e266:	4630      	mov	r0, r6
 800e268:	f7fd fa9e 	bl	800b7a8 <__swsetup_r>
 800e26c:	b170      	cbz	r0, 800e28c <_vfiprintf_r+0x5c>
 800e26e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e270:	07dc      	lsls	r4, r3, #31
 800e272:	d504      	bpl.n	800e27e <_vfiprintf_r+0x4e>
 800e274:	f04f 30ff 	mov.w	r0, #4294967295
 800e278:	b01d      	add	sp, #116	@ 0x74
 800e27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e27e:	89ab      	ldrh	r3, [r5, #12]
 800e280:	0598      	lsls	r0, r3, #22
 800e282:	d4f7      	bmi.n	800e274 <_vfiprintf_r+0x44>
 800e284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e286:	f7fd fbb9 	bl	800b9fc <__retarget_lock_release_recursive>
 800e28a:	e7f3      	b.n	800e274 <_vfiprintf_r+0x44>
 800e28c:	2300      	movs	r3, #0
 800e28e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e290:	2320      	movs	r3, #32
 800e292:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e296:	f8cd 800c 	str.w	r8, [sp, #12]
 800e29a:	2330      	movs	r3, #48	@ 0x30
 800e29c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e44c <_vfiprintf_r+0x21c>
 800e2a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e2a4:	f04f 0901 	mov.w	r9, #1
 800e2a8:	4623      	mov	r3, r4
 800e2aa:	469a      	mov	sl, r3
 800e2ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2b0:	b10a      	cbz	r2, 800e2b6 <_vfiprintf_r+0x86>
 800e2b2:	2a25      	cmp	r2, #37	@ 0x25
 800e2b4:	d1f9      	bne.n	800e2aa <_vfiprintf_r+0x7a>
 800e2b6:	ebba 0b04 	subs.w	fp, sl, r4
 800e2ba:	d00b      	beq.n	800e2d4 <_vfiprintf_r+0xa4>
 800e2bc:	465b      	mov	r3, fp
 800e2be:	4622      	mov	r2, r4
 800e2c0:	4629      	mov	r1, r5
 800e2c2:	4630      	mov	r0, r6
 800e2c4:	f7ff ffa1 	bl	800e20a <__sfputs_r>
 800e2c8:	3001      	adds	r0, #1
 800e2ca:	f000 80a7 	beq.w	800e41c <_vfiprintf_r+0x1ec>
 800e2ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e2d0:	445a      	add	r2, fp
 800e2d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e2d4:	f89a 3000 	ldrb.w	r3, [sl]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	f000 809f 	beq.w	800e41c <_vfiprintf_r+0x1ec>
 800e2de:	2300      	movs	r3, #0
 800e2e0:	f04f 32ff 	mov.w	r2, #4294967295
 800e2e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2e8:	f10a 0a01 	add.w	sl, sl, #1
 800e2ec:	9304      	str	r3, [sp, #16]
 800e2ee:	9307      	str	r3, [sp, #28]
 800e2f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e2f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e2f6:	4654      	mov	r4, sl
 800e2f8:	2205      	movs	r2, #5
 800e2fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2fe:	4853      	ldr	r0, [pc, #332]	@ (800e44c <_vfiprintf_r+0x21c>)
 800e300:	f7f1 ff8e 	bl	8000220 <memchr>
 800e304:	9a04      	ldr	r2, [sp, #16]
 800e306:	b9d8      	cbnz	r0, 800e340 <_vfiprintf_r+0x110>
 800e308:	06d1      	lsls	r1, r2, #27
 800e30a:	bf44      	itt	mi
 800e30c:	2320      	movmi	r3, #32
 800e30e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e312:	0713      	lsls	r3, r2, #28
 800e314:	bf44      	itt	mi
 800e316:	232b      	movmi	r3, #43	@ 0x2b
 800e318:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e31c:	f89a 3000 	ldrb.w	r3, [sl]
 800e320:	2b2a      	cmp	r3, #42	@ 0x2a
 800e322:	d015      	beq.n	800e350 <_vfiprintf_r+0x120>
 800e324:	9a07      	ldr	r2, [sp, #28]
 800e326:	4654      	mov	r4, sl
 800e328:	2000      	movs	r0, #0
 800e32a:	f04f 0c0a 	mov.w	ip, #10
 800e32e:	4621      	mov	r1, r4
 800e330:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e334:	3b30      	subs	r3, #48	@ 0x30
 800e336:	2b09      	cmp	r3, #9
 800e338:	d94b      	bls.n	800e3d2 <_vfiprintf_r+0x1a2>
 800e33a:	b1b0      	cbz	r0, 800e36a <_vfiprintf_r+0x13a>
 800e33c:	9207      	str	r2, [sp, #28]
 800e33e:	e014      	b.n	800e36a <_vfiprintf_r+0x13a>
 800e340:	eba0 0308 	sub.w	r3, r0, r8
 800e344:	fa09 f303 	lsl.w	r3, r9, r3
 800e348:	4313      	orrs	r3, r2
 800e34a:	9304      	str	r3, [sp, #16]
 800e34c:	46a2      	mov	sl, r4
 800e34e:	e7d2      	b.n	800e2f6 <_vfiprintf_r+0xc6>
 800e350:	9b03      	ldr	r3, [sp, #12]
 800e352:	1d19      	adds	r1, r3, #4
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	9103      	str	r1, [sp, #12]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	bfbb      	ittet	lt
 800e35c:	425b      	neglt	r3, r3
 800e35e:	f042 0202 	orrlt.w	r2, r2, #2
 800e362:	9307      	strge	r3, [sp, #28]
 800e364:	9307      	strlt	r3, [sp, #28]
 800e366:	bfb8      	it	lt
 800e368:	9204      	strlt	r2, [sp, #16]
 800e36a:	7823      	ldrb	r3, [r4, #0]
 800e36c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e36e:	d10a      	bne.n	800e386 <_vfiprintf_r+0x156>
 800e370:	7863      	ldrb	r3, [r4, #1]
 800e372:	2b2a      	cmp	r3, #42	@ 0x2a
 800e374:	d132      	bne.n	800e3dc <_vfiprintf_r+0x1ac>
 800e376:	9b03      	ldr	r3, [sp, #12]
 800e378:	1d1a      	adds	r2, r3, #4
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	9203      	str	r2, [sp, #12]
 800e37e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e382:	3402      	adds	r4, #2
 800e384:	9305      	str	r3, [sp, #20]
 800e386:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e45c <_vfiprintf_r+0x22c>
 800e38a:	7821      	ldrb	r1, [r4, #0]
 800e38c:	2203      	movs	r2, #3
 800e38e:	4650      	mov	r0, sl
 800e390:	f7f1 ff46 	bl	8000220 <memchr>
 800e394:	b138      	cbz	r0, 800e3a6 <_vfiprintf_r+0x176>
 800e396:	9b04      	ldr	r3, [sp, #16]
 800e398:	eba0 000a 	sub.w	r0, r0, sl
 800e39c:	2240      	movs	r2, #64	@ 0x40
 800e39e:	4082      	lsls	r2, r0
 800e3a0:	4313      	orrs	r3, r2
 800e3a2:	3401      	adds	r4, #1
 800e3a4:	9304      	str	r3, [sp, #16]
 800e3a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3aa:	4829      	ldr	r0, [pc, #164]	@ (800e450 <_vfiprintf_r+0x220>)
 800e3ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e3b0:	2206      	movs	r2, #6
 800e3b2:	f7f1 ff35 	bl	8000220 <memchr>
 800e3b6:	2800      	cmp	r0, #0
 800e3b8:	d03f      	beq.n	800e43a <_vfiprintf_r+0x20a>
 800e3ba:	4b26      	ldr	r3, [pc, #152]	@ (800e454 <_vfiprintf_r+0x224>)
 800e3bc:	bb1b      	cbnz	r3, 800e406 <_vfiprintf_r+0x1d6>
 800e3be:	9b03      	ldr	r3, [sp, #12]
 800e3c0:	3307      	adds	r3, #7
 800e3c2:	f023 0307 	bic.w	r3, r3, #7
 800e3c6:	3308      	adds	r3, #8
 800e3c8:	9303      	str	r3, [sp, #12]
 800e3ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3cc:	443b      	add	r3, r7
 800e3ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3d0:	e76a      	b.n	800e2a8 <_vfiprintf_r+0x78>
 800e3d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3d6:	460c      	mov	r4, r1
 800e3d8:	2001      	movs	r0, #1
 800e3da:	e7a8      	b.n	800e32e <_vfiprintf_r+0xfe>
 800e3dc:	2300      	movs	r3, #0
 800e3de:	3401      	adds	r4, #1
 800e3e0:	9305      	str	r3, [sp, #20]
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	f04f 0c0a 	mov.w	ip, #10
 800e3e8:	4620      	mov	r0, r4
 800e3ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3ee:	3a30      	subs	r2, #48	@ 0x30
 800e3f0:	2a09      	cmp	r2, #9
 800e3f2:	d903      	bls.n	800e3fc <_vfiprintf_r+0x1cc>
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d0c6      	beq.n	800e386 <_vfiprintf_r+0x156>
 800e3f8:	9105      	str	r1, [sp, #20]
 800e3fa:	e7c4      	b.n	800e386 <_vfiprintf_r+0x156>
 800e3fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e400:	4604      	mov	r4, r0
 800e402:	2301      	movs	r3, #1
 800e404:	e7f0      	b.n	800e3e8 <_vfiprintf_r+0x1b8>
 800e406:	ab03      	add	r3, sp, #12
 800e408:	9300      	str	r3, [sp, #0]
 800e40a:	462a      	mov	r2, r5
 800e40c:	4b12      	ldr	r3, [pc, #72]	@ (800e458 <_vfiprintf_r+0x228>)
 800e40e:	a904      	add	r1, sp, #16
 800e410:	4630      	mov	r0, r6
 800e412:	f7fc fa29 	bl	800a868 <_printf_float>
 800e416:	4607      	mov	r7, r0
 800e418:	1c78      	adds	r0, r7, #1
 800e41a:	d1d6      	bne.n	800e3ca <_vfiprintf_r+0x19a>
 800e41c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e41e:	07d9      	lsls	r1, r3, #31
 800e420:	d405      	bmi.n	800e42e <_vfiprintf_r+0x1fe>
 800e422:	89ab      	ldrh	r3, [r5, #12]
 800e424:	059a      	lsls	r2, r3, #22
 800e426:	d402      	bmi.n	800e42e <_vfiprintf_r+0x1fe>
 800e428:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e42a:	f7fd fae7 	bl	800b9fc <__retarget_lock_release_recursive>
 800e42e:	89ab      	ldrh	r3, [r5, #12]
 800e430:	065b      	lsls	r3, r3, #25
 800e432:	f53f af1f 	bmi.w	800e274 <_vfiprintf_r+0x44>
 800e436:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e438:	e71e      	b.n	800e278 <_vfiprintf_r+0x48>
 800e43a:	ab03      	add	r3, sp, #12
 800e43c:	9300      	str	r3, [sp, #0]
 800e43e:	462a      	mov	r2, r5
 800e440:	4b05      	ldr	r3, [pc, #20]	@ (800e458 <_vfiprintf_r+0x228>)
 800e442:	a904      	add	r1, sp, #16
 800e444:	4630      	mov	r0, r6
 800e446:	f7fc fca7 	bl	800ad98 <_printf_i>
 800e44a:	e7e4      	b.n	800e416 <_vfiprintf_r+0x1e6>
 800e44c:	0800fa11 	.word	0x0800fa11
 800e450:	0800fa1b 	.word	0x0800fa1b
 800e454:	0800a869 	.word	0x0800a869
 800e458:	0800e20b 	.word	0x0800e20b
 800e45c:	0800fa17 	.word	0x0800fa17

0800e460 <__sflush_r>:
 800e460:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e468:	0716      	lsls	r6, r2, #28
 800e46a:	4605      	mov	r5, r0
 800e46c:	460c      	mov	r4, r1
 800e46e:	d454      	bmi.n	800e51a <__sflush_r+0xba>
 800e470:	684b      	ldr	r3, [r1, #4]
 800e472:	2b00      	cmp	r3, #0
 800e474:	dc02      	bgt.n	800e47c <__sflush_r+0x1c>
 800e476:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e478:	2b00      	cmp	r3, #0
 800e47a:	dd48      	ble.n	800e50e <__sflush_r+0xae>
 800e47c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e47e:	2e00      	cmp	r6, #0
 800e480:	d045      	beq.n	800e50e <__sflush_r+0xae>
 800e482:	2300      	movs	r3, #0
 800e484:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e488:	682f      	ldr	r7, [r5, #0]
 800e48a:	6a21      	ldr	r1, [r4, #32]
 800e48c:	602b      	str	r3, [r5, #0]
 800e48e:	d030      	beq.n	800e4f2 <__sflush_r+0x92>
 800e490:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e492:	89a3      	ldrh	r3, [r4, #12]
 800e494:	0759      	lsls	r1, r3, #29
 800e496:	d505      	bpl.n	800e4a4 <__sflush_r+0x44>
 800e498:	6863      	ldr	r3, [r4, #4]
 800e49a:	1ad2      	subs	r2, r2, r3
 800e49c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e49e:	b10b      	cbz	r3, 800e4a4 <__sflush_r+0x44>
 800e4a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e4a2:	1ad2      	subs	r2, r2, r3
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e4a8:	6a21      	ldr	r1, [r4, #32]
 800e4aa:	4628      	mov	r0, r5
 800e4ac:	47b0      	blx	r6
 800e4ae:	1c43      	adds	r3, r0, #1
 800e4b0:	89a3      	ldrh	r3, [r4, #12]
 800e4b2:	d106      	bne.n	800e4c2 <__sflush_r+0x62>
 800e4b4:	6829      	ldr	r1, [r5, #0]
 800e4b6:	291d      	cmp	r1, #29
 800e4b8:	d82b      	bhi.n	800e512 <__sflush_r+0xb2>
 800e4ba:	4a2a      	ldr	r2, [pc, #168]	@ (800e564 <__sflush_r+0x104>)
 800e4bc:	410a      	asrs	r2, r1
 800e4be:	07d6      	lsls	r6, r2, #31
 800e4c0:	d427      	bmi.n	800e512 <__sflush_r+0xb2>
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	6062      	str	r2, [r4, #4]
 800e4c6:	04d9      	lsls	r1, r3, #19
 800e4c8:	6922      	ldr	r2, [r4, #16]
 800e4ca:	6022      	str	r2, [r4, #0]
 800e4cc:	d504      	bpl.n	800e4d8 <__sflush_r+0x78>
 800e4ce:	1c42      	adds	r2, r0, #1
 800e4d0:	d101      	bne.n	800e4d6 <__sflush_r+0x76>
 800e4d2:	682b      	ldr	r3, [r5, #0]
 800e4d4:	b903      	cbnz	r3, 800e4d8 <__sflush_r+0x78>
 800e4d6:	6560      	str	r0, [r4, #84]	@ 0x54
 800e4d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e4da:	602f      	str	r7, [r5, #0]
 800e4dc:	b1b9      	cbz	r1, 800e50e <__sflush_r+0xae>
 800e4de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e4e2:	4299      	cmp	r1, r3
 800e4e4:	d002      	beq.n	800e4ec <__sflush_r+0x8c>
 800e4e6:	4628      	mov	r0, r5
 800e4e8:	f7fe f8ea 	bl	800c6c0 <_free_r>
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	6363      	str	r3, [r4, #52]	@ 0x34
 800e4f0:	e00d      	b.n	800e50e <__sflush_r+0xae>
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	4628      	mov	r0, r5
 800e4f6:	47b0      	blx	r6
 800e4f8:	4602      	mov	r2, r0
 800e4fa:	1c50      	adds	r0, r2, #1
 800e4fc:	d1c9      	bne.n	800e492 <__sflush_r+0x32>
 800e4fe:	682b      	ldr	r3, [r5, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d0c6      	beq.n	800e492 <__sflush_r+0x32>
 800e504:	2b1d      	cmp	r3, #29
 800e506:	d001      	beq.n	800e50c <__sflush_r+0xac>
 800e508:	2b16      	cmp	r3, #22
 800e50a:	d11e      	bne.n	800e54a <__sflush_r+0xea>
 800e50c:	602f      	str	r7, [r5, #0]
 800e50e:	2000      	movs	r0, #0
 800e510:	e022      	b.n	800e558 <__sflush_r+0xf8>
 800e512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e516:	b21b      	sxth	r3, r3
 800e518:	e01b      	b.n	800e552 <__sflush_r+0xf2>
 800e51a:	690f      	ldr	r7, [r1, #16]
 800e51c:	2f00      	cmp	r7, #0
 800e51e:	d0f6      	beq.n	800e50e <__sflush_r+0xae>
 800e520:	0793      	lsls	r3, r2, #30
 800e522:	680e      	ldr	r6, [r1, #0]
 800e524:	bf08      	it	eq
 800e526:	694b      	ldreq	r3, [r1, #20]
 800e528:	600f      	str	r7, [r1, #0]
 800e52a:	bf18      	it	ne
 800e52c:	2300      	movne	r3, #0
 800e52e:	eba6 0807 	sub.w	r8, r6, r7
 800e532:	608b      	str	r3, [r1, #8]
 800e534:	f1b8 0f00 	cmp.w	r8, #0
 800e538:	dde9      	ble.n	800e50e <__sflush_r+0xae>
 800e53a:	6a21      	ldr	r1, [r4, #32]
 800e53c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e53e:	4643      	mov	r3, r8
 800e540:	463a      	mov	r2, r7
 800e542:	4628      	mov	r0, r5
 800e544:	47b0      	blx	r6
 800e546:	2800      	cmp	r0, #0
 800e548:	dc08      	bgt.n	800e55c <__sflush_r+0xfc>
 800e54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e54e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e552:	81a3      	strh	r3, [r4, #12]
 800e554:	f04f 30ff 	mov.w	r0, #4294967295
 800e558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e55c:	4407      	add	r7, r0
 800e55e:	eba8 0800 	sub.w	r8, r8, r0
 800e562:	e7e7      	b.n	800e534 <__sflush_r+0xd4>
 800e564:	dfbffffe 	.word	0xdfbffffe

0800e568 <_fflush_r>:
 800e568:	b538      	push	{r3, r4, r5, lr}
 800e56a:	690b      	ldr	r3, [r1, #16]
 800e56c:	4605      	mov	r5, r0
 800e56e:	460c      	mov	r4, r1
 800e570:	b913      	cbnz	r3, 800e578 <_fflush_r+0x10>
 800e572:	2500      	movs	r5, #0
 800e574:	4628      	mov	r0, r5
 800e576:	bd38      	pop	{r3, r4, r5, pc}
 800e578:	b118      	cbz	r0, 800e582 <_fflush_r+0x1a>
 800e57a:	6a03      	ldr	r3, [r0, #32]
 800e57c:	b90b      	cbnz	r3, 800e582 <_fflush_r+0x1a>
 800e57e:	f7fc ffcb 	bl	800b518 <__sinit>
 800e582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d0f3      	beq.n	800e572 <_fflush_r+0xa>
 800e58a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e58c:	07d0      	lsls	r0, r2, #31
 800e58e:	d404      	bmi.n	800e59a <_fflush_r+0x32>
 800e590:	0599      	lsls	r1, r3, #22
 800e592:	d402      	bmi.n	800e59a <_fflush_r+0x32>
 800e594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e596:	f7fd fa30 	bl	800b9fa <__retarget_lock_acquire_recursive>
 800e59a:	4628      	mov	r0, r5
 800e59c:	4621      	mov	r1, r4
 800e59e:	f7ff ff5f 	bl	800e460 <__sflush_r>
 800e5a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e5a4:	07da      	lsls	r2, r3, #31
 800e5a6:	4605      	mov	r5, r0
 800e5a8:	d4e4      	bmi.n	800e574 <_fflush_r+0xc>
 800e5aa:	89a3      	ldrh	r3, [r4, #12]
 800e5ac:	059b      	lsls	r3, r3, #22
 800e5ae:	d4e1      	bmi.n	800e574 <_fflush_r+0xc>
 800e5b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e5b2:	f7fd fa23 	bl	800b9fc <__retarget_lock_release_recursive>
 800e5b6:	e7dd      	b.n	800e574 <_fflush_r+0xc>

0800e5b8 <__swhatbuf_r>:
 800e5b8:	b570      	push	{r4, r5, r6, lr}
 800e5ba:	460c      	mov	r4, r1
 800e5bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5c0:	2900      	cmp	r1, #0
 800e5c2:	b096      	sub	sp, #88	@ 0x58
 800e5c4:	4615      	mov	r5, r2
 800e5c6:	461e      	mov	r6, r3
 800e5c8:	da0d      	bge.n	800e5e6 <__swhatbuf_r+0x2e>
 800e5ca:	89a3      	ldrh	r3, [r4, #12]
 800e5cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e5d0:	f04f 0100 	mov.w	r1, #0
 800e5d4:	bf14      	ite	ne
 800e5d6:	2340      	movne	r3, #64	@ 0x40
 800e5d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e5dc:	2000      	movs	r0, #0
 800e5de:	6031      	str	r1, [r6, #0]
 800e5e0:	602b      	str	r3, [r5, #0]
 800e5e2:	b016      	add	sp, #88	@ 0x58
 800e5e4:	bd70      	pop	{r4, r5, r6, pc}
 800e5e6:	466a      	mov	r2, sp
 800e5e8:	f000 f874 	bl	800e6d4 <_fstat_r>
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	dbec      	blt.n	800e5ca <__swhatbuf_r+0x12>
 800e5f0:	9901      	ldr	r1, [sp, #4]
 800e5f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e5f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e5fa:	4259      	negs	r1, r3
 800e5fc:	4159      	adcs	r1, r3
 800e5fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e602:	e7eb      	b.n	800e5dc <__swhatbuf_r+0x24>

0800e604 <__smakebuf_r>:
 800e604:	898b      	ldrh	r3, [r1, #12]
 800e606:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e608:	079d      	lsls	r5, r3, #30
 800e60a:	4606      	mov	r6, r0
 800e60c:	460c      	mov	r4, r1
 800e60e:	d507      	bpl.n	800e620 <__smakebuf_r+0x1c>
 800e610:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e614:	6023      	str	r3, [r4, #0]
 800e616:	6123      	str	r3, [r4, #16]
 800e618:	2301      	movs	r3, #1
 800e61a:	6163      	str	r3, [r4, #20]
 800e61c:	b003      	add	sp, #12
 800e61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e620:	ab01      	add	r3, sp, #4
 800e622:	466a      	mov	r2, sp
 800e624:	f7ff ffc8 	bl	800e5b8 <__swhatbuf_r>
 800e628:	9f00      	ldr	r7, [sp, #0]
 800e62a:	4605      	mov	r5, r0
 800e62c:	4639      	mov	r1, r7
 800e62e:	4630      	mov	r0, r6
 800e630:	f7fe f8ba 	bl	800c7a8 <_malloc_r>
 800e634:	b948      	cbnz	r0, 800e64a <__smakebuf_r+0x46>
 800e636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e63a:	059a      	lsls	r2, r3, #22
 800e63c:	d4ee      	bmi.n	800e61c <__smakebuf_r+0x18>
 800e63e:	f023 0303 	bic.w	r3, r3, #3
 800e642:	f043 0302 	orr.w	r3, r3, #2
 800e646:	81a3      	strh	r3, [r4, #12]
 800e648:	e7e2      	b.n	800e610 <__smakebuf_r+0xc>
 800e64a:	89a3      	ldrh	r3, [r4, #12]
 800e64c:	6020      	str	r0, [r4, #0]
 800e64e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e652:	81a3      	strh	r3, [r4, #12]
 800e654:	9b01      	ldr	r3, [sp, #4]
 800e656:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e65a:	b15b      	cbz	r3, 800e674 <__smakebuf_r+0x70>
 800e65c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e660:	4630      	mov	r0, r6
 800e662:	f000 f849 	bl	800e6f8 <_isatty_r>
 800e666:	b128      	cbz	r0, 800e674 <__smakebuf_r+0x70>
 800e668:	89a3      	ldrh	r3, [r4, #12]
 800e66a:	f023 0303 	bic.w	r3, r3, #3
 800e66e:	f043 0301 	orr.w	r3, r3, #1
 800e672:	81a3      	strh	r3, [r4, #12]
 800e674:	89a3      	ldrh	r3, [r4, #12]
 800e676:	431d      	orrs	r5, r3
 800e678:	81a5      	strh	r5, [r4, #12]
 800e67a:	e7cf      	b.n	800e61c <__smakebuf_r+0x18>

0800e67c <memmove>:
 800e67c:	4288      	cmp	r0, r1
 800e67e:	b510      	push	{r4, lr}
 800e680:	eb01 0402 	add.w	r4, r1, r2
 800e684:	d902      	bls.n	800e68c <memmove+0x10>
 800e686:	4284      	cmp	r4, r0
 800e688:	4623      	mov	r3, r4
 800e68a:	d807      	bhi.n	800e69c <memmove+0x20>
 800e68c:	1e43      	subs	r3, r0, #1
 800e68e:	42a1      	cmp	r1, r4
 800e690:	d008      	beq.n	800e6a4 <memmove+0x28>
 800e692:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e696:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e69a:	e7f8      	b.n	800e68e <memmove+0x12>
 800e69c:	4402      	add	r2, r0
 800e69e:	4601      	mov	r1, r0
 800e6a0:	428a      	cmp	r2, r1
 800e6a2:	d100      	bne.n	800e6a6 <memmove+0x2a>
 800e6a4:	bd10      	pop	{r4, pc}
 800e6a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e6aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e6ae:	e7f7      	b.n	800e6a0 <memmove+0x24>

0800e6b0 <strncmp>:
 800e6b0:	b510      	push	{r4, lr}
 800e6b2:	b16a      	cbz	r2, 800e6d0 <strncmp+0x20>
 800e6b4:	3901      	subs	r1, #1
 800e6b6:	1884      	adds	r4, r0, r2
 800e6b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d103      	bne.n	800e6cc <strncmp+0x1c>
 800e6c4:	42a0      	cmp	r0, r4
 800e6c6:	d001      	beq.n	800e6cc <strncmp+0x1c>
 800e6c8:	2a00      	cmp	r2, #0
 800e6ca:	d1f5      	bne.n	800e6b8 <strncmp+0x8>
 800e6cc:	1ad0      	subs	r0, r2, r3
 800e6ce:	bd10      	pop	{r4, pc}
 800e6d0:	4610      	mov	r0, r2
 800e6d2:	e7fc      	b.n	800e6ce <strncmp+0x1e>

0800e6d4 <_fstat_r>:
 800e6d4:	b538      	push	{r3, r4, r5, lr}
 800e6d6:	4d07      	ldr	r5, [pc, #28]	@ (800e6f4 <_fstat_r+0x20>)
 800e6d8:	2300      	movs	r3, #0
 800e6da:	4604      	mov	r4, r0
 800e6dc:	4608      	mov	r0, r1
 800e6de:	4611      	mov	r1, r2
 800e6e0:	602b      	str	r3, [r5, #0]
 800e6e2:	f7f4 f907 	bl	80028f4 <_fstat>
 800e6e6:	1c43      	adds	r3, r0, #1
 800e6e8:	d102      	bne.n	800e6f0 <_fstat_r+0x1c>
 800e6ea:	682b      	ldr	r3, [r5, #0]
 800e6ec:	b103      	cbz	r3, 800e6f0 <_fstat_r+0x1c>
 800e6ee:	6023      	str	r3, [r4, #0]
 800e6f0:	bd38      	pop	{r3, r4, r5, pc}
 800e6f2:	bf00      	nop
 800e6f4:	20003c70 	.word	0x20003c70

0800e6f8 <_isatty_r>:
 800e6f8:	b538      	push	{r3, r4, r5, lr}
 800e6fa:	4d06      	ldr	r5, [pc, #24]	@ (800e714 <_isatty_r+0x1c>)
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	4604      	mov	r4, r0
 800e700:	4608      	mov	r0, r1
 800e702:	602b      	str	r3, [r5, #0]
 800e704:	f7f4 f906 	bl	8002914 <_isatty>
 800e708:	1c43      	adds	r3, r0, #1
 800e70a:	d102      	bne.n	800e712 <_isatty_r+0x1a>
 800e70c:	682b      	ldr	r3, [r5, #0]
 800e70e:	b103      	cbz	r3, 800e712 <_isatty_r+0x1a>
 800e710:	6023      	str	r3, [r4, #0]
 800e712:	bd38      	pop	{r3, r4, r5, pc}
 800e714:	20003c70 	.word	0x20003c70

0800e718 <_sbrk_r>:
 800e718:	b538      	push	{r3, r4, r5, lr}
 800e71a:	4d06      	ldr	r5, [pc, #24]	@ (800e734 <_sbrk_r+0x1c>)
 800e71c:	2300      	movs	r3, #0
 800e71e:	4604      	mov	r4, r0
 800e720:	4608      	mov	r0, r1
 800e722:	602b      	str	r3, [r5, #0]
 800e724:	f7f4 f90e 	bl	8002944 <_sbrk>
 800e728:	1c43      	adds	r3, r0, #1
 800e72a:	d102      	bne.n	800e732 <_sbrk_r+0x1a>
 800e72c:	682b      	ldr	r3, [r5, #0]
 800e72e:	b103      	cbz	r3, 800e732 <_sbrk_r+0x1a>
 800e730:	6023      	str	r3, [r4, #0]
 800e732:	bd38      	pop	{r3, r4, r5, pc}
 800e734:	20003c70 	.word	0x20003c70

0800e738 <nan>:
 800e738:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e740 <nan+0x8>
 800e73c:	4770      	bx	lr
 800e73e:	bf00      	nop
 800e740:	00000000 	.word	0x00000000
 800e744:	7ff80000 	.word	0x7ff80000

0800e748 <__assert_func>:
 800e748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e74a:	4614      	mov	r4, r2
 800e74c:	461a      	mov	r2, r3
 800e74e:	4b09      	ldr	r3, [pc, #36]	@ (800e774 <__assert_func+0x2c>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	4605      	mov	r5, r0
 800e754:	68d8      	ldr	r0, [r3, #12]
 800e756:	b954      	cbnz	r4, 800e76e <__assert_func+0x26>
 800e758:	4b07      	ldr	r3, [pc, #28]	@ (800e778 <__assert_func+0x30>)
 800e75a:	461c      	mov	r4, r3
 800e75c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e760:	9100      	str	r1, [sp, #0]
 800e762:	462b      	mov	r3, r5
 800e764:	4905      	ldr	r1, [pc, #20]	@ (800e77c <__assert_func+0x34>)
 800e766:	f000 fba7 	bl	800eeb8 <fiprintf>
 800e76a:	f000 fbb7 	bl	800eedc <abort>
 800e76e:	4b04      	ldr	r3, [pc, #16]	@ (800e780 <__assert_func+0x38>)
 800e770:	e7f4      	b.n	800e75c <__assert_func+0x14>
 800e772:	bf00      	nop
 800e774:	2000001c 	.word	0x2000001c
 800e778:	0800fa65 	.word	0x0800fa65
 800e77c:	0800fa37 	.word	0x0800fa37
 800e780:	0800fa2a 	.word	0x0800fa2a

0800e784 <_calloc_r>:
 800e784:	b570      	push	{r4, r5, r6, lr}
 800e786:	fba1 5402 	umull	r5, r4, r1, r2
 800e78a:	b93c      	cbnz	r4, 800e79c <_calloc_r+0x18>
 800e78c:	4629      	mov	r1, r5
 800e78e:	f7fe f80b 	bl	800c7a8 <_malloc_r>
 800e792:	4606      	mov	r6, r0
 800e794:	b928      	cbnz	r0, 800e7a2 <_calloc_r+0x1e>
 800e796:	2600      	movs	r6, #0
 800e798:	4630      	mov	r0, r6
 800e79a:	bd70      	pop	{r4, r5, r6, pc}
 800e79c:	220c      	movs	r2, #12
 800e79e:	6002      	str	r2, [r0, #0]
 800e7a0:	e7f9      	b.n	800e796 <_calloc_r+0x12>
 800e7a2:	462a      	mov	r2, r5
 800e7a4:	4621      	mov	r1, r4
 800e7a6:	f7fd f855 	bl	800b854 <memset>
 800e7aa:	e7f5      	b.n	800e798 <_calloc_r+0x14>

0800e7ac <rshift>:
 800e7ac:	6903      	ldr	r3, [r0, #16]
 800e7ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e7b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e7b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e7ba:	f100 0414 	add.w	r4, r0, #20
 800e7be:	dd45      	ble.n	800e84c <rshift+0xa0>
 800e7c0:	f011 011f 	ands.w	r1, r1, #31
 800e7c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e7c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e7cc:	d10c      	bne.n	800e7e8 <rshift+0x3c>
 800e7ce:	f100 0710 	add.w	r7, r0, #16
 800e7d2:	4629      	mov	r1, r5
 800e7d4:	42b1      	cmp	r1, r6
 800e7d6:	d334      	bcc.n	800e842 <rshift+0x96>
 800e7d8:	1a9b      	subs	r3, r3, r2
 800e7da:	009b      	lsls	r3, r3, #2
 800e7dc:	1eea      	subs	r2, r5, #3
 800e7de:	4296      	cmp	r6, r2
 800e7e0:	bf38      	it	cc
 800e7e2:	2300      	movcc	r3, #0
 800e7e4:	4423      	add	r3, r4
 800e7e6:	e015      	b.n	800e814 <rshift+0x68>
 800e7e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e7ec:	f1c1 0820 	rsb	r8, r1, #32
 800e7f0:	40cf      	lsrs	r7, r1
 800e7f2:	f105 0e04 	add.w	lr, r5, #4
 800e7f6:	46a1      	mov	r9, r4
 800e7f8:	4576      	cmp	r6, lr
 800e7fa:	46f4      	mov	ip, lr
 800e7fc:	d815      	bhi.n	800e82a <rshift+0x7e>
 800e7fe:	1a9a      	subs	r2, r3, r2
 800e800:	0092      	lsls	r2, r2, #2
 800e802:	3a04      	subs	r2, #4
 800e804:	3501      	adds	r5, #1
 800e806:	42ae      	cmp	r6, r5
 800e808:	bf38      	it	cc
 800e80a:	2200      	movcc	r2, #0
 800e80c:	18a3      	adds	r3, r4, r2
 800e80e:	50a7      	str	r7, [r4, r2]
 800e810:	b107      	cbz	r7, 800e814 <rshift+0x68>
 800e812:	3304      	adds	r3, #4
 800e814:	1b1a      	subs	r2, r3, r4
 800e816:	42a3      	cmp	r3, r4
 800e818:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e81c:	bf08      	it	eq
 800e81e:	2300      	moveq	r3, #0
 800e820:	6102      	str	r2, [r0, #16]
 800e822:	bf08      	it	eq
 800e824:	6143      	streq	r3, [r0, #20]
 800e826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e82a:	f8dc c000 	ldr.w	ip, [ip]
 800e82e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e832:	ea4c 0707 	orr.w	r7, ip, r7
 800e836:	f849 7b04 	str.w	r7, [r9], #4
 800e83a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e83e:	40cf      	lsrs	r7, r1
 800e840:	e7da      	b.n	800e7f8 <rshift+0x4c>
 800e842:	f851 cb04 	ldr.w	ip, [r1], #4
 800e846:	f847 cf04 	str.w	ip, [r7, #4]!
 800e84a:	e7c3      	b.n	800e7d4 <rshift+0x28>
 800e84c:	4623      	mov	r3, r4
 800e84e:	e7e1      	b.n	800e814 <rshift+0x68>

0800e850 <__hexdig_fun>:
 800e850:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e854:	2b09      	cmp	r3, #9
 800e856:	d802      	bhi.n	800e85e <__hexdig_fun+0xe>
 800e858:	3820      	subs	r0, #32
 800e85a:	b2c0      	uxtb	r0, r0
 800e85c:	4770      	bx	lr
 800e85e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e862:	2b05      	cmp	r3, #5
 800e864:	d801      	bhi.n	800e86a <__hexdig_fun+0x1a>
 800e866:	3847      	subs	r0, #71	@ 0x47
 800e868:	e7f7      	b.n	800e85a <__hexdig_fun+0xa>
 800e86a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e86e:	2b05      	cmp	r3, #5
 800e870:	d801      	bhi.n	800e876 <__hexdig_fun+0x26>
 800e872:	3827      	subs	r0, #39	@ 0x27
 800e874:	e7f1      	b.n	800e85a <__hexdig_fun+0xa>
 800e876:	2000      	movs	r0, #0
 800e878:	4770      	bx	lr
	...

0800e87c <__gethex>:
 800e87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e880:	b085      	sub	sp, #20
 800e882:	468a      	mov	sl, r1
 800e884:	9302      	str	r3, [sp, #8]
 800e886:	680b      	ldr	r3, [r1, #0]
 800e888:	9001      	str	r0, [sp, #4]
 800e88a:	4690      	mov	r8, r2
 800e88c:	1c9c      	adds	r4, r3, #2
 800e88e:	46a1      	mov	r9, r4
 800e890:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e894:	2830      	cmp	r0, #48	@ 0x30
 800e896:	d0fa      	beq.n	800e88e <__gethex+0x12>
 800e898:	eba9 0303 	sub.w	r3, r9, r3
 800e89c:	f1a3 0b02 	sub.w	fp, r3, #2
 800e8a0:	f7ff ffd6 	bl	800e850 <__hexdig_fun>
 800e8a4:	4605      	mov	r5, r0
 800e8a6:	2800      	cmp	r0, #0
 800e8a8:	d168      	bne.n	800e97c <__gethex+0x100>
 800e8aa:	49a0      	ldr	r1, [pc, #640]	@ (800eb2c <__gethex+0x2b0>)
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	4648      	mov	r0, r9
 800e8b0:	f7ff fefe 	bl	800e6b0 <strncmp>
 800e8b4:	4607      	mov	r7, r0
 800e8b6:	2800      	cmp	r0, #0
 800e8b8:	d167      	bne.n	800e98a <__gethex+0x10e>
 800e8ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e8be:	4626      	mov	r6, r4
 800e8c0:	f7ff ffc6 	bl	800e850 <__hexdig_fun>
 800e8c4:	2800      	cmp	r0, #0
 800e8c6:	d062      	beq.n	800e98e <__gethex+0x112>
 800e8c8:	4623      	mov	r3, r4
 800e8ca:	7818      	ldrb	r0, [r3, #0]
 800e8cc:	2830      	cmp	r0, #48	@ 0x30
 800e8ce:	4699      	mov	r9, r3
 800e8d0:	f103 0301 	add.w	r3, r3, #1
 800e8d4:	d0f9      	beq.n	800e8ca <__gethex+0x4e>
 800e8d6:	f7ff ffbb 	bl	800e850 <__hexdig_fun>
 800e8da:	fab0 f580 	clz	r5, r0
 800e8de:	096d      	lsrs	r5, r5, #5
 800e8e0:	f04f 0b01 	mov.w	fp, #1
 800e8e4:	464a      	mov	r2, r9
 800e8e6:	4616      	mov	r6, r2
 800e8e8:	3201      	adds	r2, #1
 800e8ea:	7830      	ldrb	r0, [r6, #0]
 800e8ec:	f7ff ffb0 	bl	800e850 <__hexdig_fun>
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	d1f8      	bne.n	800e8e6 <__gethex+0x6a>
 800e8f4:	498d      	ldr	r1, [pc, #564]	@ (800eb2c <__gethex+0x2b0>)
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	4630      	mov	r0, r6
 800e8fa:	f7ff fed9 	bl	800e6b0 <strncmp>
 800e8fe:	2800      	cmp	r0, #0
 800e900:	d13f      	bne.n	800e982 <__gethex+0x106>
 800e902:	b944      	cbnz	r4, 800e916 <__gethex+0x9a>
 800e904:	1c74      	adds	r4, r6, #1
 800e906:	4622      	mov	r2, r4
 800e908:	4616      	mov	r6, r2
 800e90a:	3201      	adds	r2, #1
 800e90c:	7830      	ldrb	r0, [r6, #0]
 800e90e:	f7ff ff9f 	bl	800e850 <__hexdig_fun>
 800e912:	2800      	cmp	r0, #0
 800e914:	d1f8      	bne.n	800e908 <__gethex+0x8c>
 800e916:	1ba4      	subs	r4, r4, r6
 800e918:	00a7      	lsls	r7, r4, #2
 800e91a:	7833      	ldrb	r3, [r6, #0]
 800e91c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e920:	2b50      	cmp	r3, #80	@ 0x50
 800e922:	d13e      	bne.n	800e9a2 <__gethex+0x126>
 800e924:	7873      	ldrb	r3, [r6, #1]
 800e926:	2b2b      	cmp	r3, #43	@ 0x2b
 800e928:	d033      	beq.n	800e992 <__gethex+0x116>
 800e92a:	2b2d      	cmp	r3, #45	@ 0x2d
 800e92c:	d034      	beq.n	800e998 <__gethex+0x11c>
 800e92e:	1c71      	adds	r1, r6, #1
 800e930:	2400      	movs	r4, #0
 800e932:	7808      	ldrb	r0, [r1, #0]
 800e934:	f7ff ff8c 	bl	800e850 <__hexdig_fun>
 800e938:	1e43      	subs	r3, r0, #1
 800e93a:	b2db      	uxtb	r3, r3
 800e93c:	2b18      	cmp	r3, #24
 800e93e:	d830      	bhi.n	800e9a2 <__gethex+0x126>
 800e940:	f1a0 0210 	sub.w	r2, r0, #16
 800e944:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e948:	f7ff ff82 	bl	800e850 <__hexdig_fun>
 800e94c:	f100 3cff 	add.w	ip, r0, #4294967295
 800e950:	fa5f fc8c 	uxtb.w	ip, ip
 800e954:	f1bc 0f18 	cmp.w	ip, #24
 800e958:	f04f 030a 	mov.w	r3, #10
 800e95c:	d91e      	bls.n	800e99c <__gethex+0x120>
 800e95e:	b104      	cbz	r4, 800e962 <__gethex+0xe6>
 800e960:	4252      	negs	r2, r2
 800e962:	4417      	add	r7, r2
 800e964:	f8ca 1000 	str.w	r1, [sl]
 800e968:	b1ed      	cbz	r5, 800e9a6 <__gethex+0x12a>
 800e96a:	f1bb 0f00 	cmp.w	fp, #0
 800e96e:	bf0c      	ite	eq
 800e970:	2506      	moveq	r5, #6
 800e972:	2500      	movne	r5, #0
 800e974:	4628      	mov	r0, r5
 800e976:	b005      	add	sp, #20
 800e978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e97c:	2500      	movs	r5, #0
 800e97e:	462c      	mov	r4, r5
 800e980:	e7b0      	b.n	800e8e4 <__gethex+0x68>
 800e982:	2c00      	cmp	r4, #0
 800e984:	d1c7      	bne.n	800e916 <__gethex+0x9a>
 800e986:	4627      	mov	r7, r4
 800e988:	e7c7      	b.n	800e91a <__gethex+0x9e>
 800e98a:	464e      	mov	r6, r9
 800e98c:	462f      	mov	r7, r5
 800e98e:	2501      	movs	r5, #1
 800e990:	e7c3      	b.n	800e91a <__gethex+0x9e>
 800e992:	2400      	movs	r4, #0
 800e994:	1cb1      	adds	r1, r6, #2
 800e996:	e7cc      	b.n	800e932 <__gethex+0xb6>
 800e998:	2401      	movs	r4, #1
 800e99a:	e7fb      	b.n	800e994 <__gethex+0x118>
 800e99c:	fb03 0002 	mla	r0, r3, r2, r0
 800e9a0:	e7ce      	b.n	800e940 <__gethex+0xc4>
 800e9a2:	4631      	mov	r1, r6
 800e9a4:	e7de      	b.n	800e964 <__gethex+0xe8>
 800e9a6:	eba6 0309 	sub.w	r3, r6, r9
 800e9aa:	3b01      	subs	r3, #1
 800e9ac:	4629      	mov	r1, r5
 800e9ae:	2b07      	cmp	r3, #7
 800e9b0:	dc0a      	bgt.n	800e9c8 <__gethex+0x14c>
 800e9b2:	9801      	ldr	r0, [sp, #4]
 800e9b4:	f7fd ff84 	bl	800c8c0 <_Balloc>
 800e9b8:	4604      	mov	r4, r0
 800e9ba:	b940      	cbnz	r0, 800e9ce <__gethex+0x152>
 800e9bc:	4b5c      	ldr	r3, [pc, #368]	@ (800eb30 <__gethex+0x2b4>)
 800e9be:	4602      	mov	r2, r0
 800e9c0:	21e4      	movs	r1, #228	@ 0xe4
 800e9c2:	485c      	ldr	r0, [pc, #368]	@ (800eb34 <__gethex+0x2b8>)
 800e9c4:	f7ff fec0 	bl	800e748 <__assert_func>
 800e9c8:	3101      	adds	r1, #1
 800e9ca:	105b      	asrs	r3, r3, #1
 800e9cc:	e7ef      	b.n	800e9ae <__gethex+0x132>
 800e9ce:	f100 0a14 	add.w	sl, r0, #20
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	4655      	mov	r5, sl
 800e9d6:	469b      	mov	fp, r3
 800e9d8:	45b1      	cmp	r9, r6
 800e9da:	d337      	bcc.n	800ea4c <__gethex+0x1d0>
 800e9dc:	f845 bb04 	str.w	fp, [r5], #4
 800e9e0:	eba5 050a 	sub.w	r5, r5, sl
 800e9e4:	10ad      	asrs	r5, r5, #2
 800e9e6:	6125      	str	r5, [r4, #16]
 800e9e8:	4658      	mov	r0, fp
 800e9ea:	f7fe f85b 	bl	800caa4 <__hi0bits>
 800e9ee:	016d      	lsls	r5, r5, #5
 800e9f0:	f8d8 6000 	ldr.w	r6, [r8]
 800e9f4:	1a2d      	subs	r5, r5, r0
 800e9f6:	42b5      	cmp	r5, r6
 800e9f8:	dd54      	ble.n	800eaa4 <__gethex+0x228>
 800e9fa:	1bad      	subs	r5, r5, r6
 800e9fc:	4629      	mov	r1, r5
 800e9fe:	4620      	mov	r0, r4
 800ea00:	f7fe fbef 	bl	800d1e2 <__any_on>
 800ea04:	4681      	mov	r9, r0
 800ea06:	b178      	cbz	r0, 800ea28 <__gethex+0x1ac>
 800ea08:	1e6b      	subs	r3, r5, #1
 800ea0a:	1159      	asrs	r1, r3, #5
 800ea0c:	f003 021f 	and.w	r2, r3, #31
 800ea10:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ea14:	f04f 0901 	mov.w	r9, #1
 800ea18:	fa09 f202 	lsl.w	r2, r9, r2
 800ea1c:	420a      	tst	r2, r1
 800ea1e:	d003      	beq.n	800ea28 <__gethex+0x1ac>
 800ea20:	454b      	cmp	r3, r9
 800ea22:	dc36      	bgt.n	800ea92 <__gethex+0x216>
 800ea24:	f04f 0902 	mov.w	r9, #2
 800ea28:	4629      	mov	r1, r5
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	f7ff febe 	bl	800e7ac <rshift>
 800ea30:	442f      	add	r7, r5
 800ea32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea36:	42bb      	cmp	r3, r7
 800ea38:	da42      	bge.n	800eac0 <__gethex+0x244>
 800ea3a:	9801      	ldr	r0, [sp, #4]
 800ea3c:	4621      	mov	r1, r4
 800ea3e:	f7fd ff7f 	bl	800c940 <_Bfree>
 800ea42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea44:	2300      	movs	r3, #0
 800ea46:	6013      	str	r3, [r2, #0]
 800ea48:	25a3      	movs	r5, #163	@ 0xa3
 800ea4a:	e793      	b.n	800e974 <__gethex+0xf8>
 800ea4c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ea50:	2a2e      	cmp	r2, #46	@ 0x2e
 800ea52:	d012      	beq.n	800ea7a <__gethex+0x1fe>
 800ea54:	2b20      	cmp	r3, #32
 800ea56:	d104      	bne.n	800ea62 <__gethex+0x1e6>
 800ea58:	f845 bb04 	str.w	fp, [r5], #4
 800ea5c:	f04f 0b00 	mov.w	fp, #0
 800ea60:	465b      	mov	r3, fp
 800ea62:	7830      	ldrb	r0, [r6, #0]
 800ea64:	9303      	str	r3, [sp, #12]
 800ea66:	f7ff fef3 	bl	800e850 <__hexdig_fun>
 800ea6a:	9b03      	ldr	r3, [sp, #12]
 800ea6c:	f000 000f 	and.w	r0, r0, #15
 800ea70:	4098      	lsls	r0, r3
 800ea72:	ea4b 0b00 	orr.w	fp, fp, r0
 800ea76:	3304      	adds	r3, #4
 800ea78:	e7ae      	b.n	800e9d8 <__gethex+0x15c>
 800ea7a:	45b1      	cmp	r9, r6
 800ea7c:	d8ea      	bhi.n	800ea54 <__gethex+0x1d8>
 800ea7e:	492b      	ldr	r1, [pc, #172]	@ (800eb2c <__gethex+0x2b0>)
 800ea80:	9303      	str	r3, [sp, #12]
 800ea82:	2201      	movs	r2, #1
 800ea84:	4630      	mov	r0, r6
 800ea86:	f7ff fe13 	bl	800e6b0 <strncmp>
 800ea8a:	9b03      	ldr	r3, [sp, #12]
 800ea8c:	2800      	cmp	r0, #0
 800ea8e:	d1e1      	bne.n	800ea54 <__gethex+0x1d8>
 800ea90:	e7a2      	b.n	800e9d8 <__gethex+0x15c>
 800ea92:	1ea9      	subs	r1, r5, #2
 800ea94:	4620      	mov	r0, r4
 800ea96:	f7fe fba4 	bl	800d1e2 <__any_on>
 800ea9a:	2800      	cmp	r0, #0
 800ea9c:	d0c2      	beq.n	800ea24 <__gethex+0x1a8>
 800ea9e:	f04f 0903 	mov.w	r9, #3
 800eaa2:	e7c1      	b.n	800ea28 <__gethex+0x1ac>
 800eaa4:	da09      	bge.n	800eaba <__gethex+0x23e>
 800eaa6:	1b75      	subs	r5, r6, r5
 800eaa8:	4621      	mov	r1, r4
 800eaaa:	9801      	ldr	r0, [sp, #4]
 800eaac:	462a      	mov	r2, r5
 800eaae:	f7fe f95f 	bl	800cd70 <__lshift>
 800eab2:	1b7f      	subs	r7, r7, r5
 800eab4:	4604      	mov	r4, r0
 800eab6:	f100 0a14 	add.w	sl, r0, #20
 800eaba:	f04f 0900 	mov.w	r9, #0
 800eabe:	e7b8      	b.n	800ea32 <__gethex+0x1b6>
 800eac0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800eac4:	42bd      	cmp	r5, r7
 800eac6:	dd6f      	ble.n	800eba8 <__gethex+0x32c>
 800eac8:	1bed      	subs	r5, r5, r7
 800eaca:	42ae      	cmp	r6, r5
 800eacc:	dc34      	bgt.n	800eb38 <__gethex+0x2bc>
 800eace:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ead2:	2b02      	cmp	r3, #2
 800ead4:	d022      	beq.n	800eb1c <__gethex+0x2a0>
 800ead6:	2b03      	cmp	r3, #3
 800ead8:	d024      	beq.n	800eb24 <__gethex+0x2a8>
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d115      	bne.n	800eb0a <__gethex+0x28e>
 800eade:	42ae      	cmp	r6, r5
 800eae0:	d113      	bne.n	800eb0a <__gethex+0x28e>
 800eae2:	2e01      	cmp	r6, #1
 800eae4:	d10b      	bne.n	800eafe <__gethex+0x282>
 800eae6:	9a02      	ldr	r2, [sp, #8]
 800eae8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eaec:	6013      	str	r3, [r2, #0]
 800eaee:	2301      	movs	r3, #1
 800eaf0:	6123      	str	r3, [r4, #16]
 800eaf2:	f8ca 3000 	str.w	r3, [sl]
 800eaf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eaf8:	2562      	movs	r5, #98	@ 0x62
 800eafa:	601c      	str	r4, [r3, #0]
 800eafc:	e73a      	b.n	800e974 <__gethex+0xf8>
 800eafe:	1e71      	subs	r1, r6, #1
 800eb00:	4620      	mov	r0, r4
 800eb02:	f7fe fb6e 	bl	800d1e2 <__any_on>
 800eb06:	2800      	cmp	r0, #0
 800eb08:	d1ed      	bne.n	800eae6 <__gethex+0x26a>
 800eb0a:	9801      	ldr	r0, [sp, #4]
 800eb0c:	4621      	mov	r1, r4
 800eb0e:	f7fd ff17 	bl	800c940 <_Bfree>
 800eb12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb14:	2300      	movs	r3, #0
 800eb16:	6013      	str	r3, [r2, #0]
 800eb18:	2550      	movs	r5, #80	@ 0x50
 800eb1a:	e72b      	b.n	800e974 <__gethex+0xf8>
 800eb1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d1f3      	bne.n	800eb0a <__gethex+0x28e>
 800eb22:	e7e0      	b.n	800eae6 <__gethex+0x26a>
 800eb24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d1dd      	bne.n	800eae6 <__gethex+0x26a>
 800eb2a:	e7ee      	b.n	800eb0a <__gethex+0x28e>
 800eb2c:	0800f8b8 	.word	0x0800f8b8
 800eb30:	0800f751 	.word	0x0800f751
 800eb34:	0800fa66 	.word	0x0800fa66
 800eb38:	1e6f      	subs	r7, r5, #1
 800eb3a:	f1b9 0f00 	cmp.w	r9, #0
 800eb3e:	d130      	bne.n	800eba2 <__gethex+0x326>
 800eb40:	b127      	cbz	r7, 800eb4c <__gethex+0x2d0>
 800eb42:	4639      	mov	r1, r7
 800eb44:	4620      	mov	r0, r4
 800eb46:	f7fe fb4c 	bl	800d1e2 <__any_on>
 800eb4a:	4681      	mov	r9, r0
 800eb4c:	117a      	asrs	r2, r7, #5
 800eb4e:	2301      	movs	r3, #1
 800eb50:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800eb54:	f007 071f 	and.w	r7, r7, #31
 800eb58:	40bb      	lsls	r3, r7
 800eb5a:	4213      	tst	r3, r2
 800eb5c:	4629      	mov	r1, r5
 800eb5e:	4620      	mov	r0, r4
 800eb60:	bf18      	it	ne
 800eb62:	f049 0902 	orrne.w	r9, r9, #2
 800eb66:	f7ff fe21 	bl	800e7ac <rshift>
 800eb6a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800eb6e:	1b76      	subs	r6, r6, r5
 800eb70:	2502      	movs	r5, #2
 800eb72:	f1b9 0f00 	cmp.w	r9, #0
 800eb76:	d047      	beq.n	800ec08 <__gethex+0x38c>
 800eb78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eb7c:	2b02      	cmp	r3, #2
 800eb7e:	d015      	beq.n	800ebac <__gethex+0x330>
 800eb80:	2b03      	cmp	r3, #3
 800eb82:	d017      	beq.n	800ebb4 <__gethex+0x338>
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	d109      	bne.n	800eb9c <__gethex+0x320>
 800eb88:	f019 0f02 	tst.w	r9, #2
 800eb8c:	d006      	beq.n	800eb9c <__gethex+0x320>
 800eb8e:	f8da 3000 	ldr.w	r3, [sl]
 800eb92:	ea49 0903 	orr.w	r9, r9, r3
 800eb96:	f019 0f01 	tst.w	r9, #1
 800eb9a:	d10e      	bne.n	800ebba <__gethex+0x33e>
 800eb9c:	f045 0510 	orr.w	r5, r5, #16
 800eba0:	e032      	b.n	800ec08 <__gethex+0x38c>
 800eba2:	f04f 0901 	mov.w	r9, #1
 800eba6:	e7d1      	b.n	800eb4c <__gethex+0x2d0>
 800eba8:	2501      	movs	r5, #1
 800ebaa:	e7e2      	b.n	800eb72 <__gethex+0x2f6>
 800ebac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebae:	f1c3 0301 	rsb	r3, r3, #1
 800ebb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ebb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d0f0      	beq.n	800eb9c <__gethex+0x320>
 800ebba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ebbe:	f104 0314 	add.w	r3, r4, #20
 800ebc2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ebc6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ebca:	f04f 0c00 	mov.w	ip, #0
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebd4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ebd8:	d01b      	beq.n	800ec12 <__gethex+0x396>
 800ebda:	3201      	adds	r2, #1
 800ebdc:	6002      	str	r2, [r0, #0]
 800ebde:	2d02      	cmp	r5, #2
 800ebe0:	f104 0314 	add.w	r3, r4, #20
 800ebe4:	d13c      	bne.n	800ec60 <__gethex+0x3e4>
 800ebe6:	f8d8 2000 	ldr.w	r2, [r8]
 800ebea:	3a01      	subs	r2, #1
 800ebec:	42b2      	cmp	r2, r6
 800ebee:	d109      	bne.n	800ec04 <__gethex+0x388>
 800ebf0:	1171      	asrs	r1, r6, #5
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ebf8:	f006 061f 	and.w	r6, r6, #31
 800ebfc:	fa02 f606 	lsl.w	r6, r2, r6
 800ec00:	421e      	tst	r6, r3
 800ec02:	d13a      	bne.n	800ec7a <__gethex+0x3fe>
 800ec04:	f045 0520 	orr.w	r5, r5, #32
 800ec08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec0a:	601c      	str	r4, [r3, #0]
 800ec0c:	9b02      	ldr	r3, [sp, #8]
 800ec0e:	601f      	str	r7, [r3, #0]
 800ec10:	e6b0      	b.n	800e974 <__gethex+0xf8>
 800ec12:	4299      	cmp	r1, r3
 800ec14:	f843 cc04 	str.w	ip, [r3, #-4]
 800ec18:	d8d9      	bhi.n	800ebce <__gethex+0x352>
 800ec1a:	68a3      	ldr	r3, [r4, #8]
 800ec1c:	459b      	cmp	fp, r3
 800ec1e:	db17      	blt.n	800ec50 <__gethex+0x3d4>
 800ec20:	6861      	ldr	r1, [r4, #4]
 800ec22:	9801      	ldr	r0, [sp, #4]
 800ec24:	3101      	adds	r1, #1
 800ec26:	f7fd fe4b 	bl	800c8c0 <_Balloc>
 800ec2a:	4681      	mov	r9, r0
 800ec2c:	b918      	cbnz	r0, 800ec36 <__gethex+0x3ba>
 800ec2e:	4b1a      	ldr	r3, [pc, #104]	@ (800ec98 <__gethex+0x41c>)
 800ec30:	4602      	mov	r2, r0
 800ec32:	2184      	movs	r1, #132	@ 0x84
 800ec34:	e6c5      	b.n	800e9c2 <__gethex+0x146>
 800ec36:	6922      	ldr	r2, [r4, #16]
 800ec38:	3202      	adds	r2, #2
 800ec3a:	f104 010c 	add.w	r1, r4, #12
 800ec3e:	0092      	lsls	r2, r2, #2
 800ec40:	300c      	adds	r0, #12
 800ec42:	f7fc fedc 	bl	800b9fe <memcpy>
 800ec46:	4621      	mov	r1, r4
 800ec48:	9801      	ldr	r0, [sp, #4]
 800ec4a:	f7fd fe79 	bl	800c940 <_Bfree>
 800ec4e:	464c      	mov	r4, r9
 800ec50:	6923      	ldr	r3, [r4, #16]
 800ec52:	1c5a      	adds	r2, r3, #1
 800ec54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ec58:	6122      	str	r2, [r4, #16]
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	615a      	str	r2, [r3, #20]
 800ec5e:	e7be      	b.n	800ebde <__gethex+0x362>
 800ec60:	6922      	ldr	r2, [r4, #16]
 800ec62:	455a      	cmp	r2, fp
 800ec64:	dd0b      	ble.n	800ec7e <__gethex+0x402>
 800ec66:	2101      	movs	r1, #1
 800ec68:	4620      	mov	r0, r4
 800ec6a:	f7ff fd9f 	bl	800e7ac <rshift>
 800ec6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ec72:	3701      	adds	r7, #1
 800ec74:	42bb      	cmp	r3, r7
 800ec76:	f6ff aee0 	blt.w	800ea3a <__gethex+0x1be>
 800ec7a:	2501      	movs	r5, #1
 800ec7c:	e7c2      	b.n	800ec04 <__gethex+0x388>
 800ec7e:	f016 061f 	ands.w	r6, r6, #31
 800ec82:	d0fa      	beq.n	800ec7a <__gethex+0x3fe>
 800ec84:	4453      	add	r3, sl
 800ec86:	f1c6 0620 	rsb	r6, r6, #32
 800ec8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ec8e:	f7fd ff09 	bl	800caa4 <__hi0bits>
 800ec92:	42b0      	cmp	r0, r6
 800ec94:	dbe7      	blt.n	800ec66 <__gethex+0x3ea>
 800ec96:	e7f0      	b.n	800ec7a <__gethex+0x3fe>
 800ec98:	0800f751 	.word	0x0800f751

0800ec9c <L_shift>:
 800ec9c:	f1c2 0208 	rsb	r2, r2, #8
 800eca0:	0092      	lsls	r2, r2, #2
 800eca2:	b570      	push	{r4, r5, r6, lr}
 800eca4:	f1c2 0620 	rsb	r6, r2, #32
 800eca8:	6843      	ldr	r3, [r0, #4]
 800ecaa:	6804      	ldr	r4, [r0, #0]
 800ecac:	fa03 f506 	lsl.w	r5, r3, r6
 800ecb0:	432c      	orrs	r4, r5
 800ecb2:	40d3      	lsrs	r3, r2
 800ecb4:	6004      	str	r4, [r0, #0]
 800ecb6:	f840 3f04 	str.w	r3, [r0, #4]!
 800ecba:	4288      	cmp	r0, r1
 800ecbc:	d3f4      	bcc.n	800eca8 <L_shift+0xc>
 800ecbe:	bd70      	pop	{r4, r5, r6, pc}

0800ecc0 <__match>:
 800ecc0:	b530      	push	{r4, r5, lr}
 800ecc2:	6803      	ldr	r3, [r0, #0]
 800ecc4:	3301      	adds	r3, #1
 800ecc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ecca:	b914      	cbnz	r4, 800ecd2 <__match+0x12>
 800eccc:	6003      	str	r3, [r0, #0]
 800ecce:	2001      	movs	r0, #1
 800ecd0:	bd30      	pop	{r4, r5, pc}
 800ecd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecd6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ecda:	2d19      	cmp	r5, #25
 800ecdc:	bf98      	it	ls
 800ecde:	3220      	addls	r2, #32
 800ece0:	42a2      	cmp	r2, r4
 800ece2:	d0f0      	beq.n	800ecc6 <__match+0x6>
 800ece4:	2000      	movs	r0, #0
 800ece6:	e7f3      	b.n	800ecd0 <__match+0x10>

0800ece8 <__hexnan>:
 800ece8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecec:	680b      	ldr	r3, [r1, #0]
 800ecee:	6801      	ldr	r1, [r0, #0]
 800ecf0:	115e      	asrs	r6, r3, #5
 800ecf2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ecf6:	f013 031f 	ands.w	r3, r3, #31
 800ecfa:	b087      	sub	sp, #28
 800ecfc:	bf18      	it	ne
 800ecfe:	3604      	addne	r6, #4
 800ed00:	2500      	movs	r5, #0
 800ed02:	1f37      	subs	r7, r6, #4
 800ed04:	4682      	mov	sl, r0
 800ed06:	4690      	mov	r8, r2
 800ed08:	9301      	str	r3, [sp, #4]
 800ed0a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ed0e:	46b9      	mov	r9, r7
 800ed10:	463c      	mov	r4, r7
 800ed12:	9502      	str	r5, [sp, #8]
 800ed14:	46ab      	mov	fp, r5
 800ed16:	784a      	ldrb	r2, [r1, #1]
 800ed18:	1c4b      	adds	r3, r1, #1
 800ed1a:	9303      	str	r3, [sp, #12]
 800ed1c:	b342      	cbz	r2, 800ed70 <__hexnan+0x88>
 800ed1e:	4610      	mov	r0, r2
 800ed20:	9105      	str	r1, [sp, #20]
 800ed22:	9204      	str	r2, [sp, #16]
 800ed24:	f7ff fd94 	bl	800e850 <__hexdig_fun>
 800ed28:	2800      	cmp	r0, #0
 800ed2a:	d151      	bne.n	800edd0 <__hexnan+0xe8>
 800ed2c:	9a04      	ldr	r2, [sp, #16]
 800ed2e:	9905      	ldr	r1, [sp, #20]
 800ed30:	2a20      	cmp	r2, #32
 800ed32:	d818      	bhi.n	800ed66 <__hexnan+0x7e>
 800ed34:	9b02      	ldr	r3, [sp, #8]
 800ed36:	459b      	cmp	fp, r3
 800ed38:	dd13      	ble.n	800ed62 <__hexnan+0x7a>
 800ed3a:	454c      	cmp	r4, r9
 800ed3c:	d206      	bcs.n	800ed4c <__hexnan+0x64>
 800ed3e:	2d07      	cmp	r5, #7
 800ed40:	dc04      	bgt.n	800ed4c <__hexnan+0x64>
 800ed42:	462a      	mov	r2, r5
 800ed44:	4649      	mov	r1, r9
 800ed46:	4620      	mov	r0, r4
 800ed48:	f7ff ffa8 	bl	800ec9c <L_shift>
 800ed4c:	4544      	cmp	r4, r8
 800ed4e:	d952      	bls.n	800edf6 <__hexnan+0x10e>
 800ed50:	2300      	movs	r3, #0
 800ed52:	f1a4 0904 	sub.w	r9, r4, #4
 800ed56:	f844 3c04 	str.w	r3, [r4, #-4]
 800ed5a:	f8cd b008 	str.w	fp, [sp, #8]
 800ed5e:	464c      	mov	r4, r9
 800ed60:	461d      	mov	r5, r3
 800ed62:	9903      	ldr	r1, [sp, #12]
 800ed64:	e7d7      	b.n	800ed16 <__hexnan+0x2e>
 800ed66:	2a29      	cmp	r2, #41	@ 0x29
 800ed68:	d157      	bne.n	800ee1a <__hexnan+0x132>
 800ed6a:	3102      	adds	r1, #2
 800ed6c:	f8ca 1000 	str.w	r1, [sl]
 800ed70:	f1bb 0f00 	cmp.w	fp, #0
 800ed74:	d051      	beq.n	800ee1a <__hexnan+0x132>
 800ed76:	454c      	cmp	r4, r9
 800ed78:	d206      	bcs.n	800ed88 <__hexnan+0xa0>
 800ed7a:	2d07      	cmp	r5, #7
 800ed7c:	dc04      	bgt.n	800ed88 <__hexnan+0xa0>
 800ed7e:	462a      	mov	r2, r5
 800ed80:	4649      	mov	r1, r9
 800ed82:	4620      	mov	r0, r4
 800ed84:	f7ff ff8a 	bl	800ec9c <L_shift>
 800ed88:	4544      	cmp	r4, r8
 800ed8a:	d936      	bls.n	800edfa <__hexnan+0x112>
 800ed8c:	f1a8 0204 	sub.w	r2, r8, #4
 800ed90:	4623      	mov	r3, r4
 800ed92:	f853 1b04 	ldr.w	r1, [r3], #4
 800ed96:	f842 1f04 	str.w	r1, [r2, #4]!
 800ed9a:	429f      	cmp	r7, r3
 800ed9c:	d2f9      	bcs.n	800ed92 <__hexnan+0xaa>
 800ed9e:	1b3b      	subs	r3, r7, r4
 800eda0:	f023 0303 	bic.w	r3, r3, #3
 800eda4:	3304      	adds	r3, #4
 800eda6:	3401      	adds	r4, #1
 800eda8:	3e03      	subs	r6, #3
 800edaa:	42b4      	cmp	r4, r6
 800edac:	bf88      	it	hi
 800edae:	2304      	movhi	r3, #4
 800edb0:	4443      	add	r3, r8
 800edb2:	2200      	movs	r2, #0
 800edb4:	f843 2b04 	str.w	r2, [r3], #4
 800edb8:	429f      	cmp	r7, r3
 800edba:	d2fb      	bcs.n	800edb4 <__hexnan+0xcc>
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	b91b      	cbnz	r3, 800edc8 <__hexnan+0xe0>
 800edc0:	4547      	cmp	r7, r8
 800edc2:	d128      	bne.n	800ee16 <__hexnan+0x12e>
 800edc4:	2301      	movs	r3, #1
 800edc6:	603b      	str	r3, [r7, #0]
 800edc8:	2005      	movs	r0, #5
 800edca:	b007      	add	sp, #28
 800edcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edd0:	3501      	adds	r5, #1
 800edd2:	2d08      	cmp	r5, #8
 800edd4:	f10b 0b01 	add.w	fp, fp, #1
 800edd8:	dd06      	ble.n	800ede8 <__hexnan+0x100>
 800edda:	4544      	cmp	r4, r8
 800eddc:	d9c1      	bls.n	800ed62 <__hexnan+0x7a>
 800edde:	2300      	movs	r3, #0
 800ede0:	f844 3c04 	str.w	r3, [r4, #-4]
 800ede4:	2501      	movs	r5, #1
 800ede6:	3c04      	subs	r4, #4
 800ede8:	6822      	ldr	r2, [r4, #0]
 800edea:	f000 000f 	and.w	r0, r0, #15
 800edee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800edf2:	6020      	str	r0, [r4, #0]
 800edf4:	e7b5      	b.n	800ed62 <__hexnan+0x7a>
 800edf6:	2508      	movs	r5, #8
 800edf8:	e7b3      	b.n	800ed62 <__hexnan+0x7a>
 800edfa:	9b01      	ldr	r3, [sp, #4]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d0dd      	beq.n	800edbc <__hexnan+0xd4>
 800ee00:	f1c3 0320 	rsb	r3, r3, #32
 800ee04:	f04f 32ff 	mov.w	r2, #4294967295
 800ee08:	40da      	lsrs	r2, r3
 800ee0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ee0e:	4013      	ands	r3, r2
 800ee10:	f846 3c04 	str.w	r3, [r6, #-4]
 800ee14:	e7d2      	b.n	800edbc <__hexnan+0xd4>
 800ee16:	3f04      	subs	r7, #4
 800ee18:	e7d0      	b.n	800edbc <__hexnan+0xd4>
 800ee1a:	2004      	movs	r0, #4
 800ee1c:	e7d5      	b.n	800edca <__hexnan+0xe2>

0800ee1e <__ascii_mbtowc>:
 800ee1e:	b082      	sub	sp, #8
 800ee20:	b901      	cbnz	r1, 800ee24 <__ascii_mbtowc+0x6>
 800ee22:	a901      	add	r1, sp, #4
 800ee24:	b142      	cbz	r2, 800ee38 <__ascii_mbtowc+0x1a>
 800ee26:	b14b      	cbz	r3, 800ee3c <__ascii_mbtowc+0x1e>
 800ee28:	7813      	ldrb	r3, [r2, #0]
 800ee2a:	600b      	str	r3, [r1, #0]
 800ee2c:	7812      	ldrb	r2, [r2, #0]
 800ee2e:	1e10      	subs	r0, r2, #0
 800ee30:	bf18      	it	ne
 800ee32:	2001      	movne	r0, #1
 800ee34:	b002      	add	sp, #8
 800ee36:	4770      	bx	lr
 800ee38:	4610      	mov	r0, r2
 800ee3a:	e7fb      	b.n	800ee34 <__ascii_mbtowc+0x16>
 800ee3c:	f06f 0001 	mvn.w	r0, #1
 800ee40:	e7f8      	b.n	800ee34 <__ascii_mbtowc+0x16>

0800ee42 <_realloc_r>:
 800ee42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee46:	4680      	mov	r8, r0
 800ee48:	4615      	mov	r5, r2
 800ee4a:	460c      	mov	r4, r1
 800ee4c:	b921      	cbnz	r1, 800ee58 <_realloc_r+0x16>
 800ee4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee52:	4611      	mov	r1, r2
 800ee54:	f7fd bca8 	b.w	800c7a8 <_malloc_r>
 800ee58:	b92a      	cbnz	r2, 800ee66 <_realloc_r+0x24>
 800ee5a:	f7fd fc31 	bl	800c6c0 <_free_r>
 800ee5e:	2400      	movs	r4, #0
 800ee60:	4620      	mov	r0, r4
 800ee62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee66:	f000 f840 	bl	800eeea <_malloc_usable_size_r>
 800ee6a:	4285      	cmp	r5, r0
 800ee6c:	4606      	mov	r6, r0
 800ee6e:	d802      	bhi.n	800ee76 <_realloc_r+0x34>
 800ee70:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ee74:	d8f4      	bhi.n	800ee60 <_realloc_r+0x1e>
 800ee76:	4629      	mov	r1, r5
 800ee78:	4640      	mov	r0, r8
 800ee7a:	f7fd fc95 	bl	800c7a8 <_malloc_r>
 800ee7e:	4607      	mov	r7, r0
 800ee80:	2800      	cmp	r0, #0
 800ee82:	d0ec      	beq.n	800ee5e <_realloc_r+0x1c>
 800ee84:	42b5      	cmp	r5, r6
 800ee86:	462a      	mov	r2, r5
 800ee88:	4621      	mov	r1, r4
 800ee8a:	bf28      	it	cs
 800ee8c:	4632      	movcs	r2, r6
 800ee8e:	f7fc fdb6 	bl	800b9fe <memcpy>
 800ee92:	4621      	mov	r1, r4
 800ee94:	4640      	mov	r0, r8
 800ee96:	f7fd fc13 	bl	800c6c0 <_free_r>
 800ee9a:	463c      	mov	r4, r7
 800ee9c:	e7e0      	b.n	800ee60 <_realloc_r+0x1e>

0800ee9e <__ascii_wctomb>:
 800ee9e:	4603      	mov	r3, r0
 800eea0:	4608      	mov	r0, r1
 800eea2:	b141      	cbz	r1, 800eeb6 <__ascii_wctomb+0x18>
 800eea4:	2aff      	cmp	r2, #255	@ 0xff
 800eea6:	d904      	bls.n	800eeb2 <__ascii_wctomb+0x14>
 800eea8:	228a      	movs	r2, #138	@ 0x8a
 800eeaa:	601a      	str	r2, [r3, #0]
 800eeac:	f04f 30ff 	mov.w	r0, #4294967295
 800eeb0:	4770      	bx	lr
 800eeb2:	700a      	strb	r2, [r1, #0]
 800eeb4:	2001      	movs	r0, #1
 800eeb6:	4770      	bx	lr

0800eeb8 <fiprintf>:
 800eeb8:	b40e      	push	{r1, r2, r3}
 800eeba:	b503      	push	{r0, r1, lr}
 800eebc:	4601      	mov	r1, r0
 800eebe:	ab03      	add	r3, sp, #12
 800eec0:	4805      	ldr	r0, [pc, #20]	@ (800eed8 <fiprintf+0x20>)
 800eec2:	f853 2b04 	ldr.w	r2, [r3], #4
 800eec6:	6800      	ldr	r0, [r0, #0]
 800eec8:	9301      	str	r3, [sp, #4]
 800eeca:	f7ff f9b1 	bl	800e230 <_vfiprintf_r>
 800eece:	b002      	add	sp, #8
 800eed0:	f85d eb04 	ldr.w	lr, [sp], #4
 800eed4:	b003      	add	sp, #12
 800eed6:	4770      	bx	lr
 800eed8:	2000001c 	.word	0x2000001c

0800eedc <abort>:
 800eedc:	b508      	push	{r3, lr}
 800eede:	2006      	movs	r0, #6
 800eee0:	f000 f834 	bl	800ef4c <raise>
 800eee4:	2001      	movs	r0, #1
 800eee6:	f7f3 fcb5 	bl	8002854 <_exit>

0800eeea <_malloc_usable_size_r>:
 800eeea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eeee:	1f18      	subs	r0, r3, #4
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	bfbc      	itt	lt
 800eef4:	580b      	ldrlt	r3, [r1, r0]
 800eef6:	18c0      	addlt	r0, r0, r3
 800eef8:	4770      	bx	lr

0800eefa <_raise_r>:
 800eefa:	291f      	cmp	r1, #31
 800eefc:	b538      	push	{r3, r4, r5, lr}
 800eefe:	4605      	mov	r5, r0
 800ef00:	460c      	mov	r4, r1
 800ef02:	d904      	bls.n	800ef0e <_raise_r+0x14>
 800ef04:	2316      	movs	r3, #22
 800ef06:	6003      	str	r3, [r0, #0]
 800ef08:	f04f 30ff 	mov.w	r0, #4294967295
 800ef0c:	bd38      	pop	{r3, r4, r5, pc}
 800ef0e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ef10:	b112      	cbz	r2, 800ef18 <_raise_r+0x1e>
 800ef12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef16:	b94b      	cbnz	r3, 800ef2c <_raise_r+0x32>
 800ef18:	4628      	mov	r0, r5
 800ef1a:	f000 f831 	bl	800ef80 <_getpid_r>
 800ef1e:	4622      	mov	r2, r4
 800ef20:	4601      	mov	r1, r0
 800ef22:	4628      	mov	r0, r5
 800ef24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef28:	f000 b818 	b.w	800ef5c <_kill_r>
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d00a      	beq.n	800ef46 <_raise_r+0x4c>
 800ef30:	1c59      	adds	r1, r3, #1
 800ef32:	d103      	bne.n	800ef3c <_raise_r+0x42>
 800ef34:	2316      	movs	r3, #22
 800ef36:	6003      	str	r3, [r0, #0]
 800ef38:	2001      	movs	r0, #1
 800ef3a:	e7e7      	b.n	800ef0c <_raise_r+0x12>
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ef42:	4620      	mov	r0, r4
 800ef44:	4798      	blx	r3
 800ef46:	2000      	movs	r0, #0
 800ef48:	e7e0      	b.n	800ef0c <_raise_r+0x12>
	...

0800ef4c <raise>:
 800ef4c:	4b02      	ldr	r3, [pc, #8]	@ (800ef58 <raise+0xc>)
 800ef4e:	4601      	mov	r1, r0
 800ef50:	6818      	ldr	r0, [r3, #0]
 800ef52:	f7ff bfd2 	b.w	800eefa <_raise_r>
 800ef56:	bf00      	nop
 800ef58:	2000001c 	.word	0x2000001c

0800ef5c <_kill_r>:
 800ef5c:	b538      	push	{r3, r4, r5, lr}
 800ef5e:	4d07      	ldr	r5, [pc, #28]	@ (800ef7c <_kill_r+0x20>)
 800ef60:	2300      	movs	r3, #0
 800ef62:	4604      	mov	r4, r0
 800ef64:	4608      	mov	r0, r1
 800ef66:	4611      	mov	r1, r2
 800ef68:	602b      	str	r3, [r5, #0]
 800ef6a:	f7f3 fc63 	bl	8002834 <_kill>
 800ef6e:	1c43      	adds	r3, r0, #1
 800ef70:	d102      	bne.n	800ef78 <_kill_r+0x1c>
 800ef72:	682b      	ldr	r3, [r5, #0]
 800ef74:	b103      	cbz	r3, 800ef78 <_kill_r+0x1c>
 800ef76:	6023      	str	r3, [r4, #0]
 800ef78:	bd38      	pop	{r3, r4, r5, pc}
 800ef7a:	bf00      	nop
 800ef7c:	20003c70 	.word	0x20003c70

0800ef80 <_getpid_r>:
 800ef80:	f7f3 bc50 	b.w	8002824 <_getpid>
 800ef84:	0000      	movs	r0, r0
	...

0800ef88 <atan>:
 800ef88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef8c:	ec55 4b10 	vmov	r4, r5, d0
 800ef90:	4bbf      	ldr	r3, [pc, #764]	@ (800f290 <atan+0x308>)
 800ef92:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800ef96:	429e      	cmp	r6, r3
 800ef98:	46ab      	mov	fp, r5
 800ef9a:	d918      	bls.n	800efce <atan+0x46>
 800ef9c:	4bbd      	ldr	r3, [pc, #756]	@ (800f294 <atan+0x30c>)
 800ef9e:	429e      	cmp	r6, r3
 800efa0:	d801      	bhi.n	800efa6 <atan+0x1e>
 800efa2:	d109      	bne.n	800efb8 <atan+0x30>
 800efa4:	b144      	cbz	r4, 800efb8 <atan+0x30>
 800efa6:	4622      	mov	r2, r4
 800efa8:	462b      	mov	r3, r5
 800efaa:	4620      	mov	r0, r4
 800efac:	4629      	mov	r1, r5
 800efae:	f7f1 f995 	bl	80002dc <__adddf3>
 800efb2:	4604      	mov	r4, r0
 800efb4:	460d      	mov	r5, r1
 800efb6:	e006      	b.n	800efc6 <atan+0x3e>
 800efb8:	f1bb 0f00 	cmp.w	fp, #0
 800efbc:	f340 812b 	ble.w	800f216 <atan+0x28e>
 800efc0:	a597      	add	r5, pc, #604	@ (adr r5, 800f220 <atan+0x298>)
 800efc2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800efc6:	ec45 4b10 	vmov	d0, r4, r5
 800efca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efce:	4bb2      	ldr	r3, [pc, #712]	@ (800f298 <atan+0x310>)
 800efd0:	429e      	cmp	r6, r3
 800efd2:	d813      	bhi.n	800effc <atan+0x74>
 800efd4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800efd8:	429e      	cmp	r6, r3
 800efda:	d80c      	bhi.n	800eff6 <atan+0x6e>
 800efdc:	a392      	add	r3, pc, #584	@ (adr r3, 800f228 <atan+0x2a0>)
 800efde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe2:	4620      	mov	r0, r4
 800efe4:	4629      	mov	r1, r5
 800efe6:	f7f1 f979 	bl	80002dc <__adddf3>
 800efea:	4bac      	ldr	r3, [pc, #688]	@ (800f29c <atan+0x314>)
 800efec:	2200      	movs	r2, #0
 800efee:	f7f1 fdbb 	bl	8000b68 <__aeabi_dcmpgt>
 800eff2:	2800      	cmp	r0, #0
 800eff4:	d1e7      	bne.n	800efc6 <atan+0x3e>
 800eff6:	f04f 3aff 	mov.w	sl, #4294967295
 800effa:	e029      	b.n	800f050 <atan+0xc8>
 800effc:	f000 f95c 	bl	800f2b8 <fabs>
 800f000:	4ba7      	ldr	r3, [pc, #668]	@ (800f2a0 <atan+0x318>)
 800f002:	429e      	cmp	r6, r3
 800f004:	ec55 4b10 	vmov	r4, r5, d0
 800f008:	f200 80bc 	bhi.w	800f184 <atan+0x1fc>
 800f00c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800f010:	429e      	cmp	r6, r3
 800f012:	f200 809e 	bhi.w	800f152 <atan+0x1ca>
 800f016:	4622      	mov	r2, r4
 800f018:	462b      	mov	r3, r5
 800f01a:	4620      	mov	r0, r4
 800f01c:	4629      	mov	r1, r5
 800f01e:	f7f1 f95d 	bl	80002dc <__adddf3>
 800f022:	4b9e      	ldr	r3, [pc, #632]	@ (800f29c <atan+0x314>)
 800f024:	2200      	movs	r2, #0
 800f026:	f7f1 f957 	bl	80002d8 <__aeabi_dsub>
 800f02a:	2200      	movs	r2, #0
 800f02c:	4606      	mov	r6, r0
 800f02e:	460f      	mov	r7, r1
 800f030:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f034:	4620      	mov	r0, r4
 800f036:	4629      	mov	r1, r5
 800f038:	f7f1 f950 	bl	80002dc <__adddf3>
 800f03c:	4602      	mov	r2, r0
 800f03e:	460b      	mov	r3, r1
 800f040:	4630      	mov	r0, r6
 800f042:	4639      	mov	r1, r7
 800f044:	f7f1 fc2a 	bl	800089c <__aeabi_ddiv>
 800f048:	f04f 0a00 	mov.w	sl, #0
 800f04c:	4604      	mov	r4, r0
 800f04e:	460d      	mov	r5, r1
 800f050:	4622      	mov	r2, r4
 800f052:	462b      	mov	r3, r5
 800f054:	4620      	mov	r0, r4
 800f056:	4629      	mov	r1, r5
 800f058:	f7f1 faf6 	bl	8000648 <__aeabi_dmul>
 800f05c:	4602      	mov	r2, r0
 800f05e:	460b      	mov	r3, r1
 800f060:	4680      	mov	r8, r0
 800f062:	4689      	mov	r9, r1
 800f064:	f7f1 faf0 	bl	8000648 <__aeabi_dmul>
 800f068:	a371      	add	r3, pc, #452	@ (adr r3, 800f230 <atan+0x2a8>)
 800f06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f06e:	4606      	mov	r6, r0
 800f070:	460f      	mov	r7, r1
 800f072:	f7f1 fae9 	bl	8000648 <__aeabi_dmul>
 800f076:	a370      	add	r3, pc, #448	@ (adr r3, 800f238 <atan+0x2b0>)
 800f078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f07c:	f7f1 f92e 	bl	80002dc <__adddf3>
 800f080:	4632      	mov	r2, r6
 800f082:	463b      	mov	r3, r7
 800f084:	f7f1 fae0 	bl	8000648 <__aeabi_dmul>
 800f088:	a36d      	add	r3, pc, #436	@ (adr r3, 800f240 <atan+0x2b8>)
 800f08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f08e:	f7f1 f925 	bl	80002dc <__adddf3>
 800f092:	4632      	mov	r2, r6
 800f094:	463b      	mov	r3, r7
 800f096:	f7f1 fad7 	bl	8000648 <__aeabi_dmul>
 800f09a:	a36b      	add	r3, pc, #428	@ (adr r3, 800f248 <atan+0x2c0>)
 800f09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a0:	f7f1 f91c 	bl	80002dc <__adddf3>
 800f0a4:	4632      	mov	r2, r6
 800f0a6:	463b      	mov	r3, r7
 800f0a8:	f7f1 face 	bl	8000648 <__aeabi_dmul>
 800f0ac:	a368      	add	r3, pc, #416	@ (adr r3, 800f250 <atan+0x2c8>)
 800f0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b2:	f7f1 f913 	bl	80002dc <__adddf3>
 800f0b6:	4632      	mov	r2, r6
 800f0b8:	463b      	mov	r3, r7
 800f0ba:	f7f1 fac5 	bl	8000648 <__aeabi_dmul>
 800f0be:	a366      	add	r3, pc, #408	@ (adr r3, 800f258 <atan+0x2d0>)
 800f0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c4:	f7f1 f90a 	bl	80002dc <__adddf3>
 800f0c8:	4642      	mov	r2, r8
 800f0ca:	464b      	mov	r3, r9
 800f0cc:	f7f1 fabc 	bl	8000648 <__aeabi_dmul>
 800f0d0:	a363      	add	r3, pc, #396	@ (adr r3, 800f260 <atan+0x2d8>)
 800f0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d6:	4680      	mov	r8, r0
 800f0d8:	4689      	mov	r9, r1
 800f0da:	4630      	mov	r0, r6
 800f0dc:	4639      	mov	r1, r7
 800f0de:	f7f1 fab3 	bl	8000648 <__aeabi_dmul>
 800f0e2:	a361      	add	r3, pc, #388	@ (adr r3, 800f268 <atan+0x2e0>)
 800f0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e8:	f7f1 f8f6 	bl	80002d8 <__aeabi_dsub>
 800f0ec:	4632      	mov	r2, r6
 800f0ee:	463b      	mov	r3, r7
 800f0f0:	f7f1 faaa 	bl	8000648 <__aeabi_dmul>
 800f0f4:	a35e      	add	r3, pc, #376	@ (adr r3, 800f270 <atan+0x2e8>)
 800f0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0fa:	f7f1 f8ed 	bl	80002d8 <__aeabi_dsub>
 800f0fe:	4632      	mov	r2, r6
 800f100:	463b      	mov	r3, r7
 800f102:	f7f1 faa1 	bl	8000648 <__aeabi_dmul>
 800f106:	a35c      	add	r3, pc, #368	@ (adr r3, 800f278 <atan+0x2f0>)
 800f108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10c:	f7f1 f8e4 	bl	80002d8 <__aeabi_dsub>
 800f110:	4632      	mov	r2, r6
 800f112:	463b      	mov	r3, r7
 800f114:	f7f1 fa98 	bl	8000648 <__aeabi_dmul>
 800f118:	a359      	add	r3, pc, #356	@ (adr r3, 800f280 <atan+0x2f8>)
 800f11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11e:	f7f1 f8db 	bl	80002d8 <__aeabi_dsub>
 800f122:	4632      	mov	r2, r6
 800f124:	463b      	mov	r3, r7
 800f126:	f7f1 fa8f 	bl	8000648 <__aeabi_dmul>
 800f12a:	4602      	mov	r2, r0
 800f12c:	460b      	mov	r3, r1
 800f12e:	4640      	mov	r0, r8
 800f130:	4649      	mov	r1, r9
 800f132:	f7f1 f8d3 	bl	80002dc <__adddf3>
 800f136:	4622      	mov	r2, r4
 800f138:	462b      	mov	r3, r5
 800f13a:	f7f1 fa85 	bl	8000648 <__aeabi_dmul>
 800f13e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f142:	4602      	mov	r2, r0
 800f144:	460b      	mov	r3, r1
 800f146:	d148      	bne.n	800f1da <atan+0x252>
 800f148:	4620      	mov	r0, r4
 800f14a:	4629      	mov	r1, r5
 800f14c:	f7f1 f8c4 	bl	80002d8 <__aeabi_dsub>
 800f150:	e72f      	b.n	800efb2 <atan+0x2a>
 800f152:	4b52      	ldr	r3, [pc, #328]	@ (800f29c <atan+0x314>)
 800f154:	2200      	movs	r2, #0
 800f156:	4620      	mov	r0, r4
 800f158:	4629      	mov	r1, r5
 800f15a:	f7f1 f8bd 	bl	80002d8 <__aeabi_dsub>
 800f15e:	4b4f      	ldr	r3, [pc, #316]	@ (800f29c <atan+0x314>)
 800f160:	4606      	mov	r6, r0
 800f162:	460f      	mov	r7, r1
 800f164:	2200      	movs	r2, #0
 800f166:	4620      	mov	r0, r4
 800f168:	4629      	mov	r1, r5
 800f16a:	f7f1 f8b7 	bl	80002dc <__adddf3>
 800f16e:	4602      	mov	r2, r0
 800f170:	460b      	mov	r3, r1
 800f172:	4630      	mov	r0, r6
 800f174:	4639      	mov	r1, r7
 800f176:	f7f1 fb91 	bl	800089c <__aeabi_ddiv>
 800f17a:	f04f 0a01 	mov.w	sl, #1
 800f17e:	4604      	mov	r4, r0
 800f180:	460d      	mov	r5, r1
 800f182:	e765      	b.n	800f050 <atan+0xc8>
 800f184:	4b47      	ldr	r3, [pc, #284]	@ (800f2a4 <atan+0x31c>)
 800f186:	429e      	cmp	r6, r3
 800f188:	d21c      	bcs.n	800f1c4 <atan+0x23c>
 800f18a:	4b47      	ldr	r3, [pc, #284]	@ (800f2a8 <atan+0x320>)
 800f18c:	2200      	movs	r2, #0
 800f18e:	4620      	mov	r0, r4
 800f190:	4629      	mov	r1, r5
 800f192:	f7f1 f8a1 	bl	80002d8 <__aeabi_dsub>
 800f196:	4b44      	ldr	r3, [pc, #272]	@ (800f2a8 <atan+0x320>)
 800f198:	4606      	mov	r6, r0
 800f19a:	460f      	mov	r7, r1
 800f19c:	2200      	movs	r2, #0
 800f19e:	4620      	mov	r0, r4
 800f1a0:	4629      	mov	r1, r5
 800f1a2:	f7f1 fa51 	bl	8000648 <__aeabi_dmul>
 800f1a6:	4b3d      	ldr	r3, [pc, #244]	@ (800f29c <atan+0x314>)
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	f7f1 f897 	bl	80002dc <__adddf3>
 800f1ae:	4602      	mov	r2, r0
 800f1b0:	460b      	mov	r3, r1
 800f1b2:	4630      	mov	r0, r6
 800f1b4:	4639      	mov	r1, r7
 800f1b6:	f7f1 fb71 	bl	800089c <__aeabi_ddiv>
 800f1ba:	f04f 0a02 	mov.w	sl, #2
 800f1be:	4604      	mov	r4, r0
 800f1c0:	460d      	mov	r5, r1
 800f1c2:	e745      	b.n	800f050 <atan+0xc8>
 800f1c4:	4622      	mov	r2, r4
 800f1c6:	462b      	mov	r3, r5
 800f1c8:	4938      	ldr	r1, [pc, #224]	@ (800f2ac <atan+0x324>)
 800f1ca:	2000      	movs	r0, #0
 800f1cc:	f7f1 fb66 	bl	800089c <__aeabi_ddiv>
 800f1d0:	f04f 0a03 	mov.w	sl, #3
 800f1d4:	4604      	mov	r4, r0
 800f1d6:	460d      	mov	r5, r1
 800f1d8:	e73a      	b.n	800f050 <atan+0xc8>
 800f1da:	4b35      	ldr	r3, [pc, #212]	@ (800f2b0 <atan+0x328>)
 800f1dc:	4e35      	ldr	r6, [pc, #212]	@ (800f2b4 <atan+0x32c>)
 800f1de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e6:	f7f1 f877 	bl	80002d8 <__aeabi_dsub>
 800f1ea:	4622      	mov	r2, r4
 800f1ec:	462b      	mov	r3, r5
 800f1ee:	f7f1 f873 	bl	80002d8 <__aeabi_dsub>
 800f1f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f1f6:	4602      	mov	r2, r0
 800f1f8:	460b      	mov	r3, r1
 800f1fa:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f1fe:	f7f1 f86b 	bl	80002d8 <__aeabi_dsub>
 800f202:	f1bb 0f00 	cmp.w	fp, #0
 800f206:	4604      	mov	r4, r0
 800f208:	460d      	mov	r5, r1
 800f20a:	f6bf aedc 	bge.w	800efc6 <atan+0x3e>
 800f20e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f212:	461d      	mov	r5, r3
 800f214:	e6d7      	b.n	800efc6 <atan+0x3e>
 800f216:	a51c      	add	r5, pc, #112	@ (adr r5, 800f288 <atan+0x300>)
 800f218:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f21c:	e6d3      	b.n	800efc6 <atan+0x3e>
 800f21e:	bf00      	nop
 800f220:	54442d18 	.word	0x54442d18
 800f224:	3ff921fb 	.word	0x3ff921fb
 800f228:	8800759c 	.word	0x8800759c
 800f22c:	7e37e43c 	.word	0x7e37e43c
 800f230:	e322da11 	.word	0xe322da11
 800f234:	3f90ad3a 	.word	0x3f90ad3a
 800f238:	24760deb 	.word	0x24760deb
 800f23c:	3fa97b4b 	.word	0x3fa97b4b
 800f240:	a0d03d51 	.word	0xa0d03d51
 800f244:	3fb10d66 	.word	0x3fb10d66
 800f248:	c54c206e 	.word	0xc54c206e
 800f24c:	3fb745cd 	.word	0x3fb745cd
 800f250:	920083ff 	.word	0x920083ff
 800f254:	3fc24924 	.word	0x3fc24924
 800f258:	5555550d 	.word	0x5555550d
 800f25c:	3fd55555 	.word	0x3fd55555
 800f260:	2c6a6c2f 	.word	0x2c6a6c2f
 800f264:	bfa2b444 	.word	0xbfa2b444
 800f268:	52defd9a 	.word	0x52defd9a
 800f26c:	3fadde2d 	.word	0x3fadde2d
 800f270:	af749a6d 	.word	0xaf749a6d
 800f274:	3fb3b0f2 	.word	0x3fb3b0f2
 800f278:	fe231671 	.word	0xfe231671
 800f27c:	3fbc71c6 	.word	0x3fbc71c6
 800f280:	9998ebc4 	.word	0x9998ebc4
 800f284:	3fc99999 	.word	0x3fc99999
 800f288:	54442d18 	.word	0x54442d18
 800f28c:	bff921fb 	.word	0xbff921fb
 800f290:	440fffff 	.word	0x440fffff
 800f294:	7ff00000 	.word	0x7ff00000
 800f298:	3fdbffff 	.word	0x3fdbffff
 800f29c:	3ff00000 	.word	0x3ff00000
 800f2a0:	3ff2ffff 	.word	0x3ff2ffff
 800f2a4:	40038000 	.word	0x40038000
 800f2a8:	3ff80000 	.word	0x3ff80000
 800f2ac:	bff00000 	.word	0xbff00000
 800f2b0:	0800fac8 	.word	0x0800fac8
 800f2b4:	0800fae8 	.word	0x0800fae8

0800f2b8 <fabs>:
 800f2b8:	ec51 0b10 	vmov	r0, r1, d0
 800f2bc:	4602      	mov	r2, r0
 800f2be:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f2c2:	ec43 2b10 	vmov	d0, r2, r3
 800f2c6:	4770      	bx	lr

0800f2c8 <_init>:
 800f2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ca:	bf00      	nop
 800f2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2ce:	bc08      	pop	{r3}
 800f2d0:	469e      	mov	lr, r3
 800f2d2:	4770      	bx	lr

0800f2d4 <_fini>:
 800f2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2d6:	bf00      	nop
 800f2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2da:	bc08      	pop	{r3}
 800f2dc:	469e      	mov	lr, r3
 800f2de:	4770      	bx	lr
