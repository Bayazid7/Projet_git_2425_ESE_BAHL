
SOFWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006640  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006818  08006818  00007818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006860  08006860  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006860  08006860  00007860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006868  08006868  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006868  08006868  00007868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800686c  0800686c  0000786c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006870  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  20000068  080068d8  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  080068d8  0000853c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c92a  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003937  00000000  00000000  000249c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001888  00000000  00000000  00028300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001314  00000000  00000000  00029b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004540  00000000  00000000  0002ae9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e74c  00000000  00000000  0002f3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0b17  00000000  00000000  0004db28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e63f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f20  00000000  00000000  0012e684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001355a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006800 	.word	0x08006800

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	08006800 	.word	0x08006800

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800050e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2220      	movs	r2, #32
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f005 feb9 	bl	8006298 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000526:	4b32      	ldr	r3, [pc, #200]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000528:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800052c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800052e:	4b30      	ldr	r3, [pc, #192]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000530:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000534:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000536:	4b2e      	ldr	r3, [pc, #184]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053c:	4b2c      	ldr	r3, [pc, #176]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000542:	4b2b      	ldr	r3, [pc, #172]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000548:	4b29      	ldr	r3, [pc, #164]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800054a:	2200      	movs	r2, #0
 800054c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054e:	4b28      	ldr	r3, [pc, #160]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000550:	2204      	movs	r2, #4
 8000552:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000554:	4b26      	ldr	r3, [pc, #152]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000556:	2200      	movs	r2, #0
 8000558:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800055a:	4b25      	ldr	r3, [pc, #148]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800055c:	2200      	movs	r2, #0
 800055e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000560:	4b23      	ldr	r3, [pc, #140]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000562:	2201      	movs	r2, #1
 8000564:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000566:	4b22      	ldr	r3, [pc, #136]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800056e:	4b20      	ldr	r3, [pc, #128]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000570:	2200      	movs	r2, #0
 8000572:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000574:	4b1e      	ldr	r3, [pc, #120]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000576:	2200      	movs	r2, #0
 8000578:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800057a:	4b1d      	ldr	r3, [pc, #116]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800057c:	2200      	movs	r2, #0
 800057e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000582:	4b1b      	ldr	r3, [pc, #108]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000584:	2200      	movs	r2, #0
 8000586:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000588:	4b19      	ldr	r3, [pc, #100]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800058a:	2200      	movs	r2, #0
 800058c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000590:	4817      	ldr	r0, [pc, #92]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000592:	f001 fa89 	bl	8001aa8 <HAL_ADC_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800059c:	f000 fa5a 	bl	8000a54 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005a0:	2300      	movs	r3, #0
 80005a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005a8:	4619      	mov	r1, r3
 80005aa:	4811      	ldr	r0, [pc, #68]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 80005ac:	f002 f816 	bl	80025dc <HAL_ADCEx_MultiModeConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005b6:	f000 fa4d 	bl	8000a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <MX_ADC1_Init+0xec>)
 80005bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005be:	2306      	movs	r3, #6
 80005c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005c6:	237f      	movs	r3, #127	@ 0x7f
 80005c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ca:	2304      	movs	r3, #4
 80005cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4619      	mov	r1, r3
 80005d6:	4806      	ldr	r0, [pc, #24]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 80005d8:	f001 fbea 	bl	8001db0 <HAL_ADC_ConfigChannel>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80005e2:	f000 fa37 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	3730      	adds	r7, #48	@ 0x30
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000084 	.word	0x20000084
 80005f4:	0c900008 	.word	0x0c900008

080005f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b09a      	sub	sp, #104	@ 0x68
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	2244      	movs	r2, #68	@ 0x44
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f005 fe3d 	bl	8006298 <memset>
  if(adcHandle->Instance==ADC1)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000626:	d134      	bne.n	8000692 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000628:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800062c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800062e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000632:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4618      	mov	r0, r3
 800063a:	f003 fa49 	bl	8003ad0 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000644:	f000 fa06 	bl	8000a54 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000648:	4b14      	ldr	r3, [pc, #80]	@ (800069c <HAL_ADC_MspInit+0xa4>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a13      	ldr	r2, [pc, #76]	@ (800069c <HAL_ADC_MspInit+0xa4>)
 800064e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000654:	4b11      	ldr	r3, [pc, #68]	@ (800069c <HAL_ADC_MspInit+0xa4>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <HAL_ADC_MspInit+0xa4>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a0d      	ldr	r2, [pc, #52]	@ (800069c <HAL_ADC_MspInit+0xa4>)
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <HAL_ADC_MspInit+0xa4>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CB_OUT1_Pin|CB_OUT2_Pin;
 8000678:	230c      	movs	r3, #12
 800067a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800067c:	2303      	movs	r3, #3
 800067e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000688:	4619      	mov	r1, r3
 800068a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068e:	f002 f929 	bl	80028e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000692:	bf00      	nop
 8000694:	3768      	adds	r7, #104	@ 0x68
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40021000 	.word	0x40021000

080006a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b6:	4b46      	ldr	r3, [pc, #280]	@ (80007d0 <MX_GPIO_Init+0x130>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ba:	4a45      	ldr	r2, [pc, #276]	@ (80007d0 <MX_GPIO_Init+0x130>)
 80006bc:	f043 0304 	orr.w	r3, r3, #4
 80006c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c2:	4b43      	ldr	r3, [pc, #268]	@ (80007d0 <MX_GPIO_Init+0x130>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c6:	f003 0304 	and.w	r3, r3, #4
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ce:	4b40      	ldr	r3, [pc, #256]	@ (80007d0 <MX_GPIO_Init+0x130>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d2:	4a3f      	ldr	r2, [pc, #252]	@ (80007d0 <MX_GPIO_Init+0x130>)
 80006d4:	f043 0320 	orr.w	r3, r3, #32
 80006d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006da:	4b3d      	ldr	r3, [pc, #244]	@ (80007d0 <MX_GPIO_Init+0x130>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006de:	f003 0320 	and.w	r3, r3, #32
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b3a      	ldr	r3, [pc, #232]	@ (80007d0 <MX_GPIO_Init+0x130>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ea:	4a39      	ldr	r2, [pc, #228]	@ (80007d0 <MX_GPIO_Init+0x130>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f2:	4b37      	ldr	r3, [pc, #220]	@ (80007d0 <MX_GPIO_Init+0x130>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b34      	ldr	r3, [pc, #208]	@ (80007d0 <MX_GPIO_Init+0x130>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000702:	4a33      	ldr	r2, [pc, #204]	@ (80007d0 <MX_GPIO_Init+0x130>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800070a:	4b31      	ldr	r3, [pc, #196]	@ (80007d0 <MX_GPIO_Init+0x130>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800071c:	482d      	ldr	r0, [pc, #180]	@ (80007d4 <MX_GPIO_Init+0x134>)
 800071e:	f002 fa63 	bl	8002be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CB_IN_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2190      	movs	r1, #144	@ 0x90
 8000726:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800072a:	f002 fa5d 	bl	8002be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000734:	4828      	ldr	r0, [pc, #160]	@ (80007d8 <MX_GPIO_Init+0x138>)
 8000736:	f002 fa57 	bl	8002be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800073a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800073e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	2301      	movs	r3, #1
 8000742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	2300      	movs	r3, #0
 800074a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	4619      	mov	r1, r3
 8000752:	4820      	ldr	r0, [pc, #128]	@ (80007d4 <MX_GPIO_Init+0x134>)
 8000754:	f002 f8c6 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CB_IN_Pin|DEV_EN_LIDAR_Pin;
 8000758:	2390      	movs	r3, #144	@ 0x90
 800075a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
 800075e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000772:	f002 f8b7 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHAT_SOURIS_Pin;
 8000776:	2320      	movs	r3, #32
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHAT_SOURIS_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800078c:	f002 f8aa 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin;
 8000790:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M_EN_LIDAR_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	480b      	ldr	r0, [pc, #44]	@ (80007d8 <MX_GPIO_Init+0x138>)
 80007aa:	f002 f89b 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 80007ae:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_GPIO_Init+0x138>)
 80007c4:	f002 f88e 	bl	80028e4 <HAL_GPIO_Init>

}
 80007c8:	bf00      	nop
 80007ca:	3728      	adds	r7, #40	@ 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40021000 	.word	0x40021000
 80007d4:	48000800 	.word	0x48000800
 80007d8:	48000400 	.word	0x48000400

080007dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000850 <MX_I2C1_Init+0x74>)
 80007e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000854 <MX_I2C1_Init+0x78>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xA0623C56;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <MX_I2C1_Init+0x74>)
 80007e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000858 <MX_I2C1_Init+0x7c>)
 80007ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007ec:	4b18      	ldr	r3, [pc, #96]	@ (8000850 <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f2:	4b17      	ldr	r3, [pc, #92]	@ (8000850 <MX_I2C1_Init+0x74>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f8:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007fe:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <MX_I2C1_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000804:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <MX_I2C1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800080a:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <MX_I2C1_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000810:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <MX_I2C1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000816:	480e      	ldr	r0, [pc, #56]	@ (8000850 <MX_I2C1_Init+0x74>)
 8000818:	f002 fa18 	bl	8002c4c <HAL_I2C_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000822:	f000 f917 	bl	8000a54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000826:	2100      	movs	r1, #0
 8000828:	4809      	ldr	r0, [pc, #36]	@ (8000850 <MX_I2C1_Init+0x74>)
 800082a:	f002 faaa 	bl	8002d82 <HAL_I2CEx_ConfigAnalogFilter>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000834:	f000 f90e 	bl	8000a54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000838:	2100      	movs	r1, #0
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <MX_I2C1_Init+0x74>)
 800083c:	f002 faec 	bl	8002e18 <HAL_I2CEx_ConfigDigitalFilter>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000846:	f000 f905 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000f0 	.word	0x200000f0
 8000854:	40005400 	.word	0x40005400
 8000858:	a0623c56 	.word	0xa0623c56

0800085c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b09a      	sub	sp, #104	@ 0x68
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	2244      	movs	r2, #68	@ 0x44
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f005 fd0b 	bl	8006298 <memset>
  if(i2cHandle->Instance==I2C1)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a1f      	ldr	r2, [pc, #124]	@ (8000904 <HAL_I2C_MspInit+0xa8>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d136      	bne.n	80008fa <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800088c:	2340      	movs	r3, #64	@ 0x40
 800088e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000890:	2300      	movs	r3, #0
 8000892:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	4618      	mov	r0, r3
 800089a:	f003 f919 	bl	8003ad0 <HAL_RCCEx_PeriphCLKConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008a4:	f000 f8d6 	bl	8000a54 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a8:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <HAL_I2C_MspInit+0xac>)
 80008aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ac:	4a16      	ldr	r2, [pc, #88]	@ (8000908 <HAL_I2C_MspInit+0xac>)
 80008ae:	f043 0302 	orr.w	r3, r3, #2
 80008b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b4:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <HAL_I2C_MspInit+0xac>)
 80008b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b8:	f003 0302 	and.w	r3, r3, #2
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80008c0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80008c4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c6:	2312      	movs	r3, #18
 80008c8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008d2:	2304      	movs	r3, #4
 80008d4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008da:	4619      	mov	r1, r3
 80008dc:	480b      	ldr	r0, [pc, #44]	@ (800090c <HAL_I2C_MspInit+0xb0>)
 80008de:	f002 f801 	bl	80028e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <HAL_I2C_MspInit+0xac>)
 80008e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008e6:	4a08      	ldr	r2, [pc, #32]	@ (8000908 <HAL_I2C_MspInit+0xac>)
 80008e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80008ee:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <HAL_I2C_MspInit+0xac>)
 80008f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008fa:	bf00      	nop
 80008fc:	3768      	adds	r7, #104	@ 0x68
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40005400 	.word	0x40005400
 8000908:	40021000 	.word	0x40021000
 800090c:	48000400 	.word	0x48000400

08000910 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart4, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 8000918:	1d39      	adds	r1, r7, #4
 800091a:	f04f 33ff 	mov.w	r3, #4294967295
 800091e:	2201      	movs	r2, #1
 8000920:	4803      	ldr	r0, [pc, #12]	@ (8000930 <__io_putchar+0x20>)
 8000922:	f004 fc45 	bl	80051b0 <HAL_UART_Transmit>
  return chr;
 8000926:	687b      	ldr	r3, [r7, #4]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200002c4 	.word	0x200002c4

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000938:	f000 fe87 	bl	800164a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093c:	f000 f82e 	bl	800099c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000940:	f7ff feae 	bl	80006a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000944:	f7ff fde0 	bl	8000508 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000948:	f000 fa0e 	bl	8000d68 <MX_TIM1_Init>
  MX_TIM3_Init();
 800094c:	f000 faac 	bl	8000ea8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000950:	f000 fb00 	bl	8000f54 <MX_TIM4_Init>
  MX_TIM16_Init();
 8000954:	f000 fb54 	bl	8001000 <MX_TIM16_Init>
  MX_UART4_Init();
 8000958:	f000 fd1c 	bl	8001394 <MX_UART4_Init>
  MX_USART3_UART_Init();
 800095c:	f000 fd66 	bl	800142c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000960:	f7ff ff3c 	bl	80007dc <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    printf("hello \r\n");
 8000964:	480b      	ldr	r0, [pc, #44]	@ (8000994 <main+0x60>)
 8000966:	f005 fbb7 	bl	80060d8 <puts>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800096a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800096e:	480a      	ldr	r0, [pc, #40]	@ (8000998 <main+0x64>)
 8000970:	f002 f952 	bl	8002c18 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000974:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000978:	4807      	ldr	r0, [pc, #28]	@ (8000998 <main+0x64>)
 800097a:	f002 f94d 	bl	8002c18 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800097e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000982:	4805      	ldr	r0, [pc, #20]	@ (8000998 <main+0x64>)
 8000984:	f002 f948 	bl	8002c18 <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 8000988:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800098c:	f000 fe94 	bl	80016b8 <HAL_Delay>
    printf("hello \r\n");
 8000990:	bf00      	nop
 8000992:	e7e7      	b.n	8000964 <main+0x30>
 8000994:	08006818 	.word	0x08006818
 8000998:	48000800 	.word	0x48000800

0800099c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b094      	sub	sp, #80	@ 0x50
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	f107 0318 	add.w	r3, r7, #24
 80009a6:	2238      	movs	r2, #56	@ 0x38
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f005 fc74 	bl	8006298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80009be:	2000      	movs	r0, #0
 80009c0:	f002 fa76 	bl	8002eb0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009cc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ce:	2302      	movs	r3, #2
 80009d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d2:	2303      	movs	r3, #3
 80009d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80009d6:	2304      	movs	r3, #4
 80009d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80009da:	2355      	movs	r3, #85	@ 0x55
 80009dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009de:	2302      	movs	r3, #2
 80009e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009e2:	2302      	movs	r3, #2
 80009e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ea:	f107 0318 	add.w	r3, r7, #24
 80009ee:	4618      	mov	r0, r3
 80009f0:	f002 fb12 	bl	8003018 <HAL_RCC_OscConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0x62>
  {
    Error_Handler();
 80009fa:	f000 f82b 	bl	8000a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fe:	230f      	movs	r3, #15
 8000a00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a02:	2303      	movs	r3, #3
 8000a04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2104      	movs	r1, #4
 8000a16:	4618      	mov	r0, r3
 8000a18:	f002 fe10 	bl	800363c <HAL_RCC_ClockConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a22:	f000 f817 	bl	8000a54 <Error_Handler>
  }
}
 8000a26:	bf00      	nop
 8000a28:	3750      	adds	r7, #80	@ 0x50
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a04      	ldr	r2, [pc, #16]	@ (8000a50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d101      	bne.n	8000a46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a42:	f000 fe1b 	bl	800167c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40001000 	.word	0x40001000

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <Error_Handler+0x8>

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a72:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a82:	4a08      	ldr	r2, [pc, #32]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <HAL_MspInit+0x44>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a96:	f002 faaf 	bl	8002ff8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08c      	sub	sp, #48	@ 0x30
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b6c <HAL_InitTick+0xc4>)
 8000aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000abc:	4a2b      	ldr	r2, [pc, #172]	@ (8000b6c <HAL_InitTick+0xc4>)
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ac4:	4b29      	ldr	r3, [pc, #164]	@ (8000b6c <HAL_InitTick+0xc4>)
 8000ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac8:	f003 0310 	and.w	r3, r3, #16
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ad0:	f107 020c 	add.w	r2, r7, #12
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f002 ff82 	bl	80039e4 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ae0:	f002 ff54 	bl	800398c <HAL_RCC_GetPCLK1Freq>
 8000ae4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ae8:	4a21      	ldr	r2, [pc, #132]	@ (8000b70 <HAL_InitTick+0xc8>)
 8000aea:	fba2 2303 	umull	r2, r3, r2, r3
 8000aee:	0c9b      	lsrs	r3, r3, #18
 8000af0:	3b01      	subs	r3, #1
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000af4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b74 <HAL_InitTick+0xcc>)
 8000af6:	4a20      	ldr	r2, [pc, #128]	@ (8000b78 <HAL_InitTick+0xd0>)
 8000af8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000afa:	4b1e      	ldr	r3, [pc, #120]	@ (8000b74 <HAL_InitTick+0xcc>)
 8000afc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b00:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b02:	4a1c      	ldr	r2, [pc, #112]	@ (8000b74 <HAL_InitTick+0xcc>)
 8000b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b06:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <HAL_InitTick+0xcc>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0e:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <HAL_InitTick+0xcc>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000b14:	4817      	ldr	r0, [pc, #92]	@ (8000b74 <HAL_InitTick+0xcc>)
 8000b16:	f003 f9cb 	bl	8003eb0 <HAL_TIM_Base_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d11b      	bne.n	8000b60 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b28:	4812      	ldr	r0, [pc, #72]	@ (8000b74 <HAL_InitTick+0xcc>)
 8000b2a:	f003 fa19 	bl	8003f60 <HAL_TIM_Base_Start_IT>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d111      	bne.n	8000b60 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b3c:	2036      	movs	r0, #54	@ 0x36
 8000b3e:	f001 fec3 	bl	80028c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d808      	bhi.n	8000b5a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	2036      	movs	r0, #54	@ 0x36
 8000b4e:	f001 fea1 	bl	8002894 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b52:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <HAL_InitTick+0xd4>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6013      	str	r3, [r2, #0]
 8000b58:	e002      	b.n	8000b60 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3730      	adds	r7, #48	@ 0x30
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	431bde83 	.word	0x431bde83
 8000b74:	20000144 	.word	0x20000144
 8000b78:	40001000 	.word	0x40001000
 8000b7c:	20000004 	.word	0x20000004

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <NMI_Handler+0x4>

08000b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <MemManage_Handler+0x4>

08000b98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000be4:	4802      	ldr	r0, [pc, #8]	@ (8000bf0 <TIM6_DAC_IRQHandler+0x10>)
 8000be6:	f003 fb22 	bl	800422e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000144 	.word	0x20000144

08000bf4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	e00a      	b.n	8000c1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c06:	f3af 8000 	nop.w
 8000c0a:	4601      	mov	r1, r0
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	60ba      	str	r2, [r7, #8]
 8000c12:	b2ca      	uxtb	r2, r1
 8000c14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dbf0      	blt.n	8000c06 <_read+0x12>
  }

  return len;
 8000c24:	687b      	ldr	r3, [r7, #4]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	e009      	b.n	8000c54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	60ba      	str	r2, [r7, #8]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fe61 	bl	8000910 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	dbf1      	blt.n	8000c40 <_write+0x12>
  }
  return len;
 8000c5c:	687b      	ldr	r3, [r7, #4]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <_close>:

int _close(int file)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <_isatty>:

int _isatty(int file)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd8:	4a14      	ldr	r2, [pc, #80]	@ (8000d2c <_sbrk+0x5c>)
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <_sbrk+0x60>)
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce4:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <_sbrk+0x64>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	@ (8000d38 <_sbrk+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf2:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d207      	bcs.n	8000d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d00:	f005 fb18 	bl	8006334 <__errno>
 8000d04:	4603      	mov	r3, r0
 8000d06:	220c      	movs	r2, #12
 8000d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	e009      	b.n	8000d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d16:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a05      	ldr	r2, [pc, #20]	@ (8000d34 <_sbrk+0x64>)
 8000d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20008000 	.word	0x20008000
 8000d30:	00000400 	.word	0x00000400
 8000d34:	20000190 	.word	0x20000190
 8000d38:	20000540 	.word	0x20000540

08000d3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d40:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <SystemInit+0x28>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d46:	4a07      	ldr	r2, [pc, #28]	@ (8000d64 <SystemInit+0x28>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8000d50:	4b04      	ldr	r3, [pc, #16]	@ (8000d64 <SystemInit+0x28>)
 8000d52:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d56:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b098      	sub	sp, #96	@ 0x60
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d7a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]
 8000d8a:	615a      	str	r2, [r3, #20]
 8000d8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2234      	movs	r2, #52	@ 0x34
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f005 fa7f 	bl	8006298 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d9a:	4b41      	ldr	r3, [pc, #260]	@ (8000ea0 <MX_TIM1_Init+0x138>)
 8000d9c:	4a41      	ldr	r2, [pc, #260]	@ (8000ea4 <MX_TIM1_Init+0x13c>)
 8000d9e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000da0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ea0 <MX_TIM1_Init+0x138>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ea0 <MX_TIM1_Init+0x138>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000dac:	4b3c      	ldr	r3, [pc, #240]	@ (8000ea0 <MX_TIM1_Init+0x138>)
 8000dae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000db2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ea0 <MX_TIM1_Init+0x138>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dba:	4b39      	ldr	r3, [pc, #228]	@ (8000ea0 <MX_TIM1_Init+0x138>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc0:	4b37      	ldr	r3, [pc, #220]	@ (8000ea0 <MX_TIM1_Init+0x138>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dc6:	4836      	ldr	r0, [pc, #216]	@ (8000ea0 <MX_TIM1_Init+0x138>)
 8000dc8:	f003 f934 	bl	8004034 <HAL_TIM_PWM_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000dd2:	f7ff fe3f 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000de2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000de6:	4619      	mov	r1, r3
 8000de8:	482d      	ldr	r0, [pc, #180]	@ (8000ea0 <MX_TIM1_Init+0x138>)
 8000dea:	f004 f83d 	bl	8004e68 <HAL_TIMEx_MasterConfigSynchronization>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000df4:	f7ff fe2e 	bl	8000a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000df8:	2360      	movs	r3, #96	@ 0x60
 8000dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e00:	2300      	movs	r3, #0
 8000e02:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e04:	2300      	movs	r3, #0
 8000e06:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e10:	2300      	movs	r3, #0
 8000e12:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e14:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e18:	2200      	movs	r2, #0
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4820      	ldr	r0, [pc, #128]	@ (8000ea0 <MX_TIM1_Init+0x138>)
 8000e1e:	f003 fb55 	bl	80044cc <HAL_TIM_PWM_ConfigChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e28:	f7ff fe14 	bl	8000a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e2c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e30:	2204      	movs	r2, #4
 8000e32:	4619      	mov	r1, r3
 8000e34:	481a      	ldr	r0, [pc, #104]	@ (8000ea0 <MX_TIM1_Init+0x138>)
 8000e36:	f003 fb49 	bl	80044cc <HAL_TIM_PWM_ConfigChannel>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000e40:	f7ff fe08 	bl	8000a54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000e74:	2300      	movs	r3, #0
 8000e76:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4807      	ldr	r0, [pc, #28]	@ (8000ea0 <MX_TIM1_Init+0x138>)
 8000e82:	f004 f873 	bl	8004f6c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000e8c:	f7ff fde2 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e90:	4803      	ldr	r0, [pc, #12]	@ (8000ea0 <MX_TIM1_Init+0x138>)
 8000e92:	f000 fa03 	bl	800129c <HAL_TIM_MspPostInit>

}
 8000e96:	bf00      	nop
 8000e98:	3760      	adds	r7, #96	@ 0x60
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000194 	.word	0x20000194
 8000ea4:	40012c00 	.word	0x40012c00

08000ea8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08c      	sub	sp, #48	@ 0x30
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	2224      	movs	r2, #36	@ 0x24
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f005 f9ee 	bl	8006298 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ec6:	4b21      	ldr	r3, [pc, #132]	@ (8000f4c <MX_TIM3_Init+0xa4>)
 8000ec8:	4a21      	ldr	r2, [pc, #132]	@ (8000f50 <MX_TIM3_Init+0xa8>)
 8000eca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f4c <MX_TIM3_Init+0xa4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f4c <MX_TIM3_Init+0xa4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <MX_TIM3_Init+0xa4>)
 8000eda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ede:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f4c <MX_TIM3_Init+0xa4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <MX_TIM3_Init+0xa4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000eec:	2301      	movs	r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f04:	2301      	movs	r3, #1
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	4619      	mov	r1, r3
 8000f16:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <MX_TIM3_Init+0xa4>)
 8000f18:	f003 f8e3 	bl	80040e2 <HAL_TIM_Encoder_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000f22:	f7ff fd97 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f2e:	463b      	mov	r3, r7
 8000f30:	4619      	mov	r1, r3
 8000f32:	4806      	ldr	r0, [pc, #24]	@ (8000f4c <MX_TIM3_Init+0xa4>)
 8000f34:	f003 ff98 	bl	8004e68 <HAL_TIMEx_MasterConfigSynchronization>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000f3e:	f7ff fd89 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	3730      	adds	r7, #48	@ 0x30
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200001e0 	.word	0x200001e0
 8000f50:	40000400 	.word	0x40000400

08000f54 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08c      	sub	sp, #48	@ 0x30
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	2224      	movs	r2, #36	@ 0x24
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f005 f998 	bl	8006298 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f72:	4b21      	ldr	r3, [pc, #132]	@ (8000ff8 <MX_TIM4_Init+0xa4>)
 8000f74:	4a21      	ldr	r2, [pc, #132]	@ (8000ffc <MX_TIM4_Init+0xa8>)
 8000f76:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <MX_TIM4_Init+0xa4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <MX_TIM4_Init+0xa4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f84:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <MX_TIM4_Init+0xa4>)
 8000f86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f8a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <MX_TIM4_Init+0xa4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f92:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <MX_TIM4_Init+0xa4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480d      	ldr	r0, [pc, #52]	@ (8000ff8 <MX_TIM4_Init+0xa4>)
 8000fc4:	f003 f88d 	bl	80040e2 <HAL_TIM_Encoder_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000fce:	f7ff fd41 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fda:	463b      	mov	r3, r7
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4806      	ldr	r0, [pc, #24]	@ (8000ff8 <MX_TIM4_Init+0xa4>)
 8000fe0:	f003 ff42 	bl	8004e68 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000fea:	f7ff fd33 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	3730      	adds	r7, #48	@ 0x30
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000022c 	.word	0x2000022c
 8000ffc:	40000800 	.word	0x40000800

08001000 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b094      	sub	sp, #80	@ 0x50
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001006:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]
 8001016:	615a      	str	r2, [r3, #20]
 8001018:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800101a:	463b      	mov	r3, r7
 800101c:	2234      	movs	r2, #52	@ 0x34
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f005 f939 	bl	8006298 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001026:	4b31      	ldr	r3, [pc, #196]	@ (80010ec <MX_TIM16_Init+0xec>)
 8001028:	4a31      	ldr	r2, [pc, #196]	@ (80010f0 <MX_TIM16_Init+0xf0>)
 800102a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800102c:	4b2f      	ldr	r3, [pc, #188]	@ (80010ec <MX_TIM16_Init+0xec>)
 800102e:	2200      	movs	r2, #0
 8001030:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001032:	4b2e      	ldr	r3, [pc, #184]	@ (80010ec <MX_TIM16_Init+0xec>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001038:	4b2c      	ldr	r3, [pc, #176]	@ (80010ec <MX_TIM16_Init+0xec>)
 800103a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800103e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001040:	4b2a      	ldr	r3, [pc, #168]	@ (80010ec <MX_TIM16_Init+0xec>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001046:	4b29      	ldr	r3, [pc, #164]	@ (80010ec <MX_TIM16_Init+0xec>)
 8001048:	2200      	movs	r2, #0
 800104a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104c:	4b27      	ldr	r3, [pc, #156]	@ (80010ec <MX_TIM16_Init+0xec>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001052:	4826      	ldr	r0, [pc, #152]	@ (80010ec <MX_TIM16_Init+0xec>)
 8001054:	f002 ff2c 	bl	8003eb0 <HAL_TIM_Base_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800105e:	f7ff fcf9 	bl	8000a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001062:	4822      	ldr	r0, [pc, #136]	@ (80010ec <MX_TIM16_Init+0xec>)
 8001064:	f002 ffe6 	bl	8004034 <HAL_TIM_PWM_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800106e:	f7ff fcf1 	bl	8000a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001072:	2360      	movs	r3, #96	@ 0x60
 8001074:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800107a:	2300      	movs	r3, #0
 800107c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800107e:	2300      	movs	r3, #0
 8001080:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800108a:	2300      	movs	r3, #0
 800108c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800108e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001092:	2200      	movs	r2, #0
 8001094:	4619      	mov	r1, r3
 8001096:	4815      	ldr	r0, [pc, #84]	@ (80010ec <MX_TIM16_Init+0xec>)
 8001098:	f003 fa18 	bl	80044cc <HAL_TIM_PWM_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80010a2:	f7ff fcd7 	bl	8000a54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	4807      	ldr	r0, [pc, #28]	@ (80010ec <MX_TIM16_Init+0xec>)
 80010ce:	f003 ff4d 	bl	8004f6c <HAL_TIMEx_ConfigBreakDeadTime>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80010d8:	f7ff fcbc 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80010dc:	4803      	ldr	r0, [pc, #12]	@ (80010ec <MX_TIM16_Init+0xec>)
 80010de:	f000 f8dd 	bl	800129c <HAL_TIM_MspPostInit>

}
 80010e2:	bf00      	nop
 80010e4:	3750      	adds	r7, #80	@ 0x50
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000278 	.word	0x20000278
 80010f0:	40014400 	.word	0x40014400

080010f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <HAL_TIM_PWM_MspInit+0x38>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d10b      	bne.n	800111e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <HAL_TIM_PWM_MspInit+0x3c>)
 8001108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800110a:	4a09      	ldr	r2, [pc, #36]	@ (8001130 <HAL_TIM_PWM_MspInit+0x3c>)
 800110c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001110:	6613      	str	r3, [r2, #96]	@ 0x60
 8001112:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <HAL_TIM_PWM_MspInit+0x3c>)
 8001114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001116:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40012c00 	.word	0x40012c00
 8001130:	40021000 	.word	0x40021000

08001134 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	@ 0x30
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a3d      	ldr	r2, [pc, #244]	@ (8001248 <HAL_TIM_Encoder_MspInit+0x114>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d144      	bne.n	80011e0 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001156:	4b3d      	ldr	r3, [pc, #244]	@ (800124c <HAL_TIM_Encoder_MspInit+0x118>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115a:	4a3c      	ldr	r2, [pc, #240]	@ (800124c <HAL_TIM_Encoder_MspInit+0x118>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	6593      	str	r3, [r2, #88]	@ 0x58
 8001162:	4b3a      	ldr	r3, [pc, #232]	@ (800124c <HAL_TIM_Encoder_MspInit+0x118>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	4b37      	ldr	r3, [pc, #220]	@ (800124c <HAL_TIM_Encoder_MspInit+0x118>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	4a36      	ldr	r2, [pc, #216]	@ (800124c <HAL_TIM_Encoder_MspInit+0x118>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117a:	4b34      	ldr	r3, [pc, #208]	@ (800124c <HAL_TIM_Encoder_MspInit+0x118>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	4b31      	ldr	r3, [pc, #196]	@ (800124c <HAL_TIM_Encoder_MspInit+0x118>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	4a30      	ldr	r2, [pc, #192]	@ (800124c <HAL_TIM_Encoder_MspInit+0x118>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001192:	4b2e      	ldr	r3, [pc, #184]	@ (800124c <HAL_TIM_Encoder_MspInit+0x118>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PHASEB2_Pin;
 800119e:	2340      	movs	r3, #64	@ 0x40
 80011a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011ae:	2302      	movs	r3, #2
 80011b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PHASEB2_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	4825      	ldr	r0, [pc, #148]	@ (8001250 <HAL_TIM_Encoder_MspInit+0x11c>)
 80011ba:	f001 fb93 	bl	80028e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PHASEA2_Pin;
 80011be:	2320      	movs	r3, #32
 80011c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011ce:	2302      	movs	r3, #2
 80011d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PHASEA2_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	4619      	mov	r1, r3
 80011d8:	481e      	ldr	r0, [pc, #120]	@ (8001254 <HAL_TIM_Encoder_MspInit+0x120>)
 80011da:	f001 fb83 	bl	80028e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80011de:	e02e      	b.n	800123e <HAL_TIM_Encoder_MspInit+0x10a>
  else if(tim_encoderHandle->Instance==TIM4)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001258 <HAL_TIM_Encoder_MspInit+0x124>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d129      	bne.n	800123e <HAL_TIM_Encoder_MspInit+0x10a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011ea:	4b18      	ldr	r3, [pc, #96]	@ (800124c <HAL_TIM_Encoder_MspInit+0x118>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ee:	4a17      	ldr	r2, [pc, #92]	@ (800124c <HAL_TIM_Encoder_MspInit+0x118>)
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011f6:	4b15      	ldr	r3, [pc, #84]	@ (800124c <HAL_TIM_Encoder_MspInit+0x118>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b12      	ldr	r3, [pc, #72]	@ (800124c <HAL_TIM_Encoder_MspInit+0x118>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001206:	4a11      	ldr	r2, [pc, #68]	@ (800124c <HAL_TIM_Encoder_MspInit+0x118>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800120e:	4b0f      	ldr	r3, [pc, #60]	@ (800124c <HAL_TIM_Encoder_MspInit+0x118>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PHASEB1_Pin|PHASEA1_Pin;
 800121a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800121e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800122c:	230a      	movs	r3, #10
 800122e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123a:	f001 fb53 	bl	80028e4 <HAL_GPIO_Init>
}
 800123e:	bf00      	nop
 8001240:	3730      	adds	r7, #48	@ 0x30
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40000400 	.word	0x40000400
 800124c:	40021000 	.word	0x40021000
 8001250:	48000800 	.word	0x48000800
 8001254:	48000400 	.word	0x48000400
 8001258:	40000800 	.word	0x40000800

0800125c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <HAL_TIM_Base_MspInit+0x38>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d10b      	bne.n	8001286 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800126e:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <HAL_TIM_Base_MspInit+0x3c>)
 8001270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001272:	4a09      	ldr	r2, [pc, #36]	@ (8001298 <HAL_TIM_Base_MspInit+0x3c>)
 8001274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001278:	6613      	str	r3, [r2, #96]	@ 0x60
 800127a:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <HAL_TIM_Base_MspInit+0x3c>)
 800127c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800127e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40014400 	.word	0x40014400
 8001298:	40021000 	.word	0x40021000

0800129c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	@ 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a32      	ldr	r2, [pc, #200]	@ (8001384 <HAL_TIM_MspPostInit+0xe8>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d13b      	bne.n	8001336 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	4b32      	ldr	r3, [pc, #200]	@ (8001388 <HAL_TIM_MspPostInit+0xec>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c2:	4a31      	ldr	r2, [pc, #196]	@ (8001388 <HAL_TIM_MspPostInit+0xec>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001388 <HAL_TIM_MspPostInit+0xec>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001388 <HAL_TIM_MspPostInit+0xec>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012da:	4a2b      	ldr	r2, [pc, #172]	@ (8001388 <HAL_TIM_MspPostInit+0xec>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e2:	4b29      	ldr	r3, [pc, #164]	@ (8001388 <HAL_TIM_MspPostInit+0xec>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = REV2_Pin|REV1_Pin;
 80012ee:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001300:	2306      	movs	r3, #6
 8001302:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4820      	ldr	r0, [pc, #128]	@ (800138c <HAL_TIM_MspPostInit+0xf0>)
 800130c:	f001 faea 	bl	80028e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FWD2_Pin|FWD1_Pin;
 8001310:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001322:	2306      	movs	r3, #6
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001330:	f001 fad8 	bl	80028e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001334:	e021      	b.n	800137a <HAL_TIM_MspPostInit+0xde>
  else if(timHandle->Instance==TIM16)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a15      	ldr	r2, [pc, #84]	@ (8001390 <HAL_TIM_MspPostInit+0xf4>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d11c      	bne.n	800137a <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <HAL_TIM_MspPostInit+0xec>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001344:	4a10      	ldr	r2, [pc, #64]	@ (8001388 <HAL_TIM_MspPostInit+0xec>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134c:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <HAL_TIM_MspPostInit+0xec>)
 800134e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M_SCTR_LIDAR_Pin;
 8001358:	2340      	movs	r3, #64	@ 0x40
 800135a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001368:	2301      	movs	r3, #1
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4619      	mov	r1, r3
 8001372:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001376:	f001 fab5 	bl	80028e4 <HAL_GPIO_Init>
}
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	@ 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40012c00 	.word	0x40012c00
 8001388:	40021000 	.word	0x40021000
 800138c:	48000400 	.word	0x48000400
 8001390:	40014400 	.word	0x40014400

08001394 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001398:	4b22      	ldr	r3, [pc, #136]	@ (8001424 <MX_UART4_Init+0x90>)
 800139a:	4a23      	ldr	r2, [pc, #140]	@ (8001428 <MX_UART4_Init+0x94>)
 800139c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800139e:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <MX_UART4_Init+0x90>)
 80013a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013a4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001424 <MX_UART4_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001424 <MX_UART4_Init+0x90>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001424 <MX_UART4_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <MX_UART4_Init+0x90>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <MX_UART4_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <MX_UART4_Init+0x90>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ca:	4b16      	ldr	r3, [pc, #88]	@ (8001424 <MX_UART4_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013d0:	4b14      	ldr	r3, [pc, #80]	@ (8001424 <MX_UART4_Init+0x90>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d6:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <MX_UART4_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80013dc:	4811      	ldr	r0, [pc, #68]	@ (8001424 <MX_UART4_Init+0x90>)
 80013de:	f003 fe97 	bl	8005110 <HAL_UART_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80013e8:	f7ff fb34 	bl	8000a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ec:	2100      	movs	r1, #0
 80013ee:	480d      	ldr	r0, [pc, #52]	@ (8001424 <MX_UART4_Init+0x90>)
 80013f0:	f004 fc90 	bl	8005d14 <HAL_UARTEx_SetTxFifoThreshold>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80013fa:	f7ff fb2b 	bl	8000a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013fe:	2100      	movs	r1, #0
 8001400:	4808      	ldr	r0, [pc, #32]	@ (8001424 <MX_UART4_Init+0x90>)
 8001402:	f004 fcc5 	bl	8005d90 <HAL_UARTEx_SetRxFifoThreshold>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800140c:	f7ff fb22 	bl	8000a54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001410:	4804      	ldr	r0, [pc, #16]	@ (8001424 <MX_UART4_Init+0x90>)
 8001412:	f004 fc46 	bl	8005ca2 <HAL_UARTEx_DisableFifoMode>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800141c:	f7ff fb1a 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200002c4 	.word	0x200002c4
 8001428:	40004c00 	.word	0x40004c00

0800142c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001430:	4b22      	ldr	r3, [pc, #136]	@ (80014bc <MX_USART3_UART_Init+0x90>)
 8001432:	4a23      	ldr	r2, [pc, #140]	@ (80014c0 <MX_USART3_UART_Init+0x94>)
 8001434:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001436:	4b21      	ldr	r3, [pc, #132]	@ (80014bc <MX_USART3_UART_Init+0x90>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b1f      	ldr	r3, [pc, #124]	@ (80014bc <MX_USART3_UART_Init+0x90>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <MX_USART3_UART_Init+0x90>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800144a:	4b1c      	ldr	r3, [pc, #112]	@ (80014bc <MX_USART3_UART_Init+0x90>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <MX_USART3_UART_Init+0x90>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <MX_USART3_UART_Init+0x90>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b17      	ldr	r3, [pc, #92]	@ (80014bc <MX_USART3_UART_Init+0x90>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001462:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <MX_USART3_UART_Init+0x90>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001468:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <MX_USART3_UART_Init+0x90>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800146e:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <MX_USART3_UART_Init+0x90>)
 8001470:	2200      	movs	r2, #0
 8001472:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001474:	4811      	ldr	r0, [pc, #68]	@ (80014bc <MX_USART3_UART_Init+0x90>)
 8001476:	f003 fe4b 	bl	8005110 <HAL_UART_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001480:	f7ff fae8 	bl	8000a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001484:	2100      	movs	r1, #0
 8001486:	480d      	ldr	r0, [pc, #52]	@ (80014bc <MX_USART3_UART_Init+0x90>)
 8001488:	f004 fc44 	bl	8005d14 <HAL_UARTEx_SetTxFifoThreshold>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001492:	f7ff fadf 	bl	8000a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001496:	2100      	movs	r1, #0
 8001498:	4808      	ldr	r0, [pc, #32]	@ (80014bc <MX_USART3_UART_Init+0x90>)
 800149a:	f004 fc79 	bl	8005d90 <HAL_UARTEx_SetRxFifoThreshold>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014a4:	f7ff fad6 	bl	8000a54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	@ (80014bc <MX_USART3_UART_Init+0x90>)
 80014aa:	f004 fbfa 	bl	8005ca2 <HAL_UARTEx_DisableFifoMode>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014b4:	f7ff face 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000358 	.word	0x20000358
 80014c0:	40004800 	.word	0x40004800

080014c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b09c      	sub	sp, #112	@ 0x70
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014dc:	f107 0318 	add.w	r3, r7, #24
 80014e0:	2244      	movs	r2, #68	@ 0x44
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f004 fed7 	bl	8006298 <memset>
  if(uartHandle->Instance==UART4)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a3d      	ldr	r2, [pc, #244]	@ (80015e4 <HAL_UART_MspInit+0x120>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d137      	bne.n	8001564 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80014f4:	2308      	movs	r3, #8
 80014f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014fc:	f107 0318 	add.w	r3, r7, #24
 8001500:	4618      	mov	r0, r3
 8001502:	f002 fae5 	bl	8003ad0 <HAL_RCCEx_PeriphCLKConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800150c:	f7ff faa2 	bl	8000a54 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001510:	4b35      	ldr	r3, [pc, #212]	@ (80015e8 <HAL_UART_MspInit+0x124>)
 8001512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001514:	4a34      	ldr	r2, [pc, #208]	@ (80015e8 <HAL_UART_MspInit+0x124>)
 8001516:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800151a:	6593      	str	r3, [r2, #88]	@ 0x58
 800151c:	4b32      	ldr	r3, [pc, #200]	@ (80015e8 <HAL_UART_MspInit+0x124>)
 800151e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001520:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001528:	4b2f      	ldr	r3, [pc, #188]	@ (80015e8 <HAL_UART_MspInit+0x124>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152c:	4a2e      	ldr	r2, [pc, #184]	@ (80015e8 <HAL_UART_MspInit+0x124>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001534:	4b2c      	ldr	r3, [pc, #176]	@ (80015e8 <HAL_UART_MspInit+0x124>)
 8001536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_SWD_Pin|RX_SWD_Pin;
 8001540:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001544:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001552:	2305      	movs	r3, #5
 8001554:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001556:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800155a:	4619      	mov	r1, r3
 800155c:	4823      	ldr	r0, [pc, #140]	@ (80015ec <HAL_UART_MspInit+0x128>)
 800155e:	f001 f9c1 	bl	80028e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001562:	e03b      	b.n	80015dc <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a21      	ldr	r2, [pc, #132]	@ (80015f0 <HAL_UART_MspInit+0x12c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d136      	bne.n	80015dc <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800156e:	2304      	movs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001576:	f107 0318 	add.w	r3, r7, #24
 800157a:	4618      	mov	r0, r3
 800157c:	f002 faa8 	bl	8003ad0 <HAL_RCCEx_PeriphCLKConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001586:	f7ff fa65 	bl	8000a54 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800158a:	4b17      	ldr	r3, [pc, #92]	@ (80015e8 <HAL_UART_MspInit+0x124>)
 800158c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158e:	4a16      	ldr	r2, [pc, #88]	@ (80015e8 <HAL_UART_MspInit+0x124>)
 8001590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001594:	6593      	str	r3, [r2, #88]	@ 0x58
 8001596:	4b14      	ldr	r3, [pc, #80]	@ (80015e8 <HAL_UART_MspInit+0x124>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <HAL_UART_MspInit+0x124>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	4a10      	ldr	r2, [pc, #64]	@ (80015e8 <HAL_UART_MspInit+0x124>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ae:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <HAL_UART_MspInit+0x124>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LIDAR_RX_Pin|LIDAR_TX_Pin;
 80015ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80015be:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015cc:	2307      	movs	r3, #7
 80015ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015d4:	4619      	mov	r1, r3
 80015d6:	4807      	ldr	r0, [pc, #28]	@ (80015f4 <HAL_UART_MspInit+0x130>)
 80015d8:	f001 f984 	bl	80028e4 <HAL_GPIO_Init>
}
 80015dc:	bf00      	nop
 80015de:	3770      	adds	r7, #112	@ 0x70
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40004c00 	.word	0x40004c00
 80015e8:	40021000 	.word	0x40021000
 80015ec:	48000800 	.word	0x48000800
 80015f0:	40004800 	.word	0x40004800
 80015f4:	48000400 	.word	0x48000400

080015f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015f8:	480d      	ldr	r0, [pc, #52]	@ (8001630 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015fa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015fc:	f7ff fb9e 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001600:	480c      	ldr	r0, [pc, #48]	@ (8001634 <LoopForever+0x6>)
  ldr r1, =_edata
 8001602:	490d      	ldr	r1, [pc, #52]	@ (8001638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001604:	4a0d      	ldr	r2, [pc, #52]	@ (800163c <LoopForever+0xe>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001618:	4c0a      	ldr	r4, [pc, #40]	@ (8001644 <LoopForever+0x16>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001626:	f004 fe8b 	bl	8006340 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800162a:	f7ff f983 	bl	8000934 <main>

0800162e <LoopForever>:

LoopForever:
    b LoopForever
 800162e:	e7fe      	b.n	800162e <LoopForever>
  ldr   r0, =_estack
 8001630:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001638:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800163c:	08006870 	.word	0x08006870
  ldr r2, =_sbss
 8001640:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001644:	2000053c 	.word	0x2000053c

08001648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC1_2_IRQHandler>

0800164a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001654:	2003      	movs	r0, #3
 8001656:	f001 f912 	bl	800287e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800165a:	200f      	movs	r0, #15
 800165c:	f7ff fa24 	bl	8000aa8 <HAL_InitTick>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d002      	beq.n	800166c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	71fb      	strb	r3, [r7, #7]
 800166a:	e001      	b.n	8001670 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800166c:	f7ff f9f8 	bl	8000a60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001670:	79fb      	ldrb	r3, [r7, #7]

}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001680:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <HAL_IncTick+0x1c>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b05      	ldr	r3, [pc, #20]	@ (800169c <HAL_IncTick+0x20>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4413      	add	r3, r2
 800168a:	4a03      	ldr	r2, [pc, #12]	@ (8001698 <HAL_IncTick+0x1c>)
 800168c:	6013      	str	r3, [r2, #0]
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	200003ec 	.word	0x200003ec
 800169c:	20000008 	.word	0x20000008

080016a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return uwTick;
 80016a4:	4b03      	ldr	r3, [pc, #12]	@ (80016b4 <HAL_GetTick+0x14>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	200003ec 	.word	0x200003ec

080016b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c0:	f7ff ffee 	bl	80016a0 <HAL_GetTick>
 80016c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d0:	d004      	beq.n	80016dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80016d2:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <HAL_Delay+0x40>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4413      	add	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016dc:	bf00      	nop
 80016de:	f7ff ffdf 	bl	80016a0 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d8f7      	bhi.n	80016de <HAL_Delay+0x26>
  {
  }
}
 80016ee:	bf00      	nop
 80016f0:	bf00      	nop
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000008 	.word	0x20000008

080016fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	609a      	str	r2, [r3, #8]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	609a      	str	r2, [r3, #8]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001764:	b480      	push	{r7}
 8001766:	b087      	sub	sp, #28
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
 8001770:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	3360      	adds	r3, #96	@ 0x60
 8001776:	461a      	mov	r2, r3
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b08      	ldr	r3, [pc, #32]	@ (80017a8 <LL_ADC_SetOffset+0x44>)
 8001786:	4013      	ands	r3, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	4313      	orrs	r3, r2
 8001794:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800179c:	bf00      	nop
 800179e:	371c      	adds	r7, #28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	03fff000 	.word	0x03fff000

080017ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3360      	adds	r3, #96	@ 0x60
 80017ba:	461a      	mov	r2, r3
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	3360      	adds	r3, #96	@ 0x60
 80017e8:	461a      	mov	r2, r3
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	431a      	orrs	r2, r3
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001802:	bf00      	nop
 8001804:	371c      	adds	r7, #28
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800180e:	b480      	push	{r7}
 8001810:	b087      	sub	sp, #28
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3360      	adds	r3, #96	@ 0x60
 800181e:	461a      	mov	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	431a      	orrs	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001838:	bf00      	nop
 800183a:	371c      	adds	r7, #28
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	3360      	adds	r3, #96	@ 0x60
 8001854:	461a      	mov	r2, r3
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	431a      	orrs	r2, r3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800186e:	bf00      	nop
 8001870:	371c      	adds	r7, #28
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	615a      	str	r2, [r3, #20]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	3330      	adds	r3, #48	@ 0x30
 80018b0:	461a      	mov	r2, r3
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	0a1b      	lsrs	r3, r3, #8
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	4413      	add	r3, r2
 80018be:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	f003 031f 	and.w	r3, r3, #31
 80018ca:	211f      	movs	r1, #31
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	401a      	ands	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	0e9b      	lsrs	r3, r3, #26
 80018d8:	f003 011f 	and.w	r1, r3, #31
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	f003 031f 	and.w	r3, r3, #31
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	431a      	orrs	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018ec:	bf00      	nop
 80018ee:	371c      	adds	r7, #28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	3314      	adds	r3, #20
 8001908:	461a      	mov	r2, r3
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	0e5b      	lsrs	r3, r3, #25
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	4413      	add	r3, r2
 8001916:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	0d1b      	lsrs	r3, r3, #20
 8001920:	f003 031f 	and.w	r3, r3, #31
 8001924:	2107      	movs	r1, #7
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	401a      	ands	r2, r3
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	0d1b      	lsrs	r3, r3, #20
 8001932:	f003 031f 	and.w	r3, r3, #31
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	431a      	orrs	r2, r3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001942:	bf00      	nop
 8001944:	371c      	adds	r7, #28
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001968:	43db      	mvns	r3, r3
 800196a:	401a      	ands	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f003 0318 	and.w	r3, r3, #24
 8001972:	4908      	ldr	r1, [pc, #32]	@ (8001994 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001974:	40d9      	lsrs	r1, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	400b      	ands	r3, r1
 800197a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800197e:	431a      	orrs	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001986:	bf00      	nop
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	0007ffff 	.word	0x0007ffff

08001998 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80019a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6093      	str	r3, [r2, #8]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80019cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80019d0:	d101      	bne.n	80019d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80019f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001a20:	d101      	bne.n	8001a26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <LL_ADC_IsEnabled+0x18>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <LL_ADC_IsEnabled+0x1a>
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d101      	bne.n	8001a72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d101      	bne.n	8001a98 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b089      	sub	sp, #36	@ 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e167      	b.n	8001d92 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d109      	bne.n	8001ae4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7fe fd91 	bl	80005f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff67 	bl	80019bc <LL_ADC_IsDeepPowerDownEnabled>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d004      	beq.n	8001afe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff4d 	bl	8001998 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff82 	bl	8001a0c <LL_ADC_IsInternalRegulatorEnabled>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d115      	bne.n	8001b3a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ff66 	bl	80019e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b18:	4ba0      	ldr	r3, [pc, #640]	@ (8001d9c <HAL_ADC_Init+0x2f4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	099b      	lsrs	r3, r3, #6
 8001b1e:	4aa0      	ldr	r2, [pc, #640]	@ (8001da0 <HAL_ADC_Init+0x2f8>)
 8001b20:	fba2 2303 	umull	r2, r3, r2, r3
 8001b24:	099b      	lsrs	r3, r3, #6
 8001b26:	3301      	adds	r3, #1
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b2c:	e002      	b.n	8001b34 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f9      	bne.n	8001b2e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ff64 	bl	8001a0c <LL_ADC_IsInternalRegulatorEnabled>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10d      	bne.n	8001b66 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b4e:	f043 0210 	orr.w	r2, r3, #16
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b5a:	f043 0201 	orr.w	r2, r3, #1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff75 	bl	8001a5a <LL_ADC_REG_IsConversionOngoing>
 8001b70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 8100 	bne.w	8001d80 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f040 80fc 	bne.w	8001d80 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b8c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b90:	f043 0202 	orr.w	r2, r3, #2
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff49 	bl	8001a34 <LL_ADC_IsEnabled>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d111      	bne.n	8001bcc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ba8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001bac:	f7ff ff42 	bl	8001a34 <LL_ADC_IsEnabled>
 8001bb0:	4604      	mov	r4, r0
 8001bb2:	487c      	ldr	r0, [pc, #496]	@ (8001da4 <HAL_ADC_Init+0x2fc>)
 8001bb4:	f7ff ff3e 	bl	8001a34 <LL_ADC_IsEnabled>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4323      	orrs	r3, r4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d105      	bne.n	8001bcc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4878      	ldr	r0, [pc, #480]	@ (8001da8 <HAL_ADC_Init+0x300>)
 8001bc8:	f7ff fd98 	bl	80016fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	7f5b      	ldrb	r3, [r3, #29]
 8001bd0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bd6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001bdc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001be2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001bea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d106      	bne.n	8001c08 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	045b      	lsls	r3, r3, #17
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d009      	beq.n	8001c24 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c14:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	4b60      	ldr	r3, [pc, #384]	@ (8001dac <HAL_ADC_Init+0x304>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	69b9      	ldr	r1, [r7, #24]
 8001c34:	430b      	orrs	r3, r1
 8001c36:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff14 	bl	8001a80 <LL_ADC_INJ_IsConversionOngoing>
 8001c58:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d16d      	bne.n	8001d3c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d16a      	bne.n	8001d3c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c6a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c72:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c82:	f023 0302 	bic.w	r3, r3, #2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	69b9      	ldr	r1, [r7, #24]
 8001c8c:	430b      	orrs	r3, r1
 8001c8e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d017      	beq.n	8001cc8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001ca6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001cb0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001cb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6911      	ldr	r1, [r2, #16]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001cc6:	e013      	b.n	8001cf0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001cd6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ce8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cec:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d118      	bne.n	8001d2c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001d04:	f023 0304 	bic.w	r3, r3, #4
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d10:	4311      	orrs	r1, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001d16:	4311      	orrs	r1, r2
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0201 	orr.w	r2, r2, #1
 8001d28:	611a      	str	r2, [r3, #16]
 8001d2a:	e007      	b.n	8001d3c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691a      	ldr	r2, [r3, #16]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d10c      	bne.n	8001d5e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f023 010f 	bic.w	r1, r3, #15
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	1e5a      	subs	r2, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d5c:	e007      	b.n	8001d6e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 020f 	bic.w	r2, r2, #15
 8001d6c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d72:	f023 0303 	bic.w	r3, r3, #3
 8001d76:	f043 0201 	orr.w	r2, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d7e:	e007      	b.n	8001d90 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d84:	f043 0210 	orr.w	r2, r3, #16
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d90:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3724      	adds	r7, #36	@ 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd90      	pop	{r4, r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	053e2d63 	.word	0x053e2d63
 8001da4:	50000100 	.word	0x50000100
 8001da8:	50000300 	.word	0x50000300
 8001dac:	fff04007 	.word	0xfff04007

08001db0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b0b6      	sub	sp, #216	@ 0xd8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x22>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e3c8      	b.n	8002564 <HAL_ADC_ConfigChannel+0x7b4>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fe3b 	bl	8001a5a <LL_ADC_REG_IsConversionOngoing>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f040 83ad 	bne.w	8002546 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	6859      	ldr	r1, [r3, #4]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	f7ff fd51 	bl	80018a0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fe29 	bl	8001a5a <LL_ADC_REG_IsConversionOngoing>
 8001e08:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fe35 	bl	8001a80 <LL_ADC_INJ_IsConversionOngoing>
 8001e16:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f040 81d9 	bne.w	80021d6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f040 81d4 	bne.w	80021d6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e36:	d10f      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2200      	movs	r2, #0
 8001e42:	4619      	mov	r1, r3
 8001e44:	f7ff fd58 	bl	80018f8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fd12 	bl	800187a <LL_ADC_SetSamplingTimeCommonConfig>
 8001e56:	e00e      	b.n	8001e76 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	6819      	ldr	r1, [r3, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	461a      	mov	r2, r3
 8001e66:	f7ff fd47 	bl	80018f8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fd02 	bl	800187a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	08db      	lsrs	r3, r3, #3
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d022      	beq.n	8001ede <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	6919      	ldr	r1, [r3, #16]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001ea8:	f7ff fc5c 	bl	8001764 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	6919      	ldr	r1, [r3, #16]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	f7ff fca8 	bl	800180e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d102      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x124>
 8001ece:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ed2:	e000      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x126>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f7ff fcb4 	bl	8001844 <LL_ADC_SetOffsetSaturation>
 8001edc:	e17b      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fc61 	bl	80017ac <LL_ADC_GetOffsetChannel>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10a      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x15a>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fc56 	bl	80017ac <LL_ADC_GetOffsetChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	0e9b      	lsrs	r3, r3, #26
 8001f04:	f003 021f 	and.w	r2, r3, #31
 8001f08:	e01e      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x198>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fc4b 	bl	80017ac <LL_ADC_GetOffsetChannel>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001f38:	2320      	movs	r3, #32
 8001f3a:	e004      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001f3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f40:	fab3 f383 	clz	r3, r3
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d105      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x1b0>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0e9b      	lsrs	r3, r3, #26
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	e018      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x1e2>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001f7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001f84:	2320      	movs	r3, #32
 8001f86:	e004      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001f88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f8c:	fab3 f383 	clz	r3, r3
 8001f90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d106      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fc1a 	bl	80017d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2101      	movs	r1, #1
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fbfe 	bl	80017ac <LL_ADC_GetOffsetChannel>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10a      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x220>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fbf3 	bl	80017ac <LL_ADC_GetOffsetChannel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	0e9b      	lsrs	r3, r3, #26
 8001fca:	f003 021f 	and.w	r2, r3, #31
 8001fce:	e01e      	b.n	800200e <HAL_ADC_ConfigChannel+0x25e>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fbe8 	bl	80017ac <LL_ADC_GetOffsetChannel>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001fee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ff2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001ff6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001ffe:	2320      	movs	r3, #32
 8002000:	e004      	b.n	800200c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002002:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002016:	2b00      	cmp	r3, #0
 8002018:	d105      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x276>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	0e9b      	lsrs	r3, r3, #26
 8002020:	f003 031f 	and.w	r3, r3, #31
 8002024:	e018      	b.n	8002058 <HAL_ADC_ConfigChannel+0x2a8>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800203a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800203e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002042:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800204a:	2320      	movs	r3, #32
 800204c:	e004      	b.n	8002058 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800204e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002058:	429a      	cmp	r2, r3
 800205a:	d106      	bne.n	800206a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2200      	movs	r2, #0
 8002062:	2101      	movs	r1, #1
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fbb7 	bl	80017d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2102      	movs	r1, #2
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fb9b 	bl	80017ac <LL_ADC_GetOffsetChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10a      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x2e6>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2102      	movs	r1, #2
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fb90 	bl	80017ac <LL_ADC_GetOffsetChannel>
 800208c:	4603      	mov	r3, r0
 800208e:	0e9b      	lsrs	r3, r3, #26
 8002090:	f003 021f 	and.w	r2, r3, #31
 8002094:	e01e      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x324>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2102      	movs	r1, #2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fb85 	bl	80017ac <LL_ADC_GetOffsetChannel>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80020b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80020bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80020c4:	2320      	movs	r3, #32
 80020c6:	e004      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80020c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020cc:	fab3 f383 	clz	r3, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d105      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x33c>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	0e9b      	lsrs	r3, r3, #26
 80020e6:	f003 031f 	and.w	r3, r3, #31
 80020ea:	e016      	b.n	800211a <HAL_ADC_ConfigChannel+0x36a>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80020fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002100:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002104:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800210c:	2320      	movs	r3, #32
 800210e:	e004      	b.n	800211a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002110:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002114:	fab3 f383 	clz	r3, r3
 8002118:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800211a:	429a      	cmp	r2, r3
 800211c:	d106      	bne.n	800212c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2200      	movs	r2, #0
 8002124:	2102      	movs	r1, #2
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fb56 	bl	80017d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2103      	movs	r1, #3
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fb3a 	bl	80017ac <LL_ADC_GetOffsetChannel>
 8002138:	4603      	mov	r3, r0
 800213a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10a      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x3a8>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2103      	movs	r1, #3
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fb2f 	bl	80017ac <LL_ADC_GetOffsetChannel>
 800214e:	4603      	mov	r3, r0
 8002150:	0e9b      	lsrs	r3, r3, #26
 8002152:	f003 021f 	and.w	r2, r3, #31
 8002156:	e017      	b.n	8002188 <HAL_ADC_ConfigChannel+0x3d8>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2103      	movs	r1, #3
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fb24 	bl	80017ac <LL_ADC_GetOffsetChannel>
 8002164:	4603      	mov	r3, r0
 8002166:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002170:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002172:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002174:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800217a:	2320      	movs	r3, #32
 800217c:	e003      	b.n	8002186 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800217e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002180:	fab3 f383 	clz	r3, r3
 8002184:	b2db      	uxtb	r3, r3
 8002186:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002190:	2b00      	cmp	r3, #0
 8002192:	d105      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x3f0>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	0e9b      	lsrs	r3, r3, #26
 800219a:	f003 031f 	and.w	r3, r3, #31
 800219e:	e011      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x414>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021a8:	fa93 f3a3 	rbit	r3, r3
 80021ac:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80021ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80021b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80021b8:	2320      	movs	r3, #32
 80021ba:	e003      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80021bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d106      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2200      	movs	r2, #0
 80021ce:	2103      	movs	r1, #3
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fb01 	bl	80017d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fc2a 	bl	8001a34 <LL_ADC_IsEnabled>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 8140 	bne.w	8002468 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	6819      	ldr	r1, [r3, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	461a      	mov	r2, r3
 80021f6:	f7ff fbab 	bl	8001950 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	4a8f      	ldr	r2, [pc, #572]	@ (800243c <HAL_ADC_ConfigChannel+0x68c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	f040 8131 	bne.w	8002468 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10b      	bne.n	800222e <HAL_ADC_ConfigChannel+0x47e>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0e9b      	lsrs	r3, r3, #26
 800221c:	3301      	adds	r3, #1
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	2b09      	cmp	r3, #9
 8002224:	bf94      	ite	ls
 8002226:	2301      	movls	r3, #1
 8002228:	2300      	movhi	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	e019      	b.n	8002262 <HAL_ADC_ConfigChannel+0x4b2>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002236:	fa93 f3a3 	rbit	r3, r3
 800223a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800223c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800223e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002240:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002246:	2320      	movs	r3, #32
 8002248:	e003      	b.n	8002252 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800224a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800224c:	fab3 f383 	clz	r3, r3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	3301      	adds	r3, #1
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	2b09      	cmp	r3, #9
 800225a:	bf94      	ite	ls
 800225c:	2301      	movls	r3, #1
 800225e:	2300      	movhi	r3, #0
 8002260:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002262:	2b00      	cmp	r3, #0
 8002264:	d079      	beq.n	800235a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226e:	2b00      	cmp	r3, #0
 8002270:	d107      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x4d2>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	0e9b      	lsrs	r3, r3, #26
 8002278:	3301      	adds	r3, #1
 800227a:	069b      	lsls	r3, r3, #26
 800227c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002280:	e015      	b.n	80022ae <HAL_ADC_ConfigChannel+0x4fe>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002290:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002292:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800229a:	2320      	movs	r3, #32
 800229c:	e003      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800229e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	3301      	adds	r3, #1
 80022a8:	069b      	lsls	r3, r3, #26
 80022aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x51e>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	0e9b      	lsrs	r3, r3, #26
 80022c0:	3301      	adds	r3, #1
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	2101      	movs	r1, #1
 80022c8:	fa01 f303 	lsl.w	r3, r1, r3
 80022cc:	e017      	b.n	80022fe <HAL_ADC_ConfigChannel+0x54e>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80022dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022de:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80022e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80022e6:	2320      	movs	r3, #32
 80022e8:	e003      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80022ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022ec:	fab3 f383 	clz	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	3301      	adds	r3, #1
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	2101      	movs	r1, #1
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	ea42 0103 	orr.w	r1, r2, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10a      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x574>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	0e9b      	lsrs	r3, r3, #26
 8002314:	3301      	adds	r3, #1
 8002316:	f003 021f 	and.w	r2, r3, #31
 800231a:	4613      	mov	r3, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	4413      	add	r3, r2
 8002320:	051b      	lsls	r3, r3, #20
 8002322:	e018      	b.n	8002356 <HAL_ADC_ConfigChannel+0x5a6>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002334:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800233c:	2320      	movs	r3, #32
 800233e:	e003      	b.n	8002348 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	3301      	adds	r3, #1
 800234a:	f003 021f 	and.w	r2, r3, #31
 800234e:	4613      	mov	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4413      	add	r3, r2
 8002354:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002356:	430b      	orrs	r3, r1
 8002358:	e081      	b.n	800245e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002362:	2b00      	cmp	r3, #0
 8002364:	d107      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x5c6>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	0e9b      	lsrs	r3, r3, #26
 800236c:	3301      	adds	r3, #1
 800236e:	069b      	lsls	r3, r3, #26
 8002370:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002374:	e015      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x5f2>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002386:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800238e:	2320      	movs	r3, #32
 8002390:	e003      	b.n	800239a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002394:	fab3 f383 	clz	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	3301      	adds	r3, #1
 800239c:	069b      	lsls	r3, r3, #26
 800239e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d109      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x612>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	0e9b      	lsrs	r3, r3, #26
 80023b4:	3301      	adds	r3, #1
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	2101      	movs	r1, #1
 80023bc:	fa01 f303 	lsl.w	r3, r1, r3
 80023c0:	e017      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x642>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	61fb      	str	r3, [r7, #28]
  return result;
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80023d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80023da:	2320      	movs	r3, #32
 80023dc:	e003      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80023de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e0:	fab3 f383 	clz	r3, r3
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	3301      	adds	r3, #1
 80023e8:	f003 031f 	and.w	r3, r3, #31
 80023ec:	2101      	movs	r1, #1
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	ea42 0103 	orr.w	r1, r2, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10d      	bne.n	800241e <HAL_ADC_ConfigChannel+0x66e>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	0e9b      	lsrs	r3, r3, #26
 8002408:	3301      	adds	r3, #1
 800240a:	f003 021f 	and.w	r2, r3, #31
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	3b1e      	subs	r3, #30
 8002416:	051b      	lsls	r3, r3, #20
 8002418:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800241c:	e01e      	b.n	800245c <HAL_ADC_ConfigChannel+0x6ac>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	613b      	str	r3, [r7, #16]
  return result;
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d104      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002436:	2320      	movs	r3, #32
 8002438:	e006      	b.n	8002448 <HAL_ADC_ConfigChannel+0x698>
 800243a:	bf00      	nop
 800243c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	3301      	adds	r3, #1
 800244a:	f003 021f 	and.w	r2, r3, #31
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	3b1e      	subs	r3, #30
 8002456:	051b      	lsls	r3, r3, #20
 8002458:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800245c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002462:	4619      	mov	r1, r3
 8002464:	f7ff fa48 	bl	80018f8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b3f      	ldr	r3, [pc, #252]	@ (800256c <HAL_ADC_ConfigChannel+0x7bc>)
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d071      	beq.n	8002558 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002474:	483e      	ldr	r0, [pc, #248]	@ (8002570 <HAL_ADC_ConfigChannel+0x7c0>)
 8002476:	f7ff f967 	bl	8001748 <LL_ADC_GetCommonPathInternalCh>
 800247a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a3c      	ldr	r2, [pc, #240]	@ (8002574 <HAL_ADC_ConfigChannel+0x7c4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d004      	beq.n	8002492 <HAL_ADC_ConfigChannel+0x6e2>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a3a      	ldr	r2, [pc, #232]	@ (8002578 <HAL_ADC_ConfigChannel+0x7c8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d127      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002492:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002496:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d121      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024a6:	d157      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024b0:	4619      	mov	r1, r3
 80024b2:	482f      	ldr	r0, [pc, #188]	@ (8002570 <HAL_ADC_ConfigChannel+0x7c0>)
 80024b4:	f7ff f935 	bl	8001722 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024b8:	4b30      	ldr	r3, [pc, #192]	@ (800257c <HAL_ADC_ConfigChannel+0x7cc>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	099b      	lsrs	r3, r3, #6
 80024be:	4a30      	ldr	r2, [pc, #192]	@ (8002580 <HAL_ADC_ConfigChannel+0x7d0>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	099b      	lsrs	r3, r3, #6
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	4613      	mov	r3, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024d2:	e002      	b.n	80024da <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f9      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024e0:	e03a      	b.n	8002558 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a27      	ldr	r2, [pc, #156]	@ (8002584 <HAL_ADC_ConfigChannel+0x7d4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d113      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10d      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a22      	ldr	r2, [pc, #136]	@ (8002588 <HAL_ADC_ConfigChannel+0x7d8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d02a      	beq.n	8002558 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002502:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002506:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800250a:	4619      	mov	r1, r3
 800250c:	4818      	ldr	r0, [pc, #96]	@ (8002570 <HAL_ADC_ConfigChannel+0x7c0>)
 800250e:	f7ff f908 	bl	8001722 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002512:	e021      	b.n	8002558 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1c      	ldr	r2, [pc, #112]	@ (800258c <HAL_ADC_ConfigChannel+0x7dc>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d11c      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800251e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d116      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a16      	ldr	r2, [pc, #88]	@ (8002588 <HAL_ADC_ConfigChannel+0x7d8>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d011      	beq.n	8002558 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002534:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002538:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800253c:	4619      	mov	r1, r3
 800253e:	480c      	ldr	r0, [pc, #48]	@ (8002570 <HAL_ADC_ConfigChannel+0x7c0>)
 8002540:	f7ff f8ef 	bl	8001722 <LL_ADC_SetCommonPathInternalCh>
 8002544:	e008      	b.n	8002558 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254a:	f043 0220 	orr.w	r2, r3, #32
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002560:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002564:	4618      	mov	r0, r3
 8002566:	37d8      	adds	r7, #216	@ 0xd8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	80080000 	.word	0x80080000
 8002570:	50000300 	.word	0x50000300
 8002574:	c3210000 	.word	0xc3210000
 8002578:	90c00010 	.word	0x90c00010
 800257c:	20000000 	.word	0x20000000
 8002580:	053e2d63 	.word	0x053e2d63
 8002584:	c7520000 	.word	0xc7520000
 8002588:	50000100 	.word	0x50000100
 800258c:	cb840000 	.word	0xcb840000

08002590 <LL_ADC_IsEnabled>:
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <LL_ADC_IsEnabled+0x18>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <LL_ADC_IsEnabled+0x1a>
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <LL_ADC_REG_IsConversionOngoing>:
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d101      	bne.n	80025ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80025dc:	b590      	push	{r4, r7, lr}
 80025de:	b0a1      	sub	sp, #132	@ 0x84
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e08b      	b.n	8002712 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002602:	2300      	movs	r3, #0
 8002604:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002606:	2300      	movs	r3, #0
 8002608:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002612:	d102      	bne.n	800261a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002614:	4b41      	ldr	r3, [pc, #260]	@ (800271c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	e001      	b.n	800261e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800261a:	2300      	movs	r3, #0
 800261c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10b      	bne.n	800263c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002628:	f043 0220 	orr.w	r2, r3, #32
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e06a      	b.n	8002712 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff ffb9 	bl	80025b6 <LL_ADC_REG_IsConversionOngoing>
 8002644:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff ffb3 	bl	80025b6 <LL_ADC_REG_IsConversionOngoing>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d14c      	bne.n	80026f0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002656:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002658:	2b00      	cmp	r3, #0
 800265a:	d149      	bne.n	80026f0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800265c:	4b30      	ldr	r3, [pc, #192]	@ (8002720 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800265e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d028      	beq.n	80026ba <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002668:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	6859      	ldr	r1, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800267a:	035b      	lsls	r3, r3, #13
 800267c:	430b      	orrs	r3, r1
 800267e:	431a      	orrs	r2, r3
 8002680:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002682:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002684:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002688:	f7ff ff82 	bl	8002590 <LL_ADC_IsEnabled>
 800268c:	4604      	mov	r4, r0
 800268e:	4823      	ldr	r0, [pc, #140]	@ (800271c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002690:	f7ff ff7e 	bl	8002590 <LL_ADC_IsEnabled>
 8002694:	4603      	mov	r3, r0
 8002696:	4323      	orrs	r3, r4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d133      	bne.n	8002704 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800269c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80026a4:	f023 030f 	bic.w	r3, r3, #15
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	6811      	ldr	r1, [r2, #0]
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	6892      	ldr	r2, [r2, #8]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	431a      	orrs	r2, r3
 80026b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026b6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80026b8:	e024      	b.n	8002704 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80026ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026c4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026c6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80026ca:	f7ff ff61 	bl	8002590 <LL_ADC_IsEnabled>
 80026ce:	4604      	mov	r4, r0
 80026d0:	4812      	ldr	r0, [pc, #72]	@ (800271c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80026d2:	f7ff ff5d 	bl	8002590 <LL_ADC_IsEnabled>
 80026d6:	4603      	mov	r3, r0
 80026d8:	4323      	orrs	r3, r4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d112      	bne.n	8002704 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80026de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80026e6:	f023 030f 	bic.w	r3, r3, #15
 80026ea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80026ec:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80026ee:	e009      	b.n	8002704 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f4:	f043 0220 	orr.w	r2, r3, #32
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002702:	e000      	b.n	8002706 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002704:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800270e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002712:	4618      	mov	r0, r3
 8002714:	3784      	adds	r7, #132	@ 0x84
 8002716:	46bd      	mov	sp, r7
 8002718:	bd90      	pop	{r4, r7, pc}
 800271a:	bf00      	nop
 800271c:	50000100 	.word	0x50000100
 8002720:	50000300 	.word	0x50000300

08002724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002734:	4b0c      	ldr	r3, [pc, #48]	@ (8002768 <__NVIC_SetPriorityGrouping+0x44>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002740:	4013      	ands	r3, r2
 8002742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800274c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002756:	4a04      	ldr	r2, [pc, #16]	@ (8002768 <__NVIC_SetPriorityGrouping+0x44>)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	60d3      	str	r3, [r2, #12]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002770:	4b04      	ldr	r3, [pc, #16]	@ (8002784 <__NVIC_GetPriorityGrouping+0x18>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	f003 0307 	and.w	r3, r3, #7
}
 800277a:	4618      	mov	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	2b00      	cmp	r3, #0
 8002798:	db0b      	blt.n	80027b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	f003 021f 	and.w	r2, r3, #31
 80027a0:	4907      	ldr	r1, [pc, #28]	@ (80027c0 <__NVIC_EnableIRQ+0x38>)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	2001      	movs	r0, #1
 80027aa:	fa00 f202 	lsl.w	r2, r0, r2
 80027ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000e100 	.word	0xe000e100

080027c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	6039      	str	r1, [r7, #0]
 80027ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	db0a      	blt.n	80027ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	490c      	ldr	r1, [pc, #48]	@ (8002810 <__NVIC_SetPriority+0x4c>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	0112      	lsls	r2, r2, #4
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	440b      	add	r3, r1
 80027e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ec:	e00a      	b.n	8002804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4908      	ldr	r1, [pc, #32]	@ (8002814 <__NVIC_SetPriority+0x50>)
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	3b04      	subs	r3, #4
 80027fc:	0112      	lsls	r2, r2, #4
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	440b      	add	r3, r1
 8002802:	761a      	strb	r2, [r3, #24]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000e100 	.word	0xe000e100
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	@ 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f1c3 0307 	rsb	r3, r3, #7
 8002832:	2b04      	cmp	r3, #4
 8002834:	bf28      	it	cs
 8002836:	2304      	movcs	r3, #4
 8002838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3304      	adds	r3, #4
 800283e:	2b06      	cmp	r3, #6
 8002840:	d902      	bls.n	8002848 <NVIC_EncodePriority+0x30>
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3b03      	subs	r3, #3
 8002846:	e000      	b.n	800284a <NVIC_EncodePriority+0x32>
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284c:	f04f 32ff 	mov.w	r2, #4294967295
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43da      	mvns	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	401a      	ands	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002860:	f04f 31ff 	mov.w	r1, #4294967295
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa01 f303 	lsl.w	r3, r1, r3
 800286a:	43d9      	mvns	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002870:	4313      	orrs	r3, r2
         );
}
 8002872:	4618      	mov	r0, r3
 8002874:	3724      	adds	r7, #36	@ 0x24
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff ff4c 	bl	8002724 <__NVIC_SetPriorityGrouping>
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028a2:	f7ff ff63 	bl	800276c <__NVIC_GetPriorityGrouping>
 80028a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	68b9      	ldr	r1, [r7, #8]
 80028ac:	6978      	ldr	r0, [r7, #20]
 80028ae:	f7ff ffb3 	bl	8002818 <NVIC_EncodePriority>
 80028b2:	4602      	mov	r2, r0
 80028b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff ff82 	bl	80027c4 <__NVIC_SetPriority>
}
 80028c0:	bf00      	nop
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff ff56 	bl	8002788 <__NVIC_EnableIRQ>
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028f2:	e15a      	b.n	8002baa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	2101      	movs	r1, #1
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002900:	4013      	ands	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 814c 	beq.w	8002ba4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d005      	beq.n	8002924 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002920:	2b02      	cmp	r3, #2
 8002922:	d130      	bne.n	8002986 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	2203      	movs	r2, #3
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800295a:	2201      	movs	r2, #1
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4013      	ands	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	091b      	lsrs	r3, r3, #4
 8002970:	f003 0201 	and.w	r2, r3, #1
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b03      	cmp	r3, #3
 8002990:	d017      	beq.n	80029c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	2203      	movs	r2, #3
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4013      	ands	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d123      	bne.n	8002a16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	08da      	lsrs	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3208      	adds	r2, #8
 80029d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	220f      	movs	r2, #15
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	691a      	ldr	r2, [r3, #16]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	08da      	lsrs	r2, r3, #3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3208      	adds	r2, #8
 8002a10:	6939      	ldr	r1, [r7, #16]
 8002a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	2203      	movs	r2, #3
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 0203 	and.w	r2, r3, #3
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 80a6 	beq.w	8002ba4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a58:	4b5b      	ldr	r3, [pc, #364]	@ (8002bc8 <HAL_GPIO_Init+0x2e4>)
 8002a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a5c:	4a5a      	ldr	r2, [pc, #360]	@ (8002bc8 <HAL_GPIO_Init+0x2e4>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a64:	4b58      	ldr	r3, [pc, #352]	@ (8002bc8 <HAL_GPIO_Init+0x2e4>)
 8002a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a70:	4a56      	ldr	r2, [pc, #344]	@ (8002bcc <HAL_GPIO_Init+0x2e8>)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	089b      	lsrs	r3, r3, #2
 8002a76:	3302      	adds	r3, #2
 8002a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	220f      	movs	r2, #15
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a9a:	d01f      	beq.n	8002adc <HAL_GPIO_Init+0x1f8>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a4c      	ldr	r2, [pc, #304]	@ (8002bd0 <HAL_GPIO_Init+0x2ec>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d019      	beq.n	8002ad8 <HAL_GPIO_Init+0x1f4>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a4b      	ldr	r2, [pc, #300]	@ (8002bd4 <HAL_GPIO_Init+0x2f0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d013      	beq.n	8002ad4 <HAL_GPIO_Init+0x1f0>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a4a      	ldr	r2, [pc, #296]	@ (8002bd8 <HAL_GPIO_Init+0x2f4>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d00d      	beq.n	8002ad0 <HAL_GPIO_Init+0x1ec>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a49      	ldr	r2, [pc, #292]	@ (8002bdc <HAL_GPIO_Init+0x2f8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d007      	beq.n	8002acc <HAL_GPIO_Init+0x1e8>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a48      	ldr	r2, [pc, #288]	@ (8002be0 <HAL_GPIO_Init+0x2fc>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d101      	bne.n	8002ac8 <HAL_GPIO_Init+0x1e4>
 8002ac4:	2305      	movs	r3, #5
 8002ac6:	e00a      	b.n	8002ade <HAL_GPIO_Init+0x1fa>
 8002ac8:	2306      	movs	r3, #6
 8002aca:	e008      	b.n	8002ade <HAL_GPIO_Init+0x1fa>
 8002acc:	2304      	movs	r3, #4
 8002ace:	e006      	b.n	8002ade <HAL_GPIO_Init+0x1fa>
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e004      	b.n	8002ade <HAL_GPIO_Init+0x1fa>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e002      	b.n	8002ade <HAL_GPIO_Init+0x1fa>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <HAL_GPIO_Init+0x1fa>
 8002adc:	2300      	movs	r3, #0
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	f002 0203 	and.w	r2, r2, #3
 8002ae4:	0092      	lsls	r2, r2, #2
 8002ae6:	4093      	lsls	r3, r2
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aee:	4937      	ldr	r1, [pc, #220]	@ (8002bcc <HAL_GPIO_Init+0x2e8>)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	3302      	adds	r3, #2
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002afc:	4b39      	ldr	r3, [pc, #228]	@ (8002be4 <HAL_GPIO_Init+0x300>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b20:	4a30      	ldr	r2, [pc, #192]	@ (8002be4 <HAL_GPIO_Init+0x300>)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b26:	4b2f      	ldr	r3, [pc, #188]	@ (8002be4 <HAL_GPIO_Init+0x300>)
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b4a:	4a26      	ldr	r2, [pc, #152]	@ (8002be4 <HAL_GPIO_Init+0x300>)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b50:	4b24      	ldr	r3, [pc, #144]	@ (8002be4 <HAL_GPIO_Init+0x300>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b74:	4a1b      	ldr	r2, [pc, #108]	@ (8002be4 <HAL_GPIO_Init+0x300>)
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002be4 <HAL_GPIO_Init+0x300>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b9e:	4a11      	ldr	r2, [pc, #68]	@ (8002be4 <HAL_GPIO_Init+0x300>)
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f47f ae9d 	bne.w	80028f4 <HAL_GPIO_Init+0x10>
  }
}
 8002bba:	bf00      	nop
 8002bbc:	bf00      	nop
 8002bbe:	371c      	adds	r7, #28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40010000 	.word	0x40010000
 8002bd0:	48000400 	.word	0x48000400
 8002bd4:	48000800 	.word	0x48000800
 8002bd8:	48000c00 	.word	0x48000c00
 8002bdc:	48001000 	.word	0x48001000
 8002be0:	48001400 	.word	0x48001400
 8002be4:	40010400 	.word	0x40010400

08002be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	807b      	strh	r3, [r7, #2]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bf8:	787b      	ldrb	r3, [r7, #1]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bfe:	887a      	ldrh	r2, [r7, #2]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c04:	e002      	b.n	8002c0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c06:	887a      	ldrh	r2, [r7, #2]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c2a:	887a      	ldrh	r2, [r7, #2]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	041a      	lsls	r2, r3, #16
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	43d9      	mvns	r1, r3
 8002c36:	887b      	ldrh	r3, [r7, #2]
 8002c38:	400b      	ands	r3, r1
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	619a      	str	r2, [r3, #24]
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e08d      	b.n	8002d7a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fd fdf2 	bl	800085c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2224      	movs	r2, #36	@ 0x24
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0201 	bic.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d107      	bne.n	8002cc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	e006      	b.n	8002cd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002cd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d108      	bne.n	8002cee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	e007      	b.n	8002cfe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691a      	ldr	r2, [r3, #16]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69d9      	ldr	r1, [r3, #28]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1a      	ldr	r2, [r3, #32]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0201 	orr.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	d138      	bne.n	8002e0a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e032      	b.n	8002e0c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2224      	movs	r2, #36	@ 0x24
 8002db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0201 	bic.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002dd4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6819      	ldr	r1, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0201 	orr.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	e000      	b.n	8002e0c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e0a:	2302      	movs	r3, #2
  }
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b20      	cmp	r3, #32
 8002e2c:	d139      	bne.n	8002ea2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e033      	b.n	8002ea4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2224      	movs	r2, #36	@ 0x24
 8002e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0201 	bic.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e6a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	021b      	lsls	r3, r3, #8
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0201 	orr.w	r2, r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2220      	movs	r2, #32
 8002e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	e000      	b.n	8002ea4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ea2:	2302      	movs	r3, #2
  }
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d141      	bne.n	8002f42 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ebe:	4b4b      	ldr	r3, [pc, #300]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eca:	d131      	bne.n	8002f30 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ecc:	4b47      	ldr	r3, [pc, #284]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ed2:	4a46      	ldr	r2, [pc, #280]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ed8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002edc:	4b43      	ldr	r3, [pc, #268]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ee4:	4a41      	ldr	r2, [pc, #260]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002eea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002eec:	4b40      	ldr	r3, [pc, #256]	@ (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2232      	movs	r2, #50	@ 0x32
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	4a3f      	ldr	r2, [pc, #252]	@ (8002ff4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	0c9b      	lsrs	r3, r3, #18
 8002efe:	3301      	adds	r3, #1
 8002f00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f02:	e002      	b.n	8002f0a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f0a:	4b38      	ldr	r3, [pc, #224]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f16:	d102      	bne.n	8002f1e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f2      	bne.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f1e:	4b33      	ldr	r3, [pc, #204]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f2a:	d158      	bne.n	8002fde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e057      	b.n	8002fe0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f30:	4b2e      	ldr	r3, [pc, #184]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f36:	4a2d      	ldr	r2, [pc, #180]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f40:	e04d      	b.n	8002fde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f48:	d141      	bne.n	8002fce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f4a:	4b28      	ldr	r3, [pc, #160]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f56:	d131      	bne.n	8002fbc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f58:	4b24      	ldr	r3, [pc, #144]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f5e:	4a23      	ldr	r2, [pc, #140]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f68:	4b20      	ldr	r3, [pc, #128]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f70:	4a1e      	ldr	r2, [pc, #120]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f78:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2232      	movs	r2, #50	@ 0x32
 8002f7e:	fb02 f303 	mul.w	r3, r2, r3
 8002f82:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	0c9b      	lsrs	r3, r3, #18
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f8e:	e002      	b.n	8002f96 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f96:	4b15      	ldr	r3, [pc, #84]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fa2:	d102      	bne.n	8002faa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f2      	bne.n	8002f90 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002faa:	4b10      	ldr	r3, [pc, #64]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fb6:	d112      	bne.n	8002fde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e011      	b.n	8002fe0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002fcc:	e007      	b.n	8002fde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fce:	4b07      	ldr	r3, [pc, #28]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fd6:	4a05      	ldr	r2, [pc, #20]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fdc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	40007000 	.word	0x40007000
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	431bde83 	.word	0x431bde83

08002ff8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002ffc:	4b05      	ldr	r3, [pc, #20]	@ (8003014 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	4a04      	ldr	r2, [pc, #16]	@ (8003014 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003002:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003006:	6093      	str	r3, [r2, #8]
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40007000 	.word	0x40007000

08003018 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e2fe      	b.n	8003628 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d075      	beq.n	8003122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003036:	4b97      	ldr	r3, [pc, #604]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003040:	4b94      	ldr	r3, [pc, #592]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	2b0c      	cmp	r3, #12
 800304e:	d102      	bne.n	8003056 <HAL_RCC_OscConfig+0x3e>
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d002      	beq.n	800305c <HAL_RCC_OscConfig+0x44>
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b08      	cmp	r3, #8
 800305a:	d10b      	bne.n	8003074 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305c:	4b8d      	ldr	r3, [pc, #564]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d05b      	beq.n	8003120 <HAL_RCC_OscConfig+0x108>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d157      	bne.n	8003120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e2d9      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800307c:	d106      	bne.n	800308c <HAL_RCC_OscConfig+0x74>
 800307e:	4b85      	ldr	r3, [pc, #532]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a84      	ldr	r2, [pc, #528]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e01d      	b.n	80030c8 <HAL_RCC_OscConfig+0xb0>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003094:	d10c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x98>
 8003096:	4b7f      	ldr	r3, [pc, #508]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a7e      	ldr	r2, [pc, #504]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 800309c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	4b7c      	ldr	r3, [pc, #496]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a7b      	ldr	r2, [pc, #492]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80030a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	e00b      	b.n	80030c8 <HAL_RCC_OscConfig+0xb0>
 80030b0:	4b78      	ldr	r3, [pc, #480]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a77      	ldr	r2, [pc, #476]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80030b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	4b75      	ldr	r3, [pc, #468]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a74      	ldr	r2, [pc, #464]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80030c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d013      	beq.n	80030f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fe fae6 	bl	80016a0 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d8:	f7fe fae2 	bl	80016a0 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	@ 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e29e      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0xc0>
 80030f6:	e014      	b.n	8003122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7fe fad2 	bl	80016a0 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003100:	f7fe face 	bl	80016a0 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	@ 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e28a      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003112:	4b60      	ldr	r3, [pc, #384]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0xe8>
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d075      	beq.n	800321a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800312e:	4b59      	ldr	r3, [pc, #356]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003138:	4b56      	ldr	r3, [pc, #344]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	2b0c      	cmp	r3, #12
 8003146:	d102      	bne.n	800314e <HAL_RCC_OscConfig+0x136>
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d002      	beq.n	8003154 <HAL_RCC_OscConfig+0x13c>
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b04      	cmp	r3, #4
 8003152:	d11f      	bne.n	8003194 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003154:	4b4f      	ldr	r3, [pc, #316]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_RCC_OscConfig+0x154>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e25d      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316c:	4b49      	ldr	r3, [pc, #292]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	061b      	lsls	r3, r3, #24
 800317a:	4946      	ldr	r1, [pc, #280]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 800317c:	4313      	orrs	r3, r2
 800317e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003180:	4b45      	ldr	r3, [pc, #276]	@ (8003298 <HAL_RCC_OscConfig+0x280>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7fd fc8f 	bl	8000aa8 <HAL_InitTick>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d043      	beq.n	8003218 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e249      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d023      	beq.n	80031e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800319c:	4b3d      	ldr	r3, [pc, #244]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a3c      	ldr	r2, [pc, #240]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80031a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fe fa7a 	bl	80016a0 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b0:	f7fe fa76 	bl	80016a0 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e232      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031c2:	4b34      	ldr	r3, [pc, #208]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ce:	4b31      	ldr	r3, [pc, #196]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	061b      	lsls	r3, r3, #24
 80031dc:	492d      	ldr	r1, [pc, #180]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	604b      	str	r3, [r1, #4]
 80031e2:	e01a      	b.n	800321a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 80031ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fe fa56 	bl	80016a0 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f8:	f7fe fa52 	bl	80016a0 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e20e      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800320a:	4b22      	ldr	r3, [pc, #136]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x1e0>
 8003216:	e000      	b.n	800321a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003218:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d041      	beq.n	80032aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d01c      	beq.n	8003268 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800322e:	4b19      	ldr	r3, [pc, #100]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003230:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003234:	4a17      	ldr	r2, [pc, #92]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323e:	f7fe fa2f 	bl	80016a0 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003246:	f7fe fa2b 	bl	80016a0 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e1e7      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003258:	4b0e      	ldr	r3, [pc, #56]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 800325a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0ef      	beq.n	8003246 <HAL_RCC_OscConfig+0x22e>
 8003266:	e020      	b.n	80032aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003268:	4b0a      	ldr	r3, [pc, #40]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 800326a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800326e:	4a09      	ldr	r2, [pc, #36]	@ (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003278:	f7fe fa12 	bl	80016a0 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800327e:	e00d      	b.n	800329c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003280:	f7fe fa0e 	bl	80016a0 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d906      	bls.n	800329c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e1ca      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
 8003292:	bf00      	nop
 8003294:	40021000 	.word	0x40021000
 8003298:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800329c:	4b8c      	ldr	r3, [pc, #560]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 800329e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1ea      	bne.n	8003280 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80a6 	beq.w	8003404 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b8:	2300      	movs	r3, #0
 80032ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032bc:	4b84      	ldr	r3, [pc, #528]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 80032be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_OscConfig+0x2b4>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <HAL_RCC_OscConfig+0x2b6>
 80032cc:	2300      	movs	r3, #0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00d      	beq.n	80032ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d2:	4b7f      	ldr	r3, [pc, #508]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 80032d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d6:	4a7e      	ldr	r2, [pc, #504]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 80032d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80032de:	4b7c      	ldr	r3, [pc, #496]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 80032e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80032ea:	2301      	movs	r3, #1
 80032ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ee:	4b79      	ldr	r3, [pc, #484]	@ (80034d4 <HAL_RCC_OscConfig+0x4bc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d118      	bne.n	800332c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032fa:	4b76      	ldr	r3, [pc, #472]	@ (80034d4 <HAL_RCC_OscConfig+0x4bc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a75      	ldr	r2, [pc, #468]	@ (80034d4 <HAL_RCC_OscConfig+0x4bc>)
 8003300:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003306:	f7fe f9cb 	bl	80016a0 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330e:	f7fe f9c7 	bl	80016a0 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e183      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003320:	4b6c      	ldr	r3, [pc, #432]	@ (80034d4 <HAL_RCC_OscConfig+0x4bc>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d108      	bne.n	8003346 <HAL_RCC_OscConfig+0x32e>
 8003334:	4b66      	ldr	r3, [pc, #408]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800333a:	4a65      	ldr	r2, [pc, #404]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003344:	e024      	b.n	8003390 <HAL_RCC_OscConfig+0x378>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b05      	cmp	r3, #5
 800334c:	d110      	bne.n	8003370 <HAL_RCC_OscConfig+0x358>
 800334e:	4b60      	ldr	r3, [pc, #384]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003354:	4a5e      	ldr	r2, [pc, #376]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003356:	f043 0304 	orr.w	r3, r3, #4
 800335a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800335e:	4b5c      	ldr	r3, [pc, #368]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003364:	4a5a      	ldr	r2, [pc, #360]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800336e:	e00f      	b.n	8003390 <HAL_RCC_OscConfig+0x378>
 8003370:	4b57      	ldr	r3, [pc, #348]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003376:	4a56      	ldr	r2, [pc, #344]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003378:	f023 0301 	bic.w	r3, r3, #1
 800337c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003380:	4b53      	ldr	r3, [pc, #332]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003386:	4a52      	ldr	r2, [pc, #328]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003388:	f023 0304 	bic.w	r3, r3, #4
 800338c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d016      	beq.n	80033c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003398:	f7fe f982 	bl	80016a0 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a0:	f7fe f97e 	bl	80016a0 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e138      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033b6:	4b46      	ldr	r3, [pc, #280]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 80033b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0ed      	beq.n	80033a0 <HAL_RCC_OscConfig+0x388>
 80033c4:	e015      	b.n	80033f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c6:	f7fe f96b 	bl	80016a0 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033cc:	e00a      	b.n	80033e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ce:	f7fe f967 	bl	80016a0 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033dc:	4293      	cmp	r3, r2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e121      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033e4:	4b3a      	ldr	r3, [pc, #232]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1ed      	bne.n	80033ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033f2:	7ffb      	ldrb	r3, [r7, #31]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d105      	bne.n	8003404 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f8:	4b35      	ldr	r3, [pc, #212]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 80033fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fc:	4a34      	ldr	r2, [pc, #208]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 80033fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003402:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0320 	and.w	r3, r3, #32
 800340c:	2b00      	cmp	r3, #0
 800340e:	d03c      	beq.n	800348a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d01c      	beq.n	8003452 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003418:	4b2d      	ldr	r3, [pc, #180]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 800341a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800341e:	4a2c      	ldr	r2, [pc, #176]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003428:	f7fe f93a 	bl	80016a0 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003430:	f7fe f936 	bl	80016a0 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e0f2      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003442:	4b23      	ldr	r3, [pc, #140]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003444:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0ef      	beq.n	8003430 <HAL_RCC_OscConfig+0x418>
 8003450:	e01b      	b.n	800348a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003452:	4b1f      	ldr	r3, [pc, #124]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003454:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003458:	4a1d      	ldr	r2, [pc, #116]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 800345a:	f023 0301 	bic.w	r3, r3, #1
 800345e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003462:	f7fe f91d 	bl	80016a0 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800346a:	f7fe f919 	bl	80016a0 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e0d5      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800347c:	4b14      	ldr	r3, [pc, #80]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 800347e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1ef      	bne.n	800346a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 80c9 	beq.w	8003626 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003494:	4b0e      	ldr	r3, [pc, #56]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 030c 	and.w	r3, r3, #12
 800349c:	2b0c      	cmp	r3, #12
 800349e:	f000 8083 	beq.w	80035a8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d15e      	bne.n	8003568 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034aa:	4b09      	ldr	r3, [pc, #36]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a08      	ldr	r2, [pc, #32]	@ (80034d0 <HAL_RCC_OscConfig+0x4b8>)
 80034b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b6:	f7fe f8f3 	bl	80016a0 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034bc:	e00c      	b.n	80034d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034be:	f7fe f8ef 	bl	80016a0 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d905      	bls.n	80034d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e0ab      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d8:	4b55      	ldr	r3, [pc, #340]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1ec      	bne.n	80034be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034e4:	4b52      	ldr	r3, [pc, #328]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	4b52      	ldr	r3, [pc, #328]	@ (8003634 <HAL_RCC_OscConfig+0x61c>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6a11      	ldr	r1, [r2, #32]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034f4:	3a01      	subs	r2, #1
 80034f6:	0112      	lsls	r2, r2, #4
 80034f8:	4311      	orrs	r1, r2
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80034fe:	0212      	lsls	r2, r2, #8
 8003500:	4311      	orrs	r1, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003506:	0852      	lsrs	r2, r2, #1
 8003508:	3a01      	subs	r2, #1
 800350a:	0552      	lsls	r2, r2, #21
 800350c:	4311      	orrs	r1, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003512:	0852      	lsrs	r2, r2, #1
 8003514:	3a01      	subs	r2, #1
 8003516:	0652      	lsls	r2, r2, #25
 8003518:	4311      	orrs	r1, r2
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800351e:	06d2      	lsls	r2, r2, #27
 8003520:	430a      	orrs	r2, r1
 8003522:	4943      	ldr	r1, [pc, #268]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 8003524:	4313      	orrs	r3, r2
 8003526:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003528:	4b41      	ldr	r3, [pc, #260]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a40      	ldr	r2, [pc, #256]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 800352e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003532:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003534:	4b3e      	ldr	r3, [pc, #248]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	4a3d      	ldr	r2, [pc, #244]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 800353a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800353e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7fe f8ae 	bl	80016a0 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003548:	f7fe f8aa 	bl	80016a0 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e066      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800355a:	4b35      	ldr	r3, [pc, #212]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0x530>
 8003566:	e05e      	b.n	8003626 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003568:	4b31      	ldr	r3, [pc, #196]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a30      	ldr	r2, [pc, #192]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 800356e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7fe f894 	bl	80016a0 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357c:	f7fe f890 	bl	80016a0 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e04c      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800358e:	4b28      	ldr	r3, [pc, #160]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800359a:	4b25      	ldr	r3, [pc, #148]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	4924      	ldr	r1, [pc, #144]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 80035a0:	4b25      	ldr	r3, [pc, #148]	@ (8003638 <HAL_RCC_OscConfig+0x620>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	60cb      	str	r3, [r1, #12]
 80035a6:	e03e      	b.n	8003626 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e039      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80035b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003630 <HAL_RCC_OscConfig+0x618>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f003 0203 	and.w	r2, r3, #3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d12c      	bne.n	8003622 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	3b01      	subs	r3, #1
 80035d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d123      	bne.n	8003622 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d11b      	bne.n	8003622 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d113      	bne.n	8003622 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	3b01      	subs	r3, #1
 8003608:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d109      	bne.n	8003622 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003618:	085b      	lsrs	r3, r3, #1
 800361a:	3b01      	subs	r3, #1
 800361c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d001      	beq.n	8003626 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3720      	adds	r7, #32
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40021000 	.word	0x40021000
 8003634:	019f800c 	.word	0x019f800c
 8003638:	feeefffc 	.word	0xfeeefffc

0800363c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e11e      	b.n	8003892 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003654:	4b91      	ldr	r3, [pc, #580]	@ (800389c <HAL_RCC_ClockConfig+0x260>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d910      	bls.n	8003684 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b8e      	ldr	r3, [pc, #568]	@ (800389c <HAL_RCC_ClockConfig+0x260>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 020f 	bic.w	r2, r3, #15
 800366a:	498c      	ldr	r1, [pc, #560]	@ (800389c <HAL_RCC_ClockConfig+0x260>)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b8a      	ldr	r3, [pc, #552]	@ (800389c <HAL_RCC_ClockConfig+0x260>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e106      	b.n	8003892 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d073      	beq.n	8003778 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d129      	bne.n	80036ec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003698:	4b81      	ldr	r3, [pc, #516]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0f4      	b.n	8003892 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80036a8:	f000 f9ce 	bl	8003a48 <RCC_GetSysClockFreqFromPLLSource>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4a7c      	ldr	r2, [pc, #496]	@ (80038a4 <HAL_RCC_ClockConfig+0x268>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d93f      	bls.n	8003736 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036b6:	4b7a      	ldr	r3, [pc, #488]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d033      	beq.n	8003736 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d12f      	bne.n	8003736 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036d6:	4b72      	ldr	r3, [pc, #456]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036de:	4a70      	ldr	r2, [pc, #448]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80036e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036e6:	2380      	movs	r3, #128	@ 0x80
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	e024      	b.n	8003736 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d107      	bne.n	8003704 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036f4:	4b6a      	ldr	r3, [pc, #424]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d109      	bne.n	8003714 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0c6      	b.n	8003892 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003704:	4b66      	ldr	r3, [pc, #408]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0be      	b.n	8003892 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003714:	f000 f8ce 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 8003718:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4a61      	ldr	r2, [pc, #388]	@ (80038a4 <HAL_RCC_ClockConfig+0x268>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d909      	bls.n	8003736 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003722:	4b5f      	ldr	r3, [pc, #380]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800372a:	4a5d      	ldr	r2, [pc, #372]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 800372c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003730:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003732:	2380      	movs	r3, #128	@ 0x80
 8003734:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003736:	4b5a      	ldr	r3, [pc, #360]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f023 0203 	bic.w	r2, r3, #3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	4957      	ldr	r1, [pc, #348]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003744:	4313      	orrs	r3, r2
 8003746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003748:	f7fd ffaa 	bl	80016a0 <HAL_GetTick>
 800374c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374e:	e00a      	b.n	8003766 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003750:	f7fd ffa6 	bl	80016a0 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e095      	b.n	8003892 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003766:	4b4e      	ldr	r3, [pc, #312]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 020c 	and.w	r2, r3, #12
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	429a      	cmp	r2, r3
 8003776:	d1eb      	bne.n	8003750 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d023      	beq.n	80037cc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d005      	beq.n	800379c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003790:	4b43      	ldr	r3, [pc, #268]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4a42      	ldr	r2, [pc, #264]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003796:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800379a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80037a8:	4b3d      	ldr	r3, [pc, #244]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80037b0:	4a3b      	ldr	r2, [pc, #236]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80037b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b8:	4b39      	ldr	r3, [pc, #228]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	4936      	ldr	r1, [pc, #216]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	608b      	str	r3, [r1, #8]
 80037ca:	e008      	b.n	80037de <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2b80      	cmp	r3, #128	@ 0x80
 80037d0:	d105      	bne.n	80037de <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80037d2:	4b33      	ldr	r3, [pc, #204]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	4a32      	ldr	r2, [pc, #200]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 80037d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037dc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037de:	4b2f      	ldr	r3, [pc, #188]	@ (800389c <HAL_RCC_ClockConfig+0x260>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d21d      	bcs.n	8003828 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ec:	4b2b      	ldr	r3, [pc, #172]	@ (800389c <HAL_RCC_ClockConfig+0x260>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f023 020f 	bic.w	r2, r3, #15
 80037f4:	4929      	ldr	r1, [pc, #164]	@ (800389c <HAL_RCC_ClockConfig+0x260>)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037fc:	f7fd ff50 	bl	80016a0 <HAL_GetTick>
 8003800:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003802:	e00a      	b.n	800381a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003804:	f7fd ff4c 	bl	80016a0 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003812:	4293      	cmp	r3, r2
 8003814:	d901      	bls.n	800381a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e03b      	b.n	8003892 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b20      	ldr	r3, [pc, #128]	@ (800389c <HAL_RCC_ClockConfig+0x260>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d1ed      	bne.n	8003804 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003834:	4b1a      	ldr	r3, [pc, #104]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4917      	ldr	r1, [pc, #92]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003842:	4313      	orrs	r3, r2
 8003844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003852:	4b13      	ldr	r3, [pc, #76]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	490f      	ldr	r1, [pc, #60]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 8003862:	4313      	orrs	r3, r2
 8003864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003866:	f000 f825 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 800386a:	4602      	mov	r2, r0
 800386c:	4b0c      	ldr	r3, [pc, #48]	@ (80038a0 <HAL_RCC_ClockConfig+0x264>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	490c      	ldr	r1, [pc, #48]	@ (80038a8 <HAL_RCC_ClockConfig+0x26c>)
 8003878:	5ccb      	ldrb	r3, [r1, r3]
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	fa22 f303 	lsr.w	r3, r2, r3
 8003882:	4a0a      	ldr	r2, [pc, #40]	@ (80038ac <HAL_RCC_ClockConfig+0x270>)
 8003884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003886:	4b0a      	ldr	r3, [pc, #40]	@ (80038b0 <HAL_RCC_ClockConfig+0x274>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7fd f90c 	bl	8000aa8 <HAL_InitTick>
 8003890:	4603      	mov	r3, r0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40022000 	.word	0x40022000
 80038a0:	40021000 	.word	0x40021000
 80038a4:	04c4b400 	.word	0x04c4b400
 80038a8:	08006820 	.word	0x08006820
 80038ac:	20000000 	.word	0x20000000
 80038b0:	20000004 	.word	0x20000004

080038b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80038ba:	4b2c      	ldr	r3, [pc, #176]	@ (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d102      	bne.n	80038cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003970 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	e047      	b.n	800395c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80038cc:	4b27      	ldr	r3, [pc, #156]	@ (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 030c 	and.w	r3, r3, #12
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d102      	bne.n	80038de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038d8:	4b25      	ldr	r3, [pc, #148]	@ (8003970 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	e03e      	b.n	800395c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80038de:	4b23      	ldr	r3, [pc, #140]	@ (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b0c      	cmp	r3, #12
 80038e8:	d136      	bne.n	8003958 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038ea:	4b20      	ldr	r3, [pc, #128]	@ (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038f4:	4b1d      	ldr	r3, [pc, #116]	@ (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	3301      	adds	r3, #1
 8003900:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b03      	cmp	r3, #3
 8003906:	d10c      	bne.n	8003922 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003908:	4a19      	ldr	r2, [pc, #100]	@ (8003970 <HAL_RCC_GetSysClockFreq+0xbc>)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003910:	4a16      	ldr	r2, [pc, #88]	@ (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003912:	68d2      	ldr	r2, [r2, #12]
 8003914:	0a12      	lsrs	r2, r2, #8
 8003916:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800391a:	fb02 f303 	mul.w	r3, r2, r3
 800391e:	617b      	str	r3, [r7, #20]
      break;
 8003920:	e00c      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003922:	4a13      	ldr	r2, [pc, #76]	@ (8003970 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	fbb2 f3f3 	udiv	r3, r2, r3
 800392a:	4a10      	ldr	r2, [pc, #64]	@ (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 800392c:	68d2      	ldr	r2, [r2, #12]
 800392e:	0a12      	lsrs	r2, r2, #8
 8003930:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003934:	fb02 f303 	mul.w	r3, r2, r3
 8003938:	617b      	str	r3, [r7, #20]
      break;
 800393a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800393c:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <HAL_RCC_GetSysClockFreq+0xb8>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	0e5b      	lsrs	r3, r3, #25
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	3301      	adds	r3, #1
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	613b      	str	r3, [r7, #16]
 8003956:	e001      	b.n	800395c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800395c:	693b      	ldr	r3, [r7, #16]
}
 800395e:	4618      	mov	r0, r3
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000
 8003970:	00f42400 	.word	0x00f42400

08003974 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003978:	4b03      	ldr	r3, [pc, #12]	@ (8003988 <HAL_RCC_GetHCLKFreq+0x14>)
 800397a:	681b      	ldr	r3, [r3, #0]
}
 800397c:	4618      	mov	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	20000000 	.word	0x20000000

0800398c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003990:	f7ff fff0 	bl	8003974 <HAL_RCC_GetHCLKFreq>
 8003994:	4602      	mov	r2, r0
 8003996:	4b06      	ldr	r3, [pc, #24]	@ (80039b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	0a1b      	lsrs	r3, r3, #8
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	4904      	ldr	r1, [pc, #16]	@ (80039b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039a2:	5ccb      	ldrb	r3, [r1, r3]
 80039a4:	f003 031f 	and.w	r3, r3, #31
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40021000 	.word	0x40021000
 80039b4:	08006830 	.word	0x08006830

080039b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039bc:	f7ff ffda 	bl	8003974 <HAL_RCC_GetHCLKFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b06      	ldr	r3, [pc, #24]	@ (80039dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	0adb      	lsrs	r3, r3, #11
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	4904      	ldr	r1, [pc, #16]	@ (80039e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d8:	4618      	mov	r0, r3
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40021000 	.word	0x40021000
 80039e0:	08006830 	.word	0x08006830

080039e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	220f      	movs	r2, #15
 80039f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80039f4:	4b12      	ldr	r3, [pc, #72]	@ (8003a40 <HAL_RCC_GetClockConfig+0x5c>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0203 	and.w	r2, r3, #3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a00:	4b0f      	ldr	r3, [pc, #60]	@ (8003a40 <HAL_RCC_GetClockConfig+0x5c>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a40 <HAL_RCC_GetClockConfig+0x5c>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003a18:	4b09      	ldr	r3, [pc, #36]	@ (8003a40 <HAL_RCC_GetClockConfig+0x5c>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	08db      	lsrs	r3, r3, #3
 8003a1e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003a26:	4b07      	ldr	r3, [pc, #28]	@ (8003a44 <HAL_RCC_GetClockConfig+0x60>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 020f 	and.w	r2, r3, #15
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	601a      	str	r2, [r3, #0]
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000
 8003a44:	40022000 	.word	0x40022000

08003a48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a58:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	3301      	adds	r3, #1
 8003a64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d10c      	bne.n	8003a86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a6c:	4a17      	ldr	r2, [pc, #92]	@ (8003acc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a74:	4a14      	ldr	r2, [pc, #80]	@ (8003ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a76:	68d2      	ldr	r2, [r2, #12]
 8003a78:	0a12      	lsrs	r2, r2, #8
 8003a7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	617b      	str	r3, [r7, #20]
    break;
 8003a84:	e00c      	b.n	8003aa0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a86:	4a11      	ldr	r2, [pc, #68]	@ (8003acc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8003ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a90:	68d2      	ldr	r2, [r2, #12]
 8003a92:	0a12      	lsrs	r2, r2, #8
 8003a94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a98:	fb02 f303 	mul.w	r3, r2, r3
 8003a9c:	617b      	str	r3, [r7, #20]
    break;
 8003a9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003aa0:	4b09      	ldr	r3, [pc, #36]	@ (8003ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	0e5b      	lsrs	r3, r3, #25
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003aba:	687b      	ldr	r3, [r7, #4]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	00f42400 	.word	0x00f42400

08003ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ad8:	2300      	movs	r3, #0
 8003ada:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003adc:	2300      	movs	r3, #0
 8003ade:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8098 	beq.w	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aee:	2300      	movs	r3, #0
 8003af0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af2:	4b43      	ldr	r3, [pc, #268]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10d      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003afe:	4b40      	ldr	r3, [pc, #256]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b02:	4a3f      	ldr	r2, [pc, #252]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b0a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b12:	60bb      	str	r3, [r7, #8]
 8003b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b16:	2301      	movs	r3, #1
 8003b18:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b1a:	4b3a      	ldr	r3, [pc, #232]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a39      	ldr	r2, [pc, #228]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b26:	f7fd fdbb 	bl	80016a0 <HAL_GetTick>
 8003b2a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b2c:	e009      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2e:	f7fd fdb7 	bl	80016a0 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d902      	bls.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	74fb      	strb	r3, [r7, #19]
        break;
 8003b40:	e005      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b42:	4b30      	ldr	r3, [pc, #192]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0ef      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b4e:	7cfb      	ldrb	r3, [r7, #19]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d159      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b54:	4b2a      	ldr	r3, [pc, #168]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b5e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d01e      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d019      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b70:	4b23      	ldr	r3, [pc, #140]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b7c:	4b20      	ldr	r3, [pc, #128]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b82:	4a1f      	ldr	r2, [pc, #124]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b92:	4a1b      	ldr	r2, [pc, #108]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b9c:	4a18      	ldr	r2, [pc, #96]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d016      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bae:	f7fd fd77 	bl	80016a0 <HAL_GetTick>
 8003bb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bb4:	e00b      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb6:	f7fd fd73 	bl	80016a0 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d902      	bls.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	74fb      	strb	r3, [r7, #19]
            break;
 8003bcc:	e006      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bce:	4b0c      	ldr	r3, [pc, #48]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0ec      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003bdc:	7cfb      	ldrb	r3, [r7, #19]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10b      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003be2:	4b07      	ldr	r3, [pc, #28]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf0:	4903      	ldr	r1, [pc, #12]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003bf8:	e008      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bfa:	7cfb      	ldrb	r3, [r7, #19]
 8003bfc:	74bb      	strb	r3, [r7, #18]
 8003bfe:	e005      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c0c:	7c7b      	ldrb	r3, [r7, #17]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d105      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c12:	4ba6      	ldr	r3, [pc, #664]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c16:	4aa5      	ldr	r2, [pc, #660]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c1c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c2a:	4ba0      	ldr	r3, [pc, #640]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c30:	f023 0203 	bic.w	r2, r3, #3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	499c      	ldr	r1, [pc, #624]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c4c:	4b97      	ldr	r3, [pc, #604]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c52:	f023 020c 	bic.w	r2, r3, #12
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	4994      	ldr	r1, [pc, #592]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c6e:	4b8f      	ldr	r3, [pc, #572]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c74:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	498b      	ldr	r1, [pc, #556]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c90:	4b86      	ldr	r3, [pc, #536]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c96:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	4983      	ldr	r1, [pc, #524]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cb2:	4b7e      	ldr	r3, [pc, #504]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	497a      	ldr	r1, [pc, #488]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cd4:	4b75      	ldr	r3, [pc, #468]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cda:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	4972      	ldr	r1, [pc, #456]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cf6:	4b6d      	ldr	r3, [pc, #436]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	4969      	ldr	r1, [pc, #420]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d18:	4b64      	ldr	r3, [pc, #400]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	4961      	ldr	r1, [pc, #388]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d3a:	4b5c      	ldr	r3, [pc, #368]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d48:	4958      	ldr	r1, [pc, #352]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d015      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d5c:	4b53      	ldr	r3, [pc, #332]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6a:	4950      	ldr	r1, [pc, #320]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d7a:	d105      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	4a4a      	ldr	r2, [pc, #296]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d86:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d015      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d94:	4b45      	ldr	r3, [pc, #276]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da2:	4942      	ldr	r1, [pc, #264]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003db2:	d105      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db4:	4b3d      	ldr	r3, [pc, #244]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4a3c      	ldr	r2, [pc, #240]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dbe:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d015      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003dcc:	4b37      	ldr	r3, [pc, #220]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dda:	4934      	ldr	r1, [pc, #208]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dea:	d105      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dec:	4b2f      	ldr	r3, [pc, #188]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4a2e      	ldr	r2, [pc, #184]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003df6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d015      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e04:	4b29      	ldr	r3, [pc, #164]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e12:	4926      	ldr	r1, [pc, #152]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e22:	d105      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e24:	4b21      	ldr	r3, [pc, #132]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4a20      	ldr	r2, [pc, #128]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e2e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d015      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e42:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4a:	4918      	ldr	r1, [pc, #96]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e5a:	d105      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e5c:	4b13      	ldr	r3, [pc, #76]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4a12      	ldr	r2, [pc, #72]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e66:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d015      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e74:	4b0d      	ldr	r3, [pc, #52]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e82:	490a      	ldr	r1, [pc, #40]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e92:	d105      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e94:	4b05      	ldr	r3, [pc, #20]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4a04      	ldr	r2, [pc, #16]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e9e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003ea0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000

08003eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e049      	b.n	8003f56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fd f9c0 	bl	800125c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3304      	adds	r3, #4
 8003eec:	4619      	mov	r1, r3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	f000 fc28 	bl	8004744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d001      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e04a      	b.n	800400e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a21      	ldr	r2, [pc, #132]	@ (800401c <HAL_TIM_Base_Start_IT+0xbc>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d018      	beq.n	8003fcc <HAL_TIM_Base_Start_IT+0x6c>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fa2:	d013      	beq.n	8003fcc <HAL_TIM_Base_Start_IT+0x6c>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8004020 <HAL_TIM_Base_Start_IT+0xc0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00e      	beq.n	8003fcc <HAL_TIM_Base_Start_IT+0x6c>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8004024 <HAL_TIM_Base_Start_IT+0xc4>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d009      	beq.n	8003fcc <HAL_TIM_Base_Start_IT+0x6c>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a1a      	ldr	r2, [pc, #104]	@ (8004028 <HAL_TIM_Base_Start_IT+0xc8>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d004      	beq.n	8003fcc <HAL_TIM_Base_Start_IT+0x6c>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a19      	ldr	r2, [pc, #100]	@ (800402c <HAL_TIM_Base_Start_IT+0xcc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d115      	bne.n	8003ff8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	4b17      	ldr	r3, [pc, #92]	@ (8004030 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b06      	cmp	r3, #6
 8003fdc:	d015      	beq.n	800400a <HAL_TIM_Base_Start_IT+0xaa>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fe4:	d011      	beq.n	800400a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 0201 	orr.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff6:	e008      	b.n	800400a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	e000      	b.n	800400c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40012c00 	.word	0x40012c00
 8004020:	40000400 	.word	0x40000400
 8004024:	40000800 	.word	0x40000800
 8004028:	40013400 	.word	0x40013400
 800402c:	40014000 	.word	0x40014000
 8004030:	00010007 	.word	0x00010007

08004034 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e049      	b.n	80040da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fd f84a 	bl	80010f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3304      	adds	r3, #4
 8004070:	4619      	mov	r1, r3
 8004072:	4610      	mov	r0, r2
 8004074:	f000 fb66 	bl	8004744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b086      	sub	sp, #24
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e097      	b.n	8004226 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fd f812 	bl	8001134 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6812      	ldr	r2, [r2, #0]
 8004122:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004126:	f023 0307 	bic.w	r3, r3, #7
 800412a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3304      	adds	r3, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f000 fb04 	bl	8004744 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004164:	f023 0303 	bic.w	r3, r3, #3
 8004168:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	4313      	orrs	r3, r2
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004182:	f023 030c 	bic.w	r3, r3, #12
 8004186:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800418e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	021b      	lsls	r3, r3, #8
 800419e:	4313      	orrs	r3, r2
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	011a      	lsls	r2, r3, #4
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	031b      	lsls	r3, r3, #12
 80041b2:	4313      	orrs	r3, r2
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80041c0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80041c8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	4313      	orrs	r3, r2
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4313      	orrs	r3, r2
 80041da:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b084      	sub	sp, #16
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d020      	beq.n	8004292 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d01b      	beq.n	8004292 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f06f 0202 	mvn.w	r2, #2
 8004262:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 fa45 	bl	8004708 <HAL_TIM_IC_CaptureCallback>
 800427e:	e005      	b.n	800428c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fa37 	bl	80046f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fa48 	bl	800471c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d020      	beq.n	80042de <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d01b      	beq.n	80042de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f06f 0204 	mvn.w	r2, #4
 80042ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 fa1f 	bl	8004708 <HAL_TIM_IC_CaptureCallback>
 80042ca:	e005      	b.n	80042d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 fa11 	bl	80046f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 fa22 	bl	800471c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d020      	beq.n	800432a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d01b      	beq.n	800432a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f06f 0208 	mvn.w	r2, #8
 80042fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2204      	movs	r2, #4
 8004300:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f9f9 	bl	8004708 <HAL_TIM_IC_CaptureCallback>
 8004316:	e005      	b.n	8004324 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f9eb 	bl	80046f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f9fc 	bl	800471c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	2b00      	cmp	r3, #0
 8004332:	d020      	beq.n	8004376 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f003 0310 	and.w	r3, r3, #16
 800433a:	2b00      	cmp	r3, #0
 800433c:	d01b      	beq.n	8004376 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f06f 0210 	mvn.w	r2, #16
 8004346:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2208      	movs	r2, #8
 800434c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f9d3 	bl	8004708 <HAL_TIM_IC_CaptureCallback>
 8004362:	e005      	b.n	8004370 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f9c5 	bl	80046f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f9d6 	bl	800471c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00c      	beq.n	800439a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d007      	beq.n	800439a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f06f 0201 	mvn.w	r2, #1
 8004392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7fc fb4b 	bl	8000a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d104      	bne.n	80043ae <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00c      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80043c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fe68 	bl	8005098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00c      	beq.n	80043ec <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d007      	beq.n	80043ec <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80043e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 fe60 	bl	80050ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00c      	beq.n	8004410 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f990 	bl	8004730 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00c      	beq.n	8004434 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0220 	mvn.w	r2, #32
 800442c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fe28 	bl	8005084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00c      	beq.n	8004458 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d007      	beq.n	8004458 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 fe34 	bl	80050c0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00c      	beq.n	800447c <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d007      	beq.n	800447c <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fe2c 	bl	80050d4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00c      	beq.n	80044a0 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d007      	beq.n	80044a0 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fe24 	bl	80050e8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00c      	beq.n	80044c4 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d007      	beq.n	80044c4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80044bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fe1c 	bl	80050fc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044c4:	bf00      	nop
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d8:	2300      	movs	r3, #0
 80044da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e0ff      	b.n	80046ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b14      	cmp	r3, #20
 80044f6:	f200 80f0 	bhi.w	80046da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80044fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004500 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004500:	08004555 	.word	0x08004555
 8004504:	080046db 	.word	0x080046db
 8004508:	080046db 	.word	0x080046db
 800450c:	080046db 	.word	0x080046db
 8004510:	08004595 	.word	0x08004595
 8004514:	080046db 	.word	0x080046db
 8004518:	080046db 	.word	0x080046db
 800451c:	080046db 	.word	0x080046db
 8004520:	080045d7 	.word	0x080045d7
 8004524:	080046db 	.word	0x080046db
 8004528:	080046db 	.word	0x080046db
 800452c:	080046db 	.word	0x080046db
 8004530:	08004617 	.word	0x08004617
 8004534:	080046db 	.word	0x080046db
 8004538:	080046db 	.word	0x080046db
 800453c:	080046db 	.word	0x080046db
 8004540:	08004659 	.word	0x08004659
 8004544:	080046db 	.word	0x080046db
 8004548:	080046db 	.word	0x080046db
 800454c:	080046db 	.word	0x080046db
 8004550:	08004699 	.word	0x08004699
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68b9      	ldr	r1, [r7, #8]
 800455a:	4618      	mov	r0, r3
 800455c:	f000 f98e 	bl	800487c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0208 	orr.w	r2, r2, #8
 800456e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699a      	ldr	r2, [r3, #24]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0204 	bic.w	r2, r2, #4
 800457e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6999      	ldr	r1, [r3, #24]
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	619a      	str	r2, [r3, #24]
      break;
 8004592:	e0a5      	b.n	80046e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68b9      	ldr	r1, [r7, #8]
 800459a:	4618      	mov	r0, r3
 800459c:	f000 f9fe 	bl	800499c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699a      	ldr	r2, [r3, #24]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6999      	ldr	r1, [r3, #24]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	021a      	lsls	r2, r3, #8
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	619a      	str	r2, [r3, #24]
      break;
 80045d4:	e084      	b.n	80046e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fa67 	bl	8004ab0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69da      	ldr	r2, [r3, #28]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f042 0208 	orr.w	r2, r2, #8
 80045f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0204 	bic.w	r2, r2, #4
 8004600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	69d9      	ldr	r1, [r3, #28]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	61da      	str	r2, [r3, #28]
      break;
 8004614:	e064      	b.n	80046e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68b9      	ldr	r1, [r7, #8]
 800461c:	4618      	mov	r0, r3
 800461e:	f000 facf 	bl	8004bc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69da      	ldr	r2, [r3, #28]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69d9      	ldr	r1, [r3, #28]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	021a      	lsls	r2, r3, #8
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	61da      	str	r2, [r3, #28]
      break;
 8004656:	e043      	b.n	80046e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fb38 	bl	8004cd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0208 	orr.w	r2, r2, #8
 8004672:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0204 	bic.w	r2, r2, #4
 8004682:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	691a      	ldr	r2, [r3, #16]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004696:	e023      	b.n	80046e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68b9      	ldr	r1, [r7, #8]
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fb7c 	bl	8004d9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046c2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	021a      	lsls	r2, r3, #8
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80046d8:	e002      	b.n	80046e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	75fb      	strb	r3, [r7, #23]
      break;
 80046de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop

080046f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a42      	ldr	r2, [pc, #264]	@ (8004860 <TIM_Base_SetConfig+0x11c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d00f      	beq.n	800477c <TIM_Base_SetConfig+0x38>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004762:	d00b      	beq.n	800477c <TIM_Base_SetConfig+0x38>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a3f      	ldr	r2, [pc, #252]	@ (8004864 <TIM_Base_SetConfig+0x120>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d007      	beq.n	800477c <TIM_Base_SetConfig+0x38>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a3e      	ldr	r2, [pc, #248]	@ (8004868 <TIM_Base_SetConfig+0x124>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d003      	beq.n	800477c <TIM_Base_SetConfig+0x38>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a3d      	ldr	r2, [pc, #244]	@ (800486c <TIM_Base_SetConfig+0x128>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d108      	bne.n	800478e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a33      	ldr	r2, [pc, #204]	@ (8004860 <TIM_Base_SetConfig+0x11c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d01b      	beq.n	80047ce <TIM_Base_SetConfig+0x8a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800479c:	d017      	beq.n	80047ce <TIM_Base_SetConfig+0x8a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a30      	ldr	r2, [pc, #192]	@ (8004864 <TIM_Base_SetConfig+0x120>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d013      	beq.n	80047ce <TIM_Base_SetConfig+0x8a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a2f      	ldr	r2, [pc, #188]	@ (8004868 <TIM_Base_SetConfig+0x124>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00f      	beq.n	80047ce <TIM_Base_SetConfig+0x8a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a2e      	ldr	r2, [pc, #184]	@ (800486c <TIM_Base_SetConfig+0x128>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00b      	beq.n	80047ce <TIM_Base_SetConfig+0x8a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a2d      	ldr	r2, [pc, #180]	@ (8004870 <TIM_Base_SetConfig+0x12c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d007      	beq.n	80047ce <TIM_Base_SetConfig+0x8a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004874 <TIM_Base_SetConfig+0x130>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d003      	beq.n	80047ce <TIM_Base_SetConfig+0x8a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004878 <TIM_Base_SetConfig+0x134>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d108      	bne.n	80047e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	4313      	orrs	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a16      	ldr	r2, [pc, #88]	@ (8004860 <TIM_Base_SetConfig+0x11c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d00f      	beq.n	800482c <TIM_Base_SetConfig+0xe8>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a17      	ldr	r2, [pc, #92]	@ (800486c <TIM_Base_SetConfig+0x128>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00b      	beq.n	800482c <TIM_Base_SetConfig+0xe8>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a16      	ldr	r2, [pc, #88]	@ (8004870 <TIM_Base_SetConfig+0x12c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d007      	beq.n	800482c <TIM_Base_SetConfig+0xe8>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a15      	ldr	r2, [pc, #84]	@ (8004874 <TIM_Base_SetConfig+0x130>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d003      	beq.n	800482c <TIM_Base_SetConfig+0xe8>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a14      	ldr	r2, [pc, #80]	@ (8004878 <TIM_Base_SetConfig+0x134>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d103      	bne.n	8004834 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b01      	cmp	r3, #1
 8004844:	d105      	bne.n	8004852 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f023 0201 	bic.w	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	611a      	str	r2, [r3, #16]
  }
}
 8004852:	bf00      	nop
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	40012c00 	.word	0x40012c00
 8004864:	40000400 	.word	0x40000400
 8004868:	40000800 	.word	0x40000800
 800486c:	40013400 	.word	0x40013400
 8004870:	40014000 	.word	0x40014000
 8004874:	40014400 	.word	0x40014400
 8004878:	40014800 	.word	0x40014800

0800487c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	f023 0201 	bic.w	r2, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0303 	bic.w	r3, r3, #3
 80048b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f023 0302 	bic.w	r3, r3, #2
 80048c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004988 <TIM_OC1_SetConfig+0x10c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00f      	beq.n	80048fc <TIM_OC1_SetConfig+0x80>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a2b      	ldr	r2, [pc, #172]	@ (800498c <TIM_OC1_SetConfig+0x110>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00b      	beq.n	80048fc <TIM_OC1_SetConfig+0x80>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a2a      	ldr	r2, [pc, #168]	@ (8004990 <TIM_OC1_SetConfig+0x114>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d007      	beq.n	80048fc <TIM_OC1_SetConfig+0x80>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a29      	ldr	r2, [pc, #164]	@ (8004994 <TIM_OC1_SetConfig+0x118>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d003      	beq.n	80048fc <TIM_OC1_SetConfig+0x80>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a28      	ldr	r2, [pc, #160]	@ (8004998 <TIM_OC1_SetConfig+0x11c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d10c      	bne.n	8004916 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f023 0308 	bic.w	r3, r3, #8
 8004902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	4313      	orrs	r3, r2
 800490c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f023 0304 	bic.w	r3, r3, #4
 8004914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a1b      	ldr	r2, [pc, #108]	@ (8004988 <TIM_OC1_SetConfig+0x10c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00f      	beq.n	800493e <TIM_OC1_SetConfig+0xc2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a1a      	ldr	r2, [pc, #104]	@ (800498c <TIM_OC1_SetConfig+0x110>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00b      	beq.n	800493e <TIM_OC1_SetConfig+0xc2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a19      	ldr	r2, [pc, #100]	@ (8004990 <TIM_OC1_SetConfig+0x114>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d007      	beq.n	800493e <TIM_OC1_SetConfig+0xc2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a18      	ldr	r2, [pc, #96]	@ (8004994 <TIM_OC1_SetConfig+0x118>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d003      	beq.n	800493e <TIM_OC1_SetConfig+0xc2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a17      	ldr	r2, [pc, #92]	@ (8004998 <TIM_OC1_SetConfig+0x11c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d111      	bne.n	8004962 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800494c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	4313      	orrs	r3, r2
 8004956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	621a      	str	r2, [r3, #32]
}
 800497c:	bf00      	nop
 800497e:	371c      	adds	r7, #28
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	40012c00 	.word	0x40012c00
 800498c:	40013400 	.word	0x40013400
 8004990:	40014000 	.word	0x40014000
 8004994:	40014400 	.word	0x40014400
 8004998:	40014800 	.word	0x40014800

0800499c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	f023 0210 	bic.w	r2, r3, #16
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	021b      	lsls	r3, r3, #8
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f023 0320 	bic.w	r3, r3, #32
 80049ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a28      	ldr	r2, [pc, #160]	@ (8004a9c <TIM_OC2_SetConfig+0x100>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d003      	beq.n	8004a08 <TIM_OC2_SetConfig+0x6c>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a27      	ldr	r2, [pc, #156]	@ (8004aa0 <TIM_OC2_SetConfig+0x104>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d10d      	bne.n	8004a24 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a1d      	ldr	r2, [pc, #116]	@ (8004a9c <TIM_OC2_SetConfig+0x100>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d00f      	beq.n	8004a4c <TIM_OC2_SetConfig+0xb0>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8004aa0 <TIM_OC2_SetConfig+0x104>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00b      	beq.n	8004a4c <TIM_OC2_SetConfig+0xb0>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a1b      	ldr	r2, [pc, #108]	@ (8004aa4 <TIM_OC2_SetConfig+0x108>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d007      	beq.n	8004a4c <TIM_OC2_SetConfig+0xb0>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a1a      	ldr	r2, [pc, #104]	@ (8004aa8 <TIM_OC2_SetConfig+0x10c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d003      	beq.n	8004a4c <TIM_OC2_SetConfig+0xb0>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a19      	ldr	r2, [pc, #100]	@ (8004aac <TIM_OC2_SetConfig+0x110>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d113      	bne.n	8004a74 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	621a      	str	r2, [r3, #32]
}
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40012c00 	.word	0x40012c00
 8004aa0:	40013400 	.word	0x40013400
 8004aa4:	40014000 	.word	0x40014000
 8004aa8:	40014400 	.word	0x40014400
 8004aac:	40014800 	.word	0x40014800

08004ab0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0303 	bic.w	r3, r3, #3
 8004aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	021b      	lsls	r3, r3, #8
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a27      	ldr	r2, [pc, #156]	@ (8004bac <TIM_OC3_SetConfig+0xfc>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d003      	beq.n	8004b1a <TIM_OC3_SetConfig+0x6a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a26      	ldr	r2, [pc, #152]	@ (8004bb0 <TIM_OC3_SetConfig+0x100>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d10d      	bne.n	8004b36 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	021b      	lsls	r3, r3, #8
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a1c      	ldr	r2, [pc, #112]	@ (8004bac <TIM_OC3_SetConfig+0xfc>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00f      	beq.n	8004b5e <TIM_OC3_SetConfig+0xae>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a1b      	ldr	r2, [pc, #108]	@ (8004bb0 <TIM_OC3_SetConfig+0x100>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d00b      	beq.n	8004b5e <TIM_OC3_SetConfig+0xae>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a1a      	ldr	r2, [pc, #104]	@ (8004bb4 <TIM_OC3_SetConfig+0x104>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d007      	beq.n	8004b5e <TIM_OC3_SetConfig+0xae>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a19      	ldr	r2, [pc, #100]	@ (8004bb8 <TIM_OC3_SetConfig+0x108>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d003      	beq.n	8004b5e <TIM_OC3_SetConfig+0xae>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a18      	ldr	r2, [pc, #96]	@ (8004bbc <TIM_OC3_SetConfig+0x10c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d113      	bne.n	8004b86 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	621a      	str	r2, [r3, #32]
}
 8004ba0:	bf00      	nop
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	40012c00 	.word	0x40012c00
 8004bb0:	40013400 	.word	0x40013400
 8004bb4:	40014000 	.word	0x40014000
 8004bb8:	40014400 	.word	0x40014400
 8004bbc:	40014800 	.word	0x40014800

08004bc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	031b      	lsls	r3, r3, #12
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a28      	ldr	r2, [pc, #160]	@ (8004cc0 <TIM_OC4_SetConfig+0x100>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d003      	beq.n	8004c2c <TIM_OC4_SetConfig+0x6c>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a27      	ldr	r2, [pc, #156]	@ (8004cc4 <TIM_OC4_SetConfig+0x104>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d10d      	bne.n	8004c48 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	031b      	lsls	r3, r3, #12
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a1d      	ldr	r2, [pc, #116]	@ (8004cc0 <TIM_OC4_SetConfig+0x100>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00f      	beq.n	8004c70 <TIM_OC4_SetConfig+0xb0>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a1c      	ldr	r2, [pc, #112]	@ (8004cc4 <TIM_OC4_SetConfig+0x104>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d00b      	beq.n	8004c70 <TIM_OC4_SetConfig+0xb0>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004cc8 <TIM_OC4_SetConfig+0x108>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d007      	beq.n	8004c70 <TIM_OC4_SetConfig+0xb0>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a1a      	ldr	r2, [pc, #104]	@ (8004ccc <TIM_OC4_SetConfig+0x10c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d003      	beq.n	8004c70 <TIM_OC4_SetConfig+0xb0>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a19      	ldr	r2, [pc, #100]	@ (8004cd0 <TIM_OC4_SetConfig+0x110>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d113      	bne.n	8004c98 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c76:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c7e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	019b      	lsls	r3, r3, #6
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	019b      	lsls	r3, r3, #6
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	621a      	str	r2, [r3, #32]
}
 8004cb2:	bf00      	nop
 8004cb4:	371c      	adds	r7, #28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40012c00 	.word	0x40012c00
 8004cc4:	40013400 	.word	0x40013400
 8004cc8:	40014000 	.word	0x40014000
 8004ccc:	40014400 	.word	0x40014400
 8004cd0:	40014800 	.word	0x40014800

08004cd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004d18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	041b      	lsls	r3, r3, #16
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a17      	ldr	r2, [pc, #92]	@ (8004d88 <TIM_OC5_SetConfig+0xb4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00f      	beq.n	8004d4e <TIM_OC5_SetConfig+0x7a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a16      	ldr	r2, [pc, #88]	@ (8004d8c <TIM_OC5_SetConfig+0xb8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00b      	beq.n	8004d4e <TIM_OC5_SetConfig+0x7a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a15      	ldr	r2, [pc, #84]	@ (8004d90 <TIM_OC5_SetConfig+0xbc>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d007      	beq.n	8004d4e <TIM_OC5_SetConfig+0x7a>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a14      	ldr	r2, [pc, #80]	@ (8004d94 <TIM_OC5_SetConfig+0xc0>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d003      	beq.n	8004d4e <TIM_OC5_SetConfig+0x7a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a13      	ldr	r2, [pc, #76]	@ (8004d98 <TIM_OC5_SetConfig+0xc4>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d109      	bne.n	8004d62 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	021b      	lsls	r3, r3, #8
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	621a      	str	r2, [r3, #32]
}
 8004d7c:	bf00      	nop
 8004d7e:	371c      	adds	r7, #28
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	40012c00 	.word	0x40012c00
 8004d8c:	40013400 	.word	0x40013400
 8004d90:	40014000 	.word	0x40014000
 8004d94:	40014400 	.word	0x40014400
 8004d98:	40014800 	.word	0x40014800

08004d9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	021b      	lsls	r3, r3, #8
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	051b      	lsls	r3, r3, #20
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a18      	ldr	r2, [pc, #96]	@ (8004e54 <TIM_OC6_SetConfig+0xb8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00f      	beq.n	8004e18 <TIM_OC6_SetConfig+0x7c>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a17      	ldr	r2, [pc, #92]	@ (8004e58 <TIM_OC6_SetConfig+0xbc>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00b      	beq.n	8004e18 <TIM_OC6_SetConfig+0x7c>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a16      	ldr	r2, [pc, #88]	@ (8004e5c <TIM_OC6_SetConfig+0xc0>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d007      	beq.n	8004e18 <TIM_OC6_SetConfig+0x7c>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a15      	ldr	r2, [pc, #84]	@ (8004e60 <TIM_OC6_SetConfig+0xc4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d003      	beq.n	8004e18 <TIM_OC6_SetConfig+0x7c>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a14      	ldr	r2, [pc, #80]	@ (8004e64 <TIM_OC6_SetConfig+0xc8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d109      	bne.n	8004e2c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	029b      	lsls	r3, r3, #10
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	621a      	str	r2, [r3, #32]
}
 8004e46:	bf00      	nop
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40012c00 	.word	0x40012c00
 8004e58:	40013400 	.word	0x40013400
 8004e5c:	40014000 	.word	0x40014000
 8004e60:	40014400 	.word	0x40014400
 8004e64:	40014800 	.word	0x40014800

08004e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e065      	b.n	8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a2c      	ldr	r2, [pc, #176]	@ (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a2b      	ldr	r2, [pc, #172]	@ (8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d108      	bne.n	8004ec6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004eba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004ecc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ed0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d018      	beq.n	8004f20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ef6:	d013      	beq.n	8004f20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a18      	ldr	r2, [pc, #96]	@ (8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00e      	beq.n	8004f20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a17      	ldr	r2, [pc, #92]	@ (8004f64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d009      	beq.n	8004f20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a12      	ldr	r2, [pc, #72]	@ (8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d004      	beq.n	8004f20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a13      	ldr	r2, [pc, #76]	@ (8004f68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d10c      	bne.n	8004f3a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	40012c00 	.word	0x40012c00
 8004f5c:	40013400 	.word	0x40013400
 8004f60:	40000400 	.word	0x40000400
 8004f64:	40000800 	.word	0x40000800
 8004f68:	40014000 	.word	0x40014000

08004f6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e073      	b.n	8005070 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	041b      	lsls	r3, r3, #16
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	4313      	orrs	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a19      	ldr	r2, [pc, #100]	@ (800507c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d004      	beq.n	8005024 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a18      	ldr	r2, [pc, #96]	@ (8005080 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d11c      	bne.n	800505e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502e:	051b      	lsls	r3, r3, #20
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	40012c00 	.word	0x40012c00
 8005080:	40013400 	.word	0x40013400

08005084 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e042      	b.n	80051a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005128:	2b00      	cmp	r3, #0
 800512a:	d106      	bne.n	800513a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7fc f9c5 	bl	80014c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2224      	movs	r2, #36	@ 0x24
 800513e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0201 	bic.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fb82 	bl	8005864 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f8b3 	bl	80052cc <UART_SetConfig>
 8005166:	4603      	mov	r3, r0
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e01b      	b.n	80051a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800517e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689a      	ldr	r2, [r3, #8]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800518e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0201 	orr.w	r2, r2, #1
 800519e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fc01 	bl	80059a8 <UART_CheckIdleState>
 80051a6:	4603      	mov	r3, r0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b08a      	sub	sp, #40	@ 0x28
 80051b4:	af02      	add	r7, sp, #8
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	603b      	str	r3, [r7, #0]
 80051bc:	4613      	mov	r3, r2
 80051be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	d17b      	bne.n	80052c2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <HAL_UART_Transmit+0x26>
 80051d0:	88fb      	ldrh	r3, [r7, #6]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e074      	b.n	80052c4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2221      	movs	r2, #33	@ 0x21
 80051e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051ea:	f7fc fa59 	bl	80016a0 <HAL_GetTick>
 80051ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	88fa      	ldrh	r2, [r7, #6]
 80051f4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	88fa      	ldrh	r2, [r7, #6]
 80051fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005208:	d108      	bne.n	800521c <HAL_UART_Transmit+0x6c>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d104      	bne.n	800521c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005212:	2300      	movs	r3, #0
 8005214:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	61bb      	str	r3, [r7, #24]
 800521a:	e003      	b.n	8005224 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005220:	2300      	movs	r3, #0
 8005222:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005224:	e030      	b.n	8005288 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2200      	movs	r2, #0
 800522e:	2180      	movs	r1, #128	@ 0x80
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 fc63 	bl	8005afc <UART_WaitOnFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d005      	beq.n	8005248 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e03d      	b.n	80052c4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10b      	bne.n	8005266 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800525c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	3302      	adds	r3, #2
 8005262:	61bb      	str	r3, [r7, #24]
 8005264:	e007      	b.n	8005276 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	781a      	ldrb	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	3301      	adds	r3, #1
 8005274:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800527c:	b29b      	uxth	r3, r3
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800528e:	b29b      	uxth	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1c8      	bne.n	8005226 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2200      	movs	r2, #0
 800529c:	2140      	movs	r1, #64	@ 0x40
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 fc2c 	bl	8005afc <UART_WaitOnFlagUntilTimeout>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e006      	b.n	80052c4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	e000      	b.n	80052c4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80052c2:	2302      	movs	r3, #2
  }
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3720      	adds	r7, #32
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052d0:	b08c      	sub	sp, #48	@ 0x30
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	431a      	orrs	r2, r3
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	431a      	orrs	r2, r3
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	4bab      	ldr	r3, [pc, #684]	@ (80055a8 <UART_SetConfig+0x2dc>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	6812      	ldr	r2, [r2, #0]
 8005302:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005304:	430b      	orrs	r3, r1
 8005306:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4aa0      	ldr	r2, [pc, #640]	@ (80055ac <UART_SetConfig+0x2e0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d004      	beq.n	8005338 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005334:	4313      	orrs	r3, r2
 8005336:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005342:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	6812      	ldr	r2, [r2, #0]
 800534a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800534c:	430b      	orrs	r3, r1
 800534e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005356:	f023 010f 	bic.w	r1, r3, #15
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a91      	ldr	r2, [pc, #580]	@ (80055b0 <UART_SetConfig+0x2e4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d125      	bne.n	80053bc <UART_SetConfig+0xf0>
 8005370:	4b90      	ldr	r3, [pc, #576]	@ (80055b4 <UART_SetConfig+0x2e8>)
 8005372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	2b03      	cmp	r3, #3
 800537c:	d81a      	bhi.n	80053b4 <UART_SetConfig+0xe8>
 800537e:	a201      	add	r2, pc, #4	@ (adr r2, 8005384 <UART_SetConfig+0xb8>)
 8005380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005384:	08005395 	.word	0x08005395
 8005388:	080053a5 	.word	0x080053a5
 800538c:	0800539d 	.word	0x0800539d
 8005390:	080053ad 	.word	0x080053ad
 8005394:	2301      	movs	r3, #1
 8005396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800539a:	e0d6      	b.n	800554a <UART_SetConfig+0x27e>
 800539c:	2302      	movs	r3, #2
 800539e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053a2:	e0d2      	b.n	800554a <UART_SetConfig+0x27e>
 80053a4:	2304      	movs	r3, #4
 80053a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053aa:	e0ce      	b.n	800554a <UART_SetConfig+0x27e>
 80053ac:	2308      	movs	r3, #8
 80053ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053b2:	e0ca      	b.n	800554a <UART_SetConfig+0x27e>
 80053b4:	2310      	movs	r3, #16
 80053b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ba:	e0c6      	b.n	800554a <UART_SetConfig+0x27e>
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a7d      	ldr	r2, [pc, #500]	@ (80055b8 <UART_SetConfig+0x2ec>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d138      	bne.n	8005438 <UART_SetConfig+0x16c>
 80053c6:	4b7b      	ldr	r3, [pc, #492]	@ (80055b4 <UART_SetConfig+0x2e8>)
 80053c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053cc:	f003 030c 	and.w	r3, r3, #12
 80053d0:	2b0c      	cmp	r3, #12
 80053d2:	d82d      	bhi.n	8005430 <UART_SetConfig+0x164>
 80053d4:	a201      	add	r2, pc, #4	@ (adr r2, 80053dc <UART_SetConfig+0x110>)
 80053d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053da:	bf00      	nop
 80053dc:	08005411 	.word	0x08005411
 80053e0:	08005431 	.word	0x08005431
 80053e4:	08005431 	.word	0x08005431
 80053e8:	08005431 	.word	0x08005431
 80053ec:	08005421 	.word	0x08005421
 80053f0:	08005431 	.word	0x08005431
 80053f4:	08005431 	.word	0x08005431
 80053f8:	08005431 	.word	0x08005431
 80053fc:	08005419 	.word	0x08005419
 8005400:	08005431 	.word	0x08005431
 8005404:	08005431 	.word	0x08005431
 8005408:	08005431 	.word	0x08005431
 800540c:	08005429 	.word	0x08005429
 8005410:	2300      	movs	r3, #0
 8005412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005416:	e098      	b.n	800554a <UART_SetConfig+0x27e>
 8005418:	2302      	movs	r3, #2
 800541a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800541e:	e094      	b.n	800554a <UART_SetConfig+0x27e>
 8005420:	2304      	movs	r3, #4
 8005422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005426:	e090      	b.n	800554a <UART_SetConfig+0x27e>
 8005428:	2308      	movs	r3, #8
 800542a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800542e:	e08c      	b.n	800554a <UART_SetConfig+0x27e>
 8005430:	2310      	movs	r3, #16
 8005432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005436:	e088      	b.n	800554a <UART_SetConfig+0x27e>
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a5f      	ldr	r2, [pc, #380]	@ (80055bc <UART_SetConfig+0x2f0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d125      	bne.n	800548e <UART_SetConfig+0x1c2>
 8005442:	4b5c      	ldr	r3, [pc, #368]	@ (80055b4 <UART_SetConfig+0x2e8>)
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005448:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800544c:	2b30      	cmp	r3, #48	@ 0x30
 800544e:	d016      	beq.n	800547e <UART_SetConfig+0x1b2>
 8005450:	2b30      	cmp	r3, #48	@ 0x30
 8005452:	d818      	bhi.n	8005486 <UART_SetConfig+0x1ba>
 8005454:	2b20      	cmp	r3, #32
 8005456:	d00a      	beq.n	800546e <UART_SetConfig+0x1a2>
 8005458:	2b20      	cmp	r3, #32
 800545a:	d814      	bhi.n	8005486 <UART_SetConfig+0x1ba>
 800545c:	2b00      	cmp	r3, #0
 800545e:	d002      	beq.n	8005466 <UART_SetConfig+0x19a>
 8005460:	2b10      	cmp	r3, #16
 8005462:	d008      	beq.n	8005476 <UART_SetConfig+0x1aa>
 8005464:	e00f      	b.n	8005486 <UART_SetConfig+0x1ba>
 8005466:	2300      	movs	r3, #0
 8005468:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800546c:	e06d      	b.n	800554a <UART_SetConfig+0x27e>
 800546e:	2302      	movs	r3, #2
 8005470:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005474:	e069      	b.n	800554a <UART_SetConfig+0x27e>
 8005476:	2304      	movs	r3, #4
 8005478:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800547c:	e065      	b.n	800554a <UART_SetConfig+0x27e>
 800547e:	2308      	movs	r3, #8
 8005480:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005484:	e061      	b.n	800554a <UART_SetConfig+0x27e>
 8005486:	2310      	movs	r3, #16
 8005488:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800548c:	e05d      	b.n	800554a <UART_SetConfig+0x27e>
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a4b      	ldr	r2, [pc, #300]	@ (80055c0 <UART_SetConfig+0x2f4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d125      	bne.n	80054e4 <UART_SetConfig+0x218>
 8005498:	4b46      	ldr	r3, [pc, #280]	@ (80055b4 <UART_SetConfig+0x2e8>)
 800549a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800549e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80054a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80054a4:	d016      	beq.n	80054d4 <UART_SetConfig+0x208>
 80054a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80054a8:	d818      	bhi.n	80054dc <UART_SetConfig+0x210>
 80054aa:	2b80      	cmp	r3, #128	@ 0x80
 80054ac:	d00a      	beq.n	80054c4 <UART_SetConfig+0x1f8>
 80054ae:	2b80      	cmp	r3, #128	@ 0x80
 80054b0:	d814      	bhi.n	80054dc <UART_SetConfig+0x210>
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <UART_SetConfig+0x1f0>
 80054b6:	2b40      	cmp	r3, #64	@ 0x40
 80054b8:	d008      	beq.n	80054cc <UART_SetConfig+0x200>
 80054ba:	e00f      	b.n	80054dc <UART_SetConfig+0x210>
 80054bc:	2300      	movs	r3, #0
 80054be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054c2:	e042      	b.n	800554a <UART_SetConfig+0x27e>
 80054c4:	2302      	movs	r3, #2
 80054c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ca:	e03e      	b.n	800554a <UART_SetConfig+0x27e>
 80054cc:	2304      	movs	r3, #4
 80054ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054d2:	e03a      	b.n	800554a <UART_SetConfig+0x27e>
 80054d4:	2308      	movs	r3, #8
 80054d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054da:	e036      	b.n	800554a <UART_SetConfig+0x27e>
 80054dc:	2310      	movs	r3, #16
 80054de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054e2:	e032      	b.n	800554a <UART_SetConfig+0x27e>
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a30      	ldr	r2, [pc, #192]	@ (80055ac <UART_SetConfig+0x2e0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d12a      	bne.n	8005544 <UART_SetConfig+0x278>
 80054ee:	4b31      	ldr	r3, [pc, #196]	@ (80055b4 <UART_SetConfig+0x2e8>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80054f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054fc:	d01a      	beq.n	8005534 <UART_SetConfig+0x268>
 80054fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005502:	d81b      	bhi.n	800553c <UART_SetConfig+0x270>
 8005504:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005508:	d00c      	beq.n	8005524 <UART_SetConfig+0x258>
 800550a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800550e:	d815      	bhi.n	800553c <UART_SetConfig+0x270>
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <UART_SetConfig+0x250>
 8005514:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005518:	d008      	beq.n	800552c <UART_SetConfig+0x260>
 800551a:	e00f      	b.n	800553c <UART_SetConfig+0x270>
 800551c:	2300      	movs	r3, #0
 800551e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005522:	e012      	b.n	800554a <UART_SetConfig+0x27e>
 8005524:	2302      	movs	r3, #2
 8005526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800552a:	e00e      	b.n	800554a <UART_SetConfig+0x27e>
 800552c:	2304      	movs	r3, #4
 800552e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005532:	e00a      	b.n	800554a <UART_SetConfig+0x27e>
 8005534:	2308      	movs	r3, #8
 8005536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800553a:	e006      	b.n	800554a <UART_SetConfig+0x27e>
 800553c:	2310      	movs	r3, #16
 800553e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005542:	e002      	b.n	800554a <UART_SetConfig+0x27e>
 8005544:	2310      	movs	r3, #16
 8005546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a17      	ldr	r2, [pc, #92]	@ (80055ac <UART_SetConfig+0x2e0>)
 8005550:	4293      	cmp	r3, r2
 8005552:	f040 80a8 	bne.w	80056a6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005556:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800555a:	2b08      	cmp	r3, #8
 800555c:	d834      	bhi.n	80055c8 <UART_SetConfig+0x2fc>
 800555e:	a201      	add	r2, pc, #4	@ (adr r2, 8005564 <UART_SetConfig+0x298>)
 8005560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005564:	08005589 	.word	0x08005589
 8005568:	080055c9 	.word	0x080055c9
 800556c:	08005591 	.word	0x08005591
 8005570:	080055c9 	.word	0x080055c9
 8005574:	08005597 	.word	0x08005597
 8005578:	080055c9 	.word	0x080055c9
 800557c:	080055c9 	.word	0x080055c9
 8005580:	080055c9 	.word	0x080055c9
 8005584:	0800559f 	.word	0x0800559f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005588:	f7fe fa00 	bl	800398c <HAL_RCC_GetPCLK1Freq>
 800558c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800558e:	e021      	b.n	80055d4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005590:	4b0c      	ldr	r3, [pc, #48]	@ (80055c4 <UART_SetConfig+0x2f8>)
 8005592:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005594:	e01e      	b.n	80055d4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005596:	f7fe f98d 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 800559a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800559c:	e01a      	b.n	80055d4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800559e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055a4:	e016      	b.n	80055d4 <UART_SetConfig+0x308>
 80055a6:	bf00      	nop
 80055a8:	cfff69f3 	.word	0xcfff69f3
 80055ac:	40008000 	.word	0x40008000
 80055b0:	40013800 	.word	0x40013800
 80055b4:	40021000 	.word	0x40021000
 80055b8:	40004400 	.word	0x40004400
 80055bc:	40004800 	.word	0x40004800
 80055c0:	40004c00 	.word	0x40004c00
 80055c4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80055d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 812a 	beq.w	8005830 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e0:	4a9e      	ldr	r2, [pc, #632]	@ (800585c <UART_SetConfig+0x590>)
 80055e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055e6:	461a      	mov	r2, r3
 80055e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	4613      	mov	r3, r2
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	4413      	add	r3, r2
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d305      	bcc.n	800560c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	429a      	cmp	r2, r3
 800560a:	d903      	bls.n	8005614 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005612:	e10d      	b.n	8005830 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005616:	2200      	movs	r2, #0
 8005618:	60bb      	str	r3, [r7, #8]
 800561a:	60fa      	str	r2, [r7, #12]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005620:	4a8e      	ldr	r2, [pc, #568]	@ (800585c <UART_SetConfig+0x590>)
 8005622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005626:	b29b      	uxth	r3, r3
 8005628:	2200      	movs	r2, #0
 800562a:	603b      	str	r3, [r7, #0]
 800562c:	607a      	str	r2, [r7, #4]
 800562e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005632:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005636:	f7fa fdef 	bl	8000218 <__aeabi_uldivmod>
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	4610      	mov	r0, r2
 8005640:	4619      	mov	r1, r3
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	020b      	lsls	r3, r1, #8
 800564c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005650:	0202      	lsls	r2, r0, #8
 8005652:	6979      	ldr	r1, [r7, #20]
 8005654:	6849      	ldr	r1, [r1, #4]
 8005656:	0849      	lsrs	r1, r1, #1
 8005658:	2000      	movs	r0, #0
 800565a:	460c      	mov	r4, r1
 800565c:	4605      	mov	r5, r0
 800565e:	eb12 0804 	adds.w	r8, r2, r4
 8005662:	eb43 0905 	adc.w	r9, r3, r5
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	469a      	mov	sl, r3
 800566e:	4693      	mov	fp, r2
 8005670:	4652      	mov	r2, sl
 8005672:	465b      	mov	r3, fp
 8005674:	4640      	mov	r0, r8
 8005676:	4649      	mov	r1, r9
 8005678:	f7fa fdce 	bl	8000218 <__aeabi_uldivmod>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	4613      	mov	r3, r2
 8005682:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800568a:	d308      	bcc.n	800569e <UART_SetConfig+0x3d2>
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005692:	d204      	bcs.n	800569e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6a3a      	ldr	r2, [r7, #32]
 800569a:	60da      	str	r2, [r3, #12]
 800569c:	e0c8      	b.n	8005830 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80056a4:	e0c4      	b.n	8005830 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056ae:	d167      	bne.n	8005780 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80056b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d828      	bhi.n	800570a <UART_SetConfig+0x43e>
 80056b8:	a201      	add	r2, pc, #4	@ (adr r2, 80056c0 <UART_SetConfig+0x3f4>)
 80056ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056be:	bf00      	nop
 80056c0:	080056e5 	.word	0x080056e5
 80056c4:	080056ed 	.word	0x080056ed
 80056c8:	080056f5 	.word	0x080056f5
 80056cc:	0800570b 	.word	0x0800570b
 80056d0:	080056fb 	.word	0x080056fb
 80056d4:	0800570b 	.word	0x0800570b
 80056d8:	0800570b 	.word	0x0800570b
 80056dc:	0800570b 	.word	0x0800570b
 80056e0:	08005703 	.word	0x08005703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056e4:	f7fe f952 	bl	800398c <HAL_RCC_GetPCLK1Freq>
 80056e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056ea:	e014      	b.n	8005716 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056ec:	f7fe f964 	bl	80039b8 <HAL_RCC_GetPCLK2Freq>
 80056f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056f2:	e010      	b.n	8005716 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056f4:	4b5a      	ldr	r3, [pc, #360]	@ (8005860 <UART_SetConfig+0x594>)
 80056f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056f8:	e00d      	b.n	8005716 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056fa:	f7fe f8db 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 80056fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005700:	e009      	b.n	8005716 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005702:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005706:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005708:	e005      	b.n	8005716 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005714:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 8089 	beq.w	8005830 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005722:	4a4e      	ldr	r2, [pc, #312]	@ (800585c <UART_SetConfig+0x590>)
 8005724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005728:	461a      	mov	r2, r3
 800572a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005730:	005a      	lsls	r2, r3, #1
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	085b      	lsrs	r3, r3, #1
 8005738:	441a      	add	r2, r3
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005742:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	2b0f      	cmp	r3, #15
 8005748:	d916      	bls.n	8005778 <UART_SetConfig+0x4ac>
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005750:	d212      	bcs.n	8005778 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	b29b      	uxth	r3, r3
 8005756:	f023 030f 	bic.w	r3, r3, #15
 800575a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	085b      	lsrs	r3, r3, #1
 8005760:	b29b      	uxth	r3, r3
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	b29a      	uxth	r2, r3
 8005768:	8bfb      	ldrh	r3, [r7, #30]
 800576a:	4313      	orrs	r3, r2
 800576c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	8bfa      	ldrh	r2, [r7, #30]
 8005774:	60da      	str	r2, [r3, #12]
 8005776:	e05b      	b.n	8005830 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800577e:	e057      	b.n	8005830 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005780:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005784:	2b08      	cmp	r3, #8
 8005786:	d828      	bhi.n	80057da <UART_SetConfig+0x50e>
 8005788:	a201      	add	r2, pc, #4	@ (adr r2, 8005790 <UART_SetConfig+0x4c4>)
 800578a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578e:	bf00      	nop
 8005790:	080057b5 	.word	0x080057b5
 8005794:	080057bd 	.word	0x080057bd
 8005798:	080057c5 	.word	0x080057c5
 800579c:	080057db 	.word	0x080057db
 80057a0:	080057cb 	.word	0x080057cb
 80057a4:	080057db 	.word	0x080057db
 80057a8:	080057db 	.word	0x080057db
 80057ac:	080057db 	.word	0x080057db
 80057b0:	080057d3 	.word	0x080057d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057b4:	f7fe f8ea 	bl	800398c <HAL_RCC_GetPCLK1Freq>
 80057b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057ba:	e014      	b.n	80057e6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057bc:	f7fe f8fc 	bl	80039b8 <HAL_RCC_GetPCLK2Freq>
 80057c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057c2:	e010      	b.n	80057e6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057c4:	4b26      	ldr	r3, [pc, #152]	@ (8005860 <UART_SetConfig+0x594>)
 80057c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057c8:	e00d      	b.n	80057e6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ca:	f7fe f873 	bl	80038b4 <HAL_RCC_GetSysClockFreq>
 80057ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057d0:	e009      	b.n	80057e6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057d8:	e005      	b.n	80057e6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80057e4:	bf00      	nop
    }

    if (pclk != 0U)
 80057e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d021      	beq.n	8005830 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f0:	4a1a      	ldr	r2, [pc, #104]	@ (800585c <UART_SetConfig+0x590>)
 80057f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057f6:	461a      	mov	r2, r3
 80057f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	085b      	lsrs	r3, r3, #1
 8005804:	441a      	add	r2, r3
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	fbb2 f3f3 	udiv	r3, r2, r3
 800580e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	2b0f      	cmp	r3, #15
 8005814:	d909      	bls.n	800582a <UART_SetConfig+0x55e>
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800581c:	d205      	bcs.n	800582a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	b29a      	uxth	r2, r3
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60da      	str	r2, [r3, #12]
 8005828:	e002      	b.n	8005830 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2201      	movs	r2, #1
 8005834:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	2201      	movs	r2, #1
 800583c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	2200      	movs	r2, #0
 8005844:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2200      	movs	r2, #0
 800584a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800584c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005850:	4618      	mov	r0, r3
 8005852:	3730      	adds	r7, #48	@ 0x30
 8005854:	46bd      	mov	sp, r7
 8005856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800585a:	bf00      	nop
 800585c:	08006838 	.word	0x08006838
 8005860:	00f42400 	.word	0x00f42400

08005864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d6:	f003 0304 	and.w	r3, r3, #4
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01a      	beq.n	800597a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800595e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005962:	d10a      	bne.n	800597a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	605a      	str	r2, [r3, #4]
  }
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b098      	sub	sp, #96	@ 0x60
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059b8:	f7fb fe72 	bl	80016a0 <HAL_GetTick>
 80059bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0308 	and.w	r3, r3, #8
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d12f      	bne.n	8005a2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059d4:	2200      	movs	r2, #0
 80059d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f88e 	bl	8005afc <UART_WaitOnFlagUntilTimeout>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d022      	beq.n	8005a2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ee:	e853 3f00 	ldrex	r3, [r3]
 80059f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	461a      	mov	r2, r3
 8005a02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a04:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a06:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a0c:	e841 2300 	strex	r3, r2, [r1]
 8005a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1e6      	bne.n	80059e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e063      	b.n	8005af4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d149      	bne.n	8005ace <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a42:	2200      	movs	r2, #0
 8005a44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f857 	bl	8005afc <UART_WaitOnFlagUntilTimeout>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d03c      	beq.n	8005ace <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	623b      	str	r3, [r7, #32]
   return(result);
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a72:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e6      	bne.n	8005a54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f023 0301 	bic.w	r3, r3, #1
 8005a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3308      	adds	r3, #8
 8005aa4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005aa6:	61fa      	str	r2, [r7, #28]
 8005aa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	69b9      	ldr	r1, [r7, #24]
 8005aac:	69fa      	ldr	r2, [r7, #28]
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	617b      	str	r3, [r7, #20]
   return(result);
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e5      	bne.n	8005a86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e012      	b.n	8005af4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3758      	adds	r7, #88	@ 0x58
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	603b      	str	r3, [r7, #0]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b0c:	e04f      	b.n	8005bae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b14:	d04b      	beq.n	8005bae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b16:	f7fb fdc3 	bl	80016a0 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d302      	bcc.n	8005b2c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e04e      	b.n	8005bce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0304 	and.w	r3, r3, #4
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d037      	beq.n	8005bae <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b80      	cmp	r3, #128	@ 0x80
 8005b42:	d034      	beq.n	8005bae <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2b40      	cmp	r3, #64	@ 0x40
 8005b48:	d031      	beq.n	8005bae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	69db      	ldr	r3, [r3, #28]
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d110      	bne.n	8005b7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2208      	movs	r2, #8
 8005b5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 f838 	bl	8005bd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2208      	movs	r2, #8
 8005b6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e029      	b.n	8005bce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b88:	d111      	bne.n	8005bae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 f81e 	bl	8005bd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e00f      	b.n	8005bce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69da      	ldr	r2, [r3, #28]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	bf0c      	ite	eq
 8005bbe:	2301      	moveq	r3, #1
 8005bc0:	2300      	movne	r3, #0
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d0a0      	beq.n	8005b0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b095      	sub	sp, #84	@ 0x54
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005be6:	e853 3f00 	ldrex	r3, [r3]
 8005bea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bfe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c04:	e841 2300 	strex	r3, r2, [r1]
 8005c08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1e6      	bne.n	8005bde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3308      	adds	r3, #8
 8005c16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	e853 3f00 	ldrex	r3, [r3]
 8005c1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c26:	f023 0301 	bic.w	r3, r3, #1
 8005c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3308      	adds	r3, #8
 8005c32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c3c:	e841 2300 	strex	r3, r2, [r1]
 8005c40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1e3      	bne.n	8005c10 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d118      	bne.n	8005c82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	e853 3f00 	ldrex	r3, [r3]
 8005c5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	f023 0310 	bic.w	r3, r3, #16
 8005c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c6e:	61bb      	str	r3, [r7, #24]
 8005c70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c72:	6979      	ldr	r1, [r7, #20]
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	e841 2300 	strex	r3, r2, [r1]
 8005c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1e6      	bne.n	8005c50 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005c96:	bf00      	nop
 8005c98:	3754      	adds	r7, #84	@ 0x54
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b085      	sub	sp, #20
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <HAL_UARTEx_DisableFifoMode+0x16>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e027      	b.n	8005d08 <HAL_UARTEx_DisableFifoMode+0x66>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2224      	movs	r2, #36	@ 0x24
 8005cc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0201 	bic.w	r2, r2, #1
 8005cde:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005ce6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d101      	bne.n	8005d2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e02d      	b.n	8005d88 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2224      	movs	r2, #36	@ 0x24
 8005d38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 0201 	bic.w	r2, r2, #1
 8005d52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f84f 	bl	8005e0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d101      	bne.n	8005da8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005da4:	2302      	movs	r3, #2
 8005da6:	e02d      	b.n	8005e04 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2224      	movs	r2, #36	@ 0x24
 8005db4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0201 	bic.w	r2, r2, #1
 8005dce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f811 	bl	8005e0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d108      	bne.n	8005e2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e2c:	e031      	b.n	8005e92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e2e:	2308      	movs	r3, #8
 8005e30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e32:	2308      	movs	r3, #8
 8005e34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	0e5b      	lsrs	r3, r3, #25
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	0f5b      	lsrs	r3, r3, #29
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	f003 0307 	and.w	r3, r3, #7
 8005e54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e56:	7bbb      	ldrb	r3, [r7, #14]
 8005e58:	7b3a      	ldrb	r2, [r7, #12]
 8005e5a:	4911      	ldr	r1, [pc, #68]	@ (8005ea0 <UARTEx_SetNbDataToProcess+0x94>)
 8005e5c:	5c8a      	ldrb	r2, [r1, r2]
 8005e5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e62:	7b3a      	ldrb	r2, [r7, #12]
 8005e64:	490f      	ldr	r1, [pc, #60]	@ (8005ea4 <UARTEx_SetNbDataToProcess+0x98>)
 8005e66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e68:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
 8005e76:	7b7a      	ldrb	r2, [r7, #13]
 8005e78:	4909      	ldr	r1, [pc, #36]	@ (8005ea0 <UARTEx_SetNbDataToProcess+0x94>)
 8005e7a:	5c8a      	ldrb	r2, [r1, r2]
 8005e7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e80:	7b7a      	ldrb	r2, [r7, #13]
 8005e82:	4908      	ldr	r1, [pc, #32]	@ (8005ea4 <UARTEx_SetNbDataToProcess+0x98>)
 8005e84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e86:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005e92:	bf00      	nop
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	08006850 	.word	0x08006850
 8005ea4:	08006858 	.word	0x08006858

08005ea8 <std>:
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	b510      	push	{r4, lr}
 8005eac:	4604      	mov	r4, r0
 8005eae:	e9c0 3300 	strd	r3, r3, [r0]
 8005eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005eb6:	6083      	str	r3, [r0, #8]
 8005eb8:	8181      	strh	r1, [r0, #12]
 8005eba:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ebc:	81c2      	strh	r2, [r0, #14]
 8005ebe:	6183      	str	r3, [r0, #24]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	2208      	movs	r2, #8
 8005ec4:	305c      	adds	r0, #92	@ 0x5c
 8005ec6:	f000 f9e7 	bl	8006298 <memset>
 8005eca:	4b0d      	ldr	r3, [pc, #52]	@ (8005f00 <std+0x58>)
 8005ecc:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ece:	4b0d      	ldr	r3, [pc, #52]	@ (8005f04 <std+0x5c>)
 8005ed0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f08 <std+0x60>)
 8005ed4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8005f0c <std+0x64>)
 8005ed8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005eda:	4b0d      	ldr	r3, [pc, #52]	@ (8005f10 <std+0x68>)
 8005edc:	6224      	str	r4, [r4, #32]
 8005ede:	429c      	cmp	r4, r3
 8005ee0:	d006      	beq.n	8005ef0 <std+0x48>
 8005ee2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ee6:	4294      	cmp	r4, r2
 8005ee8:	d002      	beq.n	8005ef0 <std+0x48>
 8005eea:	33d0      	adds	r3, #208	@ 0xd0
 8005eec:	429c      	cmp	r4, r3
 8005eee:	d105      	bne.n	8005efc <std+0x54>
 8005ef0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ef8:	f000 ba46 	b.w	8006388 <__retarget_lock_init_recursive>
 8005efc:	bd10      	pop	{r4, pc}
 8005efe:	bf00      	nop
 8005f00:	080060e9 	.word	0x080060e9
 8005f04:	0800610b 	.word	0x0800610b
 8005f08:	08006143 	.word	0x08006143
 8005f0c:	08006167 	.word	0x08006167
 8005f10:	200003f0 	.word	0x200003f0

08005f14 <stdio_exit_handler>:
 8005f14:	4a02      	ldr	r2, [pc, #8]	@ (8005f20 <stdio_exit_handler+0xc>)
 8005f16:	4903      	ldr	r1, [pc, #12]	@ (8005f24 <stdio_exit_handler+0x10>)
 8005f18:	4803      	ldr	r0, [pc, #12]	@ (8005f28 <stdio_exit_handler+0x14>)
 8005f1a:	f000 b869 	b.w	8005ff0 <_fwalk_sglue>
 8005f1e:	bf00      	nop
 8005f20:	2000000c 	.word	0x2000000c
 8005f24:	08006689 	.word	0x08006689
 8005f28:	2000001c 	.word	0x2000001c

08005f2c <cleanup_stdio>:
 8005f2c:	6841      	ldr	r1, [r0, #4]
 8005f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005f60 <cleanup_stdio+0x34>)
 8005f30:	4299      	cmp	r1, r3
 8005f32:	b510      	push	{r4, lr}
 8005f34:	4604      	mov	r4, r0
 8005f36:	d001      	beq.n	8005f3c <cleanup_stdio+0x10>
 8005f38:	f000 fba6 	bl	8006688 <_fflush_r>
 8005f3c:	68a1      	ldr	r1, [r4, #8]
 8005f3e:	4b09      	ldr	r3, [pc, #36]	@ (8005f64 <cleanup_stdio+0x38>)
 8005f40:	4299      	cmp	r1, r3
 8005f42:	d002      	beq.n	8005f4a <cleanup_stdio+0x1e>
 8005f44:	4620      	mov	r0, r4
 8005f46:	f000 fb9f 	bl	8006688 <_fflush_r>
 8005f4a:	68e1      	ldr	r1, [r4, #12]
 8005f4c:	4b06      	ldr	r3, [pc, #24]	@ (8005f68 <cleanup_stdio+0x3c>)
 8005f4e:	4299      	cmp	r1, r3
 8005f50:	d004      	beq.n	8005f5c <cleanup_stdio+0x30>
 8005f52:	4620      	mov	r0, r4
 8005f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f58:	f000 bb96 	b.w	8006688 <_fflush_r>
 8005f5c:	bd10      	pop	{r4, pc}
 8005f5e:	bf00      	nop
 8005f60:	200003f0 	.word	0x200003f0
 8005f64:	20000458 	.word	0x20000458
 8005f68:	200004c0 	.word	0x200004c0

08005f6c <global_stdio_init.part.0>:
 8005f6c:	b510      	push	{r4, lr}
 8005f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f9c <global_stdio_init.part.0+0x30>)
 8005f70:	4c0b      	ldr	r4, [pc, #44]	@ (8005fa0 <global_stdio_init.part.0+0x34>)
 8005f72:	4a0c      	ldr	r2, [pc, #48]	@ (8005fa4 <global_stdio_init.part.0+0x38>)
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	4620      	mov	r0, r4
 8005f78:	2200      	movs	r2, #0
 8005f7a:	2104      	movs	r1, #4
 8005f7c:	f7ff ff94 	bl	8005ea8 <std>
 8005f80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f84:	2201      	movs	r2, #1
 8005f86:	2109      	movs	r1, #9
 8005f88:	f7ff ff8e 	bl	8005ea8 <std>
 8005f8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f90:	2202      	movs	r2, #2
 8005f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f96:	2112      	movs	r1, #18
 8005f98:	f7ff bf86 	b.w	8005ea8 <std>
 8005f9c:	20000528 	.word	0x20000528
 8005fa0:	200003f0 	.word	0x200003f0
 8005fa4:	08005f15 	.word	0x08005f15

08005fa8 <__sfp_lock_acquire>:
 8005fa8:	4801      	ldr	r0, [pc, #4]	@ (8005fb0 <__sfp_lock_acquire+0x8>)
 8005faa:	f000 b9ee 	b.w	800638a <__retarget_lock_acquire_recursive>
 8005fae:	bf00      	nop
 8005fb0:	20000531 	.word	0x20000531

08005fb4 <__sfp_lock_release>:
 8005fb4:	4801      	ldr	r0, [pc, #4]	@ (8005fbc <__sfp_lock_release+0x8>)
 8005fb6:	f000 b9e9 	b.w	800638c <__retarget_lock_release_recursive>
 8005fba:	bf00      	nop
 8005fbc:	20000531 	.word	0x20000531

08005fc0 <__sinit>:
 8005fc0:	b510      	push	{r4, lr}
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	f7ff fff0 	bl	8005fa8 <__sfp_lock_acquire>
 8005fc8:	6a23      	ldr	r3, [r4, #32]
 8005fca:	b11b      	cbz	r3, 8005fd4 <__sinit+0x14>
 8005fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fd0:	f7ff bff0 	b.w	8005fb4 <__sfp_lock_release>
 8005fd4:	4b04      	ldr	r3, [pc, #16]	@ (8005fe8 <__sinit+0x28>)
 8005fd6:	6223      	str	r3, [r4, #32]
 8005fd8:	4b04      	ldr	r3, [pc, #16]	@ (8005fec <__sinit+0x2c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1f5      	bne.n	8005fcc <__sinit+0xc>
 8005fe0:	f7ff ffc4 	bl	8005f6c <global_stdio_init.part.0>
 8005fe4:	e7f2      	b.n	8005fcc <__sinit+0xc>
 8005fe6:	bf00      	nop
 8005fe8:	08005f2d 	.word	0x08005f2d
 8005fec:	20000528 	.word	0x20000528

08005ff0 <_fwalk_sglue>:
 8005ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ff4:	4607      	mov	r7, r0
 8005ff6:	4688      	mov	r8, r1
 8005ff8:	4614      	mov	r4, r2
 8005ffa:	2600      	movs	r6, #0
 8005ffc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006000:	f1b9 0901 	subs.w	r9, r9, #1
 8006004:	d505      	bpl.n	8006012 <_fwalk_sglue+0x22>
 8006006:	6824      	ldr	r4, [r4, #0]
 8006008:	2c00      	cmp	r4, #0
 800600a:	d1f7      	bne.n	8005ffc <_fwalk_sglue+0xc>
 800600c:	4630      	mov	r0, r6
 800600e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006012:	89ab      	ldrh	r3, [r5, #12]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d907      	bls.n	8006028 <_fwalk_sglue+0x38>
 8006018:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800601c:	3301      	adds	r3, #1
 800601e:	d003      	beq.n	8006028 <_fwalk_sglue+0x38>
 8006020:	4629      	mov	r1, r5
 8006022:	4638      	mov	r0, r7
 8006024:	47c0      	blx	r8
 8006026:	4306      	orrs	r6, r0
 8006028:	3568      	adds	r5, #104	@ 0x68
 800602a:	e7e9      	b.n	8006000 <_fwalk_sglue+0x10>

0800602c <_puts_r>:
 800602c:	6a03      	ldr	r3, [r0, #32]
 800602e:	b570      	push	{r4, r5, r6, lr}
 8006030:	6884      	ldr	r4, [r0, #8]
 8006032:	4605      	mov	r5, r0
 8006034:	460e      	mov	r6, r1
 8006036:	b90b      	cbnz	r3, 800603c <_puts_r+0x10>
 8006038:	f7ff ffc2 	bl	8005fc0 <__sinit>
 800603c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800603e:	07db      	lsls	r3, r3, #31
 8006040:	d405      	bmi.n	800604e <_puts_r+0x22>
 8006042:	89a3      	ldrh	r3, [r4, #12]
 8006044:	0598      	lsls	r0, r3, #22
 8006046:	d402      	bmi.n	800604e <_puts_r+0x22>
 8006048:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800604a:	f000 f99e 	bl	800638a <__retarget_lock_acquire_recursive>
 800604e:	89a3      	ldrh	r3, [r4, #12]
 8006050:	0719      	lsls	r1, r3, #28
 8006052:	d502      	bpl.n	800605a <_puts_r+0x2e>
 8006054:	6923      	ldr	r3, [r4, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d135      	bne.n	80060c6 <_puts_r+0x9a>
 800605a:	4621      	mov	r1, r4
 800605c:	4628      	mov	r0, r5
 800605e:	f000 f8c5 	bl	80061ec <__swsetup_r>
 8006062:	b380      	cbz	r0, 80060c6 <_puts_r+0x9a>
 8006064:	f04f 35ff 	mov.w	r5, #4294967295
 8006068:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800606a:	07da      	lsls	r2, r3, #31
 800606c:	d405      	bmi.n	800607a <_puts_r+0x4e>
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	059b      	lsls	r3, r3, #22
 8006072:	d402      	bmi.n	800607a <_puts_r+0x4e>
 8006074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006076:	f000 f989 	bl	800638c <__retarget_lock_release_recursive>
 800607a:	4628      	mov	r0, r5
 800607c:	bd70      	pop	{r4, r5, r6, pc}
 800607e:	2b00      	cmp	r3, #0
 8006080:	da04      	bge.n	800608c <_puts_r+0x60>
 8006082:	69a2      	ldr	r2, [r4, #24]
 8006084:	429a      	cmp	r2, r3
 8006086:	dc17      	bgt.n	80060b8 <_puts_r+0x8c>
 8006088:	290a      	cmp	r1, #10
 800608a:	d015      	beq.n	80060b8 <_puts_r+0x8c>
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	6022      	str	r2, [r4, #0]
 8006092:	7019      	strb	r1, [r3, #0]
 8006094:	68a3      	ldr	r3, [r4, #8]
 8006096:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800609a:	3b01      	subs	r3, #1
 800609c:	60a3      	str	r3, [r4, #8]
 800609e:	2900      	cmp	r1, #0
 80060a0:	d1ed      	bne.n	800607e <_puts_r+0x52>
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	da11      	bge.n	80060ca <_puts_r+0x9e>
 80060a6:	4622      	mov	r2, r4
 80060a8:	210a      	movs	r1, #10
 80060aa:	4628      	mov	r0, r5
 80060ac:	f000 f85f 	bl	800616e <__swbuf_r>
 80060b0:	3001      	adds	r0, #1
 80060b2:	d0d7      	beq.n	8006064 <_puts_r+0x38>
 80060b4:	250a      	movs	r5, #10
 80060b6:	e7d7      	b.n	8006068 <_puts_r+0x3c>
 80060b8:	4622      	mov	r2, r4
 80060ba:	4628      	mov	r0, r5
 80060bc:	f000 f857 	bl	800616e <__swbuf_r>
 80060c0:	3001      	adds	r0, #1
 80060c2:	d1e7      	bne.n	8006094 <_puts_r+0x68>
 80060c4:	e7ce      	b.n	8006064 <_puts_r+0x38>
 80060c6:	3e01      	subs	r6, #1
 80060c8:	e7e4      	b.n	8006094 <_puts_r+0x68>
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	6022      	str	r2, [r4, #0]
 80060d0:	220a      	movs	r2, #10
 80060d2:	701a      	strb	r2, [r3, #0]
 80060d4:	e7ee      	b.n	80060b4 <_puts_r+0x88>
	...

080060d8 <puts>:
 80060d8:	4b02      	ldr	r3, [pc, #8]	@ (80060e4 <puts+0xc>)
 80060da:	4601      	mov	r1, r0
 80060dc:	6818      	ldr	r0, [r3, #0]
 80060de:	f7ff bfa5 	b.w	800602c <_puts_r>
 80060e2:	bf00      	nop
 80060e4:	20000018 	.word	0x20000018

080060e8 <__sread>:
 80060e8:	b510      	push	{r4, lr}
 80060ea:	460c      	mov	r4, r1
 80060ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f0:	f000 f8fc 	bl	80062ec <_read_r>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	bfab      	itete	ge
 80060f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80060fa:	89a3      	ldrhlt	r3, [r4, #12]
 80060fc:	181b      	addge	r3, r3, r0
 80060fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006102:	bfac      	ite	ge
 8006104:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006106:	81a3      	strhlt	r3, [r4, #12]
 8006108:	bd10      	pop	{r4, pc}

0800610a <__swrite>:
 800610a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800610e:	461f      	mov	r7, r3
 8006110:	898b      	ldrh	r3, [r1, #12]
 8006112:	05db      	lsls	r3, r3, #23
 8006114:	4605      	mov	r5, r0
 8006116:	460c      	mov	r4, r1
 8006118:	4616      	mov	r6, r2
 800611a:	d505      	bpl.n	8006128 <__swrite+0x1e>
 800611c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006120:	2302      	movs	r3, #2
 8006122:	2200      	movs	r2, #0
 8006124:	f000 f8d0 	bl	80062c8 <_lseek_r>
 8006128:	89a3      	ldrh	r3, [r4, #12]
 800612a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800612e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006132:	81a3      	strh	r3, [r4, #12]
 8006134:	4632      	mov	r2, r6
 8006136:	463b      	mov	r3, r7
 8006138:	4628      	mov	r0, r5
 800613a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800613e:	f000 b8e7 	b.w	8006310 <_write_r>

08006142 <__sseek>:
 8006142:	b510      	push	{r4, lr}
 8006144:	460c      	mov	r4, r1
 8006146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800614a:	f000 f8bd 	bl	80062c8 <_lseek_r>
 800614e:	1c43      	adds	r3, r0, #1
 8006150:	89a3      	ldrh	r3, [r4, #12]
 8006152:	bf15      	itete	ne
 8006154:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006156:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800615a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800615e:	81a3      	strheq	r3, [r4, #12]
 8006160:	bf18      	it	ne
 8006162:	81a3      	strhne	r3, [r4, #12]
 8006164:	bd10      	pop	{r4, pc}

08006166 <__sclose>:
 8006166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800616a:	f000 b89d 	b.w	80062a8 <_close_r>

0800616e <__swbuf_r>:
 800616e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006170:	460e      	mov	r6, r1
 8006172:	4614      	mov	r4, r2
 8006174:	4605      	mov	r5, r0
 8006176:	b118      	cbz	r0, 8006180 <__swbuf_r+0x12>
 8006178:	6a03      	ldr	r3, [r0, #32]
 800617a:	b90b      	cbnz	r3, 8006180 <__swbuf_r+0x12>
 800617c:	f7ff ff20 	bl	8005fc0 <__sinit>
 8006180:	69a3      	ldr	r3, [r4, #24]
 8006182:	60a3      	str	r3, [r4, #8]
 8006184:	89a3      	ldrh	r3, [r4, #12]
 8006186:	071a      	lsls	r2, r3, #28
 8006188:	d501      	bpl.n	800618e <__swbuf_r+0x20>
 800618a:	6923      	ldr	r3, [r4, #16]
 800618c:	b943      	cbnz	r3, 80061a0 <__swbuf_r+0x32>
 800618e:	4621      	mov	r1, r4
 8006190:	4628      	mov	r0, r5
 8006192:	f000 f82b 	bl	80061ec <__swsetup_r>
 8006196:	b118      	cbz	r0, 80061a0 <__swbuf_r+0x32>
 8006198:	f04f 37ff 	mov.w	r7, #4294967295
 800619c:	4638      	mov	r0, r7
 800619e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	6922      	ldr	r2, [r4, #16]
 80061a4:	1a98      	subs	r0, r3, r2
 80061a6:	6963      	ldr	r3, [r4, #20]
 80061a8:	b2f6      	uxtb	r6, r6
 80061aa:	4283      	cmp	r3, r0
 80061ac:	4637      	mov	r7, r6
 80061ae:	dc05      	bgt.n	80061bc <__swbuf_r+0x4e>
 80061b0:	4621      	mov	r1, r4
 80061b2:	4628      	mov	r0, r5
 80061b4:	f000 fa68 	bl	8006688 <_fflush_r>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d1ed      	bne.n	8006198 <__swbuf_r+0x2a>
 80061bc:	68a3      	ldr	r3, [r4, #8]
 80061be:	3b01      	subs	r3, #1
 80061c0:	60a3      	str	r3, [r4, #8]
 80061c2:	6823      	ldr	r3, [r4, #0]
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	6022      	str	r2, [r4, #0]
 80061c8:	701e      	strb	r6, [r3, #0]
 80061ca:	6962      	ldr	r2, [r4, #20]
 80061cc:	1c43      	adds	r3, r0, #1
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d004      	beq.n	80061dc <__swbuf_r+0x6e>
 80061d2:	89a3      	ldrh	r3, [r4, #12]
 80061d4:	07db      	lsls	r3, r3, #31
 80061d6:	d5e1      	bpl.n	800619c <__swbuf_r+0x2e>
 80061d8:	2e0a      	cmp	r6, #10
 80061da:	d1df      	bne.n	800619c <__swbuf_r+0x2e>
 80061dc:	4621      	mov	r1, r4
 80061de:	4628      	mov	r0, r5
 80061e0:	f000 fa52 	bl	8006688 <_fflush_r>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	d0d9      	beq.n	800619c <__swbuf_r+0x2e>
 80061e8:	e7d6      	b.n	8006198 <__swbuf_r+0x2a>
	...

080061ec <__swsetup_r>:
 80061ec:	b538      	push	{r3, r4, r5, lr}
 80061ee:	4b29      	ldr	r3, [pc, #164]	@ (8006294 <__swsetup_r+0xa8>)
 80061f0:	4605      	mov	r5, r0
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	460c      	mov	r4, r1
 80061f6:	b118      	cbz	r0, 8006200 <__swsetup_r+0x14>
 80061f8:	6a03      	ldr	r3, [r0, #32]
 80061fa:	b90b      	cbnz	r3, 8006200 <__swsetup_r+0x14>
 80061fc:	f7ff fee0 	bl	8005fc0 <__sinit>
 8006200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006204:	0719      	lsls	r1, r3, #28
 8006206:	d422      	bmi.n	800624e <__swsetup_r+0x62>
 8006208:	06da      	lsls	r2, r3, #27
 800620a:	d407      	bmi.n	800621c <__swsetup_r+0x30>
 800620c:	2209      	movs	r2, #9
 800620e:	602a      	str	r2, [r5, #0]
 8006210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006214:	81a3      	strh	r3, [r4, #12]
 8006216:	f04f 30ff 	mov.w	r0, #4294967295
 800621a:	e033      	b.n	8006284 <__swsetup_r+0x98>
 800621c:	0758      	lsls	r0, r3, #29
 800621e:	d512      	bpl.n	8006246 <__swsetup_r+0x5a>
 8006220:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006222:	b141      	cbz	r1, 8006236 <__swsetup_r+0x4a>
 8006224:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006228:	4299      	cmp	r1, r3
 800622a:	d002      	beq.n	8006232 <__swsetup_r+0x46>
 800622c:	4628      	mov	r0, r5
 800622e:	f000 f8af 	bl	8006390 <_free_r>
 8006232:	2300      	movs	r3, #0
 8006234:	6363      	str	r3, [r4, #52]	@ 0x34
 8006236:	89a3      	ldrh	r3, [r4, #12]
 8006238:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800623c:	81a3      	strh	r3, [r4, #12]
 800623e:	2300      	movs	r3, #0
 8006240:	6063      	str	r3, [r4, #4]
 8006242:	6923      	ldr	r3, [r4, #16]
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	89a3      	ldrh	r3, [r4, #12]
 8006248:	f043 0308 	orr.w	r3, r3, #8
 800624c:	81a3      	strh	r3, [r4, #12]
 800624e:	6923      	ldr	r3, [r4, #16]
 8006250:	b94b      	cbnz	r3, 8006266 <__swsetup_r+0x7a>
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800625c:	d003      	beq.n	8006266 <__swsetup_r+0x7a>
 800625e:	4621      	mov	r1, r4
 8006260:	4628      	mov	r0, r5
 8006262:	f000 fa5f 	bl	8006724 <__smakebuf_r>
 8006266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800626a:	f013 0201 	ands.w	r2, r3, #1
 800626e:	d00a      	beq.n	8006286 <__swsetup_r+0x9a>
 8006270:	2200      	movs	r2, #0
 8006272:	60a2      	str	r2, [r4, #8]
 8006274:	6962      	ldr	r2, [r4, #20]
 8006276:	4252      	negs	r2, r2
 8006278:	61a2      	str	r2, [r4, #24]
 800627a:	6922      	ldr	r2, [r4, #16]
 800627c:	b942      	cbnz	r2, 8006290 <__swsetup_r+0xa4>
 800627e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006282:	d1c5      	bne.n	8006210 <__swsetup_r+0x24>
 8006284:	bd38      	pop	{r3, r4, r5, pc}
 8006286:	0799      	lsls	r1, r3, #30
 8006288:	bf58      	it	pl
 800628a:	6962      	ldrpl	r2, [r4, #20]
 800628c:	60a2      	str	r2, [r4, #8]
 800628e:	e7f4      	b.n	800627a <__swsetup_r+0x8e>
 8006290:	2000      	movs	r0, #0
 8006292:	e7f7      	b.n	8006284 <__swsetup_r+0x98>
 8006294:	20000018 	.word	0x20000018

08006298 <memset>:
 8006298:	4402      	add	r2, r0
 800629a:	4603      	mov	r3, r0
 800629c:	4293      	cmp	r3, r2
 800629e:	d100      	bne.n	80062a2 <memset+0xa>
 80062a0:	4770      	bx	lr
 80062a2:	f803 1b01 	strb.w	r1, [r3], #1
 80062a6:	e7f9      	b.n	800629c <memset+0x4>

080062a8 <_close_r>:
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	4d06      	ldr	r5, [pc, #24]	@ (80062c4 <_close_r+0x1c>)
 80062ac:	2300      	movs	r3, #0
 80062ae:	4604      	mov	r4, r0
 80062b0:	4608      	mov	r0, r1
 80062b2:	602b      	str	r3, [r5, #0]
 80062b4:	f7fa fcd7 	bl	8000c66 <_close>
 80062b8:	1c43      	adds	r3, r0, #1
 80062ba:	d102      	bne.n	80062c2 <_close_r+0x1a>
 80062bc:	682b      	ldr	r3, [r5, #0]
 80062be:	b103      	cbz	r3, 80062c2 <_close_r+0x1a>
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	bd38      	pop	{r3, r4, r5, pc}
 80062c4:	2000052c 	.word	0x2000052c

080062c8 <_lseek_r>:
 80062c8:	b538      	push	{r3, r4, r5, lr}
 80062ca:	4d07      	ldr	r5, [pc, #28]	@ (80062e8 <_lseek_r+0x20>)
 80062cc:	4604      	mov	r4, r0
 80062ce:	4608      	mov	r0, r1
 80062d0:	4611      	mov	r1, r2
 80062d2:	2200      	movs	r2, #0
 80062d4:	602a      	str	r2, [r5, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	f7fa fcec 	bl	8000cb4 <_lseek>
 80062dc:	1c43      	adds	r3, r0, #1
 80062de:	d102      	bne.n	80062e6 <_lseek_r+0x1e>
 80062e0:	682b      	ldr	r3, [r5, #0]
 80062e2:	b103      	cbz	r3, 80062e6 <_lseek_r+0x1e>
 80062e4:	6023      	str	r3, [r4, #0]
 80062e6:	bd38      	pop	{r3, r4, r5, pc}
 80062e8:	2000052c 	.word	0x2000052c

080062ec <_read_r>:
 80062ec:	b538      	push	{r3, r4, r5, lr}
 80062ee:	4d07      	ldr	r5, [pc, #28]	@ (800630c <_read_r+0x20>)
 80062f0:	4604      	mov	r4, r0
 80062f2:	4608      	mov	r0, r1
 80062f4:	4611      	mov	r1, r2
 80062f6:	2200      	movs	r2, #0
 80062f8:	602a      	str	r2, [r5, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	f7fa fc7a 	bl	8000bf4 <_read>
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	d102      	bne.n	800630a <_read_r+0x1e>
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	b103      	cbz	r3, 800630a <_read_r+0x1e>
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	bd38      	pop	{r3, r4, r5, pc}
 800630c:	2000052c 	.word	0x2000052c

08006310 <_write_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	4d07      	ldr	r5, [pc, #28]	@ (8006330 <_write_r+0x20>)
 8006314:	4604      	mov	r4, r0
 8006316:	4608      	mov	r0, r1
 8006318:	4611      	mov	r1, r2
 800631a:	2200      	movs	r2, #0
 800631c:	602a      	str	r2, [r5, #0]
 800631e:	461a      	mov	r2, r3
 8006320:	f7fa fc85 	bl	8000c2e <_write>
 8006324:	1c43      	adds	r3, r0, #1
 8006326:	d102      	bne.n	800632e <_write_r+0x1e>
 8006328:	682b      	ldr	r3, [r5, #0]
 800632a:	b103      	cbz	r3, 800632e <_write_r+0x1e>
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	bd38      	pop	{r3, r4, r5, pc}
 8006330:	2000052c 	.word	0x2000052c

08006334 <__errno>:
 8006334:	4b01      	ldr	r3, [pc, #4]	@ (800633c <__errno+0x8>)
 8006336:	6818      	ldr	r0, [r3, #0]
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	20000018 	.word	0x20000018

08006340 <__libc_init_array>:
 8006340:	b570      	push	{r4, r5, r6, lr}
 8006342:	4d0d      	ldr	r5, [pc, #52]	@ (8006378 <__libc_init_array+0x38>)
 8006344:	4c0d      	ldr	r4, [pc, #52]	@ (800637c <__libc_init_array+0x3c>)
 8006346:	1b64      	subs	r4, r4, r5
 8006348:	10a4      	asrs	r4, r4, #2
 800634a:	2600      	movs	r6, #0
 800634c:	42a6      	cmp	r6, r4
 800634e:	d109      	bne.n	8006364 <__libc_init_array+0x24>
 8006350:	4d0b      	ldr	r5, [pc, #44]	@ (8006380 <__libc_init_array+0x40>)
 8006352:	4c0c      	ldr	r4, [pc, #48]	@ (8006384 <__libc_init_array+0x44>)
 8006354:	f000 fa54 	bl	8006800 <_init>
 8006358:	1b64      	subs	r4, r4, r5
 800635a:	10a4      	asrs	r4, r4, #2
 800635c:	2600      	movs	r6, #0
 800635e:	42a6      	cmp	r6, r4
 8006360:	d105      	bne.n	800636e <__libc_init_array+0x2e>
 8006362:	bd70      	pop	{r4, r5, r6, pc}
 8006364:	f855 3b04 	ldr.w	r3, [r5], #4
 8006368:	4798      	blx	r3
 800636a:	3601      	adds	r6, #1
 800636c:	e7ee      	b.n	800634c <__libc_init_array+0xc>
 800636e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006372:	4798      	blx	r3
 8006374:	3601      	adds	r6, #1
 8006376:	e7f2      	b.n	800635e <__libc_init_array+0x1e>
 8006378:	08006868 	.word	0x08006868
 800637c:	08006868 	.word	0x08006868
 8006380:	08006868 	.word	0x08006868
 8006384:	0800686c 	.word	0x0800686c

08006388 <__retarget_lock_init_recursive>:
 8006388:	4770      	bx	lr

0800638a <__retarget_lock_acquire_recursive>:
 800638a:	4770      	bx	lr

0800638c <__retarget_lock_release_recursive>:
 800638c:	4770      	bx	lr
	...

08006390 <_free_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	4605      	mov	r5, r0
 8006394:	2900      	cmp	r1, #0
 8006396:	d041      	beq.n	800641c <_free_r+0x8c>
 8006398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800639c:	1f0c      	subs	r4, r1, #4
 800639e:	2b00      	cmp	r3, #0
 80063a0:	bfb8      	it	lt
 80063a2:	18e4      	addlt	r4, r4, r3
 80063a4:	f000 f8e0 	bl	8006568 <__malloc_lock>
 80063a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006420 <_free_r+0x90>)
 80063aa:	6813      	ldr	r3, [r2, #0]
 80063ac:	b933      	cbnz	r3, 80063bc <_free_r+0x2c>
 80063ae:	6063      	str	r3, [r4, #4]
 80063b0:	6014      	str	r4, [r2, #0]
 80063b2:	4628      	mov	r0, r5
 80063b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063b8:	f000 b8dc 	b.w	8006574 <__malloc_unlock>
 80063bc:	42a3      	cmp	r3, r4
 80063be:	d908      	bls.n	80063d2 <_free_r+0x42>
 80063c0:	6820      	ldr	r0, [r4, #0]
 80063c2:	1821      	adds	r1, r4, r0
 80063c4:	428b      	cmp	r3, r1
 80063c6:	bf01      	itttt	eq
 80063c8:	6819      	ldreq	r1, [r3, #0]
 80063ca:	685b      	ldreq	r3, [r3, #4]
 80063cc:	1809      	addeq	r1, r1, r0
 80063ce:	6021      	streq	r1, [r4, #0]
 80063d0:	e7ed      	b.n	80063ae <_free_r+0x1e>
 80063d2:	461a      	mov	r2, r3
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	b10b      	cbz	r3, 80063dc <_free_r+0x4c>
 80063d8:	42a3      	cmp	r3, r4
 80063da:	d9fa      	bls.n	80063d2 <_free_r+0x42>
 80063dc:	6811      	ldr	r1, [r2, #0]
 80063de:	1850      	adds	r0, r2, r1
 80063e0:	42a0      	cmp	r0, r4
 80063e2:	d10b      	bne.n	80063fc <_free_r+0x6c>
 80063e4:	6820      	ldr	r0, [r4, #0]
 80063e6:	4401      	add	r1, r0
 80063e8:	1850      	adds	r0, r2, r1
 80063ea:	4283      	cmp	r3, r0
 80063ec:	6011      	str	r1, [r2, #0]
 80063ee:	d1e0      	bne.n	80063b2 <_free_r+0x22>
 80063f0:	6818      	ldr	r0, [r3, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	6053      	str	r3, [r2, #4]
 80063f6:	4408      	add	r0, r1
 80063f8:	6010      	str	r0, [r2, #0]
 80063fa:	e7da      	b.n	80063b2 <_free_r+0x22>
 80063fc:	d902      	bls.n	8006404 <_free_r+0x74>
 80063fe:	230c      	movs	r3, #12
 8006400:	602b      	str	r3, [r5, #0]
 8006402:	e7d6      	b.n	80063b2 <_free_r+0x22>
 8006404:	6820      	ldr	r0, [r4, #0]
 8006406:	1821      	adds	r1, r4, r0
 8006408:	428b      	cmp	r3, r1
 800640a:	bf04      	itt	eq
 800640c:	6819      	ldreq	r1, [r3, #0]
 800640e:	685b      	ldreq	r3, [r3, #4]
 8006410:	6063      	str	r3, [r4, #4]
 8006412:	bf04      	itt	eq
 8006414:	1809      	addeq	r1, r1, r0
 8006416:	6021      	streq	r1, [r4, #0]
 8006418:	6054      	str	r4, [r2, #4]
 800641a:	e7ca      	b.n	80063b2 <_free_r+0x22>
 800641c:	bd38      	pop	{r3, r4, r5, pc}
 800641e:	bf00      	nop
 8006420:	20000538 	.word	0x20000538

08006424 <sbrk_aligned>:
 8006424:	b570      	push	{r4, r5, r6, lr}
 8006426:	4e0f      	ldr	r6, [pc, #60]	@ (8006464 <sbrk_aligned+0x40>)
 8006428:	460c      	mov	r4, r1
 800642a:	6831      	ldr	r1, [r6, #0]
 800642c:	4605      	mov	r5, r0
 800642e:	b911      	cbnz	r1, 8006436 <sbrk_aligned+0x12>
 8006430:	f000 f9d6 	bl	80067e0 <_sbrk_r>
 8006434:	6030      	str	r0, [r6, #0]
 8006436:	4621      	mov	r1, r4
 8006438:	4628      	mov	r0, r5
 800643a:	f000 f9d1 	bl	80067e0 <_sbrk_r>
 800643e:	1c43      	adds	r3, r0, #1
 8006440:	d103      	bne.n	800644a <sbrk_aligned+0x26>
 8006442:	f04f 34ff 	mov.w	r4, #4294967295
 8006446:	4620      	mov	r0, r4
 8006448:	bd70      	pop	{r4, r5, r6, pc}
 800644a:	1cc4      	adds	r4, r0, #3
 800644c:	f024 0403 	bic.w	r4, r4, #3
 8006450:	42a0      	cmp	r0, r4
 8006452:	d0f8      	beq.n	8006446 <sbrk_aligned+0x22>
 8006454:	1a21      	subs	r1, r4, r0
 8006456:	4628      	mov	r0, r5
 8006458:	f000 f9c2 	bl	80067e0 <_sbrk_r>
 800645c:	3001      	adds	r0, #1
 800645e:	d1f2      	bne.n	8006446 <sbrk_aligned+0x22>
 8006460:	e7ef      	b.n	8006442 <sbrk_aligned+0x1e>
 8006462:	bf00      	nop
 8006464:	20000534 	.word	0x20000534

08006468 <_malloc_r>:
 8006468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800646c:	1ccd      	adds	r5, r1, #3
 800646e:	f025 0503 	bic.w	r5, r5, #3
 8006472:	3508      	adds	r5, #8
 8006474:	2d0c      	cmp	r5, #12
 8006476:	bf38      	it	cc
 8006478:	250c      	movcc	r5, #12
 800647a:	2d00      	cmp	r5, #0
 800647c:	4606      	mov	r6, r0
 800647e:	db01      	blt.n	8006484 <_malloc_r+0x1c>
 8006480:	42a9      	cmp	r1, r5
 8006482:	d904      	bls.n	800648e <_malloc_r+0x26>
 8006484:	230c      	movs	r3, #12
 8006486:	6033      	str	r3, [r6, #0]
 8006488:	2000      	movs	r0, #0
 800648a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800648e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006564 <_malloc_r+0xfc>
 8006492:	f000 f869 	bl	8006568 <__malloc_lock>
 8006496:	f8d8 3000 	ldr.w	r3, [r8]
 800649a:	461c      	mov	r4, r3
 800649c:	bb44      	cbnz	r4, 80064f0 <_malloc_r+0x88>
 800649e:	4629      	mov	r1, r5
 80064a0:	4630      	mov	r0, r6
 80064a2:	f7ff ffbf 	bl	8006424 <sbrk_aligned>
 80064a6:	1c43      	adds	r3, r0, #1
 80064a8:	4604      	mov	r4, r0
 80064aa:	d158      	bne.n	800655e <_malloc_r+0xf6>
 80064ac:	f8d8 4000 	ldr.w	r4, [r8]
 80064b0:	4627      	mov	r7, r4
 80064b2:	2f00      	cmp	r7, #0
 80064b4:	d143      	bne.n	800653e <_malloc_r+0xd6>
 80064b6:	2c00      	cmp	r4, #0
 80064b8:	d04b      	beq.n	8006552 <_malloc_r+0xea>
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	4639      	mov	r1, r7
 80064be:	4630      	mov	r0, r6
 80064c0:	eb04 0903 	add.w	r9, r4, r3
 80064c4:	f000 f98c 	bl	80067e0 <_sbrk_r>
 80064c8:	4581      	cmp	r9, r0
 80064ca:	d142      	bne.n	8006552 <_malloc_r+0xea>
 80064cc:	6821      	ldr	r1, [r4, #0]
 80064ce:	1a6d      	subs	r5, r5, r1
 80064d0:	4629      	mov	r1, r5
 80064d2:	4630      	mov	r0, r6
 80064d4:	f7ff ffa6 	bl	8006424 <sbrk_aligned>
 80064d8:	3001      	adds	r0, #1
 80064da:	d03a      	beq.n	8006552 <_malloc_r+0xea>
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	442b      	add	r3, r5
 80064e0:	6023      	str	r3, [r4, #0]
 80064e2:	f8d8 3000 	ldr.w	r3, [r8]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	bb62      	cbnz	r2, 8006544 <_malloc_r+0xdc>
 80064ea:	f8c8 7000 	str.w	r7, [r8]
 80064ee:	e00f      	b.n	8006510 <_malloc_r+0xa8>
 80064f0:	6822      	ldr	r2, [r4, #0]
 80064f2:	1b52      	subs	r2, r2, r5
 80064f4:	d420      	bmi.n	8006538 <_malloc_r+0xd0>
 80064f6:	2a0b      	cmp	r2, #11
 80064f8:	d917      	bls.n	800652a <_malloc_r+0xc2>
 80064fa:	1961      	adds	r1, r4, r5
 80064fc:	42a3      	cmp	r3, r4
 80064fe:	6025      	str	r5, [r4, #0]
 8006500:	bf18      	it	ne
 8006502:	6059      	strne	r1, [r3, #4]
 8006504:	6863      	ldr	r3, [r4, #4]
 8006506:	bf08      	it	eq
 8006508:	f8c8 1000 	streq.w	r1, [r8]
 800650c:	5162      	str	r2, [r4, r5]
 800650e:	604b      	str	r3, [r1, #4]
 8006510:	4630      	mov	r0, r6
 8006512:	f000 f82f 	bl	8006574 <__malloc_unlock>
 8006516:	f104 000b 	add.w	r0, r4, #11
 800651a:	1d23      	adds	r3, r4, #4
 800651c:	f020 0007 	bic.w	r0, r0, #7
 8006520:	1ac2      	subs	r2, r0, r3
 8006522:	bf1c      	itt	ne
 8006524:	1a1b      	subne	r3, r3, r0
 8006526:	50a3      	strne	r3, [r4, r2]
 8006528:	e7af      	b.n	800648a <_malloc_r+0x22>
 800652a:	6862      	ldr	r2, [r4, #4]
 800652c:	42a3      	cmp	r3, r4
 800652e:	bf0c      	ite	eq
 8006530:	f8c8 2000 	streq.w	r2, [r8]
 8006534:	605a      	strne	r2, [r3, #4]
 8006536:	e7eb      	b.n	8006510 <_malloc_r+0xa8>
 8006538:	4623      	mov	r3, r4
 800653a:	6864      	ldr	r4, [r4, #4]
 800653c:	e7ae      	b.n	800649c <_malloc_r+0x34>
 800653e:	463c      	mov	r4, r7
 8006540:	687f      	ldr	r7, [r7, #4]
 8006542:	e7b6      	b.n	80064b2 <_malloc_r+0x4a>
 8006544:	461a      	mov	r2, r3
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	42a3      	cmp	r3, r4
 800654a:	d1fb      	bne.n	8006544 <_malloc_r+0xdc>
 800654c:	2300      	movs	r3, #0
 800654e:	6053      	str	r3, [r2, #4]
 8006550:	e7de      	b.n	8006510 <_malloc_r+0xa8>
 8006552:	230c      	movs	r3, #12
 8006554:	6033      	str	r3, [r6, #0]
 8006556:	4630      	mov	r0, r6
 8006558:	f000 f80c 	bl	8006574 <__malloc_unlock>
 800655c:	e794      	b.n	8006488 <_malloc_r+0x20>
 800655e:	6005      	str	r5, [r0, #0]
 8006560:	e7d6      	b.n	8006510 <_malloc_r+0xa8>
 8006562:	bf00      	nop
 8006564:	20000538 	.word	0x20000538

08006568 <__malloc_lock>:
 8006568:	4801      	ldr	r0, [pc, #4]	@ (8006570 <__malloc_lock+0x8>)
 800656a:	f7ff bf0e 	b.w	800638a <__retarget_lock_acquire_recursive>
 800656e:	bf00      	nop
 8006570:	20000530 	.word	0x20000530

08006574 <__malloc_unlock>:
 8006574:	4801      	ldr	r0, [pc, #4]	@ (800657c <__malloc_unlock+0x8>)
 8006576:	f7ff bf09 	b.w	800638c <__retarget_lock_release_recursive>
 800657a:	bf00      	nop
 800657c:	20000530 	.word	0x20000530

08006580 <__sflush_r>:
 8006580:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006588:	0716      	lsls	r6, r2, #28
 800658a:	4605      	mov	r5, r0
 800658c:	460c      	mov	r4, r1
 800658e:	d454      	bmi.n	800663a <__sflush_r+0xba>
 8006590:	684b      	ldr	r3, [r1, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	dc02      	bgt.n	800659c <__sflush_r+0x1c>
 8006596:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006598:	2b00      	cmp	r3, #0
 800659a:	dd48      	ble.n	800662e <__sflush_r+0xae>
 800659c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800659e:	2e00      	cmp	r6, #0
 80065a0:	d045      	beq.n	800662e <__sflush_r+0xae>
 80065a2:	2300      	movs	r3, #0
 80065a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80065a8:	682f      	ldr	r7, [r5, #0]
 80065aa:	6a21      	ldr	r1, [r4, #32]
 80065ac:	602b      	str	r3, [r5, #0]
 80065ae:	d030      	beq.n	8006612 <__sflush_r+0x92>
 80065b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80065b2:	89a3      	ldrh	r3, [r4, #12]
 80065b4:	0759      	lsls	r1, r3, #29
 80065b6:	d505      	bpl.n	80065c4 <__sflush_r+0x44>
 80065b8:	6863      	ldr	r3, [r4, #4]
 80065ba:	1ad2      	subs	r2, r2, r3
 80065bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80065be:	b10b      	cbz	r3, 80065c4 <__sflush_r+0x44>
 80065c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80065c2:	1ad2      	subs	r2, r2, r3
 80065c4:	2300      	movs	r3, #0
 80065c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80065c8:	6a21      	ldr	r1, [r4, #32]
 80065ca:	4628      	mov	r0, r5
 80065cc:	47b0      	blx	r6
 80065ce:	1c43      	adds	r3, r0, #1
 80065d0:	89a3      	ldrh	r3, [r4, #12]
 80065d2:	d106      	bne.n	80065e2 <__sflush_r+0x62>
 80065d4:	6829      	ldr	r1, [r5, #0]
 80065d6:	291d      	cmp	r1, #29
 80065d8:	d82b      	bhi.n	8006632 <__sflush_r+0xb2>
 80065da:	4a2a      	ldr	r2, [pc, #168]	@ (8006684 <__sflush_r+0x104>)
 80065dc:	410a      	asrs	r2, r1
 80065de:	07d6      	lsls	r6, r2, #31
 80065e0:	d427      	bmi.n	8006632 <__sflush_r+0xb2>
 80065e2:	2200      	movs	r2, #0
 80065e4:	6062      	str	r2, [r4, #4]
 80065e6:	04d9      	lsls	r1, r3, #19
 80065e8:	6922      	ldr	r2, [r4, #16]
 80065ea:	6022      	str	r2, [r4, #0]
 80065ec:	d504      	bpl.n	80065f8 <__sflush_r+0x78>
 80065ee:	1c42      	adds	r2, r0, #1
 80065f0:	d101      	bne.n	80065f6 <__sflush_r+0x76>
 80065f2:	682b      	ldr	r3, [r5, #0]
 80065f4:	b903      	cbnz	r3, 80065f8 <__sflush_r+0x78>
 80065f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80065f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065fa:	602f      	str	r7, [r5, #0]
 80065fc:	b1b9      	cbz	r1, 800662e <__sflush_r+0xae>
 80065fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006602:	4299      	cmp	r1, r3
 8006604:	d002      	beq.n	800660c <__sflush_r+0x8c>
 8006606:	4628      	mov	r0, r5
 8006608:	f7ff fec2 	bl	8006390 <_free_r>
 800660c:	2300      	movs	r3, #0
 800660e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006610:	e00d      	b.n	800662e <__sflush_r+0xae>
 8006612:	2301      	movs	r3, #1
 8006614:	4628      	mov	r0, r5
 8006616:	47b0      	blx	r6
 8006618:	4602      	mov	r2, r0
 800661a:	1c50      	adds	r0, r2, #1
 800661c:	d1c9      	bne.n	80065b2 <__sflush_r+0x32>
 800661e:	682b      	ldr	r3, [r5, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0c6      	beq.n	80065b2 <__sflush_r+0x32>
 8006624:	2b1d      	cmp	r3, #29
 8006626:	d001      	beq.n	800662c <__sflush_r+0xac>
 8006628:	2b16      	cmp	r3, #22
 800662a:	d11e      	bne.n	800666a <__sflush_r+0xea>
 800662c:	602f      	str	r7, [r5, #0]
 800662e:	2000      	movs	r0, #0
 8006630:	e022      	b.n	8006678 <__sflush_r+0xf8>
 8006632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006636:	b21b      	sxth	r3, r3
 8006638:	e01b      	b.n	8006672 <__sflush_r+0xf2>
 800663a:	690f      	ldr	r7, [r1, #16]
 800663c:	2f00      	cmp	r7, #0
 800663e:	d0f6      	beq.n	800662e <__sflush_r+0xae>
 8006640:	0793      	lsls	r3, r2, #30
 8006642:	680e      	ldr	r6, [r1, #0]
 8006644:	bf08      	it	eq
 8006646:	694b      	ldreq	r3, [r1, #20]
 8006648:	600f      	str	r7, [r1, #0]
 800664a:	bf18      	it	ne
 800664c:	2300      	movne	r3, #0
 800664e:	eba6 0807 	sub.w	r8, r6, r7
 8006652:	608b      	str	r3, [r1, #8]
 8006654:	f1b8 0f00 	cmp.w	r8, #0
 8006658:	dde9      	ble.n	800662e <__sflush_r+0xae>
 800665a:	6a21      	ldr	r1, [r4, #32]
 800665c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800665e:	4643      	mov	r3, r8
 8006660:	463a      	mov	r2, r7
 8006662:	4628      	mov	r0, r5
 8006664:	47b0      	blx	r6
 8006666:	2800      	cmp	r0, #0
 8006668:	dc08      	bgt.n	800667c <__sflush_r+0xfc>
 800666a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800666e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006672:	81a3      	strh	r3, [r4, #12]
 8006674:	f04f 30ff 	mov.w	r0, #4294967295
 8006678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800667c:	4407      	add	r7, r0
 800667e:	eba8 0800 	sub.w	r8, r8, r0
 8006682:	e7e7      	b.n	8006654 <__sflush_r+0xd4>
 8006684:	dfbffffe 	.word	0xdfbffffe

08006688 <_fflush_r>:
 8006688:	b538      	push	{r3, r4, r5, lr}
 800668a:	690b      	ldr	r3, [r1, #16]
 800668c:	4605      	mov	r5, r0
 800668e:	460c      	mov	r4, r1
 8006690:	b913      	cbnz	r3, 8006698 <_fflush_r+0x10>
 8006692:	2500      	movs	r5, #0
 8006694:	4628      	mov	r0, r5
 8006696:	bd38      	pop	{r3, r4, r5, pc}
 8006698:	b118      	cbz	r0, 80066a2 <_fflush_r+0x1a>
 800669a:	6a03      	ldr	r3, [r0, #32]
 800669c:	b90b      	cbnz	r3, 80066a2 <_fflush_r+0x1a>
 800669e:	f7ff fc8f 	bl	8005fc0 <__sinit>
 80066a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d0f3      	beq.n	8006692 <_fflush_r+0xa>
 80066aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80066ac:	07d0      	lsls	r0, r2, #31
 80066ae:	d404      	bmi.n	80066ba <_fflush_r+0x32>
 80066b0:	0599      	lsls	r1, r3, #22
 80066b2:	d402      	bmi.n	80066ba <_fflush_r+0x32>
 80066b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066b6:	f7ff fe68 	bl	800638a <__retarget_lock_acquire_recursive>
 80066ba:	4628      	mov	r0, r5
 80066bc:	4621      	mov	r1, r4
 80066be:	f7ff ff5f 	bl	8006580 <__sflush_r>
 80066c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80066c4:	07da      	lsls	r2, r3, #31
 80066c6:	4605      	mov	r5, r0
 80066c8:	d4e4      	bmi.n	8006694 <_fflush_r+0xc>
 80066ca:	89a3      	ldrh	r3, [r4, #12]
 80066cc:	059b      	lsls	r3, r3, #22
 80066ce:	d4e1      	bmi.n	8006694 <_fflush_r+0xc>
 80066d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066d2:	f7ff fe5b 	bl	800638c <__retarget_lock_release_recursive>
 80066d6:	e7dd      	b.n	8006694 <_fflush_r+0xc>

080066d8 <__swhatbuf_r>:
 80066d8:	b570      	push	{r4, r5, r6, lr}
 80066da:	460c      	mov	r4, r1
 80066dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066e0:	2900      	cmp	r1, #0
 80066e2:	b096      	sub	sp, #88	@ 0x58
 80066e4:	4615      	mov	r5, r2
 80066e6:	461e      	mov	r6, r3
 80066e8:	da0d      	bge.n	8006706 <__swhatbuf_r+0x2e>
 80066ea:	89a3      	ldrh	r3, [r4, #12]
 80066ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80066f0:	f04f 0100 	mov.w	r1, #0
 80066f4:	bf14      	ite	ne
 80066f6:	2340      	movne	r3, #64	@ 0x40
 80066f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80066fc:	2000      	movs	r0, #0
 80066fe:	6031      	str	r1, [r6, #0]
 8006700:	602b      	str	r3, [r5, #0]
 8006702:	b016      	add	sp, #88	@ 0x58
 8006704:	bd70      	pop	{r4, r5, r6, pc}
 8006706:	466a      	mov	r2, sp
 8006708:	f000 f848 	bl	800679c <_fstat_r>
 800670c:	2800      	cmp	r0, #0
 800670e:	dbec      	blt.n	80066ea <__swhatbuf_r+0x12>
 8006710:	9901      	ldr	r1, [sp, #4]
 8006712:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006716:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800671a:	4259      	negs	r1, r3
 800671c:	4159      	adcs	r1, r3
 800671e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006722:	e7eb      	b.n	80066fc <__swhatbuf_r+0x24>

08006724 <__smakebuf_r>:
 8006724:	898b      	ldrh	r3, [r1, #12]
 8006726:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006728:	079d      	lsls	r5, r3, #30
 800672a:	4606      	mov	r6, r0
 800672c:	460c      	mov	r4, r1
 800672e:	d507      	bpl.n	8006740 <__smakebuf_r+0x1c>
 8006730:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	6123      	str	r3, [r4, #16]
 8006738:	2301      	movs	r3, #1
 800673a:	6163      	str	r3, [r4, #20]
 800673c:	b003      	add	sp, #12
 800673e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006740:	ab01      	add	r3, sp, #4
 8006742:	466a      	mov	r2, sp
 8006744:	f7ff ffc8 	bl	80066d8 <__swhatbuf_r>
 8006748:	9f00      	ldr	r7, [sp, #0]
 800674a:	4605      	mov	r5, r0
 800674c:	4639      	mov	r1, r7
 800674e:	4630      	mov	r0, r6
 8006750:	f7ff fe8a 	bl	8006468 <_malloc_r>
 8006754:	b948      	cbnz	r0, 800676a <__smakebuf_r+0x46>
 8006756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800675a:	059a      	lsls	r2, r3, #22
 800675c:	d4ee      	bmi.n	800673c <__smakebuf_r+0x18>
 800675e:	f023 0303 	bic.w	r3, r3, #3
 8006762:	f043 0302 	orr.w	r3, r3, #2
 8006766:	81a3      	strh	r3, [r4, #12]
 8006768:	e7e2      	b.n	8006730 <__smakebuf_r+0xc>
 800676a:	89a3      	ldrh	r3, [r4, #12]
 800676c:	6020      	str	r0, [r4, #0]
 800676e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006772:	81a3      	strh	r3, [r4, #12]
 8006774:	9b01      	ldr	r3, [sp, #4]
 8006776:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800677a:	b15b      	cbz	r3, 8006794 <__smakebuf_r+0x70>
 800677c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006780:	4630      	mov	r0, r6
 8006782:	f000 f81d 	bl	80067c0 <_isatty_r>
 8006786:	b128      	cbz	r0, 8006794 <__smakebuf_r+0x70>
 8006788:	89a3      	ldrh	r3, [r4, #12]
 800678a:	f023 0303 	bic.w	r3, r3, #3
 800678e:	f043 0301 	orr.w	r3, r3, #1
 8006792:	81a3      	strh	r3, [r4, #12]
 8006794:	89a3      	ldrh	r3, [r4, #12]
 8006796:	431d      	orrs	r5, r3
 8006798:	81a5      	strh	r5, [r4, #12]
 800679a:	e7cf      	b.n	800673c <__smakebuf_r+0x18>

0800679c <_fstat_r>:
 800679c:	b538      	push	{r3, r4, r5, lr}
 800679e:	4d07      	ldr	r5, [pc, #28]	@ (80067bc <_fstat_r+0x20>)
 80067a0:	2300      	movs	r3, #0
 80067a2:	4604      	mov	r4, r0
 80067a4:	4608      	mov	r0, r1
 80067a6:	4611      	mov	r1, r2
 80067a8:	602b      	str	r3, [r5, #0]
 80067aa:	f7fa fa68 	bl	8000c7e <_fstat>
 80067ae:	1c43      	adds	r3, r0, #1
 80067b0:	d102      	bne.n	80067b8 <_fstat_r+0x1c>
 80067b2:	682b      	ldr	r3, [r5, #0]
 80067b4:	b103      	cbz	r3, 80067b8 <_fstat_r+0x1c>
 80067b6:	6023      	str	r3, [r4, #0]
 80067b8:	bd38      	pop	{r3, r4, r5, pc}
 80067ba:	bf00      	nop
 80067bc:	2000052c 	.word	0x2000052c

080067c0 <_isatty_r>:
 80067c0:	b538      	push	{r3, r4, r5, lr}
 80067c2:	4d06      	ldr	r5, [pc, #24]	@ (80067dc <_isatty_r+0x1c>)
 80067c4:	2300      	movs	r3, #0
 80067c6:	4604      	mov	r4, r0
 80067c8:	4608      	mov	r0, r1
 80067ca:	602b      	str	r3, [r5, #0]
 80067cc:	f7fa fa67 	bl	8000c9e <_isatty>
 80067d0:	1c43      	adds	r3, r0, #1
 80067d2:	d102      	bne.n	80067da <_isatty_r+0x1a>
 80067d4:	682b      	ldr	r3, [r5, #0]
 80067d6:	b103      	cbz	r3, 80067da <_isatty_r+0x1a>
 80067d8:	6023      	str	r3, [r4, #0]
 80067da:	bd38      	pop	{r3, r4, r5, pc}
 80067dc:	2000052c 	.word	0x2000052c

080067e0 <_sbrk_r>:
 80067e0:	b538      	push	{r3, r4, r5, lr}
 80067e2:	4d06      	ldr	r5, [pc, #24]	@ (80067fc <_sbrk_r+0x1c>)
 80067e4:	2300      	movs	r3, #0
 80067e6:	4604      	mov	r4, r0
 80067e8:	4608      	mov	r0, r1
 80067ea:	602b      	str	r3, [r5, #0]
 80067ec:	f7fa fa70 	bl	8000cd0 <_sbrk>
 80067f0:	1c43      	adds	r3, r0, #1
 80067f2:	d102      	bne.n	80067fa <_sbrk_r+0x1a>
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	b103      	cbz	r3, 80067fa <_sbrk_r+0x1a>
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	bd38      	pop	{r3, r4, r5, pc}
 80067fc:	2000052c 	.word	0x2000052c

08006800 <_init>:
 8006800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006802:	bf00      	nop
 8006804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006806:	bc08      	pop	{r3}
 8006808:	469e      	mov	lr, r3
 800680a:	4770      	bx	lr

0800680c <_fini>:
 800680c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800680e:	bf00      	nop
 8006810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006812:	bc08      	pop	{r3}
 8006814:	469e      	mov	lr, r3
 8006816:	4770      	bx	lr
