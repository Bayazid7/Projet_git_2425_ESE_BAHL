
SOFWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007adc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08007cbc  08007cbc  00008cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008044  08008044  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008044  08008044  00009044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800804c  0800804c  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800804c  0800804c  0000904c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008050  08008050  00009050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008054  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000068  080080bc  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  080080bc  0000a560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed66  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f3d  00000000  00000000  00028dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  0002cd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000141e  00000000  00000000  0002e738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002308d  00000000  00000000  0002fb56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020655  00000000  00000000  00052be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e10dc  00000000  00000000  00073238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154314  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075d0  00000000  00000000  00154358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0015b928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007ca4 	.word	0x08007ca4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08007ca4 	.word	0x08007ca4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ADXL343_I2C_Read>:
#include "ADXL343.h"
#include <stdio.h>
#include <string.h>

static uint8_t ADXL343_I2C_Read(ADXL343_InstanceDef_t *Instance, uint8_t reg, uint8_t *buf, uint16_t size)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af04      	add	r7, sp, #16
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	607a      	str	r2, [r7, #4]
 80005ba:	461a      	mov	r2, r3
 80005bc:	460b      	mov	r3, r1
 80005be:	72fb      	strb	r3, [r7, #11]
 80005c0:	4613      	mov	r3, r2
 80005c2:	813b      	strh	r3, [r7, #8]
    if (Instance == NULL || buf == NULL || size == 0)
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d005      	beq.n	80005d6 <ADXL343_I2C_Read+0x26>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d002      	beq.n	80005d6 <ADXL343_I2C_Read+0x26>
 80005d0:	893b      	ldrh	r3, [r7, #8]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d101      	bne.n	80005da <ADXL343_I2C_Read+0x2a>
    {
        return 1;
 80005d6:	2301      	movs	r3, #1
 80005d8:	e014      	b.n	8000604 <ADXL343_I2C_Read+0x54>
    }
    if (HAL_I2C_Mem_Read(Instance->hi2c, ADXL343_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, buf, size, HAL_MAX_DELAY) != HAL_OK)
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	7afb      	ldrb	r3, [r7, #11]
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	9302      	str	r3, [sp, #8]
 80005e8:	893b      	ldrh	r3, [r7, #8]
 80005ea:	9301      	str	r3, [sp, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2301      	movs	r3, #1
 80005f2:	21a6      	movs	r1, #166	@ 0xa6
 80005f4:	f002 fef8 	bl	80033e8 <HAL_I2C_Mem_Read>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <ADXL343_I2C_Read+0x52>
    {
        return 1;
 80005fe:	2301      	movs	r3, #1
 8000600:	e000      	b.n	8000604 <ADXL343_I2C_Read+0x54>
    }
    return 0;
 8000602:	2300      	movs	r3, #0
}
 8000604:	4618      	mov	r0, r3
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <ADXL343_I2C_Write>:

static uint8_t ADXL343_I2C_Write(ADXL343_InstanceDef_t *Instance, uint8_t reg, uint8_t *buf, uint16_t size)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af04      	add	r7, sp, #16
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	607a      	str	r2, [r7, #4]
 8000616:	461a      	mov	r2, r3
 8000618:	460b      	mov	r3, r1
 800061a:	72fb      	strb	r3, [r7, #11]
 800061c:	4613      	mov	r3, r2
 800061e:	813b      	strh	r3, [r7, #8]
    if (Instance == NULL || buf == NULL || size == 0)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d005      	beq.n	8000632 <ADXL343_I2C_Write+0x26>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d002      	beq.n	8000632 <ADXL343_I2C_Write+0x26>
 800062c:	893b      	ldrh	r3, [r7, #8]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d101      	bne.n	8000636 <ADXL343_I2C_Write+0x2a>
    {
        return 1;
 8000632:	2301      	movs	r3, #1
 8000634:	e014      	b.n	8000660 <ADXL343_I2C_Write+0x54>
    }
    if (HAL_I2C_Mem_Write(Instance->hi2c, ADXL343_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, buf, size, HAL_MAX_DELAY) != HAL_OK)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	7afb      	ldrb	r3, [r7, #11]
 800063c:	b29a      	uxth	r2, r3
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	9302      	str	r3, [sp, #8]
 8000644:	893b      	ldrh	r3, [r7, #8]
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	2301      	movs	r3, #1
 800064e:	21a6      	movs	r1, #166	@ 0xa6
 8000650:	f002 fdb6 	bl	80031c0 <HAL_I2C_Mem_Write>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <ADXL343_I2C_Write+0x52>
    {
        return 1;
 800065a:	2301      	movs	r3, #1
 800065c:	e000      	b.n	8000660 <ADXL343_I2C_Write+0x54>
    }
    return 0;
 800065e:	2300      	movs	r3, #0
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <ADXL343_Init>:


uint8_t ADXL343_Init(ADXL343_InstanceDef_t *Instance, I2C_HandleTypeDef *hi2c)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
    if (Instance == NULL || hi2c == NULL)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d002      	beq.n	800067e <ADXL343_Init+0x16>
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d104      	bne.n	8000688 <ADXL343_Init+0x20>
    {
        printf("Erreur : Instance ou handle I2C est NULL.\r\n");
 800067e:	4867      	ldr	r0, [pc, #412]	@ (800081c <ADXL343_Init+0x1b4>)
 8000680:	f006 fcac 	bl	8006fdc <puts>
        return 1;
 8000684:	2301      	movs	r3, #1
 8000686:	e0c4      	b.n	8000812 <ADXL343_Init+0x1aa>
    }
    Instance->hi2c = hi2c;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	683a      	ldr	r2, [r7, #0]
 800068c:	601a      	str	r2, [r3, #0]
    Instance->accX = 0;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2200      	movs	r2, #0
 8000692:	811a      	strh	r2, [r3, #8]
    Instance->accY = 0;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2200      	movs	r2, #0
 8000698:	815a      	strh	r2, [r3, #10]
    Instance->accZ = 0;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2200      	movs	r2, #0
 800069e:	819a      	strh	r2, [r3, #12]

    uint8_t deviceID = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	73fb      	strb	r3, [r7, #15]
    if (ADXL343_I2C_Read(Instance, ADXL343_REG_DEVID, &deviceID, 1) != 0)
 80006a4:	f107 020f 	add.w	r2, r7, #15
 80006a8:	2301      	movs	r3, #1
 80006aa:	2100      	movs	r1, #0
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff ff7f 	bl	80005b0 <ADXL343_I2C_Read>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d004      	beq.n	80006c2 <ADXL343_Init+0x5a>
    {
        printf("Erreur : Échec de la lecture de l'identifiant de l'appareil.\r\n");
 80006b8:	4859      	ldr	r0, [pc, #356]	@ (8000820 <ADXL343_Init+0x1b8>)
 80006ba:	f006 fc8f 	bl	8006fdc <puts>
        return 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	e0a7      	b.n	8000812 <ADXL343_Init+0x1aa>
    }

    if (deviceID != ADXL343_DEVID)
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	2be5      	cmp	r3, #229	@ 0xe5
 80006c6:	d007      	beq.n	80006d8 <ADXL343_Init+0x70>
    {
        printf("Erreur : ID de l'appareil incorrect (attendu : 0x%X, lu : 0x%X).\r\n", ADXL343_DEVID, deviceID);
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	461a      	mov	r2, r3
 80006cc:	21e5      	movs	r1, #229	@ 0xe5
 80006ce:	4855      	ldr	r0, [pc, #340]	@ (8000824 <ADXL343_Init+0x1bc>)
 80006d0:	f006 fc1c 	bl	8006f0c <iprintf>
        return 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	e09c      	b.n	8000812 <ADXL343_Init+0x1aa>

    // Configuration des registres avec gestion des erreurs
    uint8_t configData;

    // Configuration du registre POWER_CTL
    configData = 0x08;
 80006d8:	2308      	movs	r3, #8
 80006da:	73bb      	strb	r3, [r7, #14]
    if (ADXL343_I2C_Write(Instance, ADXL343_REG_POWER_CTL, &configData, 1) != 0)
 80006dc:	f107 020e 	add.w	r2, r7, #14
 80006e0:	2301      	movs	r3, #1
 80006e2:	212d      	movs	r1, #45	@ 0x2d
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f7ff ff91 	bl	800060c <ADXL343_I2C_Write>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d004      	beq.n	80006fa <ADXL343_Init+0x92>
    {
        printf("Erreur : Échec de la configuration de POWER_CTL.\r\n");
 80006f0:	484d      	ldr	r0, [pc, #308]	@ (8000828 <ADXL343_Init+0x1c0>)
 80006f2:	f006 fc73 	bl	8006fdc <puts>
        return 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e08b      	b.n	8000812 <ADXL343_Init+0x1aa>
    }

    // Désactivation des interruptions
    configData = 0x00;
 80006fa:	2300      	movs	r3, #0
 80006fc:	73bb      	strb	r3, [r7, #14]
    if (ADXL343_I2C_Write(Instance, ADXL343_REG_INT_ENABLE, &configData, 1) != 0)
 80006fe:	f107 020e 	add.w	r2, r7, #14
 8000702:	2301      	movs	r3, #1
 8000704:	212e      	movs	r1, #46	@ 0x2e
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff ff80 	bl	800060c <ADXL343_I2C_Write>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d004      	beq.n	800071c <ADXL343_Init+0xb4>
    {
        printf("Erreur : Échec de la désactivation des interruptions.\r\n");
 8000712:	4846      	ldr	r0, [pc, #280]	@ (800082c <ADXL343_Init+0x1c4>)
 8000714:	f006 fc62 	bl	8006fdc <puts>
        return 1;
 8000718:	2301      	movs	r3, #1
 800071a:	e07a      	b.n	8000812 <ADXL343_Init+0x1aa>
    }

    // Configuration des seuils de tap
    configData = 1;
 800071c:	2301      	movs	r3, #1
 800071e:	73bb      	strb	r3, [r7, #14]
    if (ADXL343_I2C_Write(Instance, ADXL343_REG_THRESH_TAP, &configData, 1) != 0)
 8000720:	f107 020e 	add.w	r2, r7, #14
 8000724:	2301      	movs	r3, #1
 8000726:	211d      	movs	r1, #29
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff ff6f 	bl	800060c <ADXL343_I2C_Write>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d004      	beq.n	800073e <ADXL343_Init+0xd6>
    {
        printf("Erreur : Échec de la configuration de THRESH_TAP.\r\n");
 8000734:	483e      	ldr	r0, [pc, #248]	@ (8000830 <ADXL343_Init+0x1c8>)
 8000736:	f006 fc51 	bl	8006fdc <puts>
        return 1;
 800073a:	2301      	movs	r3, #1
 800073c:	e069      	b.n	8000812 <ADXL343_Init+0x1aa>
    }

    // Configuration de la durée
    configData = 5; // Exemple de durée
 800073e:	2305      	movs	r3, #5
 8000740:	73bb      	strb	r3, [r7, #14]
    if (ADXL343_I2C_Write(Instance, ADXL343_REG_DUR, &configData, 1) != 0)
 8000742:	f107 020e 	add.w	r2, r7, #14
 8000746:	2301      	movs	r3, #1
 8000748:	2121      	movs	r1, #33	@ 0x21
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ff5e 	bl	800060c <ADXL343_I2C_Write>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d004      	beq.n	8000760 <ADXL343_Init+0xf8>
    {
        printf("Erreur : Échec de la configuration de DUR.\r\n");
 8000756:	4837      	ldr	r0, [pc, #220]	@ (8000834 <ADXL343_Init+0x1cc>)
 8000758:	f006 fc40 	bl	8006fdc <puts>
        return 1;
 800075c:	2301      	movs	r3, #1
 800075e:	e058      	b.n	8000812 <ADXL343_Init+0x1aa>
    }

    // Configuration des axes de tap
    configData = 0x07; // Activer les axes X, Y, Z
 8000760:	2307      	movs	r3, #7
 8000762:	73bb      	strb	r3, [r7, #14]
    if (ADXL343_I2C_Write(Instance, ADXL343_REG_TAP_AXES, &configData, 1) != 0)
 8000764:	f107 020e 	add.w	r2, r7, #14
 8000768:	2301      	movs	r3, #1
 800076a:	212a      	movs	r1, #42	@ 0x2a
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ff4d 	bl	800060c <ADXL343_I2C_Write>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d004      	beq.n	8000782 <ADXL343_Init+0x11a>
    {
        printf("Erreur : Échec de la configuration de TAP_AXES.\r\n");
 8000778:	482f      	ldr	r0, [pc, #188]	@ (8000838 <ADXL343_Init+0x1d0>)
 800077a:	f006 fc2f 	bl	8006fdc <puts>
        return 1;
 800077e:	2301      	movs	r3, #1
 8000780:	e047      	b.n	8000812 <ADXL343_Init+0x1aa>
    }

    // Configuration de la fréquence d'échantillonnage
    configData = RATE_200_HZ;
 8000782:	230b      	movs	r3, #11
 8000784:	73bb      	strb	r3, [r7, #14]
    if (ADXL343_I2C_Write(Instance, ADXL343_REG_BW_RATE, &configData, 1) != 0)
 8000786:	f107 020e 	add.w	r2, r7, #14
 800078a:	2301      	movs	r3, #1
 800078c:	212c      	movs	r1, #44	@ 0x2c
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff ff3c 	bl	800060c <ADXL343_I2C_Write>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d004      	beq.n	80007a4 <ADXL343_Init+0x13c>
    {
        printf("Erreur : Échec de la configuration de BW_RATE.\r\n");
 800079a:	4828      	ldr	r0, [pc, #160]	@ (800083c <ADXL343_Init+0x1d4>)
 800079c:	f006 fc1e 	bl	8006fdc <puts>
        return 1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	e036      	b.n	8000812 <ADXL343_Init+0x1aa>
    }

    // Configuration de la carte d'interruption
    configData = 0x40; // Exemple de configuration
 80007a4:	2340      	movs	r3, #64	@ 0x40
 80007a6:	73bb      	strb	r3, [r7, #14]
    if (ADXL343_I2C_Write(Instance, ADXL343_REG_INT_MAP, &configData, 1) != 0)
 80007a8:	f107 020e 	add.w	r2, r7, #14
 80007ac:	2301      	movs	r3, #1
 80007ae:	212f      	movs	r1, #47	@ 0x2f
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ff2b 	bl	800060c <ADXL343_I2C_Write>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d004      	beq.n	80007c6 <ADXL343_Init+0x15e>
    {
        printf("Erreur : Échec de la configuration de INT_MAP.\r\n");
 80007bc:	4820      	ldr	r0, [pc, #128]	@ (8000840 <ADXL343_Init+0x1d8>)
 80007be:	f006 fc0d 	bl	8006fdc <puts>
        return 1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e025      	b.n	8000812 <ADXL343_Init+0x1aa>
    }

    // Activation des interruptions
    configData = 0x40; // Exemple pour activer les interruptions
 80007c6:	2340      	movs	r3, #64	@ 0x40
 80007c8:	73bb      	strb	r3, [r7, #14]
    if (ADXL343_I2C_Write(Instance, ADXL343_REG_INT_ENABLE, &configData, 1) != 0)
 80007ca:	f107 020e 	add.w	r2, r7, #14
 80007ce:	2301      	movs	r3, #1
 80007d0:	212e      	movs	r1, #46	@ 0x2e
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff ff1a 	bl	800060c <ADXL343_I2C_Write>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d004      	beq.n	80007e8 <ADXL343_Init+0x180>
    {
        printf("Erreur : Échec de l'activation des interruptions.\r\n");
 80007de:	4819      	ldr	r0, [pc, #100]	@ (8000844 <ADXL343_Init+0x1dc>)
 80007e0:	f006 fbfc 	bl	8006fdc <puts>
        return 1;
 80007e4:	2301      	movs	r3, #1
 80007e6:	e014      	b.n	8000812 <ADXL343_Init+0x1aa>
    }

    // Configuration du format des données
    configData = 0x14; // Exemple de format : Full resolution, ±16g
 80007e8:	2314      	movs	r3, #20
 80007ea:	73bb      	strb	r3, [r7, #14]
    if (ADXL343_I2C_Write(Instance, ADXL343_REG_DATA_FORMAT, &configData, 1) != 0)
 80007ec:	f107 020e 	add.w	r2, r7, #14
 80007f0:	2301      	movs	r3, #1
 80007f2:	2131      	movs	r1, #49	@ 0x31
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff09 	bl	800060c <ADXL343_I2C_Write>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d004      	beq.n	800080a <ADXL343_Init+0x1a2>
    {
        printf("Erreur : Échec de la configuration de DATA_FORMAT.\r\n");
 8000800:	4811      	ldr	r0, [pc, #68]	@ (8000848 <ADXL343_Init+0x1e0>)
 8000802:	f006 fbeb 	bl	8006fdc <puts>
        return 1;
 8000806:	2301      	movs	r3, #1
 8000808:	e003      	b.n	8000812 <ADXL343_Init+0x1aa>
    }

    printf("Initialisation de l'ADXL343 réussie.\r\n");
 800080a:	4810      	ldr	r0, [pc, #64]	@ (800084c <ADXL343_Init+0x1e4>)
 800080c:	f006 fbe6 	bl	8006fdc <puts>
    return 0;
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	08007cbc 	.word	0x08007cbc
 8000820:	08007ce8 	.word	0x08007ce8
 8000824:	08007d28 	.word	0x08007d28
 8000828:	08007d6c 	.word	0x08007d6c
 800082c:	08007da0 	.word	0x08007da0
 8000830:	08007ddc 	.word	0x08007ddc
 8000834:	08007e10 	.word	0x08007e10
 8000838:	08007e40 	.word	0x08007e40
 800083c:	08007e74 	.word	0x08007e74
 8000840:	08007ea8 	.word	0x08007ea8
 8000844:	08007edc 	.word	0x08007edc
 8000848:	08007f10 	.word	0x08007f10
 800084c:	08007f48 	.word	0x08007f48

08000850 <Moteur_UpdatePosition>:
    Moteur_SetDirection(moteur, MOTEUR_ARRET);
}

// Mise à jour de la position de l'encodeur
void Moteur_UpdatePosition(Moteur_InstanceDef_t *moteur)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
    moteur->position = __HAL_TIM_GET_COUNTER(moteur->encoder_timer);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000860:	461a      	mov	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	60da      	str	r2, [r3, #12]
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
	...

08000874 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	@ 0x30
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800087a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2220      	movs	r2, #32
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f006 fc85 	bl	800719c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000892:	4b32      	ldr	r3, [pc, #200]	@ (800095c <MX_ADC1_Init+0xe8>)
 8000894:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000898:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800089a:	4b30      	ldr	r3, [pc, #192]	@ (800095c <MX_ADC1_Init+0xe8>)
 800089c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a2:	4b2e      	ldr	r3, [pc, #184]	@ (800095c <MX_ADC1_Init+0xe8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a8:	4b2c      	ldr	r3, [pc, #176]	@ (800095c <MX_ADC1_Init+0xe8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80008ae:	4b2b      	ldr	r3, [pc, #172]	@ (800095c <MX_ADC1_Init+0xe8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008b4:	4b29      	ldr	r3, [pc, #164]	@ (800095c <MX_ADC1_Init+0xe8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ba:	4b28      	ldr	r3, [pc, #160]	@ (800095c <MX_ADC1_Init+0xe8>)
 80008bc:	2204      	movs	r2, #4
 80008be:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008c0:	4b26      	ldr	r3, [pc, #152]	@ (800095c <MX_ADC1_Init+0xe8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008c6:	4b25      	ldr	r3, [pc, #148]	@ (800095c <MX_ADC1_Init+0xe8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80008cc:	4b23      	ldr	r3, [pc, #140]	@ (800095c <MX_ADC1_Init+0xe8>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d2:	4b22      	ldr	r3, [pc, #136]	@ (800095c <MX_ADC1_Init+0xe8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008da:	4b20      	ldr	r3, [pc, #128]	@ (800095c <MX_ADC1_Init+0xe8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e0:	4b1e      	ldr	r3, [pc, #120]	@ (800095c <MX_ADC1_Init+0xe8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008e6:	4b1d      	ldr	r3, [pc, #116]	@ (800095c <MX_ADC1_Init+0xe8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ee:	4b1b      	ldr	r3, [pc, #108]	@ (800095c <MX_ADC1_Init+0xe8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80008f4:	4b19      	ldr	r3, [pc, #100]	@ (800095c <MX_ADC1_Init+0xe8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008fc:	4817      	ldr	r0, [pc, #92]	@ (800095c <MX_ADC1_Init+0xe8>)
 80008fe:	f001 fad9 	bl	8001eb4 <HAL_ADC_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000908:	f000 fa90 	bl	8000e2c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000914:	4619      	mov	r1, r3
 8000916:	4811      	ldr	r0, [pc, #68]	@ (800095c <MX_ADC1_Init+0xe8>)
 8000918:	f002 f866 	bl	80029e8 <HAL_ADCEx_MultiModeConfigChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000922:	f000 fa83 	bl	8000e2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <MX_ADC1_Init+0xec>)
 8000928:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800092a:	2306      	movs	r3, #6
 800092c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000932:	237f      	movs	r3, #127	@ 0x7f
 8000934:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000936:	2304      	movs	r3, #4
 8000938:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	4619      	mov	r1, r3
 8000942:	4806      	ldr	r0, [pc, #24]	@ (800095c <MX_ADC1_Init+0xe8>)
 8000944:	f001 fc3a 	bl	80021bc <HAL_ADC_ConfigChannel>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800094e:	f000 fa6d 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	3730      	adds	r7, #48	@ 0x30
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000084 	.word	0x20000084
 8000960:	0c900008 	.word	0x0c900008

08000964 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b09a      	sub	sp, #104	@ 0x68
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	2244      	movs	r2, #68	@ 0x44
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f006 fc09 	bl	800719c <memset>
  if(adcHandle->Instance==ADC1)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000992:	d134      	bne.n	80009fe <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000994:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000998:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800099a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800099e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	4618      	mov	r0, r3
 80009a6:	f004 f803 	bl	80049b0 <HAL_RCCEx_PeriphCLKConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80009b0:	f000 fa3c 	bl	8000e2c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009b4:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <HAL_ADC_MspInit+0xa4>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b8:	4a13      	ldr	r2, [pc, #76]	@ (8000a08 <HAL_ADC_MspInit+0xa4>)
 80009ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c0:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <HAL_ADC_MspInit+0xa4>)
 80009c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <HAL_ADC_MspInit+0xa4>)
 80009ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a08 <HAL_ADC_MspInit+0xa4>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <HAL_ADC_MspInit+0xa4>)
 80009da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CB_OUT1_Pin|CB_OUT2_Pin;
 80009e4:	230c      	movs	r3, #12
 80009e6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e8:	2303      	movs	r3, #3
 80009ea:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009f4:	4619      	mov	r1, r3
 80009f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009fa:	f002 f979 	bl	8002cf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80009fe:	bf00      	nop
 8000a00:	3768      	adds	r7, #104	@ 0x68
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40021000 	.word	0x40021000

08000a0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	@ 0x28
 8000a10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	4b4b      	ldr	r3, [pc, #300]	@ (8000b50 <MX_GPIO_Init+0x144>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	4a4a      	ldr	r2, [pc, #296]	@ (8000b50 <MX_GPIO_Init+0x144>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2e:	4b48      	ldr	r3, [pc, #288]	@ (8000b50 <MX_GPIO_Init+0x144>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a3a:	4b45      	ldr	r3, [pc, #276]	@ (8000b50 <MX_GPIO_Init+0x144>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	4a44      	ldr	r2, [pc, #272]	@ (8000b50 <MX_GPIO_Init+0x144>)
 8000a40:	f043 0320 	orr.w	r3, r3, #32
 8000a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a46:	4b42      	ldr	r3, [pc, #264]	@ (8000b50 <MX_GPIO_Init+0x144>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	f003 0320 	and.w	r3, r3, #32
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b3f      	ldr	r3, [pc, #252]	@ (8000b50 <MX_GPIO_Init+0x144>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4a3e      	ldr	r2, [pc, #248]	@ (8000b50 <MX_GPIO_Init+0x144>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b50 <MX_GPIO_Init+0x144>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4b39      	ldr	r3, [pc, #228]	@ (8000b50 <MX_GPIO_Init+0x144>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6e:	4a38      	ldr	r2, [pc, #224]	@ (8000b50 <MX_GPIO_Init+0x144>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a76:	4b36      	ldr	r3, [pc, #216]	@ (8000b50 <MX_GPIO_Init+0x144>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000a88:	4832      	ldr	r0, [pc, #200]	@ (8000b54 <MX_GPIO_Init+0x148>)
 8000a8a:	f002 fab3 	bl	8002ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CB_IN_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2190      	movs	r1, #144	@ 0x90
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a96:	f002 faad 	bl	8002ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aa0:	482d      	ldr	r0, [pc, #180]	@ (8000b58 <MX_GPIO_Init+0x14c>)
 8000aa2:	f002 faa7 	bl	8002ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000aa6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4825      	ldr	r0, [pc, #148]	@ (8000b54 <MX_GPIO_Init+0x148>)
 8000ac0:	f002 f916 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CB_IN_Pin|DEV_EN_LIDAR_Pin;
 8000ac4:	2390      	movs	r3, #144	@ 0x90
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ade:	f002 f907 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHAT_SOURIS_Pin;
 8000ae2:	2320      	movs	r3, #32
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHAT_SOURIS_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af8:	f002 f8fa 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin;
 8000afc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M_EN_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4810      	ldr	r0, [pc, #64]	@ (8000b58 <MX_GPIO_Init+0x14c>)
 8000b16:	f002 f8eb 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 8000b1a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b20:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4809      	ldr	r0, [pc, #36]	@ (8000b58 <MX_GPIO_Init+0x14c>)
 8000b32:	f002 f8dd 	bl	8002cf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2017      	movs	r0, #23
 8000b3c:	f002 f8b0 	bl	8002ca0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b40:	2017      	movs	r0, #23
 8000b42:	f002 f8c7 	bl	8002cd4 <HAL_NVIC_EnableIRQ>

}
 8000b46:	bf00      	nop
 8000b48:	3728      	adds	r7, #40	@ 0x28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40021000 	.word	0x40021000
 8000b54:	48000800 	.word	0x48000800
 8000b58:	48000400 	.word	0x48000400

08000b5c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b62:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd4 <MX_I2C1_Init+0x78>)
 8000b64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xA0623C56;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b68:	4a1b      	ldr	r2, [pc, #108]	@ (8000bd8 <MX_I2C1_Init+0x7c>)
 8000b6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b72:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b78:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b84:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b96:	480e      	ldr	r0, [pc, #56]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000b98:	f002 fa76 	bl	8003088 <HAL_I2C_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ba2:	f000 f943 	bl	8000e2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4809      	ldr	r0, [pc, #36]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000baa:	f002 fff9 	bl	8003ba0 <HAL_I2CEx_ConfigAnalogFilter>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bb4:	f000 f93a 	bl	8000e2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <MX_I2C1_Init+0x74>)
 8000bbc:	f003 f83b 	bl	8003c36 <HAL_I2CEx_ConfigDigitalFilter>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bc6:	f000 f931 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200000f0 	.word	0x200000f0
 8000bd4:	40005400 	.word	0x40005400
 8000bd8:	a0623c56 	.word	0xa0623c56

08000bdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b09a      	sub	sp, #104	@ 0x68
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	2244      	movs	r2, #68	@ 0x44
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f006 facd 	bl	800719c <memset>
  if(i2cHandle->Instance==I2C1)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a1f      	ldr	r2, [pc, #124]	@ (8000c84 <HAL_I2C_MspInit+0xa8>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d136      	bne.n	8000c7a <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c0c:	2340      	movs	r3, #64	@ 0x40
 8000c0e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f003 fec9 	bl	80049b0 <HAL_RCCEx_PeriphCLKConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c24:	f000 f902 	bl	8000e2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c28:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <HAL_I2C_MspInit+0xac>)
 8000c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2c:	4a16      	ldr	r2, [pc, #88]	@ (8000c88 <HAL_I2C_MspInit+0xac>)
 8000c2e:	f043 0302 	orr.w	r3, r3, #2
 8000c32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c34:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <HAL_I2C_MspInit+0xac>)
 8000c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c38:	f003 0302 	and.w	r3, r3, #2
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000c40:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c44:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c46:	2312      	movs	r3, #18
 8000c48:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c52:	2304      	movs	r3, #4
 8000c54:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480b      	ldr	r0, [pc, #44]	@ (8000c8c <HAL_I2C_MspInit+0xb0>)
 8000c5e:	f002 f847 	bl	8002cf0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c62:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <HAL_I2C_MspInit+0xac>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c66:	4a08      	ldr	r2, [pc, #32]	@ (8000c88 <HAL_I2C_MspInit+0xac>)
 8000c68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_I2C_MspInit+0xac>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3768      	adds	r7, #104	@ 0x68
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40005400 	.word	0x40005400
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	48000400 	.word	0x48000400

08000c90 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart4, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 8000c98:	1d39      	adds	r1, r7, #4
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4803      	ldr	r0, [pc, #12]	@ (8000cb0 <__io_putchar+0x20>)
 8000ca2:	f005 f9f5 	bl	8006090 <HAL_UART_Transmit>
  return chr;
 8000ca6:	687b      	ldr	r3, [r7, #4]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200002e8 	.word	0x200002e8

08000cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb8:	f000 fecd 	bl	8001a56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbc:	f000 f848 	bl	8000d50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc0:	f7ff fea4 	bl	8000a0c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000cc4:	f7ff fdd6 	bl	8000874 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000cc8:	f000 fa54 	bl	8001174 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ccc:	f000 faf2 	bl	80012b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cd0:	f000 fb46 	bl	8001360 <MX_TIM4_Init>
  MX_TIM16_Init();
 8000cd4:	f000 fb9a 	bl	800140c <MX_TIM16_Init>
  MX_UART4_Init();
 8000cd8:	f000 fd62 	bl	80017a0 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000cdc:	f000 fdac 	bl	8001838 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000ce0:	f7ff ff3c 	bl	8000b5c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ADXL343_Init(&ADXL343, &hi2c1);
 8000ce4:	4913      	ldr	r1, [pc, #76]	@ (8000d34 <main+0x80>)
 8000ce6:	4814      	ldr	r0, [pc, #80]	@ (8000d38 <main+0x84>)
 8000ce8:	f7ff fcbe 	bl	8000668 <ADXL343_Init>
 // LIDAR_start(&lidar);
 //HAL_Delay(500);
  //Moteur_SetDirection(&moteur1, MOTEUR_RECULER);

  //Moteur_Stop(&moteur1) ;
  printf("============ Projet 3A ================== \r\n") ;
 8000cec:	4813      	ldr	r0, [pc, #76]	@ (8000d3c <main+0x88>)
 8000cee:	f006 f975 	bl	8006fdc <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    printf("hello \r\n");
 8000cf2:	4813      	ldr	r0, [pc, #76]	@ (8000d40 <main+0x8c>)
 8000cf4:	f006 f972 	bl	8006fdc <puts>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000cf8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cfc:	4811      	ldr	r0, [pc, #68]	@ (8000d44 <main+0x90>)
 8000cfe:	f002 f991 	bl	8003024 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000d02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d06:	480f      	ldr	r0, [pc, #60]	@ (8000d44 <main+0x90>)
 8000d08:	f002 f98c 	bl	8003024 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000d0c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d10:	480c      	ldr	r0, [pc, #48]	@ (8000d44 <main+0x90>)
 8000d12:	f002 f987 	bl	8003024 <HAL_GPIO_TogglePin>
    Moteur_UpdatePosition(&moteur1);
 8000d16:	480c      	ldr	r0, [pc, #48]	@ (8000d48 <main+0x94>)
 8000d18:	f7ff fd9a 	bl	8000850 <Moteur_UpdatePosition>
    printf("LA POSITION EST : %ld \n",moteur1.position);
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <main+0x94>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	4619      	mov	r1, r3
 8000d22:	480a      	ldr	r0, [pc, #40]	@ (8000d4c <main+0x98>)
 8000d24:	f006 f8f2 	bl	8006f0c <iprintf>
    HAL_Delay(500);
 8000d28:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d2c:	f000 feca 	bl	8001ac4 <HAL_Delay>
    printf("hello \r\n");
 8000d30:	bf00      	nop
 8000d32:	e7de      	b.n	8000cf2 <main+0x3e>
 8000d34:	200000f0 	.word	0x200000f0
 8000d38:	20000158 	.word	0x20000158
 8000d3c:	08007f70 	.word	0x08007f70
 8000d40:	08007f9c 	.word	0x08007f9c
 8000d44:	48000800 	.word	0x48000800
 8000d48:	20000144 	.word	0x20000144
 8000d4c:	08007fa4 	.word	0x08007fa4

08000d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b094      	sub	sp, #80	@ 0x50
 8000d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d56:	f107 0318 	add.w	r3, r7, #24
 8000d5a:	2238      	movs	r2, #56	@ 0x38
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f006 fa1c 	bl	800719c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d72:	2000      	movs	r0, #0
 8000d74:	f002 ffb2 	bl	8003cdc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d80:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d82:	2302      	movs	r3, #2
 8000d84:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d86:	2303      	movs	r3, #3
 8000d88:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d8e:	2355      	movs	r3, #85	@ 0x55
 8000d90:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d96:	2302      	movs	r3, #2
 8000d98:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9e:	f107 0318 	add.w	r3, r7, #24
 8000da2:	4618      	mov	r0, r3
 8000da4:	f003 f8a8 	bl	8003ef8 <HAL_RCC_OscConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000dae:	f000 f83d 	bl	8000e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db2:	230f      	movs	r3, #15
 8000db4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db6:	2303      	movs	r3, #3
 8000db8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2104      	movs	r1, #4
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f003 fba6 	bl	800451c <HAL_RCC_ClockConfig>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000dd6:	f000 f829 	bl	8000e2c <Error_Handler>
  }
}
 8000dda:	bf00      	nop
 8000ddc:	3750      	adds	r7, #80	@ 0x50
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == INT2_Pin) {
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000df4:	d102      	bne.n	8000dfc <HAL_GPIO_EXTI_Callback+0x18>
	  printf("HELLO from PIN2 \n");
 8000df6:	4803      	ldr	r0, [pc, #12]	@ (8000e04 <HAL_GPIO_EXTI_Callback+0x20>)
 8000df8:	f006 f8f0 	bl	8006fdc <puts>
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	08007fbc 	.word	0x08007fbc

08000e08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d101      	bne.n	8000e1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e1a:	f000 fe35 	bl	8001a88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40001000 	.word	0x40001000

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <Error_Handler+0x8>

08000e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	4b13      	ldr	r3, [pc, #76]	@ (8000e8c <HAL_MspInit+0x54>)
 8000e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e42:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <HAL_MspInit+0x54>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e4a:	4b10      	ldr	r3, [pc, #64]	@ (8000e8c <HAL_MspInit+0x54>)
 8000e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	4b0d      	ldr	r3, [pc, #52]	@ (8000e8c <HAL_MspInit+0x54>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e8c <HAL_MspInit+0x54>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e60:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e62:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <HAL_MspInit+0x54>)
 8000e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	2001      	movs	r0, #1
 8000e74:	f001 ff14 	bl	8002ca0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f001 ff2b 	bl	8002cd4 <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e7e:	f003 f82b 	bl	8003ed8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000

08000e90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08c      	sub	sp, #48	@ 0x30
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8000f54 <HAL_InitTick+0xc4>)
 8000ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea4:	4a2b      	ldr	r2, [pc, #172]	@ (8000f54 <HAL_InitTick+0xc4>)
 8000ea6:	f043 0310 	orr.w	r3, r3, #16
 8000eaa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eac:	4b29      	ldr	r3, [pc, #164]	@ (8000f54 <HAL_InitTick+0xc4>)
 8000eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb0:	f003 0310 	and.w	r3, r3, #16
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eb8:	f107 020c 	add.w	r2, r7, #12
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 fcfe 	bl	80048c4 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ec8:	f003 fcd0 	bl	800486c <HAL_RCC_GetPCLK1Freq>
 8000ecc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ed0:	4a21      	ldr	r2, [pc, #132]	@ (8000f58 <HAL_InitTick+0xc8>)
 8000ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed6:	0c9b      	lsrs	r3, r3, #18
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000edc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f5c <HAL_InitTick+0xcc>)
 8000ede:	4a20      	ldr	r2, [pc, #128]	@ (8000f60 <HAL_InitTick+0xd0>)
 8000ee0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f5c <HAL_InitTick+0xcc>)
 8000ee4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ee8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000eea:	4a1c      	ldr	r2, [pc, #112]	@ (8000f5c <HAL_InitTick+0xcc>)
 8000eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eee:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f5c <HAL_InitTick+0xcc>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef6:	4b19      	ldr	r3, [pc, #100]	@ (8000f5c <HAL_InitTick+0xcc>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000efc:	4817      	ldr	r0, [pc, #92]	@ (8000f5c <HAL_InitTick+0xcc>)
 8000efe:	f003 ff47 	bl	8004d90 <HAL_TIM_Base_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000f08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d11b      	bne.n	8000f48 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f10:	4812      	ldr	r0, [pc, #72]	@ (8000f5c <HAL_InitTick+0xcc>)
 8000f12:	f003 ff95 	bl	8004e40 <HAL_TIM_Base_Start_IT>
 8000f16:	4603      	mov	r3, r0
 8000f18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000f1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d111      	bne.n	8000f48 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f24:	2036      	movs	r0, #54	@ 0x36
 8000f26:	f001 fed5 	bl	8002cd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d808      	bhi.n	8000f42 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	2036      	movs	r0, #54	@ 0x36
 8000f36:	f001 feb3 	bl	8002ca0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <HAL_InitTick+0xd4>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	e002      	b.n	8000f48 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3730      	adds	r7, #48	@ 0x30
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40021000 	.word	0x40021000
 8000f58:	431bde83 	.word	0x431bde83
 8000f5c:	20000168 	.word	0x20000168
 8000f60:	40001000 	.word	0x40001000
 8000f64:	20000004 	.word	0x20000004

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <NMI_Handler+0x4>

08000f70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <MemManage_Handler+0x4>

08000f80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM1/PVM2/PVM3/PVM4 interrupts through EXTI lines 16/38/39/40/41.
  */
void PVD_PVM_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8000fcc:	f002 ff2a 	bl	8003e24 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */


  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_Pin);
 8000fd8:	2040      	movs	r0, #64	@ 0x40
 8000fda:	f002 f83d 	bl	8003058 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT2_Pin);
 8000fde:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fe2:	f002 f839 	bl	8003058 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ff0:	4802      	ldr	r0, [pc, #8]	@ (8000ffc <TIM6_DAC_IRQHandler+0x10>)
 8000ff2:	f004 f88c 	bl	800510e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000168 	.word	0x20000168

08001000 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	e00a      	b.n	8001028 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001012:	f3af 8000 	nop.w
 8001016:	4601      	mov	r1, r0
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	60ba      	str	r2, [r7, #8]
 800101e:	b2ca      	uxtb	r2, r1
 8001020:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	3301      	adds	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	429a      	cmp	r2, r3
 800102e:	dbf0      	blt.n	8001012 <_read+0x12>
  }

  return len;
 8001030:	687b      	ldr	r3, [r7, #4]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	60f8      	str	r0, [r7, #12]
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	e009      	b.n	8001060 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	60ba      	str	r2, [r7, #8]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fe1b 	bl	8000c90 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	3301      	adds	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	429a      	cmp	r2, r3
 8001066:	dbf1      	blt.n	800104c <_write+0x12>
  }
  return len;
 8001068:	687b      	ldr	r3, [r7, #4]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <_close>:

int _close(int file)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800109a:	605a      	str	r2, [r3, #4]
  return 0;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <_isatty>:

int _isatty(int file)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e4:	4a14      	ldr	r2, [pc, #80]	@ (8001138 <_sbrk+0x5c>)
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <_sbrk+0x60>)
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f0:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f8:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <_sbrk+0x64>)
 80010fa:	4a12      	ldr	r2, [pc, #72]	@ (8001144 <_sbrk+0x68>)
 80010fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fe:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	429a      	cmp	r2, r3
 800110a:	d207      	bcs.n	800111c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800110c:	f006 f894 	bl	8007238 <__errno>
 8001110:	4603      	mov	r3, r0
 8001112:	220c      	movs	r2, #12
 8001114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	e009      	b.n	8001130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800111c:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001122:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	4a05      	ldr	r2, [pc, #20]	@ (8001140 <_sbrk+0x64>)
 800112c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20008000 	.word	0x20008000
 800113c:	00000400 	.word	0x00000400
 8001140:	200001b4 	.word	0x200001b4
 8001144:	20000560 	.word	0x20000560

08001148 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <SystemInit+0x28>)
 800114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001152:	4a07      	ldr	r2, [pc, #28]	@ (8001170 <SystemInit+0x28>)
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 800115c:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <SystemInit+0x28>)
 800115e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001162:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b098      	sub	sp, #96	@ 0x60
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001186:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]
 8001196:	615a      	str	r2, [r3, #20]
 8001198:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2234      	movs	r2, #52	@ 0x34
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f005 fffb 	bl	800719c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011a6:	4b41      	ldr	r3, [pc, #260]	@ (80012ac <MX_TIM1_Init+0x138>)
 80011a8:	4a41      	ldr	r2, [pc, #260]	@ (80012b0 <MX_TIM1_Init+0x13c>)
 80011aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011ac:	4b3f      	ldr	r3, [pc, #252]	@ (80012ac <MX_TIM1_Init+0x138>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b2:	4b3e      	ldr	r3, [pc, #248]	@ (80012ac <MX_TIM1_Init+0x138>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 80011b8:	4b3c      	ldr	r3, [pc, #240]	@ (80012ac <MX_TIM1_Init+0x138>)
 80011ba:	f242 1233 	movw	r2, #8499	@ 0x2133
 80011be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c0:	4b3a      	ldr	r3, [pc, #232]	@ (80012ac <MX_TIM1_Init+0x138>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011c6:	4b39      	ldr	r3, [pc, #228]	@ (80012ac <MX_TIM1_Init+0x138>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011cc:	4b37      	ldr	r3, [pc, #220]	@ (80012ac <MX_TIM1_Init+0x138>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011d2:	4836      	ldr	r0, [pc, #216]	@ (80012ac <MX_TIM1_Init+0x138>)
 80011d4:	f003 fe9e 	bl	8004f14 <HAL_TIM_PWM_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80011de:	f7ff fe25 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011f2:	4619      	mov	r1, r3
 80011f4:	482d      	ldr	r0, [pc, #180]	@ (80012ac <MX_TIM1_Init+0x138>)
 80011f6:	f004 fda7 	bl	8005d48 <HAL_TIMEx_MasterConfigSynchronization>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001200:	f7ff fe14 	bl	8000e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001204:	2360      	movs	r3, #96	@ 0x60
 8001206:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 3400;
 8001208:	f640 5348 	movw	r3, #3400	@ 0xd48
 800120c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800120e:	2300      	movs	r3, #0
 8001210:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001212:	2300      	movs	r3, #0
 8001214:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001222:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001226:	2200      	movs	r2, #0
 8001228:	4619      	mov	r1, r3
 800122a:	4820      	ldr	r0, [pc, #128]	@ (80012ac <MX_TIM1_Init+0x138>)
 800122c:	f004 f8be 	bl	80053ac <HAL_TIM_PWM_ConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001236:	f7ff fdf9 	bl	8000e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800123a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800123e:	2204      	movs	r2, #4
 8001240:	4619      	mov	r1, r3
 8001242:	481a      	ldr	r0, [pc, #104]	@ (80012ac <MX_TIM1_Init+0x138>)
 8001244:	f004 f8b2 	bl	80053ac <HAL_TIM_PWM_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 800124e:	f7ff fded 	bl	8000e2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001266:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800126a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001278:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800127c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001282:	2300      	movs	r3, #0
 8001284:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	4619      	mov	r1, r3
 800128e:	4807      	ldr	r0, [pc, #28]	@ (80012ac <MX_TIM1_Init+0x138>)
 8001290:	f004 fddc 	bl	8005e4c <HAL_TIMEx_ConfigBreakDeadTime>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800129a:	f7ff fdc7 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800129e:	4803      	ldr	r0, [pc, #12]	@ (80012ac <MX_TIM1_Init+0x138>)
 80012a0:	f000 fa02 	bl	80016a8 <HAL_TIM_MspPostInit>

}
 80012a4:	bf00      	nop
 80012a6:	3760      	adds	r7, #96	@ 0x60
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200001b8 	.word	0x200001b8
 80012b0:	40012c00 	.word	0x40012c00

080012b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08c      	sub	sp, #48	@ 0x30
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	2224      	movs	r2, #36	@ 0x24
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f005 ff6a 	bl	800719c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012d2:	4b21      	ldr	r3, [pc, #132]	@ (8001358 <MX_TIM3_Init+0xa4>)
 80012d4:	4a21      	ldr	r2, [pc, #132]	@ (800135c <MX_TIM3_Init+0xa8>)
 80012d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001358 <MX_TIM3_Init+0xa4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012de:	4b1e      	ldr	r3, [pc, #120]	@ (8001358 <MX_TIM3_Init+0xa4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001358 <MX_TIM3_Init+0xa4>)
 80012e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001358 <MX_TIM3_Init+0xa4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f2:	4b19      	ldr	r3, [pc, #100]	@ (8001358 <MX_TIM3_Init+0xa4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001300:	2301      	movs	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001310:	2301      	movs	r3, #1
 8001312:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4619      	mov	r1, r3
 8001322:	480d      	ldr	r0, [pc, #52]	@ (8001358 <MX_TIM3_Init+0xa4>)
 8001324:	f003 fe4d 	bl	8004fc2 <HAL_TIM_Encoder_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800132e:	f7ff fd7d 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800133a:	463b      	mov	r3, r7
 800133c:	4619      	mov	r1, r3
 800133e:	4806      	ldr	r0, [pc, #24]	@ (8001358 <MX_TIM3_Init+0xa4>)
 8001340:	f004 fd02 	bl	8005d48 <HAL_TIMEx_MasterConfigSynchronization>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800134a:	f7ff fd6f 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	3730      	adds	r7, #48	@ 0x30
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000204 	.word	0x20000204
 800135c:	40000400 	.word	0x40000400

08001360 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08c      	sub	sp, #48	@ 0x30
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	2224      	movs	r2, #36	@ 0x24
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f005 ff14 	bl	800719c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001374:	463b      	mov	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800137e:	4b21      	ldr	r3, [pc, #132]	@ (8001404 <MX_TIM4_Init+0xa4>)
 8001380:	4a21      	ldr	r2, [pc, #132]	@ (8001408 <MX_TIM4_Init+0xa8>)
 8001382:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001384:	4b1f      	ldr	r3, [pc, #124]	@ (8001404 <MX_TIM4_Init+0xa4>)
 8001386:	2200      	movs	r2, #0
 8001388:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138a:	4b1e      	ldr	r3, [pc, #120]	@ (8001404 <MX_TIM4_Init+0xa4>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001390:	4b1c      	ldr	r3, [pc, #112]	@ (8001404 <MX_TIM4_Init+0xa4>)
 8001392:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001396:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001398:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <MX_TIM4_Init+0xa4>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139e:	4b19      	ldr	r3, [pc, #100]	@ (8001404 <MX_TIM4_Init+0xa4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013ac:	2301      	movs	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013bc:	2301      	movs	r3, #1
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	4619      	mov	r1, r3
 80013ce:	480d      	ldr	r0, [pc, #52]	@ (8001404 <MX_TIM4_Init+0xa4>)
 80013d0:	f003 fdf7 	bl	8004fc2 <HAL_TIM_Encoder_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80013da:	f7ff fd27 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	4619      	mov	r1, r3
 80013ea:	4806      	ldr	r0, [pc, #24]	@ (8001404 <MX_TIM4_Init+0xa4>)
 80013ec:	f004 fcac 	bl	8005d48 <HAL_TIMEx_MasterConfigSynchronization>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80013f6:	f7ff fd19 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	3730      	adds	r7, #48	@ 0x30
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000250 	.word	0x20000250
 8001408:	40000800 	.word	0x40000800

0800140c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b094      	sub	sp, #80	@ 0x50
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001412:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]
 8001422:	615a      	str	r2, [r3, #20]
 8001424:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001426:	463b      	mov	r3, r7
 8001428:	2234      	movs	r2, #52	@ 0x34
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f005 feb5 	bl	800719c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001432:	4b31      	ldr	r3, [pc, #196]	@ (80014f8 <MX_TIM16_Init+0xec>)
 8001434:	4a31      	ldr	r2, [pc, #196]	@ (80014fc <MX_TIM16_Init+0xf0>)
 8001436:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001438:	4b2f      	ldr	r3, [pc, #188]	@ (80014f8 <MX_TIM16_Init+0xec>)
 800143a:	2200      	movs	r2, #0
 800143c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143e:	4b2e      	ldr	r3, [pc, #184]	@ (80014f8 <MX_TIM16_Init+0xec>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001444:	4b2c      	ldr	r3, [pc, #176]	@ (80014f8 <MX_TIM16_Init+0xec>)
 8001446:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800144a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144c:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <MX_TIM16_Init+0xec>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001452:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <MX_TIM16_Init+0xec>)
 8001454:	2200      	movs	r2, #0
 8001456:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001458:	4b27      	ldr	r3, [pc, #156]	@ (80014f8 <MX_TIM16_Init+0xec>)
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800145e:	4826      	ldr	r0, [pc, #152]	@ (80014f8 <MX_TIM16_Init+0xec>)
 8001460:	f003 fc96 	bl	8004d90 <HAL_TIM_Base_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800146a:	f7ff fcdf 	bl	8000e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800146e:	4822      	ldr	r0, [pc, #136]	@ (80014f8 <MX_TIM16_Init+0xec>)
 8001470:	f003 fd50 	bl	8004f14 <HAL_TIM_PWM_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800147a:	f7ff fcd7 	bl	8000e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800147e:	2360      	movs	r3, #96	@ 0x60
 8001480:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001486:	2300      	movs	r3, #0
 8001488:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800148a:	2300      	movs	r3, #0
 800148c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800149a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800149e:	2200      	movs	r2, #0
 80014a0:	4619      	mov	r1, r3
 80014a2:	4815      	ldr	r0, [pc, #84]	@ (80014f8 <MX_TIM16_Init+0xec>)
 80014a4:	f003 ff82 	bl	80053ac <HAL_TIM_PWM_ConfigChannel>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80014ae:	f7ff fcbd 	bl	8000e2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80014d4:	463b      	mov	r3, r7
 80014d6:	4619      	mov	r1, r3
 80014d8:	4807      	ldr	r0, [pc, #28]	@ (80014f8 <MX_TIM16_Init+0xec>)
 80014da:	f004 fcb7 	bl	8005e4c <HAL_TIMEx_ConfigBreakDeadTime>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80014e4:	f7ff fca2 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80014e8:	4803      	ldr	r0, [pc, #12]	@ (80014f8 <MX_TIM16_Init+0xec>)
 80014ea:	f000 f8dd 	bl	80016a8 <HAL_TIM_MspPostInit>

}
 80014ee:	bf00      	nop
 80014f0:	3750      	adds	r7, #80	@ 0x50
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000029c 	.word	0x2000029c
 80014fc:	40014400 	.word	0x40014400

08001500 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0a      	ldr	r2, [pc, #40]	@ (8001538 <HAL_TIM_PWM_MspInit+0x38>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d10b      	bne.n	800152a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001512:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <HAL_TIM_PWM_MspInit+0x3c>)
 8001514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001516:	4a09      	ldr	r2, [pc, #36]	@ (800153c <HAL_TIM_PWM_MspInit+0x3c>)
 8001518:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800151c:	6613      	str	r3, [r2, #96]	@ 0x60
 800151e:	4b07      	ldr	r3, [pc, #28]	@ (800153c <HAL_TIM_PWM_MspInit+0x3c>)
 8001520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001522:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800152a:	bf00      	nop
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40012c00 	.word	0x40012c00
 800153c:	40021000 	.word	0x40021000

08001540 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08c      	sub	sp, #48	@ 0x30
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a3d      	ldr	r2, [pc, #244]	@ (8001654 <HAL_TIM_Encoder_MspInit+0x114>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d144      	bne.n	80015ec <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001562:	4b3d      	ldr	r3, [pc, #244]	@ (8001658 <HAL_TIM_Encoder_MspInit+0x118>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001566:	4a3c      	ldr	r2, [pc, #240]	@ (8001658 <HAL_TIM_Encoder_MspInit+0x118>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	6593      	str	r3, [r2, #88]	@ 0x58
 800156e:	4b3a      	ldr	r3, [pc, #232]	@ (8001658 <HAL_TIM_Encoder_MspInit+0x118>)
 8001570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	61bb      	str	r3, [r7, #24]
 8001578:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	4b37      	ldr	r3, [pc, #220]	@ (8001658 <HAL_TIM_Encoder_MspInit+0x118>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157e:	4a36      	ldr	r2, [pc, #216]	@ (8001658 <HAL_TIM_Encoder_MspInit+0x118>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001586:	4b34      	ldr	r3, [pc, #208]	@ (8001658 <HAL_TIM_Encoder_MspInit+0x118>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	4b31      	ldr	r3, [pc, #196]	@ (8001658 <HAL_TIM_Encoder_MspInit+0x118>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001596:	4a30      	ldr	r2, [pc, #192]	@ (8001658 <HAL_TIM_Encoder_MspInit+0x118>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159e:	4b2e      	ldr	r3, [pc, #184]	@ (8001658 <HAL_TIM_Encoder_MspInit+0x118>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PHASEB2_Pin;
 80015aa:	2340      	movs	r3, #64	@ 0x40
 80015ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015ba:	2302      	movs	r3, #2
 80015bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PHASEB2_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	4619      	mov	r1, r3
 80015c4:	4825      	ldr	r0, [pc, #148]	@ (800165c <HAL_TIM_Encoder_MspInit+0x11c>)
 80015c6:	f001 fb93 	bl	8002cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PHASEA2_Pin;
 80015ca:	2320      	movs	r3, #32
 80015cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015da:	2302      	movs	r3, #2
 80015dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PHASEA2_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	4619      	mov	r1, r3
 80015e4:	481e      	ldr	r0, [pc, #120]	@ (8001660 <HAL_TIM_Encoder_MspInit+0x120>)
 80015e6:	f001 fb83 	bl	8002cf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80015ea:	e02e      	b.n	800164a <HAL_TIM_Encoder_MspInit+0x10a>
  else if(tim_encoderHandle->Instance==TIM4)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001664 <HAL_TIM_Encoder_MspInit+0x124>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d129      	bne.n	800164a <HAL_TIM_Encoder_MspInit+0x10a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015f6:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <HAL_TIM_Encoder_MspInit+0x118>)
 80015f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fa:	4a17      	ldr	r2, [pc, #92]	@ (8001658 <HAL_TIM_Encoder_MspInit+0x118>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6593      	str	r3, [r2, #88]	@ 0x58
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <HAL_TIM_Encoder_MspInit+0x118>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <HAL_TIM_Encoder_MspInit+0x118>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	4a11      	ldr	r2, [pc, #68]	@ (8001658 <HAL_TIM_Encoder_MspInit+0x118>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161a:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <HAL_TIM_Encoder_MspInit+0x118>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PHASEB1_Pin|PHASEA1_Pin;
 8001626:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800162a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001638:	230a      	movs	r3, #10
 800163a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001646:	f001 fb53 	bl	8002cf0 <HAL_GPIO_Init>
}
 800164a:	bf00      	nop
 800164c:	3730      	adds	r7, #48	@ 0x30
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40000400 	.word	0x40000400
 8001658:	40021000 	.word	0x40021000
 800165c:	48000800 	.word	0x48000800
 8001660:	48000400 	.word	0x48000400
 8001664:	40000800 	.word	0x40000800

08001668 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0a      	ldr	r2, [pc, #40]	@ (80016a0 <HAL_TIM_Base_MspInit+0x38>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d10b      	bne.n	8001692 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800167a:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <HAL_TIM_Base_MspInit+0x3c>)
 800167c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800167e:	4a09      	ldr	r2, [pc, #36]	@ (80016a4 <HAL_TIM_Base_MspInit+0x3c>)
 8001680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001684:	6613      	str	r3, [r2, #96]	@ 0x60
 8001686:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <HAL_TIM_Base_MspInit+0x3c>)
 8001688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800168a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40014400 	.word	0x40014400
 80016a4:	40021000 	.word	0x40021000

080016a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	@ 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a32      	ldr	r2, [pc, #200]	@ (8001790 <HAL_TIM_MspPostInit+0xe8>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d13b      	bne.n	8001742 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ca:	4b32      	ldr	r3, [pc, #200]	@ (8001794 <HAL_TIM_MspPostInit+0xec>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ce:	4a31      	ldr	r2, [pc, #196]	@ (8001794 <HAL_TIM_MspPostInit+0xec>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001794 <HAL_TIM_MspPostInit+0xec>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001794 <HAL_TIM_MspPostInit+0xec>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001794 <HAL_TIM_MspPostInit+0xec>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ee:	4b29      	ldr	r3, [pc, #164]	@ (8001794 <HAL_TIM_MspPostInit+0xec>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = REV2_Pin|REV1_Pin;
 80016fa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80016fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800170c:	2306      	movs	r3, #6
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4619      	mov	r1, r3
 8001716:	4820      	ldr	r0, [pc, #128]	@ (8001798 <HAL_TIM_MspPostInit+0xf0>)
 8001718:	f001 faea 	bl	8002cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FWD2_Pin|FWD1_Pin;
 800171c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800172e:	2306      	movs	r3, #6
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800173c:	f001 fad8 	bl	8002cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001740:	e021      	b.n	8001786 <HAL_TIM_MspPostInit+0xde>
  else if(timHandle->Instance==TIM16)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a15      	ldr	r2, [pc, #84]	@ (800179c <HAL_TIM_MspPostInit+0xf4>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d11c      	bne.n	8001786 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <HAL_TIM_MspPostInit+0xec>)
 800174e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001750:	4a10      	ldr	r2, [pc, #64]	@ (8001794 <HAL_TIM_MspPostInit+0xec>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001758:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <HAL_TIM_MspPostInit+0xec>)
 800175a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M_SCTR_LIDAR_Pin;
 8001764:	2340      	movs	r3, #64	@ 0x40
 8001766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001774:	2301      	movs	r3, #1
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001782:	f001 fab5 	bl	8002cf0 <HAL_GPIO_Init>
}
 8001786:	bf00      	nop
 8001788:	3728      	adds	r7, #40	@ 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40012c00 	.word	0x40012c00
 8001794:	40021000 	.word	0x40021000
 8001798:	48000400 	.word	0x48000400
 800179c:	40014400 	.word	0x40014400

080017a0 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80017a4:	4b22      	ldr	r3, [pc, #136]	@ (8001830 <MX_UART4_Init+0x90>)
 80017a6:	4a23      	ldr	r2, [pc, #140]	@ (8001834 <MX_UART4_Init+0x94>)
 80017a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80017aa:	4b21      	ldr	r3, [pc, #132]	@ (8001830 <MX_UART4_Init+0x90>)
 80017ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80017b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <MX_UART4_Init+0x90>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80017b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001830 <MX_UART4_Init+0x90>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80017be:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <MX_UART4_Init+0x90>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <MX_UART4_Init+0x90>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ca:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <MX_UART4_Init+0x90>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d0:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <MX_UART4_Init+0x90>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d6:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <MX_UART4_Init+0x90>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017dc:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <MX_UART4_Init+0x90>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017e2:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <MX_UART4_Init+0x90>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80017e8:	4811      	ldr	r0, [pc, #68]	@ (8001830 <MX_UART4_Init+0x90>)
 80017ea:	f004 fc01 	bl	8005ff0 <HAL_UART_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80017f4:	f7ff fb1a 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017f8:	2100      	movs	r1, #0
 80017fa:	480d      	ldr	r0, [pc, #52]	@ (8001830 <MX_UART4_Init+0x90>)
 80017fc:	f005 f9fa 	bl	8006bf4 <HAL_UARTEx_SetTxFifoThreshold>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001806:	f7ff fb11 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800180a:	2100      	movs	r1, #0
 800180c:	4808      	ldr	r0, [pc, #32]	@ (8001830 <MX_UART4_Init+0x90>)
 800180e:	f005 fa2f 	bl	8006c70 <HAL_UARTEx_SetRxFifoThreshold>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001818:	f7ff fb08 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800181c:	4804      	ldr	r0, [pc, #16]	@ (8001830 <MX_UART4_Init+0x90>)
 800181e:	f005 f9b0 	bl	8006b82 <HAL_UARTEx_DisableFifoMode>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001828:	f7ff fb00 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	200002e8 	.word	0x200002e8
 8001834:	40004c00 	.word	0x40004c00

08001838 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800183c:	4b22      	ldr	r3, [pc, #136]	@ (80018c8 <MX_USART3_UART_Init+0x90>)
 800183e:	4a23      	ldr	r2, [pc, #140]	@ (80018cc <MX_USART3_UART_Init+0x94>)
 8001840:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001842:	4b21      	ldr	r3, [pc, #132]	@ (80018c8 <MX_USART3_UART_Init+0x90>)
 8001844:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001848:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800184a:	4b1f      	ldr	r3, [pc, #124]	@ (80018c8 <MX_USART3_UART_Init+0x90>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001850:	4b1d      	ldr	r3, [pc, #116]	@ (80018c8 <MX_USART3_UART_Init+0x90>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001856:	4b1c      	ldr	r3, [pc, #112]	@ (80018c8 <MX_USART3_UART_Init+0x90>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800185c:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <MX_USART3_UART_Init+0x90>)
 800185e:	220c      	movs	r2, #12
 8001860:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001862:	4b19      	ldr	r3, [pc, #100]	@ (80018c8 <MX_USART3_UART_Init+0x90>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001868:	4b17      	ldr	r3, [pc, #92]	@ (80018c8 <MX_USART3_UART_Init+0x90>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800186e:	4b16      	ldr	r3, [pc, #88]	@ (80018c8 <MX_USART3_UART_Init+0x90>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001874:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <MX_USART3_UART_Init+0x90>)
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800187a:	4b13      	ldr	r3, [pc, #76]	@ (80018c8 <MX_USART3_UART_Init+0x90>)
 800187c:	2200      	movs	r2, #0
 800187e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001880:	4811      	ldr	r0, [pc, #68]	@ (80018c8 <MX_USART3_UART_Init+0x90>)
 8001882:	f004 fbb5 	bl	8005ff0 <HAL_UART_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800188c:	f7ff face 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001890:	2100      	movs	r1, #0
 8001892:	480d      	ldr	r0, [pc, #52]	@ (80018c8 <MX_USART3_UART_Init+0x90>)
 8001894:	f005 f9ae 	bl	8006bf4 <HAL_UARTEx_SetTxFifoThreshold>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800189e:	f7ff fac5 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018a2:	2100      	movs	r1, #0
 80018a4:	4808      	ldr	r0, [pc, #32]	@ (80018c8 <MX_USART3_UART_Init+0x90>)
 80018a6:	f005 f9e3 	bl	8006c70 <HAL_UARTEx_SetRxFifoThreshold>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80018b0:	f7ff fabc 	bl	8000e2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80018b4:	4804      	ldr	r0, [pc, #16]	@ (80018c8 <MX_USART3_UART_Init+0x90>)
 80018b6:	f005 f964 	bl	8006b82 <HAL_UARTEx_DisableFifoMode>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80018c0:	f7ff fab4 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	2000037c 	.word	0x2000037c
 80018cc:	40004800 	.word	0x40004800

080018d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b09c      	sub	sp, #112	@ 0x70
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e8:	f107 0318 	add.w	r3, r7, #24
 80018ec:	2244      	movs	r2, #68	@ 0x44
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f005 fc53 	bl	800719c <memset>
  if(uartHandle->Instance==UART4)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a3d      	ldr	r2, [pc, #244]	@ (80019f0 <HAL_UART_MspInit+0x120>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d137      	bne.n	8001970 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001900:	2308      	movs	r3, #8
 8001902:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001904:	2300      	movs	r3, #0
 8001906:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001908:	f107 0318 	add.w	r3, r7, #24
 800190c:	4618      	mov	r0, r3
 800190e:	f003 f84f 	bl	80049b0 <HAL_RCCEx_PeriphCLKConfig>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001918:	f7ff fa88 	bl	8000e2c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800191c:	4b35      	ldr	r3, [pc, #212]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 800191e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001920:	4a34      	ldr	r2, [pc, #208]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 8001922:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001926:	6593      	str	r3, [r2, #88]	@ 0x58
 8001928:	4b32      	ldr	r3, [pc, #200]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 800192a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001934:	4b2f      	ldr	r3, [pc, #188]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 8001936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001938:	4a2e      	ldr	r2, [pc, #184]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001940:	4b2c      	ldr	r3, [pc, #176]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 8001942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_SWD_Pin|RX_SWD_Pin;
 800194c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001950:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800195e:	2305      	movs	r3, #5
 8001960:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001962:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001966:	4619      	mov	r1, r3
 8001968:	4823      	ldr	r0, [pc, #140]	@ (80019f8 <HAL_UART_MspInit+0x128>)
 800196a:	f001 f9c1 	bl	8002cf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800196e:	e03b      	b.n	80019e8 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a21      	ldr	r2, [pc, #132]	@ (80019fc <HAL_UART_MspInit+0x12c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d136      	bne.n	80019e8 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800197a:	2304      	movs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001982:	f107 0318 	add.w	r3, r7, #24
 8001986:	4618      	mov	r0, r3
 8001988:	f003 f812 	bl	80049b0 <HAL_RCCEx_PeriphCLKConfig>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001992:	f7ff fa4b 	bl	8000e2c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001996:	4b17      	ldr	r3, [pc, #92]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 8001998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199a:	4a16      	ldr	r2, [pc, #88]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 800199c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a2:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ae:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b2:	4a10      	ldr	r2, [pc, #64]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ba:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <HAL_UART_MspInit+0x124>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LIDAR_RX_Pin|LIDAR_TX_Pin;
 80019c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019cc:	2302      	movs	r3, #2
 80019ce:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2300      	movs	r3, #0
 80019d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019d8:	2307      	movs	r3, #7
 80019da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019dc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80019e0:	4619      	mov	r1, r3
 80019e2:	4807      	ldr	r0, [pc, #28]	@ (8001a00 <HAL_UART_MspInit+0x130>)
 80019e4:	f001 f984 	bl	8002cf0 <HAL_GPIO_Init>
}
 80019e8:	bf00      	nop
 80019ea:	3770      	adds	r7, #112	@ 0x70
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40004c00 	.word	0x40004c00
 80019f4:	40021000 	.word	0x40021000
 80019f8:	48000800 	.word	0x48000800
 80019fc:	40004800 	.word	0x40004800
 8001a00:	48000400 	.word	0x48000400

08001a04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a04:	480d      	ldr	r0, [pc, #52]	@ (8001a3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a06:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a08:	f7ff fb9e 	bl	8001148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a0c:	480c      	ldr	r0, [pc, #48]	@ (8001a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a0e:	490d      	ldr	r1, [pc, #52]	@ (8001a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a10:	4a0d      	ldr	r2, [pc, #52]	@ (8001a48 <LoopForever+0xe>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a14:	e002      	b.n	8001a1c <LoopCopyDataInit>

08001a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1a:	3304      	adds	r3, #4

08001a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a20:	d3f9      	bcc.n	8001a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a22:	4a0a      	ldr	r2, [pc, #40]	@ (8001a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a24:	4c0a      	ldr	r4, [pc, #40]	@ (8001a50 <LoopForever+0x16>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a28:	e001      	b.n	8001a2e <LoopFillZerobss>

08001a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a2c:	3204      	adds	r2, #4

08001a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a30:	d3fb      	bcc.n	8001a2a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001a32:	f005 fc07 	bl	8007244 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a36:	f7ff f93d 	bl	8000cb4 <main>

08001a3a <LoopForever>:

LoopForever:
    b LoopForever
 8001a3a:	e7fe      	b.n	8001a3a <LoopForever>
  ldr   r0, =_estack
 8001a3c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a44:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001a48:	08008054 	.word	0x08008054
  ldr r2, =_sbss
 8001a4c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001a50:	20000560 	.word	0x20000560

08001a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a54:	e7fe      	b.n	8001a54 <ADC1_2_IRQHandler>

08001a56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f001 f912 	bl	8002c8a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a66:	200f      	movs	r0, #15
 8001a68:	f7ff fa12 	bl	8000e90 <HAL_InitTick>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	71fb      	strb	r3, [r7, #7]
 8001a76:	e001      	b.n	8001a7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a78:	f7ff f9de 	bl	8000e38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a7c:	79fb      	ldrb	r3, [r7, #7]

}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a8c:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <HAL_IncTick+0x1c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <HAL_IncTick+0x20>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4413      	add	r3, r2
 8001a96:	4a03      	ldr	r2, [pc, #12]	@ (8001aa4 <HAL_IncTick+0x1c>)
 8001a98:	6013      	str	r3, [r2, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	20000410 	.word	0x20000410
 8001aa8:	20000008 	.word	0x20000008

08001aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	@ (8001ac0 <HAL_GetTick+0x14>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000410 	.word	0x20000410

08001ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001acc:	f7ff ffee 	bl	8001aac <HAL_GetTick>
 8001ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001adc:	d004      	beq.n	8001ae8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ade:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <HAL_Delay+0x40>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ae8:	bf00      	nop
 8001aea:	f7ff ffdf 	bl	8001aac <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d8f7      	bhi.n	8001aea <HAL_Delay+0x26>
  {
  }
}
 8001afa:	bf00      	nop
 8001afc:	bf00      	nop
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000008 	.word	0x20000008

08001b08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	609a      	str	r2, [r3, #8]
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	609a      	str	r2, [r3, #8]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	3360      	adds	r3, #96	@ 0x60
 8001b82:	461a      	mov	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b08      	ldr	r3, [pc, #32]	@ (8001bb4 <LL_ADC_SetOffset+0x44>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ba8:	bf00      	nop
 8001baa:	371c      	adds	r7, #28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	03fff000 	.word	0x03fff000

08001bb8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3360      	adds	r3, #96	@ 0x60
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3360      	adds	r3, #96	@ 0x60
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c0e:	bf00      	nop
 8001c10:	371c      	adds	r7, #28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b087      	sub	sp, #28
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	3360      	adds	r3, #96	@ 0x60
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c44:	bf00      	nop
 8001c46:	371c      	adds	r7, #28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	3360      	adds	r3, #96	@ 0x60
 8001c60:	461a      	mov	r2, r3
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	431a      	orrs	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c7a:	bf00      	nop
 8001c7c:	371c      	adds	r7, #28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	615a      	str	r2, [r3, #20]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3330      	adds	r3, #48	@ 0x30
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	4413      	add	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	f003 031f 	and.w	r3, r3, #31
 8001cd6:	211f      	movs	r1, #31
 8001cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	401a      	ands	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	0e9b      	lsrs	r3, r3, #26
 8001ce4:	f003 011f 	and.w	r1, r3, #31
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f003 031f 	and.w	r3, r3, #31
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cf8:	bf00      	nop
 8001cfa:	371c      	adds	r7, #28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3314      	adds	r3, #20
 8001d14:	461a      	mov	r2, r3
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	0e5b      	lsrs	r3, r3, #25
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	4413      	add	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	0d1b      	lsrs	r3, r3, #20
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	2107      	movs	r1, #7
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	401a      	ands	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	0d1b      	lsrs	r3, r3, #20
 8001d3e:	f003 031f 	and.w	r3, r3, #31
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d4e:	bf00      	nop
 8001d50:	371c      	adds	r7, #28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d74:	43db      	mvns	r3, r3
 8001d76:	401a      	ands	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f003 0318 	and.w	r3, r3, #24
 8001d7e:	4908      	ldr	r1, [pc, #32]	@ (8001da0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d80:	40d9      	lsrs	r1, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	400b      	ands	r3, r1
 8001d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	0007ffff 	.word	0x0007ffff

08001da4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001db4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6093      	str	r3, [r2, #8]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001dd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ddc:	d101      	bne.n	8001de2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e04:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e2c:	d101      	bne.n	8001e32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <LL_ADC_IsEnabled+0x18>
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <LL_ADC_IsEnabled+0x1a>
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d101      	bne.n	8001e7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d101      	bne.n	8001ea4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001eb4:	b590      	push	{r4, r7, lr}
 8001eb6:	b089      	sub	sp, #36	@ 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e167      	b.n	800219e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d109      	bne.n	8001ef0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7fe fd41 	bl	8000964 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff67 	bl	8001dc8 <LL_ADC_IsDeepPowerDownEnabled>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d004      	beq.n	8001f0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff4d 	bl	8001da4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ff82 	bl	8001e18 <LL_ADC_IsInternalRegulatorEnabled>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d115      	bne.n	8001f46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff ff66 	bl	8001df0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f24:	4ba0      	ldr	r3, [pc, #640]	@ (80021a8 <HAL_ADC_Init+0x2f4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	099b      	lsrs	r3, r3, #6
 8001f2a:	4aa0      	ldr	r2, [pc, #640]	@ (80021ac <HAL_ADC_Init+0x2f8>)
 8001f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f30:	099b      	lsrs	r3, r3, #6
 8001f32:	3301      	adds	r3, #1
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f38:	e002      	b.n	8001f40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f9      	bne.n	8001f3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ff64 	bl	8001e18 <LL_ADC_IsInternalRegulatorEnabled>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10d      	bne.n	8001f72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5a:	f043 0210 	orr.w	r2, r3, #16
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f66:	f043 0201 	orr.w	r2, r3, #1
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff75 	bl	8001e66 <LL_ADC_REG_IsConversionOngoing>
 8001f7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f82:	f003 0310 	and.w	r3, r3, #16
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f040 8100 	bne.w	800218c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 80fc 	bne.w	800218c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f98:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f9c:	f043 0202 	orr.w	r2, r3, #2
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff49 	bl	8001e40 <LL_ADC_IsEnabled>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d111      	bne.n	8001fd8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fb4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001fb8:	f7ff ff42 	bl	8001e40 <LL_ADC_IsEnabled>
 8001fbc:	4604      	mov	r4, r0
 8001fbe:	487c      	ldr	r0, [pc, #496]	@ (80021b0 <HAL_ADC_Init+0x2fc>)
 8001fc0:	f7ff ff3e 	bl	8001e40 <LL_ADC_IsEnabled>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4323      	orrs	r3, r4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d105      	bne.n	8001fd8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4878      	ldr	r0, [pc, #480]	@ (80021b4 <HAL_ADC_Init+0x300>)
 8001fd4:	f7ff fd98 	bl	8001b08 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7f5b      	ldrb	r3, [r3, #29]
 8001fdc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fe2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001fe8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001fee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ff6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002002:	2b01      	cmp	r3, #1
 8002004:	d106      	bne.n	8002014 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200a:	3b01      	subs	r3, #1
 800200c:	045b      	lsls	r3, r3, #17
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002018:	2b00      	cmp	r3, #0
 800201a:	d009      	beq.n	8002030 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002020:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002028:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	4b60      	ldr	r3, [pc, #384]	@ (80021b8 <HAL_ADC_Init+0x304>)
 8002038:	4013      	ands	r3, r2
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	69b9      	ldr	r1, [r7, #24]
 8002040:	430b      	orrs	r3, r1
 8002042:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ff14 	bl	8001e8c <LL_ADC_INJ_IsConversionOngoing>
 8002064:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d16d      	bne.n	8002148 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d16a      	bne.n	8002148 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002076:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800207e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800208e:	f023 0302 	bic.w	r3, r3, #2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	69b9      	ldr	r1, [r7, #24]
 8002098:	430b      	orrs	r3, r1
 800209a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d017      	beq.n	80020d4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80020b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80020bc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80020c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6911      	ldr	r1, [r2, #16]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	430b      	orrs	r3, r1
 80020ce:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80020d2:	e013      	b.n	80020fc <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80020e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80020f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020f8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002102:	2b01      	cmp	r3, #1
 8002104:	d118      	bne.n	8002138 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002110:	f023 0304 	bic.w	r3, r3, #4
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800211c:	4311      	orrs	r1, r2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002122:	4311      	orrs	r1, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002128:	430a      	orrs	r2, r1
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 0201 	orr.w	r2, r2, #1
 8002134:	611a      	str	r2, [r3, #16]
 8002136:	e007      	b.n	8002148 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d10c      	bne.n	800216a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	f023 010f 	bic.w	r1, r3, #15
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	1e5a      	subs	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	631a      	str	r2, [r3, #48]	@ 0x30
 8002168:	e007      	b.n	800217a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 020f 	bic.w	r2, r2, #15
 8002178:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800217e:	f023 0303 	bic.w	r3, r3, #3
 8002182:	f043 0201 	orr.w	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	65da      	str	r2, [r3, #92]	@ 0x5c
 800218a:	e007      	b.n	800219c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002190:	f043 0210 	orr.w	r2, r3, #16
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800219c:	7ffb      	ldrb	r3, [r7, #31]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3724      	adds	r7, #36	@ 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd90      	pop	{r4, r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000000 	.word	0x20000000
 80021ac:	053e2d63 	.word	0x053e2d63
 80021b0:	50000100 	.word	0x50000100
 80021b4:	50000300 	.word	0x50000300
 80021b8:	fff04007 	.word	0xfff04007

080021bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b0b6      	sub	sp, #216	@ 0xd8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d101      	bne.n	80021de <HAL_ADC_ConfigChannel+0x22>
 80021da:	2302      	movs	r3, #2
 80021dc:	e3c8      	b.n	8002970 <HAL_ADC_ConfigChannel+0x7b4>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fe3b 	bl	8001e66 <LL_ADC_REG_IsConversionOngoing>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 83ad 	bne.w	8002952 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	6859      	ldr	r1, [r3, #4]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	f7ff fd51 	bl	8001cac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fe29 	bl	8001e66 <LL_ADC_REG_IsConversionOngoing>
 8002214:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fe35 	bl	8001e8c <LL_ADC_INJ_IsConversionOngoing>
 8002222:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002226:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800222a:	2b00      	cmp	r3, #0
 800222c:	f040 81d9 	bne.w	80025e2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002230:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002234:	2b00      	cmp	r3, #0
 8002236:	f040 81d4 	bne.w	80025e2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002242:	d10f      	bne.n	8002264 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2200      	movs	r2, #0
 800224e:	4619      	mov	r1, r3
 8002250:	f7ff fd58 	bl	8001d04 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fd12 	bl	8001c86 <LL_ADC_SetSamplingTimeCommonConfig>
 8002262:	e00e      	b.n	8002282 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	6819      	ldr	r1, [r3, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	461a      	mov	r2, r3
 8002272:	f7ff fd47 	bl	8001d04 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fd02 	bl	8001c86 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	695a      	ldr	r2, [r3, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	08db      	lsrs	r3, r3, #3
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d022      	beq.n	80022ea <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6818      	ldr	r0, [r3, #0]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	6919      	ldr	r1, [r3, #16]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80022b4:	f7ff fc5c 	bl	8001b70 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	6919      	ldr	r1, [r3, #16]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	461a      	mov	r2, r3
 80022c6:	f7ff fca8 	bl	8001c1a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d102      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x124>
 80022da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022de:	e000      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x126>
 80022e0:	2300      	movs	r3, #0
 80022e2:	461a      	mov	r2, r3
 80022e4:	f7ff fcb4 	bl	8001c50 <LL_ADC_SetOffsetSaturation>
 80022e8:	e17b      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fc61 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10a      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x15a>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fc56 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 800230c:	4603      	mov	r3, r0
 800230e:	0e9b      	lsrs	r3, r3, #26
 8002310:	f003 021f 	and.w	r2, r3, #31
 8002314:	e01e      	b.n	8002354 <HAL_ADC_ConfigChannel+0x198>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2100      	movs	r1, #0
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fc4b 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002322:	4603      	mov	r3, r0
 8002324:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002334:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002338:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800233c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002344:	2320      	movs	r3, #32
 8002346:	e004      	b.n	8002352 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002348:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800234c:	fab3 f383 	clz	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <HAL_ADC_ConfigChannel+0x1b0>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	0e9b      	lsrs	r3, r3, #26
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	e018      	b.n	800239e <HAL_ADC_ConfigChannel+0x1e2>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002378:	fa93 f3a3 	rbit	r3, r3
 800237c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002380:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002384:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002388:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002390:	2320      	movs	r3, #32
 8002392:	e004      	b.n	800239e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002394:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800239e:	429a      	cmp	r2, r3
 80023a0:	d106      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2200      	movs	r2, #0
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fc1a 	bl	8001be4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2101      	movs	r1, #1
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fbfe 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 80023bc:	4603      	mov	r3, r0
 80023be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10a      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x220>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2101      	movs	r1, #1
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fbf3 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 80023d2:	4603      	mov	r3, r0
 80023d4:	0e9b      	lsrs	r3, r3, #26
 80023d6:	f003 021f 	and.w	r2, r3, #31
 80023da:	e01e      	b.n	800241a <HAL_ADC_ConfigChannel+0x25e>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2101      	movs	r1, #1
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fbe8 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 80023e8:	4603      	mov	r3, r0
 80023ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023f2:	fa93 f3a3 	rbit	r3, r3
 80023f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80023fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002402:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800240a:	2320      	movs	r3, #32
 800240c:	e004      	b.n	8002418 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800240e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002422:	2b00      	cmp	r3, #0
 8002424:	d105      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x276>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	0e9b      	lsrs	r3, r3, #26
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	e018      	b.n	8002464 <HAL_ADC_ConfigChannel+0x2a8>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002446:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800244a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800244e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002456:	2320      	movs	r3, #32
 8002458:	e004      	b.n	8002464 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800245a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002464:	429a      	cmp	r2, r3
 8002466:	d106      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2200      	movs	r2, #0
 800246e:	2101      	movs	r1, #1
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fbb7 	bl	8001be4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2102      	movs	r1, #2
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fb9b 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002482:	4603      	mov	r3, r0
 8002484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10a      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x2e6>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2102      	movs	r1, #2
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fb90 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002498:	4603      	mov	r3, r0
 800249a:	0e9b      	lsrs	r3, r3, #26
 800249c:	f003 021f 	and.w	r2, r3, #31
 80024a0:	e01e      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x324>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2102      	movs	r1, #2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fb85 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80024c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80024c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80024d0:	2320      	movs	r3, #32
 80024d2:	e004      	b.n	80024de <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80024d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d105      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x33c>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	e016      	b.n	8002526 <HAL_ADC_ConfigChannel+0x36a>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800250a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800250c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002510:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002518:	2320      	movs	r3, #32
 800251a:	e004      	b.n	8002526 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800251c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002520:	fab3 f383 	clz	r3, r3
 8002524:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002526:	429a      	cmp	r2, r3
 8002528:	d106      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2200      	movs	r2, #0
 8002530:	2102      	movs	r1, #2
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fb56 	bl	8001be4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2103      	movs	r1, #3
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fb3a 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002544:	4603      	mov	r3, r0
 8002546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10a      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x3a8>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2103      	movs	r1, #3
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fb2f 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 800255a:	4603      	mov	r3, r0
 800255c:	0e9b      	lsrs	r3, r3, #26
 800255e:	f003 021f 	and.w	r2, r3, #31
 8002562:	e017      	b.n	8002594 <HAL_ADC_ConfigChannel+0x3d8>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2103      	movs	r1, #3
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fb24 	bl	8001bb8 <LL_ADC_GetOffsetChannel>
 8002570:	4603      	mov	r3, r0
 8002572:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002574:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800257c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800257e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002586:	2320      	movs	r3, #32
 8002588:	e003      	b.n	8002592 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800258a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800258c:	fab3 f383 	clz	r3, r3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259c:	2b00      	cmp	r3, #0
 800259e:	d105      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x3f0>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	0e9b      	lsrs	r3, r3, #26
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	e011      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x414>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025b4:	fa93 f3a3 	rbit	r3, r3
 80025b8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80025ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80025be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80025c4:	2320      	movs	r3, #32
 80025c6:	e003      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80025c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025ca:	fab3 f383 	clz	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d106      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2200      	movs	r2, #0
 80025da:	2103      	movs	r1, #3
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fb01 	bl	8001be4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fc2a 	bl	8001e40 <LL_ADC_IsEnabled>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f040 8140 	bne.w	8002874 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	6819      	ldr	r1, [r3, #0]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	461a      	mov	r2, r3
 8002602:	f7ff fbab 	bl	8001d5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	4a8f      	ldr	r2, [pc, #572]	@ (8002848 <HAL_ADC_ConfigChannel+0x68c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	f040 8131 	bne.w	8002874 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10b      	bne.n	800263a <HAL_ADC_ConfigChannel+0x47e>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	0e9b      	lsrs	r3, r3, #26
 8002628:	3301      	adds	r3, #1
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	2b09      	cmp	r3, #9
 8002630:	bf94      	ite	ls
 8002632:	2301      	movls	r3, #1
 8002634:	2300      	movhi	r3, #0
 8002636:	b2db      	uxtb	r3, r3
 8002638:	e019      	b.n	800266e <HAL_ADC_ConfigChannel+0x4b2>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002640:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002642:	fa93 f3a3 	rbit	r3, r3
 8002646:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002648:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800264a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800264c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002652:	2320      	movs	r3, #32
 8002654:	e003      	b.n	800265e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002656:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002658:	fab3 f383 	clz	r3, r3
 800265c:	b2db      	uxtb	r3, r3
 800265e:	3301      	adds	r3, #1
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	2b09      	cmp	r3, #9
 8002666:	bf94      	ite	ls
 8002668:	2301      	movls	r3, #1
 800266a:	2300      	movhi	r3, #0
 800266c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800266e:	2b00      	cmp	r3, #0
 8002670:	d079      	beq.n	8002766 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267a:	2b00      	cmp	r3, #0
 800267c:	d107      	bne.n	800268e <HAL_ADC_ConfigChannel+0x4d2>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	0e9b      	lsrs	r3, r3, #26
 8002684:	3301      	adds	r3, #1
 8002686:	069b      	lsls	r3, r3, #26
 8002688:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800268c:	e015      	b.n	80026ba <HAL_ADC_ConfigChannel+0x4fe>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800269c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800269e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80026a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80026a6:	2320      	movs	r3, #32
 80026a8:	e003      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80026aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	3301      	adds	r3, #1
 80026b4:	069b      	lsls	r3, r3, #26
 80026b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d109      	bne.n	80026da <HAL_ADC_ConfigChannel+0x51e>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	0e9b      	lsrs	r3, r3, #26
 80026cc:	3301      	adds	r3, #1
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	2101      	movs	r1, #1
 80026d4:	fa01 f303 	lsl.w	r3, r1, r3
 80026d8:	e017      	b.n	800270a <HAL_ADC_ConfigChannel+0x54e>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80026e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80026ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80026f2:	2320      	movs	r3, #32
 80026f4:	e003      	b.n	80026fe <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80026f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026f8:	fab3 f383 	clz	r3, r3
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	3301      	adds	r3, #1
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	2101      	movs	r1, #1
 8002706:	fa01 f303 	lsl.w	r3, r1, r3
 800270a:	ea42 0103 	orr.w	r1, r2, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10a      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x574>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	0e9b      	lsrs	r3, r3, #26
 8002720:	3301      	adds	r3, #1
 8002722:	f003 021f 	and.w	r2, r3, #31
 8002726:	4613      	mov	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4413      	add	r3, r2
 800272c:	051b      	lsls	r3, r3, #20
 800272e:	e018      	b.n	8002762 <HAL_ADC_ConfigChannel+0x5a6>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800273e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002740:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002748:	2320      	movs	r3, #32
 800274a:	e003      	b.n	8002754 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800274c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	3301      	adds	r3, #1
 8002756:	f003 021f 	and.w	r2, r3, #31
 800275a:	4613      	mov	r3, r2
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	4413      	add	r3, r2
 8002760:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002762:	430b      	orrs	r3, r1
 8002764:	e081      	b.n	800286a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276e:	2b00      	cmp	r3, #0
 8002770:	d107      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x5c6>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	0e9b      	lsrs	r3, r3, #26
 8002778:	3301      	adds	r3, #1
 800277a:	069b      	lsls	r3, r3, #26
 800277c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002780:	e015      	b.n	80027ae <HAL_ADC_ConfigChannel+0x5f2>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002792:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800279a:	2320      	movs	r3, #32
 800279c:	e003      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800279e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	3301      	adds	r3, #1
 80027a8:	069b      	lsls	r3, r3, #26
 80027aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x612>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	0e9b      	lsrs	r3, r3, #26
 80027c0:	3301      	adds	r3, #1
 80027c2:	f003 031f 	and.w	r3, r3, #31
 80027c6:	2101      	movs	r1, #1
 80027c8:	fa01 f303 	lsl.w	r3, r1, r3
 80027cc:	e017      	b.n	80027fe <HAL_ADC_ConfigChannel+0x642>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	61fb      	str	r3, [r7, #28]
  return result;
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80027e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80027e6:	2320      	movs	r3, #32
 80027e8:	e003      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	3301      	adds	r3, #1
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	2101      	movs	r1, #1
 80027fa:	fa01 f303 	lsl.w	r3, r1, r3
 80027fe:	ea42 0103 	orr.w	r1, r2, r3
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10d      	bne.n	800282a <HAL_ADC_ConfigChannel+0x66e>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	0e9b      	lsrs	r3, r3, #26
 8002814:	3301      	adds	r3, #1
 8002816:	f003 021f 	and.w	r2, r3, #31
 800281a:	4613      	mov	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4413      	add	r3, r2
 8002820:	3b1e      	subs	r3, #30
 8002822:	051b      	lsls	r3, r3, #20
 8002824:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002828:	e01e      	b.n	8002868 <HAL_ADC_ConfigChannel+0x6ac>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	613b      	str	r3, [r7, #16]
  return result;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d104      	bne.n	800284c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002842:	2320      	movs	r3, #32
 8002844:	e006      	b.n	8002854 <HAL_ADC_ConfigChannel+0x698>
 8002846:	bf00      	nop
 8002848:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	fab3 f383 	clz	r3, r3
 8002852:	b2db      	uxtb	r3, r3
 8002854:	3301      	adds	r3, #1
 8002856:	f003 021f 	and.w	r2, r3, #31
 800285a:	4613      	mov	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	4413      	add	r3, r2
 8002860:	3b1e      	subs	r3, #30
 8002862:	051b      	lsls	r3, r3, #20
 8002864:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002868:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800286e:	4619      	mov	r1, r3
 8002870:	f7ff fa48 	bl	8001d04 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4b3f      	ldr	r3, [pc, #252]	@ (8002978 <HAL_ADC_ConfigChannel+0x7bc>)
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d071      	beq.n	8002964 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002880:	483e      	ldr	r0, [pc, #248]	@ (800297c <HAL_ADC_ConfigChannel+0x7c0>)
 8002882:	f7ff f967 	bl	8001b54 <LL_ADC_GetCommonPathInternalCh>
 8002886:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a3c      	ldr	r2, [pc, #240]	@ (8002980 <HAL_ADC_ConfigChannel+0x7c4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d004      	beq.n	800289e <HAL_ADC_ConfigChannel+0x6e2>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a3a      	ldr	r2, [pc, #232]	@ (8002984 <HAL_ADC_ConfigChannel+0x7c8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d127      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800289e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d121      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028b2:	d157      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028bc:	4619      	mov	r1, r3
 80028be:	482f      	ldr	r0, [pc, #188]	@ (800297c <HAL_ADC_ConfigChannel+0x7c0>)
 80028c0:	f7ff f935 	bl	8001b2e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028c4:	4b30      	ldr	r3, [pc, #192]	@ (8002988 <HAL_ADC_ConfigChannel+0x7cc>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	099b      	lsrs	r3, r3, #6
 80028ca:	4a30      	ldr	r2, [pc, #192]	@ (800298c <HAL_ADC_ConfigChannel+0x7d0>)
 80028cc:	fba2 2303 	umull	r2, r3, r2, r3
 80028d0:	099b      	lsrs	r3, r3, #6
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	4613      	mov	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028de:	e002      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f9      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028ec:	e03a      	b.n	8002964 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a27      	ldr	r2, [pc, #156]	@ (8002990 <HAL_ADC_ConfigChannel+0x7d4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d113      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10d      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a22      	ldr	r2, [pc, #136]	@ (8002994 <HAL_ADC_ConfigChannel+0x7d8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d02a      	beq.n	8002964 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800290e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002912:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002916:	4619      	mov	r1, r3
 8002918:	4818      	ldr	r0, [pc, #96]	@ (800297c <HAL_ADC_ConfigChannel+0x7c0>)
 800291a:	f7ff f908 	bl	8001b2e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800291e:	e021      	b.n	8002964 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1c      	ldr	r2, [pc, #112]	@ (8002998 <HAL_ADC_ConfigChannel+0x7dc>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d11c      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800292a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800292e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d116      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a16      	ldr	r2, [pc, #88]	@ (8002994 <HAL_ADC_ConfigChannel+0x7d8>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d011      	beq.n	8002964 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002940:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002944:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002948:	4619      	mov	r1, r3
 800294a:	480c      	ldr	r0, [pc, #48]	@ (800297c <HAL_ADC_ConfigChannel+0x7c0>)
 800294c:	f7ff f8ef 	bl	8001b2e <LL_ADC_SetCommonPathInternalCh>
 8002950:	e008      	b.n	8002964 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002956:	f043 0220 	orr.w	r2, r3, #32
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800296c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002970:	4618      	mov	r0, r3
 8002972:	37d8      	adds	r7, #216	@ 0xd8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	80080000 	.word	0x80080000
 800297c:	50000300 	.word	0x50000300
 8002980:	c3210000 	.word	0xc3210000
 8002984:	90c00010 	.word	0x90c00010
 8002988:	20000000 	.word	0x20000000
 800298c:	053e2d63 	.word	0x053e2d63
 8002990:	c7520000 	.word	0xc7520000
 8002994:	50000100 	.word	0x50000100
 8002998:	cb840000 	.word	0xcb840000

0800299c <LL_ADC_IsEnabled>:
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <LL_ADC_IsEnabled+0x18>
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <LL_ADC_IsEnabled+0x1a>
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <LL_ADC_REG_IsConversionOngoing>:
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0304 	and.w	r3, r3, #4
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d101      	bne.n	80029da <LL_ADC_REG_IsConversionOngoing+0x18>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b0a1      	sub	sp, #132	@ 0x84
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e08b      	b.n	8002b1e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002a0e:	2300      	movs	r3, #0
 8002a10:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002a12:	2300      	movs	r3, #0
 8002a14:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a1e:	d102      	bne.n	8002a26 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a20:	4b41      	ldr	r3, [pc, #260]	@ (8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	e001      	b.n	8002a2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a26:	2300      	movs	r3, #0
 8002a28:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10b      	bne.n	8002a48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a34:	f043 0220 	orr.w	r2, r3, #32
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e06a      	b.n	8002b1e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ffb9 	bl	80029c2 <LL_ADC_REG_IsConversionOngoing>
 8002a50:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff ffb3 	bl	80029c2 <LL_ADC_REG_IsConversionOngoing>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d14c      	bne.n	8002afc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002a62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d149      	bne.n	8002afc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a68:	4b30      	ldr	r3, [pc, #192]	@ (8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002a6a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d028      	beq.n	8002ac6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	6859      	ldr	r1, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a86:	035b      	lsls	r3, r3, #13
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a8e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a90:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a94:	f7ff ff82 	bl	800299c <LL_ADC_IsEnabled>
 8002a98:	4604      	mov	r4, r0
 8002a9a:	4823      	ldr	r0, [pc, #140]	@ (8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a9c:	f7ff ff7e 	bl	800299c <LL_ADC_IsEnabled>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	4323      	orrs	r3, r4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d133      	bne.n	8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002aa8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002ab0:	f023 030f 	bic.w	r3, r3, #15
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	6811      	ldr	r1, [r2, #0]
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	6892      	ldr	r2, [r2, #8]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ac2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ac4:	e024      	b.n	8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ac6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ace:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ad0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ad2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ad6:	f7ff ff61 	bl	800299c <LL_ADC_IsEnabled>
 8002ada:	4604      	mov	r4, r0
 8002adc:	4812      	ldr	r0, [pc, #72]	@ (8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002ade:	f7ff ff5d 	bl	800299c <LL_ADC_IsEnabled>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4323      	orrs	r3, r4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d112      	bne.n	8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002aea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002af2:	f023 030f 	bic.w	r3, r3, #15
 8002af6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002af8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002afa:	e009      	b.n	8002b10 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b00:	f043 0220 	orr.w	r2, r3, #32
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002b0e:	e000      	b.n	8002b12 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b10:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b1a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3784      	adds	r7, #132	@ 0x84
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd90      	pop	{r4, r7, pc}
 8002b26:	bf00      	nop
 8002b28:	50000100 	.word	0x50000100
 8002b2c:	50000300 	.word	0x50000300

08002b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b40:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <__NVIC_SetPriorityGrouping+0x44>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b62:	4a04      	ldr	r2, [pc, #16]	@ (8002b74 <__NVIC_SetPriorityGrouping+0x44>)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	60d3      	str	r3, [r2, #12]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b7c:	4b04      	ldr	r3, [pc, #16]	@ (8002b90 <__NVIC_GetPriorityGrouping+0x18>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	0a1b      	lsrs	r3, r3, #8
 8002b82:	f003 0307 	and.w	r3, r3, #7
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	db0b      	blt.n	8002bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	f003 021f 	and.w	r2, r3, #31
 8002bac:	4907      	ldr	r1, [pc, #28]	@ (8002bcc <__NVIC_EnableIRQ+0x38>)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000e100 	.word	0xe000e100

08002bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	6039      	str	r1, [r7, #0]
 8002bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	db0a      	blt.n	8002bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	490c      	ldr	r1, [pc, #48]	@ (8002c1c <__NVIC_SetPriority+0x4c>)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	0112      	lsls	r2, r2, #4
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf8:	e00a      	b.n	8002c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4908      	ldr	r1, [pc, #32]	@ (8002c20 <__NVIC_SetPriority+0x50>)
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	3b04      	subs	r3, #4
 8002c08:	0112      	lsls	r2, r2, #4
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	761a      	strb	r2, [r3, #24]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000e100 	.word	0xe000e100
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b089      	sub	sp, #36	@ 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f1c3 0307 	rsb	r3, r3, #7
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	bf28      	it	cs
 8002c42:	2304      	movcs	r3, #4
 8002c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	d902      	bls.n	8002c54 <NVIC_EncodePriority+0x30>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3b03      	subs	r3, #3
 8002c52:	e000      	b.n	8002c56 <NVIC_EncodePriority+0x32>
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	f04f 32ff 	mov.w	r2, #4294967295
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	401a      	ands	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	43d9      	mvns	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	4313      	orrs	r3, r2
         );
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3724      	adds	r7, #36	@ 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff ff4c 	bl	8002b30 <__NVIC_SetPriorityGrouping>
}
 8002c98:	bf00      	nop
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cae:	f7ff ff63 	bl	8002b78 <__NVIC_GetPriorityGrouping>
 8002cb2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	6978      	ldr	r0, [r7, #20]
 8002cba:	f7ff ffb3 	bl	8002c24 <NVIC_EncodePriority>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff ff82 	bl	8002bd0 <__NVIC_SetPriority>
}
 8002ccc:	bf00      	nop
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff ff56 	bl	8002b94 <__NVIC_EnableIRQ>
}
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002cfe:	e15a      	b.n	8002fb6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	2101      	movs	r1, #1
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 814c 	beq.w	8002fb0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d005      	beq.n	8002d30 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d130      	bne.n	8002d92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4013      	ands	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d66:	2201      	movs	r2, #1
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4013      	ands	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	091b      	lsrs	r3, r3, #4
 8002d7c:	f003 0201 	and.w	r2, r3, #1
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d017      	beq.n	8002dce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	2203      	movs	r2, #3
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4013      	ands	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d123      	bne.n	8002e22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	08da      	lsrs	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3208      	adds	r2, #8
 8002de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	220f      	movs	r2, #15
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	08da      	lsrs	r2, r3, #3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3208      	adds	r2, #8
 8002e1c:	6939      	ldr	r1, [r7, #16]
 8002e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4013      	ands	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0203 	and.w	r2, r3, #3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80a6 	beq.w	8002fb0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e64:	4b5b      	ldr	r3, [pc, #364]	@ (8002fd4 <HAL_GPIO_Init+0x2e4>)
 8002e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e68:	4a5a      	ldr	r2, [pc, #360]	@ (8002fd4 <HAL_GPIO_Init+0x2e4>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e70:	4b58      	ldr	r3, [pc, #352]	@ (8002fd4 <HAL_GPIO_Init+0x2e4>)
 8002e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e7c:	4a56      	ldr	r2, [pc, #344]	@ (8002fd8 <HAL_GPIO_Init+0x2e8>)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	3302      	adds	r3, #2
 8002e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	220f      	movs	r2, #15
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ea6:	d01f      	beq.n	8002ee8 <HAL_GPIO_Init+0x1f8>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a4c      	ldr	r2, [pc, #304]	@ (8002fdc <HAL_GPIO_Init+0x2ec>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d019      	beq.n	8002ee4 <HAL_GPIO_Init+0x1f4>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a4b      	ldr	r2, [pc, #300]	@ (8002fe0 <HAL_GPIO_Init+0x2f0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d013      	beq.n	8002ee0 <HAL_GPIO_Init+0x1f0>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a4a      	ldr	r2, [pc, #296]	@ (8002fe4 <HAL_GPIO_Init+0x2f4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00d      	beq.n	8002edc <HAL_GPIO_Init+0x1ec>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a49      	ldr	r2, [pc, #292]	@ (8002fe8 <HAL_GPIO_Init+0x2f8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d007      	beq.n	8002ed8 <HAL_GPIO_Init+0x1e8>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a48      	ldr	r2, [pc, #288]	@ (8002fec <HAL_GPIO_Init+0x2fc>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d101      	bne.n	8002ed4 <HAL_GPIO_Init+0x1e4>
 8002ed0:	2305      	movs	r3, #5
 8002ed2:	e00a      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002ed4:	2306      	movs	r3, #6
 8002ed6:	e008      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002ed8:	2304      	movs	r3, #4
 8002eda:	e006      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002edc:	2303      	movs	r3, #3
 8002ede:	e004      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e002      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	f002 0203 	and.w	r2, r2, #3
 8002ef0:	0092      	lsls	r2, r2, #2
 8002ef2:	4093      	lsls	r3, r2
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002efa:	4937      	ldr	r1, [pc, #220]	@ (8002fd8 <HAL_GPIO_Init+0x2e8>)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	089b      	lsrs	r3, r3, #2
 8002f00:	3302      	adds	r3, #2
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f08:	4b39      	ldr	r3, [pc, #228]	@ (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f2c:	4a30      	ldr	r2, [pc, #192]	@ (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f32:	4b2f      	ldr	r3, [pc, #188]	@ (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f56:	4a26      	ldr	r2, [pc, #152]	@ (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002f5c:	4b24      	ldr	r3, [pc, #144]	@ (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f80:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f86:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4013      	ands	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002faa:	4a11      	ldr	r2, [pc, #68]	@ (8002ff0 <HAL_GPIO_Init+0x300>)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f47f ae9d 	bne.w	8002d00 <HAL_GPIO_Init+0x10>
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	bf00      	nop
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40010000 	.word	0x40010000
 8002fdc:	48000400 	.word	0x48000400
 8002fe0:	48000800 	.word	0x48000800
 8002fe4:	48000c00 	.word	0x48000c00
 8002fe8:	48001000 	.word	0x48001000
 8002fec:	48001400 	.word	0x48001400
 8002ff0:	40010400 	.word	0x40010400

08002ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	807b      	strh	r3, [r7, #2]
 8003000:	4613      	mov	r3, r2
 8003002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003004:	787b      	ldrb	r3, [r7, #1]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800300a:	887a      	ldrh	r2, [r7, #2]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003010:	e002      	b.n	8003018 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003012:	887a      	ldrh	r2, [r7, #2]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003036:	887a      	ldrh	r2, [r7, #2]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4013      	ands	r3, r2
 800303c:	041a      	lsls	r2, r3, #16
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	43d9      	mvns	r1, r3
 8003042:	887b      	ldrh	r3, [r7, #2]
 8003044:	400b      	ands	r3, r1
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	619a      	str	r2, [r3, #24]
}
 800304c:	bf00      	nop
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003062:	4b08      	ldr	r3, [pc, #32]	@ (8003084 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	4013      	ands	r3, r2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d006      	beq.n	800307c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800306e:	4a05      	ldr	r2, [pc, #20]	@ (8003084 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd feb4 	bl	8000de4 <HAL_GPIO_EXTI_Callback>
  }
}
 800307c:	bf00      	nop
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40010400 	.word	0x40010400

08003088 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e08d      	b.n	80031b6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d106      	bne.n	80030b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fd fd94 	bl	8000bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2224      	movs	r2, #36	@ 0x24
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0201 	bic.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d107      	bne.n	8003102 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	e006      	b.n	8003110 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800310e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	2b02      	cmp	r3, #2
 8003116:	d108      	bne.n	800312a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003126:	605a      	str	r2, [r3, #4]
 8003128:	e007      	b.n	800313a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003138:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003148:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800314c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800315c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691a      	ldr	r2, [r3, #16]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69d9      	ldr	r1, [r3, #28]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1a      	ldr	r2, [r3, #32]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0201 	orr.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	4608      	mov	r0, r1
 80031ca:	4611      	mov	r1, r2
 80031cc:	461a      	mov	r2, r3
 80031ce:	4603      	mov	r3, r0
 80031d0:	817b      	strh	r3, [r7, #10]
 80031d2:	460b      	mov	r3, r1
 80031d4:	813b      	strh	r3, [r7, #8]
 80031d6:	4613      	mov	r3, r2
 80031d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b20      	cmp	r3, #32
 80031e4:	f040 80f9 	bne.w	80033da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <HAL_I2C_Mem_Write+0x34>
 80031ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d105      	bne.n	8003200 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031fa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0ed      	b.n	80033dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_I2C_Mem_Write+0x4e>
 800320a:	2302      	movs	r3, #2
 800320c:	e0e6      	b.n	80033dc <HAL_I2C_Mem_Write+0x21c>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003216:	f7fe fc49 	bl	8001aac <HAL_GetTick>
 800321a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2319      	movs	r3, #25
 8003222:	2201      	movs	r2, #1
 8003224:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 fac3 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0d1      	b.n	80033dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2221      	movs	r2, #33	@ 0x21
 800323c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2240      	movs	r2, #64	@ 0x40
 8003244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a3a      	ldr	r2, [r7, #32]
 8003252:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003258:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003260:	88f8      	ldrh	r0, [r7, #6]
 8003262:	893a      	ldrh	r2, [r7, #8]
 8003264:	8979      	ldrh	r1, [r7, #10]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	9301      	str	r3, [sp, #4]
 800326a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	4603      	mov	r3, r0
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f9d3 	bl	800361c <I2C_RequestMemoryWrite>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0a9      	b.n	80033dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	2bff      	cmp	r3, #255	@ 0xff
 8003290:	d90e      	bls.n	80032b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	22ff      	movs	r2, #255	@ 0xff
 8003296:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329c:	b2da      	uxtb	r2, r3
 800329e:	8979      	ldrh	r1, [r7, #10]
 80032a0:	2300      	movs	r3, #0
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 fc47 	bl	8003b3c <I2C_TransferConfig>
 80032ae:	e00f      	b.n	80032d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	8979      	ldrh	r1, [r7, #10]
 80032c2:	2300      	movs	r3, #0
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fc36 	bl	8003b3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 fac6 	bl	8003866 <I2C_WaitOnTXISFlagUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e07b      	b.n	80033dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	781a      	ldrb	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d034      	beq.n	8003388 <HAL_I2C_Mem_Write+0x1c8>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003322:	2b00      	cmp	r3, #0
 8003324:	d130      	bne.n	8003388 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332c:	2200      	movs	r2, #0
 800332e:	2180      	movs	r1, #128	@ 0x80
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 fa3f 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e04d      	b.n	80033dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	2bff      	cmp	r3, #255	@ 0xff
 8003348:	d90e      	bls.n	8003368 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	22ff      	movs	r2, #255	@ 0xff
 800334e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003354:	b2da      	uxtb	r2, r3
 8003356:	8979      	ldrh	r1, [r7, #10]
 8003358:	2300      	movs	r3, #0
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 fbeb 	bl	8003b3c <I2C_TransferConfig>
 8003366:	e00f      	b.n	8003388 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003376:	b2da      	uxtb	r2, r3
 8003378:	8979      	ldrh	r1, [r7, #10]
 800337a:	2300      	movs	r3, #0
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 fbda 	bl	8003b3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d19e      	bne.n	80032d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 faac 	bl	80038f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e01a      	b.n	80033dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2220      	movs	r2, #32
 80033ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b0a      	ldr	r3, [pc, #40]	@ (80033e4 <HAL_I2C_Mem_Write+0x224>)
 80033ba:	400b      	ands	r3, r1
 80033bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80033da:	2302      	movs	r3, #2
  }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	fe00e800 	.word	0xfe00e800

080033e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	4608      	mov	r0, r1
 80033f2:	4611      	mov	r1, r2
 80033f4:	461a      	mov	r2, r3
 80033f6:	4603      	mov	r3, r0
 80033f8:	817b      	strh	r3, [r7, #10]
 80033fa:	460b      	mov	r3, r1
 80033fc:	813b      	strh	r3, [r7, #8]
 80033fe:	4613      	mov	r3, r2
 8003400:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b20      	cmp	r3, #32
 800340c:	f040 80fd 	bne.w	800360a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_I2C_Mem_Read+0x34>
 8003416:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003418:	2b00      	cmp	r3, #0
 800341a:	d105      	bne.n	8003428 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003422:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0f1      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_I2C_Mem_Read+0x4e>
 8003432:	2302      	movs	r3, #2
 8003434:	e0ea      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800343e:	f7fe fb35 	bl	8001aac <HAL_GetTick>
 8003442:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	2319      	movs	r3, #25
 800344a:	2201      	movs	r2, #1
 800344c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f9af 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0d5      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2222      	movs	r2, #34	@ 0x22
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2240      	movs	r2, #64	@ 0x40
 800346c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a3a      	ldr	r2, [r7, #32]
 800347a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003480:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003488:	88f8      	ldrh	r0, [r7, #6]
 800348a:	893a      	ldrh	r2, [r7, #8]
 800348c:	8979      	ldrh	r1, [r7, #10]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	9301      	str	r3, [sp, #4]
 8003492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	4603      	mov	r3, r0
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f913 	bl	80036c4 <I2C_RequestMemoryRead>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0ad      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2bff      	cmp	r3, #255	@ 0xff
 80034b8:	d90e      	bls.n	80034d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	22ff      	movs	r2, #255	@ 0xff
 80034be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	8979      	ldrh	r1, [r7, #10]
 80034c8:	4b52      	ldr	r3, [pc, #328]	@ (8003614 <HAL_I2C_Mem_Read+0x22c>)
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 fb33 	bl	8003b3c <I2C_TransferConfig>
 80034d6:	e00f      	b.n	80034f8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	8979      	ldrh	r1, [r7, #10]
 80034ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003614 <HAL_I2C_Mem_Read+0x22c>)
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 fb22 	bl	8003b3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fe:	2200      	movs	r2, #0
 8003500:	2104      	movs	r1, #4
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f956 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e07c      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d034      	beq.n	80035b8 <HAL_I2C_Mem_Read+0x1d0>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003552:	2b00      	cmp	r3, #0
 8003554:	d130      	bne.n	80035b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800355c:	2200      	movs	r2, #0
 800355e:	2180      	movs	r1, #128	@ 0x80
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f927 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e04d      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	2bff      	cmp	r3, #255	@ 0xff
 8003578:	d90e      	bls.n	8003598 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	22ff      	movs	r2, #255	@ 0xff
 800357e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003584:	b2da      	uxtb	r2, r3
 8003586:	8979      	ldrh	r1, [r7, #10]
 8003588:	2300      	movs	r3, #0
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 fad3 	bl	8003b3c <I2C_TransferConfig>
 8003596:	e00f      	b.n	80035b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	8979      	ldrh	r1, [r7, #10]
 80035aa:	2300      	movs	r3, #0
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 fac2 	bl	8003b3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d19a      	bne.n	80034f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f994 	bl	80038f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e01a      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2220      	movs	r2, #32
 80035dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6859      	ldr	r1, [r3, #4]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003618 <HAL_I2C_Mem_Read+0x230>)
 80035ea:	400b      	ands	r3, r1
 80035ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	e000      	b.n	800360c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800360a:	2302      	movs	r3, #2
  }
}
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	80002400 	.word	0x80002400
 8003618:	fe00e800 	.word	0xfe00e800

0800361c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	4608      	mov	r0, r1
 8003626:	4611      	mov	r1, r2
 8003628:	461a      	mov	r2, r3
 800362a:	4603      	mov	r3, r0
 800362c:	817b      	strh	r3, [r7, #10]
 800362e:	460b      	mov	r3, r1
 8003630:	813b      	strh	r3, [r7, #8]
 8003632:	4613      	mov	r3, r2
 8003634:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003636:	88fb      	ldrh	r3, [r7, #6]
 8003638:	b2da      	uxtb	r2, r3
 800363a:	8979      	ldrh	r1, [r7, #10]
 800363c:	4b20      	ldr	r3, [pc, #128]	@ (80036c0 <I2C_RequestMemoryWrite+0xa4>)
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fa79 	bl	8003b3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	69b9      	ldr	r1, [r7, #24]
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f909 	bl	8003866 <I2C_WaitOnTXISFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e02c      	b.n	80036b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d105      	bne.n	8003670 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003664:	893b      	ldrh	r3, [r7, #8]
 8003666:	b2da      	uxtb	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	629a      	str	r2, [r3, #40]	@ 0x28
 800366e:	e015      	b.n	800369c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003670:	893b      	ldrh	r3, [r7, #8]
 8003672:	0a1b      	lsrs	r3, r3, #8
 8003674:	b29b      	uxth	r3, r3
 8003676:	b2da      	uxtb	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	69b9      	ldr	r1, [r7, #24]
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f8ef 	bl	8003866 <I2C_WaitOnTXISFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e012      	b.n	80036b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003692:	893b      	ldrh	r3, [r7, #8]
 8003694:	b2da      	uxtb	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	2200      	movs	r2, #0
 80036a4:	2180      	movs	r1, #128	@ 0x80
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 f884 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	80002000 	.word	0x80002000

080036c4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	4608      	mov	r0, r1
 80036ce:	4611      	mov	r1, r2
 80036d0:	461a      	mov	r2, r3
 80036d2:	4603      	mov	r3, r0
 80036d4:	817b      	strh	r3, [r7, #10]
 80036d6:	460b      	mov	r3, r1
 80036d8:	813b      	strh	r3, [r7, #8]
 80036da:	4613      	mov	r3, r2
 80036dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	8979      	ldrh	r1, [r7, #10]
 80036e4:	4b20      	ldr	r3, [pc, #128]	@ (8003768 <I2C_RequestMemoryRead+0xa4>)
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	2300      	movs	r3, #0
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 fa26 	bl	8003b3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	69b9      	ldr	r1, [r7, #24]
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 f8b6 	bl	8003866 <I2C_WaitOnTXISFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e02c      	b.n	800375e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d105      	bne.n	8003716 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800370a:	893b      	ldrh	r3, [r7, #8]
 800370c:	b2da      	uxtb	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	629a      	str	r2, [r3, #40]	@ 0x28
 8003714:	e015      	b.n	8003742 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003716:	893b      	ldrh	r3, [r7, #8]
 8003718:	0a1b      	lsrs	r3, r3, #8
 800371a:	b29b      	uxth	r3, r3
 800371c:	b2da      	uxtb	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	69b9      	ldr	r1, [r7, #24]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f89c 	bl	8003866 <I2C_WaitOnTXISFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e012      	b.n	800375e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003738:	893b      	ldrh	r3, [r7, #8]
 800373a:	b2da      	uxtb	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	2200      	movs	r2, #0
 800374a:	2140      	movs	r1, #64	@ 0x40
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 f831 	bl	80037b4 <I2C_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	80002000 	.word	0x80002000

0800376c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b02      	cmp	r3, #2
 8003780:	d103      	bne.n	800378a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b01      	cmp	r3, #1
 8003796:	d007      	beq.n	80037a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699a      	ldr	r2, [r3, #24]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	619a      	str	r2, [r3, #24]
  }
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	4613      	mov	r3, r2
 80037c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037c4:	e03b      	b.n	800383e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	6839      	ldr	r1, [r7, #0]
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f8d6 	bl	800397c <I2C_IsErrorOccurred>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e041      	b.n	800385e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d02d      	beq.n	800383e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e2:	f7fe f963 	bl	8001aac <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d302      	bcc.n	80037f8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d122      	bne.n	800383e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699a      	ldr	r2, [r3, #24]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	4013      	ands	r3, r2
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	429a      	cmp	r2, r3
 8003806:	bf0c      	ite	eq
 8003808:	2301      	moveq	r3, #1
 800380a:	2300      	movne	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	429a      	cmp	r2, r3
 8003814:	d113      	bne.n	800383e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381a:	f043 0220 	orr.w	r2, r3, #32
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e00f      	b.n	800385e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699a      	ldr	r2, [r3, #24]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4013      	ands	r3, r2
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	429a      	cmp	r2, r3
 800384c:	bf0c      	ite	eq
 800384e:	2301      	moveq	r3, #1
 8003850:	2300      	movne	r3, #0
 8003852:	b2db      	uxtb	r3, r3
 8003854:	461a      	mov	r2, r3
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	429a      	cmp	r2, r3
 800385a:	d0b4      	beq.n	80037c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b084      	sub	sp, #16
 800386a:	af00      	add	r7, sp, #0
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003872:	e033      	b.n	80038dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	68b9      	ldr	r1, [r7, #8]
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f87f 	bl	800397c <I2C_IsErrorOccurred>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e031      	b.n	80038ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388e:	d025      	beq.n	80038dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003890:	f7fe f90c 	bl	8001aac <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	429a      	cmp	r2, r3
 800389e:	d302      	bcc.n	80038a6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d11a      	bne.n	80038dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d013      	beq.n	80038dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b8:	f043 0220 	orr.w	r2, r3, #32
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e007      	b.n	80038ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d1c4      	bne.n	8003874 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003900:	e02f      	b.n	8003962 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 f838 	bl	800397c <I2C_IsErrorOccurred>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e02d      	b.n	8003972 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003916:	f7fe f8c9 	bl	8001aac <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	429a      	cmp	r2, r3
 8003924:	d302      	bcc.n	800392c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d11a      	bne.n	8003962 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b20      	cmp	r3, #32
 8003938:	d013      	beq.n	8003962 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393e:	f043 0220 	orr.w	r2, r3, #32
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e007      	b.n	8003972 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	f003 0320 	and.w	r3, r3, #32
 800396c:	2b20      	cmp	r3, #32
 800396e:	d1c8      	bne.n	8003902 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08a      	sub	sp, #40	@ 0x28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d068      	beq.n	8003a7a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2210      	movs	r2, #16
 80039ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039b0:	e049      	b.n	8003a46 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b8:	d045      	beq.n	8003a46 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039ba:	f7fe f877 	bl	8001aac <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d302      	bcc.n	80039d0 <I2C_IsErrorOccurred+0x54>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d13a      	bne.n	8003a46 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039f2:	d121      	bne.n	8003a38 <I2C_IsErrorOccurred+0xbc>
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039fa:	d01d      	beq.n	8003a38 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	2b20      	cmp	r3, #32
 8003a00:	d01a      	beq.n	8003a38 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a10:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a12:	f7fe f84b 	bl	8001aac <HAL_GetTick>
 8003a16:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a18:	e00e      	b.n	8003a38 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a1a:	f7fe f847 	bl	8001aac <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b19      	cmp	r3, #25
 8003a26:	d907      	bls.n	8003a38 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	f043 0320 	orr.w	r3, r3, #32
 8003a2e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003a36:	e006      	b.n	8003a46 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d1e9      	bne.n	8003a1a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b20      	cmp	r3, #32
 8003a52:	d003      	beq.n	8003a5c <I2C_IsErrorOccurred+0xe0>
 8003a54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0aa      	beq.n	80039b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d103      	bne.n	8003a6c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	f043 0304 	orr.w	r3, r3, #4
 8003a72:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00b      	beq.n	8003aa4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00b      	beq.n	8003ac6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	f043 0308 	orr.w	r3, r3, #8
 8003ab4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003abe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00b      	beq.n	8003ae8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	f043 0302 	orr.w	r3, r3, #2
 8003ad6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ae0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d01c      	beq.n	8003b2a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f7ff fe3b 	bl	800376c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6859      	ldr	r1, [r3, #4]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	4b0d      	ldr	r3, [pc, #52]	@ (8003b38 <I2C_IsErrorOccurred+0x1bc>)
 8003b02:	400b      	ands	r3, r1
 8003b04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003b2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3728      	adds	r7, #40	@ 0x28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	fe00e800 	.word	0xfe00e800

08003b3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	607b      	str	r3, [r7, #4]
 8003b46:	460b      	mov	r3, r1
 8003b48:	817b      	strh	r3, [r7, #10]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b4e:	897b      	ldrh	r3, [r7, #10]
 8003b50:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b54:	7a7b      	ldrb	r3, [r7, #9]
 8003b56:	041b      	lsls	r3, r3, #16
 8003b58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b5c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b6a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	0d5b      	lsrs	r3, r3, #21
 8003b76:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003b7a:	4b08      	ldr	r3, [pc, #32]	@ (8003b9c <I2C_TransferConfig+0x60>)
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	ea02 0103 	and.w	r1, r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b8e:	bf00      	nop
 8003b90:	371c      	adds	r7, #28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	03ff63ff 	.word	0x03ff63ff

08003ba0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d138      	bne.n	8003c28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e032      	b.n	8003c2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2224      	movs	r2, #36	@ 0x24
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0201 	bic.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bf2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6819      	ldr	r1, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e000      	b.n	8003c2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b085      	sub	sp, #20
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d139      	bne.n	8003cc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e033      	b.n	8003cc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2224      	movs	r2, #36	@ 0x24
 8003c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0201 	bic.w	r2, r2, #1
 8003c78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	021b      	lsls	r3, r3, #8
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0201 	orr.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	e000      	b.n	8003cc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cc0:	2302      	movs	r3, #2
  }
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 8003cd2:	bf00      	nop
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d141      	bne.n	8003d6e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cea:	4b4b      	ldr	r3, [pc, #300]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003cf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cf6:	d131      	bne.n	8003d5c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cf8:	4b47      	ldr	r3, [pc, #284]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cfe:	4a46      	ldr	r2, [pc, #280]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d08:	4b43      	ldr	r3, [pc, #268]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d10:	4a41      	ldr	r2, [pc, #260]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d18:	4b40      	ldr	r3, [pc, #256]	@ (8003e1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2232      	movs	r2, #50	@ 0x32
 8003d1e:	fb02 f303 	mul.w	r3, r2, r3
 8003d22:	4a3f      	ldr	r2, [pc, #252]	@ (8003e20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d24:	fba2 2303 	umull	r2, r3, r2, r3
 8003d28:	0c9b      	lsrs	r3, r3, #18
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d2e:	e002      	b.n	8003d36 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d36:	4b38      	ldr	r3, [pc, #224]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d42:	d102      	bne.n	8003d4a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f2      	bne.n	8003d30 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d4a:	4b33      	ldr	r3, [pc, #204]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d56:	d158      	bne.n	8003e0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e057      	b.n	8003e0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d62:	4a2d      	ldr	r2, [pc, #180]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003d6c:	e04d      	b.n	8003e0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d74:	d141      	bne.n	8003dfa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d76:	4b28      	ldr	r3, [pc, #160]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d82:	d131      	bne.n	8003de8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d84:	4b24      	ldr	r3, [pc, #144]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d8a:	4a23      	ldr	r2, [pc, #140]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d94:	4b20      	ldr	r3, [pc, #128]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d9c:	4a1e      	ldr	r2, [pc, #120]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003da2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003da4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2232      	movs	r2, #50	@ 0x32
 8003daa:	fb02 f303 	mul.w	r3, r2, r3
 8003dae:	4a1c      	ldr	r2, [pc, #112]	@ (8003e20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003db0:	fba2 2303 	umull	r2, r3, r2, r3
 8003db4:	0c9b      	lsrs	r3, r3, #18
 8003db6:	3301      	adds	r3, #1
 8003db8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dba:	e002      	b.n	8003dc2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dc2:	4b15      	ldr	r3, [pc, #84]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dce:	d102      	bne.n	8003dd6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f2      	bne.n	8003dbc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dd6:	4b10      	ldr	r3, [pc, #64]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003de2:	d112      	bne.n	8003e0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e011      	b.n	8003e0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003de8:	4b0b      	ldr	r3, [pc, #44]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dee:	4a0a      	ldr	r2, [pc, #40]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003df4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003df8:	e007      	b.n	8003e0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003dfa:	4b07      	ldr	r3, [pc, #28]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e02:	4a05      	ldr	r2, [pc, #20]	@ (8003e18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e08:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	40007000 	.word	0x40007000
 8003e1c:	20000000 	.word	0x20000000
 8003e20:	431bde83 	.word	0x431bde83

08003e24 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 8003e28:	4b1c      	ldr	r3, [pc, #112]	@ (8003e9c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8003e34:	f7ff ff4b 	bl	8003cce <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003e38:	4b18      	ldr	r3, [pc, #96]	@ (8003e9c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003e3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003e3e:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U)
 8003e40:	4b16      	ldr	r3, [pc, #88]	@ (8003e9c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d004      	beq.n	8003e56 <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 8003e4c:	f000 f828 	bl	8003ea0 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8003e50:	4b12      	ldr	r3, [pc, #72]	@ (8003e9c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003e52:	2208      	movs	r2, #8
 8003e54:	635a      	str	r2, [r3, #52]	@ 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0U)
 8003e56:	4b11      	ldr	r3, [pc, #68]	@ (8003e9c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d004      	beq.n	8003e6c <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 8003e62:	f000 f824 	bl	8003eae <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 8003e66:	4b0d      	ldr	r3, [pc, #52]	@ (8003e9c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003e68:	2210      	movs	r2, #16
 8003e6a:	635a      	str	r2, [r3, #52]	@ 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U)
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e9c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e70:	f003 0320 	and.w	r3, r3, #32
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d004      	beq.n	8003e82 <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8003e78:	f000 f820 	bl	8003ebc <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8003e7c:	4b07      	ldr	r3, [pc, #28]	@ (8003e9c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003e7e:	2220      	movs	r2, #32
 8003e80:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0U)
 8003e82:	4b06      	ldr	r3, [pc, #24]	@ (8003e9c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d004      	beq.n	8003e98 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 8003e8e:	f000 f81c 	bl	8003eca <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 8003e92:	4b02      	ldr	r3, [pc, #8]	@ (8003e9c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 8003e94:	2240      	movs	r2, #64	@ 0x40
 8003e96:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 8003e98:	bf00      	nop
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40010400 	.word	0x40010400

08003ea0 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 8003eb2:	bf00      	nop
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003edc:	4b05      	ldr	r3, [pc, #20]	@ (8003ef4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	4a04      	ldr	r2, [pc, #16]	@ (8003ef4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ee2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ee6:	6093      	str	r3, [r2, #8]
}
 8003ee8:	bf00      	nop
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40007000 	.word	0x40007000

08003ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e2fe      	b.n	8004508 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d075      	beq.n	8004002 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f16:	4b97      	ldr	r3, [pc, #604]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f20:	4b94      	ldr	r3, [pc, #592]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f003 0303 	and.w	r3, r3, #3
 8003f28:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b0c      	cmp	r3, #12
 8003f2e:	d102      	bne.n	8003f36 <HAL_RCC_OscConfig+0x3e>
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	d002      	beq.n	8003f3c <HAL_RCC_OscConfig+0x44>
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d10b      	bne.n	8003f54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f3c:	4b8d      	ldr	r3, [pc, #564]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d05b      	beq.n	8004000 <HAL_RCC_OscConfig+0x108>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d157      	bne.n	8004000 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e2d9      	b.n	8004508 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f5c:	d106      	bne.n	8003f6c <HAL_RCC_OscConfig+0x74>
 8003f5e:	4b85      	ldr	r3, [pc, #532]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a84      	ldr	r2, [pc, #528]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 8003f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	e01d      	b.n	8003fa8 <HAL_RCC_OscConfig+0xb0>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f74:	d10c      	bne.n	8003f90 <HAL_RCC_OscConfig+0x98>
 8003f76:	4b7f      	ldr	r3, [pc, #508]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a7e      	ldr	r2, [pc, #504]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 8003f7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	4b7c      	ldr	r3, [pc, #496]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a7b      	ldr	r2, [pc, #492]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 8003f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	e00b      	b.n	8003fa8 <HAL_RCC_OscConfig+0xb0>
 8003f90:	4b78      	ldr	r3, [pc, #480]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a77      	ldr	r2, [pc, #476]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 8003f96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	4b75      	ldr	r3, [pc, #468]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a74      	ldr	r2, [pc, #464]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 8003fa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d013      	beq.n	8003fd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb0:	f7fd fd7c 	bl	8001aac <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb8:	f7fd fd78 	bl	8001aac <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b64      	cmp	r3, #100	@ 0x64
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e29e      	b.n	8004508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fca:	4b6a      	ldr	r3, [pc, #424]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0f0      	beq.n	8003fb8 <HAL_RCC_OscConfig+0xc0>
 8003fd6:	e014      	b.n	8004002 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7fd fd68 	bl	8001aac <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fe0:	f7fd fd64 	bl	8001aac <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b64      	cmp	r3, #100	@ 0x64
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e28a      	b.n	8004508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ff2:	4b60      	ldr	r3, [pc, #384]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1f0      	bne.n	8003fe0 <HAL_RCC_OscConfig+0xe8>
 8003ffe:	e000      	b.n	8004002 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d075      	beq.n	80040fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800400e:	4b59      	ldr	r3, [pc, #356]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 030c 	and.w	r3, r3, #12
 8004016:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004018:	4b56      	ldr	r3, [pc, #344]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b0c      	cmp	r3, #12
 8004026:	d102      	bne.n	800402e <HAL_RCC_OscConfig+0x136>
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d002      	beq.n	8004034 <HAL_RCC_OscConfig+0x13c>
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b04      	cmp	r3, #4
 8004032:	d11f      	bne.n	8004074 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004034:	4b4f      	ldr	r3, [pc, #316]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_RCC_OscConfig+0x154>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e25d      	b.n	8004508 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404c:	4b49      	ldr	r3, [pc, #292]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	061b      	lsls	r3, r3, #24
 800405a:	4946      	ldr	r1, [pc, #280]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 800405c:	4313      	orrs	r3, r2
 800405e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004060:	4b45      	ldr	r3, [pc, #276]	@ (8004178 <HAL_RCC_OscConfig+0x280>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f7fc ff13 	bl	8000e90 <HAL_InitTick>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d043      	beq.n	80040f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e249      	b.n	8004508 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d023      	beq.n	80040c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800407c:	4b3d      	ldr	r3, [pc, #244]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a3c      	ldr	r2, [pc, #240]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 8004082:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004088:	f7fd fd10 	bl	8001aac <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004090:	f7fd fd0c 	bl	8001aac <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e232      	b.n	8004508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040a2:	4b34      	ldr	r3, [pc, #208]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ae:	4b31      	ldr	r3, [pc, #196]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	061b      	lsls	r3, r3, #24
 80040bc:	492d      	ldr	r1, [pc, #180]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	604b      	str	r3, [r1, #4]
 80040c2:	e01a      	b.n	80040fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a2a      	ldr	r2, [pc, #168]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 80040ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fd fcec 	bl	8001aac <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040d8:	f7fd fce8 	bl	8001aac <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e20e      	b.n	8004508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040ea:	4b22      	ldr	r3, [pc, #136]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x1e0>
 80040f6:	e000      	b.n	80040fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d041      	beq.n	800418a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d01c      	beq.n	8004148 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800410e:	4b19      	ldr	r3, [pc, #100]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 8004110:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004114:	4a17      	ldr	r2, [pc, #92]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 8004116:	f043 0301 	orr.w	r3, r3, #1
 800411a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800411e:	f7fd fcc5 	bl	8001aac <HAL_GetTick>
 8004122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004124:	e008      	b.n	8004138 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004126:	f7fd fcc1 	bl	8001aac <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e1e7      	b.n	8004508 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004138:	4b0e      	ldr	r3, [pc, #56]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 800413a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0ef      	beq.n	8004126 <HAL_RCC_OscConfig+0x22e>
 8004146:	e020      	b.n	800418a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004148:	4b0a      	ldr	r3, [pc, #40]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 800414a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800414e:	4a09      	ldr	r2, [pc, #36]	@ (8004174 <HAL_RCC_OscConfig+0x27c>)
 8004150:	f023 0301 	bic.w	r3, r3, #1
 8004154:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004158:	f7fd fca8 	bl	8001aac <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800415e:	e00d      	b.n	800417c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004160:	f7fd fca4 	bl	8001aac <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d906      	bls.n	800417c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e1ca      	b.n	8004508 <HAL_RCC_OscConfig+0x610>
 8004172:	bf00      	nop
 8004174:	40021000 	.word	0x40021000
 8004178:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800417c:	4b8c      	ldr	r3, [pc, #560]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 800417e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1ea      	bne.n	8004160 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 80a6 	beq.w	80042e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004198:	2300      	movs	r3, #0
 800419a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800419c:	4b84      	ldr	r3, [pc, #528]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 800419e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_RCC_OscConfig+0x2b4>
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <HAL_RCC_OscConfig+0x2b6>
 80041ac:	2300      	movs	r3, #0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00d      	beq.n	80041ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b2:	4b7f      	ldr	r3, [pc, #508]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 80041b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b6:	4a7e      	ldr	r2, [pc, #504]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 80041b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80041be:	4b7c      	ldr	r3, [pc, #496]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 80041c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041ca:	2301      	movs	r3, #1
 80041cc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ce:	4b79      	ldr	r3, [pc, #484]	@ (80043b4 <HAL_RCC_OscConfig+0x4bc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d118      	bne.n	800420c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041da:	4b76      	ldr	r3, [pc, #472]	@ (80043b4 <HAL_RCC_OscConfig+0x4bc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a75      	ldr	r2, [pc, #468]	@ (80043b4 <HAL_RCC_OscConfig+0x4bc>)
 80041e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041e6:	f7fd fc61 	bl	8001aac <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ee:	f7fd fc5d 	bl	8001aac <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e183      	b.n	8004508 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004200:	4b6c      	ldr	r3, [pc, #432]	@ (80043b4 <HAL_RCC_OscConfig+0x4bc>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f0      	beq.n	80041ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d108      	bne.n	8004226 <HAL_RCC_OscConfig+0x32e>
 8004214:	4b66      	ldr	r3, [pc, #408]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800421a:	4a65      	ldr	r2, [pc, #404]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004224:	e024      	b.n	8004270 <HAL_RCC_OscConfig+0x378>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2b05      	cmp	r3, #5
 800422c:	d110      	bne.n	8004250 <HAL_RCC_OscConfig+0x358>
 800422e:	4b60      	ldr	r3, [pc, #384]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 8004230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004234:	4a5e      	ldr	r2, [pc, #376]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 8004236:	f043 0304 	orr.w	r3, r3, #4
 800423a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800423e:	4b5c      	ldr	r3, [pc, #368]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 8004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004244:	4a5a      	ldr	r2, [pc, #360]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800424e:	e00f      	b.n	8004270 <HAL_RCC_OscConfig+0x378>
 8004250:	4b57      	ldr	r3, [pc, #348]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004256:	4a56      	ldr	r2, [pc, #344]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 8004258:	f023 0301 	bic.w	r3, r3, #1
 800425c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004260:	4b53      	ldr	r3, [pc, #332]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004266:	4a52      	ldr	r2, [pc, #328]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 8004268:	f023 0304 	bic.w	r3, r3, #4
 800426c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d016      	beq.n	80042a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fd fc18 	bl	8001aac <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800427e:	e00a      	b.n	8004296 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004280:	f7fd fc14 	bl	8001aac <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e138      	b.n	8004508 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004296:	4b46      	ldr	r3, [pc, #280]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 8004298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0ed      	beq.n	8004280 <HAL_RCC_OscConfig+0x388>
 80042a4:	e015      	b.n	80042d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a6:	f7fd fc01 	bl	8001aac <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042ac:	e00a      	b.n	80042c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ae:	f7fd fbfd 	bl	8001aac <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042bc:	4293      	cmp	r3, r2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e121      	b.n	8004508 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042c4:	4b3a      	ldr	r3, [pc, #232]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 80042c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1ed      	bne.n	80042ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042d2:	7ffb      	ldrb	r3, [r7, #31]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d105      	bne.n	80042e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d8:	4b35      	ldr	r3, [pc, #212]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 80042da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042dc:	4a34      	ldr	r2, [pc, #208]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 80042de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042e2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0320 	and.w	r3, r3, #32
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d03c      	beq.n	800436a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d01c      	beq.n	8004332 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042f8:	4b2d      	ldr	r3, [pc, #180]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 80042fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042fe:	4a2c      	ldr	r2, [pc, #176]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 8004300:	f043 0301 	orr.w	r3, r3, #1
 8004304:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004308:	f7fd fbd0 	bl	8001aac <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004310:	f7fd fbcc 	bl	8001aac <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e0f2      	b.n	8004508 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004322:	4b23      	ldr	r3, [pc, #140]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 8004324:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0ef      	beq.n	8004310 <HAL_RCC_OscConfig+0x418>
 8004330:	e01b      	b.n	800436a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004332:	4b1f      	ldr	r3, [pc, #124]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 8004334:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004338:	4a1d      	ldr	r2, [pc, #116]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 800433a:	f023 0301 	bic.w	r3, r3, #1
 800433e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004342:	f7fd fbb3 	bl	8001aac <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800434a:	f7fd fbaf 	bl	8001aac <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e0d5      	b.n	8004508 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800435c:	4b14      	ldr	r3, [pc, #80]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 800435e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1ef      	bne.n	800434a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 80c9 	beq.w	8004506 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004374:	4b0e      	ldr	r3, [pc, #56]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 030c 	and.w	r3, r3, #12
 800437c:	2b0c      	cmp	r3, #12
 800437e:	f000 8083 	beq.w	8004488 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d15e      	bne.n	8004448 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438a:	4b09      	ldr	r3, [pc, #36]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a08      	ldr	r2, [pc, #32]	@ (80043b0 <HAL_RCC_OscConfig+0x4b8>)
 8004390:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004396:	f7fd fb89 	bl	8001aac <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800439c:	e00c      	b.n	80043b8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800439e:	f7fd fb85 	bl	8001aac <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d905      	bls.n	80043b8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e0ab      	b.n	8004508 <HAL_RCC_OscConfig+0x610>
 80043b0:	40021000 	.word	0x40021000
 80043b4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b8:	4b55      	ldr	r3, [pc, #340]	@ (8004510 <HAL_RCC_OscConfig+0x618>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1ec      	bne.n	800439e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043c4:	4b52      	ldr	r3, [pc, #328]	@ (8004510 <HAL_RCC_OscConfig+0x618>)
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	4b52      	ldr	r3, [pc, #328]	@ (8004514 <HAL_RCC_OscConfig+0x61c>)
 80043ca:	4013      	ands	r3, r2
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6a11      	ldr	r1, [r2, #32]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043d4:	3a01      	subs	r2, #1
 80043d6:	0112      	lsls	r2, r2, #4
 80043d8:	4311      	orrs	r1, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80043de:	0212      	lsls	r2, r2, #8
 80043e0:	4311      	orrs	r1, r2
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80043e6:	0852      	lsrs	r2, r2, #1
 80043e8:	3a01      	subs	r2, #1
 80043ea:	0552      	lsls	r2, r2, #21
 80043ec:	4311      	orrs	r1, r2
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80043f2:	0852      	lsrs	r2, r2, #1
 80043f4:	3a01      	subs	r2, #1
 80043f6:	0652      	lsls	r2, r2, #25
 80043f8:	4311      	orrs	r1, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80043fe:	06d2      	lsls	r2, r2, #27
 8004400:	430a      	orrs	r2, r1
 8004402:	4943      	ldr	r1, [pc, #268]	@ (8004510 <HAL_RCC_OscConfig+0x618>)
 8004404:	4313      	orrs	r3, r2
 8004406:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004408:	4b41      	ldr	r3, [pc, #260]	@ (8004510 <HAL_RCC_OscConfig+0x618>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a40      	ldr	r2, [pc, #256]	@ (8004510 <HAL_RCC_OscConfig+0x618>)
 800440e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004412:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004414:	4b3e      	ldr	r3, [pc, #248]	@ (8004510 <HAL_RCC_OscConfig+0x618>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4a3d      	ldr	r2, [pc, #244]	@ (8004510 <HAL_RCC_OscConfig+0x618>)
 800441a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800441e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fd fb44 	bl	8001aac <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004428:	f7fd fb40 	bl	8001aac <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e066      	b.n	8004508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800443a:	4b35      	ldr	r3, [pc, #212]	@ (8004510 <HAL_RCC_OscConfig+0x618>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0f0      	beq.n	8004428 <HAL_RCC_OscConfig+0x530>
 8004446:	e05e      	b.n	8004506 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004448:	4b31      	ldr	r3, [pc, #196]	@ (8004510 <HAL_RCC_OscConfig+0x618>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a30      	ldr	r2, [pc, #192]	@ (8004510 <HAL_RCC_OscConfig+0x618>)
 800444e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004454:	f7fd fb2a 	bl	8001aac <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800445c:	f7fd fb26 	bl	8001aac <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e04c      	b.n	8004508 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800446e:	4b28      	ldr	r3, [pc, #160]	@ (8004510 <HAL_RCC_OscConfig+0x618>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800447a:	4b25      	ldr	r3, [pc, #148]	@ (8004510 <HAL_RCC_OscConfig+0x618>)
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	4924      	ldr	r1, [pc, #144]	@ (8004510 <HAL_RCC_OscConfig+0x618>)
 8004480:	4b25      	ldr	r3, [pc, #148]	@ (8004518 <HAL_RCC_OscConfig+0x620>)
 8004482:	4013      	ands	r3, r2
 8004484:	60cb      	str	r3, [r1, #12]
 8004486:	e03e      	b.n	8004506 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e039      	b.n	8004508 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004494:	4b1e      	ldr	r3, [pc, #120]	@ (8004510 <HAL_RCC_OscConfig+0x618>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f003 0203 	and.w	r2, r3, #3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d12c      	bne.n	8004502 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b2:	3b01      	subs	r3, #1
 80044b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d123      	bne.n	8004502 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d11b      	bne.n	8004502 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d113      	bne.n	8004502 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	3b01      	subs	r3, #1
 80044e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d109      	bne.n	8004502 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f8:	085b      	lsrs	r3, r3, #1
 80044fa:	3b01      	subs	r3, #1
 80044fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044fe:	429a      	cmp	r2, r3
 8004500:	d001      	beq.n	8004506 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3720      	adds	r7, #32
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40021000 	.word	0x40021000
 8004514:	019f800c 	.word	0x019f800c
 8004518:	feeefffc 	.word	0xfeeefffc

0800451c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004526:	2300      	movs	r3, #0
 8004528:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e11e      	b.n	8004772 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004534:	4b91      	ldr	r3, [pc, #580]	@ (800477c <HAL_RCC_ClockConfig+0x260>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 030f 	and.w	r3, r3, #15
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d910      	bls.n	8004564 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004542:	4b8e      	ldr	r3, [pc, #568]	@ (800477c <HAL_RCC_ClockConfig+0x260>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 020f 	bic.w	r2, r3, #15
 800454a:	498c      	ldr	r1, [pc, #560]	@ (800477c <HAL_RCC_ClockConfig+0x260>)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	4313      	orrs	r3, r2
 8004550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004552:	4b8a      	ldr	r3, [pc, #552]	@ (800477c <HAL_RCC_ClockConfig+0x260>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d001      	beq.n	8004564 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e106      	b.n	8004772 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d073      	beq.n	8004658 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b03      	cmp	r3, #3
 8004576:	d129      	bne.n	80045cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004578:	4b81      	ldr	r3, [pc, #516]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0f4      	b.n	8004772 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004588:	f000 f9ce 	bl	8004928 <RCC_GetSysClockFreqFromPLLSource>
 800458c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	4a7c      	ldr	r2, [pc, #496]	@ (8004784 <HAL_RCC_ClockConfig+0x268>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d93f      	bls.n	8004616 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004596:	4b7a      	ldr	r3, [pc, #488]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d009      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d033      	beq.n	8004616 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d12f      	bne.n	8004616 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045b6:	4b72      	ldr	r3, [pc, #456]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045be:	4a70      	ldr	r2, [pc, #448]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 80045c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80045c6:	2380      	movs	r3, #128	@ 0x80
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	e024      	b.n	8004616 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d107      	bne.n	80045e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d109      	bne.n	80045f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e0c6      	b.n	8004772 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045e4:	4b66      	ldr	r3, [pc, #408]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0be      	b.n	8004772 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80045f4:	f000 f8ce 	bl	8004794 <HAL_RCC_GetSysClockFreq>
 80045f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4a61      	ldr	r2, [pc, #388]	@ (8004784 <HAL_RCC_ClockConfig+0x268>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d909      	bls.n	8004616 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004602:	4b5f      	ldr	r3, [pc, #380]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800460a:	4a5d      	ldr	r2, [pc, #372]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 800460c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004610:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004612:	2380      	movs	r3, #128	@ 0x80
 8004614:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004616:	4b5a      	ldr	r3, [pc, #360]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f023 0203 	bic.w	r2, r3, #3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	4957      	ldr	r1, [pc, #348]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 8004624:	4313      	orrs	r3, r2
 8004626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004628:	f7fd fa40 	bl	8001aac <HAL_GetTick>
 800462c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462e:	e00a      	b.n	8004646 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004630:	f7fd fa3c 	bl	8001aac <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800463e:	4293      	cmp	r3, r2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e095      	b.n	8004772 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004646:	4b4e      	ldr	r3, [pc, #312]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 020c 	and.w	r2, r3, #12
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	429a      	cmp	r2, r3
 8004656:	d1eb      	bne.n	8004630 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d023      	beq.n	80046ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004670:	4b43      	ldr	r3, [pc, #268]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	4a42      	ldr	r2, [pc, #264]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 8004676:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800467a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0308 	and.w	r3, r3, #8
 8004684:	2b00      	cmp	r3, #0
 8004686:	d007      	beq.n	8004698 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004688:	4b3d      	ldr	r3, [pc, #244]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004690:	4a3b      	ldr	r2, [pc, #236]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 8004692:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004696:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004698:	4b39      	ldr	r3, [pc, #228]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	4936      	ldr	r1, [pc, #216]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]
 80046aa:	e008      	b.n	80046be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b80      	cmp	r3, #128	@ 0x80
 80046b0:	d105      	bne.n	80046be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80046b2:	4b33      	ldr	r3, [pc, #204]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	4a32      	ldr	r2, [pc, #200]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 80046b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046be:	4b2f      	ldr	r3, [pc, #188]	@ (800477c <HAL_RCC_ClockConfig+0x260>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d21d      	bcs.n	8004708 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046cc:	4b2b      	ldr	r3, [pc, #172]	@ (800477c <HAL_RCC_ClockConfig+0x260>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f023 020f 	bic.w	r2, r3, #15
 80046d4:	4929      	ldr	r1, [pc, #164]	@ (800477c <HAL_RCC_ClockConfig+0x260>)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	4313      	orrs	r3, r2
 80046da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046dc:	f7fd f9e6 	bl	8001aac <HAL_GetTick>
 80046e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e2:	e00a      	b.n	80046fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e4:	f7fd f9e2 	bl	8001aac <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e03b      	b.n	8004772 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fa:	4b20      	ldr	r3, [pc, #128]	@ (800477c <HAL_RCC_ClockConfig+0x260>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d1ed      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d008      	beq.n	8004726 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004714:	4b1a      	ldr	r3, [pc, #104]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4917      	ldr	r1, [pc, #92]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d009      	beq.n	8004746 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004732:	4b13      	ldr	r3, [pc, #76]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	490f      	ldr	r1, [pc, #60]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004746:	f000 f825 	bl	8004794 <HAL_RCC_GetSysClockFreq>
 800474a:	4602      	mov	r2, r0
 800474c:	4b0c      	ldr	r3, [pc, #48]	@ (8004780 <HAL_RCC_ClockConfig+0x264>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	490c      	ldr	r1, [pc, #48]	@ (8004788 <HAL_RCC_ClockConfig+0x26c>)
 8004758:	5ccb      	ldrb	r3, [r1, r3]
 800475a:	f003 031f 	and.w	r3, r3, #31
 800475e:	fa22 f303 	lsr.w	r3, r2, r3
 8004762:	4a0a      	ldr	r2, [pc, #40]	@ (800478c <HAL_RCC_ClockConfig+0x270>)
 8004764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004766:	4b0a      	ldr	r3, [pc, #40]	@ (8004790 <HAL_RCC_ClockConfig+0x274>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f7fc fb90 	bl	8000e90 <HAL_InitTick>
 8004770:	4603      	mov	r3, r0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40022000 	.word	0x40022000
 8004780:	40021000 	.word	0x40021000
 8004784:	04c4b400 	.word	0x04c4b400
 8004788:	08007fd0 	.word	0x08007fd0
 800478c:	20000000 	.word	0x20000000
 8004790:	20000004 	.word	0x20000004

08004794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800479a:	4b2c      	ldr	r3, [pc, #176]	@ (800484c <HAL_RCC_GetSysClockFreq+0xb8>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 030c 	and.w	r3, r3, #12
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d102      	bne.n	80047ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004850 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	e047      	b.n	800483c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80047ac:	4b27      	ldr	r3, [pc, #156]	@ (800484c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 030c 	and.w	r3, r3, #12
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d102      	bne.n	80047be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047b8:	4b25      	ldr	r3, [pc, #148]	@ (8004850 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	e03e      	b.n	800483c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80047be:	4b23      	ldr	r3, [pc, #140]	@ (800484c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	2b0c      	cmp	r3, #12
 80047c8:	d136      	bne.n	8004838 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047ca:	4b20      	ldr	r3, [pc, #128]	@ (800484c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047d4:	4b1d      	ldr	r3, [pc, #116]	@ (800484c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	091b      	lsrs	r3, r3, #4
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	3301      	adds	r3, #1
 80047e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d10c      	bne.n	8004802 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047e8:	4a19      	ldr	r2, [pc, #100]	@ (8004850 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	4a16      	ldr	r2, [pc, #88]	@ (800484c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047f2:	68d2      	ldr	r2, [r2, #12]
 80047f4:	0a12      	lsrs	r2, r2, #8
 80047f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80047fa:	fb02 f303 	mul.w	r3, r2, r3
 80047fe:	617b      	str	r3, [r7, #20]
      break;
 8004800:	e00c      	b.n	800481c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004802:	4a13      	ldr	r2, [pc, #76]	@ (8004850 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	fbb2 f3f3 	udiv	r3, r2, r3
 800480a:	4a10      	ldr	r2, [pc, #64]	@ (800484c <HAL_RCC_GetSysClockFreq+0xb8>)
 800480c:	68d2      	ldr	r2, [r2, #12]
 800480e:	0a12      	lsrs	r2, r2, #8
 8004810:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004814:	fb02 f303 	mul.w	r3, r2, r3
 8004818:	617b      	str	r3, [r7, #20]
      break;
 800481a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800481c:	4b0b      	ldr	r3, [pc, #44]	@ (800484c <HAL_RCC_GetSysClockFreq+0xb8>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	0e5b      	lsrs	r3, r3, #25
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	3301      	adds	r3, #1
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	fbb2 f3f3 	udiv	r3, r2, r3
 8004834:	613b      	str	r3, [r7, #16]
 8004836:	e001      	b.n	800483c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800483c:	693b      	ldr	r3, [r7, #16]
}
 800483e:	4618      	mov	r0, r3
 8004840:	371c      	adds	r7, #28
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	40021000 	.word	0x40021000
 8004850:	00f42400 	.word	0x00f42400

08004854 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004858:	4b03      	ldr	r3, [pc, #12]	@ (8004868 <HAL_RCC_GetHCLKFreq+0x14>)
 800485a:	681b      	ldr	r3, [r3, #0]
}
 800485c:	4618      	mov	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	20000000 	.word	0x20000000

0800486c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004870:	f7ff fff0 	bl	8004854 <HAL_RCC_GetHCLKFreq>
 8004874:	4602      	mov	r2, r0
 8004876:	4b06      	ldr	r3, [pc, #24]	@ (8004890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	0a1b      	lsrs	r3, r3, #8
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	4904      	ldr	r1, [pc, #16]	@ (8004894 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004882:	5ccb      	ldrb	r3, [r1, r3]
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800488c:	4618      	mov	r0, r3
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40021000 	.word	0x40021000
 8004894:	08007fe0 	.word	0x08007fe0

08004898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800489c:	f7ff ffda 	bl	8004854 <HAL_RCC_GetHCLKFreq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b06      	ldr	r3, [pc, #24]	@ (80048bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	0adb      	lsrs	r3, r3, #11
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	4904      	ldr	r1, [pc, #16]	@ (80048c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048ae:	5ccb      	ldrb	r3, [r1, r3]
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40021000 	.word	0x40021000
 80048c0:	08007fe0 	.word	0x08007fe0

080048c4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	220f      	movs	r2, #15
 80048d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80048d4:	4b12      	ldr	r3, [pc, #72]	@ (8004920 <HAL_RCC_GetClockConfig+0x5c>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 0203 	and.w	r2, r3, #3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80048e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004920 <HAL_RCC_GetClockConfig+0x5c>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80048ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004920 <HAL_RCC_GetClockConfig+0x5c>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80048f8:	4b09      	ldr	r3, [pc, #36]	@ (8004920 <HAL_RCC_GetClockConfig+0x5c>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	08db      	lsrs	r3, r3, #3
 80048fe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004906:	4b07      	ldr	r3, [pc, #28]	@ (8004924 <HAL_RCC_GetClockConfig+0x60>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 020f 	and.w	r2, r3, #15
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	601a      	str	r2, [r3, #0]
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40021000 	.word	0x40021000
 8004924:	40022000 	.word	0x40022000

08004928 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800492e:	4b1e      	ldr	r3, [pc, #120]	@ (80049a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004938:	4b1b      	ldr	r3, [pc, #108]	@ (80049a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	3301      	adds	r3, #1
 8004944:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b03      	cmp	r3, #3
 800494a:	d10c      	bne.n	8004966 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800494c:	4a17      	ldr	r2, [pc, #92]	@ (80049ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	fbb2 f3f3 	udiv	r3, r2, r3
 8004954:	4a14      	ldr	r2, [pc, #80]	@ (80049a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004956:	68d2      	ldr	r2, [r2, #12]
 8004958:	0a12      	lsrs	r2, r2, #8
 800495a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800495e:	fb02 f303 	mul.w	r3, r2, r3
 8004962:	617b      	str	r3, [r7, #20]
    break;
 8004964:	e00c      	b.n	8004980 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004966:	4a11      	ldr	r2, [pc, #68]	@ (80049ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	fbb2 f3f3 	udiv	r3, r2, r3
 800496e:	4a0e      	ldr	r2, [pc, #56]	@ (80049a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004970:	68d2      	ldr	r2, [r2, #12]
 8004972:	0a12      	lsrs	r2, r2, #8
 8004974:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004978:	fb02 f303 	mul.w	r3, r2, r3
 800497c:	617b      	str	r3, [r7, #20]
    break;
 800497e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004980:	4b09      	ldr	r3, [pc, #36]	@ (80049a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	0e5b      	lsrs	r3, r3, #25
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	3301      	adds	r3, #1
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	fbb2 f3f3 	udiv	r3, r2, r3
 8004998:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800499a:	687b      	ldr	r3, [r7, #4]
}
 800499c:	4618      	mov	r0, r3
 800499e:	371c      	adds	r7, #28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	40021000 	.word	0x40021000
 80049ac:	00f42400 	.word	0x00f42400

080049b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049b8:	2300      	movs	r3, #0
 80049ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049bc:	2300      	movs	r3, #0
 80049be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 8098 	beq.w	8004afe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ce:	2300      	movs	r3, #0
 80049d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049d2:	4b43      	ldr	r3, [pc, #268]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10d      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049de:	4b40      	ldr	r3, [pc, #256]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e2:	4a3f      	ldr	r2, [pc, #252]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80049ea:	4b3d      	ldr	r3, [pc, #244]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049f2:	60bb      	str	r3, [r7, #8]
 80049f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049f6:	2301      	movs	r3, #1
 80049f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049fa:	4b3a      	ldr	r3, [pc, #232]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a39      	ldr	r2, [pc, #228]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a06:	f7fd f851 	bl	8001aac <HAL_GetTick>
 8004a0a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a0c:	e009      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a0e:	f7fd f84d 	bl	8001aac <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d902      	bls.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	74fb      	strb	r3, [r7, #19]
        break;
 8004a20:	e005      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a22:	4b30      	ldr	r3, [pc, #192]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0ef      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004a2e:	7cfb      	ldrb	r3, [r7, #19]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d159      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a34:	4b2a      	ldr	r3, [pc, #168]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a3e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d01e      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d019      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a50:	4b23      	ldr	r3, [pc, #140]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a5c:	4b20      	ldr	r3, [pc, #128]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a62:	4a1f      	ldr	r2, [pc, #124]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a72:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a7c:	4a18      	ldr	r2, [pc, #96]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d016      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8e:	f7fd f80d 	bl	8001aac <HAL_GetTick>
 8004a92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a94:	e00b      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a96:	f7fd f809 	bl	8001aac <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d902      	bls.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	74fb      	strb	r3, [r7, #19]
            break;
 8004aac:	e006      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aae:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0ec      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004abc:	7cfb      	ldrb	r3, [r7, #19]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10b      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ac2:	4b07      	ldr	r3, [pc, #28]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad0:	4903      	ldr	r1, [pc, #12]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004ad8:	e008      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ada:	7cfb      	ldrb	r3, [r7, #19]
 8004adc:	74bb      	strb	r3, [r7, #18]
 8004ade:	e005      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae8:	7cfb      	ldrb	r3, [r7, #19]
 8004aea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aec:	7c7b      	ldrb	r3, [r7, #17]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d105      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004af2:	4ba6      	ldr	r3, [pc, #664]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af6:	4aa5      	ldr	r2, [pc, #660]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004afc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b0a:	4ba0      	ldr	r3, [pc, #640]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b10:	f023 0203 	bic.w	r2, r3, #3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	499c      	ldr	r1, [pc, #624]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b2c:	4b97      	ldr	r3, [pc, #604]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b32:	f023 020c 	bic.w	r2, r3, #12
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	4994      	ldr	r1, [pc, #592]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b4e:	4b8f      	ldr	r3, [pc, #572]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b54:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	498b      	ldr	r1, [pc, #556]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b70:	4b86      	ldr	r3, [pc, #536]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b76:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	4983      	ldr	r1, [pc, #524]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b92:	4b7e      	ldr	r3, [pc, #504]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b98:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	497a      	ldr	r1, [pc, #488]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00a      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bb4:	4b75      	ldr	r3, [pc, #468]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bba:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	4972      	ldr	r1, [pc, #456]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bd6:	4b6d      	ldr	r3, [pc, #436]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bdc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	4969      	ldr	r1, [pc, #420]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00a      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bf8:	4b64      	ldr	r3, [pc, #400]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bfe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	4961      	ldr	r1, [pc, #388]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c1a:	4b5c      	ldr	r3, [pc, #368]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c20:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c28:	4958      	ldr	r1, [pc, #352]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d015      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c3c:	4b53      	ldr	r3, [pc, #332]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4a:	4950      	ldr	r1, [pc, #320]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c5a:	d105      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c5c:	4b4b      	ldr	r3, [pc, #300]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	4a4a      	ldr	r2, [pc, #296]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c66:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d015      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c74:	4b45      	ldr	r3, [pc, #276]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c82:	4942      	ldr	r1, [pc, #264]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c92:	d105      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c94:	4b3d      	ldr	r3, [pc, #244]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	4a3c      	ldr	r2, [pc, #240]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c9e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d015      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004cac:	4b37      	ldr	r3, [pc, #220]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cba:	4934      	ldr	r1, [pc, #208]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cca:	d105      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ccc:	4b2f      	ldr	r3, [pc, #188]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	4a2e      	ldr	r2, [pc, #184]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cd6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d015      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ce4:	4b29      	ldr	r3, [pc, #164]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf2:	4926      	ldr	r1, [pc, #152]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d02:	d105      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d04:	4b21      	ldr	r3, [pc, #132]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4a20      	ldr	r2, [pc, #128]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d0e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d015      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2a:	4918      	ldr	r1, [pc, #96]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d3a:	d105      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d3c:	4b13      	ldr	r3, [pc, #76]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	4a12      	ldr	r2, [pc, #72]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d015      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d54:	4b0d      	ldr	r3, [pc, #52]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d5a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d62:	490a      	ldr	r1, [pc, #40]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d72:	d105      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d74:	4b05      	ldr	r3, [pc, #20]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	4a04      	ldr	r2, [pc, #16]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d7e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d80:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	40021000 	.word	0x40021000

08004d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e049      	b.n	8004e36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fc fc56 	bl	8001668 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4610      	mov	r0, r2
 8004dd0:	f000 fc28 	bl	8005624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d001      	beq.n	8004e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e04a      	b.n	8004eee <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a21      	ldr	r2, [pc, #132]	@ (8004efc <HAL_TIM_Base_Start_IT+0xbc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d018      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x6c>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e82:	d013      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x6c>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a1d      	ldr	r2, [pc, #116]	@ (8004f00 <HAL_TIM_Base_Start_IT+0xc0>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d00e      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x6c>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a1c      	ldr	r2, [pc, #112]	@ (8004f04 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d009      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x6c>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8004f08 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d004      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x6c>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a19      	ldr	r2, [pc, #100]	@ (8004f0c <HAL_TIM_Base_Start_IT+0xcc>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d115      	bne.n	8004ed8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	4b17      	ldr	r3, [pc, #92]	@ (8004f10 <HAL_TIM_Base_Start_IT+0xd0>)
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b06      	cmp	r3, #6
 8004ebc:	d015      	beq.n	8004eea <HAL_TIM_Base_Start_IT+0xaa>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ec4:	d011      	beq.n	8004eea <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f042 0201 	orr.w	r2, r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed6:	e008      	b.n	8004eea <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0201 	orr.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	e000      	b.n	8004eec <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40012c00 	.word	0x40012c00
 8004f00:	40000400 	.word	0x40000400
 8004f04:	40000800 	.word	0x40000800
 8004f08:	40013400 	.word	0x40013400
 8004f0c:	40014000 	.word	0x40014000
 8004f10:	00010007 	.word	0x00010007

08004f14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e049      	b.n	8004fba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fc fae0 	bl	8001500 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3304      	adds	r3, #4
 8004f50:	4619      	mov	r1, r3
 8004f52:	4610      	mov	r0, r2
 8004f54:	f000 fb66 	bl	8005624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b086      	sub	sp, #24
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e097      	b.n	8005106 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fc faa8 	bl	8001540 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005006:	f023 0307 	bic.w	r3, r3, #7
 800500a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3304      	adds	r3, #4
 8005014:	4619      	mov	r1, r3
 8005016:	4610      	mov	r0, r2
 8005018:	f000 fb04 	bl	8005624 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	4313      	orrs	r3, r2
 800503c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005044:	f023 0303 	bic.w	r3, r3, #3
 8005048:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	4313      	orrs	r3, r2
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005062:	f023 030c 	bic.w	r3, r3, #12
 8005066:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800506e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	68da      	ldr	r2, [r3, #12]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	021b      	lsls	r3, r3, #8
 800507e:	4313      	orrs	r3, r2
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	011a      	lsls	r2, r3, #4
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	031b      	lsls	r3, r3, #12
 8005092:	4313      	orrs	r3, r2
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80050a0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80050a8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	4313      	orrs	r3, r2
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d020      	beq.n	8005172 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d01b      	beq.n	8005172 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f06f 0202 	mvn.w	r2, #2
 8005142:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	f003 0303 	and.w	r3, r3, #3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fa45 	bl	80055e8 <HAL_TIM_IC_CaptureCallback>
 800515e:	e005      	b.n	800516c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fa37 	bl	80055d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fa48 	bl	80055fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d020      	beq.n	80051be <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f003 0304 	and.w	r3, r3, #4
 8005182:	2b00      	cmp	r3, #0
 8005184:	d01b      	beq.n	80051be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f06f 0204 	mvn.w	r2, #4
 800518e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fa1f 	bl	80055e8 <HAL_TIM_IC_CaptureCallback>
 80051aa:	e005      	b.n	80051b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fa11 	bl	80055d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fa22 	bl	80055fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f003 0308 	and.w	r3, r3, #8
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d020      	beq.n	800520a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d01b      	beq.n	800520a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f06f 0208 	mvn.w	r2, #8
 80051da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2204      	movs	r2, #4
 80051e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	f003 0303 	and.w	r3, r3, #3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f9f9 	bl	80055e8 <HAL_TIM_IC_CaptureCallback>
 80051f6:	e005      	b.n	8005204 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f9eb 	bl	80055d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f9fc 	bl	80055fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f003 0310 	and.w	r3, r3, #16
 8005210:	2b00      	cmp	r3, #0
 8005212:	d020      	beq.n	8005256 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b00      	cmp	r3, #0
 800521c:	d01b      	beq.n	8005256 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f06f 0210 	mvn.w	r2, #16
 8005226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2208      	movs	r2, #8
 800522c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f9d3 	bl	80055e8 <HAL_TIM_IC_CaptureCallback>
 8005242:	e005      	b.n	8005250 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f9c5 	bl	80055d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f9d6 	bl	80055fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00c      	beq.n	800527a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d007      	beq.n	800527a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f06f 0201 	mvn.w	r2, #1
 8005272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7fb fdc7 	bl	8000e08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005280:	2b00      	cmp	r3, #0
 8005282:	d104      	bne.n	800528e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00c      	beq.n	80052a8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005294:	2b00      	cmp	r3, #0
 8005296:	d007      	beq.n	80052a8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80052a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fe68 	bl	8005f78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00c      	beq.n	80052cc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d007      	beq.n	80052cc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80052c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fe60 	bl	8005f8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00c      	beq.n	80052f0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d007      	beq.n	80052f0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f990 	bl	8005610 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f003 0320 	and.w	r3, r3, #32
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00c      	beq.n	8005314 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b00      	cmp	r3, #0
 8005302:	d007      	beq.n	8005314 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0220 	mvn.w	r2, #32
 800530c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fe28 	bl	8005f64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00c      	beq.n	8005338 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d007      	beq.n	8005338 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fe34 	bl	8005fa0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00c      	beq.n	800535c <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d007      	beq.n	800535c <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fe2c 	bl	8005fb4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00c      	beq.n	8005380 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d007      	beq.n	8005380 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fe24 	bl	8005fc8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00c      	beq.n	80053a4 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d007      	beq.n	80053a4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800539c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fe1c 	bl	8005fdc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053a4:	bf00      	nop
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d101      	bne.n	80053ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053c6:	2302      	movs	r3, #2
 80053c8:	e0ff      	b.n	80055ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b14      	cmp	r3, #20
 80053d6:	f200 80f0 	bhi.w	80055ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053da:	a201      	add	r2, pc, #4	@ (adr r2, 80053e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e0:	08005435 	.word	0x08005435
 80053e4:	080055bb 	.word	0x080055bb
 80053e8:	080055bb 	.word	0x080055bb
 80053ec:	080055bb 	.word	0x080055bb
 80053f0:	08005475 	.word	0x08005475
 80053f4:	080055bb 	.word	0x080055bb
 80053f8:	080055bb 	.word	0x080055bb
 80053fc:	080055bb 	.word	0x080055bb
 8005400:	080054b7 	.word	0x080054b7
 8005404:	080055bb 	.word	0x080055bb
 8005408:	080055bb 	.word	0x080055bb
 800540c:	080055bb 	.word	0x080055bb
 8005410:	080054f7 	.word	0x080054f7
 8005414:	080055bb 	.word	0x080055bb
 8005418:	080055bb 	.word	0x080055bb
 800541c:	080055bb 	.word	0x080055bb
 8005420:	08005539 	.word	0x08005539
 8005424:	080055bb 	.word	0x080055bb
 8005428:	080055bb 	.word	0x080055bb
 800542c:	080055bb 	.word	0x080055bb
 8005430:	08005579 	.word	0x08005579
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	4618      	mov	r0, r3
 800543c:	f000 f98e 	bl	800575c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699a      	ldr	r2, [r3, #24]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0208 	orr.w	r2, r2, #8
 800544e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0204 	bic.w	r2, r2, #4
 800545e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6999      	ldr	r1, [r3, #24]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	619a      	str	r2, [r3, #24]
      break;
 8005472:	e0a5      	b.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68b9      	ldr	r1, [r7, #8]
 800547a:	4618      	mov	r0, r3
 800547c:	f000 f9fe 	bl	800587c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699a      	ldr	r2, [r3, #24]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800548e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800549e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6999      	ldr	r1, [r3, #24]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	021a      	lsls	r2, r3, #8
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	619a      	str	r2, [r3, #24]
      break;
 80054b4:	e084      	b.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68b9      	ldr	r1, [r7, #8]
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 fa67 	bl	8005990 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69da      	ldr	r2, [r3, #28]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f042 0208 	orr.w	r2, r2, #8
 80054d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0204 	bic.w	r2, r2, #4
 80054e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69d9      	ldr	r1, [r3, #28]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	691a      	ldr	r2, [r3, #16]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	61da      	str	r2, [r3, #28]
      break;
 80054f4:	e064      	b.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68b9      	ldr	r1, [r7, #8]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 facf 	bl	8005aa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69da      	ldr	r2, [r3, #28]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69d9      	ldr	r1, [r3, #28]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	021a      	lsls	r2, r3, #8
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	61da      	str	r2, [r3, #28]
      break;
 8005536:	e043      	b.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68b9      	ldr	r1, [r7, #8]
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fb38 	bl	8005bb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0208 	orr.w	r2, r2, #8
 8005552:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0204 	bic.w	r2, r2, #4
 8005562:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	691a      	ldr	r2, [r3, #16]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005576:	e023      	b.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68b9      	ldr	r1, [r7, #8]
 800557e:	4618      	mov	r0, r3
 8005580:	f000 fb7c 	bl	8005c7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005592:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055a2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	021a      	lsls	r2, r3, #8
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80055b8:	e002      	b.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	75fb      	strb	r3, [r7, #23]
      break;
 80055be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop

080055d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a42      	ldr	r2, [pc, #264]	@ (8005740 <TIM_Base_SetConfig+0x11c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00f      	beq.n	800565c <TIM_Base_SetConfig+0x38>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005642:	d00b      	beq.n	800565c <TIM_Base_SetConfig+0x38>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a3f      	ldr	r2, [pc, #252]	@ (8005744 <TIM_Base_SetConfig+0x120>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d007      	beq.n	800565c <TIM_Base_SetConfig+0x38>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a3e      	ldr	r2, [pc, #248]	@ (8005748 <TIM_Base_SetConfig+0x124>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d003      	beq.n	800565c <TIM_Base_SetConfig+0x38>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a3d      	ldr	r2, [pc, #244]	@ (800574c <TIM_Base_SetConfig+0x128>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d108      	bne.n	800566e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a33      	ldr	r2, [pc, #204]	@ (8005740 <TIM_Base_SetConfig+0x11c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d01b      	beq.n	80056ae <TIM_Base_SetConfig+0x8a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800567c:	d017      	beq.n	80056ae <TIM_Base_SetConfig+0x8a>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a30      	ldr	r2, [pc, #192]	@ (8005744 <TIM_Base_SetConfig+0x120>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d013      	beq.n	80056ae <TIM_Base_SetConfig+0x8a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a2f      	ldr	r2, [pc, #188]	@ (8005748 <TIM_Base_SetConfig+0x124>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00f      	beq.n	80056ae <TIM_Base_SetConfig+0x8a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a2e      	ldr	r2, [pc, #184]	@ (800574c <TIM_Base_SetConfig+0x128>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00b      	beq.n	80056ae <TIM_Base_SetConfig+0x8a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a2d      	ldr	r2, [pc, #180]	@ (8005750 <TIM_Base_SetConfig+0x12c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d007      	beq.n	80056ae <TIM_Base_SetConfig+0x8a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a2c      	ldr	r2, [pc, #176]	@ (8005754 <TIM_Base_SetConfig+0x130>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d003      	beq.n	80056ae <TIM_Base_SetConfig+0x8a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a2b      	ldr	r2, [pc, #172]	@ (8005758 <TIM_Base_SetConfig+0x134>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d108      	bne.n	80056c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	4313      	orrs	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a16      	ldr	r2, [pc, #88]	@ (8005740 <TIM_Base_SetConfig+0x11c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00f      	beq.n	800570c <TIM_Base_SetConfig+0xe8>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a17      	ldr	r2, [pc, #92]	@ (800574c <TIM_Base_SetConfig+0x128>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00b      	beq.n	800570c <TIM_Base_SetConfig+0xe8>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a16      	ldr	r2, [pc, #88]	@ (8005750 <TIM_Base_SetConfig+0x12c>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d007      	beq.n	800570c <TIM_Base_SetConfig+0xe8>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a15      	ldr	r2, [pc, #84]	@ (8005754 <TIM_Base_SetConfig+0x130>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_Base_SetConfig+0xe8>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a14      	ldr	r2, [pc, #80]	@ (8005758 <TIM_Base_SetConfig+0x134>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d103      	bne.n	8005714 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b01      	cmp	r3, #1
 8005724:	d105      	bne.n	8005732 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f023 0201 	bic.w	r2, r3, #1
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	611a      	str	r2, [r3, #16]
  }
}
 8005732:	bf00      	nop
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	40012c00 	.word	0x40012c00
 8005744:	40000400 	.word	0x40000400
 8005748:	40000800 	.word	0x40000800
 800574c:	40013400 	.word	0x40013400
 8005750:	40014000 	.word	0x40014000
 8005754:	40014400 	.word	0x40014400
 8005758:	40014800 	.word	0x40014800

0800575c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	f023 0201 	bic.w	r2, r3, #1
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800578a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800578e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0303 	bic.w	r3, r3, #3
 8005796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f023 0302 	bic.w	r3, r3, #2
 80057a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005868 <TIM_OC1_SetConfig+0x10c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00f      	beq.n	80057dc <TIM_OC1_SetConfig+0x80>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a2b      	ldr	r2, [pc, #172]	@ (800586c <TIM_OC1_SetConfig+0x110>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00b      	beq.n	80057dc <TIM_OC1_SetConfig+0x80>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a2a      	ldr	r2, [pc, #168]	@ (8005870 <TIM_OC1_SetConfig+0x114>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d007      	beq.n	80057dc <TIM_OC1_SetConfig+0x80>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a29      	ldr	r2, [pc, #164]	@ (8005874 <TIM_OC1_SetConfig+0x118>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d003      	beq.n	80057dc <TIM_OC1_SetConfig+0x80>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a28      	ldr	r2, [pc, #160]	@ (8005878 <TIM_OC1_SetConfig+0x11c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d10c      	bne.n	80057f6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f023 0308 	bic.w	r3, r3, #8
 80057e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f023 0304 	bic.w	r3, r3, #4
 80057f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005868 <TIM_OC1_SetConfig+0x10c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00f      	beq.n	800581e <TIM_OC1_SetConfig+0xc2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a1a      	ldr	r2, [pc, #104]	@ (800586c <TIM_OC1_SetConfig+0x110>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d00b      	beq.n	800581e <TIM_OC1_SetConfig+0xc2>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a19      	ldr	r2, [pc, #100]	@ (8005870 <TIM_OC1_SetConfig+0x114>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d007      	beq.n	800581e <TIM_OC1_SetConfig+0xc2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a18      	ldr	r2, [pc, #96]	@ (8005874 <TIM_OC1_SetConfig+0x118>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d003      	beq.n	800581e <TIM_OC1_SetConfig+0xc2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a17      	ldr	r2, [pc, #92]	@ (8005878 <TIM_OC1_SetConfig+0x11c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d111      	bne.n	8005842 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800582c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	4313      	orrs	r3, r2
 8005836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	4313      	orrs	r3, r2
 8005840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	621a      	str	r2, [r3, #32]
}
 800585c:	bf00      	nop
 800585e:	371c      	adds	r7, #28
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	40012c00 	.word	0x40012c00
 800586c:	40013400 	.word	0x40013400
 8005870:	40014000 	.word	0x40014000
 8005874:	40014400 	.word	0x40014400
 8005878:	40014800 	.word	0x40014800

0800587c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800587c:	b480      	push	{r7}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	f023 0210 	bic.w	r2, r3, #16
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	021b      	lsls	r3, r3, #8
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f023 0320 	bic.w	r3, r3, #32
 80058ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	011b      	lsls	r3, r3, #4
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a28      	ldr	r2, [pc, #160]	@ (800597c <TIM_OC2_SetConfig+0x100>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d003      	beq.n	80058e8 <TIM_OC2_SetConfig+0x6c>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a27      	ldr	r2, [pc, #156]	@ (8005980 <TIM_OC2_SetConfig+0x104>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d10d      	bne.n	8005904 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005902:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a1d      	ldr	r2, [pc, #116]	@ (800597c <TIM_OC2_SetConfig+0x100>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d00f      	beq.n	800592c <TIM_OC2_SetConfig+0xb0>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a1c      	ldr	r2, [pc, #112]	@ (8005980 <TIM_OC2_SetConfig+0x104>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00b      	beq.n	800592c <TIM_OC2_SetConfig+0xb0>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a1b      	ldr	r2, [pc, #108]	@ (8005984 <TIM_OC2_SetConfig+0x108>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d007      	beq.n	800592c <TIM_OC2_SetConfig+0xb0>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a1a      	ldr	r2, [pc, #104]	@ (8005988 <TIM_OC2_SetConfig+0x10c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d003      	beq.n	800592c <TIM_OC2_SetConfig+0xb0>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a19      	ldr	r2, [pc, #100]	@ (800598c <TIM_OC2_SetConfig+0x110>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d113      	bne.n	8005954 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005932:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800593a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	4313      	orrs	r3, r2
 8005946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	621a      	str	r2, [r3, #32]
}
 800596e:	bf00      	nop
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	40012c00 	.word	0x40012c00
 8005980:	40013400 	.word	0x40013400
 8005984:	40014000 	.word	0x40014000
 8005988:	40014400 	.word	0x40014400
 800598c:	40014800 	.word	0x40014800

08005990 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0303 	bic.w	r3, r3, #3
 80059ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	021b      	lsls	r3, r3, #8
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a27      	ldr	r2, [pc, #156]	@ (8005a8c <TIM_OC3_SetConfig+0xfc>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d003      	beq.n	80059fa <TIM_OC3_SetConfig+0x6a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a26      	ldr	r2, [pc, #152]	@ (8005a90 <TIM_OC3_SetConfig+0x100>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d10d      	bne.n	8005a16 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	021b      	lsls	r3, r3, #8
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a1c      	ldr	r2, [pc, #112]	@ (8005a8c <TIM_OC3_SetConfig+0xfc>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00f      	beq.n	8005a3e <TIM_OC3_SetConfig+0xae>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a1b      	ldr	r2, [pc, #108]	@ (8005a90 <TIM_OC3_SetConfig+0x100>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d00b      	beq.n	8005a3e <TIM_OC3_SetConfig+0xae>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a1a      	ldr	r2, [pc, #104]	@ (8005a94 <TIM_OC3_SetConfig+0x104>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d007      	beq.n	8005a3e <TIM_OC3_SetConfig+0xae>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a19      	ldr	r2, [pc, #100]	@ (8005a98 <TIM_OC3_SetConfig+0x108>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d003      	beq.n	8005a3e <TIM_OC3_SetConfig+0xae>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a18      	ldr	r2, [pc, #96]	@ (8005a9c <TIM_OC3_SetConfig+0x10c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d113      	bne.n	8005a66 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	621a      	str	r2, [r3, #32]
}
 8005a80:	bf00      	nop
 8005a82:	371c      	adds	r7, #28
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	40012c00 	.word	0x40012c00
 8005a90:	40013400 	.word	0x40013400
 8005a94:	40014000 	.word	0x40014000
 8005a98:	40014400 	.word	0x40014400
 8005a9c:	40014800 	.word	0x40014800

08005aa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ace:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	021b      	lsls	r3, r3, #8
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005aee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	031b      	lsls	r3, r3, #12
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a28      	ldr	r2, [pc, #160]	@ (8005ba0 <TIM_OC4_SetConfig+0x100>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d003      	beq.n	8005b0c <TIM_OC4_SetConfig+0x6c>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a27      	ldr	r2, [pc, #156]	@ (8005ba4 <TIM_OC4_SetConfig+0x104>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d10d      	bne.n	8005b28 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	031b      	lsls	r3, r3, #12
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a1d      	ldr	r2, [pc, #116]	@ (8005ba0 <TIM_OC4_SetConfig+0x100>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d00f      	beq.n	8005b50 <TIM_OC4_SetConfig+0xb0>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba4 <TIM_OC4_SetConfig+0x104>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d00b      	beq.n	8005b50 <TIM_OC4_SetConfig+0xb0>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ba8 <TIM_OC4_SetConfig+0x108>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d007      	beq.n	8005b50 <TIM_OC4_SetConfig+0xb0>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a1a      	ldr	r2, [pc, #104]	@ (8005bac <TIM_OC4_SetConfig+0x10c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d003      	beq.n	8005b50 <TIM_OC4_SetConfig+0xb0>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a19      	ldr	r2, [pc, #100]	@ (8005bb0 <TIM_OC4_SetConfig+0x110>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d113      	bne.n	8005b78 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b56:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b5e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	019b      	lsls	r3, r3, #6
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	019b      	lsls	r3, r3, #6
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	621a      	str	r2, [r3, #32]
}
 8005b92:	bf00      	nop
 8005b94:	371c      	adds	r7, #28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	40012c00 	.word	0x40012c00
 8005ba4:	40013400 	.word	0x40013400
 8005ba8:	40014000 	.word	0x40014000
 8005bac:	40014400 	.word	0x40014400
 8005bb0:	40014800 	.word	0x40014800

08005bb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005bf8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	041b      	lsls	r3, r3, #16
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a17      	ldr	r2, [pc, #92]	@ (8005c68 <TIM_OC5_SetConfig+0xb4>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00f      	beq.n	8005c2e <TIM_OC5_SetConfig+0x7a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a16      	ldr	r2, [pc, #88]	@ (8005c6c <TIM_OC5_SetConfig+0xb8>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00b      	beq.n	8005c2e <TIM_OC5_SetConfig+0x7a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a15      	ldr	r2, [pc, #84]	@ (8005c70 <TIM_OC5_SetConfig+0xbc>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d007      	beq.n	8005c2e <TIM_OC5_SetConfig+0x7a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a14      	ldr	r2, [pc, #80]	@ (8005c74 <TIM_OC5_SetConfig+0xc0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d003      	beq.n	8005c2e <TIM_OC5_SetConfig+0x7a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a13      	ldr	r2, [pc, #76]	@ (8005c78 <TIM_OC5_SetConfig+0xc4>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d109      	bne.n	8005c42 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	021b      	lsls	r3, r3, #8
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	621a      	str	r2, [r3, #32]
}
 8005c5c:	bf00      	nop
 8005c5e:	371c      	adds	r7, #28
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	40012c00 	.word	0x40012c00
 8005c6c:	40013400 	.word	0x40013400
 8005c70:	40014000 	.word	0x40014000
 8005c74:	40014400 	.word	0x40014400
 8005c78:	40014800 	.word	0x40014800

08005c7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005caa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	021b      	lsls	r3, r3, #8
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005cc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	051b      	lsls	r3, r3, #20
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a18      	ldr	r2, [pc, #96]	@ (8005d34 <TIM_OC6_SetConfig+0xb8>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d00f      	beq.n	8005cf8 <TIM_OC6_SetConfig+0x7c>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a17      	ldr	r2, [pc, #92]	@ (8005d38 <TIM_OC6_SetConfig+0xbc>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00b      	beq.n	8005cf8 <TIM_OC6_SetConfig+0x7c>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a16      	ldr	r2, [pc, #88]	@ (8005d3c <TIM_OC6_SetConfig+0xc0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d007      	beq.n	8005cf8 <TIM_OC6_SetConfig+0x7c>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a15      	ldr	r2, [pc, #84]	@ (8005d40 <TIM_OC6_SetConfig+0xc4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d003      	beq.n	8005cf8 <TIM_OC6_SetConfig+0x7c>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a14      	ldr	r2, [pc, #80]	@ (8005d44 <TIM_OC6_SetConfig+0xc8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d109      	bne.n	8005d0c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	029b      	lsls	r3, r3, #10
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	621a      	str	r2, [r3, #32]
}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40012c00 	.word	0x40012c00
 8005d38:	40013400 	.word	0x40013400
 8005d3c:	40014000 	.word	0x40014000
 8005d40:	40014400 	.word	0x40014400
 8005d44:	40014800 	.word	0x40014800

08005d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e065      	b.n	8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a2c      	ldr	r2, [pc, #176]	@ (8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d004      	beq.n	8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a2b      	ldr	r2, [pc, #172]	@ (8005e3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d108      	bne.n	8005da6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d018      	beq.n	8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dd6:	d013      	beq.n	8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a18      	ldr	r2, [pc, #96]	@ (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00e      	beq.n	8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a17      	ldr	r2, [pc, #92]	@ (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d009      	beq.n	8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a12      	ldr	r2, [pc, #72]	@ (8005e3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d004      	beq.n	8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a13      	ldr	r2, [pc, #76]	@ (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d10c      	bne.n	8005e1a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	40012c00 	.word	0x40012c00
 8005e3c:	40013400 	.word	0x40013400
 8005e40:	40000400 	.word	0x40000400
 8005e44:	40000800 	.word	0x40000800
 8005e48:	40014000 	.word	0x40014000

08005e4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e073      	b.n	8005f50 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	041b      	lsls	r3, r3, #16
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a19      	ldr	r2, [pc, #100]	@ (8005f5c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d004      	beq.n	8005f04 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a18      	ldr	r2, [pc, #96]	@ (8005f60 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d11c      	bne.n	8005f3e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0e:	051b      	lsls	r3, r3, #20
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	40012c00 	.word	0x40012c00
 8005f60:	40013400 	.word	0x40013400

08005f64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e042      	b.n	8006088 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006008:	2b00      	cmp	r3, #0
 800600a:	d106      	bne.n	800601a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7fb fc5b 	bl	80018d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2224      	movs	r2, #36	@ 0x24
 800601e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0201 	bic.w	r2, r2, #1
 8006030:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006036:	2b00      	cmp	r3, #0
 8006038:	d002      	beq.n	8006040 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fb82 	bl	8006744 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f8b3 	bl	80061ac <UART_SetConfig>
 8006046:	4603      	mov	r3, r0
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e01b      	b.n	8006088 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800605e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689a      	ldr	r2, [r3, #8]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800606e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0201 	orr.w	r2, r2, #1
 800607e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fc01 	bl	8006888 <UART_CheckIdleState>
 8006086:	4603      	mov	r3, r0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08a      	sub	sp, #40	@ 0x28
 8006094:	af02      	add	r7, sp, #8
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	603b      	str	r3, [r7, #0]
 800609c:	4613      	mov	r3, r2
 800609e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a6:	2b20      	cmp	r3, #32
 80060a8:	d17b      	bne.n	80061a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <HAL_UART_Transmit+0x26>
 80060b0:	88fb      	ldrh	r3, [r7, #6]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e074      	b.n	80061a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2221      	movs	r2, #33	@ 0x21
 80060c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060ca:	f7fb fcef 	bl	8001aac <HAL_GetTick>
 80060ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	88fa      	ldrh	r2, [r7, #6]
 80060d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	88fa      	ldrh	r2, [r7, #6]
 80060dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060e8:	d108      	bne.n	80060fc <HAL_UART_Transmit+0x6c>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d104      	bne.n	80060fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	61bb      	str	r3, [r7, #24]
 80060fa:	e003      	b.n	8006104 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006100:	2300      	movs	r3, #0
 8006102:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006104:	e030      	b.n	8006168 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2200      	movs	r2, #0
 800610e:	2180      	movs	r1, #128	@ 0x80
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 fc63 	bl	80069dc <UART_WaitOnFlagUntilTimeout>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2220      	movs	r2, #32
 8006120:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e03d      	b.n	80061a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10b      	bne.n	8006146 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	461a      	mov	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800613c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	3302      	adds	r3, #2
 8006142:	61bb      	str	r3, [r7, #24]
 8006144:	e007      	b.n	8006156 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	781a      	ldrb	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	3301      	adds	r3, #1
 8006154:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800615c:	b29b      	uxth	r3, r3
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800616e:	b29b      	uxth	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1c8      	bne.n	8006106 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	2200      	movs	r2, #0
 800617c:	2140      	movs	r1, #64	@ 0x40
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 fc2c 	bl	80069dc <UART_WaitOnFlagUntilTimeout>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d005      	beq.n	8006196 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2220      	movs	r2, #32
 800618e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e006      	b.n	80061a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2220      	movs	r2, #32
 800619a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800619e:	2300      	movs	r3, #0
 80061a0:	e000      	b.n	80061a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80061a2:	2302      	movs	r3, #2
  }
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3720      	adds	r7, #32
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061b0:	b08c      	sub	sp, #48	@ 0x30
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061b6:	2300      	movs	r3, #0
 80061b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	689a      	ldr	r2, [r3, #8]
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	431a      	orrs	r2, r3
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	431a      	orrs	r2, r3
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	4bab      	ldr	r3, [pc, #684]	@ (8006488 <UART_SetConfig+0x2dc>)
 80061dc:	4013      	ands	r3, r2
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	6812      	ldr	r2, [r2, #0]
 80061e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061e4:	430b      	orrs	r3, r1
 80061e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	68da      	ldr	r2, [r3, #12]
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4aa0      	ldr	r2, [pc, #640]	@ (800648c <UART_SetConfig+0x2e0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d004      	beq.n	8006218 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006214:	4313      	orrs	r3, r2
 8006216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006222:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	6812      	ldr	r2, [r2, #0]
 800622a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800622c:	430b      	orrs	r3, r1
 800622e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006236:	f023 010f 	bic.w	r1, r3, #15
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a91      	ldr	r2, [pc, #580]	@ (8006490 <UART_SetConfig+0x2e4>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d125      	bne.n	800629c <UART_SetConfig+0xf0>
 8006250:	4b90      	ldr	r3, [pc, #576]	@ (8006494 <UART_SetConfig+0x2e8>)
 8006252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	2b03      	cmp	r3, #3
 800625c:	d81a      	bhi.n	8006294 <UART_SetConfig+0xe8>
 800625e:	a201      	add	r2, pc, #4	@ (adr r2, 8006264 <UART_SetConfig+0xb8>)
 8006260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006264:	08006275 	.word	0x08006275
 8006268:	08006285 	.word	0x08006285
 800626c:	0800627d 	.word	0x0800627d
 8006270:	0800628d 	.word	0x0800628d
 8006274:	2301      	movs	r3, #1
 8006276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800627a:	e0d6      	b.n	800642a <UART_SetConfig+0x27e>
 800627c:	2302      	movs	r3, #2
 800627e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006282:	e0d2      	b.n	800642a <UART_SetConfig+0x27e>
 8006284:	2304      	movs	r3, #4
 8006286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800628a:	e0ce      	b.n	800642a <UART_SetConfig+0x27e>
 800628c:	2308      	movs	r3, #8
 800628e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006292:	e0ca      	b.n	800642a <UART_SetConfig+0x27e>
 8006294:	2310      	movs	r3, #16
 8006296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800629a:	e0c6      	b.n	800642a <UART_SetConfig+0x27e>
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a7d      	ldr	r2, [pc, #500]	@ (8006498 <UART_SetConfig+0x2ec>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d138      	bne.n	8006318 <UART_SetConfig+0x16c>
 80062a6:	4b7b      	ldr	r3, [pc, #492]	@ (8006494 <UART_SetConfig+0x2e8>)
 80062a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ac:	f003 030c 	and.w	r3, r3, #12
 80062b0:	2b0c      	cmp	r3, #12
 80062b2:	d82d      	bhi.n	8006310 <UART_SetConfig+0x164>
 80062b4:	a201      	add	r2, pc, #4	@ (adr r2, 80062bc <UART_SetConfig+0x110>)
 80062b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ba:	bf00      	nop
 80062bc:	080062f1 	.word	0x080062f1
 80062c0:	08006311 	.word	0x08006311
 80062c4:	08006311 	.word	0x08006311
 80062c8:	08006311 	.word	0x08006311
 80062cc:	08006301 	.word	0x08006301
 80062d0:	08006311 	.word	0x08006311
 80062d4:	08006311 	.word	0x08006311
 80062d8:	08006311 	.word	0x08006311
 80062dc:	080062f9 	.word	0x080062f9
 80062e0:	08006311 	.word	0x08006311
 80062e4:	08006311 	.word	0x08006311
 80062e8:	08006311 	.word	0x08006311
 80062ec:	08006309 	.word	0x08006309
 80062f0:	2300      	movs	r3, #0
 80062f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062f6:	e098      	b.n	800642a <UART_SetConfig+0x27e>
 80062f8:	2302      	movs	r3, #2
 80062fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062fe:	e094      	b.n	800642a <UART_SetConfig+0x27e>
 8006300:	2304      	movs	r3, #4
 8006302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006306:	e090      	b.n	800642a <UART_SetConfig+0x27e>
 8006308:	2308      	movs	r3, #8
 800630a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800630e:	e08c      	b.n	800642a <UART_SetConfig+0x27e>
 8006310:	2310      	movs	r3, #16
 8006312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006316:	e088      	b.n	800642a <UART_SetConfig+0x27e>
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a5f      	ldr	r2, [pc, #380]	@ (800649c <UART_SetConfig+0x2f0>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d125      	bne.n	800636e <UART_SetConfig+0x1c2>
 8006322:	4b5c      	ldr	r3, [pc, #368]	@ (8006494 <UART_SetConfig+0x2e8>)
 8006324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006328:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800632c:	2b30      	cmp	r3, #48	@ 0x30
 800632e:	d016      	beq.n	800635e <UART_SetConfig+0x1b2>
 8006330:	2b30      	cmp	r3, #48	@ 0x30
 8006332:	d818      	bhi.n	8006366 <UART_SetConfig+0x1ba>
 8006334:	2b20      	cmp	r3, #32
 8006336:	d00a      	beq.n	800634e <UART_SetConfig+0x1a2>
 8006338:	2b20      	cmp	r3, #32
 800633a:	d814      	bhi.n	8006366 <UART_SetConfig+0x1ba>
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <UART_SetConfig+0x19a>
 8006340:	2b10      	cmp	r3, #16
 8006342:	d008      	beq.n	8006356 <UART_SetConfig+0x1aa>
 8006344:	e00f      	b.n	8006366 <UART_SetConfig+0x1ba>
 8006346:	2300      	movs	r3, #0
 8006348:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800634c:	e06d      	b.n	800642a <UART_SetConfig+0x27e>
 800634e:	2302      	movs	r3, #2
 8006350:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006354:	e069      	b.n	800642a <UART_SetConfig+0x27e>
 8006356:	2304      	movs	r3, #4
 8006358:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800635c:	e065      	b.n	800642a <UART_SetConfig+0x27e>
 800635e:	2308      	movs	r3, #8
 8006360:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006364:	e061      	b.n	800642a <UART_SetConfig+0x27e>
 8006366:	2310      	movs	r3, #16
 8006368:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800636c:	e05d      	b.n	800642a <UART_SetConfig+0x27e>
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a4b      	ldr	r2, [pc, #300]	@ (80064a0 <UART_SetConfig+0x2f4>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d125      	bne.n	80063c4 <UART_SetConfig+0x218>
 8006378:	4b46      	ldr	r3, [pc, #280]	@ (8006494 <UART_SetConfig+0x2e8>)
 800637a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800637e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006382:	2bc0      	cmp	r3, #192	@ 0xc0
 8006384:	d016      	beq.n	80063b4 <UART_SetConfig+0x208>
 8006386:	2bc0      	cmp	r3, #192	@ 0xc0
 8006388:	d818      	bhi.n	80063bc <UART_SetConfig+0x210>
 800638a:	2b80      	cmp	r3, #128	@ 0x80
 800638c:	d00a      	beq.n	80063a4 <UART_SetConfig+0x1f8>
 800638e:	2b80      	cmp	r3, #128	@ 0x80
 8006390:	d814      	bhi.n	80063bc <UART_SetConfig+0x210>
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <UART_SetConfig+0x1f0>
 8006396:	2b40      	cmp	r3, #64	@ 0x40
 8006398:	d008      	beq.n	80063ac <UART_SetConfig+0x200>
 800639a:	e00f      	b.n	80063bc <UART_SetConfig+0x210>
 800639c:	2300      	movs	r3, #0
 800639e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063a2:	e042      	b.n	800642a <UART_SetConfig+0x27e>
 80063a4:	2302      	movs	r3, #2
 80063a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063aa:	e03e      	b.n	800642a <UART_SetConfig+0x27e>
 80063ac:	2304      	movs	r3, #4
 80063ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063b2:	e03a      	b.n	800642a <UART_SetConfig+0x27e>
 80063b4:	2308      	movs	r3, #8
 80063b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ba:	e036      	b.n	800642a <UART_SetConfig+0x27e>
 80063bc:	2310      	movs	r3, #16
 80063be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063c2:	e032      	b.n	800642a <UART_SetConfig+0x27e>
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a30      	ldr	r2, [pc, #192]	@ (800648c <UART_SetConfig+0x2e0>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d12a      	bne.n	8006424 <UART_SetConfig+0x278>
 80063ce:	4b31      	ldr	r3, [pc, #196]	@ (8006494 <UART_SetConfig+0x2e8>)
 80063d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80063d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063dc:	d01a      	beq.n	8006414 <UART_SetConfig+0x268>
 80063de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063e2:	d81b      	bhi.n	800641c <UART_SetConfig+0x270>
 80063e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063e8:	d00c      	beq.n	8006404 <UART_SetConfig+0x258>
 80063ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063ee:	d815      	bhi.n	800641c <UART_SetConfig+0x270>
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <UART_SetConfig+0x250>
 80063f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063f8:	d008      	beq.n	800640c <UART_SetConfig+0x260>
 80063fa:	e00f      	b.n	800641c <UART_SetConfig+0x270>
 80063fc:	2300      	movs	r3, #0
 80063fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006402:	e012      	b.n	800642a <UART_SetConfig+0x27e>
 8006404:	2302      	movs	r3, #2
 8006406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800640a:	e00e      	b.n	800642a <UART_SetConfig+0x27e>
 800640c:	2304      	movs	r3, #4
 800640e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006412:	e00a      	b.n	800642a <UART_SetConfig+0x27e>
 8006414:	2308      	movs	r3, #8
 8006416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800641a:	e006      	b.n	800642a <UART_SetConfig+0x27e>
 800641c:	2310      	movs	r3, #16
 800641e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006422:	e002      	b.n	800642a <UART_SetConfig+0x27e>
 8006424:	2310      	movs	r3, #16
 8006426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a17      	ldr	r2, [pc, #92]	@ (800648c <UART_SetConfig+0x2e0>)
 8006430:	4293      	cmp	r3, r2
 8006432:	f040 80a8 	bne.w	8006586 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006436:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800643a:	2b08      	cmp	r3, #8
 800643c:	d834      	bhi.n	80064a8 <UART_SetConfig+0x2fc>
 800643e:	a201      	add	r2, pc, #4	@ (adr r2, 8006444 <UART_SetConfig+0x298>)
 8006440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006444:	08006469 	.word	0x08006469
 8006448:	080064a9 	.word	0x080064a9
 800644c:	08006471 	.word	0x08006471
 8006450:	080064a9 	.word	0x080064a9
 8006454:	08006477 	.word	0x08006477
 8006458:	080064a9 	.word	0x080064a9
 800645c:	080064a9 	.word	0x080064a9
 8006460:	080064a9 	.word	0x080064a9
 8006464:	0800647f 	.word	0x0800647f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006468:	f7fe fa00 	bl	800486c <HAL_RCC_GetPCLK1Freq>
 800646c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800646e:	e021      	b.n	80064b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006470:	4b0c      	ldr	r3, [pc, #48]	@ (80064a4 <UART_SetConfig+0x2f8>)
 8006472:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006474:	e01e      	b.n	80064b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006476:	f7fe f98d 	bl	8004794 <HAL_RCC_GetSysClockFreq>
 800647a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800647c:	e01a      	b.n	80064b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800647e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006482:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006484:	e016      	b.n	80064b4 <UART_SetConfig+0x308>
 8006486:	bf00      	nop
 8006488:	cfff69f3 	.word	0xcfff69f3
 800648c:	40008000 	.word	0x40008000
 8006490:	40013800 	.word	0x40013800
 8006494:	40021000 	.word	0x40021000
 8006498:	40004400 	.word	0x40004400
 800649c:	40004800 	.word	0x40004800
 80064a0:	40004c00 	.word	0x40004c00
 80064a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80064b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 812a 	beq.w	8006710 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c0:	4a9e      	ldr	r2, [pc, #632]	@ (800673c <UART_SetConfig+0x590>)
 80064c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064c6:	461a      	mov	r2, r3
 80064c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80064ce:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	4613      	mov	r3, r2
 80064d6:	005b      	lsls	r3, r3, #1
 80064d8:	4413      	add	r3, r2
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d305      	bcc.n	80064ec <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d903      	bls.n	80064f4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80064f2:	e10d      	b.n	8006710 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f6:	2200      	movs	r2, #0
 80064f8:	60bb      	str	r3, [r7, #8]
 80064fa:	60fa      	str	r2, [r7, #12]
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006500:	4a8e      	ldr	r2, [pc, #568]	@ (800673c <UART_SetConfig+0x590>)
 8006502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006506:	b29b      	uxth	r3, r3
 8006508:	2200      	movs	r2, #0
 800650a:	603b      	str	r3, [r7, #0]
 800650c:	607a      	str	r2, [r7, #4]
 800650e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006512:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006516:	f7f9 fed3 	bl	80002c0 <__aeabi_uldivmod>
 800651a:	4602      	mov	r2, r0
 800651c:	460b      	mov	r3, r1
 800651e:	4610      	mov	r0, r2
 8006520:	4619      	mov	r1, r3
 8006522:	f04f 0200 	mov.w	r2, #0
 8006526:	f04f 0300 	mov.w	r3, #0
 800652a:	020b      	lsls	r3, r1, #8
 800652c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006530:	0202      	lsls	r2, r0, #8
 8006532:	6979      	ldr	r1, [r7, #20]
 8006534:	6849      	ldr	r1, [r1, #4]
 8006536:	0849      	lsrs	r1, r1, #1
 8006538:	2000      	movs	r0, #0
 800653a:	460c      	mov	r4, r1
 800653c:	4605      	mov	r5, r0
 800653e:	eb12 0804 	adds.w	r8, r2, r4
 8006542:	eb43 0905 	adc.w	r9, r3, r5
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	469a      	mov	sl, r3
 800654e:	4693      	mov	fp, r2
 8006550:	4652      	mov	r2, sl
 8006552:	465b      	mov	r3, fp
 8006554:	4640      	mov	r0, r8
 8006556:	4649      	mov	r1, r9
 8006558:	f7f9 feb2 	bl	80002c0 <__aeabi_uldivmod>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	4613      	mov	r3, r2
 8006562:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800656a:	d308      	bcc.n	800657e <UART_SetConfig+0x3d2>
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006572:	d204      	bcs.n	800657e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6a3a      	ldr	r2, [r7, #32]
 800657a:	60da      	str	r2, [r3, #12]
 800657c:	e0c8      	b.n	8006710 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006584:	e0c4      	b.n	8006710 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800658e:	d167      	bne.n	8006660 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006590:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006594:	2b08      	cmp	r3, #8
 8006596:	d828      	bhi.n	80065ea <UART_SetConfig+0x43e>
 8006598:	a201      	add	r2, pc, #4	@ (adr r2, 80065a0 <UART_SetConfig+0x3f4>)
 800659a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659e:	bf00      	nop
 80065a0:	080065c5 	.word	0x080065c5
 80065a4:	080065cd 	.word	0x080065cd
 80065a8:	080065d5 	.word	0x080065d5
 80065ac:	080065eb 	.word	0x080065eb
 80065b0:	080065db 	.word	0x080065db
 80065b4:	080065eb 	.word	0x080065eb
 80065b8:	080065eb 	.word	0x080065eb
 80065bc:	080065eb 	.word	0x080065eb
 80065c0:	080065e3 	.word	0x080065e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c4:	f7fe f952 	bl	800486c <HAL_RCC_GetPCLK1Freq>
 80065c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065ca:	e014      	b.n	80065f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065cc:	f7fe f964 	bl	8004898 <HAL_RCC_GetPCLK2Freq>
 80065d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065d2:	e010      	b.n	80065f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065d4:	4b5a      	ldr	r3, [pc, #360]	@ (8006740 <UART_SetConfig+0x594>)
 80065d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065d8:	e00d      	b.n	80065f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065da:	f7fe f8db 	bl	8004794 <HAL_RCC_GetSysClockFreq>
 80065de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065e0:	e009      	b.n	80065f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065e8:	e005      	b.n	80065f6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80065f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 8089 	beq.w	8006710 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006602:	4a4e      	ldr	r2, [pc, #312]	@ (800673c <UART_SetConfig+0x590>)
 8006604:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006608:	461a      	mov	r2, r3
 800660a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006610:	005a      	lsls	r2, r3, #1
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	085b      	lsrs	r3, r3, #1
 8006618:	441a      	add	r2, r3
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006622:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	2b0f      	cmp	r3, #15
 8006628:	d916      	bls.n	8006658 <UART_SetConfig+0x4ac>
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006630:	d212      	bcs.n	8006658 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	b29b      	uxth	r3, r3
 8006636:	f023 030f 	bic.w	r3, r3, #15
 800663a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	085b      	lsrs	r3, r3, #1
 8006640:	b29b      	uxth	r3, r3
 8006642:	f003 0307 	and.w	r3, r3, #7
 8006646:	b29a      	uxth	r2, r3
 8006648:	8bfb      	ldrh	r3, [r7, #30]
 800664a:	4313      	orrs	r3, r2
 800664c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	8bfa      	ldrh	r2, [r7, #30]
 8006654:	60da      	str	r2, [r3, #12]
 8006656:	e05b      	b.n	8006710 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800665e:	e057      	b.n	8006710 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006660:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006664:	2b08      	cmp	r3, #8
 8006666:	d828      	bhi.n	80066ba <UART_SetConfig+0x50e>
 8006668:	a201      	add	r2, pc, #4	@ (adr r2, 8006670 <UART_SetConfig+0x4c4>)
 800666a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666e:	bf00      	nop
 8006670:	08006695 	.word	0x08006695
 8006674:	0800669d 	.word	0x0800669d
 8006678:	080066a5 	.word	0x080066a5
 800667c:	080066bb 	.word	0x080066bb
 8006680:	080066ab 	.word	0x080066ab
 8006684:	080066bb 	.word	0x080066bb
 8006688:	080066bb 	.word	0x080066bb
 800668c:	080066bb 	.word	0x080066bb
 8006690:	080066b3 	.word	0x080066b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006694:	f7fe f8ea 	bl	800486c <HAL_RCC_GetPCLK1Freq>
 8006698:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800669a:	e014      	b.n	80066c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800669c:	f7fe f8fc 	bl	8004898 <HAL_RCC_GetPCLK2Freq>
 80066a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066a2:	e010      	b.n	80066c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066a4:	4b26      	ldr	r3, [pc, #152]	@ (8006740 <UART_SetConfig+0x594>)
 80066a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066a8:	e00d      	b.n	80066c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066aa:	f7fe f873 	bl	8004794 <HAL_RCC_GetSysClockFreq>
 80066ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066b0:	e009      	b.n	80066c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066b8:	e005      	b.n	80066c6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80066c4:	bf00      	nop
    }

    if (pclk != 0U)
 80066c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d021      	beq.n	8006710 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d0:	4a1a      	ldr	r2, [pc, #104]	@ (800673c <UART_SetConfig+0x590>)
 80066d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066d6:	461a      	mov	r2, r3
 80066d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066da:	fbb3 f2f2 	udiv	r2, r3, r2
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	085b      	lsrs	r3, r3, #1
 80066e4:	441a      	add	r2, r3
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	2b0f      	cmp	r3, #15
 80066f4:	d909      	bls.n	800670a <UART_SetConfig+0x55e>
 80066f6:	6a3b      	ldr	r3, [r7, #32]
 80066f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066fc:	d205      	bcs.n	800670a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	b29a      	uxth	r2, r3
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60da      	str	r2, [r3, #12]
 8006708:	e002      	b.n	8006710 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2201      	movs	r2, #1
 8006714:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2201      	movs	r2, #1
 800671c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	2200      	movs	r2, #0
 8006724:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2200      	movs	r2, #0
 800672a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800672c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006730:	4618      	mov	r0, r3
 8006732:	3730      	adds	r7, #48	@ 0x30
 8006734:	46bd      	mov	sp, r7
 8006736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800673a:	bf00      	nop
 800673c:	08007fe8 	.word	0x08007fe8
 8006740:	00f42400 	.word	0x00f42400

08006744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006750:	f003 0308 	and.w	r3, r3, #8
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00a      	beq.n	800676e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00a      	beq.n	80067b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b6:	f003 0304 	and.w	r3, r3, #4
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00a      	beq.n	80067d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d8:	f003 0310 	and.w	r3, r3, #16
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00a      	beq.n	80067f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fa:	f003 0320 	and.w	r3, r3, #32
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00a      	beq.n	8006818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800681c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006820:	2b00      	cmp	r3, #0
 8006822:	d01a      	beq.n	800685a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800683e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006842:	d10a      	bne.n	800685a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800685e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	605a      	str	r2, [r3, #4]
  }
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b098      	sub	sp, #96	@ 0x60
 800688c:	af02      	add	r7, sp, #8
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006898:	f7fb f908 	bl	8001aac <HAL_GetTick>
 800689c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0308 	and.w	r3, r3, #8
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d12f      	bne.n	800690c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068b4:	2200      	movs	r2, #0
 80068b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f88e 	bl	80069dc <UART_WaitOnFlagUntilTimeout>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d022      	beq.n	800690c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068da:	653b      	str	r3, [r7, #80]	@ 0x50
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	461a      	mov	r2, r3
 80068e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80068e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e6      	bne.n	80068c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e063      	b.n	80069d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0304 	and.w	r3, r3, #4
 8006916:	2b04      	cmp	r3, #4
 8006918:	d149      	bne.n	80069ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800691a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006922:	2200      	movs	r2, #0
 8006924:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f857 	bl	80069dc <UART_WaitOnFlagUntilTimeout>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d03c      	beq.n	80069ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693c:	e853 3f00 	ldrex	r3, [r3]
 8006940:	623b      	str	r3, [r7, #32]
   return(result);
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006948:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006952:	633b      	str	r3, [r7, #48]	@ 0x30
 8006954:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006958:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e6      	bne.n	8006934 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3308      	adds	r3, #8
 800696c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	60fb      	str	r3, [r7, #12]
   return(result);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f023 0301 	bic.w	r3, r3, #1
 800697c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3308      	adds	r3, #8
 8006984:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006986:	61fa      	str	r2, [r7, #28]
 8006988:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698a:	69b9      	ldr	r1, [r7, #24]
 800698c:	69fa      	ldr	r2, [r7, #28]
 800698e:	e841 2300 	strex	r3, r2, [r1]
 8006992:	617b      	str	r3, [r7, #20]
   return(result);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1e5      	bne.n	8006966 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2220      	movs	r2, #32
 800699e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e012      	b.n	80069d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2220      	movs	r2, #32
 80069b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3758      	adds	r7, #88	@ 0x58
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	603b      	str	r3, [r7, #0]
 80069e8:	4613      	mov	r3, r2
 80069ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ec:	e04f      	b.n	8006a8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f4:	d04b      	beq.n	8006a8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069f6:	f7fb f859 	bl	8001aac <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d302      	bcc.n	8006a0c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e04e      	b.n	8006aae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0304 	and.w	r3, r3, #4
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d037      	beq.n	8006a8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2b80      	cmp	r3, #128	@ 0x80
 8006a22:	d034      	beq.n	8006a8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2b40      	cmp	r3, #64	@ 0x40
 8006a28:	d031      	beq.n	8006a8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	f003 0308 	and.w	r3, r3, #8
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d110      	bne.n	8006a5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2208      	movs	r2, #8
 8006a3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 f838 	bl	8006ab6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2208      	movs	r2, #8
 8006a4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e029      	b.n	8006aae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	69db      	ldr	r3, [r3, #28]
 8006a60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a68:	d111      	bne.n	8006a8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 f81e 	bl	8006ab6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e00f      	b.n	8006aae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69da      	ldr	r2, [r3, #28]
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	4013      	ands	r3, r2
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	bf0c      	ite	eq
 8006a9e:	2301      	moveq	r3, #1
 8006aa0:	2300      	movne	r3, #0
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	79fb      	ldrb	r3, [r7, #7]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d0a0      	beq.n	80069ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b095      	sub	sp, #84	@ 0x54
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac6:	e853 3f00 	ldrex	r3, [r3]
 8006aca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ace:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006adc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ade:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ae2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ae4:	e841 2300 	strex	r3, r2, [r1]
 8006ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1e6      	bne.n	8006abe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3308      	adds	r3, #8
 8006af6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	e853 3f00 	ldrex	r3, [r3]
 8006afe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b06:	f023 0301 	bic.w	r3, r3, #1
 8006b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3308      	adds	r3, #8
 8006b12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b1c:	e841 2300 	strex	r3, r2, [r1]
 8006b20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1e3      	bne.n	8006af0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d118      	bne.n	8006b62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f023 0310 	bic.w	r3, r3, #16
 8006b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b4e:	61bb      	str	r3, [r7, #24]
 8006b50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b52:	6979      	ldr	r1, [r7, #20]
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e6      	bne.n	8006b30 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006b76:	bf00      	nop
 8006b78:	3754      	adds	r7, #84	@ 0x54
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b085      	sub	sp, #20
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_UARTEx_DisableFifoMode+0x16>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e027      	b.n	8006be8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2224      	movs	r2, #36	@ 0x24
 8006ba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0201 	bic.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006bc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d101      	bne.n	8006c0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e02d      	b.n	8006c68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2224      	movs	r2, #36	@ 0x24
 8006c18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 0201 	bic.w	r2, r2, #1
 8006c32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f84f 	bl	8006cec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d101      	bne.n	8006c88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c84:	2302      	movs	r3, #2
 8006c86:	e02d      	b.n	8006ce4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2224      	movs	r2, #36	@ 0x24
 8006c94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 0201 	bic.w	r2, r2, #1
 8006cae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f811 	bl	8006cec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d108      	bne.n	8006d0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d0c:	e031      	b.n	8006d72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d0e:	2308      	movs	r3, #8
 8006d10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d12:	2308      	movs	r3, #8
 8006d14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	0e5b      	lsrs	r3, r3, #25
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	f003 0307 	and.w	r3, r3, #7
 8006d24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	0f5b      	lsrs	r3, r3, #29
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	f003 0307 	and.w	r3, r3, #7
 8006d34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	7b3a      	ldrb	r2, [r7, #12]
 8006d3a:	4911      	ldr	r1, [pc, #68]	@ (8006d80 <UARTEx_SetNbDataToProcess+0x94>)
 8006d3c:	5c8a      	ldrb	r2, [r1, r2]
 8006d3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d42:	7b3a      	ldrb	r2, [r7, #12]
 8006d44:	490f      	ldr	r1, [pc, #60]	@ (8006d84 <UARTEx_SetNbDataToProcess+0x98>)
 8006d46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d48:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
 8006d56:	7b7a      	ldrb	r2, [r7, #13]
 8006d58:	4909      	ldr	r1, [pc, #36]	@ (8006d80 <UARTEx_SetNbDataToProcess+0x94>)
 8006d5a:	5c8a      	ldrb	r2, [r1, r2]
 8006d5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d60:	7b7a      	ldrb	r2, [r7, #13]
 8006d62:	4908      	ldr	r1, [pc, #32]	@ (8006d84 <UARTEx_SetNbDataToProcess+0x98>)
 8006d64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d66:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006d72:	bf00      	nop
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	08008000 	.word	0x08008000
 8006d84:	08008008 	.word	0x08008008

08006d88 <std>:
 8006d88:	2300      	movs	r3, #0
 8006d8a:	b510      	push	{r4, lr}
 8006d8c:	4604      	mov	r4, r0
 8006d8e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d96:	6083      	str	r3, [r0, #8]
 8006d98:	8181      	strh	r1, [r0, #12]
 8006d9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d9c:	81c2      	strh	r2, [r0, #14]
 8006d9e:	6183      	str	r3, [r0, #24]
 8006da0:	4619      	mov	r1, r3
 8006da2:	2208      	movs	r2, #8
 8006da4:	305c      	adds	r0, #92	@ 0x5c
 8006da6:	f000 f9f9 	bl	800719c <memset>
 8006daa:	4b0d      	ldr	r3, [pc, #52]	@ (8006de0 <std+0x58>)
 8006dac:	6263      	str	r3, [r4, #36]	@ 0x24
 8006dae:	4b0d      	ldr	r3, [pc, #52]	@ (8006de4 <std+0x5c>)
 8006db0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006db2:	4b0d      	ldr	r3, [pc, #52]	@ (8006de8 <std+0x60>)
 8006db4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006db6:	4b0d      	ldr	r3, [pc, #52]	@ (8006dec <std+0x64>)
 8006db8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006dba:	4b0d      	ldr	r3, [pc, #52]	@ (8006df0 <std+0x68>)
 8006dbc:	6224      	str	r4, [r4, #32]
 8006dbe:	429c      	cmp	r4, r3
 8006dc0:	d006      	beq.n	8006dd0 <std+0x48>
 8006dc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006dc6:	4294      	cmp	r4, r2
 8006dc8:	d002      	beq.n	8006dd0 <std+0x48>
 8006dca:	33d0      	adds	r3, #208	@ 0xd0
 8006dcc:	429c      	cmp	r4, r3
 8006dce:	d105      	bne.n	8006ddc <std+0x54>
 8006dd0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dd8:	f000 ba58 	b.w	800728c <__retarget_lock_init_recursive>
 8006ddc:	bd10      	pop	{r4, pc}
 8006dde:	bf00      	nop
 8006de0:	08006fed 	.word	0x08006fed
 8006de4:	0800700f 	.word	0x0800700f
 8006de8:	08007047 	.word	0x08007047
 8006dec:	0800706b 	.word	0x0800706b
 8006df0:	20000414 	.word	0x20000414

08006df4 <stdio_exit_handler>:
 8006df4:	4a02      	ldr	r2, [pc, #8]	@ (8006e00 <stdio_exit_handler+0xc>)
 8006df6:	4903      	ldr	r1, [pc, #12]	@ (8006e04 <stdio_exit_handler+0x10>)
 8006df8:	4803      	ldr	r0, [pc, #12]	@ (8006e08 <stdio_exit_handler+0x14>)
 8006dfa:	f000 b869 	b.w	8006ed0 <_fwalk_sglue>
 8006dfe:	bf00      	nop
 8006e00:	2000000c 	.word	0x2000000c
 8006e04:	08007b2d 	.word	0x08007b2d
 8006e08:	2000001c 	.word	0x2000001c

08006e0c <cleanup_stdio>:
 8006e0c:	6841      	ldr	r1, [r0, #4]
 8006e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e40 <cleanup_stdio+0x34>)
 8006e10:	4299      	cmp	r1, r3
 8006e12:	b510      	push	{r4, lr}
 8006e14:	4604      	mov	r4, r0
 8006e16:	d001      	beq.n	8006e1c <cleanup_stdio+0x10>
 8006e18:	f000 fe88 	bl	8007b2c <_fflush_r>
 8006e1c:	68a1      	ldr	r1, [r4, #8]
 8006e1e:	4b09      	ldr	r3, [pc, #36]	@ (8006e44 <cleanup_stdio+0x38>)
 8006e20:	4299      	cmp	r1, r3
 8006e22:	d002      	beq.n	8006e2a <cleanup_stdio+0x1e>
 8006e24:	4620      	mov	r0, r4
 8006e26:	f000 fe81 	bl	8007b2c <_fflush_r>
 8006e2a:	68e1      	ldr	r1, [r4, #12]
 8006e2c:	4b06      	ldr	r3, [pc, #24]	@ (8006e48 <cleanup_stdio+0x3c>)
 8006e2e:	4299      	cmp	r1, r3
 8006e30:	d004      	beq.n	8006e3c <cleanup_stdio+0x30>
 8006e32:	4620      	mov	r0, r4
 8006e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e38:	f000 be78 	b.w	8007b2c <_fflush_r>
 8006e3c:	bd10      	pop	{r4, pc}
 8006e3e:	bf00      	nop
 8006e40:	20000414 	.word	0x20000414
 8006e44:	2000047c 	.word	0x2000047c
 8006e48:	200004e4 	.word	0x200004e4

08006e4c <global_stdio_init.part.0>:
 8006e4c:	b510      	push	{r4, lr}
 8006e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e7c <global_stdio_init.part.0+0x30>)
 8006e50:	4c0b      	ldr	r4, [pc, #44]	@ (8006e80 <global_stdio_init.part.0+0x34>)
 8006e52:	4a0c      	ldr	r2, [pc, #48]	@ (8006e84 <global_stdio_init.part.0+0x38>)
 8006e54:	601a      	str	r2, [r3, #0]
 8006e56:	4620      	mov	r0, r4
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2104      	movs	r1, #4
 8006e5c:	f7ff ff94 	bl	8006d88 <std>
 8006e60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e64:	2201      	movs	r2, #1
 8006e66:	2109      	movs	r1, #9
 8006e68:	f7ff ff8e 	bl	8006d88 <std>
 8006e6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e70:	2202      	movs	r2, #2
 8006e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e76:	2112      	movs	r1, #18
 8006e78:	f7ff bf86 	b.w	8006d88 <std>
 8006e7c:	2000054c 	.word	0x2000054c
 8006e80:	20000414 	.word	0x20000414
 8006e84:	08006df5 	.word	0x08006df5

08006e88 <__sfp_lock_acquire>:
 8006e88:	4801      	ldr	r0, [pc, #4]	@ (8006e90 <__sfp_lock_acquire+0x8>)
 8006e8a:	f000 ba00 	b.w	800728e <__retarget_lock_acquire_recursive>
 8006e8e:	bf00      	nop
 8006e90:	20000555 	.word	0x20000555

08006e94 <__sfp_lock_release>:
 8006e94:	4801      	ldr	r0, [pc, #4]	@ (8006e9c <__sfp_lock_release+0x8>)
 8006e96:	f000 b9fb 	b.w	8007290 <__retarget_lock_release_recursive>
 8006e9a:	bf00      	nop
 8006e9c:	20000555 	.word	0x20000555

08006ea0 <__sinit>:
 8006ea0:	b510      	push	{r4, lr}
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	f7ff fff0 	bl	8006e88 <__sfp_lock_acquire>
 8006ea8:	6a23      	ldr	r3, [r4, #32]
 8006eaa:	b11b      	cbz	r3, 8006eb4 <__sinit+0x14>
 8006eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eb0:	f7ff bff0 	b.w	8006e94 <__sfp_lock_release>
 8006eb4:	4b04      	ldr	r3, [pc, #16]	@ (8006ec8 <__sinit+0x28>)
 8006eb6:	6223      	str	r3, [r4, #32]
 8006eb8:	4b04      	ldr	r3, [pc, #16]	@ (8006ecc <__sinit+0x2c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1f5      	bne.n	8006eac <__sinit+0xc>
 8006ec0:	f7ff ffc4 	bl	8006e4c <global_stdio_init.part.0>
 8006ec4:	e7f2      	b.n	8006eac <__sinit+0xc>
 8006ec6:	bf00      	nop
 8006ec8:	08006e0d 	.word	0x08006e0d
 8006ecc:	2000054c 	.word	0x2000054c

08006ed0 <_fwalk_sglue>:
 8006ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ed4:	4607      	mov	r7, r0
 8006ed6:	4688      	mov	r8, r1
 8006ed8:	4614      	mov	r4, r2
 8006eda:	2600      	movs	r6, #0
 8006edc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ee0:	f1b9 0901 	subs.w	r9, r9, #1
 8006ee4:	d505      	bpl.n	8006ef2 <_fwalk_sglue+0x22>
 8006ee6:	6824      	ldr	r4, [r4, #0]
 8006ee8:	2c00      	cmp	r4, #0
 8006eea:	d1f7      	bne.n	8006edc <_fwalk_sglue+0xc>
 8006eec:	4630      	mov	r0, r6
 8006eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ef2:	89ab      	ldrh	r3, [r5, #12]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d907      	bls.n	8006f08 <_fwalk_sglue+0x38>
 8006ef8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006efc:	3301      	adds	r3, #1
 8006efe:	d003      	beq.n	8006f08 <_fwalk_sglue+0x38>
 8006f00:	4629      	mov	r1, r5
 8006f02:	4638      	mov	r0, r7
 8006f04:	47c0      	blx	r8
 8006f06:	4306      	orrs	r6, r0
 8006f08:	3568      	adds	r5, #104	@ 0x68
 8006f0a:	e7e9      	b.n	8006ee0 <_fwalk_sglue+0x10>

08006f0c <iprintf>:
 8006f0c:	b40f      	push	{r0, r1, r2, r3}
 8006f0e:	b507      	push	{r0, r1, r2, lr}
 8006f10:	4906      	ldr	r1, [pc, #24]	@ (8006f2c <iprintf+0x20>)
 8006f12:	ab04      	add	r3, sp, #16
 8006f14:	6808      	ldr	r0, [r1, #0]
 8006f16:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f1a:	6881      	ldr	r1, [r0, #8]
 8006f1c:	9301      	str	r3, [sp, #4]
 8006f1e:	f000 fadb 	bl	80074d8 <_vfiprintf_r>
 8006f22:	b003      	add	sp, #12
 8006f24:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f28:	b004      	add	sp, #16
 8006f2a:	4770      	bx	lr
 8006f2c:	20000018 	.word	0x20000018

08006f30 <_puts_r>:
 8006f30:	6a03      	ldr	r3, [r0, #32]
 8006f32:	b570      	push	{r4, r5, r6, lr}
 8006f34:	6884      	ldr	r4, [r0, #8]
 8006f36:	4605      	mov	r5, r0
 8006f38:	460e      	mov	r6, r1
 8006f3a:	b90b      	cbnz	r3, 8006f40 <_puts_r+0x10>
 8006f3c:	f7ff ffb0 	bl	8006ea0 <__sinit>
 8006f40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f42:	07db      	lsls	r3, r3, #31
 8006f44:	d405      	bmi.n	8006f52 <_puts_r+0x22>
 8006f46:	89a3      	ldrh	r3, [r4, #12]
 8006f48:	0598      	lsls	r0, r3, #22
 8006f4a:	d402      	bmi.n	8006f52 <_puts_r+0x22>
 8006f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f4e:	f000 f99e 	bl	800728e <__retarget_lock_acquire_recursive>
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	0719      	lsls	r1, r3, #28
 8006f56:	d502      	bpl.n	8006f5e <_puts_r+0x2e>
 8006f58:	6923      	ldr	r3, [r4, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d135      	bne.n	8006fca <_puts_r+0x9a>
 8006f5e:	4621      	mov	r1, r4
 8006f60:	4628      	mov	r0, r5
 8006f62:	f000 f8c5 	bl	80070f0 <__swsetup_r>
 8006f66:	b380      	cbz	r0, 8006fca <_puts_r+0x9a>
 8006f68:	f04f 35ff 	mov.w	r5, #4294967295
 8006f6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f6e:	07da      	lsls	r2, r3, #31
 8006f70:	d405      	bmi.n	8006f7e <_puts_r+0x4e>
 8006f72:	89a3      	ldrh	r3, [r4, #12]
 8006f74:	059b      	lsls	r3, r3, #22
 8006f76:	d402      	bmi.n	8006f7e <_puts_r+0x4e>
 8006f78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f7a:	f000 f989 	bl	8007290 <__retarget_lock_release_recursive>
 8006f7e:	4628      	mov	r0, r5
 8006f80:	bd70      	pop	{r4, r5, r6, pc}
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	da04      	bge.n	8006f90 <_puts_r+0x60>
 8006f86:	69a2      	ldr	r2, [r4, #24]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	dc17      	bgt.n	8006fbc <_puts_r+0x8c>
 8006f8c:	290a      	cmp	r1, #10
 8006f8e:	d015      	beq.n	8006fbc <_puts_r+0x8c>
 8006f90:	6823      	ldr	r3, [r4, #0]
 8006f92:	1c5a      	adds	r2, r3, #1
 8006f94:	6022      	str	r2, [r4, #0]
 8006f96:	7019      	strb	r1, [r3, #0]
 8006f98:	68a3      	ldr	r3, [r4, #8]
 8006f9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	60a3      	str	r3, [r4, #8]
 8006fa2:	2900      	cmp	r1, #0
 8006fa4:	d1ed      	bne.n	8006f82 <_puts_r+0x52>
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	da11      	bge.n	8006fce <_puts_r+0x9e>
 8006faa:	4622      	mov	r2, r4
 8006fac:	210a      	movs	r1, #10
 8006fae:	4628      	mov	r0, r5
 8006fb0:	f000 f85f 	bl	8007072 <__swbuf_r>
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	d0d7      	beq.n	8006f68 <_puts_r+0x38>
 8006fb8:	250a      	movs	r5, #10
 8006fba:	e7d7      	b.n	8006f6c <_puts_r+0x3c>
 8006fbc:	4622      	mov	r2, r4
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	f000 f857 	bl	8007072 <__swbuf_r>
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	d1e7      	bne.n	8006f98 <_puts_r+0x68>
 8006fc8:	e7ce      	b.n	8006f68 <_puts_r+0x38>
 8006fca:	3e01      	subs	r6, #1
 8006fcc:	e7e4      	b.n	8006f98 <_puts_r+0x68>
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	6022      	str	r2, [r4, #0]
 8006fd4:	220a      	movs	r2, #10
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	e7ee      	b.n	8006fb8 <_puts_r+0x88>
	...

08006fdc <puts>:
 8006fdc:	4b02      	ldr	r3, [pc, #8]	@ (8006fe8 <puts+0xc>)
 8006fde:	4601      	mov	r1, r0
 8006fe0:	6818      	ldr	r0, [r3, #0]
 8006fe2:	f7ff bfa5 	b.w	8006f30 <_puts_r>
 8006fe6:	bf00      	nop
 8006fe8:	20000018 	.word	0x20000018

08006fec <__sread>:
 8006fec:	b510      	push	{r4, lr}
 8006fee:	460c      	mov	r4, r1
 8006ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff4:	f000 f8fc 	bl	80071f0 <_read_r>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	bfab      	itete	ge
 8006ffc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ffe:	89a3      	ldrhlt	r3, [r4, #12]
 8007000:	181b      	addge	r3, r3, r0
 8007002:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007006:	bfac      	ite	ge
 8007008:	6563      	strge	r3, [r4, #84]	@ 0x54
 800700a:	81a3      	strhlt	r3, [r4, #12]
 800700c:	bd10      	pop	{r4, pc}

0800700e <__swrite>:
 800700e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007012:	461f      	mov	r7, r3
 8007014:	898b      	ldrh	r3, [r1, #12]
 8007016:	05db      	lsls	r3, r3, #23
 8007018:	4605      	mov	r5, r0
 800701a:	460c      	mov	r4, r1
 800701c:	4616      	mov	r6, r2
 800701e:	d505      	bpl.n	800702c <__swrite+0x1e>
 8007020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007024:	2302      	movs	r3, #2
 8007026:	2200      	movs	r2, #0
 8007028:	f000 f8d0 	bl	80071cc <_lseek_r>
 800702c:	89a3      	ldrh	r3, [r4, #12]
 800702e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007032:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007036:	81a3      	strh	r3, [r4, #12]
 8007038:	4632      	mov	r2, r6
 800703a:	463b      	mov	r3, r7
 800703c:	4628      	mov	r0, r5
 800703e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007042:	f000 b8e7 	b.w	8007214 <_write_r>

08007046 <__sseek>:
 8007046:	b510      	push	{r4, lr}
 8007048:	460c      	mov	r4, r1
 800704a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800704e:	f000 f8bd 	bl	80071cc <_lseek_r>
 8007052:	1c43      	adds	r3, r0, #1
 8007054:	89a3      	ldrh	r3, [r4, #12]
 8007056:	bf15      	itete	ne
 8007058:	6560      	strne	r0, [r4, #84]	@ 0x54
 800705a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800705e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007062:	81a3      	strheq	r3, [r4, #12]
 8007064:	bf18      	it	ne
 8007066:	81a3      	strhne	r3, [r4, #12]
 8007068:	bd10      	pop	{r4, pc}

0800706a <__sclose>:
 800706a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800706e:	f000 b89d 	b.w	80071ac <_close_r>

08007072 <__swbuf_r>:
 8007072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007074:	460e      	mov	r6, r1
 8007076:	4614      	mov	r4, r2
 8007078:	4605      	mov	r5, r0
 800707a:	b118      	cbz	r0, 8007084 <__swbuf_r+0x12>
 800707c:	6a03      	ldr	r3, [r0, #32]
 800707e:	b90b      	cbnz	r3, 8007084 <__swbuf_r+0x12>
 8007080:	f7ff ff0e 	bl	8006ea0 <__sinit>
 8007084:	69a3      	ldr	r3, [r4, #24]
 8007086:	60a3      	str	r3, [r4, #8]
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	071a      	lsls	r2, r3, #28
 800708c:	d501      	bpl.n	8007092 <__swbuf_r+0x20>
 800708e:	6923      	ldr	r3, [r4, #16]
 8007090:	b943      	cbnz	r3, 80070a4 <__swbuf_r+0x32>
 8007092:	4621      	mov	r1, r4
 8007094:	4628      	mov	r0, r5
 8007096:	f000 f82b 	bl	80070f0 <__swsetup_r>
 800709a:	b118      	cbz	r0, 80070a4 <__swbuf_r+0x32>
 800709c:	f04f 37ff 	mov.w	r7, #4294967295
 80070a0:	4638      	mov	r0, r7
 80070a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	6922      	ldr	r2, [r4, #16]
 80070a8:	1a98      	subs	r0, r3, r2
 80070aa:	6963      	ldr	r3, [r4, #20]
 80070ac:	b2f6      	uxtb	r6, r6
 80070ae:	4283      	cmp	r3, r0
 80070b0:	4637      	mov	r7, r6
 80070b2:	dc05      	bgt.n	80070c0 <__swbuf_r+0x4e>
 80070b4:	4621      	mov	r1, r4
 80070b6:	4628      	mov	r0, r5
 80070b8:	f000 fd38 	bl	8007b2c <_fflush_r>
 80070bc:	2800      	cmp	r0, #0
 80070be:	d1ed      	bne.n	800709c <__swbuf_r+0x2a>
 80070c0:	68a3      	ldr	r3, [r4, #8]
 80070c2:	3b01      	subs	r3, #1
 80070c4:	60a3      	str	r3, [r4, #8]
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	6022      	str	r2, [r4, #0]
 80070cc:	701e      	strb	r6, [r3, #0]
 80070ce:	6962      	ldr	r2, [r4, #20]
 80070d0:	1c43      	adds	r3, r0, #1
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d004      	beq.n	80070e0 <__swbuf_r+0x6e>
 80070d6:	89a3      	ldrh	r3, [r4, #12]
 80070d8:	07db      	lsls	r3, r3, #31
 80070da:	d5e1      	bpl.n	80070a0 <__swbuf_r+0x2e>
 80070dc:	2e0a      	cmp	r6, #10
 80070de:	d1df      	bne.n	80070a0 <__swbuf_r+0x2e>
 80070e0:	4621      	mov	r1, r4
 80070e2:	4628      	mov	r0, r5
 80070e4:	f000 fd22 	bl	8007b2c <_fflush_r>
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d0d9      	beq.n	80070a0 <__swbuf_r+0x2e>
 80070ec:	e7d6      	b.n	800709c <__swbuf_r+0x2a>
	...

080070f0 <__swsetup_r>:
 80070f0:	b538      	push	{r3, r4, r5, lr}
 80070f2:	4b29      	ldr	r3, [pc, #164]	@ (8007198 <__swsetup_r+0xa8>)
 80070f4:	4605      	mov	r5, r0
 80070f6:	6818      	ldr	r0, [r3, #0]
 80070f8:	460c      	mov	r4, r1
 80070fa:	b118      	cbz	r0, 8007104 <__swsetup_r+0x14>
 80070fc:	6a03      	ldr	r3, [r0, #32]
 80070fe:	b90b      	cbnz	r3, 8007104 <__swsetup_r+0x14>
 8007100:	f7ff fece 	bl	8006ea0 <__sinit>
 8007104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007108:	0719      	lsls	r1, r3, #28
 800710a:	d422      	bmi.n	8007152 <__swsetup_r+0x62>
 800710c:	06da      	lsls	r2, r3, #27
 800710e:	d407      	bmi.n	8007120 <__swsetup_r+0x30>
 8007110:	2209      	movs	r2, #9
 8007112:	602a      	str	r2, [r5, #0]
 8007114:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007118:	81a3      	strh	r3, [r4, #12]
 800711a:	f04f 30ff 	mov.w	r0, #4294967295
 800711e:	e033      	b.n	8007188 <__swsetup_r+0x98>
 8007120:	0758      	lsls	r0, r3, #29
 8007122:	d512      	bpl.n	800714a <__swsetup_r+0x5a>
 8007124:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007126:	b141      	cbz	r1, 800713a <__swsetup_r+0x4a>
 8007128:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800712c:	4299      	cmp	r1, r3
 800712e:	d002      	beq.n	8007136 <__swsetup_r+0x46>
 8007130:	4628      	mov	r0, r5
 8007132:	f000 f8af 	bl	8007294 <_free_r>
 8007136:	2300      	movs	r3, #0
 8007138:	6363      	str	r3, [r4, #52]	@ 0x34
 800713a:	89a3      	ldrh	r3, [r4, #12]
 800713c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007140:	81a3      	strh	r3, [r4, #12]
 8007142:	2300      	movs	r3, #0
 8007144:	6063      	str	r3, [r4, #4]
 8007146:	6923      	ldr	r3, [r4, #16]
 8007148:	6023      	str	r3, [r4, #0]
 800714a:	89a3      	ldrh	r3, [r4, #12]
 800714c:	f043 0308 	orr.w	r3, r3, #8
 8007150:	81a3      	strh	r3, [r4, #12]
 8007152:	6923      	ldr	r3, [r4, #16]
 8007154:	b94b      	cbnz	r3, 800716a <__swsetup_r+0x7a>
 8007156:	89a3      	ldrh	r3, [r4, #12]
 8007158:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800715c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007160:	d003      	beq.n	800716a <__swsetup_r+0x7a>
 8007162:	4621      	mov	r1, r4
 8007164:	4628      	mov	r0, r5
 8007166:	f000 fd2f 	bl	8007bc8 <__smakebuf_r>
 800716a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800716e:	f013 0201 	ands.w	r2, r3, #1
 8007172:	d00a      	beq.n	800718a <__swsetup_r+0x9a>
 8007174:	2200      	movs	r2, #0
 8007176:	60a2      	str	r2, [r4, #8]
 8007178:	6962      	ldr	r2, [r4, #20]
 800717a:	4252      	negs	r2, r2
 800717c:	61a2      	str	r2, [r4, #24]
 800717e:	6922      	ldr	r2, [r4, #16]
 8007180:	b942      	cbnz	r2, 8007194 <__swsetup_r+0xa4>
 8007182:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007186:	d1c5      	bne.n	8007114 <__swsetup_r+0x24>
 8007188:	bd38      	pop	{r3, r4, r5, pc}
 800718a:	0799      	lsls	r1, r3, #30
 800718c:	bf58      	it	pl
 800718e:	6962      	ldrpl	r2, [r4, #20]
 8007190:	60a2      	str	r2, [r4, #8]
 8007192:	e7f4      	b.n	800717e <__swsetup_r+0x8e>
 8007194:	2000      	movs	r0, #0
 8007196:	e7f7      	b.n	8007188 <__swsetup_r+0x98>
 8007198:	20000018 	.word	0x20000018

0800719c <memset>:
 800719c:	4402      	add	r2, r0
 800719e:	4603      	mov	r3, r0
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d100      	bne.n	80071a6 <memset+0xa>
 80071a4:	4770      	bx	lr
 80071a6:	f803 1b01 	strb.w	r1, [r3], #1
 80071aa:	e7f9      	b.n	80071a0 <memset+0x4>

080071ac <_close_r>:
 80071ac:	b538      	push	{r3, r4, r5, lr}
 80071ae:	4d06      	ldr	r5, [pc, #24]	@ (80071c8 <_close_r+0x1c>)
 80071b0:	2300      	movs	r3, #0
 80071b2:	4604      	mov	r4, r0
 80071b4:	4608      	mov	r0, r1
 80071b6:	602b      	str	r3, [r5, #0]
 80071b8:	f7f9 ff5b 	bl	8001072 <_close>
 80071bc:	1c43      	adds	r3, r0, #1
 80071be:	d102      	bne.n	80071c6 <_close_r+0x1a>
 80071c0:	682b      	ldr	r3, [r5, #0]
 80071c2:	b103      	cbz	r3, 80071c6 <_close_r+0x1a>
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	bd38      	pop	{r3, r4, r5, pc}
 80071c8:	20000550 	.word	0x20000550

080071cc <_lseek_r>:
 80071cc:	b538      	push	{r3, r4, r5, lr}
 80071ce:	4d07      	ldr	r5, [pc, #28]	@ (80071ec <_lseek_r+0x20>)
 80071d0:	4604      	mov	r4, r0
 80071d2:	4608      	mov	r0, r1
 80071d4:	4611      	mov	r1, r2
 80071d6:	2200      	movs	r2, #0
 80071d8:	602a      	str	r2, [r5, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	f7f9 ff70 	bl	80010c0 <_lseek>
 80071e0:	1c43      	adds	r3, r0, #1
 80071e2:	d102      	bne.n	80071ea <_lseek_r+0x1e>
 80071e4:	682b      	ldr	r3, [r5, #0]
 80071e6:	b103      	cbz	r3, 80071ea <_lseek_r+0x1e>
 80071e8:	6023      	str	r3, [r4, #0]
 80071ea:	bd38      	pop	{r3, r4, r5, pc}
 80071ec:	20000550 	.word	0x20000550

080071f0 <_read_r>:
 80071f0:	b538      	push	{r3, r4, r5, lr}
 80071f2:	4d07      	ldr	r5, [pc, #28]	@ (8007210 <_read_r+0x20>)
 80071f4:	4604      	mov	r4, r0
 80071f6:	4608      	mov	r0, r1
 80071f8:	4611      	mov	r1, r2
 80071fa:	2200      	movs	r2, #0
 80071fc:	602a      	str	r2, [r5, #0]
 80071fe:	461a      	mov	r2, r3
 8007200:	f7f9 fefe 	bl	8001000 <_read>
 8007204:	1c43      	adds	r3, r0, #1
 8007206:	d102      	bne.n	800720e <_read_r+0x1e>
 8007208:	682b      	ldr	r3, [r5, #0]
 800720a:	b103      	cbz	r3, 800720e <_read_r+0x1e>
 800720c:	6023      	str	r3, [r4, #0]
 800720e:	bd38      	pop	{r3, r4, r5, pc}
 8007210:	20000550 	.word	0x20000550

08007214 <_write_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	4d07      	ldr	r5, [pc, #28]	@ (8007234 <_write_r+0x20>)
 8007218:	4604      	mov	r4, r0
 800721a:	4608      	mov	r0, r1
 800721c:	4611      	mov	r1, r2
 800721e:	2200      	movs	r2, #0
 8007220:	602a      	str	r2, [r5, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	f7f9 ff09 	bl	800103a <_write>
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	d102      	bne.n	8007232 <_write_r+0x1e>
 800722c:	682b      	ldr	r3, [r5, #0]
 800722e:	b103      	cbz	r3, 8007232 <_write_r+0x1e>
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	bd38      	pop	{r3, r4, r5, pc}
 8007234:	20000550 	.word	0x20000550

08007238 <__errno>:
 8007238:	4b01      	ldr	r3, [pc, #4]	@ (8007240 <__errno+0x8>)
 800723a:	6818      	ldr	r0, [r3, #0]
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	20000018 	.word	0x20000018

08007244 <__libc_init_array>:
 8007244:	b570      	push	{r4, r5, r6, lr}
 8007246:	4d0d      	ldr	r5, [pc, #52]	@ (800727c <__libc_init_array+0x38>)
 8007248:	4c0d      	ldr	r4, [pc, #52]	@ (8007280 <__libc_init_array+0x3c>)
 800724a:	1b64      	subs	r4, r4, r5
 800724c:	10a4      	asrs	r4, r4, #2
 800724e:	2600      	movs	r6, #0
 8007250:	42a6      	cmp	r6, r4
 8007252:	d109      	bne.n	8007268 <__libc_init_array+0x24>
 8007254:	4d0b      	ldr	r5, [pc, #44]	@ (8007284 <__libc_init_array+0x40>)
 8007256:	4c0c      	ldr	r4, [pc, #48]	@ (8007288 <__libc_init_array+0x44>)
 8007258:	f000 fd24 	bl	8007ca4 <_init>
 800725c:	1b64      	subs	r4, r4, r5
 800725e:	10a4      	asrs	r4, r4, #2
 8007260:	2600      	movs	r6, #0
 8007262:	42a6      	cmp	r6, r4
 8007264:	d105      	bne.n	8007272 <__libc_init_array+0x2e>
 8007266:	bd70      	pop	{r4, r5, r6, pc}
 8007268:	f855 3b04 	ldr.w	r3, [r5], #4
 800726c:	4798      	blx	r3
 800726e:	3601      	adds	r6, #1
 8007270:	e7ee      	b.n	8007250 <__libc_init_array+0xc>
 8007272:	f855 3b04 	ldr.w	r3, [r5], #4
 8007276:	4798      	blx	r3
 8007278:	3601      	adds	r6, #1
 800727a:	e7f2      	b.n	8007262 <__libc_init_array+0x1e>
 800727c:	0800804c 	.word	0x0800804c
 8007280:	0800804c 	.word	0x0800804c
 8007284:	0800804c 	.word	0x0800804c
 8007288:	08008050 	.word	0x08008050

0800728c <__retarget_lock_init_recursive>:
 800728c:	4770      	bx	lr

0800728e <__retarget_lock_acquire_recursive>:
 800728e:	4770      	bx	lr

08007290 <__retarget_lock_release_recursive>:
 8007290:	4770      	bx	lr
	...

08007294 <_free_r>:
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	4605      	mov	r5, r0
 8007298:	2900      	cmp	r1, #0
 800729a:	d041      	beq.n	8007320 <_free_r+0x8c>
 800729c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072a0:	1f0c      	subs	r4, r1, #4
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	bfb8      	it	lt
 80072a6:	18e4      	addlt	r4, r4, r3
 80072a8:	f000 f8e0 	bl	800746c <__malloc_lock>
 80072ac:	4a1d      	ldr	r2, [pc, #116]	@ (8007324 <_free_r+0x90>)
 80072ae:	6813      	ldr	r3, [r2, #0]
 80072b0:	b933      	cbnz	r3, 80072c0 <_free_r+0x2c>
 80072b2:	6063      	str	r3, [r4, #4]
 80072b4:	6014      	str	r4, [r2, #0]
 80072b6:	4628      	mov	r0, r5
 80072b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072bc:	f000 b8dc 	b.w	8007478 <__malloc_unlock>
 80072c0:	42a3      	cmp	r3, r4
 80072c2:	d908      	bls.n	80072d6 <_free_r+0x42>
 80072c4:	6820      	ldr	r0, [r4, #0]
 80072c6:	1821      	adds	r1, r4, r0
 80072c8:	428b      	cmp	r3, r1
 80072ca:	bf01      	itttt	eq
 80072cc:	6819      	ldreq	r1, [r3, #0]
 80072ce:	685b      	ldreq	r3, [r3, #4]
 80072d0:	1809      	addeq	r1, r1, r0
 80072d2:	6021      	streq	r1, [r4, #0]
 80072d4:	e7ed      	b.n	80072b2 <_free_r+0x1e>
 80072d6:	461a      	mov	r2, r3
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	b10b      	cbz	r3, 80072e0 <_free_r+0x4c>
 80072dc:	42a3      	cmp	r3, r4
 80072de:	d9fa      	bls.n	80072d6 <_free_r+0x42>
 80072e0:	6811      	ldr	r1, [r2, #0]
 80072e2:	1850      	adds	r0, r2, r1
 80072e4:	42a0      	cmp	r0, r4
 80072e6:	d10b      	bne.n	8007300 <_free_r+0x6c>
 80072e8:	6820      	ldr	r0, [r4, #0]
 80072ea:	4401      	add	r1, r0
 80072ec:	1850      	adds	r0, r2, r1
 80072ee:	4283      	cmp	r3, r0
 80072f0:	6011      	str	r1, [r2, #0]
 80072f2:	d1e0      	bne.n	80072b6 <_free_r+0x22>
 80072f4:	6818      	ldr	r0, [r3, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	6053      	str	r3, [r2, #4]
 80072fa:	4408      	add	r0, r1
 80072fc:	6010      	str	r0, [r2, #0]
 80072fe:	e7da      	b.n	80072b6 <_free_r+0x22>
 8007300:	d902      	bls.n	8007308 <_free_r+0x74>
 8007302:	230c      	movs	r3, #12
 8007304:	602b      	str	r3, [r5, #0]
 8007306:	e7d6      	b.n	80072b6 <_free_r+0x22>
 8007308:	6820      	ldr	r0, [r4, #0]
 800730a:	1821      	adds	r1, r4, r0
 800730c:	428b      	cmp	r3, r1
 800730e:	bf04      	itt	eq
 8007310:	6819      	ldreq	r1, [r3, #0]
 8007312:	685b      	ldreq	r3, [r3, #4]
 8007314:	6063      	str	r3, [r4, #4]
 8007316:	bf04      	itt	eq
 8007318:	1809      	addeq	r1, r1, r0
 800731a:	6021      	streq	r1, [r4, #0]
 800731c:	6054      	str	r4, [r2, #4]
 800731e:	e7ca      	b.n	80072b6 <_free_r+0x22>
 8007320:	bd38      	pop	{r3, r4, r5, pc}
 8007322:	bf00      	nop
 8007324:	2000055c 	.word	0x2000055c

08007328 <sbrk_aligned>:
 8007328:	b570      	push	{r4, r5, r6, lr}
 800732a:	4e0f      	ldr	r6, [pc, #60]	@ (8007368 <sbrk_aligned+0x40>)
 800732c:	460c      	mov	r4, r1
 800732e:	6831      	ldr	r1, [r6, #0]
 8007330:	4605      	mov	r5, r0
 8007332:	b911      	cbnz	r1, 800733a <sbrk_aligned+0x12>
 8007334:	f000 fca6 	bl	8007c84 <_sbrk_r>
 8007338:	6030      	str	r0, [r6, #0]
 800733a:	4621      	mov	r1, r4
 800733c:	4628      	mov	r0, r5
 800733e:	f000 fca1 	bl	8007c84 <_sbrk_r>
 8007342:	1c43      	adds	r3, r0, #1
 8007344:	d103      	bne.n	800734e <sbrk_aligned+0x26>
 8007346:	f04f 34ff 	mov.w	r4, #4294967295
 800734a:	4620      	mov	r0, r4
 800734c:	bd70      	pop	{r4, r5, r6, pc}
 800734e:	1cc4      	adds	r4, r0, #3
 8007350:	f024 0403 	bic.w	r4, r4, #3
 8007354:	42a0      	cmp	r0, r4
 8007356:	d0f8      	beq.n	800734a <sbrk_aligned+0x22>
 8007358:	1a21      	subs	r1, r4, r0
 800735a:	4628      	mov	r0, r5
 800735c:	f000 fc92 	bl	8007c84 <_sbrk_r>
 8007360:	3001      	adds	r0, #1
 8007362:	d1f2      	bne.n	800734a <sbrk_aligned+0x22>
 8007364:	e7ef      	b.n	8007346 <sbrk_aligned+0x1e>
 8007366:	bf00      	nop
 8007368:	20000558 	.word	0x20000558

0800736c <_malloc_r>:
 800736c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007370:	1ccd      	adds	r5, r1, #3
 8007372:	f025 0503 	bic.w	r5, r5, #3
 8007376:	3508      	adds	r5, #8
 8007378:	2d0c      	cmp	r5, #12
 800737a:	bf38      	it	cc
 800737c:	250c      	movcc	r5, #12
 800737e:	2d00      	cmp	r5, #0
 8007380:	4606      	mov	r6, r0
 8007382:	db01      	blt.n	8007388 <_malloc_r+0x1c>
 8007384:	42a9      	cmp	r1, r5
 8007386:	d904      	bls.n	8007392 <_malloc_r+0x26>
 8007388:	230c      	movs	r3, #12
 800738a:	6033      	str	r3, [r6, #0]
 800738c:	2000      	movs	r0, #0
 800738e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007392:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007468 <_malloc_r+0xfc>
 8007396:	f000 f869 	bl	800746c <__malloc_lock>
 800739a:	f8d8 3000 	ldr.w	r3, [r8]
 800739e:	461c      	mov	r4, r3
 80073a0:	bb44      	cbnz	r4, 80073f4 <_malloc_r+0x88>
 80073a2:	4629      	mov	r1, r5
 80073a4:	4630      	mov	r0, r6
 80073a6:	f7ff ffbf 	bl	8007328 <sbrk_aligned>
 80073aa:	1c43      	adds	r3, r0, #1
 80073ac:	4604      	mov	r4, r0
 80073ae:	d158      	bne.n	8007462 <_malloc_r+0xf6>
 80073b0:	f8d8 4000 	ldr.w	r4, [r8]
 80073b4:	4627      	mov	r7, r4
 80073b6:	2f00      	cmp	r7, #0
 80073b8:	d143      	bne.n	8007442 <_malloc_r+0xd6>
 80073ba:	2c00      	cmp	r4, #0
 80073bc:	d04b      	beq.n	8007456 <_malloc_r+0xea>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	4639      	mov	r1, r7
 80073c2:	4630      	mov	r0, r6
 80073c4:	eb04 0903 	add.w	r9, r4, r3
 80073c8:	f000 fc5c 	bl	8007c84 <_sbrk_r>
 80073cc:	4581      	cmp	r9, r0
 80073ce:	d142      	bne.n	8007456 <_malloc_r+0xea>
 80073d0:	6821      	ldr	r1, [r4, #0]
 80073d2:	1a6d      	subs	r5, r5, r1
 80073d4:	4629      	mov	r1, r5
 80073d6:	4630      	mov	r0, r6
 80073d8:	f7ff ffa6 	bl	8007328 <sbrk_aligned>
 80073dc:	3001      	adds	r0, #1
 80073de:	d03a      	beq.n	8007456 <_malloc_r+0xea>
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	442b      	add	r3, r5
 80073e4:	6023      	str	r3, [r4, #0]
 80073e6:	f8d8 3000 	ldr.w	r3, [r8]
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	bb62      	cbnz	r2, 8007448 <_malloc_r+0xdc>
 80073ee:	f8c8 7000 	str.w	r7, [r8]
 80073f2:	e00f      	b.n	8007414 <_malloc_r+0xa8>
 80073f4:	6822      	ldr	r2, [r4, #0]
 80073f6:	1b52      	subs	r2, r2, r5
 80073f8:	d420      	bmi.n	800743c <_malloc_r+0xd0>
 80073fa:	2a0b      	cmp	r2, #11
 80073fc:	d917      	bls.n	800742e <_malloc_r+0xc2>
 80073fe:	1961      	adds	r1, r4, r5
 8007400:	42a3      	cmp	r3, r4
 8007402:	6025      	str	r5, [r4, #0]
 8007404:	bf18      	it	ne
 8007406:	6059      	strne	r1, [r3, #4]
 8007408:	6863      	ldr	r3, [r4, #4]
 800740a:	bf08      	it	eq
 800740c:	f8c8 1000 	streq.w	r1, [r8]
 8007410:	5162      	str	r2, [r4, r5]
 8007412:	604b      	str	r3, [r1, #4]
 8007414:	4630      	mov	r0, r6
 8007416:	f000 f82f 	bl	8007478 <__malloc_unlock>
 800741a:	f104 000b 	add.w	r0, r4, #11
 800741e:	1d23      	adds	r3, r4, #4
 8007420:	f020 0007 	bic.w	r0, r0, #7
 8007424:	1ac2      	subs	r2, r0, r3
 8007426:	bf1c      	itt	ne
 8007428:	1a1b      	subne	r3, r3, r0
 800742a:	50a3      	strne	r3, [r4, r2]
 800742c:	e7af      	b.n	800738e <_malloc_r+0x22>
 800742e:	6862      	ldr	r2, [r4, #4]
 8007430:	42a3      	cmp	r3, r4
 8007432:	bf0c      	ite	eq
 8007434:	f8c8 2000 	streq.w	r2, [r8]
 8007438:	605a      	strne	r2, [r3, #4]
 800743a:	e7eb      	b.n	8007414 <_malloc_r+0xa8>
 800743c:	4623      	mov	r3, r4
 800743e:	6864      	ldr	r4, [r4, #4]
 8007440:	e7ae      	b.n	80073a0 <_malloc_r+0x34>
 8007442:	463c      	mov	r4, r7
 8007444:	687f      	ldr	r7, [r7, #4]
 8007446:	e7b6      	b.n	80073b6 <_malloc_r+0x4a>
 8007448:	461a      	mov	r2, r3
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	42a3      	cmp	r3, r4
 800744e:	d1fb      	bne.n	8007448 <_malloc_r+0xdc>
 8007450:	2300      	movs	r3, #0
 8007452:	6053      	str	r3, [r2, #4]
 8007454:	e7de      	b.n	8007414 <_malloc_r+0xa8>
 8007456:	230c      	movs	r3, #12
 8007458:	6033      	str	r3, [r6, #0]
 800745a:	4630      	mov	r0, r6
 800745c:	f000 f80c 	bl	8007478 <__malloc_unlock>
 8007460:	e794      	b.n	800738c <_malloc_r+0x20>
 8007462:	6005      	str	r5, [r0, #0]
 8007464:	e7d6      	b.n	8007414 <_malloc_r+0xa8>
 8007466:	bf00      	nop
 8007468:	2000055c 	.word	0x2000055c

0800746c <__malloc_lock>:
 800746c:	4801      	ldr	r0, [pc, #4]	@ (8007474 <__malloc_lock+0x8>)
 800746e:	f7ff bf0e 	b.w	800728e <__retarget_lock_acquire_recursive>
 8007472:	bf00      	nop
 8007474:	20000554 	.word	0x20000554

08007478 <__malloc_unlock>:
 8007478:	4801      	ldr	r0, [pc, #4]	@ (8007480 <__malloc_unlock+0x8>)
 800747a:	f7ff bf09 	b.w	8007290 <__retarget_lock_release_recursive>
 800747e:	bf00      	nop
 8007480:	20000554 	.word	0x20000554

08007484 <__sfputc_r>:
 8007484:	6893      	ldr	r3, [r2, #8]
 8007486:	3b01      	subs	r3, #1
 8007488:	2b00      	cmp	r3, #0
 800748a:	b410      	push	{r4}
 800748c:	6093      	str	r3, [r2, #8]
 800748e:	da08      	bge.n	80074a2 <__sfputc_r+0x1e>
 8007490:	6994      	ldr	r4, [r2, #24]
 8007492:	42a3      	cmp	r3, r4
 8007494:	db01      	blt.n	800749a <__sfputc_r+0x16>
 8007496:	290a      	cmp	r1, #10
 8007498:	d103      	bne.n	80074a2 <__sfputc_r+0x1e>
 800749a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800749e:	f7ff bde8 	b.w	8007072 <__swbuf_r>
 80074a2:	6813      	ldr	r3, [r2, #0]
 80074a4:	1c58      	adds	r0, r3, #1
 80074a6:	6010      	str	r0, [r2, #0]
 80074a8:	7019      	strb	r1, [r3, #0]
 80074aa:	4608      	mov	r0, r1
 80074ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <__sfputs_r>:
 80074b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b4:	4606      	mov	r6, r0
 80074b6:	460f      	mov	r7, r1
 80074b8:	4614      	mov	r4, r2
 80074ba:	18d5      	adds	r5, r2, r3
 80074bc:	42ac      	cmp	r4, r5
 80074be:	d101      	bne.n	80074c4 <__sfputs_r+0x12>
 80074c0:	2000      	movs	r0, #0
 80074c2:	e007      	b.n	80074d4 <__sfputs_r+0x22>
 80074c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c8:	463a      	mov	r2, r7
 80074ca:	4630      	mov	r0, r6
 80074cc:	f7ff ffda 	bl	8007484 <__sfputc_r>
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	d1f3      	bne.n	80074bc <__sfputs_r+0xa>
 80074d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074d8 <_vfiprintf_r>:
 80074d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074dc:	460d      	mov	r5, r1
 80074de:	b09d      	sub	sp, #116	@ 0x74
 80074e0:	4614      	mov	r4, r2
 80074e2:	4698      	mov	r8, r3
 80074e4:	4606      	mov	r6, r0
 80074e6:	b118      	cbz	r0, 80074f0 <_vfiprintf_r+0x18>
 80074e8:	6a03      	ldr	r3, [r0, #32]
 80074ea:	b90b      	cbnz	r3, 80074f0 <_vfiprintf_r+0x18>
 80074ec:	f7ff fcd8 	bl	8006ea0 <__sinit>
 80074f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074f2:	07d9      	lsls	r1, r3, #31
 80074f4:	d405      	bmi.n	8007502 <_vfiprintf_r+0x2a>
 80074f6:	89ab      	ldrh	r3, [r5, #12]
 80074f8:	059a      	lsls	r2, r3, #22
 80074fa:	d402      	bmi.n	8007502 <_vfiprintf_r+0x2a>
 80074fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074fe:	f7ff fec6 	bl	800728e <__retarget_lock_acquire_recursive>
 8007502:	89ab      	ldrh	r3, [r5, #12]
 8007504:	071b      	lsls	r3, r3, #28
 8007506:	d501      	bpl.n	800750c <_vfiprintf_r+0x34>
 8007508:	692b      	ldr	r3, [r5, #16]
 800750a:	b99b      	cbnz	r3, 8007534 <_vfiprintf_r+0x5c>
 800750c:	4629      	mov	r1, r5
 800750e:	4630      	mov	r0, r6
 8007510:	f7ff fdee 	bl	80070f0 <__swsetup_r>
 8007514:	b170      	cbz	r0, 8007534 <_vfiprintf_r+0x5c>
 8007516:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007518:	07dc      	lsls	r4, r3, #31
 800751a:	d504      	bpl.n	8007526 <_vfiprintf_r+0x4e>
 800751c:	f04f 30ff 	mov.w	r0, #4294967295
 8007520:	b01d      	add	sp, #116	@ 0x74
 8007522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007526:	89ab      	ldrh	r3, [r5, #12]
 8007528:	0598      	lsls	r0, r3, #22
 800752a:	d4f7      	bmi.n	800751c <_vfiprintf_r+0x44>
 800752c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800752e:	f7ff feaf 	bl	8007290 <__retarget_lock_release_recursive>
 8007532:	e7f3      	b.n	800751c <_vfiprintf_r+0x44>
 8007534:	2300      	movs	r3, #0
 8007536:	9309      	str	r3, [sp, #36]	@ 0x24
 8007538:	2320      	movs	r3, #32
 800753a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800753e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007542:	2330      	movs	r3, #48	@ 0x30
 8007544:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80076f4 <_vfiprintf_r+0x21c>
 8007548:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800754c:	f04f 0901 	mov.w	r9, #1
 8007550:	4623      	mov	r3, r4
 8007552:	469a      	mov	sl, r3
 8007554:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007558:	b10a      	cbz	r2, 800755e <_vfiprintf_r+0x86>
 800755a:	2a25      	cmp	r2, #37	@ 0x25
 800755c:	d1f9      	bne.n	8007552 <_vfiprintf_r+0x7a>
 800755e:	ebba 0b04 	subs.w	fp, sl, r4
 8007562:	d00b      	beq.n	800757c <_vfiprintf_r+0xa4>
 8007564:	465b      	mov	r3, fp
 8007566:	4622      	mov	r2, r4
 8007568:	4629      	mov	r1, r5
 800756a:	4630      	mov	r0, r6
 800756c:	f7ff ffa1 	bl	80074b2 <__sfputs_r>
 8007570:	3001      	adds	r0, #1
 8007572:	f000 80a7 	beq.w	80076c4 <_vfiprintf_r+0x1ec>
 8007576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007578:	445a      	add	r2, fp
 800757a:	9209      	str	r2, [sp, #36]	@ 0x24
 800757c:	f89a 3000 	ldrb.w	r3, [sl]
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 809f 	beq.w	80076c4 <_vfiprintf_r+0x1ec>
 8007586:	2300      	movs	r3, #0
 8007588:	f04f 32ff 	mov.w	r2, #4294967295
 800758c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007590:	f10a 0a01 	add.w	sl, sl, #1
 8007594:	9304      	str	r3, [sp, #16]
 8007596:	9307      	str	r3, [sp, #28]
 8007598:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800759c:	931a      	str	r3, [sp, #104]	@ 0x68
 800759e:	4654      	mov	r4, sl
 80075a0:	2205      	movs	r2, #5
 80075a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075a6:	4853      	ldr	r0, [pc, #332]	@ (80076f4 <_vfiprintf_r+0x21c>)
 80075a8:	f7f8 fe3a 	bl	8000220 <memchr>
 80075ac:	9a04      	ldr	r2, [sp, #16]
 80075ae:	b9d8      	cbnz	r0, 80075e8 <_vfiprintf_r+0x110>
 80075b0:	06d1      	lsls	r1, r2, #27
 80075b2:	bf44      	itt	mi
 80075b4:	2320      	movmi	r3, #32
 80075b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075ba:	0713      	lsls	r3, r2, #28
 80075bc:	bf44      	itt	mi
 80075be:	232b      	movmi	r3, #43	@ 0x2b
 80075c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075c4:	f89a 3000 	ldrb.w	r3, [sl]
 80075c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80075ca:	d015      	beq.n	80075f8 <_vfiprintf_r+0x120>
 80075cc:	9a07      	ldr	r2, [sp, #28]
 80075ce:	4654      	mov	r4, sl
 80075d0:	2000      	movs	r0, #0
 80075d2:	f04f 0c0a 	mov.w	ip, #10
 80075d6:	4621      	mov	r1, r4
 80075d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075dc:	3b30      	subs	r3, #48	@ 0x30
 80075de:	2b09      	cmp	r3, #9
 80075e0:	d94b      	bls.n	800767a <_vfiprintf_r+0x1a2>
 80075e2:	b1b0      	cbz	r0, 8007612 <_vfiprintf_r+0x13a>
 80075e4:	9207      	str	r2, [sp, #28]
 80075e6:	e014      	b.n	8007612 <_vfiprintf_r+0x13a>
 80075e8:	eba0 0308 	sub.w	r3, r0, r8
 80075ec:	fa09 f303 	lsl.w	r3, r9, r3
 80075f0:	4313      	orrs	r3, r2
 80075f2:	9304      	str	r3, [sp, #16]
 80075f4:	46a2      	mov	sl, r4
 80075f6:	e7d2      	b.n	800759e <_vfiprintf_r+0xc6>
 80075f8:	9b03      	ldr	r3, [sp, #12]
 80075fa:	1d19      	adds	r1, r3, #4
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	9103      	str	r1, [sp, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	bfbb      	ittet	lt
 8007604:	425b      	neglt	r3, r3
 8007606:	f042 0202 	orrlt.w	r2, r2, #2
 800760a:	9307      	strge	r3, [sp, #28]
 800760c:	9307      	strlt	r3, [sp, #28]
 800760e:	bfb8      	it	lt
 8007610:	9204      	strlt	r2, [sp, #16]
 8007612:	7823      	ldrb	r3, [r4, #0]
 8007614:	2b2e      	cmp	r3, #46	@ 0x2e
 8007616:	d10a      	bne.n	800762e <_vfiprintf_r+0x156>
 8007618:	7863      	ldrb	r3, [r4, #1]
 800761a:	2b2a      	cmp	r3, #42	@ 0x2a
 800761c:	d132      	bne.n	8007684 <_vfiprintf_r+0x1ac>
 800761e:	9b03      	ldr	r3, [sp, #12]
 8007620:	1d1a      	adds	r2, r3, #4
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	9203      	str	r2, [sp, #12]
 8007626:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800762a:	3402      	adds	r4, #2
 800762c:	9305      	str	r3, [sp, #20]
 800762e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007704 <_vfiprintf_r+0x22c>
 8007632:	7821      	ldrb	r1, [r4, #0]
 8007634:	2203      	movs	r2, #3
 8007636:	4650      	mov	r0, sl
 8007638:	f7f8 fdf2 	bl	8000220 <memchr>
 800763c:	b138      	cbz	r0, 800764e <_vfiprintf_r+0x176>
 800763e:	9b04      	ldr	r3, [sp, #16]
 8007640:	eba0 000a 	sub.w	r0, r0, sl
 8007644:	2240      	movs	r2, #64	@ 0x40
 8007646:	4082      	lsls	r2, r0
 8007648:	4313      	orrs	r3, r2
 800764a:	3401      	adds	r4, #1
 800764c:	9304      	str	r3, [sp, #16]
 800764e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007652:	4829      	ldr	r0, [pc, #164]	@ (80076f8 <_vfiprintf_r+0x220>)
 8007654:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007658:	2206      	movs	r2, #6
 800765a:	f7f8 fde1 	bl	8000220 <memchr>
 800765e:	2800      	cmp	r0, #0
 8007660:	d03f      	beq.n	80076e2 <_vfiprintf_r+0x20a>
 8007662:	4b26      	ldr	r3, [pc, #152]	@ (80076fc <_vfiprintf_r+0x224>)
 8007664:	bb1b      	cbnz	r3, 80076ae <_vfiprintf_r+0x1d6>
 8007666:	9b03      	ldr	r3, [sp, #12]
 8007668:	3307      	adds	r3, #7
 800766a:	f023 0307 	bic.w	r3, r3, #7
 800766e:	3308      	adds	r3, #8
 8007670:	9303      	str	r3, [sp, #12]
 8007672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007674:	443b      	add	r3, r7
 8007676:	9309      	str	r3, [sp, #36]	@ 0x24
 8007678:	e76a      	b.n	8007550 <_vfiprintf_r+0x78>
 800767a:	fb0c 3202 	mla	r2, ip, r2, r3
 800767e:	460c      	mov	r4, r1
 8007680:	2001      	movs	r0, #1
 8007682:	e7a8      	b.n	80075d6 <_vfiprintf_r+0xfe>
 8007684:	2300      	movs	r3, #0
 8007686:	3401      	adds	r4, #1
 8007688:	9305      	str	r3, [sp, #20]
 800768a:	4619      	mov	r1, r3
 800768c:	f04f 0c0a 	mov.w	ip, #10
 8007690:	4620      	mov	r0, r4
 8007692:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007696:	3a30      	subs	r2, #48	@ 0x30
 8007698:	2a09      	cmp	r2, #9
 800769a:	d903      	bls.n	80076a4 <_vfiprintf_r+0x1cc>
 800769c:	2b00      	cmp	r3, #0
 800769e:	d0c6      	beq.n	800762e <_vfiprintf_r+0x156>
 80076a0:	9105      	str	r1, [sp, #20]
 80076a2:	e7c4      	b.n	800762e <_vfiprintf_r+0x156>
 80076a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80076a8:	4604      	mov	r4, r0
 80076aa:	2301      	movs	r3, #1
 80076ac:	e7f0      	b.n	8007690 <_vfiprintf_r+0x1b8>
 80076ae:	ab03      	add	r3, sp, #12
 80076b0:	9300      	str	r3, [sp, #0]
 80076b2:	462a      	mov	r2, r5
 80076b4:	4b12      	ldr	r3, [pc, #72]	@ (8007700 <_vfiprintf_r+0x228>)
 80076b6:	a904      	add	r1, sp, #16
 80076b8:	4630      	mov	r0, r6
 80076ba:	f3af 8000 	nop.w
 80076be:	4607      	mov	r7, r0
 80076c0:	1c78      	adds	r0, r7, #1
 80076c2:	d1d6      	bne.n	8007672 <_vfiprintf_r+0x19a>
 80076c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076c6:	07d9      	lsls	r1, r3, #31
 80076c8:	d405      	bmi.n	80076d6 <_vfiprintf_r+0x1fe>
 80076ca:	89ab      	ldrh	r3, [r5, #12]
 80076cc:	059a      	lsls	r2, r3, #22
 80076ce:	d402      	bmi.n	80076d6 <_vfiprintf_r+0x1fe>
 80076d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076d2:	f7ff fddd 	bl	8007290 <__retarget_lock_release_recursive>
 80076d6:	89ab      	ldrh	r3, [r5, #12]
 80076d8:	065b      	lsls	r3, r3, #25
 80076da:	f53f af1f 	bmi.w	800751c <_vfiprintf_r+0x44>
 80076de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076e0:	e71e      	b.n	8007520 <_vfiprintf_r+0x48>
 80076e2:	ab03      	add	r3, sp, #12
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	462a      	mov	r2, r5
 80076e8:	4b05      	ldr	r3, [pc, #20]	@ (8007700 <_vfiprintf_r+0x228>)
 80076ea:	a904      	add	r1, sp, #16
 80076ec:	4630      	mov	r0, r6
 80076ee:	f000 f879 	bl	80077e4 <_printf_i>
 80076f2:	e7e4      	b.n	80076be <_vfiprintf_r+0x1e6>
 80076f4:	08008010 	.word	0x08008010
 80076f8:	0800801a 	.word	0x0800801a
 80076fc:	00000000 	.word	0x00000000
 8007700:	080074b3 	.word	0x080074b3
 8007704:	08008016 	.word	0x08008016

08007708 <_printf_common>:
 8007708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800770c:	4616      	mov	r6, r2
 800770e:	4698      	mov	r8, r3
 8007710:	688a      	ldr	r2, [r1, #8]
 8007712:	690b      	ldr	r3, [r1, #16]
 8007714:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007718:	4293      	cmp	r3, r2
 800771a:	bfb8      	it	lt
 800771c:	4613      	movlt	r3, r2
 800771e:	6033      	str	r3, [r6, #0]
 8007720:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007724:	4607      	mov	r7, r0
 8007726:	460c      	mov	r4, r1
 8007728:	b10a      	cbz	r2, 800772e <_printf_common+0x26>
 800772a:	3301      	adds	r3, #1
 800772c:	6033      	str	r3, [r6, #0]
 800772e:	6823      	ldr	r3, [r4, #0]
 8007730:	0699      	lsls	r1, r3, #26
 8007732:	bf42      	ittt	mi
 8007734:	6833      	ldrmi	r3, [r6, #0]
 8007736:	3302      	addmi	r3, #2
 8007738:	6033      	strmi	r3, [r6, #0]
 800773a:	6825      	ldr	r5, [r4, #0]
 800773c:	f015 0506 	ands.w	r5, r5, #6
 8007740:	d106      	bne.n	8007750 <_printf_common+0x48>
 8007742:	f104 0a19 	add.w	sl, r4, #25
 8007746:	68e3      	ldr	r3, [r4, #12]
 8007748:	6832      	ldr	r2, [r6, #0]
 800774a:	1a9b      	subs	r3, r3, r2
 800774c:	42ab      	cmp	r3, r5
 800774e:	dc26      	bgt.n	800779e <_printf_common+0x96>
 8007750:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007754:	6822      	ldr	r2, [r4, #0]
 8007756:	3b00      	subs	r3, #0
 8007758:	bf18      	it	ne
 800775a:	2301      	movne	r3, #1
 800775c:	0692      	lsls	r2, r2, #26
 800775e:	d42b      	bmi.n	80077b8 <_printf_common+0xb0>
 8007760:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007764:	4641      	mov	r1, r8
 8007766:	4638      	mov	r0, r7
 8007768:	47c8      	blx	r9
 800776a:	3001      	adds	r0, #1
 800776c:	d01e      	beq.n	80077ac <_printf_common+0xa4>
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	6922      	ldr	r2, [r4, #16]
 8007772:	f003 0306 	and.w	r3, r3, #6
 8007776:	2b04      	cmp	r3, #4
 8007778:	bf02      	ittt	eq
 800777a:	68e5      	ldreq	r5, [r4, #12]
 800777c:	6833      	ldreq	r3, [r6, #0]
 800777e:	1aed      	subeq	r5, r5, r3
 8007780:	68a3      	ldr	r3, [r4, #8]
 8007782:	bf0c      	ite	eq
 8007784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007788:	2500      	movne	r5, #0
 800778a:	4293      	cmp	r3, r2
 800778c:	bfc4      	itt	gt
 800778e:	1a9b      	subgt	r3, r3, r2
 8007790:	18ed      	addgt	r5, r5, r3
 8007792:	2600      	movs	r6, #0
 8007794:	341a      	adds	r4, #26
 8007796:	42b5      	cmp	r5, r6
 8007798:	d11a      	bne.n	80077d0 <_printf_common+0xc8>
 800779a:	2000      	movs	r0, #0
 800779c:	e008      	b.n	80077b0 <_printf_common+0xa8>
 800779e:	2301      	movs	r3, #1
 80077a0:	4652      	mov	r2, sl
 80077a2:	4641      	mov	r1, r8
 80077a4:	4638      	mov	r0, r7
 80077a6:	47c8      	blx	r9
 80077a8:	3001      	adds	r0, #1
 80077aa:	d103      	bne.n	80077b4 <_printf_common+0xac>
 80077ac:	f04f 30ff 	mov.w	r0, #4294967295
 80077b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b4:	3501      	adds	r5, #1
 80077b6:	e7c6      	b.n	8007746 <_printf_common+0x3e>
 80077b8:	18e1      	adds	r1, r4, r3
 80077ba:	1c5a      	adds	r2, r3, #1
 80077bc:	2030      	movs	r0, #48	@ 0x30
 80077be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80077c2:	4422      	add	r2, r4
 80077c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077cc:	3302      	adds	r3, #2
 80077ce:	e7c7      	b.n	8007760 <_printf_common+0x58>
 80077d0:	2301      	movs	r3, #1
 80077d2:	4622      	mov	r2, r4
 80077d4:	4641      	mov	r1, r8
 80077d6:	4638      	mov	r0, r7
 80077d8:	47c8      	blx	r9
 80077da:	3001      	adds	r0, #1
 80077dc:	d0e6      	beq.n	80077ac <_printf_common+0xa4>
 80077de:	3601      	adds	r6, #1
 80077e0:	e7d9      	b.n	8007796 <_printf_common+0x8e>
	...

080077e4 <_printf_i>:
 80077e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077e8:	7e0f      	ldrb	r7, [r1, #24]
 80077ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80077ec:	2f78      	cmp	r7, #120	@ 0x78
 80077ee:	4691      	mov	r9, r2
 80077f0:	4680      	mov	r8, r0
 80077f2:	460c      	mov	r4, r1
 80077f4:	469a      	mov	sl, r3
 80077f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80077fa:	d807      	bhi.n	800780c <_printf_i+0x28>
 80077fc:	2f62      	cmp	r7, #98	@ 0x62
 80077fe:	d80a      	bhi.n	8007816 <_printf_i+0x32>
 8007800:	2f00      	cmp	r7, #0
 8007802:	f000 80d2 	beq.w	80079aa <_printf_i+0x1c6>
 8007806:	2f58      	cmp	r7, #88	@ 0x58
 8007808:	f000 80b9 	beq.w	800797e <_printf_i+0x19a>
 800780c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007810:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007814:	e03a      	b.n	800788c <_printf_i+0xa8>
 8007816:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800781a:	2b15      	cmp	r3, #21
 800781c:	d8f6      	bhi.n	800780c <_printf_i+0x28>
 800781e:	a101      	add	r1, pc, #4	@ (adr r1, 8007824 <_printf_i+0x40>)
 8007820:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007824:	0800787d 	.word	0x0800787d
 8007828:	08007891 	.word	0x08007891
 800782c:	0800780d 	.word	0x0800780d
 8007830:	0800780d 	.word	0x0800780d
 8007834:	0800780d 	.word	0x0800780d
 8007838:	0800780d 	.word	0x0800780d
 800783c:	08007891 	.word	0x08007891
 8007840:	0800780d 	.word	0x0800780d
 8007844:	0800780d 	.word	0x0800780d
 8007848:	0800780d 	.word	0x0800780d
 800784c:	0800780d 	.word	0x0800780d
 8007850:	08007991 	.word	0x08007991
 8007854:	080078bb 	.word	0x080078bb
 8007858:	0800794b 	.word	0x0800794b
 800785c:	0800780d 	.word	0x0800780d
 8007860:	0800780d 	.word	0x0800780d
 8007864:	080079b3 	.word	0x080079b3
 8007868:	0800780d 	.word	0x0800780d
 800786c:	080078bb 	.word	0x080078bb
 8007870:	0800780d 	.word	0x0800780d
 8007874:	0800780d 	.word	0x0800780d
 8007878:	08007953 	.word	0x08007953
 800787c:	6833      	ldr	r3, [r6, #0]
 800787e:	1d1a      	adds	r2, r3, #4
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6032      	str	r2, [r6, #0]
 8007884:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007888:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800788c:	2301      	movs	r3, #1
 800788e:	e09d      	b.n	80079cc <_printf_i+0x1e8>
 8007890:	6833      	ldr	r3, [r6, #0]
 8007892:	6820      	ldr	r0, [r4, #0]
 8007894:	1d19      	adds	r1, r3, #4
 8007896:	6031      	str	r1, [r6, #0]
 8007898:	0606      	lsls	r6, r0, #24
 800789a:	d501      	bpl.n	80078a0 <_printf_i+0xbc>
 800789c:	681d      	ldr	r5, [r3, #0]
 800789e:	e003      	b.n	80078a8 <_printf_i+0xc4>
 80078a0:	0645      	lsls	r5, r0, #25
 80078a2:	d5fb      	bpl.n	800789c <_printf_i+0xb8>
 80078a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078a8:	2d00      	cmp	r5, #0
 80078aa:	da03      	bge.n	80078b4 <_printf_i+0xd0>
 80078ac:	232d      	movs	r3, #45	@ 0x2d
 80078ae:	426d      	negs	r5, r5
 80078b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078b4:	4859      	ldr	r0, [pc, #356]	@ (8007a1c <_printf_i+0x238>)
 80078b6:	230a      	movs	r3, #10
 80078b8:	e011      	b.n	80078de <_printf_i+0xfa>
 80078ba:	6821      	ldr	r1, [r4, #0]
 80078bc:	6833      	ldr	r3, [r6, #0]
 80078be:	0608      	lsls	r0, r1, #24
 80078c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80078c4:	d402      	bmi.n	80078cc <_printf_i+0xe8>
 80078c6:	0649      	lsls	r1, r1, #25
 80078c8:	bf48      	it	mi
 80078ca:	b2ad      	uxthmi	r5, r5
 80078cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80078ce:	4853      	ldr	r0, [pc, #332]	@ (8007a1c <_printf_i+0x238>)
 80078d0:	6033      	str	r3, [r6, #0]
 80078d2:	bf14      	ite	ne
 80078d4:	230a      	movne	r3, #10
 80078d6:	2308      	moveq	r3, #8
 80078d8:	2100      	movs	r1, #0
 80078da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80078de:	6866      	ldr	r6, [r4, #4]
 80078e0:	60a6      	str	r6, [r4, #8]
 80078e2:	2e00      	cmp	r6, #0
 80078e4:	bfa2      	ittt	ge
 80078e6:	6821      	ldrge	r1, [r4, #0]
 80078e8:	f021 0104 	bicge.w	r1, r1, #4
 80078ec:	6021      	strge	r1, [r4, #0]
 80078ee:	b90d      	cbnz	r5, 80078f4 <_printf_i+0x110>
 80078f0:	2e00      	cmp	r6, #0
 80078f2:	d04b      	beq.n	800798c <_printf_i+0x1a8>
 80078f4:	4616      	mov	r6, r2
 80078f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80078fa:	fb03 5711 	mls	r7, r3, r1, r5
 80078fe:	5dc7      	ldrb	r7, [r0, r7]
 8007900:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007904:	462f      	mov	r7, r5
 8007906:	42bb      	cmp	r3, r7
 8007908:	460d      	mov	r5, r1
 800790a:	d9f4      	bls.n	80078f6 <_printf_i+0x112>
 800790c:	2b08      	cmp	r3, #8
 800790e:	d10b      	bne.n	8007928 <_printf_i+0x144>
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	07df      	lsls	r7, r3, #31
 8007914:	d508      	bpl.n	8007928 <_printf_i+0x144>
 8007916:	6923      	ldr	r3, [r4, #16]
 8007918:	6861      	ldr	r1, [r4, #4]
 800791a:	4299      	cmp	r1, r3
 800791c:	bfde      	ittt	le
 800791e:	2330      	movle	r3, #48	@ 0x30
 8007920:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007924:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007928:	1b92      	subs	r2, r2, r6
 800792a:	6122      	str	r2, [r4, #16]
 800792c:	f8cd a000 	str.w	sl, [sp]
 8007930:	464b      	mov	r3, r9
 8007932:	aa03      	add	r2, sp, #12
 8007934:	4621      	mov	r1, r4
 8007936:	4640      	mov	r0, r8
 8007938:	f7ff fee6 	bl	8007708 <_printf_common>
 800793c:	3001      	adds	r0, #1
 800793e:	d14a      	bne.n	80079d6 <_printf_i+0x1f2>
 8007940:	f04f 30ff 	mov.w	r0, #4294967295
 8007944:	b004      	add	sp, #16
 8007946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800794a:	6823      	ldr	r3, [r4, #0]
 800794c:	f043 0320 	orr.w	r3, r3, #32
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	4833      	ldr	r0, [pc, #204]	@ (8007a20 <_printf_i+0x23c>)
 8007954:	2778      	movs	r7, #120	@ 0x78
 8007956:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	6831      	ldr	r1, [r6, #0]
 800795e:	061f      	lsls	r7, r3, #24
 8007960:	f851 5b04 	ldr.w	r5, [r1], #4
 8007964:	d402      	bmi.n	800796c <_printf_i+0x188>
 8007966:	065f      	lsls	r7, r3, #25
 8007968:	bf48      	it	mi
 800796a:	b2ad      	uxthmi	r5, r5
 800796c:	6031      	str	r1, [r6, #0]
 800796e:	07d9      	lsls	r1, r3, #31
 8007970:	bf44      	itt	mi
 8007972:	f043 0320 	orrmi.w	r3, r3, #32
 8007976:	6023      	strmi	r3, [r4, #0]
 8007978:	b11d      	cbz	r5, 8007982 <_printf_i+0x19e>
 800797a:	2310      	movs	r3, #16
 800797c:	e7ac      	b.n	80078d8 <_printf_i+0xf4>
 800797e:	4827      	ldr	r0, [pc, #156]	@ (8007a1c <_printf_i+0x238>)
 8007980:	e7e9      	b.n	8007956 <_printf_i+0x172>
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	f023 0320 	bic.w	r3, r3, #32
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	e7f6      	b.n	800797a <_printf_i+0x196>
 800798c:	4616      	mov	r6, r2
 800798e:	e7bd      	b.n	800790c <_printf_i+0x128>
 8007990:	6833      	ldr	r3, [r6, #0]
 8007992:	6825      	ldr	r5, [r4, #0]
 8007994:	6961      	ldr	r1, [r4, #20]
 8007996:	1d18      	adds	r0, r3, #4
 8007998:	6030      	str	r0, [r6, #0]
 800799a:	062e      	lsls	r6, r5, #24
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	d501      	bpl.n	80079a4 <_printf_i+0x1c0>
 80079a0:	6019      	str	r1, [r3, #0]
 80079a2:	e002      	b.n	80079aa <_printf_i+0x1c6>
 80079a4:	0668      	lsls	r0, r5, #25
 80079a6:	d5fb      	bpl.n	80079a0 <_printf_i+0x1bc>
 80079a8:	8019      	strh	r1, [r3, #0]
 80079aa:	2300      	movs	r3, #0
 80079ac:	6123      	str	r3, [r4, #16]
 80079ae:	4616      	mov	r6, r2
 80079b0:	e7bc      	b.n	800792c <_printf_i+0x148>
 80079b2:	6833      	ldr	r3, [r6, #0]
 80079b4:	1d1a      	adds	r2, r3, #4
 80079b6:	6032      	str	r2, [r6, #0]
 80079b8:	681e      	ldr	r6, [r3, #0]
 80079ba:	6862      	ldr	r2, [r4, #4]
 80079bc:	2100      	movs	r1, #0
 80079be:	4630      	mov	r0, r6
 80079c0:	f7f8 fc2e 	bl	8000220 <memchr>
 80079c4:	b108      	cbz	r0, 80079ca <_printf_i+0x1e6>
 80079c6:	1b80      	subs	r0, r0, r6
 80079c8:	6060      	str	r0, [r4, #4]
 80079ca:	6863      	ldr	r3, [r4, #4]
 80079cc:	6123      	str	r3, [r4, #16]
 80079ce:	2300      	movs	r3, #0
 80079d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079d4:	e7aa      	b.n	800792c <_printf_i+0x148>
 80079d6:	6923      	ldr	r3, [r4, #16]
 80079d8:	4632      	mov	r2, r6
 80079da:	4649      	mov	r1, r9
 80079dc:	4640      	mov	r0, r8
 80079de:	47d0      	blx	sl
 80079e0:	3001      	adds	r0, #1
 80079e2:	d0ad      	beq.n	8007940 <_printf_i+0x15c>
 80079e4:	6823      	ldr	r3, [r4, #0]
 80079e6:	079b      	lsls	r3, r3, #30
 80079e8:	d413      	bmi.n	8007a12 <_printf_i+0x22e>
 80079ea:	68e0      	ldr	r0, [r4, #12]
 80079ec:	9b03      	ldr	r3, [sp, #12]
 80079ee:	4298      	cmp	r0, r3
 80079f0:	bfb8      	it	lt
 80079f2:	4618      	movlt	r0, r3
 80079f4:	e7a6      	b.n	8007944 <_printf_i+0x160>
 80079f6:	2301      	movs	r3, #1
 80079f8:	4632      	mov	r2, r6
 80079fa:	4649      	mov	r1, r9
 80079fc:	4640      	mov	r0, r8
 80079fe:	47d0      	blx	sl
 8007a00:	3001      	adds	r0, #1
 8007a02:	d09d      	beq.n	8007940 <_printf_i+0x15c>
 8007a04:	3501      	adds	r5, #1
 8007a06:	68e3      	ldr	r3, [r4, #12]
 8007a08:	9903      	ldr	r1, [sp, #12]
 8007a0a:	1a5b      	subs	r3, r3, r1
 8007a0c:	42ab      	cmp	r3, r5
 8007a0e:	dcf2      	bgt.n	80079f6 <_printf_i+0x212>
 8007a10:	e7eb      	b.n	80079ea <_printf_i+0x206>
 8007a12:	2500      	movs	r5, #0
 8007a14:	f104 0619 	add.w	r6, r4, #25
 8007a18:	e7f5      	b.n	8007a06 <_printf_i+0x222>
 8007a1a:	bf00      	nop
 8007a1c:	08008021 	.word	0x08008021
 8007a20:	08008032 	.word	0x08008032

08007a24 <__sflush_r>:
 8007a24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a2c:	0716      	lsls	r6, r2, #28
 8007a2e:	4605      	mov	r5, r0
 8007a30:	460c      	mov	r4, r1
 8007a32:	d454      	bmi.n	8007ade <__sflush_r+0xba>
 8007a34:	684b      	ldr	r3, [r1, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	dc02      	bgt.n	8007a40 <__sflush_r+0x1c>
 8007a3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	dd48      	ble.n	8007ad2 <__sflush_r+0xae>
 8007a40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a42:	2e00      	cmp	r6, #0
 8007a44:	d045      	beq.n	8007ad2 <__sflush_r+0xae>
 8007a46:	2300      	movs	r3, #0
 8007a48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a4c:	682f      	ldr	r7, [r5, #0]
 8007a4e:	6a21      	ldr	r1, [r4, #32]
 8007a50:	602b      	str	r3, [r5, #0]
 8007a52:	d030      	beq.n	8007ab6 <__sflush_r+0x92>
 8007a54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a56:	89a3      	ldrh	r3, [r4, #12]
 8007a58:	0759      	lsls	r1, r3, #29
 8007a5a:	d505      	bpl.n	8007a68 <__sflush_r+0x44>
 8007a5c:	6863      	ldr	r3, [r4, #4]
 8007a5e:	1ad2      	subs	r2, r2, r3
 8007a60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007a62:	b10b      	cbz	r3, 8007a68 <__sflush_r+0x44>
 8007a64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a66:	1ad2      	subs	r2, r2, r3
 8007a68:	2300      	movs	r3, #0
 8007a6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a6c:	6a21      	ldr	r1, [r4, #32]
 8007a6e:	4628      	mov	r0, r5
 8007a70:	47b0      	blx	r6
 8007a72:	1c43      	adds	r3, r0, #1
 8007a74:	89a3      	ldrh	r3, [r4, #12]
 8007a76:	d106      	bne.n	8007a86 <__sflush_r+0x62>
 8007a78:	6829      	ldr	r1, [r5, #0]
 8007a7a:	291d      	cmp	r1, #29
 8007a7c:	d82b      	bhi.n	8007ad6 <__sflush_r+0xb2>
 8007a7e:	4a2a      	ldr	r2, [pc, #168]	@ (8007b28 <__sflush_r+0x104>)
 8007a80:	410a      	asrs	r2, r1
 8007a82:	07d6      	lsls	r6, r2, #31
 8007a84:	d427      	bmi.n	8007ad6 <__sflush_r+0xb2>
 8007a86:	2200      	movs	r2, #0
 8007a88:	6062      	str	r2, [r4, #4]
 8007a8a:	04d9      	lsls	r1, r3, #19
 8007a8c:	6922      	ldr	r2, [r4, #16]
 8007a8e:	6022      	str	r2, [r4, #0]
 8007a90:	d504      	bpl.n	8007a9c <__sflush_r+0x78>
 8007a92:	1c42      	adds	r2, r0, #1
 8007a94:	d101      	bne.n	8007a9a <__sflush_r+0x76>
 8007a96:	682b      	ldr	r3, [r5, #0]
 8007a98:	b903      	cbnz	r3, 8007a9c <__sflush_r+0x78>
 8007a9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007a9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a9e:	602f      	str	r7, [r5, #0]
 8007aa0:	b1b9      	cbz	r1, 8007ad2 <__sflush_r+0xae>
 8007aa2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007aa6:	4299      	cmp	r1, r3
 8007aa8:	d002      	beq.n	8007ab0 <__sflush_r+0x8c>
 8007aaa:	4628      	mov	r0, r5
 8007aac:	f7ff fbf2 	bl	8007294 <_free_r>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ab4:	e00d      	b.n	8007ad2 <__sflush_r+0xae>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	4628      	mov	r0, r5
 8007aba:	47b0      	blx	r6
 8007abc:	4602      	mov	r2, r0
 8007abe:	1c50      	adds	r0, r2, #1
 8007ac0:	d1c9      	bne.n	8007a56 <__sflush_r+0x32>
 8007ac2:	682b      	ldr	r3, [r5, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d0c6      	beq.n	8007a56 <__sflush_r+0x32>
 8007ac8:	2b1d      	cmp	r3, #29
 8007aca:	d001      	beq.n	8007ad0 <__sflush_r+0xac>
 8007acc:	2b16      	cmp	r3, #22
 8007ace:	d11e      	bne.n	8007b0e <__sflush_r+0xea>
 8007ad0:	602f      	str	r7, [r5, #0]
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	e022      	b.n	8007b1c <__sflush_r+0xf8>
 8007ad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ada:	b21b      	sxth	r3, r3
 8007adc:	e01b      	b.n	8007b16 <__sflush_r+0xf2>
 8007ade:	690f      	ldr	r7, [r1, #16]
 8007ae0:	2f00      	cmp	r7, #0
 8007ae2:	d0f6      	beq.n	8007ad2 <__sflush_r+0xae>
 8007ae4:	0793      	lsls	r3, r2, #30
 8007ae6:	680e      	ldr	r6, [r1, #0]
 8007ae8:	bf08      	it	eq
 8007aea:	694b      	ldreq	r3, [r1, #20]
 8007aec:	600f      	str	r7, [r1, #0]
 8007aee:	bf18      	it	ne
 8007af0:	2300      	movne	r3, #0
 8007af2:	eba6 0807 	sub.w	r8, r6, r7
 8007af6:	608b      	str	r3, [r1, #8]
 8007af8:	f1b8 0f00 	cmp.w	r8, #0
 8007afc:	dde9      	ble.n	8007ad2 <__sflush_r+0xae>
 8007afe:	6a21      	ldr	r1, [r4, #32]
 8007b00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b02:	4643      	mov	r3, r8
 8007b04:	463a      	mov	r2, r7
 8007b06:	4628      	mov	r0, r5
 8007b08:	47b0      	blx	r6
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	dc08      	bgt.n	8007b20 <__sflush_r+0xfc>
 8007b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b16:	81a3      	strh	r3, [r4, #12]
 8007b18:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b20:	4407      	add	r7, r0
 8007b22:	eba8 0800 	sub.w	r8, r8, r0
 8007b26:	e7e7      	b.n	8007af8 <__sflush_r+0xd4>
 8007b28:	dfbffffe 	.word	0xdfbffffe

08007b2c <_fflush_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	690b      	ldr	r3, [r1, #16]
 8007b30:	4605      	mov	r5, r0
 8007b32:	460c      	mov	r4, r1
 8007b34:	b913      	cbnz	r3, 8007b3c <_fflush_r+0x10>
 8007b36:	2500      	movs	r5, #0
 8007b38:	4628      	mov	r0, r5
 8007b3a:	bd38      	pop	{r3, r4, r5, pc}
 8007b3c:	b118      	cbz	r0, 8007b46 <_fflush_r+0x1a>
 8007b3e:	6a03      	ldr	r3, [r0, #32]
 8007b40:	b90b      	cbnz	r3, 8007b46 <_fflush_r+0x1a>
 8007b42:	f7ff f9ad 	bl	8006ea0 <__sinit>
 8007b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0f3      	beq.n	8007b36 <_fflush_r+0xa>
 8007b4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b50:	07d0      	lsls	r0, r2, #31
 8007b52:	d404      	bmi.n	8007b5e <_fflush_r+0x32>
 8007b54:	0599      	lsls	r1, r3, #22
 8007b56:	d402      	bmi.n	8007b5e <_fflush_r+0x32>
 8007b58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b5a:	f7ff fb98 	bl	800728e <__retarget_lock_acquire_recursive>
 8007b5e:	4628      	mov	r0, r5
 8007b60:	4621      	mov	r1, r4
 8007b62:	f7ff ff5f 	bl	8007a24 <__sflush_r>
 8007b66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b68:	07da      	lsls	r2, r3, #31
 8007b6a:	4605      	mov	r5, r0
 8007b6c:	d4e4      	bmi.n	8007b38 <_fflush_r+0xc>
 8007b6e:	89a3      	ldrh	r3, [r4, #12]
 8007b70:	059b      	lsls	r3, r3, #22
 8007b72:	d4e1      	bmi.n	8007b38 <_fflush_r+0xc>
 8007b74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b76:	f7ff fb8b 	bl	8007290 <__retarget_lock_release_recursive>
 8007b7a:	e7dd      	b.n	8007b38 <_fflush_r+0xc>

08007b7c <__swhatbuf_r>:
 8007b7c:	b570      	push	{r4, r5, r6, lr}
 8007b7e:	460c      	mov	r4, r1
 8007b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b84:	2900      	cmp	r1, #0
 8007b86:	b096      	sub	sp, #88	@ 0x58
 8007b88:	4615      	mov	r5, r2
 8007b8a:	461e      	mov	r6, r3
 8007b8c:	da0d      	bge.n	8007baa <__swhatbuf_r+0x2e>
 8007b8e:	89a3      	ldrh	r3, [r4, #12]
 8007b90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b94:	f04f 0100 	mov.w	r1, #0
 8007b98:	bf14      	ite	ne
 8007b9a:	2340      	movne	r3, #64	@ 0x40
 8007b9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	6031      	str	r1, [r6, #0]
 8007ba4:	602b      	str	r3, [r5, #0]
 8007ba6:	b016      	add	sp, #88	@ 0x58
 8007ba8:	bd70      	pop	{r4, r5, r6, pc}
 8007baa:	466a      	mov	r2, sp
 8007bac:	f000 f848 	bl	8007c40 <_fstat_r>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	dbec      	blt.n	8007b8e <__swhatbuf_r+0x12>
 8007bb4:	9901      	ldr	r1, [sp, #4]
 8007bb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007bba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007bbe:	4259      	negs	r1, r3
 8007bc0:	4159      	adcs	r1, r3
 8007bc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007bc6:	e7eb      	b.n	8007ba0 <__swhatbuf_r+0x24>

08007bc8 <__smakebuf_r>:
 8007bc8:	898b      	ldrh	r3, [r1, #12]
 8007bca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bcc:	079d      	lsls	r5, r3, #30
 8007bce:	4606      	mov	r6, r0
 8007bd0:	460c      	mov	r4, r1
 8007bd2:	d507      	bpl.n	8007be4 <__smakebuf_r+0x1c>
 8007bd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007bd8:	6023      	str	r3, [r4, #0]
 8007bda:	6123      	str	r3, [r4, #16]
 8007bdc:	2301      	movs	r3, #1
 8007bde:	6163      	str	r3, [r4, #20]
 8007be0:	b003      	add	sp, #12
 8007be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007be4:	ab01      	add	r3, sp, #4
 8007be6:	466a      	mov	r2, sp
 8007be8:	f7ff ffc8 	bl	8007b7c <__swhatbuf_r>
 8007bec:	9f00      	ldr	r7, [sp, #0]
 8007bee:	4605      	mov	r5, r0
 8007bf0:	4639      	mov	r1, r7
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f7ff fbba 	bl	800736c <_malloc_r>
 8007bf8:	b948      	cbnz	r0, 8007c0e <__smakebuf_r+0x46>
 8007bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bfe:	059a      	lsls	r2, r3, #22
 8007c00:	d4ee      	bmi.n	8007be0 <__smakebuf_r+0x18>
 8007c02:	f023 0303 	bic.w	r3, r3, #3
 8007c06:	f043 0302 	orr.w	r3, r3, #2
 8007c0a:	81a3      	strh	r3, [r4, #12]
 8007c0c:	e7e2      	b.n	8007bd4 <__smakebuf_r+0xc>
 8007c0e:	89a3      	ldrh	r3, [r4, #12]
 8007c10:	6020      	str	r0, [r4, #0]
 8007c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c16:	81a3      	strh	r3, [r4, #12]
 8007c18:	9b01      	ldr	r3, [sp, #4]
 8007c1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c1e:	b15b      	cbz	r3, 8007c38 <__smakebuf_r+0x70>
 8007c20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c24:	4630      	mov	r0, r6
 8007c26:	f000 f81d 	bl	8007c64 <_isatty_r>
 8007c2a:	b128      	cbz	r0, 8007c38 <__smakebuf_r+0x70>
 8007c2c:	89a3      	ldrh	r3, [r4, #12]
 8007c2e:	f023 0303 	bic.w	r3, r3, #3
 8007c32:	f043 0301 	orr.w	r3, r3, #1
 8007c36:	81a3      	strh	r3, [r4, #12]
 8007c38:	89a3      	ldrh	r3, [r4, #12]
 8007c3a:	431d      	orrs	r5, r3
 8007c3c:	81a5      	strh	r5, [r4, #12]
 8007c3e:	e7cf      	b.n	8007be0 <__smakebuf_r+0x18>

08007c40 <_fstat_r>:
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	4d07      	ldr	r5, [pc, #28]	@ (8007c60 <_fstat_r+0x20>)
 8007c44:	2300      	movs	r3, #0
 8007c46:	4604      	mov	r4, r0
 8007c48:	4608      	mov	r0, r1
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	602b      	str	r3, [r5, #0]
 8007c4e:	f7f9 fa1c 	bl	800108a <_fstat>
 8007c52:	1c43      	adds	r3, r0, #1
 8007c54:	d102      	bne.n	8007c5c <_fstat_r+0x1c>
 8007c56:	682b      	ldr	r3, [r5, #0]
 8007c58:	b103      	cbz	r3, 8007c5c <_fstat_r+0x1c>
 8007c5a:	6023      	str	r3, [r4, #0]
 8007c5c:	bd38      	pop	{r3, r4, r5, pc}
 8007c5e:	bf00      	nop
 8007c60:	20000550 	.word	0x20000550

08007c64 <_isatty_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4d06      	ldr	r5, [pc, #24]	@ (8007c80 <_isatty_r+0x1c>)
 8007c68:	2300      	movs	r3, #0
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	4608      	mov	r0, r1
 8007c6e:	602b      	str	r3, [r5, #0]
 8007c70:	f7f9 fa1b 	bl	80010aa <_isatty>
 8007c74:	1c43      	adds	r3, r0, #1
 8007c76:	d102      	bne.n	8007c7e <_isatty_r+0x1a>
 8007c78:	682b      	ldr	r3, [r5, #0]
 8007c7a:	b103      	cbz	r3, 8007c7e <_isatty_r+0x1a>
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}
 8007c80:	20000550 	.word	0x20000550

08007c84 <_sbrk_r>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	4d06      	ldr	r5, [pc, #24]	@ (8007ca0 <_sbrk_r+0x1c>)
 8007c88:	2300      	movs	r3, #0
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	4608      	mov	r0, r1
 8007c8e:	602b      	str	r3, [r5, #0]
 8007c90:	f7f9 fa24 	bl	80010dc <_sbrk>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	d102      	bne.n	8007c9e <_sbrk_r+0x1a>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	b103      	cbz	r3, 8007c9e <_sbrk_r+0x1a>
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ca0:	20000550 	.word	0x20000550

08007ca4 <_init>:
 8007ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca6:	bf00      	nop
 8007ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007caa:	bc08      	pop	{r3}
 8007cac:	469e      	mov	lr, r3
 8007cae:	4770      	bx	lr

08007cb0 <_fini>:
 8007cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb2:	bf00      	nop
 8007cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cb6:	bc08      	pop	{r3}
 8007cb8:	469e      	mov	lr, r3
 8007cba:	4770      	bx	lr
