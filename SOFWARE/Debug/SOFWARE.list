
SOFWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4fc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  0800a6e0  0800a6e0  0000b6e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab18  0800ab18  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab18  0800ab18  0000bb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab20  0800ab20  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab20  0800ab20  0000bb20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab24  0800ab24  0000bb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ab28  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  200001d4  0800acfc  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006cc  0800acfc  0000c6cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc59  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f6  00000000  00000000  00028e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a8  00000000  00000000  0002c858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000132e  00000000  00000000  0002e100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004558  00000000  00000000  0002f42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e882  00000000  00000000  00033986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0cc3  00000000  00000000  00052208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132ecb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ba0  00000000  00000000  00132f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0013aab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a6c4 	.word	0x0800a6c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800a6c4 	.word	0x0800a6c4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08c      	sub	sp, #48	@ 0x30
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f007 fb57 	bl	8008654 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fa6:	4b32      	ldr	r3, [pc, #200]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fa8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000fac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fae:	4b30      	ldr	r3, [pc, #192]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fb0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000fb4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fc8:	4b29      	ldr	r3, [pc, #164]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fce:	4b28      	ldr	r3, [pc, #160]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fd4:	4b26      	ldr	r3, [pc, #152]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fda:	4b25      	ldr	r3, [pc, #148]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000fe0:	4b23      	ldr	r3, [pc, #140]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fe6:	4b22      	ldr	r3, [pc, #136]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fee:	4b20      	ldr	r3, [pc, #128]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001002:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8001004:	2200      	movs	r2, #0
 8001006:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001008:	4b19      	ldr	r3, [pc, #100]	@ (8001070 <MX_ADC1_Init+0xe8>)
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001010:	4817      	ldr	r0, [pc, #92]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8001012:	f001 fc1d 	bl	8002850 <HAL_ADC_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800101c:	f000 fbcc 	bl	80017b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001024:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001028:	4619      	mov	r1, r3
 800102a:	4811      	ldr	r0, [pc, #68]	@ (8001070 <MX_ADC1_Init+0xe8>)
 800102c:	f002 f9aa 	bl	8003384 <HAL_ADCEx_MultiModeConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001036:	f000 fbbf 	bl	80017b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800103a:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <MX_ADC1_Init+0xec>)
 800103c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800103e:	2306      	movs	r3, #6
 8001040:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001046:	237f      	movs	r3, #127	@ 0x7f
 8001048:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800104a:	2304      	movs	r3, #4
 800104c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	4619      	mov	r1, r3
 8001056:	4806      	ldr	r0, [pc, #24]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8001058:	f001 fd7e 	bl	8002b58 <HAL_ADC_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001062:	f000 fba9 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	3730      	adds	r7, #48	@ 0x30
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200001f0 	.word	0x200001f0
 8001074:	0c900008 	.word	0x0c900008

08001078 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b09a      	sub	sp, #104	@ 0x68
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	2244      	movs	r2, #68	@ 0x44
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f007 fadb 	bl	8008654 <memset>
  if(adcHandle->Instance==ADC1)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010a6:	d134      	bne.n	8001112 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80010ae:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80010b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	4618      	mov	r0, r3
 80010ba:	f004 f8cf 	bl	800525c <HAL_RCCEx_PeriphCLKConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010c4:	f000 fb78 	bl	80017b8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010c8:	4b14      	ldr	r3, [pc, #80]	@ (800111c <HAL_ADC_MspInit+0xa4>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010cc:	4a13      	ldr	r2, [pc, #76]	@ (800111c <HAL_ADC_MspInit+0xa4>)
 80010ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d4:	4b11      	ldr	r3, [pc, #68]	@ (800111c <HAL_ADC_MspInit+0xa4>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e0:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <HAL_ADC_MspInit+0xa4>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e4:	4a0d      	ldr	r2, [pc, #52]	@ (800111c <HAL_ADC_MspInit+0xa4>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ec:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <HAL_ADC_MspInit+0xa4>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CB_OUT1_Pin|CB_OUT2_Pin;
 80010f8:	230c      	movs	r3, #12
 80010fa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fc:	2303      	movs	r3, #3
 80010fe:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001108:	4619      	mov	r1, r3
 800110a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800110e:	f002 fabd 	bl	800368c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001112:	bf00      	nop
 8001114:	3768      	adds	r7, #104	@ 0x68
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000

08001120 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	@ 0x28
 8001124:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001136:	4b46      	ldr	r3, [pc, #280]	@ (8001250 <MX_GPIO_Init+0x130>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	4a45      	ldr	r2, [pc, #276]	@ (8001250 <MX_GPIO_Init+0x130>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001142:	4b43      	ldr	r3, [pc, #268]	@ (8001250 <MX_GPIO_Init+0x130>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800114e:	4b40      	ldr	r3, [pc, #256]	@ (8001250 <MX_GPIO_Init+0x130>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	4a3f      	ldr	r2, [pc, #252]	@ (8001250 <MX_GPIO_Init+0x130>)
 8001154:	f043 0320 	orr.w	r3, r3, #32
 8001158:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800115a:	4b3d      	ldr	r3, [pc, #244]	@ (8001250 <MX_GPIO_Init+0x130>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	f003 0320 	and.w	r3, r3, #32
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b3a      	ldr	r3, [pc, #232]	@ (8001250 <MX_GPIO_Init+0x130>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	4a39      	ldr	r2, [pc, #228]	@ (8001250 <MX_GPIO_Init+0x130>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001172:	4b37      	ldr	r3, [pc, #220]	@ (8001250 <MX_GPIO_Init+0x130>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	4b34      	ldr	r3, [pc, #208]	@ (8001250 <MX_GPIO_Init+0x130>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001182:	4a33      	ldr	r2, [pc, #204]	@ (8001250 <MX_GPIO_Init+0x130>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800118a:	4b31      	ldr	r3, [pc, #196]	@ (8001250 <MX_GPIO_Init+0x130>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800119c:	482d      	ldr	r0, [pc, #180]	@ (8001254 <MX_GPIO_Init+0x134>)
 800119e:	f002 fbf7 	bl	8003990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CB_IN_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2190      	movs	r1, #144	@ 0x90
 80011a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011aa:	f002 fbf1 	bl	8003990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011b4:	4828      	ldr	r0, [pc, #160]	@ (8001258 <MX_GPIO_Init+0x138>)
 80011b6:	f002 fbeb 	bl	8003990 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80011ba:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80011be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	4820      	ldr	r0, [pc, #128]	@ (8001254 <MX_GPIO_Init+0x134>)
 80011d4:	f002 fa5a 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CB_IN_Pin|DEV_EN_LIDAR_Pin;
 80011d8:	2390      	movs	r3, #144	@ 0x90
 80011da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f2:	f002 fa4b 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHAT_SOURIS_Pin;
 80011f6:	2320      	movs	r3, #32
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHAT_SOURIS_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120c:	f002 fa3e 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin;
 8001210:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M_EN_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	480b      	ldr	r0, [pc, #44]	@ (8001258 <MX_GPIO_Init+0x138>)
 800122a:	f002 fa2f 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 800122e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4805      	ldr	r0, [pc, #20]	@ (8001258 <MX_GPIO_Init+0x138>)
 8001244:	f002 fa22 	bl	800368c <HAL_GPIO_Init>

}
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	@ 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40021000 	.word	0x40021000
 8001254:	48000800 	.word	0x48000800
 8001258:	48000400 	.word	0x48000400

0800125c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001260:	4b1b      	ldr	r3, [pc, #108]	@ (80012d0 <MX_I2C1_Init+0x74>)
 8001262:	4a1c      	ldr	r2, [pc, #112]	@ (80012d4 <MX_I2C1_Init+0x78>)
 8001264:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xA0623C56;
 8001266:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <MX_I2C1_Init+0x74>)
 8001268:	4a1b      	ldr	r2, [pc, #108]	@ (80012d8 <MX_I2C1_Init+0x7c>)
 800126a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800126c:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <MX_I2C1_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001272:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <MX_I2C1_Init+0x74>)
 8001274:	2201      	movs	r2, #1
 8001276:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001278:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <MX_I2C1_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800127e:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <MX_I2C1_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001284:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <MX_I2C1_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800128a:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <MX_I2C1_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001290:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <MX_I2C1_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001296:	480e      	ldr	r0, [pc, #56]	@ (80012d0 <MX_I2C1_Init+0x74>)
 8001298:	f002 fbac 	bl	80039f4 <HAL_I2C_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012a2:	f000 fa89 	bl	80017b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012a6:	2100      	movs	r1, #0
 80012a8:	4809      	ldr	r0, [pc, #36]	@ (80012d0 <MX_I2C1_Init+0x74>)
 80012aa:	f003 f92f 	bl	800450c <HAL_I2CEx_ConfigAnalogFilter>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012b4:	f000 fa80 	bl	80017b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012b8:	2100      	movs	r1, #0
 80012ba:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_I2C1_Init+0x74>)
 80012bc:	f003 f971 	bl	80045a2 <HAL_I2CEx_ConfigDigitalFilter>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012c6:	f000 fa77 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000025c 	.word	0x2000025c
 80012d4:	40005400 	.word	0x40005400
 80012d8:	a0623c56 	.word	0xa0623c56

080012dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b09a      	sub	sp, #104	@ 0x68
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	2244      	movs	r2, #68	@ 0x44
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f007 f9a9 	bl	8008654 <memset>
  if(i2cHandle->Instance==I2C1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a1f      	ldr	r2, [pc, #124]	@ (8001384 <HAL_I2C_MspInit+0xa8>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d136      	bne.n	800137a <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800130c:	2340      	movs	r3, #64	@ 0x40
 800130e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001310:	2300      	movs	r3, #0
 8001312:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	4618      	mov	r0, r3
 800131a:	f003 ff9f 	bl	800525c <HAL_RCCEx_PeriphCLKConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001324:	f000 fa48 	bl	80017b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001328:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <HAL_I2C_MspInit+0xac>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132c:	4a16      	ldr	r2, [pc, #88]	@ (8001388 <HAL_I2C_MspInit+0xac>)
 800132e:	f043 0302 	orr.w	r3, r3, #2
 8001332:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001334:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <HAL_I2C_MspInit+0xac>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001340:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001344:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001346:	2312      	movs	r3, #18
 8001348:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001352:	2304      	movs	r3, #4
 8001354:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800135a:	4619      	mov	r1, r3
 800135c:	480b      	ldr	r0, [pc, #44]	@ (800138c <HAL_I2C_MspInit+0xb0>)
 800135e:	f002 f995 	bl	800368c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <HAL_I2C_MspInit+0xac>)
 8001364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001366:	4a08      	ldr	r2, [pc, #32]	@ (8001388 <HAL_I2C_MspInit+0xac>)
 8001368:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800136c:	6593      	str	r3, [r2, #88]	@ 0x58
 800136e:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_I2C_MspInit+0xac>)
 8001370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001372:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800137a:	bf00      	nop
 800137c:	3768      	adds	r7, #104	@ 0x68
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40005400 	.word	0x40005400
 8001388:	40021000 	.word	0x40021000
 800138c:	48000400 	.word	0x48000400

08001390 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart4, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 8001398:	1d39      	adds	r1, r7, #4
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	2201      	movs	r2, #1
 80013a0:	4803      	ldr	r0, [pc, #12]	@ (80013b0 <__io_putchar+0x20>)
 80013a2:	f005 fc58 	bl	8006c56 <HAL_UART_Transmit>
  return chr;
 80013a6:	687b      	ldr	r3, [r7, #4]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000454 	.word	0x20000454

080013b4 <ADXL343_Initit>:


void ADXL343_Initit(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af04      	add	r7, sp, #16
    uint8_t configData;

    // Vérifier l'identifiant de l'ADXL343
    HAL_I2C_Mem_Read(&hi2c1, ADXL343_ADDRESS, ADXL343_DEVID_REG, 1, &configData, 1, HAL_MAX_DELAY);
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	9302      	str	r3, [sp, #8]
 80013c0:	2301      	movs	r3, #1
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	1dfb      	adds	r3, r7, #7
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2301      	movs	r3, #1
 80013ca:	2200      	movs	r2, #0
 80013cc:	21a6      	movs	r1, #166	@ 0xa6
 80013ce:	4810      	ldr	r0, [pc, #64]	@ (8001410 <ADXL343_Initit+0x5c>)
 80013d0:	f002 fcc0 	bl	8003d54 <HAL_I2C_Mem_Read>
    if (configData != 0xE5)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	2be5      	cmp	r3, #229	@ 0xe5
 80013d8:	d004      	beq.n	80013e4 <ADXL343_Initit+0x30>
    {
        printf("Erreur : L'ADXL343 n'est pas détecté !\n");
 80013da:	480e      	ldr	r0, [pc, #56]	@ (8001414 <ADXL343_Initit+0x60>)
 80013dc:	f007 f83a 	bl	8008454 <puts>
        while (1);
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <ADXL343_Initit+0x2c>
    }
    printf("ADXL343 détecté avec succès.\n");
 80013e4:	480c      	ldr	r0, [pc, #48]	@ (8001418 <ADXL343_Initit+0x64>)
 80013e6:	f007 f835 	bl	8008454 <puts>

    // Configurer le capteur en mode mesure
    configData = 0x08; // Mettre le bit mesure à 1
 80013ea:	2308      	movs	r3, #8
 80013ec:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, ADXL343_ADDRESS, ADXL343_POWER_CTL, 1, &configData, 1, HAL_MAX_DELAY);
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	9302      	str	r3, [sp, #8]
 80013f4:	2301      	movs	r3, #1
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	1dfb      	adds	r3, r7, #7
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2301      	movs	r3, #1
 80013fe:	222d      	movs	r2, #45	@ 0x2d
 8001400:	21a6      	movs	r1, #166	@ 0xa6
 8001402:	4803      	ldr	r0, [pc, #12]	@ (8001410 <ADXL343_Initit+0x5c>)
 8001404:	f002 fb92 	bl	8003b2c <HAL_I2C_Mem_Write>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	2000025c 	.word	0x2000025c
 8001414:	0800a6e0 	.word	0x0800a6e0
 8001418:	0800a70c 	.word	0x0800a70c
 800141c:	00000000 	.word	0x00000000

08001420 <ADXL343_ReadAxes>:

void ADXL343_ReadAxes(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af04      	add	r7, sp, #16
    // Lire les 6 octets (X0-X1, Y0-Y1, Z0-Z1)
    HAL_I2C_Mem_Read(&hi2c1, ADXL343_ADDRESS, ADXL343_DATAX0, 1, data, 6, HAL_MAX_DELAY);
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	9302      	str	r3, [sp, #8]
 800142c:	2306      	movs	r3, #6
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	4b35      	ldr	r3, [pc, #212]	@ (8001508 <ADXL343_ReadAxes+0xe8>)
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2301      	movs	r3, #1
 8001436:	2232      	movs	r2, #50	@ 0x32
 8001438:	21a6      	movs	r1, #166	@ 0xa6
 800143a:	4834      	ldr	r0, [pc, #208]	@ (800150c <ADXL343_ReadAxes+0xec>)
 800143c:	f002 fc8a 	bl	8003d54 <HAL_I2C_Mem_Read>

    // Combiner les octets pour obtenir des valeurs 16 bits signées
    x = (int16_t)((data[1] << 8) | data[0]);
 8001440:	4b31      	ldr	r3, [pc, #196]	@ (8001508 <ADXL343_ReadAxes+0xe8>)
 8001442:	785b      	ldrb	r3, [r3, #1]
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	b21a      	sxth	r2, r3
 8001448:	4b2f      	ldr	r3, [pc, #188]	@ (8001508 <ADXL343_ReadAxes+0xe8>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b21b      	sxth	r3, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	b21a      	sxth	r2, r3
 8001452:	4b2f      	ldr	r3, [pc, #188]	@ (8001510 <ADXL343_ReadAxes+0xf0>)
 8001454:	801a      	strh	r2, [r3, #0]
    y = (int16_t)((data[3] << 8) | data[2]);
 8001456:	4b2c      	ldr	r3, [pc, #176]	@ (8001508 <ADXL343_ReadAxes+0xe8>)
 8001458:	78db      	ldrb	r3, [r3, #3]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	b21a      	sxth	r2, r3
 800145e:	4b2a      	ldr	r3, [pc, #168]	@ (8001508 <ADXL343_ReadAxes+0xe8>)
 8001460:	789b      	ldrb	r3, [r3, #2]
 8001462:	b21b      	sxth	r3, r3
 8001464:	4313      	orrs	r3, r2
 8001466:	b21a      	sxth	r2, r3
 8001468:	4b2a      	ldr	r3, [pc, #168]	@ (8001514 <ADXL343_ReadAxes+0xf4>)
 800146a:	801a      	strh	r2, [r3, #0]
    z = (int16_t)((data[5] << 8) | data[4]);
 800146c:	4b26      	ldr	r3, [pc, #152]	@ (8001508 <ADXL343_ReadAxes+0xe8>)
 800146e:	795b      	ldrb	r3, [r3, #5]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	b21a      	sxth	r2, r3
 8001474:	4b24      	ldr	r3, [pc, #144]	@ (8001508 <ADXL343_ReadAxes+0xe8>)
 8001476:	791b      	ldrb	r3, [r3, #4]
 8001478:	b21b      	sxth	r3, r3
 800147a:	4313      	orrs	r3, r2
 800147c:	b21a      	sxth	r2, r3
 800147e:	4b26      	ldr	r3, [pc, #152]	@ (8001518 <ADXL343_ReadAxes+0xf8>)
 8001480:	801a      	strh	r2, [r3, #0]

    // Convertir en unités "g" (1g = 9.8 m/s²)
    x_g = x * 0.004;  // Sensibilité typique = 4mg/LSB
 8001482:	4b23      	ldr	r3, [pc, #140]	@ (8001510 <ADXL343_ReadAxes+0xf0>)
 8001484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f873 	bl	8000574 <__aeabi_i2d>
 800148e:	a31c      	add	r3, pc, #112	@ (adr r3, 8001500 <ADXL343_ReadAxes+0xe0>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	f7ff f8d8 	bl	8000648 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff fbaa 	bl	8000bf8 <__aeabi_d2f>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a1d      	ldr	r2, [pc, #116]	@ (800151c <ADXL343_ReadAxes+0xfc>)
 80014a8:	6013      	str	r3, [r2, #0]
    y_g = y * 0.004;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001514 <ADXL343_ReadAxes+0xf4>)
 80014ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f85f 	bl	8000574 <__aeabi_i2d>
 80014b6:	a312      	add	r3, pc, #72	@ (adr r3, 8001500 <ADXL343_ReadAxes+0xe0>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	f7ff f8c4 	bl	8000648 <__aeabi_dmul>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fb96 	bl	8000bf8 <__aeabi_d2f>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4a14      	ldr	r2, [pc, #80]	@ (8001520 <ADXL343_ReadAxes+0x100>)
 80014d0:	6013      	str	r3, [r2, #0]
    z_g = z * 0.004;
 80014d2:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <ADXL343_ReadAxes+0xf8>)
 80014d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f84b 	bl	8000574 <__aeabi_i2d>
 80014de:	a308      	add	r3, pc, #32	@ (adr r3, 8001500 <ADXL343_ReadAxes+0xe0>)
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	f7ff f8b0 	bl	8000648 <__aeabi_dmul>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	f7ff fb82 	bl	8000bf8 <__aeabi_d2f>
 80014f4:	4603      	mov	r3, r0
 80014f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001524 <ADXL343_ReadAxes+0x104>)
 80014f8:	6013      	str	r3, [r2, #0]
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	d2f1a9fc 	.word	0xd2f1a9fc
 8001504:	3f70624d 	.word	0x3f70624d
 8001508:	200002b0 	.word	0x200002b0
 800150c:	2000025c 	.word	0x2000025c
 8001510:	200002b6 	.word	0x200002b6
 8001514:	200002b8 	.word	0x200002b8
 8001518:	200002ba 	.word	0x200002ba
 800151c:	200002bc 	.word	0x200002bc
 8001520:	200002c0 	.word	0x200002c0
 8001524:	200002c4 	.word	0x200002c4

08001528 <calculateInstantaneousSpeed>:

float calculateInstantaneousSpeed(int encoder_now, int encoder_old, float dt, int encoder_resolution)
{
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	@ 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	ed87 0a01 	vstr	s0, [r7, #4]
 8001536:	603a      	str	r2, [r7, #0]
    // Calcul de la différence d'impulsions
    int pulse_diff = encoder_now - encoder_old;
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	61fb      	str	r3, [r7, #28]

    // Calcul de la vitesse en impulsions par seconde
    float speed_in_pulses_per_second = (float)pulse_diff / dt;
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800154a:	ed97 7a01 	vldr	s14, [r7, #4]
 800154e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001552:	edc7 7a06 	vstr	s15, [r7, #24]

    // Conversion de la vitesse en RPM (tours par minute)
    float speed_rpm = (speed_in_pulses_per_second * 60) / encoder_resolution;
 8001556:	edd7 7a06 	vldr	s15, [r7, #24]
 800155a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001588 <calculateInstantaneousSpeed+0x60>
 800155e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	ee07 3a90 	vmov	s15, r3
 8001568:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800156c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001570:	edc7 7a05 	vstr	s15, [r7, #20]

    // Retourner la vitesse en RPM
    return speed_rpm;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	ee07 3a90 	vmov	s15, r3
}
 800157a:	eeb0 0a67 	vmov.f32	s0, s15
 800157e:	3724      	adds	r7, #36	@ 0x24
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	42700000 	.word	0x42700000

0800158c <Transmit_Speed>:

// Fonction d'affichage de la vitesse sur UART
void Transmit_Speed(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08e      	sub	sp, #56	@ 0x38
 8001590:	af00      	add	r7, sp, #0
    char buffer[50];  // Buffer pour stocker la chaîne à envoyer
    // Formater la chaîne avec la vitesse en RPM
    sprintf(buffer, "Vitesse: %.2f RPM\r\n", motor_speed_rpm);
 8001592:	4b0d      	ldr	r3, [pc, #52]	@ (80015c8 <Transmit_Speed+0x3c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe fffe 	bl	8000598 <__aeabi_f2d>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	1d38      	adds	r0, r7, #4
 80015a2:	490a      	ldr	r1, [pc, #40]	@ (80015cc <Transmit_Speed+0x40>)
 80015a4:	f006 ff5e 	bl	8008464 <siprintf>

    // Transmettre la chaîne via UART (ici on utilise huart2, à ajuster selon votre configuration)
    HAL_UART_Transmit(&huart4, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe fe88 	bl	80002c0 <strlen>
 80015b0:	4603      	mov	r3, r0
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	1d39      	adds	r1, r7, #4
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <Transmit_Speed+0x44>)
 80015bc:	f005 fb4b 	bl	8006c56 <HAL_UART_Transmit>
}
 80015c0:	bf00      	nop
 80015c2:	3738      	adds	r7, #56	@ 0x38
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	200002d0 	.word	0x200002d0
 80015cc:	0800a72c 	.word	0x0800a72c
 80015d0:	20000454 	.word	0x20000454

080015d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015d8:	b084      	sub	sp, #16
 80015da:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015dc:	f000 ff09 	bl	80023f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e0:	f000 f88e 	bl	8001700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e4:	f7ff fd9c 	bl	8001120 <MX_GPIO_Init>
  MX_ADC1_Init();
 80015e8:	f7ff fcce 	bl	8000f88 <MX_ADC1_Init>
  MX_TIM1_Init();
 80015ec:	f000 fa90 	bl	8001b10 <MX_TIM1_Init>
  MX_TIM3_Init();
 80015f0:	f000 fb2e 	bl	8001c50 <MX_TIM3_Init>
  MX_TIM4_Init();
 80015f4:	f000 fb82 	bl	8001cfc <MX_TIM4_Init>
  MX_TIM16_Init();
 80015f8:	f000 fbd6 	bl	8001da8 <MX_TIM16_Init>
  MX_UART4_Init();
 80015fc:	f000 fd9e 	bl	800213c <MX_UART4_Init>
  MX_USART3_UART_Init();
 8001600:	f000 fde8 	bl	80021d4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001604:	f7ff fe2a 	bl	800125c <MX_I2C1_Init>
  //uint8_t res = ADXL343_Init(&ADXL343, &hi2c1);
  //Moteur_Init(&moteur1, &htim1, TIM_CHANNEL_1, &htim3);
 // Moteur_Init(&moteur2, &htim1, TIM_CHANNEL_2, &htim4);
  //Robot_Init(&robot, &moteur1, &moteur2);
 // LIDAR_start(&lidar);
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);  // Démarrer le Timer en mode encodeur
 8001608:	213c      	movs	r1, #60	@ 0x3c
 800160a:	4831      	ldr	r0, [pc, #196]	@ (80016d0 <main+0xfc>)
 800160c:	f004 f9d5 	bl	80059ba <HAL_TIM_Encoder_Start>
    // HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
   //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);  // Signal complémentaire (CH1N)
 8001610:	2100      	movs	r1, #0
 8001612:	4830      	ldr	r0, [pc, #192]	@ (80016d4 <main+0x100>)
 8001614:	f005 f8a2 	bl	800675c <HAL_TIMEx_PWMN_Start>
  last_encoder_value = __HAL_TIM_GET_COUNTER(&htim1);
 8001618:	4b2e      	ldr	r3, [pc, #184]	@ (80016d4 <main+0x100>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161e:	461a      	mov	r2, r3
 8001620:	4b2d      	ldr	r3, [pc, #180]	@ (80016d8 <main+0x104>)
 8001622:	601a      	str	r2, [r3, #0]
    //HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
  ADXL343_Initit();
 8001624:	f7ff fec6 	bl	80013b4 <ADXL343_Initit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    printf("hello \r\n");
 8001628:	482c      	ldr	r0, [pc, #176]	@ (80016dc <main+0x108>)
 800162a:	f006 ff13 	bl	8008454 <puts>
      HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800162e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001632:	482b      	ldr	r0, [pc, #172]	@ (80016e0 <main+0x10c>)
 8001634:	f002 f9c4 	bl	80039c0 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001638:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800163c:	4828      	ldr	r0, [pc, #160]	@ (80016e0 <main+0x10c>)
 800163e:	f002 f9bf 	bl	80039c0 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001642:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001646:	4826      	ldr	r0, [pc, #152]	@ (80016e0 <main+0x10c>)
 8001648:	f002 f9ba 	bl	80039c0 <HAL_GPIO_TogglePin>
      //HAL_Delay(500);

    ADXL343_ReadAxes();
 800164c:	f7ff fee8 	bl	8001420 <ADXL343_ReadAxes>
    printf("X: %.2fg, Y: %.2fg, Z: %.2fg\n", x_g, y_g, z_g);
 8001650:	4b24      	ldr	r3, [pc, #144]	@ (80016e4 <main+0x110>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff9f 	bl	8000598 <__aeabi_f2d>
 800165a:	4680      	mov	r8, r0
 800165c:	4689      	mov	r9, r1
 800165e:	4b22      	ldr	r3, [pc, #136]	@ (80016e8 <main+0x114>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff98 	bl	8000598 <__aeabi_f2d>
 8001668:	4604      	mov	r4, r0
 800166a:	460d      	mov	r5, r1
 800166c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <main+0x118>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff91 	bl	8000598 <__aeabi_f2d>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800167e:	e9cd 4500 	strd	r4, r5, [sp]
 8001682:	4642      	mov	r2, r8
 8001684:	464b      	mov	r3, r9
 8001686:	481a      	ldr	r0, [pc, #104]	@ (80016f0 <main+0x11c>)
 8001688:	f006 fe7c 	bl	8008384 <iprintf>
    HAL_Delay(500);
 800168c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001690:	f000 fee6 	bl	8002460 <HAL_Delay>
    //Calculate_Speed();
    //Transmit_Speed();
    // Lecture de la valeur actuelle du compteur de l'encodeur
            current_encoder_value = __HAL_TIM_GET_COUNTER(&htim1);
 8001694:	4b0f      	ldr	r3, [pc, #60]	@ (80016d4 <main+0x100>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169a:	461a      	mov	r2, r3
 800169c:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <main+0x120>)
 800169e:	601a      	str	r2, [r3, #0]

            // Calcul de la vitesse instantanée en RPM
            motor_speed_rpm = calculateInstantaneousSpeed(current_encoder_value, last_encoder_value, SAMPLING_TIME, ENCODER_CPR);
 80016a0:	4b14      	ldr	r3, [pc, #80]	@ (80016f4 <main+0x120>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0c      	ldr	r2, [pc, #48]	@ (80016d8 <main+0x104>)
 80016a6:	6811      	ldr	r1, [r2, #0]
 80016a8:	f44f 62cc 	mov.w	r2, #1632	@ 0x660
 80016ac:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 80016f8 <main+0x124>
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff39 	bl	8001528 <calculateInstantaneousSpeed>
 80016b6:	eef0 7a40 	vmov.f32	s15, s0
 80016ba:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <main+0x128>)
 80016bc:	edc3 7a00 	vstr	s15, [r3]

            // Transmettre la vitesse calculée via UART
            Transmit_Speed();
 80016c0:	f7ff ff64 	bl	800158c <Transmit_Speed>

            // Sauvegarder la valeur du compteur pour la prochaine itération
            last_encoder_value = current_encoder_value;
 80016c4:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <main+0x120>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a03      	ldr	r2, [pc, #12]	@ (80016d8 <main+0x104>)
 80016ca:	6013      	str	r3, [r2, #0]
    printf("hello \r\n");
 80016cc:	bf00      	nop
 80016ce:	e7ab      	b.n	8001628 <main+0x54>
 80016d0:	20000370 	.word	0x20000370
 80016d4:	20000324 	.word	0x20000324
 80016d8:	200002c8 	.word	0x200002c8
 80016dc:	0800a740 	.word	0x0800a740
 80016e0:	48000800 	.word	0x48000800
 80016e4:	200002bc 	.word	0x200002bc
 80016e8:	200002c0 	.word	0x200002c0
 80016ec:	200002c4 	.word	0x200002c4
 80016f0:	0800a748 	.word	0x0800a748
 80016f4:	200002cc 	.word	0x200002cc
 80016f8:	3dcccccd 	.word	0x3dcccccd
 80016fc:	200002d0 	.word	0x200002d0

08001700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b094      	sub	sp, #80	@ 0x50
 8001704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001706:	f107 0318 	add.w	r3, r7, #24
 800170a:	2238      	movs	r2, #56	@ 0x38
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f006 ffa0 	bl	8008654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001722:	2000      	movs	r0, #0
 8001724:	f002 ff8a 	bl	800463c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001728:	2301      	movs	r3, #1
 800172a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800172c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001730:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001732:	2302      	movs	r3, #2
 8001734:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001736:	2303      	movs	r3, #3
 8001738:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800173a:	2304      	movs	r3, #4
 800173c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800173e:	2355      	movs	r3, #85	@ 0x55
 8001740:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001742:	2302      	movs	r3, #2
 8001744:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001746:	2302      	movs	r3, #2
 8001748:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800174a:	2302      	movs	r3, #2
 800174c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800174e:	f107 0318 	add.w	r3, r7, #24
 8001752:	4618      	mov	r0, r3
 8001754:	f003 f826 	bl	80047a4 <HAL_RCC_OscConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800175e:	f000 f82b 	bl	80017b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001762:	230f      	movs	r3, #15
 8001764:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001766:	2303      	movs	r3, #3
 8001768:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2104      	movs	r1, #4
 800177a:	4618      	mov	r0, r3
 800177c:	f003 fb24 	bl	8004dc8 <HAL_RCC_ClockConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001786:	f000 f817 	bl	80017b8 <Error_Handler>
  }
}
 800178a:	bf00      	nop
 800178c:	3750      	adds	r7, #80	@ 0x50
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a04      	ldr	r2, [pc, #16]	@ (80017b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d101      	bne.n	80017aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017a6:	f000 fe3d 	bl	8002424 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40001000 	.word	0x40001000

080017b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017bc:	b672      	cpsid	i
}
 80017be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <Error_Handler+0x8>

080017c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001808 <HAL_MspInit+0x44>)
 80017cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001808 <HAL_MspInit+0x44>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80017d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <HAL_MspInit+0x44>)
 80017d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <HAL_MspInit+0x44>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e6:	4a08      	ldr	r2, [pc, #32]	@ (8001808 <HAL_MspInit+0x44>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ee:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <HAL_MspInit+0x44>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017fa:	f002 ffc3 	bl	8004784 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000

0800180c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08c      	sub	sp, #48	@ 0x30
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800181c:	4b2c      	ldr	r3, [pc, #176]	@ (80018d0 <HAL_InitTick+0xc4>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001820:	4a2b      	ldr	r2, [pc, #172]	@ (80018d0 <HAL_InitTick+0xc4>)
 8001822:	f043 0310 	orr.w	r3, r3, #16
 8001826:	6593      	str	r3, [r2, #88]	@ 0x58
 8001828:	4b29      	ldr	r3, [pc, #164]	@ (80018d0 <HAL_InitTick+0xc4>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182c:	f003 0310 	and.w	r3, r3, #16
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001834:	f107 020c 	add.w	r2, r7, #12
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f003 fc96 	bl	8005170 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001844:	f003 fc68 	bl	8005118 <HAL_RCC_GetPCLK1Freq>
 8001848:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800184a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800184c:	4a21      	ldr	r2, [pc, #132]	@ (80018d4 <HAL_InitTick+0xc8>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	0c9b      	lsrs	r3, r3, #18
 8001854:	3b01      	subs	r3, #1
 8001856:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001858:	4b1f      	ldr	r3, [pc, #124]	@ (80018d8 <HAL_InitTick+0xcc>)
 800185a:	4a20      	ldr	r2, [pc, #128]	@ (80018dc <HAL_InitTick+0xd0>)
 800185c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800185e:	4b1e      	ldr	r3, [pc, #120]	@ (80018d8 <HAL_InitTick+0xcc>)
 8001860:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001864:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001866:	4a1c      	ldr	r2, [pc, #112]	@ (80018d8 <HAL_InitTick+0xcc>)
 8001868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800186c:	4b1a      	ldr	r3, [pc, #104]	@ (80018d8 <HAL_InitTick+0xcc>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001872:	4b19      	ldr	r3, [pc, #100]	@ (80018d8 <HAL_InitTick+0xcc>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001878:	4817      	ldr	r0, [pc, #92]	@ (80018d8 <HAL_InitTick+0xcc>)
 800187a:	f003 fedf 	bl	800563c <HAL_TIM_Base_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001884:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001888:	2b00      	cmp	r3, #0
 800188a:	d11b      	bne.n	80018c4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800188c:	4812      	ldr	r0, [pc, #72]	@ (80018d8 <HAL_InitTick+0xcc>)
 800188e:	f003 ff2d 	bl	80056ec <HAL_TIM_Base_Start_IT>
 8001892:	4603      	mov	r3, r0
 8001894:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001898:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800189c:	2b00      	cmp	r3, #0
 800189e:	d111      	bne.n	80018c4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018a0:	2036      	movs	r0, #54	@ 0x36
 80018a2:	f001 fee5 	bl	8003670 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b0f      	cmp	r3, #15
 80018aa:	d808      	bhi.n	80018be <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80018ac:	2200      	movs	r2, #0
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	2036      	movs	r0, #54	@ 0x36
 80018b2:	f001 fec3 	bl	800363c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018b6:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <HAL_InitTick+0xd4>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	e002      	b.n	80018c4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80018c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3730      	adds	r7, #48	@ 0x30
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40021000 	.word	0x40021000
 80018d4:	431bde83 	.word	0x431bde83
 80018d8:	200002d4 	.word	0x200002d4
 80018dc:	40001000 	.word	0x40001000
 80018e0:	20000004 	.word	0x20000004

080018e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <NMI_Handler+0x4>

080018ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <HardFault_Handler+0x4>

080018f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <MemManage_Handler+0x4>

080018fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001900:	bf00      	nop
 8001902:	e7fd      	b.n	8001900 <BusFault_Handler+0x4>

08001904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <UsageFault_Handler+0x4>

0800190c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001948:	4802      	ldr	r0, [pc, #8]	@ (8001954 <TIM6_DAC_IRQHandler+0x10>)
 800194a:	f004 f8c4 	bl	8005ad6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200002d4 	.word	0x200002d4

08001958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return 1;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <_kill>:

int _kill(int pid, int sig)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001972:	f006 fec1 	bl	80086f8 <__errno>
 8001976:	4603      	mov	r3, r0
 8001978:	2216      	movs	r2, #22
 800197a:	601a      	str	r2, [r3, #0]
  return -1;
 800197c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_exit>:

void _exit (int status)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ffe7 	bl	8001968 <_kill>
  while (1) {}    /* Make sure we hang here */
 800199a:	bf00      	nop
 800199c:	e7fd      	b.n	800199a <_exit+0x12>

0800199e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	e00a      	b.n	80019c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019b0:	f3af 8000 	nop.w
 80019b4:	4601      	mov	r1, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	60ba      	str	r2, [r7, #8]
 80019bc:	b2ca      	uxtb	r2, r1
 80019be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	3301      	adds	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	dbf0      	blt.n	80019b0 <_read+0x12>
  }

  return len;
 80019ce:	687b      	ldr	r3, [r7, #4]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	e009      	b.n	80019fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	60ba      	str	r2, [r7, #8]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fccc 	bl	8001390 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3301      	adds	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	dbf1      	blt.n	80019ea <_write+0x12>
  }
  return len;
 8001a06:	687b      	ldr	r3, [r7, #4]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_close>:

int _close(int file)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a38:	605a      	str	r2, [r3, #4]
  return 0;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <_isatty>:

int _isatty(int file)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a50:	2301      	movs	r3, #1
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b085      	sub	sp, #20
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a80:	4a14      	ldr	r2, [pc, #80]	@ (8001ad4 <_sbrk+0x5c>)
 8001a82:	4b15      	ldr	r3, [pc, #84]	@ (8001ad8 <_sbrk+0x60>)
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a8c:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <_sbrk+0x64>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a94:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <_sbrk+0x64>)
 8001a96:	4a12      	ldr	r2, [pc, #72]	@ (8001ae0 <_sbrk+0x68>)
 8001a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a9a:	4b10      	ldr	r3, [pc, #64]	@ (8001adc <_sbrk+0x64>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d207      	bcs.n	8001ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa8:	f006 fe26 	bl	80086f8 <__errno>
 8001aac:	4603      	mov	r3, r0
 8001aae:	220c      	movs	r2, #12
 8001ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	e009      	b.n	8001acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab8:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001abe:	4b07      	ldr	r3, [pc, #28]	@ (8001adc <_sbrk+0x64>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4a05      	ldr	r2, [pc, #20]	@ (8001adc <_sbrk+0x64>)
 8001ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aca:	68fb      	ldr	r3, [r7, #12]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20008000 	.word	0x20008000
 8001ad8:	00000400 	.word	0x00000400
 8001adc:	20000320 	.word	0x20000320
 8001ae0:	200006d0 	.word	0x200006d0

08001ae4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ae8:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <SystemInit+0x28>)
 8001aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aee:	4a07      	ldr	r2, [pc, #28]	@ (8001b0c <SystemInit+0x28>)
 8001af0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001af4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8001af8:	4b04      	ldr	r3, [pc, #16]	@ (8001b0c <SystemInit+0x28>)
 8001afa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001afe:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b098      	sub	sp, #96	@ 0x60
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b16:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b22:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]
 8001b32:	615a      	str	r2, [r3, #20]
 8001b34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	2234      	movs	r2, #52	@ 0x34
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f006 fd89 	bl	8008654 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b42:	4b41      	ldr	r3, [pc, #260]	@ (8001c48 <MX_TIM1_Init+0x138>)
 8001b44:	4a41      	ldr	r2, [pc, #260]	@ (8001c4c <MX_TIM1_Init+0x13c>)
 8001b46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b48:	4b3f      	ldr	r3, [pc, #252]	@ (8001c48 <MX_TIM1_Init+0x138>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c48 <MX_TIM1_Init+0x138>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8001b54:	4b3c      	ldr	r3, [pc, #240]	@ (8001c48 <MX_TIM1_Init+0x138>)
 8001b56:	f242 1233 	movw	r2, #8499	@ 0x2133
 8001b5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c48 <MX_TIM1_Init+0x138>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b62:	4b39      	ldr	r3, [pc, #228]	@ (8001c48 <MX_TIM1_Init+0x138>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b68:	4b37      	ldr	r3, [pc, #220]	@ (8001c48 <MX_TIM1_Init+0x138>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b6e:	4836      	ldr	r0, [pc, #216]	@ (8001c48 <MX_TIM1_Init+0x138>)
 8001b70:	f003 fe26 	bl	80057c0 <HAL_TIM_PWM_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001b7a:	f7ff fe1d 	bl	80017b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b8a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b8e:	4619      	mov	r1, r3
 8001b90:	482d      	ldr	r0, [pc, #180]	@ (8001c48 <MX_TIM1_Init+0x138>)
 8001b92:	f004 fe97 	bl	80068c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b9c:	f7ff fe0c 	bl	80017b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba0:	2360      	movs	r3, #96	@ 0x60
 8001ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 3400;
 8001ba4:	f640 5348 	movw	r3, #3400	@ 0xd48
 8001ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001baa:	2300      	movs	r3, #0
 8001bac:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bbe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4820      	ldr	r0, [pc, #128]	@ (8001c48 <MX_TIM1_Init+0x138>)
 8001bc8:	f004 f8d4 	bl	8005d74 <HAL_TIM_PWM_ConfigChannel>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001bd2:	f7ff fdf1 	bl	80017b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bd6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bda:	2204      	movs	r2, #4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	481a      	ldr	r0, [pc, #104]	@ (8001c48 <MX_TIM1_Init+0x138>)
 8001be0:	f004 f8c8 	bl	8005d74 <HAL_TIM_PWM_ConfigChannel>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8001bea:	f7ff fde5 	bl	80017b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c18:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4807      	ldr	r0, [pc, #28]	@ (8001c48 <MX_TIM1_Init+0x138>)
 8001c2c:	f004 fecc 	bl	80069c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001c36:	f7ff fdbf 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c3a:	4803      	ldr	r0, [pc, #12]	@ (8001c48 <MX_TIM1_Init+0x138>)
 8001c3c:	f000 fa02 	bl	8002044 <HAL_TIM_MspPostInit>

}
 8001c40:	bf00      	nop
 8001c42:	3760      	adds	r7, #96	@ 0x60
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000324 	.word	0x20000324
 8001c4c:	40012c00 	.word	0x40012c00

08001c50 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08c      	sub	sp, #48	@ 0x30
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c56:	f107 030c 	add.w	r3, r7, #12
 8001c5a:	2224      	movs	r2, #36	@ 0x24
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f006 fcf8 	bl	8008654 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c64:	463b      	mov	r3, r7
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c6e:	4b21      	ldr	r3, [pc, #132]	@ (8001cf4 <MX_TIM3_Init+0xa4>)
 8001c70:	4a21      	ldr	r2, [pc, #132]	@ (8001cf8 <MX_TIM3_Init+0xa8>)
 8001c72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c74:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf4 <MX_TIM3_Init+0xa4>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf4 <MX_TIM3_Init+0xa4>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c80:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf4 <MX_TIM3_Init+0xa4>)
 8001c82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c88:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf4 <MX_TIM3_Init+0xa4>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c8e:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <MX_TIM3_Init+0xa4>)
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c94:	2303      	movs	r3, #3
 8001c96:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001ca4:	230a      	movs	r3, #10
 8001ca6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cac:	2301      	movs	r3, #1
 8001cae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	480d      	ldr	r0, [pc, #52]	@ (8001cf4 <MX_TIM3_Init+0xa4>)
 8001cc0:	f003 fdd5 	bl	800586e <HAL_TIM_Encoder_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001cca:	f7ff fd75 	bl	80017b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cd6:	463b      	mov	r3, r7
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4806      	ldr	r0, [pc, #24]	@ (8001cf4 <MX_TIM3_Init+0xa4>)
 8001cdc:	f004 fdf2 	bl	80068c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001ce6:	f7ff fd67 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	3730      	adds	r7, #48	@ 0x30
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000370 	.word	0x20000370
 8001cf8:	40000400 	.word	0x40000400

08001cfc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	@ 0x30
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d02:	f107 030c 	add.w	r3, r7, #12
 8001d06:	2224      	movs	r2, #36	@ 0x24
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f006 fca2 	bl	8008654 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d10:	463b      	mov	r3, r7
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d1a:	4b21      	ldr	r3, [pc, #132]	@ (8001da0 <MX_TIM4_Init+0xa4>)
 8001d1c:	4a21      	ldr	r2, [pc, #132]	@ (8001da4 <MX_TIM4_Init+0xa8>)
 8001d1e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d20:	4b1f      	ldr	r3, [pc, #124]	@ (8001da0 <MX_TIM4_Init+0xa4>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d26:	4b1e      	ldr	r3, [pc, #120]	@ (8001da0 <MX_TIM4_Init+0xa4>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001da0 <MX_TIM4_Init+0xa4>)
 8001d2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d32:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d34:	4b1a      	ldr	r3, [pc, #104]	@ (8001da0 <MX_TIM4_Init+0xa4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d3a:	4b19      	ldr	r3, [pc, #100]	@ (8001da0 <MX_TIM4_Init+0xa4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d40:	2301      	movs	r3, #1
 8001d42:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d44:	2300      	movs	r3, #0
 8001d46:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d54:	2300      	movs	r3, #0
 8001d56:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	4619      	mov	r1, r3
 8001d6a:	480d      	ldr	r0, [pc, #52]	@ (8001da0 <MX_TIM4_Init+0xa4>)
 8001d6c:	f003 fd7f 	bl	800586e <HAL_TIM_Encoder_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001d76:	f7ff fd1f 	bl	80017b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d82:	463b      	mov	r3, r7
 8001d84:	4619      	mov	r1, r3
 8001d86:	4806      	ldr	r0, [pc, #24]	@ (8001da0 <MX_TIM4_Init+0xa4>)
 8001d88:	f004 fd9c 	bl	80068c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001d92:	f7ff fd11 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d96:	bf00      	nop
 8001d98:	3730      	adds	r7, #48	@ 0x30
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200003bc 	.word	0x200003bc
 8001da4:	40000800 	.word	0x40000800

08001da8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b094      	sub	sp, #80	@ 0x50
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	611a      	str	r2, [r3, #16]
 8001dbe:	615a      	str	r2, [r3, #20]
 8001dc0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dc2:	463b      	mov	r3, r7
 8001dc4:	2234      	movs	r2, #52	@ 0x34
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f006 fc43 	bl	8008654 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001dce:	4b31      	ldr	r3, [pc, #196]	@ (8001e94 <MX_TIM16_Init+0xec>)
 8001dd0:	4a31      	ldr	r2, [pc, #196]	@ (8001e98 <MX_TIM16_Init+0xf0>)
 8001dd2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8001e94 <MX_TIM16_Init+0xec>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dda:	4b2e      	ldr	r3, [pc, #184]	@ (8001e94 <MX_TIM16_Init+0xec>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001de0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e94 <MX_TIM16_Init+0xec>)
 8001de2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001de6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e94 <MX_TIM16_Init+0xec>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001dee:	4b29      	ldr	r3, [pc, #164]	@ (8001e94 <MX_TIM16_Init+0xec>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df4:	4b27      	ldr	r3, [pc, #156]	@ (8001e94 <MX_TIM16_Init+0xec>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001dfa:	4826      	ldr	r0, [pc, #152]	@ (8001e94 <MX_TIM16_Init+0xec>)
 8001dfc:	f003 fc1e 	bl	800563c <HAL_TIM_Base_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001e06:	f7ff fcd7 	bl	80017b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001e0a:	4822      	ldr	r0, [pc, #136]	@ (8001e94 <MX_TIM16_Init+0xec>)
 8001e0c:	f003 fcd8 	bl	80057c0 <HAL_TIM_PWM_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001e16:	f7ff fccf 	bl	80017b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e1a:	2360      	movs	r3, #96	@ 0x60
 8001e1c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e22:	2300      	movs	r3, #0
 8001e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e26:	2300      	movs	r3, #0
 8001e28:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e36:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4815      	ldr	r0, [pc, #84]	@ (8001e94 <MX_TIM16_Init+0xec>)
 8001e40:	f003 ff98 	bl	8005d74 <HAL_TIM_PWM_ConfigChannel>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001e4a:	f7ff fcb5 	bl	80017b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001e70:	463b      	mov	r3, r7
 8001e72:	4619      	mov	r1, r3
 8001e74:	4807      	ldr	r0, [pc, #28]	@ (8001e94 <MX_TIM16_Init+0xec>)
 8001e76:	f004 fda7 	bl	80069c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001e80:	f7ff fc9a 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001e84:	4803      	ldr	r0, [pc, #12]	@ (8001e94 <MX_TIM16_Init+0xec>)
 8001e86:	f000 f8dd 	bl	8002044 <HAL_TIM_MspPostInit>

}
 8001e8a:	bf00      	nop
 8001e8c:	3750      	adds	r7, #80	@ 0x50
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000408 	.word	0x20000408
 8001e98:	40014400 	.word	0x40014400

08001e9c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <HAL_TIM_PWM_MspInit+0x38>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d10b      	bne.n	8001ec6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb2:	4a09      	ldr	r2, [pc, #36]	@ (8001ed8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001eb4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001eb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eba:	4b07      	ldr	r3, [pc, #28]	@ (8001ed8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ebe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40012c00 	.word	0x40012c00
 8001ed8:	40021000 	.word	0x40021000

08001edc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08c      	sub	sp, #48	@ 0x30
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a3d      	ldr	r2, [pc, #244]	@ (8001ff0 <HAL_TIM_Encoder_MspInit+0x114>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d144      	bne.n	8001f88 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001efe:	4b3d      	ldr	r3, [pc, #244]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x118>)
 8001f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f02:	4a3c      	ldr	r2, [pc, #240]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x118>)
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f0a:	4b3a      	ldr	r3, [pc, #232]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x118>)
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f16:	4b37      	ldr	r3, [pc, #220]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x118>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1a:	4a36      	ldr	r2, [pc, #216]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x118>)
 8001f1c:	f043 0304 	orr.w	r3, r3, #4
 8001f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f22:	4b34      	ldr	r3, [pc, #208]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x118>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2e:	4b31      	ldr	r3, [pc, #196]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x118>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f32:	4a30      	ldr	r2, [pc, #192]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x118>)
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x118>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PHASEB2_Pin;
 8001f46:	2340      	movs	r3, #64	@ 0x40
 8001f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f56:	2302      	movs	r3, #2
 8001f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PHASEB2_GPIO_Port, &GPIO_InitStruct);
 8001f5a:	f107 031c 	add.w	r3, r7, #28
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4825      	ldr	r0, [pc, #148]	@ (8001ff8 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001f62:	f001 fb93 	bl	800368c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PHASEA2_Pin;
 8001f66:	2320      	movs	r3, #32
 8001f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f72:	2300      	movs	r3, #0
 8001f74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f76:	2302      	movs	r3, #2
 8001f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PHASEA2_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	f107 031c 	add.w	r3, r7, #28
 8001f7e:	4619      	mov	r1, r3
 8001f80:	481e      	ldr	r0, [pc, #120]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x120>)
 8001f82:	f001 fb83 	bl	800368c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001f86:	e02e      	b.n	8001fe6 <HAL_TIM_Encoder_MspInit+0x10a>
  else if(tim_encoderHandle->Instance==TIM4)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x124>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d129      	bne.n	8001fe6 <HAL_TIM_Encoder_MspInit+0x10a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f92:	4b18      	ldr	r3, [pc, #96]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x118>)
 8001f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f96:	4a17      	ldr	r2, [pc, #92]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x118>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x118>)
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	4b12      	ldr	r3, [pc, #72]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x118>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fae:	4a11      	ldr	r2, [pc, #68]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x118>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff4 <HAL_TIM_Encoder_MspInit+0x118>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PHASEB1_Pin|PHASEA1_Pin;
 8001fc2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001fd4:	230a      	movs	r3, #10
 8001fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd8:	f107 031c 	add.w	r3, r7, #28
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fe2:	f001 fb53 	bl	800368c <HAL_GPIO_Init>
}
 8001fe6:	bf00      	nop
 8001fe8:	3730      	adds	r7, #48	@ 0x30
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40000400 	.word	0x40000400
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	48000800 	.word	0x48000800
 8001ffc:	48000400 	.word	0x48000400
 8002000:	40000800 	.word	0x40000800

08002004 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0a      	ldr	r2, [pc, #40]	@ (800203c <HAL_TIM_Base_MspInit+0x38>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d10b      	bne.n	800202e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002016:	4b0a      	ldr	r3, [pc, #40]	@ (8002040 <HAL_TIM_Base_MspInit+0x3c>)
 8002018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800201a:	4a09      	ldr	r2, [pc, #36]	@ (8002040 <HAL_TIM_Base_MspInit+0x3c>)
 800201c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002020:	6613      	str	r3, [r2, #96]	@ 0x60
 8002022:	4b07      	ldr	r3, [pc, #28]	@ (8002040 <HAL_TIM_Base_MspInit+0x3c>)
 8002024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40014400 	.word	0x40014400
 8002040:	40021000 	.word	0x40021000

08002044 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	@ 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a32      	ldr	r2, [pc, #200]	@ (800212c <HAL_TIM_MspPostInit+0xe8>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d13b      	bne.n	80020de <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002066:	4b32      	ldr	r3, [pc, #200]	@ (8002130 <HAL_TIM_MspPostInit+0xec>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206a:	4a31      	ldr	r2, [pc, #196]	@ (8002130 <HAL_TIM_MspPostInit+0xec>)
 800206c:	f043 0302 	orr.w	r3, r3, #2
 8002070:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002072:	4b2f      	ldr	r3, [pc, #188]	@ (8002130 <HAL_TIM_MspPostInit+0xec>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207e:	4b2c      	ldr	r3, [pc, #176]	@ (8002130 <HAL_TIM_MspPostInit+0xec>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002082:	4a2b      	ldr	r2, [pc, #172]	@ (8002130 <HAL_TIM_MspPostInit+0xec>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800208a:	4b29      	ldr	r3, [pc, #164]	@ (8002130 <HAL_TIM_MspPostInit+0xec>)
 800208c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|REV1_Pin;
 8002096:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800209a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80020a8:	2306      	movs	r3, #6
 80020aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	4619      	mov	r1, r3
 80020b2:	4820      	ldr	r0, [pc, #128]	@ (8002134 <HAL_TIM_MspPostInit+0xf0>)
 80020b4:	f001 faea 	bl	800368c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|FWD1_Pin;
 80020b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80020ca:	2306      	movs	r3, #6
 80020cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	4619      	mov	r1, r3
 80020d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020d8:	f001 fad8 	bl	800368c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80020dc:	e021      	b.n	8002122 <HAL_TIM_MspPostInit+0xde>
  else if(timHandle->Instance==TIM16)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a15      	ldr	r2, [pc, #84]	@ (8002138 <HAL_TIM_MspPostInit+0xf4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d11c      	bne.n	8002122 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e8:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <HAL_TIM_MspPostInit+0xec>)
 80020ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ec:	4a10      	ldr	r2, [pc, #64]	@ (8002130 <HAL_TIM_MspPostInit+0xec>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002130 <HAL_TIM_MspPostInit+0xec>)
 80020f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M_SCTR_LIDAR_Pin;
 8002100:	2340      	movs	r3, #64	@ 0x40
 8002102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210c:	2300      	movs	r3, #0
 800210e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002110:	2301      	movs	r3, #1
 8002112:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	4619      	mov	r1, r3
 800211a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800211e:	f001 fab5 	bl	800368c <HAL_GPIO_Init>
}
 8002122:	bf00      	nop
 8002124:	3728      	adds	r7, #40	@ 0x28
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40012c00 	.word	0x40012c00
 8002130:	40021000 	.word	0x40021000
 8002134:	48000400 	.word	0x48000400
 8002138:	40014400 	.word	0x40014400

0800213c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002140:	4b22      	ldr	r3, [pc, #136]	@ (80021cc <MX_UART4_Init+0x90>)
 8002142:	4a23      	ldr	r2, [pc, #140]	@ (80021d0 <MX_UART4_Init+0x94>)
 8002144:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002146:	4b21      	ldr	r3, [pc, #132]	@ (80021cc <MX_UART4_Init+0x90>)
 8002148:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800214c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800214e:	4b1f      	ldr	r3, [pc, #124]	@ (80021cc <MX_UART4_Init+0x90>)
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002154:	4b1d      	ldr	r3, [pc, #116]	@ (80021cc <MX_UART4_Init+0x90>)
 8002156:	2200      	movs	r2, #0
 8002158:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800215a:	4b1c      	ldr	r3, [pc, #112]	@ (80021cc <MX_UART4_Init+0x90>)
 800215c:	2200      	movs	r2, #0
 800215e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002160:	4b1a      	ldr	r3, [pc, #104]	@ (80021cc <MX_UART4_Init+0x90>)
 8002162:	220c      	movs	r2, #12
 8002164:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002166:	4b19      	ldr	r3, [pc, #100]	@ (80021cc <MX_UART4_Init+0x90>)
 8002168:	2200      	movs	r2, #0
 800216a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800216c:	4b17      	ldr	r3, [pc, #92]	@ (80021cc <MX_UART4_Init+0x90>)
 800216e:	2200      	movs	r2, #0
 8002170:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002172:	4b16      	ldr	r3, [pc, #88]	@ (80021cc <MX_UART4_Init+0x90>)
 8002174:	2200      	movs	r2, #0
 8002176:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002178:	4b14      	ldr	r3, [pc, #80]	@ (80021cc <MX_UART4_Init+0x90>)
 800217a:	2200      	movs	r2, #0
 800217c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800217e:	4b13      	ldr	r3, [pc, #76]	@ (80021cc <MX_UART4_Init+0x90>)
 8002180:	2200      	movs	r2, #0
 8002182:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002184:	4811      	ldr	r0, [pc, #68]	@ (80021cc <MX_UART4_Init+0x90>)
 8002186:	f004 fd16 	bl	8006bb6 <HAL_UART_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002190:	f7ff fb12 	bl	80017b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002194:	2100      	movs	r1, #0
 8002196:	480d      	ldr	r0, [pc, #52]	@ (80021cc <MX_UART4_Init+0x90>)
 8002198:	f005 fb10 	bl	80077bc <HAL_UARTEx_SetTxFifoThreshold>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80021a2:	f7ff fb09 	bl	80017b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021a6:	2100      	movs	r1, #0
 80021a8:	4808      	ldr	r0, [pc, #32]	@ (80021cc <MX_UART4_Init+0x90>)
 80021aa:	f005 fb45 	bl	8007838 <HAL_UARTEx_SetRxFifoThreshold>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80021b4:	f7ff fb00 	bl	80017b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80021b8:	4804      	ldr	r0, [pc, #16]	@ (80021cc <MX_UART4_Init+0x90>)
 80021ba:	f005 fac6 	bl	800774a <HAL_UARTEx_DisableFifoMode>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80021c4:	f7ff faf8 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000454 	.word	0x20000454
 80021d0:	40004c00 	.word	0x40004c00

080021d4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021d8:	4b22      	ldr	r3, [pc, #136]	@ (8002264 <MX_USART3_UART_Init+0x90>)
 80021da:	4a23      	ldr	r2, [pc, #140]	@ (8002268 <MX_USART3_UART_Init+0x94>)
 80021dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021de:	4b21      	ldr	r3, [pc, #132]	@ (8002264 <MX_USART3_UART_Init+0x90>)
 80021e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002264 <MX_USART3_UART_Init+0x90>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002264 <MX_USART3_UART_Init+0x90>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002264 <MX_USART3_UART_Init+0x90>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002264 <MX_USART3_UART_Init+0x90>)
 80021fa:	220c      	movs	r2, #12
 80021fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021fe:	4b19      	ldr	r3, [pc, #100]	@ (8002264 <MX_USART3_UART_Init+0x90>)
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002204:	4b17      	ldr	r3, [pc, #92]	@ (8002264 <MX_USART3_UART_Init+0x90>)
 8002206:	2200      	movs	r2, #0
 8002208:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800220a:	4b16      	ldr	r3, [pc, #88]	@ (8002264 <MX_USART3_UART_Init+0x90>)
 800220c:	2200      	movs	r2, #0
 800220e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002210:	4b14      	ldr	r3, [pc, #80]	@ (8002264 <MX_USART3_UART_Init+0x90>)
 8002212:	2200      	movs	r2, #0
 8002214:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002216:	4b13      	ldr	r3, [pc, #76]	@ (8002264 <MX_USART3_UART_Init+0x90>)
 8002218:	2200      	movs	r2, #0
 800221a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800221c:	4811      	ldr	r0, [pc, #68]	@ (8002264 <MX_USART3_UART_Init+0x90>)
 800221e:	f004 fcca 	bl	8006bb6 <HAL_UART_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002228:	f7ff fac6 	bl	80017b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800222c:	2100      	movs	r1, #0
 800222e:	480d      	ldr	r0, [pc, #52]	@ (8002264 <MX_USART3_UART_Init+0x90>)
 8002230:	f005 fac4 	bl	80077bc <HAL_UARTEx_SetTxFifoThreshold>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800223a:	f7ff fabd 	bl	80017b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800223e:	2100      	movs	r1, #0
 8002240:	4808      	ldr	r0, [pc, #32]	@ (8002264 <MX_USART3_UART_Init+0x90>)
 8002242:	f005 faf9 	bl	8007838 <HAL_UARTEx_SetRxFifoThreshold>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800224c:	f7ff fab4 	bl	80017b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002250:	4804      	ldr	r0, [pc, #16]	@ (8002264 <MX_USART3_UART_Init+0x90>)
 8002252:	f005 fa7a 	bl	800774a <HAL_UARTEx_DisableFifoMode>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800225c:	f7ff faac 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}
 8002264:	200004e8 	.word	0x200004e8
 8002268:	40004800 	.word	0x40004800

0800226c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b09c      	sub	sp, #112	@ 0x70
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002284:	f107 0318 	add.w	r3, r7, #24
 8002288:	2244      	movs	r2, #68	@ 0x44
 800228a:	2100      	movs	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f006 f9e1 	bl	8008654 <memset>
  if(uartHandle->Instance==UART4)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a3d      	ldr	r2, [pc, #244]	@ (800238c <HAL_UART_MspInit+0x120>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d137      	bne.n	800230c <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800229c:	2308      	movs	r3, #8
 800229e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80022a0:	2300      	movs	r3, #0
 80022a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022a4:	f107 0318 	add.w	r3, r7, #24
 80022a8:	4618      	mov	r0, r3
 80022aa:	f002 ffd7 	bl	800525c <HAL_RCCEx_PeriphCLKConfig>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022b4:	f7ff fa80 	bl	80017b8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022b8:	4b35      	ldr	r3, [pc, #212]	@ (8002390 <HAL_UART_MspInit+0x124>)
 80022ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022bc:	4a34      	ldr	r2, [pc, #208]	@ (8002390 <HAL_UART_MspInit+0x124>)
 80022be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80022c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80022c4:	4b32      	ldr	r3, [pc, #200]	@ (8002390 <HAL_UART_MspInit+0x124>)
 80022c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002390 <HAL_UART_MspInit+0x124>)
 80022d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d4:	4a2e      	ldr	r2, [pc, #184]	@ (8002390 <HAL_UART_MspInit+0x124>)
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002390 <HAL_UART_MspInit+0x124>)
 80022de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_SWD_Pin|RX_SWD_Pin;
 80022e8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80022ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2300      	movs	r3, #0
 80022f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80022fa:	2305      	movs	r3, #5
 80022fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022fe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002302:	4619      	mov	r1, r3
 8002304:	4823      	ldr	r0, [pc, #140]	@ (8002394 <HAL_UART_MspInit+0x128>)
 8002306:	f001 f9c1 	bl	800368c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800230a:	e03b      	b.n	8002384 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a21      	ldr	r2, [pc, #132]	@ (8002398 <HAL_UART_MspInit+0x12c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d136      	bne.n	8002384 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002316:	2304      	movs	r3, #4
 8002318:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800231e:	f107 0318 	add.w	r3, r7, #24
 8002322:	4618      	mov	r0, r3
 8002324:	f002 ff9a 	bl	800525c <HAL_RCCEx_PeriphCLKConfig>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800232e:	f7ff fa43 	bl	80017b8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002332:	4b17      	ldr	r3, [pc, #92]	@ (8002390 <HAL_UART_MspInit+0x124>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002336:	4a16      	ldr	r2, [pc, #88]	@ (8002390 <HAL_UART_MspInit+0x124>)
 8002338:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800233c:	6593      	str	r3, [r2, #88]	@ 0x58
 800233e:	4b14      	ldr	r3, [pc, #80]	@ (8002390 <HAL_UART_MspInit+0x124>)
 8002340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002342:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800234a:	4b11      	ldr	r3, [pc, #68]	@ (8002390 <HAL_UART_MspInit+0x124>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234e:	4a10      	ldr	r2, [pc, #64]	@ (8002390 <HAL_UART_MspInit+0x124>)
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002356:	4b0e      	ldr	r3, [pc, #56]	@ (8002390 <HAL_UART_MspInit+0x124>)
 8002358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LIDAR_RX_Pin|LIDAR_TX_Pin;
 8002362:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002366:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	2302      	movs	r3, #2
 800236a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002374:	2307      	movs	r3, #7
 8002376:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002378:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800237c:	4619      	mov	r1, r3
 800237e:	4807      	ldr	r0, [pc, #28]	@ (800239c <HAL_UART_MspInit+0x130>)
 8002380:	f001 f984 	bl	800368c <HAL_GPIO_Init>
}
 8002384:	bf00      	nop
 8002386:	3770      	adds	r7, #112	@ 0x70
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40004c00 	.word	0x40004c00
 8002390:	40021000 	.word	0x40021000
 8002394:	48000800 	.word	0x48000800
 8002398:	40004800 	.word	0x40004800
 800239c:	48000400 	.word	0x48000400

080023a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023a0:	480d      	ldr	r0, [pc, #52]	@ (80023d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023a2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80023a4:	f7ff fb9e 	bl	8001ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023a8:	480c      	ldr	r0, [pc, #48]	@ (80023dc <LoopForever+0x6>)
  ldr r1, =_edata
 80023aa:	490d      	ldr	r1, [pc, #52]	@ (80023e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023ac:	4a0d      	ldr	r2, [pc, #52]	@ (80023e4 <LoopForever+0xe>)
  movs r3, #0
 80023ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80023b0:	e002      	b.n	80023b8 <LoopCopyDataInit>

080023b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023b6:	3304      	adds	r3, #4

080023b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023bc:	d3f9      	bcc.n	80023b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023be:	4a0a      	ldr	r2, [pc, #40]	@ (80023e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023c0:	4c0a      	ldr	r4, [pc, #40]	@ (80023ec <LoopForever+0x16>)
  movs r3, #0
 80023c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023c4:	e001      	b.n	80023ca <LoopFillZerobss>

080023c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023c8:	3204      	adds	r2, #4

080023ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023cc:	d3fb      	bcc.n	80023c6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80023ce:	f006 f999 	bl	8008704 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023d2:	f7ff f8ff 	bl	80015d4 <main>

080023d6 <LoopForever>:

LoopForever:
    b LoopForever
 80023d6:	e7fe      	b.n	80023d6 <LoopForever>
  ldr   r0, =_estack
 80023d8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80023dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023e0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80023e4:	0800ab28 	.word	0x0800ab28
  ldr r2, =_sbss
 80023e8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80023ec:	200006cc 	.word	0x200006cc

080023f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023f0:	e7fe      	b.n	80023f0 <ADC1_2_IRQHandler>

080023f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023fc:	2003      	movs	r0, #3
 80023fe:	f001 f912 	bl	8003626 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002402:	200f      	movs	r0, #15
 8002404:	f7ff fa02 	bl	800180c <HAL_InitTick>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	71fb      	strb	r3, [r7, #7]
 8002412:	e001      	b.n	8002418 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002414:	f7ff f9d6 	bl	80017c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002418:	79fb      	ldrb	r3, [r7, #7]

}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002428:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <HAL_IncTick+0x1c>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4b05      	ldr	r3, [pc, #20]	@ (8002444 <HAL_IncTick+0x20>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4413      	add	r3, r2
 8002432:	4a03      	ldr	r2, [pc, #12]	@ (8002440 <HAL_IncTick+0x1c>)
 8002434:	6013      	str	r3, [r2, #0]
}
 8002436:	bf00      	nop
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	2000057c 	.word	0x2000057c
 8002444:	20000008 	.word	0x20000008

08002448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return uwTick;
 800244c:	4b03      	ldr	r3, [pc, #12]	@ (800245c <HAL_GetTick+0x14>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	2000057c 	.word	0x2000057c

08002460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002468:	f7ff ffee 	bl	8002448 <HAL_GetTick>
 800246c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d004      	beq.n	8002484 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800247a:	4b09      	ldr	r3, [pc, #36]	@ (80024a0 <HAL_Delay+0x40>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4413      	add	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002484:	bf00      	nop
 8002486:	f7ff ffdf 	bl	8002448 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	429a      	cmp	r2, r3
 8002494:	d8f7      	bhi.n	8002486 <HAL_Delay+0x26>
  {
  }
}
 8002496:	bf00      	nop
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000008 	.word	0x20000008

080024a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	609a      	str	r2, [r3, #8]
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	609a      	str	r2, [r3, #8]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3360      	adds	r3, #96	@ 0x60
 800251e:	461a      	mov	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b08      	ldr	r3, [pc, #32]	@ (8002550 <LL_ADC_SetOffset+0x44>)
 800252e:	4013      	ands	r3, r2
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	4313      	orrs	r3, r2
 800253c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002544:	bf00      	nop
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	03fff000 	.word	0x03fff000

08002554 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3360      	adds	r3, #96	@ 0x60
 8002562:	461a      	mov	r2, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002574:	4618      	mov	r0, r3
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002580:	b480      	push	{r7}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	3360      	adds	r3, #96	@ 0x60
 8002590:	461a      	mov	r2, r3
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	431a      	orrs	r2, r3
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025aa:	bf00      	nop
 80025ac:	371c      	adds	r7, #28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b087      	sub	sp, #28
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	3360      	adds	r3, #96	@ 0x60
 80025c6:	461a      	mov	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	431a      	orrs	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80025e0:	bf00      	nop
 80025e2:	371c      	adds	r7, #28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	3360      	adds	r3, #96	@ 0x60
 80025fc:	461a      	mov	r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	431a      	orrs	r2, r3
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002616:	bf00      	nop
 8002618:	371c      	adds	r7, #28
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	615a      	str	r2, [r3, #20]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3330      	adds	r3, #48	@ 0x30
 8002658:	461a      	mov	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	f003 030c 	and.w	r3, r3, #12
 8002664:	4413      	add	r3, r2
 8002666:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f003 031f 	and.w	r3, r3, #31
 8002672:	211f      	movs	r1, #31
 8002674:	fa01 f303 	lsl.w	r3, r1, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	401a      	ands	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	0e9b      	lsrs	r3, r3, #26
 8002680:	f003 011f 	and.w	r1, r3, #31
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	431a      	orrs	r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002694:	bf00      	nop
 8002696:	371c      	adds	r7, #28
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	3314      	adds	r3, #20
 80026b0:	461a      	mov	r2, r3
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	0e5b      	lsrs	r3, r3, #25
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	4413      	add	r3, r2
 80026be:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	0d1b      	lsrs	r3, r3, #20
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	2107      	movs	r1, #7
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	401a      	ands	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	0d1b      	lsrs	r3, r3, #20
 80026da:	f003 031f 	and.w	r3, r3, #31
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	fa01 f303 	lsl.w	r3, r1, r3
 80026e4:	431a      	orrs	r2, r3
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026ea:	bf00      	nop
 80026ec:	371c      	adds	r7, #28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002710:	43db      	mvns	r3, r3
 8002712:	401a      	ands	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f003 0318 	and.w	r3, r3, #24
 800271a:	4908      	ldr	r1, [pc, #32]	@ (800273c <LL_ADC_SetChannelSingleDiff+0x44>)
 800271c:	40d9      	lsrs	r1, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	400b      	ands	r3, r1
 8002722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002726:	431a      	orrs	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800272e:	bf00      	nop
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	0007ffff 	.word	0x0007ffff

08002740 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002750:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6093      	str	r3, [r2, #8]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002774:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002778:	d101      	bne.n	800277e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800279c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027a0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027c8:	d101      	bne.n	80027ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <LL_ADC_IsEnabled+0x18>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <LL_ADC_IsEnabled+0x1a>
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b04      	cmp	r3, #4
 8002814:	d101      	bne.n	800281a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b08      	cmp	r3, #8
 800283a:	d101      	bne.n	8002840 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002850:	b590      	push	{r4, r7, lr}
 8002852:	b089      	sub	sp, #36	@ 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e167      	b.n	8002b3a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002874:	2b00      	cmp	r3, #0
 8002876:	d109      	bne.n	800288c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7fe fbfd 	bl	8001078 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff ff67 	bl	8002764 <LL_ADC_IsDeepPowerDownEnabled>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d004      	beq.n	80028a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff4d 	bl	8002740 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff ff82 	bl	80027b4 <LL_ADC_IsInternalRegulatorEnabled>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d115      	bne.n	80028e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff ff66 	bl	800278c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028c0:	4ba0      	ldr	r3, [pc, #640]	@ (8002b44 <HAL_ADC_Init+0x2f4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	099b      	lsrs	r3, r3, #6
 80028c6:	4aa0      	ldr	r2, [pc, #640]	@ (8002b48 <HAL_ADC_Init+0x2f8>)
 80028c8:	fba2 2303 	umull	r2, r3, r2, r3
 80028cc:	099b      	lsrs	r3, r3, #6
 80028ce:	3301      	adds	r3, #1
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028d4:	e002      	b.n	80028dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3b01      	subs	r3, #1
 80028da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f9      	bne.n	80028d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff ff64 	bl	80027b4 <LL_ADC_IsInternalRegulatorEnabled>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10d      	bne.n	800290e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f6:	f043 0210 	orr.w	r2, r3, #16
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002902:	f043 0201 	orr.w	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff ff75 	bl	8002802 <LL_ADC_REG_IsConversionOngoing>
 8002918:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	2b00      	cmp	r3, #0
 8002924:	f040 8100 	bne.w	8002b28 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2b00      	cmp	r3, #0
 800292c:	f040 80fc 	bne.w	8002b28 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002934:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002938:	f043 0202 	orr.w	r2, r3, #2
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ff49 	bl	80027dc <LL_ADC_IsEnabled>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d111      	bne.n	8002974 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002950:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002954:	f7ff ff42 	bl	80027dc <LL_ADC_IsEnabled>
 8002958:	4604      	mov	r4, r0
 800295a:	487c      	ldr	r0, [pc, #496]	@ (8002b4c <HAL_ADC_Init+0x2fc>)
 800295c:	f7ff ff3e 	bl	80027dc <LL_ADC_IsEnabled>
 8002960:	4603      	mov	r3, r0
 8002962:	4323      	orrs	r3, r4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4619      	mov	r1, r3
 800296e:	4878      	ldr	r0, [pc, #480]	@ (8002b50 <HAL_ADC_Init+0x300>)
 8002970:	f7ff fd98 	bl	80024a4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	7f5b      	ldrb	r3, [r3, #29]
 8002978:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800297e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002984:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800298a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002992:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002994:	4313      	orrs	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d106      	bne.n	80029b0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a6:	3b01      	subs	r3, #1
 80029a8:	045b      	lsls	r3, r3, #17
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d009      	beq.n	80029cc <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029bc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	4b60      	ldr	r3, [pc, #384]	@ (8002b54 <HAL_ADC_Init+0x304>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6812      	ldr	r2, [r2, #0]
 80029da:	69b9      	ldr	r1, [r7, #24]
 80029dc:	430b      	orrs	r3, r1
 80029de:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff ff14 	bl	8002828 <LL_ADC_INJ_IsConversionOngoing>
 8002a00:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d16d      	bne.n	8002ae4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d16a      	bne.n	8002ae4 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a12:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a1a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a2a:	f023 0302 	bic.w	r3, r3, #2
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6812      	ldr	r2, [r2, #0]
 8002a32:	69b9      	ldr	r1, [r7, #24]
 8002a34:	430b      	orrs	r3, r1
 8002a36:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d017      	beq.n	8002a70 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002a4e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a58:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6911      	ldr	r1, [r2, #16]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002a6e:	e013      	b.n	8002a98 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002a7e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a94:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d118      	bne.n	8002ad4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002aac:	f023 0304 	bic.w	r3, r3, #4
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ab8:	4311      	orrs	r1, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002abe:	4311      	orrs	r1, r2
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 0201 	orr.w	r2, r2, #1
 8002ad0:	611a      	str	r2, [r3, #16]
 8002ad2:	e007      	b.n	8002ae4 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691a      	ldr	r2, [r3, #16]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0201 	bic.w	r2, r2, #1
 8002ae2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d10c      	bne.n	8002b06 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af2:	f023 010f 	bic.w	r1, r3, #15
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	1e5a      	subs	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b04:	e007      	b.n	8002b16 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 020f 	bic.w	r2, r2, #15
 8002b14:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1a:	f023 0303 	bic.w	r3, r3, #3
 8002b1e:	f043 0201 	orr.w	r2, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b26:	e007      	b.n	8002b38 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2c:	f043 0210 	orr.w	r2, r3, #16
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b38:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3724      	adds	r7, #36	@ 0x24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd90      	pop	{r4, r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000000 	.word	0x20000000
 8002b48:	053e2d63 	.word	0x053e2d63
 8002b4c:	50000100 	.word	0x50000100
 8002b50:	50000300 	.word	0x50000300
 8002b54:	fff04007 	.word	0xfff04007

08002b58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b0b6      	sub	sp, #216	@ 0xd8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x22>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e3c8      	b.n	800330c <HAL_ADC_ConfigChannel+0x7b4>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fe3b 	bl	8002802 <LL_ADC_REG_IsConversionOngoing>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f040 83ad 	bne.w	80032ee <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	6859      	ldr	r1, [r3, #4]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	f7ff fd51 	bl	8002648 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fe29 	bl	8002802 <LL_ADC_REG_IsConversionOngoing>
 8002bb0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fe35 	bl	8002828 <LL_ADC_INJ_IsConversionOngoing>
 8002bbe:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bc2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f040 81d9 	bne.w	8002f7e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f040 81d4 	bne.w	8002f7e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002bde:	d10f      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2200      	movs	r2, #0
 8002bea:	4619      	mov	r1, r3
 8002bec:	f7ff fd58 	bl	80026a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fd12 	bl	8002622 <LL_ADC_SetSamplingTimeCommonConfig>
 8002bfe:	e00e      	b.n	8002c1e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	6819      	ldr	r1, [r3, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	f7ff fd47 	bl	80026a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2100      	movs	r1, #0
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fd02 	bl	8002622 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	08db      	lsrs	r3, r3, #3
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d022      	beq.n	8002c86 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6919      	ldr	r1, [r3, #16]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c50:	f7ff fc5c 	bl	800250c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	6919      	ldr	r1, [r3, #16]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	461a      	mov	r2, r3
 8002c62:	f7ff fca8 	bl	80025b6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6818      	ldr	r0, [r3, #0]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d102      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x124>
 8002c76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c7a:	e000      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x126>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f7ff fcb4 	bl	80025ec <LL_ADC_SetOffsetSaturation>
 8002c84:	e17b      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fc61 	bl	8002554 <LL_ADC_GetOffsetChannel>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10a      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x15a>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fc56 	bl	8002554 <LL_ADC_GetOffsetChannel>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	0e9b      	lsrs	r3, r3, #26
 8002cac:	f003 021f 	and.w	r2, r3, #31
 8002cb0:	e01e      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x198>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fc4b 	bl	8002554 <LL_ADC_GetOffsetChannel>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	e004      	b.n	8002cee <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002ce4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ce8:	fab3 f383 	clz	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d105      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x1b0>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	0e9b      	lsrs	r3, r3, #26
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	e018      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x1e2>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002d1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002d24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002d2c:	2320      	movs	r3, #32
 8002d2e:	e004      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002d30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d106      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2200      	movs	r2, #0
 8002d44:	2100      	movs	r1, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fc1a 	bl	8002580 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2101      	movs	r1, #1
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fbfe 	bl	8002554 <LL_ADC_GetOffsetChannel>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10a      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x220>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2101      	movs	r1, #1
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff fbf3 	bl	8002554 <LL_ADC_GetOffsetChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	0e9b      	lsrs	r3, r3, #26
 8002d72:	f003 021f 	and.w	r2, r3, #31
 8002d76:	e01e      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x25e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fbe8 	bl	8002554 <LL_ADC_GetOffsetChannel>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002d96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002d9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002da6:	2320      	movs	r3, #32
 8002da8:	e004      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002daa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d105      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x276>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	0e9b      	lsrs	r3, r3, #26
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	e018      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x2a8>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002dda:	fa93 f3a3 	rbit	r3, r3
 8002dde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002de2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002de6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002dea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002df2:	2320      	movs	r3, #32
 8002df4:	e004      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002df6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d106      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fbb7 	bl	8002580 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2102      	movs	r1, #2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fb9b 	bl	8002554 <LL_ADC_GetOffsetChannel>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10a      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x2e6>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2102      	movs	r1, #2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fb90 	bl	8002554 <LL_ADC_GetOffsetChannel>
 8002e34:	4603      	mov	r3, r0
 8002e36:	0e9b      	lsrs	r3, r3, #26
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	e01e      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x324>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2102      	movs	r1, #2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fb85 	bl	8002554 <LL_ADC_GetOffsetChannel>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002e5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002e64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002e6c:	2320      	movs	r3, #32
 8002e6e:	e004      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002e70:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e74:	fab3 f383 	clz	r3, r3
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d105      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x33c>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	0e9b      	lsrs	r3, r3, #26
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	e016      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x36a>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002ea6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002eb4:	2320      	movs	r3, #32
 8002eb6:	e004      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ebc:	fab3 f383 	clz	r3, r3
 8002ec0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d106      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2102      	movs	r1, #2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fb56 	bl	8002580 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2103      	movs	r1, #3
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff fb3a 	bl	8002554 <LL_ADC_GetOffsetChannel>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10a      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x3a8>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2103      	movs	r1, #3
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff fb2f 	bl	8002554 <LL_ADC_GetOffsetChannel>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	0e9b      	lsrs	r3, r3, #26
 8002efa:	f003 021f 	and.w	r2, r3, #31
 8002efe:	e017      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x3d8>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2103      	movs	r1, #3
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fb24 	bl	8002554 <LL_ADC_GetOffsetChannel>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002f18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f1a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002f1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002f22:	2320      	movs	r3, #32
 8002f24:	e003      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002f26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f28:	fab3 f383 	clz	r3, r3
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d105      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x3f0>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	0e9b      	lsrs	r3, r3, #26
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	e011      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x414>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f50:	fa93 f3a3 	rbit	r3, r3
 8002f54:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002f56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f58:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002f5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002f60:	2320      	movs	r3, #32
 8002f62:	e003      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002f64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d106      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2200      	movs	r2, #0
 8002f76:	2103      	movs	r1, #3
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff fb01 	bl	8002580 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fc2a 	bl	80027dc <LL_ADC_IsEnabled>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f040 8140 	bne.w	8003210 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6818      	ldr	r0, [r3, #0]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	6819      	ldr	r1, [r3, #0]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	f7ff fbab 	bl	80026f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	4a8f      	ldr	r2, [pc, #572]	@ (80031e4 <HAL_ADC_ConfigChannel+0x68c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	f040 8131 	bne.w	8003210 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x47e>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	0e9b      	lsrs	r3, r3, #26
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	2b09      	cmp	r3, #9
 8002fcc:	bf94      	ite	ls
 8002fce:	2301      	movls	r3, #1
 8002fd0:	2300      	movhi	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	e019      	b.n	800300a <HAL_ADC_ConfigChannel+0x4b2>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002fe4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fe6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002fe8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002fee:	2320      	movs	r3, #32
 8002ff0:	e003      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002ff2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ff4:	fab3 f383 	clz	r3, r3
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2b09      	cmp	r3, #9
 8003002:	bf94      	ite	ls
 8003004:	2301      	movls	r3, #1
 8003006:	2300      	movhi	r3, #0
 8003008:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800300a:	2b00      	cmp	r3, #0
 800300c:	d079      	beq.n	8003102 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003016:	2b00      	cmp	r3, #0
 8003018:	d107      	bne.n	800302a <HAL_ADC_ConfigChannel+0x4d2>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	0e9b      	lsrs	r3, r3, #26
 8003020:	3301      	adds	r3, #1
 8003022:	069b      	lsls	r3, r3, #26
 8003024:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003028:	e015      	b.n	8003056 <HAL_ADC_ConfigChannel+0x4fe>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003030:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003032:	fa93 f3a3 	rbit	r3, r3
 8003036:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800303a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800303c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003042:	2320      	movs	r3, #32
 8003044:	e003      	b.n	800304e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	3301      	adds	r3, #1
 8003050:	069b      	lsls	r3, r3, #26
 8003052:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305e:	2b00      	cmp	r3, #0
 8003060:	d109      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x51e>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	0e9b      	lsrs	r3, r3, #26
 8003068:	3301      	adds	r3, #1
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	2101      	movs	r1, #1
 8003070:	fa01 f303 	lsl.w	r3, r1, r3
 8003074:	e017      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x54e>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800307e:	fa93 f3a3 	rbit	r3, r3
 8003082:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003086:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003088:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800308e:	2320      	movs	r3, #32
 8003090:	e003      	b.n	800309a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003094:	fab3 f383 	clz	r3, r3
 8003098:	b2db      	uxtb	r3, r3
 800309a:	3301      	adds	r3, #1
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	2101      	movs	r1, #1
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	ea42 0103 	orr.w	r1, r2, r3
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10a      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x574>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	0e9b      	lsrs	r3, r3, #26
 80030bc:	3301      	adds	r3, #1
 80030be:	f003 021f 	and.w	r2, r3, #31
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	051b      	lsls	r3, r3, #20
 80030ca:	e018      	b.n	80030fe <HAL_ADC_ConfigChannel+0x5a6>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80030da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80030de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80030e4:	2320      	movs	r3, #32
 80030e6:	e003      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80030e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ea:	fab3 f383 	clz	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	3301      	adds	r3, #1
 80030f2:	f003 021f 	and.w	r2, r3, #31
 80030f6:	4613      	mov	r3, r2
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4413      	add	r3, r2
 80030fc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030fe:	430b      	orrs	r3, r1
 8003100:	e081      	b.n	8003206 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800310a:	2b00      	cmp	r3, #0
 800310c:	d107      	bne.n	800311e <HAL_ADC_ConfigChannel+0x5c6>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	0e9b      	lsrs	r3, r3, #26
 8003114:	3301      	adds	r3, #1
 8003116:	069b      	lsls	r3, r3, #26
 8003118:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800311c:	e015      	b.n	800314a <HAL_ADC_ConfigChannel+0x5f2>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003126:	fa93 f3a3 	rbit	r3, r3
 800312a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800312c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003136:	2320      	movs	r3, #32
 8003138:	e003      	b.n	8003142 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800313a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313c:	fab3 f383 	clz	r3, r3
 8003140:	b2db      	uxtb	r3, r3
 8003142:	3301      	adds	r3, #1
 8003144:	069b      	lsls	r3, r3, #26
 8003146:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_ADC_ConfigChannel+0x612>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	0e9b      	lsrs	r3, r3, #26
 800315c:	3301      	adds	r3, #1
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	2101      	movs	r1, #1
 8003164:	fa01 f303 	lsl.w	r3, r1, r3
 8003168:	e017      	b.n	800319a <HAL_ADC_ConfigChannel+0x642>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	fa93 f3a3 	rbit	r3, r3
 8003176:	61fb      	str	r3, [r7, #28]
  return result;
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003182:	2320      	movs	r3, #32
 8003184:	e003      	b.n	800318e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	fab3 f383 	clz	r3, r3
 800318c:	b2db      	uxtb	r3, r3
 800318e:	3301      	adds	r3, #1
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	2101      	movs	r1, #1
 8003196:	fa01 f303 	lsl.w	r3, r1, r3
 800319a:	ea42 0103 	orr.w	r1, r2, r3
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10d      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x66e>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	0e9b      	lsrs	r3, r3, #26
 80031b0:	3301      	adds	r3, #1
 80031b2:	f003 021f 	and.w	r2, r3, #31
 80031b6:	4613      	mov	r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4413      	add	r3, r2
 80031bc:	3b1e      	subs	r3, #30
 80031be:	051b      	lsls	r3, r3, #20
 80031c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031c4:	e01e      	b.n	8003204 <HAL_ADC_ConfigChannel+0x6ac>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	613b      	str	r3, [r7, #16]
  return result;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d104      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80031de:	2320      	movs	r3, #32
 80031e0:	e006      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x698>
 80031e2:	bf00      	nop
 80031e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	fab3 f383 	clz	r3, r3
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	3301      	adds	r3, #1
 80031f2:	f003 021f 	and.w	r2, r3, #31
 80031f6:	4613      	mov	r3, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4413      	add	r3, r2
 80031fc:	3b1e      	subs	r3, #30
 80031fe:	051b      	lsls	r3, r3, #20
 8003200:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003204:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800320a:	4619      	mov	r1, r3
 800320c:	f7ff fa48 	bl	80026a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4b3f      	ldr	r3, [pc, #252]	@ (8003314 <HAL_ADC_ConfigChannel+0x7bc>)
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d071      	beq.n	8003300 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800321c:	483e      	ldr	r0, [pc, #248]	@ (8003318 <HAL_ADC_ConfigChannel+0x7c0>)
 800321e:	f7ff f967 	bl	80024f0 <LL_ADC_GetCommonPathInternalCh>
 8003222:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a3c      	ldr	r2, [pc, #240]	@ (800331c <HAL_ADC_ConfigChannel+0x7c4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d004      	beq.n	800323a <HAL_ADC_ConfigChannel+0x6e2>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a3a      	ldr	r2, [pc, #232]	@ (8003320 <HAL_ADC_ConfigChannel+0x7c8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d127      	bne.n	800328a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800323a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800323e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d121      	bne.n	800328a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800324e:	d157      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003250:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003254:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003258:	4619      	mov	r1, r3
 800325a:	482f      	ldr	r0, [pc, #188]	@ (8003318 <HAL_ADC_ConfigChannel+0x7c0>)
 800325c:	f7ff f935 	bl	80024ca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003260:	4b30      	ldr	r3, [pc, #192]	@ (8003324 <HAL_ADC_ConfigChannel+0x7cc>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	099b      	lsrs	r3, r3, #6
 8003266:	4a30      	ldr	r2, [pc, #192]	@ (8003328 <HAL_ADC_ConfigChannel+0x7d0>)
 8003268:	fba2 2303 	umull	r2, r3, r2, r3
 800326c:	099b      	lsrs	r3, r3, #6
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	4613      	mov	r3, r2
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800327a:	e002      	b.n	8003282 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3b01      	subs	r3, #1
 8003280:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f9      	bne.n	800327c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003288:	e03a      	b.n	8003300 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a27      	ldr	r2, [pc, #156]	@ (800332c <HAL_ADC_ConfigChannel+0x7d4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d113      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003294:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003298:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10d      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a22      	ldr	r2, [pc, #136]	@ (8003330 <HAL_ADC_ConfigChannel+0x7d8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d02a      	beq.n	8003300 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032b2:	4619      	mov	r1, r3
 80032b4:	4818      	ldr	r0, [pc, #96]	@ (8003318 <HAL_ADC_ConfigChannel+0x7c0>)
 80032b6:	f7ff f908 	bl	80024ca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032ba:	e021      	b.n	8003300 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003334 <HAL_ADC_ConfigChannel+0x7dc>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d11c      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d116      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a16      	ldr	r2, [pc, #88]	@ (8003330 <HAL_ADC_ConfigChannel+0x7d8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d011      	beq.n	8003300 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032e4:	4619      	mov	r1, r3
 80032e6:	480c      	ldr	r0, [pc, #48]	@ (8003318 <HAL_ADC_ConfigChannel+0x7c0>)
 80032e8:	f7ff f8ef 	bl	80024ca <LL_ADC_SetCommonPathInternalCh>
 80032ec:	e008      	b.n	8003300 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f2:	f043 0220 	orr.w	r2, r3, #32
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003308:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800330c:	4618      	mov	r0, r3
 800330e:	37d8      	adds	r7, #216	@ 0xd8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	80080000 	.word	0x80080000
 8003318:	50000300 	.word	0x50000300
 800331c:	c3210000 	.word	0xc3210000
 8003320:	90c00010 	.word	0x90c00010
 8003324:	20000000 	.word	0x20000000
 8003328:	053e2d63 	.word	0x053e2d63
 800332c:	c7520000 	.word	0xc7520000
 8003330:	50000100 	.word	0x50000100
 8003334:	cb840000 	.word	0xcb840000

08003338 <LL_ADC_IsEnabled>:
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <LL_ADC_IsEnabled+0x18>
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <LL_ADC_IsEnabled+0x1a>
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <LL_ADC_REG_IsConversionOngoing>:
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b04      	cmp	r3, #4
 8003370:	d101      	bne.n	8003376 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003384:	b590      	push	{r4, r7, lr}
 8003386:	b0a1      	sub	sp, #132	@ 0x84
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800339e:	2302      	movs	r3, #2
 80033a0:	e08b      	b.n	80034ba <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80033aa:	2300      	movs	r3, #0
 80033ac:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80033ae:	2300      	movs	r3, #0
 80033b0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033ba:	d102      	bne.n	80033c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033bc:	4b41      	ldr	r3, [pc, #260]	@ (80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80033be:	60bb      	str	r3, [r7, #8]
 80033c0:	e001      	b.n	80033c6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10b      	bne.n	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d0:	f043 0220 	orr.w	r2, r3, #32
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e06a      	b.n	80034ba <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff ffb9 	bl	800335e <LL_ADC_REG_IsConversionOngoing>
 80033ec:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff ffb3 	bl	800335e <LL_ADC_REG_IsConversionOngoing>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d14c      	bne.n	8003498 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80033fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003400:	2b00      	cmp	r3, #0
 8003402:	d149      	bne.n	8003498 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003404:	4b30      	ldr	r3, [pc, #192]	@ (80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003406:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d028      	beq.n	8003462 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003410:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	6859      	ldr	r1, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003422:	035b      	lsls	r3, r3, #13
 8003424:	430b      	orrs	r3, r1
 8003426:	431a      	orrs	r2, r3
 8003428:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800342a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800342c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003430:	f7ff ff82 	bl	8003338 <LL_ADC_IsEnabled>
 8003434:	4604      	mov	r4, r0
 8003436:	4823      	ldr	r0, [pc, #140]	@ (80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003438:	f7ff ff7e 	bl	8003338 <LL_ADC_IsEnabled>
 800343c:	4603      	mov	r3, r0
 800343e:	4323      	orrs	r3, r4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d133      	bne.n	80034ac <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003444:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800344c:	f023 030f 	bic.w	r3, r3, #15
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	6811      	ldr	r1, [r2, #0]
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	6892      	ldr	r2, [r2, #8]
 8003458:	430a      	orrs	r2, r1
 800345a:	431a      	orrs	r2, r3
 800345c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800345e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003460:	e024      	b.n	80034ac <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003462:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800346a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800346c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800346e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003472:	f7ff ff61 	bl	8003338 <LL_ADC_IsEnabled>
 8003476:	4604      	mov	r4, r0
 8003478:	4812      	ldr	r0, [pc, #72]	@ (80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800347a:	f7ff ff5d 	bl	8003338 <LL_ADC_IsEnabled>
 800347e:	4603      	mov	r3, r0
 8003480:	4323      	orrs	r3, r4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d112      	bne.n	80034ac <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003486:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800348e:	f023 030f 	bic.w	r3, r3, #15
 8003492:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003494:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003496:	e009      	b.n	80034ac <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349c:	f043 0220 	orr.w	r2, r3, #32
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80034aa:	e000      	b.n	80034ae <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80034b6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3784      	adds	r7, #132	@ 0x84
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd90      	pop	{r4, r7, pc}
 80034c2:	bf00      	nop
 80034c4:	50000100 	.word	0x50000100
 80034c8:	50000300 	.word	0x50000300

080034cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003510 <__NVIC_SetPriorityGrouping+0x44>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034e8:	4013      	ands	r3, r2
 80034ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034fe:	4a04      	ldr	r2, [pc, #16]	@ (8003510 <__NVIC_SetPriorityGrouping+0x44>)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	60d3      	str	r3, [r2, #12]
}
 8003504:	bf00      	nop
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003518:	4b04      	ldr	r3, [pc, #16]	@ (800352c <__NVIC_GetPriorityGrouping+0x18>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	0a1b      	lsrs	r3, r3, #8
 800351e:	f003 0307 	and.w	r3, r3, #7
}
 8003522:	4618      	mov	r0, r3
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	e000ed00 	.word	0xe000ed00

08003530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	2b00      	cmp	r3, #0
 8003540:	db0b      	blt.n	800355a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	f003 021f 	and.w	r2, r3, #31
 8003548:	4907      	ldr	r1, [pc, #28]	@ (8003568 <__NVIC_EnableIRQ+0x38>)
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	2001      	movs	r0, #1
 8003552:	fa00 f202 	lsl.w	r2, r0, r2
 8003556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	e000e100 	.word	0xe000e100

0800356c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	6039      	str	r1, [r7, #0]
 8003576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357c:	2b00      	cmp	r3, #0
 800357e:	db0a      	blt.n	8003596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	b2da      	uxtb	r2, r3
 8003584:	490c      	ldr	r1, [pc, #48]	@ (80035b8 <__NVIC_SetPriority+0x4c>)
 8003586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358a:	0112      	lsls	r2, r2, #4
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	440b      	add	r3, r1
 8003590:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003594:	e00a      	b.n	80035ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	b2da      	uxtb	r2, r3
 800359a:	4908      	ldr	r1, [pc, #32]	@ (80035bc <__NVIC_SetPriority+0x50>)
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	3b04      	subs	r3, #4
 80035a4:	0112      	lsls	r2, r2, #4
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	440b      	add	r3, r1
 80035aa:	761a      	strb	r2, [r3, #24]
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	e000e100 	.word	0xe000e100
 80035bc:	e000ed00 	.word	0xe000ed00

080035c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b089      	sub	sp, #36	@ 0x24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f1c3 0307 	rsb	r3, r3, #7
 80035da:	2b04      	cmp	r3, #4
 80035dc:	bf28      	it	cs
 80035de:	2304      	movcs	r3, #4
 80035e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	3304      	adds	r3, #4
 80035e6:	2b06      	cmp	r3, #6
 80035e8:	d902      	bls.n	80035f0 <NVIC_EncodePriority+0x30>
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	3b03      	subs	r3, #3
 80035ee:	e000      	b.n	80035f2 <NVIC_EncodePriority+0x32>
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f4:	f04f 32ff 	mov.w	r2, #4294967295
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43da      	mvns	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	401a      	ands	r2, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003608:	f04f 31ff 	mov.w	r1, #4294967295
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	fa01 f303 	lsl.w	r3, r1, r3
 8003612:	43d9      	mvns	r1, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003618:	4313      	orrs	r3, r2
         );
}
 800361a:	4618      	mov	r0, r3
 800361c:	3724      	adds	r7, #36	@ 0x24
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff ff4c 	bl	80034cc <__NVIC_SetPriorityGrouping>
}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800364a:	f7ff ff63 	bl	8003514 <__NVIC_GetPriorityGrouping>
 800364e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	6978      	ldr	r0, [r7, #20]
 8003656:	f7ff ffb3 	bl	80035c0 <NVIC_EncodePriority>
 800365a:	4602      	mov	r2, r0
 800365c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003660:	4611      	mov	r1, r2
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff ff82 	bl	800356c <__NVIC_SetPriority>
}
 8003668:	bf00      	nop
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800367a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff ff56 	bl	8003530 <__NVIC_EnableIRQ>
}
 8003684:	bf00      	nop
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003696:	2300      	movs	r3, #0
 8003698:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800369a:	e15a      	b.n	8003952 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	2101      	movs	r1, #1
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	fa01 f303 	lsl.w	r3, r1, r3
 80036a8:	4013      	ands	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 814c 	beq.w	800394c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d005      	beq.n	80036cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d130      	bne.n	800372e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	2203      	movs	r2, #3
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4013      	ands	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003702:	2201      	movs	r2, #1
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4013      	ands	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	091b      	lsrs	r3, r3, #4
 8003718:	f003 0201 	and.w	r2, r3, #1
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	2b03      	cmp	r3, #3
 8003738:	d017      	beq.n	800376a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	2203      	movs	r2, #3
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4013      	ands	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d123      	bne.n	80037be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	08da      	lsrs	r2, r3, #3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3208      	adds	r2, #8
 800377e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003782:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	220f      	movs	r2, #15
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4013      	ands	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	691a      	ldr	r2, [r3, #16]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	08da      	lsrs	r2, r3, #3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3208      	adds	r2, #8
 80037b8:	6939      	ldr	r1, [r7, #16]
 80037ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	2203      	movs	r2, #3
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	43db      	mvns	r3, r3
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4013      	ands	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 0203 	and.w	r2, r3, #3
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 80a6 	beq.w	800394c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003800:	4b5b      	ldr	r3, [pc, #364]	@ (8003970 <HAL_GPIO_Init+0x2e4>)
 8003802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003804:	4a5a      	ldr	r2, [pc, #360]	@ (8003970 <HAL_GPIO_Init+0x2e4>)
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	6613      	str	r3, [r2, #96]	@ 0x60
 800380c:	4b58      	ldr	r3, [pc, #352]	@ (8003970 <HAL_GPIO_Init+0x2e4>)
 800380e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003818:	4a56      	ldr	r2, [pc, #344]	@ (8003974 <HAL_GPIO_Init+0x2e8>)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	089b      	lsrs	r3, r3, #2
 800381e:	3302      	adds	r3, #2
 8003820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003824:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	220f      	movs	r2, #15
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4013      	ands	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003842:	d01f      	beq.n	8003884 <HAL_GPIO_Init+0x1f8>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a4c      	ldr	r2, [pc, #304]	@ (8003978 <HAL_GPIO_Init+0x2ec>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d019      	beq.n	8003880 <HAL_GPIO_Init+0x1f4>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a4b      	ldr	r2, [pc, #300]	@ (800397c <HAL_GPIO_Init+0x2f0>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d013      	beq.n	800387c <HAL_GPIO_Init+0x1f0>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a4a      	ldr	r2, [pc, #296]	@ (8003980 <HAL_GPIO_Init+0x2f4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d00d      	beq.n	8003878 <HAL_GPIO_Init+0x1ec>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a49      	ldr	r2, [pc, #292]	@ (8003984 <HAL_GPIO_Init+0x2f8>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d007      	beq.n	8003874 <HAL_GPIO_Init+0x1e8>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a48      	ldr	r2, [pc, #288]	@ (8003988 <HAL_GPIO_Init+0x2fc>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d101      	bne.n	8003870 <HAL_GPIO_Init+0x1e4>
 800386c:	2305      	movs	r3, #5
 800386e:	e00a      	b.n	8003886 <HAL_GPIO_Init+0x1fa>
 8003870:	2306      	movs	r3, #6
 8003872:	e008      	b.n	8003886 <HAL_GPIO_Init+0x1fa>
 8003874:	2304      	movs	r3, #4
 8003876:	e006      	b.n	8003886 <HAL_GPIO_Init+0x1fa>
 8003878:	2303      	movs	r3, #3
 800387a:	e004      	b.n	8003886 <HAL_GPIO_Init+0x1fa>
 800387c:	2302      	movs	r3, #2
 800387e:	e002      	b.n	8003886 <HAL_GPIO_Init+0x1fa>
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <HAL_GPIO_Init+0x1fa>
 8003884:	2300      	movs	r3, #0
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	f002 0203 	and.w	r2, r2, #3
 800388c:	0092      	lsls	r2, r2, #2
 800388e:	4093      	lsls	r3, r2
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003896:	4937      	ldr	r1, [pc, #220]	@ (8003974 <HAL_GPIO_Init+0x2e8>)
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	089b      	lsrs	r3, r3, #2
 800389c:	3302      	adds	r3, #2
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038a4:	4b39      	ldr	r3, [pc, #228]	@ (800398c <HAL_GPIO_Init+0x300>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	43db      	mvns	r3, r3
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80038c8:	4a30      	ldr	r2, [pc, #192]	@ (800398c <HAL_GPIO_Init+0x300>)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038ce:	4b2f      	ldr	r3, [pc, #188]	@ (800398c <HAL_GPIO_Init+0x300>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	43db      	mvns	r3, r3
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038f2:	4a26      	ldr	r2, [pc, #152]	@ (800398c <HAL_GPIO_Init+0x300>)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80038f8:	4b24      	ldr	r3, [pc, #144]	@ (800398c <HAL_GPIO_Init+0x300>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	43db      	mvns	r3, r3
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4013      	ands	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800391c:	4a1b      	ldr	r2, [pc, #108]	@ (800398c <HAL_GPIO_Init+0x300>)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003922:	4b1a      	ldr	r3, [pc, #104]	@ (800398c <HAL_GPIO_Init+0x300>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	43db      	mvns	r3, r3
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4013      	ands	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003946:	4a11      	ldr	r2, [pc, #68]	@ (800398c <HAL_GPIO_Init+0x300>)
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	3301      	adds	r3, #1
 8003950:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	f47f ae9d 	bne.w	800369c <HAL_GPIO_Init+0x10>
  }
}
 8003962:	bf00      	nop
 8003964:	bf00      	nop
 8003966:	371c      	adds	r7, #28
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	40021000 	.word	0x40021000
 8003974:	40010000 	.word	0x40010000
 8003978:	48000400 	.word	0x48000400
 800397c:	48000800 	.word	0x48000800
 8003980:	48000c00 	.word	0x48000c00
 8003984:	48001000 	.word	0x48001000
 8003988:	48001400 	.word	0x48001400
 800398c:	40010400 	.word	0x40010400

08003990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	807b      	strh	r3, [r7, #2]
 800399c:	4613      	mov	r3, r2
 800399e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039a0:	787b      	ldrb	r3, [r7, #1]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039a6:	887a      	ldrh	r2, [r7, #2]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039ac:	e002      	b.n	80039b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039ae:	887a      	ldrh	r2, [r7, #2]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039d2:	887a      	ldrh	r2, [r7, #2]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4013      	ands	r3, r2
 80039d8:	041a      	lsls	r2, r3, #16
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	43d9      	mvns	r1, r3
 80039de:	887b      	ldrh	r3, [r7, #2]
 80039e0:	400b      	ands	r3, r1
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	619a      	str	r2, [r3, #24]
}
 80039e8:	bf00      	nop
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e08d      	b.n	8003b22 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fd fc5e 	bl	80012dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2224      	movs	r2, #36	@ 0x24
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0201 	bic.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d107      	bne.n	8003a6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a6a:	609a      	str	r2, [r3, #8]
 8003a6c:	e006      	b.n	8003a7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003a7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d108      	bne.n	8003a96 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a92:	605a      	str	r2, [r3, #4]
 8003a94:	e007      	b.n	8003aa6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003aa4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6812      	ldr	r2, [r2, #0]
 8003ab0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ab4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ab8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ac8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691a      	ldr	r2, [r3, #16]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	69d9      	ldr	r1, [r3, #28]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a1a      	ldr	r2, [r3, #32]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af02      	add	r7, sp, #8
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	4608      	mov	r0, r1
 8003b36:	4611      	mov	r1, r2
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	817b      	strh	r3, [r7, #10]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	813b      	strh	r3, [r7, #8]
 8003b42:	4613      	mov	r3, r2
 8003b44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	f040 80f9 	bne.w	8003d46 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <HAL_I2C_Mem_Write+0x34>
 8003b5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d105      	bne.n	8003b6c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b66:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0ed      	b.n	8003d48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_I2C_Mem_Write+0x4e>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e0e6      	b.n	8003d48 <HAL_I2C_Mem_Write+0x21c>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b82:	f7fe fc61 	bl	8002448 <HAL_GetTick>
 8003b86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	2319      	movs	r3, #25
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 fac3 	bl	8004120 <I2C_WaitOnFlagUntilTimeout>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0d1      	b.n	8003d48 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2221      	movs	r2, #33	@ 0x21
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2240      	movs	r2, #64	@ 0x40
 8003bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a3a      	ldr	r2, [r7, #32]
 8003bbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bcc:	88f8      	ldrh	r0, [r7, #6]
 8003bce:	893a      	ldrh	r2, [r7, #8]
 8003bd0:	8979      	ldrh	r1, [r7, #10]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	4603      	mov	r3, r0
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 f9d3 	bl	8003f88 <I2C_RequestMemoryWrite>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e0a9      	b.n	8003d48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2bff      	cmp	r3, #255	@ 0xff
 8003bfc:	d90e      	bls.n	8003c1c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	22ff      	movs	r2, #255	@ 0xff
 8003c02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	8979      	ldrh	r1, [r7, #10]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 fc47 	bl	80044a8 <I2C_TransferConfig>
 8003c1a:	e00f      	b.n	8003c3c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	8979      	ldrh	r1, [r7, #10]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 fc36 	bl	80044a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 fac6 	bl	80041d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e07b      	b.n	8003d48 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c54:	781a      	ldrb	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d034      	beq.n	8003cf4 <HAL_I2C_Mem_Write+0x1c8>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d130      	bne.n	8003cf4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2180      	movs	r1, #128	@ 0x80
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 fa3f 	bl	8004120 <I2C_WaitOnFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e04d      	b.n	8003d48 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2bff      	cmp	r3, #255	@ 0xff
 8003cb4:	d90e      	bls.n	8003cd4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	22ff      	movs	r2, #255	@ 0xff
 8003cba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	8979      	ldrh	r1, [r7, #10]
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 fbeb 	bl	80044a8 <I2C_TransferConfig>
 8003cd2:	e00f      	b.n	8003cf4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	8979      	ldrh	r1, [r7, #10]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 fbda 	bl	80044a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d19e      	bne.n	8003c3c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 faac 	bl	8004260 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e01a      	b.n	8003d48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2220      	movs	r2, #32
 8003d18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6859      	ldr	r1, [r3, #4]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	4b0a      	ldr	r3, [pc, #40]	@ (8003d50 <HAL_I2C_Mem_Write+0x224>)
 8003d26:	400b      	ands	r3, r1
 8003d28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e000      	b.n	8003d48 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003d46:	2302      	movs	r3, #2
  }
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	fe00e800 	.word	0xfe00e800

08003d54 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	4608      	mov	r0, r1
 8003d5e:	4611      	mov	r1, r2
 8003d60:	461a      	mov	r2, r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	817b      	strh	r3, [r7, #10]
 8003d66:	460b      	mov	r3, r1
 8003d68:	813b      	strh	r3, [r7, #8]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b20      	cmp	r3, #32
 8003d78:	f040 80fd 	bne.w	8003f76 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_I2C_Mem_Read+0x34>
 8003d82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d105      	bne.n	8003d94 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d8e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0f1      	b.n	8003f78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_I2C_Mem_Read+0x4e>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e0ea      	b.n	8003f78 <HAL_I2C_Mem_Read+0x224>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003daa:	f7fe fb4d 	bl	8002448 <HAL_GetTick>
 8003dae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	2319      	movs	r3, #25
 8003db6:	2201      	movs	r2, #1
 8003db8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f9af 	bl	8004120 <I2C_WaitOnFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0d5      	b.n	8003f78 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2222      	movs	r2, #34	@ 0x22
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2240      	movs	r2, #64	@ 0x40
 8003dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a3a      	ldr	r2, [r7, #32]
 8003de6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003dec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003df4:	88f8      	ldrh	r0, [r7, #6]
 8003df6:	893a      	ldrh	r2, [r7, #8]
 8003df8:	8979      	ldrh	r1, [r7, #10]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	9301      	str	r3, [sp, #4]
 8003dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	4603      	mov	r3, r0
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f913 	bl	8004030 <I2C_RequestMemoryRead>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0ad      	b.n	8003f78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2bff      	cmp	r3, #255	@ 0xff
 8003e24:	d90e      	bls.n	8003e44 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	22ff      	movs	r2, #255	@ 0xff
 8003e2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	8979      	ldrh	r1, [r7, #10]
 8003e34:	4b52      	ldr	r3, [pc, #328]	@ (8003f80 <HAL_I2C_Mem_Read+0x22c>)
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 fb33 	bl	80044a8 <I2C_TransferConfig>
 8003e42:	e00f      	b.n	8003e64 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	8979      	ldrh	r1, [r7, #10]
 8003e56:	4b4a      	ldr	r3, [pc, #296]	@ (8003f80 <HAL_I2C_Mem_Read+0x22c>)
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 fb22 	bl	80044a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	2104      	movs	r1, #4
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f956 	bl	8004120 <I2C_WaitOnFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e07c      	b.n	8003f78 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d034      	beq.n	8003f24 <HAL_I2C_Mem_Read+0x1d0>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d130      	bne.n	8003f24 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2180      	movs	r1, #128	@ 0x80
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 f927 	bl	8004120 <I2C_WaitOnFlagUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e04d      	b.n	8003f78 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2bff      	cmp	r3, #255	@ 0xff
 8003ee4:	d90e      	bls.n	8003f04 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	22ff      	movs	r2, #255	@ 0xff
 8003eea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	8979      	ldrh	r1, [r7, #10]
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 fad3 	bl	80044a8 <I2C_TransferConfig>
 8003f02:	e00f      	b.n	8003f24 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	8979      	ldrh	r1, [r7, #10]
 8003f16:	2300      	movs	r3, #0
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 fac2 	bl	80044a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d19a      	bne.n	8003e64 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 f994 	bl	8004260 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e01a      	b.n	8003f78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2220      	movs	r2, #32
 8003f48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6859      	ldr	r1, [r3, #4]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4b0b      	ldr	r3, [pc, #44]	@ (8003f84 <HAL_I2C_Mem_Read+0x230>)
 8003f56:	400b      	ands	r3, r1
 8003f58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	e000      	b.n	8003f78 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003f76:	2302      	movs	r3, #2
  }
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	80002400 	.word	0x80002400
 8003f84:	fe00e800 	.word	0xfe00e800

08003f88 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	4608      	mov	r0, r1
 8003f92:	4611      	mov	r1, r2
 8003f94:	461a      	mov	r2, r3
 8003f96:	4603      	mov	r3, r0
 8003f98:	817b      	strh	r3, [r7, #10]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	813b      	strh	r3, [r7, #8]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	8979      	ldrh	r1, [r7, #10]
 8003fa8:	4b20      	ldr	r3, [pc, #128]	@ (800402c <I2C_RequestMemoryWrite+0xa4>)
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 fa79 	bl	80044a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb6:	69fa      	ldr	r2, [r7, #28]
 8003fb8:	69b9      	ldr	r1, [r7, #24]
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f909 	bl	80041d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e02c      	b.n	8004024 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d105      	bne.n	8003fdc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fd0:	893b      	ldrh	r3, [r7, #8]
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fda:	e015      	b.n	8004008 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fdc:	893b      	ldrh	r3, [r7, #8]
 8003fde:	0a1b      	lsrs	r3, r3, #8
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	69b9      	ldr	r1, [r7, #24]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 f8ef 	bl	80041d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e012      	b.n	8004024 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ffe:	893b      	ldrh	r3, [r7, #8]
 8004000:	b2da      	uxtb	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	2200      	movs	r2, #0
 8004010:	2180      	movs	r1, #128	@ 0x80
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 f884 	bl	8004120 <I2C_WaitOnFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	80002000 	.word	0x80002000

08004030 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	4608      	mov	r0, r1
 800403a:	4611      	mov	r1, r2
 800403c:	461a      	mov	r2, r3
 800403e:	4603      	mov	r3, r0
 8004040:	817b      	strh	r3, [r7, #10]
 8004042:	460b      	mov	r3, r1
 8004044:	813b      	strh	r3, [r7, #8]
 8004046:	4613      	mov	r3, r2
 8004048:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800404a:	88fb      	ldrh	r3, [r7, #6]
 800404c:	b2da      	uxtb	r2, r3
 800404e:	8979      	ldrh	r1, [r7, #10]
 8004050:	4b20      	ldr	r3, [pc, #128]	@ (80040d4 <I2C_RequestMemoryRead+0xa4>)
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	2300      	movs	r3, #0
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 fa26 	bl	80044a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800405c:	69fa      	ldr	r2, [r7, #28]
 800405e:	69b9      	ldr	r1, [r7, #24]
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 f8b6 	bl	80041d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e02c      	b.n	80040ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004070:	88fb      	ldrh	r3, [r7, #6]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d105      	bne.n	8004082 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004076:	893b      	ldrh	r3, [r7, #8]
 8004078:	b2da      	uxtb	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004080:	e015      	b.n	80040ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004082:	893b      	ldrh	r3, [r7, #8]
 8004084:	0a1b      	lsrs	r3, r3, #8
 8004086:	b29b      	uxth	r3, r3
 8004088:	b2da      	uxtb	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004090:	69fa      	ldr	r2, [r7, #28]
 8004092:	69b9      	ldr	r1, [r7, #24]
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f89c 	bl	80041d2 <I2C_WaitOnTXISFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e012      	b.n	80040ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040a4:	893b      	ldrh	r3, [r7, #8]
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2200      	movs	r2, #0
 80040b6:	2140      	movs	r1, #64	@ 0x40
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f831 	bl	8004120 <I2C_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	80002000 	.word	0x80002000

080040d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d103      	bne.n	80040f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2200      	movs	r2, #0
 80040f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b01      	cmp	r3, #1
 8004102:	d007      	beq.n	8004114 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699a      	ldr	r2, [r3, #24]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	619a      	str	r2, [r3, #24]
  }
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	4613      	mov	r3, r2
 800412e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004130:	e03b      	b.n	80041aa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	6839      	ldr	r1, [r7, #0]
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 f8d6 	bl	80042e8 <I2C_IsErrorOccurred>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e041      	b.n	80041ca <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414c:	d02d      	beq.n	80041aa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800414e:	f7fe f97b 	bl	8002448 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d302      	bcc.n	8004164 <I2C_WaitOnFlagUntilTimeout+0x44>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d122      	bne.n	80041aa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4013      	ands	r3, r2
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	429a      	cmp	r2, r3
 8004172:	bf0c      	ite	eq
 8004174:	2301      	moveq	r3, #1
 8004176:	2300      	movne	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	461a      	mov	r2, r3
 800417c:	79fb      	ldrb	r3, [r7, #7]
 800417e:	429a      	cmp	r2, r3
 8004180:	d113      	bne.n	80041aa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004186:	f043 0220 	orr.w	r2, r3, #32
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2220      	movs	r2, #32
 8004192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e00f      	b.n	80041ca <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	699a      	ldr	r2, [r3, #24]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4013      	ands	r3, r2
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	bf0c      	ite	eq
 80041ba:	2301      	moveq	r3, #1
 80041bc:	2300      	movne	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d0b4      	beq.n	8004132 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041de:	e033      	b.n	8004248 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f87f 	bl	80042e8 <I2C_IsErrorOccurred>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e031      	b.n	8004258 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fa:	d025      	beq.n	8004248 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fc:	f7fe f924 	bl	8002448 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	429a      	cmp	r2, r3
 800420a:	d302      	bcc.n	8004212 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d11a      	bne.n	8004248 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b02      	cmp	r3, #2
 800421e:	d013      	beq.n	8004248 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004224:	f043 0220 	orr.w	r2, r3, #32
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e007      	b.n	8004258 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b02      	cmp	r3, #2
 8004254:	d1c4      	bne.n	80041e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800426c:	e02f      	b.n	80042ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 f838 	bl	80042e8 <I2C_IsErrorOccurred>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e02d      	b.n	80042de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004282:	f7fe f8e1 	bl	8002448 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	429a      	cmp	r2, r3
 8004290:	d302      	bcc.n	8004298 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d11a      	bne.n	80042ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	f003 0320 	and.w	r3, r3, #32
 80042a2:	2b20      	cmp	r3, #32
 80042a4:	d013      	beq.n	80042ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042aa:	f043 0220 	orr.w	r2, r3, #32
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e007      	b.n	80042de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	2b20      	cmp	r3, #32
 80042da:	d1c8      	bne.n	800426e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08a      	sub	sp, #40	@ 0x28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f4:	2300      	movs	r3, #0
 80042f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004302:	2300      	movs	r3, #0
 8004304:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b00      	cmp	r3, #0
 8004312:	d068      	beq.n	80043e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2210      	movs	r2, #16
 800431a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800431c:	e049      	b.n	80043b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004324:	d045      	beq.n	80043b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004326:	f7fe f88f 	bl	8002448 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	429a      	cmp	r2, r3
 8004334:	d302      	bcc.n	800433c <I2C_IsErrorOccurred+0x54>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d13a      	bne.n	80043b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004346:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800434e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800435a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800435e:	d121      	bne.n	80043a4 <I2C_IsErrorOccurred+0xbc>
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004366:	d01d      	beq.n	80043a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004368:	7cfb      	ldrb	r3, [r7, #19]
 800436a:	2b20      	cmp	r3, #32
 800436c:	d01a      	beq.n	80043a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800437c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800437e:	f7fe f863 	bl	8002448 <HAL_GetTick>
 8004382:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004384:	e00e      	b.n	80043a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004386:	f7fe f85f 	bl	8002448 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b19      	cmp	r3, #25
 8004392:	d907      	bls.n	80043a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	f043 0320 	orr.w	r3, r3, #32
 800439a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80043a2:	e006      	b.n	80043b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	d1e9      	bne.n	8004386 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d003      	beq.n	80043c8 <I2C_IsErrorOccurred+0xe0>
 80043c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0aa      	beq.n	800431e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80043c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d103      	bne.n	80043d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2220      	movs	r2, #32
 80043d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	f043 0304 	orr.w	r3, r3, #4
 80043de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00b      	beq.n	8004410 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004408:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00b      	beq.n	8004432 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	f043 0308 	orr.w	r3, r3, #8
 8004420:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800442a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00b      	beq.n	8004454 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	f043 0302 	orr.w	r3, r3, #2
 8004442:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800444c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004454:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01c      	beq.n	8004496 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f7ff fe3b 	bl	80040d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6859      	ldr	r1, [r3, #4]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	4b0d      	ldr	r3, [pc, #52]	@ (80044a4 <I2C_IsErrorOccurred+0x1bc>)
 800446e:	400b      	ands	r3, r1
 8004470:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	431a      	orrs	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004496:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800449a:	4618      	mov	r0, r3
 800449c:	3728      	adds	r7, #40	@ 0x28
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	fe00e800 	.word	0xfe00e800

080044a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	607b      	str	r3, [r7, #4]
 80044b2:	460b      	mov	r3, r1
 80044b4:	817b      	strh	r3, [r7, #10]
 80044b6:	4613      	mov	r3, r2
 80044b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044ba:	897b      	ldrh	r3, [r7, #10]
 80044bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044c0:	7a7b      	ldrb	r3, [r7, #9]
 80044c2:	041b      	lsls	r3, r3, #16
 80044c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	0d5b      	lsrs	r3, r3, #21
 80044e2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80044e6:	4b08      	ldr	r3, [pc, #32]	@ (8004508 <I2C_TransferConfig+0x60>)
 80044e8:	430b      	orrs	r3, r1
 80044ea:	43db      	mvns	r3, r3
 80044ec:	ea02 0103 	and.w	r1, r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80044fa:	bf00      	nop
 80044fc:	371c      	adds	r7, #28
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	03ff63ff 	.word	0x03ff63ff

0800450c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b20      	cmp	r3, #32
 8004520:	d138      	bne.n	8004594 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800452c:	2302      	movs	r3, #2
 800452e:	e032      	b.n	8004596 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2224      	movs	r2, #36	@ 0x24
 800453c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0201 	bic.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800455e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6819      	ldr	r1, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	e000      	b.n	8004596 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004594:	2302      	movs	r3, #2
  }
}
 8004596:	4618      	mov	r0, r3
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b085      	sub	sp, #20
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d139      	bne.n	800462c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045c2:	2302      	movs	r3, #2
 80045c4:	e033      	b.n	800462e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2224      	movs	r2, #36	@ 0x24
 80045d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0201 	bic.w	r2, r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80045f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	021b      	lsls	r3, r3, #8
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004628:	2300      	movs	r3, #0
 800462a:	e000      	b.n	800462e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800462c:	2302      	movs	r3, #2
  }
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d141      	bne.n	80046ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800464a:	4b4b      	ldr	r3, [pc, #300]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004656:	d131      	bne.n	80046bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004658:	4b47      	ldr	r3, [pc, #284]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800465a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800465e:	4a46      	ldr	r2, [pc, #280]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004664:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004668:	4b43      	ldr	r3, [pc, #268]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004670:	4a41      	ldr	r2, [pc, #260]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004672:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004676:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004678:	4b40      	ldr	r3, [pc, #256]	@ (800477c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2232      	movs	r2, #50	@ 0x32
 800467e:	fb02 f303 	mul.w	r3, r2, r3
 8004682:	4a3f      	ldr	r2, [pc, #252]	@ (8004780 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004684:	fba2 2303 	umull	r2, r3, r2, r3
 8004688:	0c9b      	lsrs	r3, r3, #18
 800468a:	3301      	adds	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800468e:	e002      	b.n	8004696 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	3b01      	subs	r3, #1
 8004694:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004696:	4b38      	ldr	r3, [pc, #224]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800469e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046a2:	d102      	bne.n	80046aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f2      	bne.n	8004690 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046aa:	4b33      	ldr	r3, [pc, #204]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046b6:	d158      	bne.n	800476a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e057      	b.n	800476c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046bc:	4b2e      	ldr	r3, [pc, #184]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046c2:	4a2d      	ldr	r2, [pc, #180]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80046cc:	e04d      	b.n	800476a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046d4:	d141      	bne.n	800475a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046d6:	4b28      	ldr	r3, [pc, #160]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046e2:	d131      	bne.n	8004748 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046e4:	4b24      	ldr	r3, [pc, #144]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046ea:	4a23      	ldr	r2, [pc, #140]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046f4:	4b20      	ldr	r3, [pc, #128]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004702:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004704:	4b1d      	ldr	r3, [pc, #116]	@ (800477c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2232      	movs	r2, #50	@ 0x32
 800470a:	fb02 f303 	mul.w	r3, r2, r3
 800470e:	4a1c      	ldr	r2, [pc, #112]	@ (8004780 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004710:	fba2 2303 	umull	r2, r3, r2, r3
 8004714:	0c9b      	lsrs	r3, r3, #18
 8004716:	3301      	adds	r3, #1
 8004718:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800471a:	e002      	b.n	8004722 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	3b01      	subs	r3, #1
 8004720:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004722:	4b15      	ldr	r3, [pc, #84]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800472a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800472e:	d102      	bne.n	8004736 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f2      	bne.n	800471c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004736:	4b10      	ldr	r3, [pc, #64]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800473e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004742:	d112      	bne.n	800476a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e011      	b.n	800476c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004748:	4b0b      	ldr	r3, [pc, #44]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800474a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800474e:	4a0a      	ldr	r2, [pc, #40]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004754:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004758:	e007      	b.n	800476a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800475a:	4b07      	ldr	r3, [pc, #28]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004762:	4a05      	ldr	r2, [pc, #20]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004764:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004768:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	40007000 	.word	0x40007000
 800477c:	20000000 	.word	0x20000000
 8004780:	431bde83 	.word	0x431bde83

08004784 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004788:	4b05      	ldr	r3, [pc, #20]	@ (80047a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	4a04      	ldr	r2, [pc, #16]	@ (80047a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800478e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004792:	6093      	str	r3, [r2, #8]
}
 8004794:	bf00      	nop
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40007000 	.word	0x40007000

080047a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e2fe      	b.n	8004db4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d075      	beq.n	80048ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047c2:	4b97      	ldr	r3, [pc, #604]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 030c 	and.w	r3, r3, #12
 80047ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047cc:	4b94      	ldr	r3, [pc, #592]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f003 0303 	and.w	r3, r3, #3
 80047d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2b0c      	cmp	r3, #12
 80047da:	d102      	bne.n	80047e2 <HAL_RCC_OscConfig+0x3e>
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d002      	beq.n	80047e8 <HAL_RCC_OscConfig+0x44>
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d10b      	bne.n	8004800 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e8:	4b8d      	ldr	r3, [pc, #564]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d05b      	beq.n	80048ac <HAL_RCC_OscConfig+0x108>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d157      	bne.n	80048ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e2d9      	b.n	8004db4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004808:	d106      	bne.n	8004818 <HAL_RCC_OscConfig+0x74>
 800480a:	4b85      	ldr	r3, [pc, #532]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a84      	ldr	r2, [pc, #528]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 8004810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	e01d      	b.n	8004854 <HAL_RCC_OscConfig+0xb0>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004820:	d10c      	bne.n	800483c <HAL_RCC_OscConfig+0x98>
 8004822:	4b7f      	ldr	r3, [pc, #508]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a7e      	ldr	r2, [pc, #504]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 8004828:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	4b7c      	ldr	r3, [pc, #496]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a7b      	ldr	r2, [pc, #492]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 8004834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	e00b      	b.n	8004854 <HAL_RCC_OscConfig+0xb0>
 800483c:	4b78      	ldr	r3, [pc, #480]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a77      	ldr	r2, [pc, #476]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 8004842:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	4b75      	ldr	r3, [pc, #468]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a74      	ldr	r2, [pc, #464]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 800484e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d013      	beq.n	8004884 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485c:	f7fd fdf4 	bl	8002448 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004864:	f7fd fdf0 	bl	8002448 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b64      	cmp	r3, #100	@ 0x64
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e29e      	b.n	8004db4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004876:	4b6a      	ldr	r3, [pc, #424]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0f0      	beq.n	8004864 <HAL_RCC_OscConfig+0xc0>
 8004882:	e014      	b.n	80048ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004884:	f7fd fde0 	bl	8002448 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800488c:	f7fd fddc 	bl	8002448 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b64      	cmp	r3, #100	@ 0x64
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e28a      	b.n	8004db4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800489e:	4b60      	ldr	r3, [pc, #384]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1f0      	bne.n	800488c <HAL_RCC_OscConfig+0xe8>
 80048aa:	e000      	b.n	80048ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d075      	beq.n	80049a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ba:	4b59      	ldr	r3, [pc, #356]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 030c 	and.w	r3, r3, #12
 80048c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048c4:	4b56      	ldr	r3, [pc, #344]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 0303 	and.w	r3, r3, #3
 80048cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2b0c      	cmp	r3, #12
 80048d2:	d102      	bne.n	80048da <HAL_RCC_OscConfig+0x136>
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d002      	beq.n	80048e0 <HAL_RCC_OscConfig+0x13c>
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d11f      	bne.n	8004920 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048e0:	4b4f      	ldr	r3, [pc, #316]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_RCC_OscConfig+0x154>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e25d      	b.n	8004db4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f8:	4b49      	ldr	r3, [pc, #292]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	061b      	lsls	r3, r3, #24
 8004906:	4946      	ldr	r1, [pc, #280]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 8004908:	4313      	orrs	r3, r2
 800490a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800490c:	4b45      	ldr	r3, [pc, #276]	@ (8004a24 <HAL_RCC_OscConfig+0x280>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4618      	mov	r0, r3
 8004912:	f7fc ff7b 	bl	800180c <HAL_InitTick>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d043      	beq.n	80049a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e249      	b.n	8004db4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d023      	beq.n	8004970 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004928:	4b3d      	ldr	r3, [pc, #244]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a3c      	ldr	r2, [pc, #240]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 800492e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004934:	f7fd fd88 	bl	8002448 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800493c:	f7fd fd84 	bl	8002448 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e232      	b.n	8004db4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800494e:	4b34      	ldr	r3, [pc, #208]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f0      	beq.n	800493c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800495a:	4b31      	ldr	r3, [pc, #196]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	061b      	lsls	r3, r3, #24
 8004968:	492d      	ldr	r1, [pc, #180]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 800496a:	4313      	orrs	r3, r2
 800496c:	604b      	str	r3, [r1, #4]
 800496e:	e01a      	b.n	80049a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004970:	4b2b      	ldr	r3, [pc, #172]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a2a      	ldr	r2, [pc, #168]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 8004976:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800497a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497c:	f7fd fd64 	bl	8002448 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004984:	f7fd fd60 	bl	8002448 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e20e      	b.n	8004db4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004996:	4b22      	ldr	r3, [pc, #136]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0x1e0>
 80049a2:	e000      	b.n	80049a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d041      	beq.n	8004a36 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d01c      	beq.n	80049f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ba:	4b19      	ldr	r3, [pc, #100]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 80049bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049c0:	4a17      	ldr	r2, [pc, #92]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 80049c2:	f043 0301 	orr.w	r3, r3, #1
 80049c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ca:	f7fd fd3d 	bl	8002448 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049d2:	f7fd fd39 	bl	8002448 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e1e7      	b.n	8004db4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 80049e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0ef      	beq.n	80049d2 <HAL_RCC_OscConfig+0x22e>
 80049f2:	e020      	b.n	8004a36 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 80049f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049fa:	4a09      	ldr	r2, [pc, #36]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 80049fc:	f023 0301 	bic.w	r3, r3, #1
 8004a00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a04:	f7fd fd20 	bl	8002448 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a0a:	e00d      	b.n	8004a28 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a0c:	f7fd fd1c 	bl	8002448 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d906      	bls.n	8004a28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e1ca      	b.n	8004db4 <HAL_RCC_OscConfig+0x610>
 8004a1e:	bf00      	nop
 8004a20:	40021000 	.word	0x40021000
 8004a24:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a28:	4b8c      	ldr	r3, [pc, #560]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1ea      	bne.n	8004a0c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 80a6 	beq.w	8004b90 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a44:	2300      	movs	r3, #0
 8004a46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a48:	4b84      	ldr	r3, [pc, #528]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_RCC_OscConfig+0x2b4>
 8004a54:	2301      	movs	r3, #1
 8004a56:	e000      	b.n	8004a5a <HAL_RCC_OscConfig+0x2b6>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00d      	beq.n	8004a7a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a5e:	4b7f      	ldr	r3, [pc, #508]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a62:	4a7e      	ldr	r2, [pc, #504]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a68:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a6a:	4b7c      	ldr	r3, [pc, #496]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a76:	2301      	movs	r3, #1
 8004a78:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a7a:	4b79      	ldr	r3, [pc, #484]	@ (8004c60 <HAL_RCC_OscConfig+0x4bc>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d118      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a86:	4b76      	ldr	r3, [pc, #472]	@ (8004c60 <HAL_RCC_OscConfig+0x4bc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a75      	ldr	r2, [pc, #468]	@ (8004c60 <HAL_RCC_OscConfig+0x4bc>)
 8004a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a92:	f7fd fcd9 	bl	8002448 <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a9a:	f7fd fcd5 	bl	8002448 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e183      	b.n	8004db4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aac:	4b6c      	ldr	r3, [pc, #432]	@ (8004c60 <HAL_RCC_OscConfig+0x4bc>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0f0      	beq.n	8004a9a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d108      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x32e>
 8004ac0:	4b66      	ldr	r3, [pc, #408]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac6:	4a65      	ldr	r2, [pc, #404]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ad0:	e024      	b.n	8004b1c <HAL_RCC_OscConfig+0x378>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2b05      	cmp	r3, #5
 8004ad8:	d110      	bne.n	8004afc <HAL_RCC_OscConfig+0x358>
 8004ada:	4b60      	ldr	r3, [pc, #384]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae0:	4a5e      	ldr	r2, [pc, #376]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004ae2:	f043 0304 	orr.w	r3, r3, #4
 8004ae6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004aea:	4b5c      	ldr	r3, [pc, #368]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af0:	4a5a      	ldr	r2, [pc, #360]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004af2:	f043 0301 	orr.w	r3, r3, #1
 8004af6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004afa:	e00f      	b.n	8004b1c <HAL_RCC_OscConfig+0x378>
 8004afc:	4b57      	ldr	r3, [pc, #348]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b02:	4a56      	ldr	r2, [pc, #344]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004b04:	f023 0301 	bic.w	r3, r3, #1
 8004b08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b0c:	4b53      	ldr	r3, [pc, #332]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b12:	4a52      	ldr	r2, [pc, #328]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004b14:	f023 0304 	bic.w	r3, r3, #4
 8004b18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d016      	beq.n	8004b52 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b24:	f7fd fc90 	bl	8002448 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b2a:	e00a      	b.n	8004b42 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b2c:	f7fd fc8c 	bl	8002448 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e138      	b.n	8004db4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b42:	4b46      	ldr	r3, [pc, #280]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0ed      	beq.n	8004b2c <HAL_RCC_OscConfig+0x388>
 8004b50:	e015      	b.n	8004b7e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b52:	f7fd fc79 	bl	8002448 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b58:	e00a      	b.n	8004b70 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b5a:	f7fd fc75 	bl	8002448 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e121      	b.n	8004db4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b70:	4b3a      	ldr	r3, [pc, #232]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1ed      	bne.n	8004b5a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b7e:	7ffb      	ldrb	r3, [r7, #31]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d105      	bne.n	8004b90 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b84:	4b35      	ldr	r3, [pc, #212]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b88:	4a34      	ldr	r2, [pc, #208]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004b8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b8e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d03c      	beq.n	8004c16 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d01c      	beq.n	8004bde <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ba4:	4b2d      	ldr	r3, [pc, #180]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004baa:	4a2c      	ldr	r2, [pc, #176]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb4:	f7fd fc48 	bl	8002448 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bbc:	f7fd fc44 	bl	8002448 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e0f2      	b.n	8004db4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bce:	4b23      	ldr	r3, [pc, #140]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0ef      	beq.n	8004bbc <HAL_RCC_OscConfig+0x418>
 8004bdc:	e01b      	b.n	8004c16 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bde:	4b1f      	ldr	r3, [pc, #124]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004be4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004be6:	f023 0301 	bic.w	r3, r3, #1
 8004bea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bee:	f7fd fc2b 	bl	8002448 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bf6:	f7fd fc27 	bl	8002448 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e0d5      	b.n	8004db4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c08:	4b14      	ldr	r3, [pc, #80]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1ef      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 80c9 	beq.w	8004db2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c20:	4b0e      	ldr	r3, [pc, #56]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 030c 	and.w	r3, r3, #12
 8004c28:	2b0c      	cmp	r3, #12
 8004c2a:	f000 8083 	beq.w	8004d34 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d15e      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c36:	4b09      	ldr	r3, [pc, #36]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a08      	ldr	r2, [pc, #32]	@ (8004c5c <HAL_RCC_OscConfig+0x4b8>)
 8004c3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c42:	f7fd fc01 	bl	8002448 <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c48:	e00c      	b.n	8004c64 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c4a:	f7fd fbfd 	bl	8002448 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d905      	bls.n	8004c64 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e0ab      	b.n	8004db4 <HAL_RCC_OscConfig+0x610>
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c64:	4b55      	ldr	r3, [pc, #340]	@ (8004dbc <HAL_RCC_OscConfig+0x618>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1ec      	bne.n	8004c4a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c70:	4b52      	ldr	r3, [pc, #328]	@ (8004dbc <HAL_RCC_OscConfig+0x618>)
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	4b52      	ldr	r3, [pc, #328]	@ (8004dc0 <HAL_RCC_OscConfig+0x61c>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6a11      	ldr	r1, [r2, #32]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c80:	3a01      	subs	r2, #1
 8004c82:	0112      	lsls	r2, r2, #4
 8004c84:	4311      	orrs	r1, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004c8a:	0212      	lsls	r2, r2, #8
 8004c8c:	4311      	orrs	r1, r2
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004c92:	0852      	lsrs	r2, r2, #1
 8004c94:	3a01      	subs	r2, #1
 8004c96:	0552      	lsls	r2, r2, #21
 8004c98:	4311      	orrs	r1, r2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c9e:	0852      	lsrs	r2, r2, #1
 8004ca0:	3a01      	subs	r2, #1
 8004ca2:	0652      	lsls	r2, r2, #25
 8004ca4:	4311      	orrs	r1, r2
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004caa:	06d2      	lsls	r2, r2, #27
 8004cac:	430a      	orrs	r2, r1
 8004cae:	4943      	ldr	r1, [pc, #268]	@ (8004dbc <HAL_RCC_OscConfig+0x618>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cb4:	4b41      	ldr	r3, [pc, #260]	@ (8004dbc <HAL_RCC_OscConfig+0x618>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a40      	ldr	r2, [pc, #256]	@ (8004dbc <HAL_RCC_OscConfig+0x618>)
 8004cba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cbe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cc0:	4b3e      	ldr	r3, [pc, #248]	@ (8004dbc <HAL_RCC_OscConfig+0x618>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4a3d      	ldr	r2, [pc, #244]	@ (8004dbc <HAL_RCC_OscConfig+0x618>)
 8004cc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ccc:	f7fd fbbc 	bl	8002448 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd4:	f7fd fbb8 	bl	8002448 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e066      	b.n	8004db4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ce6:	4b35      	ldr	r3, [pc, #212]	@ (8004dbc <HAL_RCC_OscConfig+0x618>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0f0      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x530>
 8004cf2:	e05e      	b.n	8004db2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf4:	4b31      	ldr	r3, [pc, #196]	@ (8004dbc <HAL_RCC_OscConfig+0x618>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a30      	ldr	r2, [pc, #192]	@ (8004dbc <HAL_RCC_OscConfig+0x618>)
 8004cfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d00:	f7fd fba2 	bl	8002448 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d08:	f7fd fb9e 	bl	8002448 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e04c      	b.n	8004db4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d1a:	4b28      	ldr	r3, [pc, #160]	@ (8004dbc <HAL_RCC_OscConfig+0x618>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1f0      	bne.n	8004d08 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d26:	4b25      	ldr	r3, [pc, #148]	@ (8004dbc <HAL_RCC_OscConfig+0x618>)
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	4924      	ldr	r1, [pc, #144]	@ (8004dbc <HAL_RCC_OscConfig+0x618>)
 8004d2c:	4b25      	ldr	r3, [pc, #148]	@ (8004dc4 <HAL_RCC_OscConfig+0x620>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	60cb      	str	r3, [r1, #12]
 8004d32:	e03e      	b.n	8004db2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e039      	b.n	8004db4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d40:	4b1e      	ldr	r3, [pc, #120]	@ (8004dbc <HAL_RCC_OscConfig+0x618>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f003 0203 	and.w	r2, r3, #3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d12c      	bne.n	8004dae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d123      	bne.n	8004dae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d70:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d11b      	bne.n	8004dae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d80:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d113      	bne.n	8004dae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d90:	085b      	lsrs	r3, r3, #1
 8004d92:	3b01      	subs	r3, #1
 8004d94:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d109      	bne.n	8004dae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004da4:	085b      	lsrs	r3, r3, #1
 8004da6:	3b01      	subs	r3, #1
 8004da8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d001      	beq.n	8004db2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e000      	b.n	8004db4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3720      	adds	r7, #32
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	019f800c 	.word	0x019f800c
 8004dc4:	feeefffc 	.word	0xfeeefffc

08004dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e11e      	b.n	800501e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004de0:	4b91      	ldr	r3, [pc, #580]	@ (8005028 <HAL_RCC_ClockConfig+0x260>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 030f 	and.w	r3, r3, #15
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d910      	bls.n	8004e10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dee:	4b8e      	ldr	r3, [pc, #568]	@ (8005028 <HAL_RCC_ClockConfig+0x260>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f023 020f 	bic.w	r2, r3, #15
 8004df6:	498c      	ldr	r1, [pc, #560]	@ (8005028 <HAL_RCC_ClockConfig+0x260>)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dfe:	4b8a      	ldr	r3, [pc, #552]	@ (8005028 <HAL_RCC_ClockConfig+0x260>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d001      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e106      	b.n	800501e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d073      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d129      	bne.n	8004e78 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e24:	4b81      	ldr	r3, [pc, #516]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e0f4      	b.n	800501e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e34:	f000 f9ce 	bl	80051d4 <RCC_GetSysClockFreqFromPLLSource>
 8004e38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	4a7c      	ldr	r2, [pc, #496]	@ (8005030 <HAL_RCC_ClockConfig+0x268>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d93f      	bls.n	8004ec2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e42:	4b7a      	ldr	r3, [pc, #488]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d009      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d033      	beq.n	8004ec2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d12f      	bne.n	8004ec2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e62:	4b72      	ldr	r3, [pc, #456]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e6a:	4a70      	ldr	r2, [pc, #448]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004e6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e70:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e72:	2380      	movs	r3, #128	@ 0x80
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	e024      	b.n	8004ec2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d107      	bne.n	8004e90 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e80:	4b6a      	ldr	r3, [pc, #424]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d109      	bne.n	8004ea0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e0c6      	b.n	800501e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e90:	4b66      	ldr	r3, [pc, #408]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e0be      	b.n	800501e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ea0:	f000 f8ce 	bl	8005040 <HAL_RCC_GetSysClockFreq>
 8004ea4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	4a61      	ldr	r2, [pc, #388]	@ (8005030 <HAL_RCC_ClockConfig+0x268>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d909      	bls.n	8004ec2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004eae:	4b5f      	ldr	r3, [pc, #380]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004eb6:	4a5d      	ldr	r2, [pc, #372]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ebc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004ebe:	2380      	movs	r3, #128	@ 0x80
 8004ec0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ec2:	4b5a      	ldr	r3, [pc, #360]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f023 0203 	bic.w	r2, r3, #3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	4957      	ldr	r1, [pc, #348]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ed4:	f7fd fab8 	bl	8002448 <HAL_GetTick>
 8004ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eda:	e00a      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004edc:	f7fd fab4 	bl	8002448 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e095      	b.n	800501e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ef2:	4b4e      	ldr	r3, [pc, #312]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 020c 	and.w	r2, r3, #12
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d1eb      	bne.n	8004edc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d023      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f1c:	4b43      	ldr	r3, [pc, #268]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	4a42      	ldr	r2, [pc, #264]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004f22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f26:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d007      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f34:	4b3d      	ldr	r3, [pc, #244]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f3c:	4a3b      	ldr	r2, [pc, #236]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004f3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f44:	4b39      	ldr	r3, [pc, #228]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	4936      	ldr	r1, [pc, #216]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	608b      	str	r3, [r1, #8]
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2b80      	cmp	r3, #128	@ 0x80
 8004f5c:	d105      	bne.n	8004f6a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f5e:	4b33      	ldr	r3, [pc, #204]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	4a32      	ldr	r2, [pc, #200]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004f64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f68:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8005028 <HAL_RCC_ClockConfig+0x260>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d21d      	bcs.n	8004fb4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f78:	4b2b      	ldr	r3, [pc, #172]	@ (8005028 <HAL_RCC_ClockConfig+0x260>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f023 020f 	bic.w	r2, r3, #15
 8004f80:	4929      	ldr	r1, [pc, #164]	@ (8005028 <HAL_RCC_ClockConfig+0x260>)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f88:	f7fd fa5e 	bl	8002448 <HAL_GetTick>
 8004f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f90:	f7fd fa5a 	bl	8002448 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e03b      	b.n	800501e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fa6:	4b20      	ldr	r3, [pc, #128]	@ (8005028 <HAL_RCC_ClockConfig+0x260>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d1ed      	bne.n	8004f90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d008      	beq.n	8004fd2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	4917      	ldr	r1, [pc, #92]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d009      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fde:	4b13      	ldr	r3, [pc, #76]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	490f      	ldr	r1, [pc, #60]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ff2:	f000 f825 	bl	8005040 <HAL_RCC_GetSysClockFreq>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800502c <HAL_RCC_ClockConfig+0x264>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	091b      	lsrs	r3, r3, #4
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	490c      	ldr	r1, [pc, #48]	@ (8005034 <HAL_RCC_ClockConfig+0x26c>)
 8005004:	5ccb      	ldrb	r3, [r1, r3]
 8005006:	f003 031f 	and.w	r3, r3, #31
 800500a:	fa22 f303 	lsr.w	r3, r2, r3
 800500e:	4a0a      	ldr	r2, [pc, #40]	@ (8005038 <HAL_RCC_ClockConfig+0x270>)
 8005010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005012:	4b0a      	ldr	r3, [pc, #40]	@ (800503c <HAL_RCC_ClockConfig+0x274>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f7fc fbf8 	bl	800180c <HAL_InitTick>
 800501c:	4603      	mov	r3, r0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	40022000 	.word	0x40022000
 800502c:	40021000 	.word	0x40021000
 8005030:	04c4b400 	.word	0x04c4b400
 8005034:	0800a768 	.word	0x0800a768
 8005038:	20000000 	.word	0x20000000
 800503c:	20000004 	.word	0x20000004

08005040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005046:	4b2c      	ldr	r3, [pc, #176]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 030c 	and.w	r3, r3, #12
 800504e:	2b04      	cmp	r3, #4
 8005050:	d102      	bne.n	8005058 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005052:	4b2a      	ldr	r3, [pc, #168]	@ (80050fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005054:	613b      	str	r3, [r7, #16]
 8005056:	e047      	b.n	80050e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005058:	4b27      	ldr	r3, [pc, #156]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 030c 	and.w	r3, r3, #12
 8005060:	2b08      	cmp	r3, #8
 8005062:	d102      	bne.n	800506a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005064:	4b25      	ldr	r3, [pc, #148]	@ (80050fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005066:	613b      	str	r3, [r7, #16]
 8005068:	e03e      	b.n	80050e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800506a:	4b23      	ldr	r3, [pc, #140]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 030c 	and.w	r3, r3, #12
 8005072:	2b0c      	cmp	r3, #12
 8005074:	d136      	bne.n	80050e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005076:	4b20      	ldr	r3, [pc, #128]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005080:	4b1d      	ldr	r3, [pc, #116]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	091b      	lsrs	r3, r3, #4
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	3301      	adds	r3, #1
 800508c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2b03      	cmp	r3, #3
 8005092:	d10c      	bne.n	80050ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005094:	4a19      	ldr	r2, [pc, #100]	@ (80050fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	fbb2 f3f3 	udiv	r3, r2, r3
 800509c:	4a16      	ldr	r2, [pc, #88]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800509e:	68d2      	ldr	r2, [r2, #12]
 80050a0:	0a12      	lsrs	r2, r2, #8
 80050a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050a6:	fb02 f303 	mul.w	r3, r2, r3
 80050aa:	617b      	str	r3, [r7, #20]
      break;
 80050ac:	e00c      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050ae:	4a13      	ldr	r2, [pc, #76]	@ (80050fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b6:	4a10      	ldr	r2, [pc, #64]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050b8:	68d2      	ldr	r2, [r2, #12]
 80050ba:	0a12      	lsrs	r2, r2, #8
 80050bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050c0:	fb02 f303 	mul.w	r3, r2, r3
 80050c4:	617b      	str	r3, [r7, #20]
      break;
 80050c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050c8:	4b0b      	ldr	r3, [pc, #44]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	0e5b      	lsrs	r3, r3, #25
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	3301      	adds	r3, #1
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	e001      	b.n	80050e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80050e8:	693b      	ldr	r3, [r7, #16]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	371c      	adds	r7, #28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40021000 	.word	0x40021000
 80050fc:	00f42400 	.word	0x00f42400

08005100 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005104:	4b03      	ldr	r3, [pc, #12]	@ (8005114 <HAL_RCC_GetHCLKFreq+0x14>)
 8005106:	681b      	ldr	r3, [r3, #0]
}
 8005108:	4618      	mov	r0, r3
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	20000000 	.word	0x20000000

08005118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800511c:	f7ff fff0 	bl	8005100 <HAL_RCC_GetHCLKFreq>
 8005120:	4602      	mov	r2, r0
 8005122:	4b06      	ldr	r3, [pc, #24]	@ (800513c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	0a1b      	lsrs	r3, r3, #8
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	4904      	ldr	r1, [pc, #16]	@ (8005140 <HAL_RCC_GetPCLK1Freq+0x28>)
 800512e:	5ccb      	ldrb	r3, [r1, r3]
 8005130:	f003 031f 	and.w	r3, r3, #31
 8005134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005138:	4618      	mov	r0, r3
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40021000 	.word	0x40021000
 8005140:	0800a778 	.word	0x0800a778

08005144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005148:	f7ff ffda 	bl	8005100 <HAL_RCC_GetHCLKFreq>
 800514c:	4602      	mov	r2, r0
 800514e:	4b06      	ldr	r3, [pc, #24]	@ (8005168 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	0adb      	lsrs	r3, r3, #11
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	4904      	ldr	r1, [pc, #16]	@ (800516c <HAL_RCC_GetPCLK2Freq+0x28>)
 800515a:	5ccb      	ldrb	r3, [r1, r3]
 800515c:	f003 031f 	and.w	r3, r3, #31
 8005160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005164:	4618      	mov	r0, r3
 8005166:	bd80      	pop	{r7, pc}
 8005168:	40021000 	.word	0x40021000
 800516c:	0800a778 	.word	0x0800a778

08005170 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	220f      	movs	r2, #15
 800517e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005180:	4b12      	ldr	r3, [pc, #72]	@ (80051cc <HAL_RCC_GetClockConfig+0x5c>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 0203 	and.w	r2, r3, #3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800518c:	4b0f      	ldr	r3, [pc, #60]	@ (80051cc <HAL_RCC_GetClockConfig+0x5c>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005198:	4b0c      	ldr	r3, [pc, #48]	@ (80051cc <HAL_RCC_GetClockConfig+0x5c>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80051a4:	4b09      	ldr	r3, [pc, #36]	@ (80051cc <HAL_RCC_GetClockConfig+0x5c>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	08db      	lsrs	r3, r3, #3
 80051aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80051b2:	4b07      	ldr	r3, [pc, #28]	@ (80051d0 <HAL_RCC_GetClockConfig+0x60>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 020f 	and.w	r2, r3, #15
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	601a      	str	r2, [r3, #0]
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40021000 	.word	0x40021000
 80051d0:	40022000 	.word	0x40022000

080051d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051da:	4b1e      	ldr	r3, [pc, #120]	@ (8005254 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005254 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	091b      	lsrs	r3, r3, #4
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	3301      	adds	r3, #1
 80051f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d10c      	bne.n	8005212 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051f8:	4a17      	ldr	r2, [pc, #92]	@ (8005258 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005200:	4a14      	ldr	r2, [pc, #80]	@ (8005254 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005202:	68d2      	ldr	r2, [r2, #12]
 8005204:	0a12      	lsrs	r2, r2, #8
 8005206:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800520a:	fb02 f303 	mul.w	r3, r2, r3
 800520e:	617b      	str	r3, [r7, #20]
    break;
 8005210:	e00c      	b.n	800522c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005212:	4a11      	ldr	r2, [pc, #68]	@ (8005258 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	fbb2 f3f3 	udiv	r3, r2, r3
 800521a:	4a0e      	ldr	r2, [pc, #56]	@ (8005254 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800521c:	68d2      	ldr	r2, [r2, #12]
 800521e:	0a12      	lsrs	r2, r2, #8
 8005220:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005224:	fb02 f303 	mul.w	r3, r2, r3
 8005228:	617b      	str	r3, [r7, #20]
    break;
 800522a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800522c:	4b09      	ldr	r3, [pc, #36]	@ (8005254 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	0e5b      	lsrs	r3, r3, #25
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	3301      	adds	r3, #1
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	fbb2 f3f3 	udiv	r3, r2, r3
 8005244:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005246:	687b      	ldr	r3, [r7, #4]
}
 8005248:	4618      	mov	r0, r3
 800524a:	371c      	adds	r7, #28
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	40021000 	.word	0x40021000
 8005258:	00f42400 	.word	0x00f42400

0800525c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005264:	2300      	movs	r3, #0
 8005266:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005268:	2300      	movs	r3, #0
 800526a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 8098 	beq.w	80053aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800527a:	2300      	movs	r3, #0
 800527c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800527e:	4b43      	ldr	r3, [pc, #268]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10d      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800528a:	4b40      	ldr	r3, [pc, #256]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800528c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800528e:	4a3f      	ldr	r2, [pc, #252]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005294:	6593      	str	r3, [r2, #88]	@ 0x58
 8005296:	4b3d      	ldr	r3, [pc, #244]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800529a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800529e:	60bb      	str	r3, [r7, #8]
 80052a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052a2:	2301      	movs	r3, #1
 80052a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052a6:	4b3a      	ldr	r3, [pc, #232]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a39      	ldr	r2, [pc, #228]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052b2:	f7fd f8c9 	bl	8002448 <HAL_GetTick>
 80052b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052b8:	e009      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ba:	f7fd f8c5 	bl	8002448 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d902      	bls.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	74fb      	strb	r3, [r7, #19]
        break;
 80052cc:	e005      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052ce:	4b30      	ldr	r3, [pc, #192]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0ef      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80052da:	7cfb      	ldrb	r3, [r7, #19]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d159      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052e0:	4b2a      	ldr	r3, [pc, #168]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d01e      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d019      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052fc:	4b23      	ldr	r3, [pc, #140]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005302:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005306:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005308:	4b20      	ldr	r3, [pc, #128]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800530a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530e:	4a1f      	ldr	r2, [pc, #124]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005314:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005318:	4b1c      	ldr	r3, [pc, #112]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800531a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800531e:	4a1b      	ldr	r2, [pc, #108]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005320:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005324:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005328:	4a18      	ldr	r2, [pc, #96]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d016      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533a:	f7fd f885 	bl	8002448 <HAL_GetTick>
 800533e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005340:	e00b      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005342:	f7fd f881 	bl	8002448 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005350:	4293      	cmp	r3, r2
 8005352:	d902      	bls.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	74fb      	strb	r3, [r7, #19]
            break;
 8005358:	e006      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800535a:	4b0c      	ldr	r3, [pc, #48]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0ec      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005368:	7cfb      	ldrb	r3, [r7, #19]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10b      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800536e:	4b07      	ldr	r3, [pc, #28]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005374:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537c:	4903      	ldr	r1, [pc, #12]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005384:	e008      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005386:	7cfb      	ldrb	r3, [r7, #19]
 8005388:	74bb      	strb	r3, [r7, #18]
 800538a:	e005      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800538c:	40021000 	.word	0x40021000
 8005390:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005394:	7cfb      	ldrb	r3, [r7, #19]
 8005396:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005398:	7c7b      	ldrb	r3, [r7, #17]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d105      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800539e:	4ba6      	ldr	r3, [pc, #664]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a2:	4aa5      	ldr	r2, [pc, #660]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053b6:	4ba0      	ldr	r3, [pc, #640]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053bc:	f023 0203 	bic.w	r2, r3, #3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	499c      	ldr	r1, [pc, #624]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053d8:	4b97      	ldr	r3, [pc, #604]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053de:	f023 020c 	bic.w	r2, r3, #12
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	4994      	ldr	r1, [pc, #592]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0304 	and.w	r3, r3, #4
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053fa:	4b8f      	ldr	r3, [pc, #572]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005400:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	498b      	ldr	r1, [pc, #556]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0308 	and.w	r3, r3, #8
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800541c:	4b86      	ldr	r3, [pc, #536]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005422:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	4983      	ldr	r1, [pc, #524]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800543e:	4b7e      	ldr	r3, [pc, #504]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005444:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	497a      	ldr	r1, [pc, #488]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005460:	4b75      	ldr	r3, [pc, #468]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005466:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	4972      	ldr	r1, [pc, #456]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005482:	4b6d      	ldr	r3, [pc, #436]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005488:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	4969      	ldr	r1, [pc, #420]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054a4:	4b64      	ldr	r3, [pc, #400]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	4961      	ldr	r1, [pc, #388]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054c6:	4b5c      	ldr	r3, [pc, #368]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d4:	4958      	ldr	r1, [pc, #352]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d015      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054e8:	4b53      	ldr	r3, [pc, #332]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f6:	4950      	ldr	r1, [pc, #320]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005502:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005506:	d105      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005508:	4b4b      	ldr	r3, [pc, #300]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	4a4a      	ldr	r2, [pc, #296]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800550e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005512:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800551c:	2b00      	cmp	r3, #0
 800551e:	d015      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005520:	4b45      	ldr	r3, [pc, #276]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005526:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552e:	4942      	ldr	r1, [pc, #264]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005530:	4313      	orrs	r3, r2
 8005532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800553e:	d105      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005540:	4b3d      	ldr	r3, [pc, #244]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	4a3c      	ldr	r2, [pc, #240]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005546:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800554a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d015      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005558:	4b37      	ldr	r3, [pc, #220]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800555a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800555e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005566:	4934      	ldr	r1, [pc, #208]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005568:	4313      	orrs	r3, r2
 800556a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005572:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005576:	d105      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005578:	4b2f      	ldr	r3, [pc, #188]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	4a2e      	ldr	r2, [pc, #184]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800557e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005582:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d015      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005590:	4b29      	ldr	r3, [pc, #164]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005596:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800559e:	4926      	ldr	r1, [pc, #152]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055ae:	d105      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055b0:	4b21      	ldr	r3, [pc, #132]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	4a20      	ldr	r2, [pc, #128]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d015      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d6:	4918      	ldr	r1, [pc, #96]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055e6:	d105      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055e8:	4b13      	ldr	r3, [pc, #76]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	4a12      	ldr	r2, [pc, #72]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d015      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005600:	4b0d      	ldr	r3, [pc, #52]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005606:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800560e:	490a      	ldr	r1, [pc, #40]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005610:	4313      	orrs	r3, r2
 8005612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800561e:	d105      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005620:	4b05      	ldr	r3, [pc, #20]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	4a04      	ldr	r2, [pc, #16]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005626:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800562a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800562c:	7cbb      	ldrb	r3, [r7, #18]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40021000 	.word	0x40021000

0800563c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e049      	b.n	80056e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7fc fcce 	bl	8002004 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3304      	adds	r3, #4
 8005678:	4619      	mov	r1, r3
 800567a:	4610      	mov	r0, r2
 800567c:	f000 fcb6 	bl	8005fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d001      	beq.n	8005704 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e04a      	b.n	800579a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0201 	orr.w	r2, r2, #1
 800571a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a21      	ldr	r2, [pc, #132]	@ (80057a8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d018      	beq.n	8005758 <HAL_TIM_Base_Start_IT+0x6c>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800572e:	d013      	beq.n	8005758 <HAL_TIM_Base_Start_IT+0x6c>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a1d      	ldr	r2, [pc, #116]	@ (80057ac <HAL_TIM_Base_Start_IT+0xc0>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d00e      	beq.n	8005758 <HAL_TIM_Base_Start_IT+0x6c>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a1c      	ldr	r2, [pc, #112]	@ (80057b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d009      	beq.n	8005758 <HAL_TIM_Base_Start_IT+0x6c>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1a      	ldr	r2, [pc, #104]	@ (80057b4 <HAL_TIM_Base_Start_IT+0xc8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d004      	beq.n	8005758 <HAL_TIM_Base_Start_IT+0x6c>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a19      	ldr	r2, [pc, #100]	@ (80057b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d115      	bne.n	8005784 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	4b17      	ldr	r3, [pc, #92]	@ (80057bc <HAL_TIM_Base_Start_IT+0xd0>)
 8005760:	4013      	ands	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b06      	cmp	r3, #6
 8005768:	d015      	beq.n	8005796 <HAL_TIM_Base_Start_IT+0xaa>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005770:	d011      	beq.n	8005796 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f042 0201 	orr.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005782:	e008      	b.n	8005796 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	e000      	b.n	8005798 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005796:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	40012c00 	.word	0x40012c00
 80057ac:	40000400 	.word	0x40000400
 80057b0:	40000800 	.word	0x40000800
 80057b4:	40013400 	.word	0x40013400
 80057b8:	40014000 	.word	0x40014000
 80057bc:	00010007 	.word	0x00010007

080057c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e049      	b.n	8005866 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7fc fb58 	bl	8001e9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3304      	adds	r3, #4
 80057fc:	4619      	mov	r1, r3
 80057fe:	4610      	mov	r0, r2
 8005800:	f000 fbf4 	bl	8005fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b086      	sub	sp, #24
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e097      	b.n	80059b2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7fc fb20 	bl	8001edc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6812      	ldr	r2, [r2, #0]
 80058ae:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80058b2:	f023 0307 	bic.w	r3, r3, #7
 80058b6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3304      	adds	r3, #4
 80058c0:	4619      	mov	r1, r3
 80058c2:	4610      	mov	r0, r2
 80058c4:	f000 fb92 	bl	8005fec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058f0:	f023 0303 	bic.w	r3, r3, #3
 80058f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	021b      	lsls	r3, r3, #8
 8005900:	4313      	orrs	r3, r2
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800590e:	f023 030c 	bic.w	r3, r3, #12
 8005912:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800591a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800591e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	021b      	lsls	r3, r3, #8
 800592a:	4313      	orrs	r3, r2
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4313      	orrs	r3, r2
 8005930:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	011a      	lsls	r2, r3, #4
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	031b      	lsls	r3, r3, #12
 800593e:	4313      	orrs	r3, r2
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800594c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005954:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	4313      	orrs	r3, r2
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4313      	orrs	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b084      	sub	sp, #16
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059ca:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059d2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059da:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059e2:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d110      	bne.n	8005a0c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d102      	bne.n	80059f6 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80059f0:	7b7b      	ldrb	r3, [r7, #13]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d001      	beq.n	80059fa <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e069      	b.n	8005ace <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2202      	movs	r2, #2
 80059fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2202      	movs	r2, #2
 8005a06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a0a:	e031      	b.n	8005a70 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d110      	bne.n	8005a34 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a12:	7bbb      	ldrb	r3, [r7, #14]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d102      	bne.n	8005a1e <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a18:	7b3b      	ldrb	r3, [r7, #12]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d001      	beq.n	8005a22 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e055      	b.n	8005ace <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2202      	movs	r2, #2
 8005a26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a32:	e01d      	b.n	8005a70 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d108      	bne.n	8005a4c <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a3a:	7bbb      	ldrb	r3, [r7, #14]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d105      	bne.n	8005a4c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a40:	7b7b      	ldrb	r3, [r7, #13]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d102      	bne.n	8005a4c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a46:	7b3b      	ldrb	r3, [r7, #12]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d001      	beq.n	8005a50 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e03e      	b.n	8005ace <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_TIM_Encoder_Start+0xc4>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d008      	beq.n	8005a8e <HAL_TIM_Encoder_Start+0xd4>
 8005a7c:	e00f      	b.n	8005a9e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2201      	movs	r2, #1
 8005a84:	2100      	movs	r1, #0
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fe42 	bl	8006710 <TIM_CCxChannelCmd>
      break;
 8005a8c:	e016      	b.n	8005abc <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2201      	movs	r2, #1
 8005a94:	2104      	movs	r1, #4
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fe3a 	bl	8006710 <TIM_CCxChannelCmd>
      break;
 8005a9c:	e00e      	b.n	8005abc <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 fe32 	bl	8006710 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	2104      	movs	r1, #4
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 fe2b 	bl	8006710 <TIM_CCxChannelCmd>
      break;
 8005aba:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b084      	sub	sp, #16
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d020      	beq.n	8005b3a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d01b      	beq.n	8005b3a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f06f 0202 	mvn.w	r2, #2
 8005b0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	f003 0303 	and.w	r3, r3, #3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fa45 	bl	8005fb0 <HAL_TIM_IC_CaptureCallback>
 8005b26:	e005      	b.n	8005b34 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fa37 	bl	8005f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fa48 	bl	8005fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d020      	beq.n	8005b86 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d01b      	beq.n	8005b86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f06f 0204 	mvn.w	r2, #4
 8005b56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fa1f 	bl	8005fb0 <HAL_TIM_IC_CaptureCallback>
 8005b72:	e005      	b.n	8005b80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fa11 	bl	8005f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fa22 	bl	8005fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d020      	beq.n	8005bd2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d01b      	beq.n	8005bd2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f06f 0208 	mvn.w	r2, #8
 8005ba2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2204      	movs	r2, #4
 8005ba8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	f003 0303 	and.w	r3, r3, #3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f9f9 	bl	8005fb0 <HAL_TIM_IC_CaptureCallback>
 8005bbe:	e005      	b.n	8005bcc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f9eb 	bl	8005f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f9fc 	bl	8005fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	f003 0310 	and.w	r3, r3, #16
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d020      	beq.n	8005c1e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f003 0310 	and.w	r3, r3, #16
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d01b      	beq.n	8005c1e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f06f 0210 	mvn.w	r2, #16
 8005bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2208      	movs	r2, #8
 8005bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f9d3 	bl	8005fb0 <HAL_TIM_IC_CaptureCallback>
 8005c0a:	e005      	b.n	8005c18 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f9c5 	bl	8005f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f9d6 	bl	8005fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00c      	beq.n	8005c42 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d007      	beq.n	8005c42 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f06f 0201 	mvn.w	r2, #1
 8005c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7fb fda9 	bl	8001794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d104      	bne.n	8005c56 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00c      	beq.n	8005c70 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d007      	beq.n	8005c70 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 ff42 	bl	8006af4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00c      	beq.n	8005c94 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d007      	beq.n	8005c94 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 ff3a 	bl	8006b08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00c      	beq.n	8005cb8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d007      	beq.n	8005cb8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f990 	bl	8005fd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00c      	beq.n	8005cdc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d007      	beq.n	8005cdc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f06f 0220 	mvn.w	r2, #32
 8005cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 ff02 	bl	8006ae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00c      	beq.n	8005d00 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d007      	beq.n	8005d00 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 ff0e 	bl	8006b1c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00c      	beq.n	8005d24 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d007      	beq.n	8005d24 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 ff06 	bl	8006b30 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00c      	beq.n	8005d48 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d007      	beq.n	8005d48 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fefe 	bl	8006b44 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00c      	beq.n	8005d6c <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d007      	beq.n	8005d6c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fef6 	bl	8006b58 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d6c:	bf00      	nop
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	e0ff      	b.n	8005f92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b14      	cmp	r3, #20
 8005d9e:	f200 80f0 	bhi.w	8005f82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005da2:	a201      	add	r2, pc, #4	@ (adr r2, 8005da8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da8:	08005dfd 	.word	0x08005dfd
 8005dac:	08005f83 	.word	0x08005f83
 8005db0:	08005f83 	.word	0x08005f83
 8005db4:	08005f83 	.word	0x08005f83
 8005db8:	08005e3d 	.word	0x08005e3d
 8005dbc:	08005f83 	.word	0x08005f83
 8005dc0:	08005f83 	.word	0x08005f83
 8005dc4:	08005f83 	.word	0x08005f83
 8005dc8:	08005e7f 	.word	0x08005e7f
 8005dcc:	08005f83 	.word	0x08005f83
 8005dd0:	08005f83 	.word	0x08005f83
 8005dd4:	08005f83 	.word	0x08005f83
 8005dd8:	08005ebf 	.word	0x08005ebf
 8005ddc:	08005f83 	.word	0x08005f83
 8005de0:	08005f83 	.word	0x08005f83
 8005de4:	08005f83 	.word	0x08005f83
 8005de8:	08005f01 	.word	0x08005f01
 8005dec:	08005f83 	.word	0x08005f83
 8005df0:	08005f83 	.word	0x08005f83
 8005df4:	08005f83 	.word	0x08005f83
 8005df8:	08005f41 	.word	0x08005f41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68b9      	ldr	r1, [r7, #8]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 f98e 	bl	8006124 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	699a      	ldr	r2, [r3, #24]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0208 	orr.w	r2, r2, #8
 8005e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0204 	bic.w	r2, r2, #4
 8005e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6999      	ldr	r1, [r3, #24]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	691a      	ldr	r2, [r3, #16]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	619a      	str	r2, [r3, #24]
      break;
 8005e3a:	e0a5      	b.n	8005f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68b9      	ldr	r1, [r7, #8]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 f9fe 	bl	8006244 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6999      	ldr	r1, [r3, #24]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	021a      	lsls	r2, r3, #8
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	619a      	str	r2, [r3, #24]
      break;
 8005e7c:	e084      	b.n	8005f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 fa67 	bl	8006358 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69da      	ldr	r2, [r3, #28]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f042 0208 	orr.w	r2, r2, #8
 8005e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69da      	ldr	r2, [r3, #28]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0204 	bic.w	r2, r2, #4
 8005ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69d9      	ldr	r1, [r3, #28]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	691a      	ldr	r2, [r3, #16]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	61da      	str	r2, [r3, #28]
      break;
 8005ebc:	e064      	b.n	8005f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68b9      	ldr	r1, [r7, #8]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 facf 	bl	8006468 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69da      	ldr	r2, [r3, #28]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ed8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69da      	ldr	r2, [r3, #28]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69d9      	ldr	r1, [r3, #28]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	021a      	lsls	r2, r3, #8
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	61da      	str	r2, [r3, #28]
      break;
 8005efe:	e043      	b.n	8005f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68b9      	ldr	r1, [r7, #8]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 fb38 	bl	800657c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0208 	orr.w	r2, r2, #8
 8005f1a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0204 	bic.w	r2, r2, #4
 8005f2a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	691a      	ldr	r2, [r3, #16]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005f3e:	e023      	b.n	8005f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68b9      	ldr	r1, [r7, #8]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 fb7c 	bl	8006644 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f5a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f6a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	021a      	lsls	r2, r3, #8
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005f80:	e002      	b.n	8005f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	75fb      	strb	r3, [r7, #23]
      break;
 8005f86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop

08005f9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a42      	ldr	r2, [pc, #264]	@ (8006108 <TIM_Base_SetConfig+0x11c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d00f      	beq.n	8006024 <TIM_Base_SetConfig+0x38>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800600a:	d00b      	beq.n	8006024 <TIM_Base_SetConfig+0x38>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a3f      	ldr	r2, [pc, #252]	@ (800610c <TIM_Base_SetConfig+0x120>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d007      	beq.n	8006024 <TIM_Base_SetConfig+0x38>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a3e      	ldr	r2, [pc, #248]	@ (8006110 <TIM_Base_SetConfig+0x124>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d003      	beq.n	8006024 <TIM_Base_SetConfig+0x38>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a3d      	ldr	r2, [pc, #244]	@ (8006114 <TIM_Base_SetConfig+0x128>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d108      	bne.n	8006036 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800602a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a33      	ldr	r2, [pc, #204]	@ (8006108 <TIM_Base_SetConfig+0x11c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d01b      	beq.n	8006076 <TIM_Base_SetConfig+0x8a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006044:	d017      	beq.n	8006076 <TIM_Base_SetConfig+0x8a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a30      	ldr	r2, [pc, #192]	@ (800610c <TIM_Base_SetConfig+0x120>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d013      	beq.n	8006076 <TIM_Base_SetConfig+0x8a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a2f      	ldr	r2, [pc, #188]	@ (8006110 <TIM_Base_SetConfig+0x124>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d00f      	beq.n	8006076 <TIM_Base_SetConfig+0x8a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a2e      	ldr	r2, [pc, #184]	@ (8006114 <TIM_Base_SetConfig+0x128>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00b      	beq.n	8006076 <TIM_Base_SetConfig+0x8a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a2d      	ldr	r2, [pc, #180]	@ (8006118 <TIM_Base_SetConfig+0x12c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d007      	beq.n	8006076 <TIM_Base_SetConfig+0x8a>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a2c      	ldr	r2, [pc, #176]	@ (800611c <TIM_Base_SetConfig+0x130>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d003      	beq.n	8006076 <TIM_Base_SetConfig+0x8a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a2b      	ldr	r2, [pc, #172]	@ (8006120 <TIM_Base_SetConfig+0x134>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d108      	bne.n	8006088 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800607c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4313      	orrs	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a16      	ldr	r2, [pc, #88]	@ (8006108 <TIM_Base_SetConfig+0x11c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d00f      	beq.n	80060d4 <TIM_Base_SetConfig+0xe8>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a17      	ldr	r2, [pc, #92]	@ (8006114 <TIM_Base_SetConfig+0x128>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00b      	beq.n	80060d4 <TIM_Base_SetConfig+0xe8>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a16      	ldr	r2, [pc, #88]	@ (8006118 <TIM_Base_SetConfig+0x12c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d007      	beq.n	80060d4 <TIM_Base_SetConfig+0xe8>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a15      	ldr	r2, [pc, #84]	@ (800611c <TIM_Base_SetConfig+0x130>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d003      	beq.n	80060d4 <TIM_Base_SetConfig+0xe8>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a14      	ldr	r2, [pc, #80]	@ (8006120 <TIM_Base_SetConfig+0x134>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d103      	bne.n	80060dc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	691a      	ldr	r2, [r3, #16]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d105      	bne.n	80060fa <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f023 0201 	bic.w	r2, r3, #1
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	611a      	str	r2, [r3, #16]
  }
}
 80060fa:	bf00      	nop
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40012c00 	.word	0x40012c00
 800610c:	40000400 	.word	0x40000400
 8006110:	40000800 	.word	0x40000800
 8006114:	40013400 	.word	0x40013400
 8006118:	40014000 	.word	0x40014000
 800611c:	40014400 	.word	0x40014400
 8006120:	40014800 	.word	0x40014800

08006124 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	f023 0201 	bic.w	r2, r3, #1
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f023 0303 	bic.w	r3, r3, #3
 800615e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	4313      	orrs	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f023 0302 	bic.w	r3, r3, #2
 8006170:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	4313      	orrs	r3, r2
 800617a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a2c      	ldr	r2, [pc, #176]	@ (8006230 <TIM_OC1_SetConfig+0x10c>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d00f      	beq.n	80061a4 <TIM_OC1_SetConfig+0x80>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a2b      	ldr	r2, [pc, #172]	@ (8006234 <TIM_OC1_SetConfig+0x110>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00b      	beq.n	80061a4 <TIM_OC1_SetConfig+0x80>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a2a      	ldr	r2, [pc, #168]	@ (8006238 <TIM_OC1_SetConfig+0x114>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d007      	beq.n	80061a4 <TIM_OC1_SetConfig+0x80>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a29      	ldr	r2, [pc, #164]	@ (800623c <TIM_OC1_SetConfig+0x118>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d003      	beq.n	80061a4 <TIM_OC1_SetConfig+0x80>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a28      	ldr	r2, [pc, #160]	@ (8006240 <TIM_OC1_SetConfig+0x11c>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d10c      	bne.n	80061be <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f023 0308 	bic.w	r3, r3, #8
 80061aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f023 0304 	bic.w	r3, r3, #4
 80061bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006230 <TIM_OC1_SetConfig+0x10c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d00f      	beq.n	80061e6 <TIM_OC1_SetConfig+0xc2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a1a      	ldr	r2, [pc, #104]	@ (8006234 <TIM_OC1_SetConfig+0x110>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d00b      	beq.n	80061e6 <TIM_OC1_SetConfig+0xc2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a19      	ldr	r2, [pc, #100]	@ (8006238 <TIM_OC1_SetConfig+0x114>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d007      	beq.n	80061e6 <TIM_OC1_SetConfig+0xc2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a18      	ldr	r2, [pc, #96]	@ (800623c <TIM_OC1_SetConfig+0x118>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d003      	beq.n	80061e6 <TIM_OC1_SetConfig+0xc2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a17      	ldr	r2, [pc, #92]	@ (8006240 <TIM_OC1_SetConfig+0x11c>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d111      	bne.n	800620a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4313      	orrs	r3, r2
 8006208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	621a      	str	r2, [r3, #32]
}
 8006224:	bf00      	nop
 8006226:	371c      	adds	r7, #28
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	40012c00 	.word	0x40012c00
 8006234:	40013400 	.word	0x40013400
 8006238:	40014000 	.word	0x40014000
 800623c:	40014400 	.word	0x40014400
 8006240:	40014800 	.word	0x40014800

08006244 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	f023 0210 	bic.w	r2, r3, #16
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006272:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800627e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	021b      	lsls	r3, r3, #8
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	4313      	orrs	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f023 0320 	bic.w	r3, r3, #32
 8006292:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	011b      	lsls	r3, r3, #4
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	4313      	orrs	r3, r2
 800629e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a28      	ldr	r2, [pc, #160]	@ (8006344 <TIM_OC2_SetConfig+0x100>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d003      	beq.n	80062b0 <TIM_OC2_SetConfig+0x6c>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a27      	ldr	r2, [pc, #156]	@ (8006348 <TIM_OC2_SetConfig+0x104>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d10d      	bne.n	80062cc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006344 <TIM_OC2_SetConfig+0x100>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d00f      	beq.n	80062f4 <TIM_OC2_SetConfig+0xb0>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a1c      	ldr	r2, [pc, #112]	@ (8006348 <TIM_OC2_SetConfig+0x104>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d00b      	beq.n	80062f4 <TIM_OC2_SetConfig+0xb0>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a1b      	ldr	r2, [pc, #108]	@ (800634c <TIM_OC2_SetConfig+0x108>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d007      	beq.n	80062f4 <TIM_OC2_SetConfig+0xb0>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a1a      	ldr	r2, [pc, #104]	@ (8006350 <TIM_OC2_SetConfig+0x10c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d003      	beq.n	80062f4 <TIM_OC2_SetConfig+0xb0>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a19      	ldr	r2, [pc, #100]	@ (8006354 <TIM_OC2_SetConfig+0x110>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d113      	bne.n	800631c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006302:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	621a      	str	r2, [r3, #32]
}
 8006336:	bf00      	nop
 8006338:	371c      	adds	r7, #28
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	40012c00 	.word	0x40012c00
 8006348:	40013400 	.word	0x40013400
 800634c:	40014000 	.word	0x40014000
 8006350:	40014400 	.word	0x40014400
 8006354:	40014800 	.word	0x40014800

08006358 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800638a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f023 0303 	bic.w	r3, r3, #3
 8006392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	021b      	lsls	r3, r3, #8
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a27      	ldr	r2, [pc, #156]	@ (8006454 <TIM_OC3_SetConfig+0xfc>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d003      	beq.n	80063c2 <TIM_OC3_SetConfig+0x6a>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a26      	ldr	r2, [pc, #152]	@ (8006458 <TIM_OC3_SetConfig+0x100>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d10d      	bne.n	80063de <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	021b      	lsls	r3, r3, #8
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a1c      	ldr	r2, [pc, #112]	@ (8006454 <TIM_OC3_SetConfig+0xfc>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00f      	beq.n	8006406 <TIM_OC3_SetConfig+0xae>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006458 <TIM_OC3_SetConfig+0x100>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d00b      	beq.n	8006406 <TIM_OC3_SetConfig+0xae>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a1a      	ldr	r2, [pc, #104]	@ (800645c <TIM_OC3_SetConfig+0x104>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d007      	beq.n	8006406 <TIM_OC3_SetConfig+0xae>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a19      	ldr	r2, [pc, #100]	@ (8006460 <TIM_OC3_SetConfig+0x108>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d003      	beq.n	8006406 <TIM_OC3_SetConfig+0xae>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a18      	ldr	r2, [pc, #96]	@ (8006464 <TIM_OC3_SetConfig+0x10c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d113      	bne.n	800642e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800640c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	011b      	lsls	r3, r3, #4
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	4313      	orrs	r3, r2
 8006420:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	4313      	orrs	r3, r2
 800642c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	621a      	str	r2, [r3, #32]
}
 8006448:	bf00      	nop
 800644a:	371c      	adds	r7, #28
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	40012c00 	.word	0x40012c00
 8006458:	40013400 	.word	0x40013400
 800645c:	40014000 	.word	0x40014000
 8006460:	40014400 	.word	0x40014400
 8006464:	40014800 	.word	0x40014800

08006468 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006468:	b480      	push	{r7}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006496:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800649a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	021b      	lsls	r3, r3, #8
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	031b      	lsls	r3, r3, #12
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a28      	ldr	r2, [pc, #160]	@ (8006568 <TIM_OC4_SetConfig+0x100>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d003      	beq.n	80064d4 <TIM_OC4_SetConfig+0x6c>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a27      	ldr	r2, [pc, #156]	@ (800656c <TIM_OC4_SetConfig+0x104>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d10d      	bne.n	80064f0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	031b      	lsls	r3, r3, #12
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a1d      	ldr	r2, [pc, #116]	@ (8006568 <TIM_OC4_SetConfig+0x100>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00f      	beq.n	8006518 <TIM_OC4_SetConfig+0xb0>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a1c      	ldr	r2, [pc, #112]	@ (800656c <TIM_OC4_SetConfig+0x104>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d00b      	beq.n	8006518 <TIM_OC4_SetConfig+0xb0>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a1b      	ldr	r2, [pc, #108]	@ (8006570 <TIM_OC4_SetConfig+0x108>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d007      	beq.n	8006518 <TIM_OC4_SetConfig+0xb0>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a1a      	ldr	r2, [pc, #104]	@ (8006574 <TIM_OC4_SetConfig+0x10c>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d003      	beq.n	8006518 <TIM_OC4_SetConfig+0xb0>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a19      	ldr	r2, [pc, #100]	@ (8006578 <TIM_OC4_SetConfig+0x110>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d113      	bne.n	8006540 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800651e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006526:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	019b      	lsls	r3, r3, #6
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	4313      	orrs	r3, r2
 8006532:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	019b      	lsls	r3, r3, #6
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	4313      	orrs	r3, r2
 800653e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	621a      	str	r2, [r3, #32]
}
 800655a:	bf00      	nop
 800655c:	371c      	adds	r7, #28
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	40012c00 	.word	0x40012c00
 800656c:	40013400 	.word	0x40013400
 8006570:	40014000 	.word	0x40014000
 8006574:	40014400 	.word	0x40014400
 8006578:	40014800 	.word	0x40014800

0800657c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80065c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	041b      	lsls	r3, r3, #16
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a17      	ldr	r2, [pc, #92]	@ (8006630 <TIM_OC5_SetConfig+0xb4>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d00f      	beq.n	80065f6 <TIM_OC5_SetConfig+0x7a>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a16      	ldr	r2, [pc, #88]	@ (8006634 <TIM_OC5_SetConfig+0xb8>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d00b      	beq.n	80065f6 <TIM_OC5_SetConfig+0x7a>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a15      	ldr	r2, [pc, #84]	@ (8006638 <TIM_OC5_SetConfig+0xbc>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d007      	beq.n	80065f6 <TIM_OC5_SetConfig+0x7a>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a14      	ldr	r2, [pc, #80]	@ (800663c <TIM_OC5_SetConfig+0xc0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d003      	beq.n	80065f6 <TIM_OC5_SetConfig+0x7a>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a13      	ldr	r2, [pc, #76]	@ (8006640 <TIM_OC5_SetConfig+0xc4>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d109      	bne.n	800660a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	021b      	lsls	r3, r3, #8
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	4313      	orrs	r3, r2
 8006608:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	685a      	ldr	r2, [r3, #4]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	621a      	str	r2, [r3, #32]
}
 8006624:	bf00      	nop
 8006626:	371c      	adds	r7, #28
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	40012c00 	.word	0x40012c00
 8006634:	40013400 	.word	0x40013400
 8006638:	40014000 	.word	0x40014000
 800663c:	40014400 	.word	0x40014400
 8006640:	40014800 	.word	0x40014800

08006644 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800666a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	021b      	lsls	r3, r3, #8
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	4313      	orrs	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800668a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	051b      	lsls	r3, r3, #20
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	4313      	orrs	r3, r2
 8006696:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a18      	ldr	r2, [pc, #96]	@ (80066fc <TIM_OC6_SetConfig+0xb8>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d00f      	beq.n	80066c0 <TIM_OC6_SetConfig+0x7c>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a17      	ldr	r2, [pc, #92]	@ (8006700 <TIM_OC6_SetConfig+0xbc>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d00b      	beq.n	80066c0 <TIM_OC6_SetConfig+0x7c>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a16      	ldr	r2, [pc, #88]	@ (8006704 <TIM_OC6_SetConfig+0xc0>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d007      	beq.n	80066c0 <TIM_OC6_SetConfig+0x7c>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a15      	ldr	r2, [pc, #84]	@ (8006708 <TIM_OC6_SetConfig+0xc4>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d003      	beq.n	80066c0 <TIM_OC6_SetConfig+0x7c>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a14      	ldr	r2, [pc, #80]	@ (800670c <TIM_OC6_SetConfig+0xc8>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d109      	bne.n	80066d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	029b      	lsls	r3, r3, #10
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	621a      	str	r2, [r3, #32]
}
 80066ee:	bf00      	nop
 80066f0:	371c      	adds	r7, #28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40012c00 	.word	0x40012c00
 8006700:	40013400 	.word	0x40013400
 8006704:	40014000 	.word	0x40014000
 8006708:	40014400 	.word	0x40014400
 800670c:	40014800 	.word	0x40014800

08006710 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f003 031f 	and.w	r3, r3, #31
 8006722:	2201      	movs	r2, #1
 8006724:	fa02 f303 	lsl.w	r3, r2, r3
 8006728:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6a1a      	ldr	r2, [r3, #32]
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	43db      	mvns	r3, r3
 8006732:	401a      	ands	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6a1a      	ldr	r2, [r3, #32]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f003 031f 	and.w	r3, r3, #31
 8006742:	6879      	ldr	r1, [r7, #4]
 8006744:	fa01 f303 	lsl.w	r3, r1, r3
 8006748:	431a      	orrs	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	621a      	str	r2, [r3, #32]
}
 800674e:	bf00      	nop
 8006750:	371c      	adds	r7, #28
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
	...

0800675c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d109      	bne.n	8006780 <HAL_TIMEx_PWMN_Start+0x24>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b01      	cmp	r3, #1
 8006776:	bf14      	ite	ne
 8006778:	2301      	movne	r3, #1
 800677a:	2300      	moveq	r3, #0
 800677c:	b2db      	uxtb	r3, r3
 800677e:	e022      	b.n	80067c6 <HAL_TIMEx_PWMN_Start+0x6a>
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	2b04      	cmp	r3, #4
 8006784:	d109      	bne.n	800679a <HAL_TIMEx_PWMN_Start+0x3e>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b01      	cmp	r3, #1
 8006790:	bf14      	ite	ne
 8006792:	2301      	movne	r3, #1
 8006794:	2300      	moveq	r3, #0
 8006796:	b2db      	uxtb	r3, r3
 8006798:	e015      	b.n	80067c6 <HAL_TIMEx_PWMN_Start+0x6a>
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b08      	cmp	r3, #8
 800679e:	d109      	bne.n	80067b4 <HAL_TIMEx_PWMN_Start+0x58>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	bf14      	ite	ne
 80067ac:	2301      	movne	r3, #1
 80067ae:	2300      	moveq	r3, #0
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	e008      	b.n	80067c6 <HAL_TIMEx_PWMN_Start+0x6a>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b01      	cmp	r3, #1
 80067be:	bf14      	ite	ne
 80067c0:	2301      	movne	r3, #1
 80067c2:	2300      	moveq	r3, #0
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e069      	b.n	80068a2 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d104      	bne.n	80067de <HAL_TIMEx_PWMN_Start+0x82>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067dc:	e013      	b.n	8006806 <HAL_TIMEx_PWMN_Start+0xaa>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	d104      	bne.n	80067ee <HAL_TIMEx_PWMN_Start+0x92>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2202      	movs	r2, #2
 80067e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067ec:	e00b      	b.n	8006806 <HAL_TIMEx_PWMN_Start+0xaa>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b08      	cmp	r3, #8
 80067f2:	d104      	bne.n	80067fe <HAL_TIMEx_PWMN_Start+0xa2>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80067fc:	e003      	b.n	8006806 <HAL_TIMEx_PWMN_Start+0xaa>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2202      	movs	r2, #2
 8006802:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2204      	movs	r2, #4
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	4618      	mov	r0, r3
 8006810:	f000 f9ac 	bl	8006b6c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006822:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a20      	ldr	r2, [pc, #128]	@ (80068ac <HAL_TIMEx_PWMN_Start+0x150>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d018      	beq.n	8006860 <HAL_TIMEx_PWMN_Start+0x104>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006836:	d013      	beq.n	8006860 <HAL_TIMEx_PWMN_Start+0x104>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a1c      	ldr	r2, [pc, #112]	@ (80068b0 <HAL_TIMEx_PWMN_Start+0x154>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00e      	beq.n	8006860 <HAL_TIMEx_PWMN_Start+0x104>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a1b      	ldr	r2, [pc, #108]	@ (80068b4 <HAL_TIMEx_PWMN_Start+0x158>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d009      	beq.n	8006860 <HAL_TIMEx_PWMN_Start+0x104>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a19      	ldr	r2, [pc, #100]	@ (80068b8 <HAL_TIMEx_PWMN_Start+0x15c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d004      	beq.n	8006860 <HAL_TIMEx_PWMN_Start+0x104>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a18      	ldr	r2, [pc, #96]	@ (80068bc <HAL_TIMEx_PWMN_Start+0x160>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d115      	bne.n	800688c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689a      	ldr	r2, [r3, #8]
 8006866:	4b16      	ldr	r3, [pc, #88]	@ (80068c0 <HAL_TIMEx_PWMN_Start+0x164>)
 8006868:	4013      	ands	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b06      	cmp	r3, #6
 8006870:	d015      	beq.n	800689e <HAL_TIMEx_PWMN_Start+0x142>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006878:	d011      	beq.n	800689e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f042 0201 	orr.w	r2, r2, #1
 8006888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800688a:	e008      	b.n	800689e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 0201 	orr.w	r2, r2, #1
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	e000      	b.n	80068a0 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800689e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	40012c00 	.word	0x40012c00
 80068b0:	40000400 	.word	0x40000400
 80068b4:	40000800 	.word	0x40000800
 80068b8:	40013400 	.word	0x40013400
 80068bc:	40014000 	.word	0x40014000
 80068c0:	00010007 	.word	0x00010007

080068c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d101      	bne.n	80068dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068d8:	2302      	movs	r3, #2
 80068da:	e065      	b.n	80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2202      	movs	r2, #2
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a2c      	ldr	r2, [pc, #176]	@ (80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d004      	beq.n	8006910 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a2b      	ldr	r2, [pc, #172]	@ (80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d108      	bne.n	8006922 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006916:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006928:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800692c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	4313      	orrs	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a1b      	ldr	r2, [pc, #108]	@ (80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d018      	beq.n	800697c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006952:	d013      	beq.n	800697c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a18      	ldr	r2, [pc, #96]	@ (80069bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d00e      	beq.n	800697c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a17      	ldr	r2, [pc, #92]	@ (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d009      	beq.n	800697c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a12      	ldr	r2, [pc, #72]	@ (80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d004      	beq.n	800697c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a13      	ldr	r2, [pc, #76]	@ (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d10c      	bne.n	8006996 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006982:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	4313      	orrs	r3, r2
 800698c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	40012c00 	.word	0x40012c00
 80069b8:	40013400 	.word	0x40013400
 80069bc:	40000400 	.word	0x40000400
 80069c0:	40000800 	.word	0x40000800
 80069c4:	40014000 	.word	0x40014000

080069c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d101      	bne.n	80069e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069e0:	2302      	movs	r3, #2
 80069e2:	e073      	b.n	8006acc <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	041b      	lsls	r3, r3, #16
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	69db      	ldr	r3, [r3, #28]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a19      	ldr	r2, [pc, #100]	@ (8006ad8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d004      	beq.n	8006a80 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a18      	ldr	r2, [pc, #96]	@ (8006adc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d11c      	bne.n	8006aba <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8a:	051b      	lsls	r3, r3, #20
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	40012c00 	.word	0x40012c00
 8006adc:	40013400 	.word	0x40013400

08006ae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f003 030f 	and.w	r3, r3, #15
 8006b7e:	2204      	movs	r2, #4
 8006b80:	fa02 f303 	lsl.w	r3, r2, r3
 8006b84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6a1a      	ldr	r2, [r3, #32]
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	43db      	mvns	r3, r3
 8006b8e:	401a      	ands	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6a1a      	ldr	r2, [r3, #32]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f003 030f 	and.w	r3, r3, #15
 8006b9e:	6879      	ldr	r1, [r7, #4]
 8006ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	621a      	str	r2, [r3, #32]
}
 8006baa:	bf00      	nop
 8006bac:	371c      	adds	r7, #28
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b082      	sub	sp, #8
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e042      	b.n	8006c4e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d106      	bne.n	8006be0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7fb fb46 	bl	800226c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2224      	movs	r2, #36	@ 0x24
 8006be4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f022 0201 	bic.w	r2, r2, #1
 8006bf6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fb83 	bl	800730c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f8b4 	bl	8006d74 <UART_SetConfig>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d101      	bne.n	8006c16 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e01b      	b.n	8006c4e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c34:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f042 0201 	orr.w	r2, r2, #1
 8006c44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fc02 	bl	8007450 <UART_CheckIdleState>
 8006c4c:	4603      	mov	r3, r0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b08a      	sub	sp, #40	@ 0x28
 8006c5a:	af02      	add	r7, sp, #8
 8006c5c:	60f8      	str	r0, [r7, #12]
 8006c5e:	60b9      	str	r1, [r7, #8]
 8006c60:	603b      	str	r3, [r7, #0]
 8006c62:	4613      	mov	r3, r2
 8006c64:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c6c:	2b20      	cmp	r3, #32
 8006c6e:	d17b      	bne.n	8006d68 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d002      	beq.n	8006c7c <HAL_UART_Transmit+0x26>
 8006c76:	88fb      	ldrh	r3, [r7, #6]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d101      	bne.n	8006c80 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e074      	b.n	8006d6a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2221      	movs	r2, #33	@ 0x21
 8006c8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c90:	f7fb fbda 	bl	8002448 <HAL_GetTick>
 8006c94:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	88fa      	ldrh	r2, [r7, #6]
 8006c9a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	88fa      	ldrh	r2, [r7, #6]
 8006ca2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cae:	d108      	bne.n	8006cc2 <HAL_UART_Transmit+0x6c>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d104      	bne.n	8006cc2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	61bb      	str	r3, [r7, #24]
 8006cc0:	e003      	b.n	8006cca <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006cca:	e030      	b.n	8006d2e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	2180      	movs	r1, #128	@ 0x80
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 fc64 	bl	80075a4 <UART_WaitOnFlagUntilTimeout>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d005      	beq.n	8006cee <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e03d      	b.n	8006d6a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10b      	bne.n	8006d0c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	881b      	ldrh	r3, [r3, #0]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d02:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	3302      	adds	r3, #2
 8006d08:	61bb      	str	r3, [r7, #24]
 8006d0a:	e007      	b.n	8006d1c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	781a      	ldrb	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1c8      	bne.n	8006ccc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2200      	movs	r2, #0
 8006d42:	2140      	movs	r1, #64	@ 0x40
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 fc2d 	bl	80075a4 <UART_WaitOnFlagUntilTimeout>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d005      	beq.n	8006d5c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2220      	movs	r2, #32
 8006d54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e006      	b.n	8006d6a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	e000      	b.n	8006d6a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d68:	2302      	movs	r3, #2
  }
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3720      	adds	r7, #32
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d78:	b08c      	sub	sp, #48	@ 0x30
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	431a      	orrs	r2, r3
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	4bab      	ldr	r3, [pc, #684]	@ (8007050 <UART_SetConfig+0x2dc>)
 8006da4:	4013      	ands	r3, r2
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	6812      	ldr	r2, [r2, #0]
 8006daa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dac:	430b      	orrs	r3, r1
 8006dae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	68da      	ldr	r2, [r3, #12]
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4aa0      	ldr	r2, [pc, #640]	@ (8007054 <UART_SetConfig+0x2e0>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d004      	beq.n	8006de0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006dea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	6812      	ldr	r2, [r2, #0]
 8006df2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006df4:	430b      	orrs	r3, r1
 8006df6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfe:	f023 010f 	bic.w	r1, r3, #15
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a91      	ldr	r2, [pc, #580]	@ (8007058 <UART_SetConfig+0x2e4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d125      	bne.n	8006e64 <UART_SetConfig+0xf0>
 8006e18:	4b90      	ldr	r3, [pc, #576]	@ (800705c <UART_SetConfig+0x2e8>)
 8006e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e1e:	f003 0303 	and.w	r3, r3, #3
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d81a      	bhi.n	8006e5c <UART_SetConfig+0xe8>
 8006e26:	a201      	add	r2, pc, #4	@ (adr r2, 8006e2c <UART_SetConfig+0xb8>)
 8006e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2c:	08006e3d 	.word	0x08006e3d
 8006e30:	08006e4d 	.word	0x08006e4d
 8006e34:	08006e45 	.word	0x08006e45
 8006e38:	08006e55 	.word	0x08006e55
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e42:	e0d6      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006e44:	2302      	movs	r3, #2
 8006e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e4a:	e0d2      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006e4c:	2304      	movs	r3, #4
 8006e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e52:	e0ce      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006e54:	2308      	movs	r3, #8
 8006e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e5a:	e0ca      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006e5c:	2310      	movs	r3, #16
 8006e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e62:	e0c6      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a7d      	ldr	r2, [pc, #500]	@ (8007060 <UART_SetConfig+0x2ec>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d138      	bne.n	8006ee0 <UART_SetConfig+0x16c>
 8006e6e:	4b7b      	ldr	r3, [pc, #492]	@ (800705c <UART_SetConfig+0x2e8>)
 8006e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e74:	f003 030c 	and.w	r3, r3, #12
 8006e78:	2b0c      	cmp	r3, #12
 8006e7a:	d82d      	bhi.n	8006ed8 <UART_SetConfig+0x164>
 8006e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e84 <UART_SetConfig+0x110>)
 8006e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006eb9 	.word	0x08006eb9
 8006e88:	08006ed9 	.word	0x08006ed9
 8006e8c:	08006ed9 	.word	0x08006ed9
 8006e90:	08006ed9 	.word	0x08006ed9
 8006e94:	08006ec9 	.word	0x08006ec9
 8006e98:	08006ed9 	.word	0x08006ed9
 8006e9c:	08006ed9 	.word	0x08006ed9
 8006ea0:	08006ed9 	.word	0x08006ed9
 8006ea4:	08006ec1 	.word	0x08006ec1
 8006ea8:	08006ed9 	.word	0x08006ed9
 8006eac:	08006ed9 	.word	0x08006ed9
 8006eb0:	08006ed9 	.word	0x08006ed9
 8006eb4:	08006ed1 	.word	0x08006ed1
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ebe:	e098      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ec6:	e094      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006ec8:	2304      	movs	r3, #4
 8006eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ece:	e090      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006ed0:	2308      	movs	r3, #8
 8006ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ed6:	e08c      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006ed8:	2310      	movs	r3, #16
 8006eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ede:	e088      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a5f      	ldr	r2, [pc, #380]	@ (8007064 <UART_SetConfig+0x2f0>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d125      	bne.n	8006f36 <UART_SetConfig+0x1c2>
 8006eea:	4b5c      	ldr	r3, [pc, #368]	@ (800705c <UART_SetConfig+0x2e8>)
 8006eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ef0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006ef4:	2b30      	cmp	r3, #48	@ 0x30
 8006ef6:	d016      	beq.n	8006f26 <UART_SetConfig+0x1b2>
 8006ef8:	2b30      	cmp	r3, #48	@ 0x30
 8006efa:	d818      	bhi.n	8006f2e <UART_SetConfig+0x1ba>
 8006efc:	2b20      	cmp	r3, #32
 8006efe:	d00a      	beq.n	8006f16 <UART_SetConfig+0x1a2>
 8006f00:	2b20      	cmp	r3, #32
 8006f02:	d814      	bhi.n	8006f2e <UART_SetConfig+0x1ba>
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <UART_SetConfig+0x19a>
 8006f08:	2b10      	cmp	r3, #16
 8006f0a:	d008      	beq.n	8006f1e <UART_SetConfig+0x1aa>
 8006f0c:	e00f      	b.n	8006f2e <UART_SetConfig+0x1ba>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f14:	e06d      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006f16:	2302      	movs	r3, #2
 8006f18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f1c:	e069      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006f1e:	2304      	movs	r3, #4
 8006f20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f24:	e065      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006f26:	2308      	movs	r3, #8
 8006f28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f2c:	e061      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006f2e:	2310      	movs	r3, #16
 8006f30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f34:	e05d      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a4b      	ldr	r2, [pc, #300]	@ (8007068 <UART_SetConfig+0x2f4>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d125      	bne.n	8006f8c <UART_SetConfig+0x218>
 8006f40:	4b46      	ldr	r3, [pc, #280]	@ (800705c <UART_SetConfig+0x2e8>)
 8006f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f4c:	d016      	beq.n	8006f7c <UART_SetConfig+0x208>
 8006f4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f50:	d818      	bhi.n	8006f84 <UART_SetConfig+0x210>
 8006f52:	2b80      	cmp	r3, #128	@ 0x80
 8006f54:	d00a      	beq.n	8006f6c <UART_SetConfig+0x1f8>
 8006f56:	2b80      	cmp	r3, #128	@ 0x80
 8006f58:	d814      	bhi.n	8006f84 <UART_SetConfig+0x210>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <UART_SetConfig+0x1f0>
 8006f5e:	2b40      	cmp	r3, #64	@ 0x40
 8006f60:	d008      	beq.n	8006f74 <UART_SetConfig+0x200>
 8006f62:	e00f      	b.n	8006f84 <UART_SetConfig+0x210>
 8006f64:	2300      	movs	r3, #0
 8006f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f6a:	e042      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f72:	e03e      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006f74:	2304      	movs	r3, #4
 8006f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f7a:	e03a      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006f7c:	2308      	movs	r3, #8
 8006f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f82:	e036      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006f84:	2310      	movs	r3, #16
 8006f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f8a:	e032      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a30      	ldr	r2, [pc, #192]	@ (8007054 <UART_SetConfig+0x2e0>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d12a      	bne.n	8006fec <UART_SetConfig+0x278>
 8006f96:	4b31      	ldr	r3, [pc, #196]	@ (800705c <UART_SetConfig+0x2e8>)
 8006f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006fa0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006fa4:	d01a      	beq.n	8006fdc <UART_SetConfig+0x268>
 8006fa6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006faa:	d81b      	bhi.n	8006fe4 <UART_SetConfig+0x270>
 8006fac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fb0:	d00c      	beq.n	8006fcc <UART_SetConfig+0x258>
 8006fb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fb6:	d815      	bhi.n	8006fe4 <UART_SetConfig+0x270>
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <UART_SetConfig+0x250>
 8006fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fc0:	d008      	beq.n	8006fd4 <UART_SetConfig+0x260>
 8006fc2:	e00f      	b.n	8006fe4 <UART_SetConfig+0x270>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fca:	e012      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fd2:	e00e      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006fd4:	2304      	movs	r3, #4
 8006fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fda:	e00a      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006fdc:	2308      	movs	r3, #8
 8006fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fe2:	e006      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006fe4:	2310      	movs	r3, #16
 8006fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fea:	e002      	b.n	8006ff2 <UART_SetConfig+0x27e>
 8006fec:	2310      	movs	r3, #16
 8006fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a17      	ldr	r2, [pc, #92]	@ (8007054 <UART_SetConfig+0x2e0>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	f040 80a8 	bne.w	800714e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ffe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007002:	2b08      	cmp	r3, #8
 8007004:	d834      	bhi.n	8007070 <UART_SetConfig+0x2fc>
 8007006:	a201      	add	r2, pc, #4	@ (adr r2, 800700c <UART_SetConfig+0x298>)
 8007008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700c:	08007031 	.word	0x08007031
 8007010:	08007071 	.word	0x08007071
 8007014:	08007039 	.word	0x08007039
 8007018:	08007071 	.word	0x08007071
 800701c:	0800703f 	.word	0x0800703f
 8007020:	08007071 	.word	0x08007071
 8007024:	08007071 	.word	0x08007071
 8007028:	08007071 	.word	0x08007071
 800702c:	08007047 	.word	0x08007047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007030:	f7fe f872 	bl	8005118 <HAL_RCC_GetPCLK1Freq>
 8007034:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007036:	e021      	b.n	800707c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007038:	4b0c      	ldr	r3, [pc, #48]	@ (800706c <UART_SetConfig+0x2f8>)
 800703a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800703c:	e01e      	b.n	800707c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800703e:	f7fd ffff 	bl	8005040 <HAL_RCC_GetSysClockFreq>
 8007042:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007044:	e01a      	b.n	800707c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007046:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800704a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800704c:	e016      	b.n	800707c <UART_SetConfig+0x308>
 800704e:	bf00      	nop
 8007050:	cfff69f3 	.word	0xcfff69f3
 8007054:	40008000 	.word	0x40008000
 8007058:	40013800 	.word	0x40013800
 800705c:	40021000 	.word	0x40021000
 8007060:	40004400 	.word	0x40004400
 8007064:	40004800 	.word	0x40004800
 8007068:	40004c00 	.word	0x40004c00
 800706c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800707a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800707c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 812a 	beq.w	80072d8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007088:	4a9e      	ldr	r2, [pc, #632]	@ (8007304 <UART_SetConfig+0x590>)
 800708a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800708e:	461a      	mov	r2, r3
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	fbb3 f3f2 	udiv	r3, r3, r2
 8007096:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	4613      	mov	r3, r2
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	4413      	add	r3, r2
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d305      	bcc.n	80070b4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070ae:	69ba      	ldr	r2, [r7, #24]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d903      	bls.n	80070bc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80070ba:	e10d      	b.n	80072d8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070be:	2200      	movs	r2, #0
 80070c0:	60bb      	str	r3, [r7, #8]
 80070c2:	60fa      	str	r2, [r7, #12]
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c8:	4a8e      	ldr	r2, [pc, #568]	@ (8007304 <UART_SetConfig+0x590>)
 80070ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	2200      	movs	r2, #0
 80070d2:	603b      	str	r3, [r7, #0]
 80070d4:	607a      	str	r2, [r7, #4]
 80070d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070de:	f7f9 fddb 	bl	8000c98 <__aeabi_uldivmod>
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	4610      	mov	r0, r2
 80070e8:	4619      	mov	r1, r3
 80070ea:	f04f 0200 	mov.w	r2, #0
 80070ee:	f04f 0300 	mov.w	r3, #0
 80070f2:	020b      	lsls	r3, r1, #8
 80070f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80070f8:	0202      	lsls	r2, r0, #8
 80070fa:	6979      	ldr	r1, [r7, #20]
 80070fc:	6849      	ldr	r1, [r1, #4]
 80070fe:	0849      	lsrs	r1, r1, #1
 8007100:	2000      	movs	r0, #0
 8007102:	460c      	mov	r4, r1
 8007104:	4605      	mov	r5, r0
 8007106:	eb12 0804 	adds.w	r8, r2, r4
 800710a:	eb43 0905 	adc.w	r9, r3, r5
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	469a      	mov	sl, r3
 8007116:	4693      	mov	fp, r2
 8007118:	4652      	mov	r2, sl
 800711a:	465b      	mov	r3, fp
 800711c:	4640      	mov	r0, r8
 800711e:	4649      	mov	r1, r9
 8007120:	f7f9 fdba 	bl	8000c98 <__aeabi_uldivmod>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4613      	mov	r3, r2
 800712a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007132:	d308      	bcc.n	8007146 <UART_SetConfig+0x3d2>
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800713a:	d204      	bcs.n	8007146 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6a3a      	ldr	r2, [r7, #32]
 8007142:	60da      	str	r2, [r3, #12]
 8007144:	e0c8      	b.n	80072d8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800714c:	e0c4      	b.n	80072d8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007156:	d167      	bne.n	8007228 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007158:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800715c:	2b08      	cmp	r3, #8
 800715e:	d828      	bhi.n	80071b2 <UART_SetConfig+0x43e>
 8007160:	a201      	add	r2, pc, #4	@ (adr r2, 8007168 <UART_SetConfig+0x3f4>)
 8007162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007166:	bf00      	nop
 8007168:	0800718d 	.word	0x0800718d
 800716c:	08007195 	.word	0x08007195
 8007170:	0800719d 	.word	0x0800719d
 8007174:	080071b3 	.word	0x080071b3
 8007178:	080071a3 	.word	0x080071a3
 800717c:	080071b3 	.word	0x080071b3
 8007180:	080071b3 	.word	0x080071b3
 8007184:	080071b3 	.word	0x080071b3
 8007188:	080071ab 	.word	0x080071ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800718c:	f7fd ffc4 	bl	8005118 <HAL_RCC_GetPCLK1Freq>
 8007190:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007192:	e014      	b.n	80071be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007194:	f7fd ffd6 	bl	8005144 <HAL_RCC_GetPCLK2Freq>
 8007198:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800719a:	e010      	b.n	80071be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800719c:	4b5a      	ldr	r3, [pc, #360]	@ (8007308 <UART_SetConfig+0x594>)
 800719e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071a0:	e00d      	b.n	80071be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071a2:	f7fd ff4d 	bl	8005040 <HAL_RCC_GetSysClockFreq>
 80071a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071a8:	e009      	b.n	80071be <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071b0:	e005      	b.n	80071be <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80071bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 8089 	beq.w	80072d8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ca:	4a4e      	ldr	r2, [pc, #312]	@ (8007304 <UART_SetConfig+0x590>)
 80071cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071d0:	461a      	mov	r2, r3
 80071d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80071d8:	005a      	lsls	r2, r3, #1
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	085b      	lsrs	r3, r3, #1
 80071e0:	441a      	add	r2, r3
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	2b0f      	cmp	r3, #15
 80071f0:	d916      	bls.n	8007220 <UART_SetConfig+0x4ac>
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071f8:	d212      	bcs.n	8007220 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071fa:	6a3b      	ldr	r3, [r7, #32]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	f023 030f 	bic.w	r3, r3, #15
 8007202:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	085b      	lsrs	r3, r3, #1
 8007208:	b29b      	uxth	r3, r3
 800720a:	f003 0307 	and.w	r3, r3, #7
 800720e:	b29a      	uxth	r2, r3
 8007210:	8bfb      	ldrh	r3, [r7, #30]
 8007212:	4313      	orrs	r3, r2
 8007214:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	8bfa      	ldrh	r2, [r7, #30]
 800721c:	60da      	str	r2, [r3, #12]
 800721e:	e05b      	b.n	80072d8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007226:	e057      	b.n	80072d8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007228:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800722c:	2b08      	cmp	r3, #8
 800722e:	d828      	bhi.n	8007282 <UART_SetConfig+0x50e>
 8007230:	a201      	add	r2, pc, #4	@ (adr r2, 8007238 <UART_SetConfig+0x4c4>)
 8007232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007236:	bf00      	nop
 8007238:	0800725d 	.word	0x0800725d
 800723c:	08007265 	.word	0x08007265
 8007240:	0800726d 	.word	0x0800726d
 8007244:	08007283 	.word	0x08007283
 8007248:	08007273 	.word	0x08007273
 800724c:	08007283 	.word	0x08007283
 8007250:	08007283 	.word	0x08007283
 8007254:	08007283 	.word	0x08007283
 8007258:	0800727b 	.word	0x0800727b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800725c:	f7fd ff5c 	bl	8005118 <HAL_RCC_GetPCLK1Freq>
 8007260:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007262:	e014      	b.n	800728e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007264:	f7fd ff6e 	bl	8005144 <HAL_RCC_GetPCLK2Freq>
 8007268:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800726a:	e010      	b.n	800728e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800726c:	4b26      	ldr	r3, [pc, #152]	@ (8007308 <UART_SetConfig+0x594>)
 800726e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007270:	e00d      	b.n	800728e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007272:	f7fd fee5 	bl	8005040 <HAL_RCC_GetSysClockFreq>
 8007276:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007278:	e009      	b.n	800728e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800727a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800727e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007280:	e005      	b.n	800728e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800728c:	bf00      	nop
    }

    if (pclk != 0U)
 800728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007290:	2b00      	cmp	r3, #0
 8007292:	d021      	beq.n	80072d8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007298:	4a1a      	ldr	r2, [pc, #104]	@ (8007304 <UART_SetConfig+0x590>)
 800729a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800729e:	461a      	mov	r2, r3
 80072a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	085b      	lsrs	r3, r3, #1
 80072ac:	441a      	add	r2, r3
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	2b0f      	cmp	r3, #15
 80072bc:	d909      	bls.n	80072d2 <UART_SetConfig+0x55e>
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072c4:	d205      	bcs.n	80072d2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	60da      	str	r2, [r3, #12]
 80072d0:	e002      	b.n	80072d8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	2201      	movs	r2, #1
 80072dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	2200      	movs	r2, #0
 80072ec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2200      	movs	r2, #0
 80072f2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80072f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3730      	adds	r7, #48	@ 0x30
 80072fc:	46bd      	mov	sp, r7
 80072fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007302:	bf00      	nop
 8007304:	0800a780 	.word	0x0800a780
 8007308:	00f42400 	.word	0x00f42400

0800730c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007318:	f003 0308 	and.w	r3, r3, #8
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00a      	beq.n	8007336 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00a      	beq.n	8007358 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735c:	f003 0302 	and.w	r3, r3, #2
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00a      	beq.n	800737a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737e:	f003 0304 	and.w	r3, r3, #4
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00a      	beq.n	800739c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	430a      	orrs	r2, r1
 800739a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a0:	f003 0310 	and.w	r3, r3, #16
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00a      	beq.n	80073be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	430a      	orrs	r2, r1
 80073bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c2:	f003 0320 	and.w	r3, r3, #32
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	430a      	orrs	r2, r1
 80073de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d01a      	beq.n	8007422 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007406:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800740a:	d10a      	bne.n	8007422 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00a      	beq.n	8007444 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	430a      	orrs	r2, r1
 8007442:	605a      	str	r2, [r3, #4]
  }
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b098      	sub	sp, #96	@ 0x60
 8007454:	af02      	add	r7, sp, #8
 8007456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007460:	f7fa fff2 	bl	8002448 <HAL_GetTick>
 8007464:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0308 	and.w	r3, r3, #8
 8007470:	2b08      	cmp	r3, #8
 8007472:	d12f      	bne.n	80074d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007474:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800747c:	2200      	movs	r2, #0
 800747e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f88e 	bl	80075a4 <UART_WaitOnFlagUntilTimeout>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d022      	beq.n	80074d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800749c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800749e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	461a      	mov	r2, r3
 80074aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80074ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074b4:	e841 2300 	strex	r3, r2, [r1]
 80074b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e6      	bne.n	800748e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2220      	movs	r2, #32
 80074c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e063      	b.n	800759c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0304 	and.w	r3, r3, #4
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d149      	bne.n	8007576 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074ea:	2200      	movs	r2, #0
 80074ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f857 	bl	80075a4 <UART_WaitOnFlagUntilTimeout>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d03c      	beq.n	8007576 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007504:	e853 3f00 	ldrex	r3, [r3]
 8007508:	623b      	str	r3, [r7, #32]
   return(result);
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007510:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800751a:	633b      	str	r3, [r7, #48]	@ 0x30
 800751c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007522:	e841 2300 	strex	r3, r2, [r1]
 8007526:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1e6      	bne.n	80074fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3308      	adds	r3, #8
 8007534:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	e853 3f00 	ldrex	r3, [r3]
 800753c:	60fb      	str	r3, [r7, #12]
   return(result);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f023 0301 	bic.w	r3, r3, #1
 8007544:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3308      	adds	r3, #8
 800754c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800754e:	61fa      	str	r2, [r7, #28]
 8007550:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	69b9      	ldr	r1, [r7, #24]
 8007554:	69fa      	ldr	r2, [r7, #28]
 8007556:	e841 2300 	strex	r3, r2, [r1]
 800755a:	617b      	str	r3, [r7, #20]
   return(result);
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1e5      	bne.n	800752e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2220      	movs	r2, #32
 8007566:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e012      	b.n	800759c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2220      	movs	r2, #32
 800757a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2220      	movs	r2, #32
 8007582:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3758      	adds	r7, #88	@ 0x58
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	603b      	str	r3, [r7, #0]
 80075b0:	4613      	mov	r3, r2
 80075b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075b4:	e04f      	b.n	8007656 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075bc:	d04b      	beq.n	8007656 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075be:	f7fa ff43 	bl	8002448 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d302      	bcc.n	80075d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e04e      	b.n	8007676 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0304 	and.w	r3, r3, #4
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d037      	beq.n	8007656 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	2b80      	cmp	r3, #128	@ 0x80
 80075ea:	d034      	beq.n	8007656 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2b40      	cmp	r3, #64	@ 0x40
 80075f0:	d031      	beq.n	8007656 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	69db      	ldr	r3, [r3, #28]
 80075f8:	f003 0308 	and.w	r3, r3, #8
 80075fc:	2b08      	cmp	r3, #8
 80075fe:	d110      	bne.n	8007622 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2208      	movs	r2, #8
 8007606:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 f838 	bl	800767e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2208      	movs	r2, #8
 8007612:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e029      	b.n	8007676 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800762c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007630:	d111      	bne.n	8007656 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800763a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 f81e 	bl	800767e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2220      	movs	r2, #32
 8007646:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e00f      	b.n	8007676 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	69da      	ldr	r2, [r3, #28]
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	4013      	ands	r3, r2
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	429a      	cmp	r2, r3
 8007664:	bf0c      	ite	eq
 8007666:	2301      	moveq	r3, #1
 8007668:	2300      	movne	r3, #0
 800766a:	b2db      	uxtb	r3, r3
 800766c:	461a      	mov	r2, r3
 800766e:	79fb      	ldrb	r3, [r7, #7]
 8007670:	429a      	cmp	r2, r3
 8007672:	d0a0      	beq.n	80075b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800767e:	b480      	push	{r7}
 8007680:	b095      	sub	sp, #84	@ 0x54
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800768e:	e853 3f00 	ldrex	r3, [r3]
 8007692:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007696:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800769a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	461a      	mov	r2, r3
 80076a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80076a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076ac:	e841 2300 	strex	r3, r2, [r1]
 80076b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1e6      	bne.n	8007686 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3308      	adds	r3, #8
 80076be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	e853 3f00 	ldrex	r3, [r3]
 80076c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076ce:	f023 0301 	bic.w	r3, r3, #1
 80076d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3308      	adds	r3, #8
 80076da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076e4:	e841 2300 	strex	r3, r2, [r1]
 80076e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e3      	bne.n	80076b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d118      	bne.n	800772a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	e853 3f00 	ldrex	r3, [r3]
 8007704:	60bb      	str	r3, [r7, #8]
   return(result);
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	f023 0310 	bic.w	r3, r3, #16
 800770c:	647b      	str	r3, [r7, #68]	@ 0x44
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	461a      	mov	r2, r3
 8007714:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007716:	61bb      	str	r3, [r7, #24]
 8007718:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771a:	6979      	ldr	r1, [r7, #20]
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	e841 2300 	strex	r3, r2, [r1]
 8007722:	613b      	str	r3, [r7, #16]
   return(result);
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1e6      	bne.n	80076f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2220      	movs	r2, #32
 800772e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800773e:	bf00      	nop
 8007740:	3754      	adds	r7, #84	@ 0x54
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800774a:	b480      	push	{r7}
 800774c:	b085      	sub	sp, #20
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007758:	2b01      	cmp	r3, #1
 800775a:	d101      	bne.n	8007760 <HAL_UARTEx_DisableFifoMode+0x16>
 800775c:	2302      	movs	r3, #2
 800775e:	e027      	b.n	80077b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2224      	movs	r2, #36	@ 0x24
 800776c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f022 0201 	bic.w	r2, r2, #1
 8007786:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800778e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2220      	movs	r2, #32
 80077a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d101      	bne.n	80077d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077d0:	2302      	movs	r3, #2
 80077d2:	e02d      	b.n	8007830 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2224      	movs	r2, #36	@ 0x24
 80077e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f022 0201 	bic.w	r2, r2, #1
 80077fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	430a      	orrs	r2, r1
 800780e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f84f 	bl	80078b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007848:	2b01      	cmp	r3, #1
 800784a:	d101      	bne.n	8007850 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800784c:	2302      	movs	r3, #2
 800784e:	e02d      	b.n	80078ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2224      	movs	r2, #36	@ 0x24
 800785c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f022 0201 	bic.w	r2, r2, #1
 8007876:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	430a      	orrs	r2, r1
 800788a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f811 	bl	80078b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2220      	movs	r2, #32
 800789e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d108      	bne.n	80078d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078d4:	e031      	b.n	800793a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078d6:	2308      	movs	r3, #8
 80078d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078da:	2308      	movs	r3, #8
 80078dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	0e5b      	lsrs	r3, r3, #25
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	f003 0307 	and.w	r3, r3, #7
 80078ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	0f5b      	lsrs	r3, r3, #29
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078fe:	7bbb      	ldrb	r3, [r7, #14]
 8007900:	7b3a      	ldrb	r2, [r7, #12]
 8007902:	4911      	ldr	r1, [pc, #68]	@ (8007948 <UARTEx_SetNbDataToProcess+0x94>)
 8007904:	5c8a      	ldrb	r2, [r1, r2]
 8007906:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800790a:	7b3a      	ldrb	r2, [r7, #12]
 800790c:	490f      	ldr	r1, [pc, #60]	@ (800794c <UARTEx_SetNbDataToProcess+0x98>)
 800790e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007910:	fb93 f3f2 	sdiv	r3, r3, r2
 8007914:	b29a      	uxth	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800791c:	7bfb      	ldrb	r3, [r7, #15]
 800791e:	7b7a      	ldrb	r2, [r7, #13]
 8007920:	4909      	ldr	r1, [pc, #36]	@ (8007948 <UARTEx_SetNbDataToProcess+0x94>)
 8007922:	5c8a      	ldrb	r2, [r1, r2]
 8007924:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007928:	7b7a      	ldrb	r2, [r7, #13]
 800792a:	4908      	ldr	r1, [pc, #32]	@ (800794c <UARTEx_SetNbDataToProcess+0x98>)
 800792c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800792e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007932:	b29a      	uxth	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800793a:	bf00      	nop
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	0800a798 	.word	0x0800a798
 800794c:	0800a7a0 	.word	0x0800a7a0

08007950 <__cvt>:
 8007950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007954:	ec57 6b10 	vmov	r6, r7, d0
 8007958:	2f00      	cmp	r7, #0
 800795a:	460c      	mov	r4, r1
 800795c:	4619      	mov	r1, r3
 800795e:	463b      	mov	r3, r7
 8007960:	bfbb      	ittet	lt
 8007962:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007966:	461f      	movlt	r7, r3
 8007968:	2300      	movge	r3, #0
 800796a:	232d      	movlt	r3, #45	@ 0x2d
 800796c:	700b      	strb	r3, [r1, #0]
 800796e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007970:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007974:	4691      	mov	r9, r2
 8007976:	f023 0820 	bic.w	r8, r3, #32
 800797a:	bfbc      	itt	lt
 800797c:	4632      	movlt	r2, r6
 800797e:	4616      	movlt	r6, r2
 8007980:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007984:	d005      	beq.n	8007992 <__cvt+0x42>
 8007986:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800798a:	d100      	bne.n	800798e <__cvt+0x3e>
 800798c:	3401      	adds	r4, #1
 800798e:	2102      	movs	r1, #2
 8007990:	e000      	b.n	8007994 <__cvt+0x44>
 8007992:	2103      	movs	r1, #3
 8007994:	ab03      	add	r3, sp, #12
 8007996:	9301      	str	r3, [sp, #4]
 8007998:	ab02      	add	r3, sp, #8
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	ec47 6b10 	vmov	d0, r6, r7
 80079a0:	4653      	mov	r3, sl
 80079a2:	4622      	mov	r2, r4
 80079a4:	f000 ff60 	bl	8008868 <_dtoa_r>
 80079a8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80079ac:	4605      	mov	r5, r0
 80079ae:	d119      	bne.n	80079e4 <__cvt+0x94>
 80079b0:	f019 0f01 	tst.w	r9, #1
 80079b4:	d00e      	beq.n	80079d4 <__cvt+0x84>
 80079b6:	eb00 0904 	add.w	r9, r0, r4
 80079ba:	2200      	movs	r2, #0
 80079bc:	2300      	movs	r3, #0
 80079be:	4630      	mov	r0, r6
 80079c0:	4639      	mov	r1, r7
 80079c2:	f7f9 f8a9 	bl	8000b18 <__aeabi_dcmpeq>
 80079c6:	b108      	cbz	r0, 80079cc <__cvt+0x7c>
 80079c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80079cc:	2230      	movs	r2, #48	@ 0x30
 80079ce:	9b03      	ldr	r3, [sp, #12]
 80079d0:	454b      	cmp	r3, r9
 80079d2:	d31e      	bcc.n	8007a12 <__cvt+0xc2>
 80079d4:	9b03      	ldr	r3, [sp, #12]
 80079d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079d8:	1b5b      	subs	r3, r3, r5
 80079da:	4628      	mov	r0, r5
 80079dc:	6013      	str	r3, [r2, #0]
 80079de:	b004      	add	sp, #16
 80079e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80079e8:	eb00 0904 	add.w	r9, r0, r4
 80079ec:	d1e5      	bne.n	80079ba <__cvt+0x6a>
 80079ee:	7803      	ldrb	r3, [r0, #0]
 80079f0:	2b30      	cmp	r3, #48	@ 0x30
 80079f2:	d10a      	bne.n	8007a0a <__cvt+0xba>
 80079f4:	2200      	movs	r2, #0
 80079f6:	2300      	movs	r3, #0
 80079f8:	4630      	mov	r0, r6
 80079fa:	4639      	mov	r1, r7
 80079fc:	f7f9 f88c 	bl	8000b18 <__aeabi_dcmpeq>
 8007a00:	b918      	cbnz	r0, 8007a0a <__cvt+0xba>
 8007a02:	f1c4 0401 	rsb	r4, r4, #1
 8007a06:	f8ca 4000 	str.w	r4, [sl]
 8007a0a:	f8da 3000 	ldr.w	r3, [sl]
 8007a0e:	4499      	add	r9, r3
 8007a10:	e7d3      	b.n	80079ba <__cvt+0x6a>
 8007a12:	1c59      	adds	r1, r3, #1
 8007a14:	9103      	str	r1, [sp, #12]
 8007a16:	701a      	strb	r2, [r3, #0]
 8007a18:	e7d9      	b.n	80079ce <__cvt+0x7e>

08007a1a <__exponent>:
 8007a1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a1c:	2900      	cmp	r1, #0
 8007a1e:	bfba      	itte	lt
 8007a20:	4249      	neglt	r1, r1
 8007a22:	232d      	movlt	r3, #45	@ 0x2d
 8007a24:	232b      	movge	r3, #43	@ 0x2b
 8007a26:	2909      	cmp	r1, #9
 8007a28:	7002      	strb	r2, [r0, #0]
 8007a2a:	7043      	strb	r3, [r0, #1]
 8007a2c:	dd29      	ble.n	8007a82 <__exponent+0x68>
 8007a2e:	f10d 0307 	add.w	r3, sp, #7
 8007a32:	461d      	mov	r5, r3
 8007a34:	270a      	movs	r7, #10
 8007a36:	461a      	mov	r2, r3
 8007a38:	fbb1 f6f7 	udiv	r6, r1, r7
 8007a3c:	fb07 1416 	mls	r4, r7, r6, r1
 8007a40:	3430      	adds	r4, #48	@ 0x30
 8007a42:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007a46:	460c      	mov	r4, r1
 8007a48:	2c63      	cmp	r4, #99	@ 0x63
 8007a4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007a4e:	4631      	mov	r1, r6
 8007a50:	dcf1      	bgt.n	8007a36 <__exponent+0x1c>
 8007a52:	3130      	adds	r1, #48	@ 0x30
 8007a54:	1e94      	subs	r4, r2, #2
 8007a56:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007a5a:	1c41      	adds	r1, r0, #1
 8007a5c:	4623      	mov	r3, r4
 8007a5e:	42ab      	cmp	r3, r5
 8007a60:	d30a      	bcc.n	8007a78 <__exponent+0x5e>
 8007a62:	f10d 0309 	add.w	r3, sp, #9
 8007a66:	1a9b      	subs	r3, r3, r2
 8007a68:	42ac      	cmp	r4, r5
 8007a6a:	bf88      	it	hi
 8007a6c:	2300      	movhi	r3, #0
 8007a6e:	3302      	adds	r3, #2
 8007a70:	4403      	add	r3, r0
 8007a72:	1a18      	subs	r0, r3, r0
 8007a74:	b003      	add	sp, #12
 8007a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a78:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007a7c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007a80:	e7ed      	b.n	8007a5e <__exponent+0x44>
 8007a82:	2330      	movs	r3, #48	@ 0x30
 8007a84:	3130      	adds	r1, #48	@ 0x30
 8007a86:	7083      	strb	r3, [r0, #2]
 8007a88:	70c1      	strb	r1, [r0, #3]
 8007a8a:	1d03      	adds	r3, r0, #4
 8007a8c:	e7f1      	b.n	8007a72 <__exponent+0x58>
	...

08007a90 <_printf_float>:
 8007a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a94:	b08d      	sub	sp, #52	@ 0x34
 8007a96:	460c      	mov	r4, r1
 8007a98:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007a9c:	4616      	mov	r6, r2
 8007a9e:	461f      	mov	r7, r3
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	f000 fddf 	bl	8008664 <_localeconv_r>
 8007aa6:	6803      	ldr	r3, [r0, #0]
 8007aa8:	9304      	str	r3, [sp, #16]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7f8 fc08 	bl	80002c0 <strlen>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ab4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ab8:	9005      	str	r0, [sp, #20]
 8007aba:	3307      	adds	r3, #7
 8007abc:	f023 0307 	bic.w	r3, r3, #7
 8007ac0:	f103 0208 	add.w	r2, r3, #8
 8007ac4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007ac8:	f8d4 b000 	ldr.w	fp, [r4]
 8007acc:	f8c8 2000 	str.w	r2, [r8]
 8007ad0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ad4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007ad8:	9307      	str	r3, [sp, #28]
 8007ada:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ade:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007ae2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ae6:	4b9c      	ldr	r3, [pc, #624]	@ (8007d58 <_printf_float+0x2c8>)
 8007ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8007aec:	f7f9 f846 	bl	8000b7c <__aeabi_dcmpun>
 8007af0:	bb70      	cbnz	r0, 8007b50 <_printf_float+0xc0>
 8007af2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007af6:	4b98      	ldr	r3, [pc, #608]	@ (8007d58 <_printf_float+0x2c8>)
 8007af8:	f04f 32ff 	mov.w	r2, #4294967295
 8007afc:	f7f9 f820 	bl	8000b40 <__aeabi_dcmple>
 8007b00:	bb30      	cbnz	r0, 8007b50 <_printf_float+0xc0>
 8007b02:	2200      	movs	r2, #0
 8007b04:	2300      	movs	r3, #0
 8007b06:	4640      	mov	r0, r8
 8007b08:	4649      	mov	r1, r9
 8007b0a:	f7f9 f80f 	bl	8000b2c <__aeabi_dcmplt>
 8007b0e:	b110      	cbz	r0, 8007b16 <_printf_float+0x86>
 8007b10:	232d      	movs	r3, #45	@ 0x2d
 8007b12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b16:	4a91      	ldr	r2, [pc, #580]	@ (8007d5c <_printf_float+0x2cc>)
 8007b18:	4b91      	ldr	r3, [pc, #580]	@ (8007d60 <_printf_float+0x2d0>)
 8007b1a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007b1e:	bf94      	ite	ls
 8007b20:	4690      	movls	r8, r2
 8007b22:	4698      	movhi	r8, r3
 8007b24:	2303      	movs	r3, #3
 8007b26:	6123      	str	r3, [r4, #16]
 8007b28:	f02b 0304 	bic.w	r3, fp, #4
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	f04f 0900 	mov.w	r9, #0
 8007b32:	9700      	str	r7, [sp, #0]
 8007b34:	4633      	mov	r3, r6
 8007b36:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007b38:	4621      	mov	r1, r4
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	f000 f9d2 	bl	8007ee4 <_printf_common>
 8007b40:	3001      	adds	r0, #1
 8007b42:	f040 808d 	bne.w	8007c60 <_printf_float+0x1d0>
 8007b46:	f04f 30ff 	mov.w	r0, #4294967295
 8007b4a:	b00d      	add	sp, #52	@ 0x34
 8007b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b50:	4642      	mov	r2, r8
 8007b52:	464b      	mov	r3, r9
 8007b54:	4640      	mov	r0, r8
 8007b56:	4649      	mov	r1, r9
 8007b58:	f7f9 f810 	bl	8000b7c <__aeabi_dcmpun>
 8007b5c:	b140      	cbz	r0, 8007b70 <_printf_float+0xe0>
 8007b5e:	464b      	mov	r3, r9
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	bfbc      	itt	lt
 8007b64:	232d      	movlt	r3, #45	@ 0x2d
 8007b66:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007b6a:	4a7e      	ldr	r2, [pc, #504]	@ (8007d64 <_printf_float+0x2d4>)
 8007b6c:	4b7e      	ldr	r3, [pc, #504]	@ (8007d68 <_printf_float+0x2d8>)
 8007b6e:	e7d4      	b.n	8007b1a <_printf_float+0x8a>
 8007b70:	6863      	ldr	r3, [r4, #4]
 8007b72:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007b76:	9206      	str	r2, [sp, #24]
 8007b78:	1c5a      	adds	r2, r3, #1
 8007b7a:	d13b      	bne.n	8007bf4 <_printf_float+0x164>
 8007b7c:	2306      	movs	r3, #6
 8007b7e:	6063      	str	r3, [r4, #4]
 8007b80:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007b84:	2300      	movs	r3, #0
 8007b86:	6022      	str	r2, [r4, #0]
 8007b88:	9303      	str	r3, [sp, #12]
 8007b8a:	ab0a      	add	r3, sp, #40	@ 0x28
 8007b8c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007b90:	ab09      	add	r3, sp, #36	@ 0x24
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	6861      	ldr	r1, [r4, #4]
 8007b96:	ec49 8b10 	vmov	d0, r8, r9
 8007b9a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	f7ff fed6 	bl	8007950 <__cvt>
 8007ba4:	9b06      	ldr	r3, [sp, #24]
 8007ba6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ba8:	2b47      	cmp	r3, #71	@ 0x47
 8007baa:	4680      	mov	r8, r0
 8007bac:	d129      	bne.n	8007c02 <_printf_float+0x172>
 8007bae:	1cc8      	adds	r0, r1, #3
 8007bb0:	db02      	blt.n	8007bb8 <_printf_float+0x128>
 8007bb2:	6863      	ldr	r3, [r4, #4]
 8007bb4:	4299      	cmp	r1, r3
 8007bb6:	dd41      	ble.n	8007c3c <_printf_float+0x1ac>
 8007bb8:	f1aa 0a02 	sub.w	sl, sl, #2
 8007bbc:	fa5f fa8a 	uxtb.w	sl, sl
 8007bc0:	3901      	subs	r1, #1
 8007bc2:	4652      	mov	r2, sl
 8007bc4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007bc8:	9109      	str	r1, [sp, #36]	@ 0x24
 8007bca:	f7ff ff26 	bl	8007a1a <__exponent>
 8007bce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007bd0:	1813      	adds	r3, r2, r0
 8007bd2:	2a01      	cmp	r2, #1
 8007bd4:	4681      	mov	r9, r0
 8007bd6:	6123      	str	r3, [r4, #16]
 8007bd8:	dc02      	bgt.n	8007be0 <_printf_float+0x150>
 8007bda:	6822      	ldr	r2, [r4, #0]
 8007bdc:	07d2      	lsls	r2, r2, #31
 8007bde:	d501      	bpl.n	8007be4 <_printf_float+0x154>
 8007be0:	3301      	adds	r3, #1
 8007be2:	6123      	str	r3, [r4, #16]
 8007be4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d0a2      	beq.n	8007b32 <_printf_float+0xa2>
 8007bec:	232d      	movs	r3, #45	@ 0x2d
 8007bee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bf2:	e79e      	b.n	8007b32 <_printf_float+0xa2>
 8007bf4:	9a06      	ldr	r2, [sp, #24]
 8007bf6:	2a47      	cmp	r2, #71	@ 0x47
 8007bf8:	d1c2      	bne.n	8007b80 <_printf_float+0xf0>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1c0      	bne.n	8007b80 <_printf_float+0xf0>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e7bd      	b.n	8007b7e <_printf_float+0xee>
 8007c02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007c06:	d9db      	bls.n	8007bc0 <_printf_float+0x130>
 8007c08:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007c0c:	d118      	bne.n	8007c40 <_printf_float+0x1b0>
 8007c0e:	2900      	cmp	r1, #0
 8007c10:	6863      	ldr	r3, [r4, #4]
 8007c12:	dd0b      	ble.n	8007c2c <_printf_float+0x19c>
 8007c14:	6121      	str	r1, [r4, #16]
 8007c16:	b913      	cbnz	r3, 8007c1e <_printf_float+0x18e>
 8007c18:	6822      	ldr	r2, [r4, #0]
 8007c1a:	07d0      	lsls	r0, r2, #31
 8007c1c:	d502      	bpl.n	8007c24 <_printf_float+0x194>
 8007c1e:	3301      	adds	r3, #1
 8007c20:	440b      	add	r3, r1
 8007c22:	6123      	str	r3, [r4, #16]
 8007c24:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007c26:	f04f 0900 	mov.w	r9, #0
 8007c2a:	e7db      	b.n	8007be4 <_printf_float+0x154>
 8007c2c:	b913      	cbnz	r3, 8007c34 <_printf_float+0x1a4>
 8007c2e:	6822      	ldr	r2, [r4, #0]
 8007c30:	07d2      	lsls	r2, r2, #31
 8007c32:	d501      	bpl.n	8007c38 <_printf_float+0x1a8>
 8007c34:	3302      	adds	r3, #2
 8007c36:	e7f4      	b.n	8007c22 <_printf_float+0x192>
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e7f2      	b.n	8007c22 <_printf_float+0x192>
 8007c3c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007c40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c42:	4299      	cmp	r1, r3
 8007c44:	db05      	blt.n	8007c52 <_printf_float+0x1c2>
 8007c46:	6823      	ldr	r3, [r4, #0]
 8007c48:	6121      	str	r1, [r4, #16]
 8007c4a:	07d8      	lsls	r0, r3, #31
 8007c4c:	d5ea      	bpl.n	8007c24 <_printf_float+0x194>
 8007c4e:	1c4b      	adds	r3, r1, #1
 8007c50:	e7e7      	b.n	8007c22 <_printf_float+0x192>
 8007c52:	2900      	cmp	r1, #0
 8007c54:	bfd4      	ite	le
 8007c56:	f1c1 0202 	rsble	r2, r1, #2
 8007c5a:	2201      	movgt	r2, #1
 8007c5c:	4413      	add	r3, r2
 8007c5e:	e7e0      	b.n	8007c22 <_printf_float+0x192>
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	055a      	lsls	r2, r3, #21
 8007c64:	d407      	bmi.n	8007c76 <_printf_float+0x1e6>
 8007c66:	6923      	ldr	r3, [r4, #16]
 8007c68:	4642      	mov	r2, r8
 8007c6a:	4631      	mov	r1, r6
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	47b8      	blx	r7
 8007c70:	3001      	adds	r0, #1
 8007c72:	d12b      	bne.n	8007ccc <_printf_float+0x23c>
 8007c74:	e767      	b.n	8007b46 <_printf_float+0xb6>
 8007c76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007c7a:	f240 80dd 	bls.w	8007e38 <_printf_float+0x3a8>
 8007c7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c82:	2200      	movs	r2, #0
 8007c84:	2300      	movs	r3, #0
 8007c86:	f7f8 ff47 	bl	8000b18 <__aeabi_dcmpeq>
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d033      	beq.n	8007cf6 <_printf_float+0x266>
 8007c8e:	4a37      	ldr	r2, [pc, #220]	@ (8007d6c <_printf_float+0x2dc>)
 8007c90:	2301      	movs	r3, #1
 8007c92:	4631      	mov	r1, r6
 8007c94:	4628      	mov	r0, r5
 8007c96:	47b8      	blx	r7
 8007c98:	3001      	adds	r0, #1
 8007c9a:	f43f af54 	beq.w	8007b46 <_printf_float+0xb6>
 8007c9e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007ca2:	4543      	cmp	r3, r8
 8007ca4:	db02      	blt.n	8007cac <_printf_float+0x21c>
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	07d8      	lsls	r0, r3, #31
 8007caa:	d50f      	bpl.n	8007ccc <_printf_float+0x23c>
 8007cac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cb0:	4631      	mov	r1, r6
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	47b8      	blx	r7
 8007cb6:	3001      	adds	r0, #1
 8007cb8:	f43f af45 	beq.w	8007b46 <_printf_float+0xb6>
 8007cbc:	f04f 0900 	mov.w	r9, #0
 8007cc0:	f108 38ff 	add.w	r8, r8, #4294967295
 8007cc4:	f104 0a1a 	add.w	sl, r4, #26
 8007cc8:	45c8      	cmp	r8, r9
 8007cca:	dc09      	bgt.n	8007ce0 <_printf_float+0x250>
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	079b      	lsls	r3, r3, #30
 8007cd0:	f100 8103 	bmi.w	8007eda <_printf_float+0x44a>
 8007cd4:	68e0      	ldr	r0, [r4, #12]
 8007cd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cd8:	4298      	cmp	r0, r3
 8007cda:	bfb8      	it	lt
 8007cdc:	4618      	movlt	r0, r3
 8007cde:	e734      	b.n	8007b4a <_printf_float+0xba>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	4652      	mov	r2, sl
 8007ce4:	4631      	mov	r1, r6
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	47b8      	blx	r7
 8007cea:	3001      	adds	r0, #1
 8007cec:	f43f af2b 	beq.w	8007b46 <_printf_float+0xb6>
 8007cf0:	f109 0901 	add.w	r9, r9, #1
 8007cf4:	e7e8      	b.n	8007cc8 <_printf_float+0x238>
 8007cf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	dc39      	bgt.n	8007d70 <_printf_float+0x2e0>
 8007cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8007d6c <_printf_float+0x2dc>)
 8007cfe:	2301      	movs	r3, #1
 8007d00:	4631      	mov	r1, r6
 8007d02:	4628      	mov	r0, r5
 8007d04:	47b8      	blx	r7
 8007d06:	3001      	adds	r0, #1
 8007d08:	f43f af1d 	beq.w	8007b46 <_printf_float+0xb6>
 8007d0c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007d10:	ea59 0303 	orrs.w	r3, r9, r3
 8007d14:	d102      	bne.n	8007d1c <_printf_float+0x28c>
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	07d9      	lsls	r1, r3, #31
 8007d1a:	d5d7      	bpl.n	8007ccc <_printf_float+0x23c>
 8007d1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d20:	4631      	mov	r1, r6
 8007d22:	4628      	mov	r0, r5
 8007d24:	47b8      	blx	r7
 8007d26:	3001      	adds	r0, #1
 8007d28:	f43f af0d 	beq.w	8007b46 <_printf_float+0xb6>
 8007d2c:	f04f 0a00 	mov.w	sl, #0
 8007d30:	f104 0b1a 	add.w	fp, r4, #26
 8007d34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d36:	425b      	negs	r3, r3
 8007d38:	4553      	cmp	r3, sl
 8007d3a:	dc01      	bgt.n	8007d40 <_printf_float+0x2b0>
 8007d3c:	464b      	mov	r3, r9
 8007d3e:	e793      	b.n	8007c68 <_printf_float+0x1d8>
 8007d40:	2301      	movs	r3, #1
 8007d42:	465a      	mov	r2, fp
 8007d44:	4631      	mov	r1, r6
 8007d46:	4628      	mov	r0, r5
 8007d48:	47b8      	blx	r7
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	f43f aefb 	beq.w	8007b46 <_printf_float+0xb6>
 8007d50:	f10a 0a01 	add.w	sl, sl, #1
 8007d54:	e7ee      	b.n	8007d34 <_printf_float+0x2a4>
 8007d56:	bf00      	nop
 8007d58:	7fefffff 	.word	0x7fefffff
 8007d5c:	0800a7a8 	.word	0x0800a7a8
 8007d60:	0800a7ac 	.word	0x0800a7ac
 8007d64:	0800a7b0 	.word	0x0800a7b0
 8007d68:	0800a7b4 	.word	0x0800a7b4
 8007d6c:	0800a7b8 	.word	0x0800a7b8
 8007d70:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d72:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007d76:	4553      	cmp	r3, sl
 8007d78:	bfa8      	it	ge
 8007d7a:	4653      	movge	r3, sl
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	4699      	mov	r9, r3
 8007d80:	dc36      	bgt.n	8007df0 <_printf_float+0x360>
 8007d82:	f04f 0b00 	mov.w	fp, #0
 8007d86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d8a:	f104 021a 	add.w	r2, r4, #26
 8007d8e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d90:	9306      	str	r3, [sp, #24]
 8007d92:	eba3 0309 	sub.w	r3, r3, r9
 8007d96:	455b      	cmp	r3, fp
 8007d98:	dc31      	bgt.n	8007dfe <_printf_float+0x36e>
 8007d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d9c:	459a      	cmp	sl, r3
 8007d9e:	dc3a      	bgt.n	8007e16 <_printf_float+0x386>
 8007da0:	6823      	ldr	r3, [r4, #0]
 8007da2:	07da      	lsls	r2, r3, #31
 8007da4:	d437      	bmi.n	8007e16 <_printf_float+0x386>
 8007da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007da8:	ebaa 0903 	sub.w	r9, sl, r3
 8007dac:	9b06      	ldr	r3, [sp, #24]
 8007dae:	ebaa 0303 	sub.w	r3, sl, r3
 8007db2:	4599      	cmp	r9, r3
 8007db4:	bfa8      	it	ge
 8007db6:	4699      	movge	r9, r3
 8007db8:	f1b9 0f00 	cmp.w	r9, #0
 8007dbc:	dc33      	bgt.n	8007e26 <_printf_float+0x396>
 8007dbe:	f04f 0800 	mov.w	r8, #0
 8007dc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007dc6:	f104 0b1a 	add.w	fp, r4, #26
 8007dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dcc:	ebaa 0303 	sub.w	r3, sl, r3
 8007dd0:	eba3 0309 	sub.w	r3, r3, r9
 8007dd4:	4543      	cmp	r3, r8
 8007dd6:	f77f af79 	ble.w	8007ccc <_printf_float+0x23c>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	465a      	mov	r2, fp
 8007dde:	4631      	mov	r1, r6
 8007de0:	4628      	mov	r0, r5
 8007de2:	47b8      	blx	r7
 8007de4:	3001      	adds	r0, #1
 8007de6:	f43f aeae 	beq.w	8007b46 <_printf_float+0xb6>
 8007dea:	f108 0801 	add.w	r8, r8, #1
 8007dee:	e7ec      	b.n	8007dca <_printf_float+0x33a>
 8007df0:	4642      	mov	r2, r8
 8007df2:	4631      	mov	r1, r6
 8007df4:	4628      	mov	r0, r5
 8007df6:	47b8      	blx	r7
 8007df8:	3001      	adds	r0, #1
 8007dfa:	d1c2      	bne.n	8007d82 <_printf_float+0x2f2>
 8007dfc:	e6a3      	b.n	8007b46 <_printf_float+0xb6>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	4631      	mov	r1, r6
 8007e02:	4628      	mov	r0, r5
 8007e04:	9206      	str	r2, [sp, #24]
 8007e06:	47b8      	blx	r7
 8007e08:	3001      	adds	r0, #1
 8007e0a:	f43f ae9c 	beq.w	8007b46 <_printf_float+0xb6>
 8007e0e:	9a06      	ldr	r2, [sp, #24]
 8007e10:	f10b 0b01 	add.w	fp, fp, #1
 8007e14:	e7bb      	b.n	8007d8e <_printf_float+0x2fe>
 8007e16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	47b8      	blx	r7
 8007e20:	3001      	adds	r0, #1
 8007e22:	d1c0      	bne.n	8007da6 <_printf_float+0x316>
 8007e24:	e68f      	b.n	8007b46 <_printf_float+0xb6>
 8007e26:	9a06      	ldr	r2, [sp, #24]
 8007e28:	464b      	mov	r3, r9
 8007e2a:	4442      	add	r2, r8
 8007e2c:	4631      	mov	r1, r6
 8007e2e:	4628      	mov	r0, r5
 8007e30:	47b8      	blx	r7
 8007e32:	3001      	adds	r0, #1
 8007e34:	d1c3      	bne.n	8007dbe <_printf_float+0x32e>
 8007e36:	e686      	b.n	8007b46 <_printf_float+0xb6>
 8007e38:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007e3c:	f1ba 0f01 	cmp.w	sl, #1
 8007e40:	dc01      	bgt.n	8007e46 <_printf_float+0x3b6>
 8007e42:	07db      	lsls	r3, r3, #31
 8007e44:	d536      	bpl.n	8007eb4 <_printf_float+0x424>
 8007e46:	2301      	movs	r3, #1
 8007e48:	4642      	mov	r2, r8
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	47b8      	blx	r7
 8007e50:	3001      	adds	r0, #1
 8007e52:	f43f ae78 	beq.w	8007b46 <_printf_float+0xb6>
 8007e56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	47b8      	blx	r7
 8007e60:	3001      	adds	r0, #1
 8007e62:	f43f ae70 	beq.w	8007b46 <_printf_float+0xb6>
 8007e66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e72:	f7f8 fe51 	bl	8000b18 <__aeabi_dcmpeq>
 8007e76:	b9c0      	cbnz	r0, 8007eaa <_printf_float+0x41a>
 8007e78:	4653      	mov	r3, sl
 8007e7a:	f108 0201 	add.w	r2, r8, #1
 8007e7e:	4631      	mov	r1, r6
 8007e80:	4628      	mov	r0, r5
 8007e82:	47b8      	blx	r7
 8007e84:	3001      	adds	r0, #1
 8007e86:	d10c      	bne.n	8007ea2 <_printf_float+0x412>
 8007e88:	e65d      	b.n	8007b46 <_printf_float+0xb6>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	465a      	mov	r2, fp
 8007e8e:	4631      	mov	r1, r6
 8007e90:	4628      	mov	r0, r5
 8007e92:	47b8      	blx	r7
 8007e94:	3001      	adds	r0, #1
 8007e96:	f43f ae56 	beq.w	8007b46 <_printf_float+0xb6>
 8007e9a:	f108 0801 	add.w	r8, r8, #1
 8007e9e:	45d0      	cmp	r8, sl
 8007ea0:	dbf3      	blt.n	8007e8a <_printf_float+0x3fa>
 8007ea2:	464b      	mov	r3, r9
 8007ea4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007ea8:	e6df      	b.n	8007c6a <_printf_float+0x1da>
 8007eaa:	f04f 0800 	mov.w	r8, #0
 8007eae:	f104 0b1a 	add.w	fp, r4, #26
 8007eb2:	e7f4      	b.n	8007e9e <_printf_float+0x40e>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	4642      	mov	r2, r8
 8007eb8:	e7e1      	b.n	8007e7e <_printf_float+0x3ee>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	464a      	mov	r2, r9
 8007ebe:	4631      	mov	r1, r6
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	47b8      	blx	r7
 8007ec4:	3001      	adds	r0, #1
 8007ec6:	f43f ae3e 	beq.w	8007b46 <_printf_float+0xb6>
 8007eca:	f108 0801 	add.w	r8, r8, #1
 8007ece:	68e3      	ldr	r3, [r4, #12]
 8007ed0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ed2:	1a5b      	subs	r3, r3, r1
 8007ed4:	4543      	cmp	r3, r8
 8007ed6:	dcf0      	bgt.n	8007eba <_printf_float+0x42a>
 8007ed8:	e6fc      	b.n	8007cd4 <_printf_float+0x244>
 8007eda:	f04f 0800 	mov.w	r8, #0
 8007ede:	f104 0919 	add.w	r9, r4, #25
 8007ee2:	e7f4      	b.n	8007ece <_printf_float+0x43e>

08007ee4 <_printf_common>:
 8007ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee8:	4616      	mov	r6, r2
 8007eea:	4698      	mov	r8, r3
 8007eec:	688a      	ldr	r2, [r1, #8]
 8007eee:	690b      	ldr	r3, [r1, #16]
 8007ef0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	bfb8      	it	lt
 8007ef8:	4613      	movlt	r3, r2
 8007efa:	6033      	str	r3, [r6, #0]
 8007efc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f00:	4607      	mov	r7, r0
 8007f02:	460c      	mov	r4, r1
 8007f04:	b10a      	cbz	r2, 8007f0a <_printf_common+0x26>
 8007f06:	3301      	adds	r3, #1
 8007f08:	6033      	str	r3, [r6, #0]
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	0699      	lsls	r1, r3, #26
 8007f0e:	bf42      	ittt	mi
 8007f10:	6833      	ldrmi	r3, [r6, #0]
 8007f12:	3302      	addmi	r3, #2
 8007f14:	6033      	strmi	r3, [r6, #0]
 8007f16:	6825      	ldr	r5, [r4, #0]
 8007f18:	f015 0506 	ands.w	r5, r5, #6
 8007f1c:	d106      	bne.n	8007f2c <_printf_common+0x48>
 8007f1e:	f104 0a19 	add.w	sl, r4, #25
 8007f22:	68e3      	ldr	r3, [r4, #12]
 8007f24:	6832      	ldr	r2, [r6, #0]
 8007f26:	1a9b      	subs	r3, r3, r2
 8007f28:	42ab      	cmp	r3, r5
 8007f2a:	dc26      	bgt.n	8007f7a <_printf_common+0x96>
 8007f2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f30:	6822      	ldr	r2, [r4, #0]
 8007f32:	3b00      	subs	r3, #0
 8007f34:	bf18      	it	ne
 8007f36:	2301      	movne	r3, #1
 8007f38:	0692      	lsls	r2, r2, #26
 8007f3a:	d42b      	bmi.n	8007f94 <_printf_common+0xb0>
 8007f3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f40:	4641      	mov	r1, r8
 8007f42:	4638      	mov	r0, r7
 8007f44:	47c8      	blx	r9
 8007f46:	3001      	adds	r0, #1
 8007f48:	d01e      	beq.n	8007f88 <_printf_common+0xa4>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	6922      	ldr	r2, [r4, #16]
 8007f4e:	f003 0306 	and.w	r3, r3, #6
 8007f52:	2b04      	cmp	r3, #4
 8007f54:	bf02      	ittt	eq
 8007f56:	68e5      	ldreq	r5, [r4, #12]
 8007f58:	6833      	ldreq	r3, [r6, #0]
 8007f5a:	1aed      	subeq	r5, r5, r3
 8007f5c:	68a3      	ldr	r3, [r4, #8]
 8007f5e:	bf0c      	ite	eq
 8007f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f64:	2500      	movne	r5, #0
 8007f66:	4293      	cmp	r3, r2
 8007f68:	bfc4      	itt	gt
 8007f6a:	1a9b      	subgt	r3, r3, r2
 8007f6c:	18ed      	addgt	r5, r5, r3
 8007f6e:	2600      	movs	r6, #0
 8007f70:	341a      	adds	r4, #26
 8007f72:	42b5      	cmp	r5, r6
 8007f74:	d11a      	bne.n	8007fac <_printf_common+0xc8>
 8007f76:	2000      	movs	r0, #0
 8007f78:	e008      	b.n	8007f8c <_printf_common+0xa8>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	4652      	mov	r2, sl
 8007f7e:	4641      	mov	r1, r8
 8007f80:	4638      	mov	r0, r7
 8007f82:	47c8      	blx	r9
 8007f84:	3001      	adds	r0, #1
 8007f86:	d103      	bne.n	8007f90 <_printf_common+0xac>
 8007f88:	f04f 30ff 	mov.w	r0, #4294967295
 8007f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f90:	3501      	adds	r5, #1
 8007f92:	e7c6      	b.n	8007f22 <_printf_common+0x3e>
 8007f94:	18e1      	adds	r1, r4, r3
 8007f96:	1c5a      	adds	r2, r3, #1
 8007f98:	2030      	movs	r0, #48	@ 0x30
 8007f9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f9e:	4422      	add	r2, r4
 8007fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007fa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007fa8:	3302      	adds	r3, #2
 8007faa:	e7c7      	b.n	8007f3c <_printf_common+0x58>
 8007fac:	2301      	movs	r3, #1
 8007fae:	4622      	mov	r2, r4
 8007fb0:	4641      	mov	r1, r8
 8007fb2:	4638      	mov	r0, r7
 8007fb4:	47c8      	blx	r9
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	d0e6      	beq.n	8007f88 <_printf_common+0xa4>
 8007fba:	3601      	adds	r6, #1
 8007fbc:	e7d9      	b.n	8007f72 <_printf_common+0x8e>
	...

08007fc0 <_printf_i>:
 8007fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fc4:	7e0f      	ldrb	r7, [r1, #24]
 8007fc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007fc8:	2f78      	cmp	r7, #120	@ 0x78
 8007fca:	4691      	mov	r9, r2
 8007fcc:	4680      	mov	r8, r0
 8007fce:	460c      	mov	r4, r1
 8007fd0:	469a      	mov	sl, r3
 8007fd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007fd6:	d807      	bhi.n	8007fe8 <_printf_i+0x28>
 8007fd8:	2f62      	cmp	r7, #98	@ 0x62
 8007fda:	d80a      	bhi.n	8007ff2 <_printf_i+0x32>
 8007fdc:	2f00      	cmp	r7, #0
 8007fde:	f000 80d2 	beq.w	8008186 <_printf_i+0x1c6>
 8007fe2:	2f58      	cmp	r7, #88	@ 0x58
 8007fe4:	f000 80b9 	beq.w	800815a <_printf_i+0x19a>
 8007fe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ff0:	e03a      	b.n	8008068 <_printf_i+0xa8>
 8007ff2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ff6:	2b15      	cmp	r3, #21
 8007ff8:	d8f6      	bhi.n	8007fe8 <_printf_i+0x28>
 8007ffa:	a101      	add	r1, pc, #4	@ (adr r1, 8008000 <_printf_i+0x40>)
 8007ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008000:	08008059 	.word	0x08008059
 8008004:	0800806d 	.word	0x0800806d
 8008008:	08007fe9 	.word	0x08007fe9
 800800c:	08007fe9 	.word	0x08007fe9
 8008010:	08007fe9 	.word	0x08007fe9
 8008014:	08007fe9 	.word	0x08007fe9
 8008018:	0800806d 	.word	0x0800806d
 800801c:	08007fe9 	.word	0x08007fe9
 8008020:	08007fe9 	.word	0x08007fe9
 8008024:	08007fe9 	.word	0x08007fe9
 8008028:	08007fe9 	.word	0x08007fe9
 800802c:	0800816d 	.word	0x0800816d
 8008030:	08008097 	.word	0x08008097
 8008034:	08008127 	.word	0x08008127
 8008038:	08007fe9 	.word	0x08007fe9
 800803c:	08007fe9 	.word	0x08007fe9
 8008040:	0800818f 	.word	0x0800818f
 8008044:	08007fe9 	.word	0x08007fe9
 8008048:	08008097 	.word	0x08008097
 800804c:	08007fe9 	.word	0x08007fe9
 8008050:	08007fe9 	.word	0x08007fe9
 8008054:	0800812f 	.word	0x0800812f
 8008058:	6833      	ldr	r3, [r6, #0]
 800805a:	1d1a      	adds	r2, r3, #4
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6032      	str	r2, [r6, #0]
 8008060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008064:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008068:	2301      	movs	r3, #1
 800806a:	e09d      	b.n	80081a8 <_printf_i+0x1e8>
 800806c:	6833      	ldr	r3, [r6, #0]
 800806e:	6820      	ldr	r0, [r4, #0]
 8008070:	1d19      	adds	r1, r3, #4
 8008072:	6031      	str	r1, [r6, #0]
 8008074:	0606      	lsls	r6, r0, #24
 8008076:	d501      	bpl.n	800807c <_printf_i+0xbc>
 8008078:	681d      	ldr	r5, [r3, #0]
 800807a:	e003      	b.n	8008084 <_printf_i+0xc4>
 800807c:	0645      	lsls	r5, r0, #25
 800807e:	d5fb      	bpl.n	8008078 <_printf_i+0xb8>
 8008080:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008084:	2d00      	cmp	r5, #0
 8008086:	da03      	bge.n	8008090 <_printf_i+0xd0>
 8008088:	232d      	movs	r3, #45	@ 0x2d
 800808a:	426d      	negs	r5, r5
 800808c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008090:	4859      	ldr	r0, [pc, #356]	@ (80081f8 <_printf_i+0x238>)
 8008092:	230a      	movs	r3, #10
 8008094:	e011      	b.n	80080ba <_printf_i+0xfa>
 8008096:	6821      	ldr	r1, [r4, #0]
 8008098:	6833      	ldr	r3, [r6, #0]
 800809a:	0608      	lsls	r0, r1, #24
 800809c:	f853 5b04 	ldr.w	r5, [r3], #4
 80080a0:	d402      	bmi.n	80080a8 <_printf_i+0xe8>
 80080a2:	0649      	lsls	r1, r1, #25
 80080a4:	bf48      	it	mi
 80080a6:	b2ad      	uxthmi	r5, r5
 80080a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80080aa:	4853      	ldr	r0, [pc, #332]	@ (80081f8 <_printf_i+0x238>)
 80080ac:	6033      	str	r3, [r6, #0]
 80080ae:	bf14      	ite	ne
 80080b0:	230a      	movne	r3, #10
 80080b2:	2308      	moveq	r3, #8
 80080b4:	2100      	movs	r1, #0
 80080b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80080ba:	6866      	ldr	r6, [r4, #4]
 80080bc:	60a6      	str	r6, [r4, #8]
 80080be:	2e00      	cmp	r6, #0
 80080c0:	bfa2      	ittt	ge
 80080c2:	6821      	ldrge	r1, [r4, #0]
 80080c4:	f021 0104 	bicge.w	r1, r1, #4
 80080c8:	6021      	strge	r1, [r4, #0]
 80080ca:	b90d      	cbnz	r5, 80080d0 <_printf_i+0x110>
 80080cc:	2e00      	cmp	r6, #0
 80080ce:	d04b      	beq.n	8008168 <_printf_i+0x1a8>
 80080d0:	4616      	mov	r6, r2
 80080d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80080d6:	fb03 5711 	mls	r7, r3, r1, r5
 80080da:	5dc7      	ldrb	r7, [r0, r7]
 80080dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080e0:	462f      	mov	r7, r5
 80080e2:	42bb      	cmp	r3, r7
 80080e4:	460d      	mov	r5, r1
 80080e6:	d9f4      	bls.n	80080d2 <_printf_i+0x112>
 80080e8:	2b08      	cmp	r3, #8
 80080ea:	d10b      	bne.n	8008104 <_printf_i+0x144>
 80080ec:	6823      	ldr	r3, [r4, #0]
 80080ee:	07df      	lsls	r7, r3, #31
 80080f0:	d508      	bpl.n	8008104 <_printf_i+0x144>
 80080f2:	6923      	ldr	r3, [r4, #16]
 80080f4:	6861      	ldr	r1, [r4, #4]
 80080f6:	4299      	cmp	r1, r3
 80080f8:	bfde      	ittt	le
 80080fa:	2330      	movle	r3, #48	@ 0x30
 80080fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008100:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008104:	1b92      	subs	r2, r2, r6
 8008106:	6122      	str	r2, [r4, #16]
 8008108:	f8cd a000 	str.w	sl, [sp]
 800810c:	464b      	mov	r3, r9
 800810e:	aa03      	add	r2, sp, #12
 8008110:	4621      	mov	r1, r4
 8008112:	4640      	mov	r0, r8
 8008114:	f7ff fee6 	bl	8007ee4 <_printf_common>
 8008118:	3001      	adds	r0, #1
 800811a:	d14a      	bne.n	80081b2 <_printf_i+0x1f2>
 800811c:	f04f 30ff 	mov.w	r0, #4294967295
 8008120:	b004      	add	sp, #16
 8008122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	f043 0320 	orr.w	r3, r3, #32
 800812c:	6023      	str	r3, [r4, #0]
 800812e:	4833      	ldr	r0, [pc, #204]	@ (80081fc <_printf_i+0x23c>)
 8008130:	2778      	movs	r7, #120	@ 0x78
 8008132:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	6831      	ldr	r1, [r6, #0]
 800813a:	061f      	lsls	r7, r3, #24
 800813c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008140:	d402      	bmi.n	8008148 <_printf_i+0x188>
 8008142:	065f      	lsls	r7, r3, #25
 8008144:	bf48      	it	mi
 8008146:	b2ad      	uxthmi	r5, r5
 8008148:	6031      	str	r1, [r6, #0]
 800814a:	07d9      	lsls	r1, r3, #31
 800814c:	bf44      	itt	mi
 800814e:	f043 0320 	orrmi.w	r3, r3, #32
 8008152:	6023      	strmi	r3, [r4, #0]
 8008154:	b11d      	cbz	r5, 800815e <_printf_i+0x19e>
 8008156:	2310      	movs	r3, #16
 8008158:	e7ac      	b.n	80080b4 <_printf_i+0xf4>
 800815a:	4827      	ldr	r0, [pc, #156]	@ (80081f8 <_printf_i+0x238>)
 800815c:	e7e9      	b.n	8008132 <_printf_i+0x172>
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	f023 0320 	bic.w	r3, r3, #32
 8008164:	6023      	str	r3, [r4, #0]
 8008166:	e7f6      	b.n	8008156 <_printf_i+0x196>
 8008168:	4616      	mov	r6, r2
 800816a:	e7bd      	b.n	80080e8 <_printf_i+0x128>
 800816c:	6833      	ldr	r3, [r6, #0]
 800816e:	6825      	ldr	r5, [r4, #0]
 8008170:	6961      	ldr	r1, [r4, #20]
 8008172:	1d18      	adds	r0, r3, #4
 8008174:	6030      	str	r0, [r6, #0]
 8008176:	062e      	lsls	r6, r5, #24
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	d501      	bpl.n	8008180 <_printf_i+0x1c0>
 800817c:	6019      	str	r1, [r3, #0]
 800817e:	e002      	b.n	8008186 <_printf_i+0x1c6>
 8008180:	0668      	lsls	r0, r5, #25
 8008182:	d5fb      	bpl.n	800817c <_printf_i+0x1bc>
 8008184:	8019      	strh	r1, [r3, #0]
 8008186:	2300      	movs	r3, #0
 8008188:	6123      	str	r3, [r4, #16]
 800818a:	4616      	mov	r6, r2
 800818c:	e7bc      	b.n	8008108 <_printf_i+0x148>
 800818e:	6833      	ldr	r3, [r6, #0]
 8008190:	1d1a      	adds	r2, r3, #4
 8008192:	6032      	str	r2, [r6, #0]
 8008194:	681e      	ldr	r6, [r3, #0]
 8008196:	6862      	ldr	r2, [r4, #4]
 8008198:	2100      	movs	r1, #0
 800819a:	4630      	mov	r0, r6
 800819c:	f7f8 f840 	bl	8000220 <memchr>
 80081a0:	b108      	cbz	r0, 80081a6 <_printf_i+0x1e6>
 80081a2:	1b80      	subs	r0, r0, r6
 80081a4:	6060      	str	r0, [r4, #4]
 80081a6:	6863      	ldr	r3, [r4, #4]
 80081a8:	6123      	str	r3, [r4, #16]
 80081aa:	2300      	movs	r3, #0
 80081ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081b0:	e7aa      	b.n	8008108 <_printf_i+0x148>
 80081b2:	6923      	ldr	r3, [r4, #16]
 80081b4:	4632      	mov	r2, r6
 80081b6:	4649      	mov	r1, r9
 80081b8:	4640      	mov	r0, r8
 80081ba:	47d0      	blx	sl
 80081bc:	3001      	adds	r0, #1
 80081be:	d0ad      	beq.n	800811c <_printf_i+0x15c>
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	079b      	lsls	r3, r3, #30
 80081c4:	d413      	bmi.n	80081ee <_printf_i+0x22e>
 80081c6:	68e0      	ldr	r0, [r4, #12]
 80081c8:	9b03      	ldr	r3, [sp, #12]
 80081ca:	4298      	cmp	r0, r3
 80081cc:	bfb8      	it	lt
 80081ce:	4618      	movlt	r0, r3
 80081d0:	e7a6      	b.n	8008120 <_printf_i+0x160>
 80081d2:	2301      	movs	r3, #1
 80081d4:	4632      	mov	r2, r6
 80081d6:	4649      	mov	r1, r9
 80081d8:	4640      	mov	r0, r8
 80081da:	47d0      	blx	sl
 80081dc:	3001      	adds	r0, #1
 80081de:	d09d      	beq.n	800811c <_printf_i+0x15c>
 80081e0:	3501      	adds	r5, #1
 80081e2:	68e3      	ldr	r3, [r4, #12]
 80081e4:	9903      	ldr	r1, [sp, #12]
 80081e6:	1a5b      	subs	r3, r3, r1
 80081e8:	42ab      	cmp	r3, r5
 80081ea:	dcf2      	bgt.n	80081d2 <_printf_i+0x212>
 80081ec:	e7eb      	b.n	80081c6 <_printf_i+0x206>
 80081ee:	2500      	movs	r5, #0
 80081f0:	f104 0619 	add.w	r6, r4, #25
 80081f4:	e7f5      	b.n	80081e2 <_printf_i+0x222>
 80081f6:	bf00      	nop
 80081f8:	0800a7ba 	.word	0x0800a7ba
 80081fc:	0800a7cb 	.word	0x0800a7cb

08008200 <std>:
 8008200:	2300      	movs	r3, #0
 8008202:	b510      	push	{r4, lr}
 8008204:	4604      	mov	r4, r0
 8008206:	e9c0 3300 	strd	r3, r3, [r0]
 800820a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800820e:	6083      	str	r3, [r0, #8]
 8008210:	8181      	strh	r1, [r0, #12]
 8008212:	6643      	str	r3, [r0, #100]	@ 0x64
 8008214:	81c2      	strh	r2, [r0, #14]
 8008216:	6183      	str	r3, [r0, #24]
 8008218:	4619      	mov	r1, r3
 800821a:	2208      	movs	r2, #8
 800821c:	305c      	adds	r0, #92	@ 0x5c
 800821e:	f000 fa19 	bl	8008654 <memset>
 8008222:	4b0d      	ldr	r3, [pc, #52]	@ (8008258 <std+0x58>)
 8008224:	6263      	str	r3, [r4, #36]	@ 0x24
 8008226:	4b0d      	ldr	r3, [pc, #52]	@ (800825c <std+0x5c>)
 8008228:	62a3      	str	r3, [r4, #40]	@ 0x28
 800822a:	4b0d      	ldr	r3, [pc, #52]	@ (8008260 <std+0x60>)
 800822c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800822e:	4b0d      	ldr	r3, [pc, #52]	@ (8008264 <std+0x64>)
 8008230:	6323      	str	r3, [r4, #48]	@ 0x30
 8008232:	4b0d      	ldr	r3, [pc, #52]	@ (8008268 <std+0x68>)
 8008234:	6224      	str	r4, [r4, #32]
 8008236:	429c      	cmp	r4, r3
 8008238:	d006      	beq.n	8008248 <std+0x48>
 800823a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800823e:	4294      	cmp	r4, r2
 8008240:	d002      	beq.n	8008248 <std+0x48>
 8008242:	33d0      	adds	r3, #208	@ 0xd0
 8008244:	429c      	cmp	r4, r3
 8008246:	d105      	bne.n	8008254 <std+0x54>
 8008248:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800824c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008250:	f000 ba7c 	b.w	800874c <__retarget_lock_init_recursive>
 8008254:	bd10      	pop	{r4, pc}
 8008256:	bf00      	nop
 8008258:	080084a5 	.word	0x080084a5
 800825c:	080084c7 	.word	0x080084c7
 8008260:	080084ff 	.word	0x080084ff
 8008264:	08008523 	.word	0x08008523
 8008268:	20000580 	.word	0x20000580

0800826c <stdio_exit_handler>:
 800826c:	4a02      	ldr	r2, [pc, #8]	@ (8008278 <stdio_exit_handler+0xc>)
 800826e:	4903      	ldr	r1, [pc, #12]	@ (800827c <stdio_exit_handler+0x10>)
 8008270:	4803      	ldr	r0, [pc, #12]	@ (8008280 <stdio_exit_handler+0x14>)
 8008272:	f000 b869 	b.w	8008348 <_fwalk_sglue>
 8008276:	bf00      	nop
 8008278:	2000000c 	.word	0x2000000c
 800827c:	0800a331 	.word	0x0800a331
 8008280:	2000001c 	.word	0x2000001c

08008284 <cleanup_stdio>:
 8008284:	6841      	ldr	r1, [r0, #4]
 8008286:	4b0c      	ldr	r3, [pc, #48]	@ (80082b8 <cleanup_stdio+0x34>)
 8008288:	4299      	cmp	r1, r3
 800828a:	b510      	push	{r4, lr}
 800828c:	4604      	mov	r4, r0
 800828e:	d001      	beq.n	8008294 <cleanup_stdio+0x10>
 8008290:	f002 f84e 	bl	800a330 <_fflush_r>
 8008294:	68a1      	ldr	r1, [r4, #8]
 8008296:	4b09      	ldr	r3, [pc, #36]	@ (80082bc <cleanup_stdio+0x38>)
 8008298:	4299      	cmp	r1, r3
 800829a:	d002      	beq.n	80082a2 <cleanup_stdio+0x1e>
 800829c:	4620      	mov	r0, r4
 800829e:	f002 f847 	bl	800a330 <_fflush_r>
 80082a2:	68e1      	ldr	r1, [r4, #12]
 80082a4:	4b06      	ldr	r3, [pc, #24]	@ (80082c0 <cleanup_stdio+0x3c>)
 80082a6:	4299      	cmp	r1, r3
 80082a8:	d004      	beq.n	80082b4 <cleanup_stdio+0x30>
 80082aa:	4620      	mov	r0, r4
 80082ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082b0:	f002 b83e 	b.w	800a330 <_fflush_r>
 80082b4:	bd10      	pop	{r4, pc}
 80082b6:	bf00      	nop
 80082b8:	20000580 	.word	0x20000580
 80082bc:	200005e8 	.word	0x200005e8
 80082c0:	20000650 	.word	0x20000650

080082c4 <global_stdio_init.part.0>:
 80082c4:	b510      	push	{r4, lr}
 80082c6:	4b0b      	ldr	r3, [pc, #44]	@ (80082f4 <global_stdio_init.part.0+0x30>)
 80082c8:	4c0b      	ldr	r4, [pc, #44]	@ (80082f8 <global_stdio_init.part.0+0x34>)
 80082ca:	4a0c      	ldr	r2, [pc, #48]	@ (80082fc <global_stdio_init.part.0+0x38>)
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	4620      	mov	r0, r4
 80082d0:	2200      	movs	r2, #0
 80082d2:	2104      	movs	r1, #4
 80082d4:	f7ff ff94 	bl	8008200 <std>
 80082d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80082dc:	2201      	movs	r2, #1
 80082de:	2109      	movs	r1, #9
 80082e0:	f7ff ff8e 	bl	8008200 <std>
 80082e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80082e8:	2202      	movs	r2, #2
 80082ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082ee:	2112      	movs	r1, #18
 80082f0:	f7ff bf86 	b.w	8008200 <std>
 80082f4:	200006b8 	.word	0x200006b8
 80082f8:	20000580 	.word	0x20000580
 80082fc:	0800826d 	.word	0x0800826d

08008300 <__sfp_lock_acquire>:
 8008300:	4801      	ldr	r0, [pc, #4]	@ (8008308 <__sfp_lock_acquire+0x8>)
 8008302:	f000 ba24 	b.w	800874e <__retarget_lock_acquire_recursive>
 8008306:	bf00      	nop
 8008308:	200006c1 	.word	0x200006c1

0800830c <__sfp_lock_release>:
 800830c:	4801      	ldr	r0, [pc, #4]	@ (8008314 <__sfp_lock_release+0x8>)
 800830e:	f000 ba1f 	b.w	8008750 <__retarget_lock_release_recursive>
 8008312:	bf00      	nop
 8008314:	200006c1 	.word	0x200006c1

08008318 <__sinit>:
 8008318:	b510      	push	{r4, lr}
 800831a:	4604      	mov	r4, r0
 800831c:	f7ff fff0 	bl	8008300 <__sfp_lock_acquire>
 8008320:	6a23      	ldr	r3, [r4, #32]
 8008322:	b11b      	cbz	r3, 800832c <__sinit+0x14>
 8008324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008328:	f7ff bff0 	b.w	800830c <__sfp_lock_release>
 800832c:	4b04      	ldr	r3, [pc, #16]	@ (8008340 <__sinit+0x28>)
 800832e:	6223      	str	r3, [r4, #32]
 8008330:	4b04      	ldr	r3, [pc, #16]	@ (8008344 <__sinit+0x2c>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1f5      	bne.n	8008324 <__sinit+0xc>
 8008338:	f7ff ffc4 	bl	80082c4 <global_stdio_init.part.0>
 800833c:	e7f2      	b.n	8008324 <__sinit+0xc>
 800833e:	bf00      	nop
 8008340:	08008285 	.word	0x08008285
 8008344:	200006b8 	.word	0x200006b8

08008348 <_fwalk_sglue>:
 8008348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800834c:	4607      	mov	r7, r0
 800834e:	4688      	mov	r8, r1
 8008350:	4614      	mov	r4, r2
 8008352:	2600      	movs	r6, #0
 8008354:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008358:	f1b9 0901 	subs.w	r9, r9, #1
 800835c:	d505      	bpl.n	800836a <_fwalk_sglue+0x22>
 800835e:	6824      	ldr	r4, [r4, #0]
 8008360:	2c00      	cmp	r4, #0
 8008362:	d1f7      	bne.n	8008354 <_fwalk_sglue+0xc>
 8008364:	4630      	mov	r0, r6
 8008366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800836a:	89ab      	ldrh	r3, [r5, #12]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d907      	bls.n	8008380 <_fwalk_sglue+0x38>
 8008370:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008374:	3301      	adds	r3, #1
 8008376:	d003      	beq.n	8008380 <_fwalk_sglue+0x38>
 8008378:	4629      	mov	r1, r5
 800837a:	4638      	mov	r0, r7
 800837c:	47c0      	blx	r8
 800837e:	4306      	orrs	r6, r0
 8008380:	3568      	adds	r5, #104	@ 0x68
 8008382:	e7e9      	b.n	8008358 <_fwalk_sglue+0x10>

08008384 <iprintf>:
 8008384:	b40f      	push	{r0, r1, r2, r3}
 8008386:	b507      	push	{r0, r1, r2, lr}
 8008388:	4906      	ldr	r1, [pc, #24]	@ (80083a4 <iprintf+0x20>)
 800838a:	ab04      	add	r3, sp, #16
 800838c:	6808      	ldr	r0, [r1, #0]
 800838e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008392:	6881      	ldr	r1, [r0, #8]
 8008394:	9301      	str	r3, [sp, #4]
 8008396:	f001 fe2f 	bl	8009ff8 <_vfiprintf_r>
 800839a:	b003      	add	sp, #12
 800839c:	f85d eb04 	ldr.w	lr, [sp], #4
 80083a0:	b004      	add	sp, #16
 80083a2:	4770      	bx	lr
 80083a4:	20000018 	.word	0x20000018

080083a8 <_puts_r>:
 80083a8:	6a03      	ldr	r3, [r0, #32]
 80083aa:	b570      	push	{r4, r5, r6, lr}
 80083ac:	6884      	ldr	r4, [r0, #8]
 80083ae:	4605      	mov	r5, r0
 80083b0:	460e      	mov	r6, r1
 80083b2:	b90b      	cbnz	r3, 80083b8 <_puts_r+0x10>
 80083b4:	f7ff ffb0 	bl	8008318 <__sinit>
 80083b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083ba:	07db      	lsls	r3, r3, #31
 80083bc:	d405      	bmi.n	80083ca <_puts_r+0x22>
 80083be:	89a3      	ldrh	r3, [r4, #12]
 80083c0:	0598      	lsls	r0, r3, #22
 80083c2:	d402      	bmi.n	80083ca <_puts_r+0x22>
 80083c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083c6:	f000 f9c2 	bl	800874e <__retarget_lock_acquire_recursive>
 80083ca:	89a3      	ldrh	r3, [r4, #12]
 80083cc:	0719      	lsls	r1, r3, #28
 80083ce:	d502      	bpl.n	80083d6 <_puts_r+0x2e>
 80083d0:	6923      	ldr	r3, [r4, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d135      	bne.n	8008442 <_puts_r+0x9a>
 80083d6:	4621      	mov	r1, r4
 80083d8:	4628      	mov	r0, r5
 80083da:	f000 f8e5 	bl	80085a8 <__swsetup_r>
 80083de:	b380      	cbz	r0, 8008442 <_puts_r+0x9a>
 80083e0:	f04f 35ff 	mov.w	r5, #4294967295
 80083e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083e6:	07da      	lsls	r2, r3, #31
 80083e8:	d405      	bmi.n	80083f6 <_puts_r+0x4e>
 80083ea:	89a3      	ldrh	r3, [r4, #12]
 80083ec:	059b      	lsls	r3, r3, #22
 80083ee:	d402      	bmi.n	80083f6 <_puts_r+0x4e>
 80083f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083f2:	f000 f9ad 	bl	8008750 <__retarget_lock_release_recursive>
 80083f6:	4628      	mov	r0, r5
 80083f8:	bd70      	pop	{r4, r5, r6, pc}
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	da04      	bge.n	8008408 <_puts_r+0x60>
 80083fe:	69a2      	ldr	r2, [r4, #24]
 8008400:	429a      	cmp	r2, r3
 8008402:	dc17      	bgt.n	8008434 <_puts_r+0x8c>
 8008404:	290a      	cmp	r1, #10
 8008406:	d015      	beq.n	8008434 <_puts_r+0x8c>
 8008408:	6823      	ldr	r3, [r4, #0]
 800840a:	1c5a      	adds	r2, r3, #1
 800840c:	6022      	str	r2, [r4, #0]
 800840e:	7019      	strb	r1, [r3, #0]
 8008410:	68a3      	ldr	r3, [r4, #8]
 8008412:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008416:	3b01      	subs	r3, #1
 8008418:	60a3      	str	r3, [r4, #8]
 800841a:	2900      	cmp	r1, #0
 800841c:	d1ed      	bne.n	80083fa <_puts_r+0x52>
 800841e:	2b00      	cmp	r3, #0
 8008420:	da11      	bge.n	8008446 <_puts_r+0x9e>
 8008422:	4622      	mov	r2, r4
 8008424:	210a      	movs	r1, #10
 8008426:	4628      	mov	r0, r5
 8008428:	f000 f87f 	bl	800852a <__swbuf_r>
 800842c:	3001      	adds	r0, #1
 800842e:	d0d7      	beq.n	80083e0 <_puts_r+0x38>
 8008430:	250a      	movs	r5, #10
 8008432:	e7d7      	b.n	80083e4 <_puts_r+0x3c>
 8008434:	4622      	mov	r2, r4
 8008436:	4628      	mov	r0, r5
 8008438:	f000 f877 	bl	800852a <__swbuf_r>
 800843c:	3001      	adds	r0, #1
 800843e:	d1e7      	bne.n	8008410 <_puts_r+0x68>
 8008440:	e7ce      	b.n	80083e0 <_puts_r+0x38>
 8008442:	3e01      	subs	r6, #1
 8008444:	e7e4      	b.n	8008410 <_puts_r+0x68>
 8008446:	6823      	ldr	r3, [r4, #0]
 8008448:	1c5a      	adds	r2, r3, #1
 800844a:	6022      	str	r2, [r4, #0]
 800844c:	220a      	movs	r2, #10
 800844e:	701a      	strb	r2, [r3, #0]
 8008450:	e7ee      	b.n	8008430 <_puts_r+0x88>
	...

08008454 <puts>:
 8008454:	4b02      	ldr	r3, [pc, #8]	@ (8008460 <puts+0xc>)
 8008456:	4601      	mov	r1, r0
 8008458:	6818      	ldr	r0, [r3, #0]
 800845a:	f7ff bfa5 	b.w	80083a8 <_puts_r>
 800845e:	bf00      	nop
 8008460:	20000018 	.word	0x20000018

08008464 <siprintf>:
 8008464:	b40e      	push	{r1, r2, r3}
 8008466:	b500      	push	{lr}
 8008468:	b09c      	sub	sp, #112	@ 0x70
 800846a:	ab1d      	add	r3, sp, #116	@ 0x74
 800846c:	9002      	str	r0, [sp, #8]
 800846e:	9006      	str	r0, [sp, #24]
 8008470:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008474:	4809      	ldr	r0, [pc, #36]	@ (800849c <siprintf+0x38>)
 8008476:	9107      	str	r1, [sp, #28]
 8008478:	9104      	str	r1, [sp, #16]
 800847a:	4909      	ldr	r1, [pc, #36]	@ (80084a0 <siprintf+0x3c>)
 800847c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008480:	9105      	str	r1, [sp, #20]
 8008482:	6800      	ldr	r0, [r0, #0]
 8008484:	9301      	str	r3, [sp, #4]
 8008486:	a902      	add	r1, sp, #8
 8008488:	f001 fc90 	bl	8009dac <_svfiprintf_r>
 800848c:	9b02      	ldr	r3, [sp, #8]
 800848e:	2200      	movs	r2, #0
 8008490:	701a      	strb	r2, [r3, #0]
 8008492:	b01c      	add	sp, #112	@ 0x70
 8008494:	f85d eb04 	ldr.w	lr, [sp], #4
 8008498:	b003      	add	sp, #12
 800849a:	4770      	bx	lr
 800849c:	20000018 	.word	0x20000018
 80084a0:	ffff0208 	.word	0xffff0208

080084a4 <__sread>:
 80084a4:	b510      	push	{r4, lr}
 80084a6:	460c      	mov	r4, r1
 80084a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084ac:	f000 f900 	bl	80086b0 <_read_r>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	bfab      	itete	ge
 80084b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80084b6:	89a3      	ldrhlt	r3, [r4, #12]
 80084b8:	181b      	addge	r3, r3, r0
 80084ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80084be:	bfac      	ite	ge
 80084c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80084c2:	81a3      	strhlt	r3, [r4, #12]
 80084c4:	bd10      	pop	{r4, pc}

080084c6 <__swrite>:
 80084c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ca:	461f      	mov	r7, r3
 80084cc:	898b      	ldrh	r3, [r1, #12]
 80084ce:	05db      	lsls	r3, r3, #23
 80084d0:	4605      	mov	r5, r0
 80084d2:	460c      	mov	r4, r1
 80084d4:	4616      	mov	r6, r2
 80084d6:	d505      	bpl.n	80084e4 <__swrite+0x1e>
 80084d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084dc:	2302      	movs	r3, #2
 80084de:	2200      	movs	r2, #0
 80084e0:	f000 f8d4 	bl	800868c <_lseek_r>
 80084e4:	89a3      	ldrh	r3, [r4, #12]
 80084e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084ee:	81a3      	strh	r3, [r4, #12]
 80084f0:	4632      	mov	r2, r6
 80084f2:	463b      	mov	r3, r7
 80084f4:	4628      	mov	r0, r5
 80084f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084fa:	f000 b8eb 	b.w	80086d4 <_write_r>

080084fe <__sseek>:
 80084fe:	b510      	push	{r4, lr}
 8008500:	460c      	mov	r4, r1
 8008502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008506:	f000 f8c1 	bl	800868c <_lseek_r>
 800850a:	1c43      	adds	r3, r0, #1
 800850c:	89a3      	ldrh	r3, [r4, #12]
 800850e:	bf15      	itete	ne
 8008510:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008512:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008516:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800851a:	81a3      	strheq	r3, [r4, #12]
 800851c:	bf18      	it	ne
 800851e:	81a3      	strhne	r3, [r4, #12]
 8008520:	bd10      	pop	{r4, pc}

08008522 <__sclose>:
 8008522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008526:	f000 b8a1 	b.w	800866c <_close_r>

0800852a <__swbuf_r>:
 800852a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800852c:	460e      	mov	r6, r1
 800852e:	4614      	mov	r4, r2
 8008530:	4605      	mov	r5, r0
 8008532:	b118      	cbz	r0, 800853c <__swbuf_r+0x12>
 8008534:	6a03      	ldr	r3, [r0, #32]
 8008536:	b90b      	cbnz	r3, 800853c <__swbuf_r+0x12>
 8008538:	f7ff feee 	bl	8008318 <__sinit>
 800853c:	69a3      	ldr	r3, [r4, #24]
 800853e:	60a3      	str	r3, [r4, #8]
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	071a      	lsls	r2, r3, #28
 8008544:	d501      	bpl.n	800854a <__swbuf_r+0x20>
 8008546:	6923      	ldr	r3, [r4, #16]
 8008548:	b943      	cbnz	r3, 800855c <__swbuf_r+0x32>
 800854a:	4621      	mov	r1, r4
 800854c:	4628      	mov	r0, r5
 800854e:	f000 f82b 	bl	80085a8 <__swsetup_r>
 8008552:	b118      	cbz	r0, 800855c <__swbuf_r+0x32>
 8008554:	f04f 37ff 	mov.w	r7, #4294967295
 8008558:	4638      	mov	r0, r7
 800855a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800855c:	6823      	ldr	r3, [r4, #0]
 800855e:	6922      	ldr	r2, [r4, #16]
 8008560:	1a98      	subs	r0, r3, r2
 8008562:	6963      	ldr	r3, [r4, #20]
 8008564:	b2f6      	uxtb	r6, r6
 8008566:	4283      	cmp	r3, r0
 8008568:	4637      	mov	r7, r6
 800856a:	dc05      	bgt.n	8008578 <__swbuf_r+0x4e>
 800856c:	4621      	mov	r1, r4
 800856e:	4628      	mov	r0, r5
 8008570:	f001 fede 	bl	800a330 <_fflush_r>
 8008574:	2800      	cmp	r0, #0
 8008576:	d1ed      	bne.n	8008554 <__swbuf_r+0x2a>
 8008578:	68a3      	ldr	r3, [r4, #8]
 800857a:	3b01      	subs	r3, #1
 800857c:	60a3      	str	r3, [r4, #8]
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	1c5a      	adds	r2, r3, #1
 8008582:	6022      	str	r2, [r4, #0]
 8008584:	701e      	strb	r6, [r3, #0]
 8008586:	6962      	ldr	r2, [r4, #20]
 8008588:	1c43      	adds	r3, r0, #1
 800858a:	429a      	cmp	r2, r3
 800858c:	d004      	beq.n	8008598 <__swbuf_r+0x6e>
 800858e:	89a3      	ldrh	r3, [r4, #12]
 8008590:	07db      	lsls	r3, r3, #31
 8008592:	d5e1      	bpl.n	8008558 <__swbuf_r+0x2e>
 8008594:	2e0a      	cmp	r6, #10
 8008596:	d1df      	bne.n	8008558 <__swbuf_r+0x2e>
 8008598:	4621      	mov	r1, r4
 800859a:	4628      	mov	r0, r5
 800859c:	f001 fec8 	bl	800a330 <_fflush_r>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	d0d9      	beq.n	8008558 <__swbuf_r+0x2e>
 80085a4:	e7d6      	b.n	8008554 <__swbuf_r+0x2a>
	...

080085a8 <__swsetup_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	4b29      	ldr	r3, [pc, #164]	@ (8008650 <__swsetup_r+0xa8>)
 80085ac:	4605      	mov	r5, r0
 80085ae:	6818      	ldr	r0, [r3, #0]
 80085b0:	460c      	mov	r4, r1
 80085b2:	b118      	cbz	r0, 80085bc <__swsetup_r+0x14>
 80085b4:	6a03      	ldr	r3, [r0, #32]
 80085b6:	b90b      	cbnz	r3, 80085bc <__swsetup_r+0x14>
 80085b8:	f7ff feae 	bl	8008318 <__sinit>
 80085bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085c0:	0719      	lsls	r1, r3, #28
 80085c2:	d422      	bmi.n	800860a <__swsetup_r+0x62>
 80085c4:	06da      	lsls	r2, r3, #27
 80085c6:	d407      	bmi.n	80085d8 <__swsetup_r+0x30>
 80085c8:	2209      	movs	r2, #9
 80085ca:	602a      	str	r2, [r5, #0]
 80085cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085d0:	81a3      	strh	r3, [r4, #12]
 80085d2:	f04f 30ff 	mov.w	r0, #4294967295
 80085d6:	e033      	b.n	8008640 <__swsetup_r+0x98>
 80085d8:	0758      	lsls	r0, r3, #29
 80085da:	d512      	bpl.n	8008602 <__swsetup_r+0x5a>
 80085dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085de:	b141      	cbz	r1, 80085f2 <__swsetup_r+0x4a>
 80085e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085e4:	4299      	cmp	r1, r3
 80085e6:	d002      	beq.n	80085ee <__swsetup_r+0x46>
 80085e8:	4628      	mov	r0, r5
 80085ea:	f000 ff01 	bl	80093f0 <_free_r>
 80085ee:	2300      	movs	r3, #0
 80085f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80085f2:	89a3      	ldrh	r3, [r4, #12]
 80085f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80085f8:	81a3      	strh	r3, [r4, #12]
 80085fa:	2300      	movs	r3, #0
 80085fc:	6063      	str	r3, [r4, #4]
 80085fe:	6923      	ldr	r3, [r4, #16]
 8008600:	6023      	str	r3, [r4, #0]
 8008602:	89a3      	ldrh	r3, [r4, #12]
 8008604:	f043 0308 	orr.w	r3, r3, #8
 8008608:	81a3      	strh	r3, [r4, #12]
 800860a:	6923      	ldr	r3, [r4, #16]
 800860c:	b94b      	cbnz	r3, 8008622 <__swsetup_r+0x7a>
 800860e:	89a3      	ldrh	r3, [r4, #12]
 8008610:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008618:	d003      	beq.n	8008622 <__swsetup_r+0x7a>
 800861a:	4621      	mov	r1, r4
 800861c:	4628      	mov	r0, r5
 800861e:	f001 fed5 	bl	800a3cc <__smakebuf_r>
 8008622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008626:	f013 0201 	ands.w	r2, r3, #1
 800862a:	d00a      	beq.n	8008642 <__swsetup_r+0x9a>
 800862c:	2200      	movs	r2, #0
 800862e:	60a2      	str	r2, [r4, #8]
 8008630:	6962      	ldr	r2, [r4, #20]
 8008632:	4252      	negs	r2, r2
 8008634:	61a2      	str	r2, [r4, #24]
 8008636:	6922      	ldr	r2, [r4, #16]
 8008638:	b942      	cbnz	r2, 800864c <__swsetup_r+0xa4>
 800863a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800863e:	d1c5      	bne.n	80085cc <__swsetup_r+0x24>
 8008640:	bd38      	pop	{r3, r4, r5, pc}
 8008642:	0799      	lsls	r1, r3, #30
 8008644:	bf58      	it	pl
 8008646:	6962      	ldrpl	r2, [r4, #20]
 8008648:	60a2      	str	r2, [r4, #8]
 800864a:	e7f4      	b.n	8008636 <__swsetup_r+0x8e>
 800864c:	2000      	movs	r0, #0
 800864e:	e7f7      	b.n	8008640 <__swsetup_r+0x98>
 8008650:	20000018 	.word	0x20000018

08008654 <memset>:
 8008654:	4402      	add	r2, r0
 8008656:	4603      	mov	r3, r0
 8008658:	4293      	cmp	r3, r2
 800865a:	d100      	bne.n	800865e <memset+0xa>
 800865c:	4770      	bx	lr
 800865e:	f803 1b01 	strb.w	r1, [r3], #1
 8008662:	e7f9      	b.n	8008658 <memset+0x4>

08008664 <_localeconv_r>:
 8008664:	4800      	ldr	r0, [pc, #0]	@ (8008668 <_localeconv_r+0x4>)
 8008666:	4770      	bx	lr
 8008668:	20000158 	.word	0x20000158

0800866c <_close_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	4d06      	ldr	r5, [pc, #24]	@ (8008688 <_close_r+0x1c>)
 8008670:	2300      	movs	r3, #0
 8008672:	4604      	mov	r4, r0
 8008674:	4608      	mov	r0, r1
 8008676:	602b      	str	r3, [r5, #0]
 8008678:	f7f9 f9ca 	bl	8001a10 <_close>
 800867c:	1c43      	adds	r3, r0, #1
 800867e:	d102      	bne.n	8008686 <_close_r+0x1a>
 8008680:	682b      	ldr	r3, [r5, #0]
 8008682:	b103      	cbz	r3, 8008686 <_close_r+0x1a>
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	bd38      	pop	{r3, r4, r5, pc}
 8008688:	200006bc 	.word	0x200006bc

0800868c <_lseek_r>:
 800868c:	b538      	push	{r3, r4, r5, lr}
 800868e:	4d07      	ldr	r5, [pc, #28]	@ (80086ac <_lseek_r+0x20>)
 8008690:	4604      	mov	r4, r0
 8008692:	4608      	mov	r0, r1
 8008694:	4611      	mov	r1, r2
 8008696:	2200      	movs	r2, #0
 8008698:	602a      	str	r2, [r5, #0]
 800869a:	461a      	mov	r2, r3
 800869c:	f7f9 f9df 	bl	8001a5e <_lseek>
 80086a0:	1c43      	adds	r3, r0, #1
 80086a2:	d102      	bne.n	80086aa <_lseek_r+0x1e>
 80086a4:	682b      	ldr	r3, [r5, #0]
 80086a6:	b103      	cbz	r3, 80086aa <_lseek_r+0x1e>
 80086a8:	6023      	str	r3, [r4, #0]
 80086aa:	bd38      	pop	{r3, r4, r5, pc}
 80086ac:	200006bc 	.word	0x200006bc

080086b0 <_read_r>:
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	4d07      	ldr	r5, [pc, #28]	@ (80086d0 <_read_r+0x20>)
 80086b4:	4604      	mov	r4, r0
 80086b6:	4608      	mov	r0, r1
 80086b8:	4611      	mov	r1, r2
 80086ba:	2200      	movs	r2, #0
 80086bc:	602a      	str	r2, [r5, #0]
 80086be:	461a      	mov	r2, r3
 80086c0:	f7f9 f96d 	bl	800199e <_read>
 80086c4:	1c43      	adds	r3, r0, #1
 80086c6:	d102      	bne.n	80086ce <_read_r+0x1e>
 80086c8:	682b      	ldr	r3, [r5, #0]
 80086ca:	b103      	cbz	r3, 80086ce <_read_r+0x1e>
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	bd38      	pop	{r3, r4, r5, pc}
 80086d0:	200006bc 	.word	0x200006bc

080086d4 <_write_r>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	4d07      	ldr	r5, [pc, #28]	@ (80086f4 <_write_r+0x20>)
 80086d8:	4604      	mov	r4, r0
 80086da:	4608      	mov	r0, r1
 80086dc:	4611      	mov	r1, r2
 80086de:	2200      	movs	r2, #0
 80086e0:	602a      	str	r2, [r5, #0]
 80086e2:	461a      	mov	r2, r3
 80086e4:	f7f9 f978 	bl	80019d8 <_write>
 80086e8:	1c43      	adds	r3, r0, #1
 80086ea:	d102      	bne.n	80086f2 <_write_r+0x1e>
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	b103      	cbz	r3, 80086f2 <_write_r+0x1e>
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
 80086f4:	200006bc 	.word	0x200006bc

080086f8 <__errno>:
 80086f8:	4b01      	ldr	r3, [pc, #4]	@ (8008700 <__errno+0x8>)
 80086fa:	6818      	ldr	r0, [r3, #0]
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	20000018 	.word	0x20000018

08008704 <__libc_init_array>:
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	4d0d      	ldr	r5, [pc, #52]	@ (800873c <__libc_init_array+0x38>)
 8008708:	4c0d      	ldr	r4, [pc, #52]	@ (8008740 <__libc_init_array+0x3c>)
 800870a:	1b64      	subs	r4, r4, r5
 800870c:	10a4      	asrs	r4, r4, #2
 800870e:	2600      	movs	r6, #0
 8008710:	42a6      	cmp	r6, r4
 8008712:	d109      	bne.n	8008728 <__libc_init_array+0x24>
 8008714:	4d0b      	ldr	r5, [pc, #44]	@ (8008744 <__libc_init_array+0x40>)
 8008716:	4c0c      	ldr	r4, [pc, #48]	@ (8008748 <__libc_init_array+0x44>)
 8008718:	f001 ffd4 	bl	800a6c4 <_init>
 800871c:	1b64      	subs	r4, r4, r5
 800871e:	10a4      	asrs	r4, r4, #2
 8008720:	2600      	movs	r6, #0
 8008722:	42a6      	cmp	r6, r4
 8008724:	d105      	bne.n	8008732 <__libc_init_array+0x2e>
 8008726:	bd70      	pop	{r4, r5, r6, pc}
 8008728:	f855 3b04 	ldr.w	r3, [r5], #4
 800872c:	4798      	blx	r3
 800872e:	3601      	adds	r6, #1
 8008730:	e7ee      	b.n	8008710 <__libc_init_array+0xc>
 8008732:	f855 3b04 	ldr.w	r3, [r5], #4
 8008736:	4798      	blx	r3
 8008738:	3601      	adds	r6, #1
 800873a:	e7f2      	b.n	8008722 <__libc_init_array+0x1e>
 800873c:	0800ab20 	.word	0x0800ab20
 8008740:	0800ab20 	.word	0x0800ab20
 8008744:	0800ab20 	.word	0x0800ab20
 8008748:	0800ab24 	.word	0x0800ab24

0800874c <__retarget_lock_init_recursive>:
 800874c:	4770      	bx	lr

0800874e <__retarget_lock_acquire_recursive>:
 800874e:	4770      	bx	lr

08008750 <__retarget_lock_release_recursive>:
 8008750:	4770      	bx	lr

08008752 <quorem>:
 8008752:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008756:	6903      	ldr	r3, [r0, #16]
 8008758:	690c      	ldr	r4, [r1, #16]
 800875a:	42a3      	cmp	r3, r4
 800875c:	4607      	mov	r7, r0
 800875e:	db7e      	blt.n	800885e <quorem+0x10c>
 8008760:	3c01      	subs	r4, #1
 8008762:	f101 0814 	add.w	r8, r1, #20
 8008766:	00a3      	lsls	r3, r4, #2
 8008768:	f100 0514 	add.w	r5, r0, #20
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008772:	9301      	str	r3, [sp, #4]
 8008774:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008778:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800877c:	3301      	adds	r3, #1
 800877e:	429a      	cmp	r2, r3
 8008780:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008784:	fbb2 f6f3 	udiv	r6, r2, r3
 8008788:	d32e      	bcc.n	80087e8 <quorem+0x96>
 800878a:	f04f 0a00 	mov.w	sl, #0
 800878e:	46c4      	mov	ip, r8
 8008790:	46ae      	mov	lr, r5
 8008792:	46d3      	mov	fp, sl
 8008794:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008798:	b298      	uxth	r0, r3
 800879a:	fb06 a000 	mla	r0, r6, r0, sl
 800879e:	0c02      	lsrs	r2, r0, #16
 80087a0:	0c1b      	lsrs	r3, r3, #16
 80087a2:	fb06 2303 	mla	r3, r6, r3, r2
 80087a6:	f8de 2000 	ldr.w	r2, [lr]
 80087aa:	b280      	uxth	r0, r0
 80087ac:	b292      	uxth	r2, r2
 80087ae:	1a12      	subs	r2, r2, r0
 80087b0:	445a      	add	r2, fp
 80087b2:	f8de 0000 	ldr.w	r0, [lr]
 80087b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80087c0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80087c4:	b292      	uxth	r2, r2
 80087c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80087ca:	45e1      	cmp	r9, ip
 80087cc:	f84e 2b04 	str.w	r2, [lr], #4
 80087d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80087d4:	d2de      	bcs.n	8008794 <quorem+0x42>
 80087d6:	9b00      	ldr	r3, [sp, #0]
 80087d8:	58eb      	ldr	r3, [r5, r3]
 80087da:	b92b      	cbnz	r3, 80087e8 <quorem+0x96>
 80087dc:	9b01      	ldr	r3, [sp, #4]
 80087de:	3b04      	subs	r3, #4
 80087e0:	429d      	cmp	r5, r3
 80087e2:	461a      	mov	r2, r3
 80087e4:	d32f      	bcc.n	8008846 <quorem+0xf4>
 80087e6:	613c      	str	r4, [r7, #16]
 80087e8:	4638      	mov	r0, r7
 80087ea:	f001 f97b 	bl	8009ae4 <__mcmp>
 80087ee:	2800      	cmp	r0, #0
 80087f0:	db25      	blt.n	800883e <quorem+0xec>
 80087f2:	4629      	mov	r1, r5
 80087f4:	2000      	movs	r0, #0
 80087f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80087fa:	f8d1 c000 	ldr.w	ip, [r1]
 80087fe:	fa1f fe82 	uxth.w	lr, r2
 8008802:	fa1f f38c 	uxth.w	r3, ip
 8008806:	eba3 030e 	sub.w	r3, r3, lr
 800880a:	4403      	add	r3, r0
 800880c:	0c12      	lsrs	r2, r2, #16
 800880e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008812:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008816:	b29b      	uxth	r3, r3
 8008818:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800881c:	45c1      	cmp	r9, r8
 800881e:	f841 3b04 	str.w	r3, [r1], #4
 8008822:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008826:	d2e6      	bcs.n	80087f6 <quorem+0xa4>
 8008828:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800882c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008830:	b922      	cbnz	r2, 800883c <quorem+0xea>
 8008832:	3b04      	subs	r3, #4
 8008834:	429d      	cmp	r5, r3
 8008836:	461a      	mov	r2, r3
 8008838:	d30b      	bcc.n	8008852 <quorem+0x100>
 800883a:	613c      	str	r4, [r7, #16]
 800883c:	3601      	adds	r6, #1
 800883e:	4630      	mov	r0, r6
 8008840:	b003      	add	sp, #12
 8008842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008846:	6812      	ldr	r2, [r2, #0]
 8008848:	3b04      	subs	r3, #4
 800884a:	2a00      	cmp	r2, #0
 800884c:	d1cb      	bne.n	80087e6 <quorem+0x94>
 800884e:	3c01      	subs	r4, #1
 8008850:	e7c6      	b.n	80087e0 <quorem+0x8e>
 8008852:	6812      	ldr	r2, [r2, #0]
 8008854:	3b04      	subs	r3, #4
 8008856:	2a00      	cmp	r2, #0
 8008858:	d1ef      	bne.n	800883a <quorem+0xe8>
 800885a:	3c01      	subs	r4, #1
 800885c:	e7ea      	b.n	8008834 <quorem+0xe2>
 800885e:	2000      	movs	r0, #0
 8008860:	e7ee      	b.n	8008840 <quorem+0xee>
 8008862:	0000      	movs	r0, r0
 8008864:	0000      	movs	r0, r0
	...

08008868 <_dtoa_r>:
 8008868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886c:	69c7      	ldr	r7, [r0, #28]
 800886e:	b099      	sub	sp, #100	@ 0x64
 8008870:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008874:	ec55 4b10 	vmov	r4, r5, d0
 8008878:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800887a:	9109      	str	r1, [sp, #36]	@ 0x24
 800887c:	4683      	mov	fp, r0
 800887e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008880:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008882:	b97f      	cbnz	r7, 80088a4 <_dtoa_r+0x3c>
 8008884:	2010      	movs	r0, #16
 8008886:	f000 fdfd 	bl	8009484 <malloc>
 800888a:	4602      	mov	r2, r0
 800888c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008890:	b920      	cbnz	r0, 800889c <_dtoa_r+0x34>
 8008892:	4ba7      	ldr	r3, [pc, #668]	@ (8008b30 <_dtoa_r+0x2c8>)
 8008894:	21ef      	movs	r1, #239	@ 0xef
 8008896:	48a7      	ldr	r0, [pc, #668]	@ (8008b34 <_dtoa_r+0x2cc>)
 8008898:	f001 fe2e 	bl	800a4f8 <__assert_func>
 800889c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80088a0:	6007      	str	r7, [r0, #0]
 80088a2:	60c7      	str	r7, [r0, #12]
 80088a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80088a8:	6819      	ldr	r1, [r3, #0]
 80088aa:	b159      	cbz	r1, 80088c4 <_dtoa_r+0x5c>
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	604a      	str	r2, [r1, #4]
 80088b0:	2301      	movs	r3, #1
 80088b2:	4093      	lsls	r3, r2
 80088b4:	608b      	str	r3, [r1, #8]
 80088b6:	4658      	mov	r0, fp
 80088b8:	f000 feda 	bl	8009670 <_Bfree>
 80088bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80088c0:	2200      	movs	r2, #0
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	1e2b      	subs	r3, r5, #0
 80088c6:	bfb9      	ittee	lt
 80088c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80088cc:	9303      	strlt	r3, [sp, #12]
 80088ce:	2300      	movge	r3, #0
 80088d0:	6033      	strge	r3, [r6, #0]
 80088d2:	9f03      	ldr	r7, [sp, #12]
 80088d4:	4b98      	ldr	r3, [pc, #608]	@ (8008b38 <_dtoa_r+0x2d0>)
 80088d6:	bfbc      	itt	lt
 80088d8:	2201      	movlt	r2, #1
 80088da:	6032      	strlt	r2, [r6, #0]
 80088dc:	43bb      	bics	r3, r7
 80088de:	d112      	bne.n	8008906 <_dtoa_r+0x9e>
 80088e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80088e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088ec:	4323      	orrs	r3, r4
 80088ee:	f000 854d 	beq.w	800938c <_dtoa_r+0xb24>
 80088f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008b4c <_dtoa_r+0x2e4>
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 854f 	beq.w	800939c <_dtoa_r+0xb34>
 80088fe:	f10a 0303 	add.w	r3, sl, #3
 8008902:	f000 bd49 	b.w	8009398 <_dtoa_r+0xb30>
 8008906:	ed9d 7b02 	vldr	d7, [sp, #8]
 800890a:	2200      	movs	r2, #0
 800890c:	ec51 0b17 	vmov	r0, r1, d7
 8008910:	2300      	movs	r3, #0
 8008912:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008916:	f7f8 f8ff 	bl	8000b18 <__aeabi_dcmpeq>
 800891a:	4680      	mov	r8, r0
 800891c:	b158      	cbz	r0, 8008936 <_dtoa_r+0xce>
 800891e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008920:	2301      	movs	r3, #1
 8008922:	6013      	str	r3, [r2, #0]
 8008924:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008926:	b113      	cbz	r3, 800892e <_dtoa_r+0xc6>
 8008928:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800892a:	4b84      	ldr	r3, [pc, #528]	@ (8008b3c <_dtoa_r+0x2d4>)
 800892c:	6013      	str	r3, [r2, #0]
 800892e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008b50 <_dtoa_r+0x2e8>
 8008932:	f000 bd33 	b.w	800939c <_dtoa_r+0xb34>
 8008936:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800893a:	aa16      	add	r2, sp, #88	@ 0x58
 800893c:	a917      	add	r1, sp, #92	@ 0x5c
 800893e:	4658      	mov	r0, fp
 8008940:	f001 f980 	bl	8009c44 <__d2b>
 8008944:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008948:	4681      	mov	r9, r0
 800894a:	2e00      	cmp	r6, #0
 800894c:	d077      	beq.n	8008a3e <_dtoa_r+0x1d6>
 800894e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008950:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800895c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008960:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008964:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008968:	4619      	mov	r1, r3
 800896a:	2200      	movs	r2, #0
 800896c:	4b74      	ldr	r3, [pc, #464]	@ (8008b40 <_dtoa_r+0x2d8>)
 800896e:	f7f7 fcb3 	bl	80002d8 <__aeabi_dsub>
 8008972:	a369      	add	r3, pc, #420	@ (adr r3, 8008b18 <_dtoa_r+0x2b0>)
 8008974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008978:	f7f7 fe66 	bl	8000648 <__aeabi_dmul>
 800897c:	a368      	add	r3, pc, #416	@ (adr r3, 8008b20 <_dtoa_r+0x2b8>)
 800897e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008982:	f7f7 fcab 	bl	80002dc <__adddf3>
 8008986:	4604      	mov	r4, r0
 8008988:	4630      	mov	r0, r6
 800898a:	460d      	mov	r5, r1
 800898c:	f7f7 fdf2 	bl	8000574 <__aeabi_i2d>
 8008990:	a365      	add	r3, pc, #404	@ (adr r3, 8008b28 <_dtoa_r+0x2c0>)
 8008992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008996:	f7f7 fe57 	bl	8000648 <__aeabi_dmul>
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
 800899e:	4620      	mov	r0, r4
 80089a0:	4629      	mov	r1, r5
 80089a2:	f7f7 fc9b 	bl	80002dc <__adddf3>
 80089a6:	4604      	mov	r4, r0
 80089a8:	460d      	mov	r5, r1
 80089aa:	f7f8 f8fd 	bl	8000ba8 <__aeabi_d2iz>
 80089ae:	2200      	movs	r2, #0
 80089b0:	4607      	mov	r7, r0
 80089b2:	2300      	movs	r3, #0
 80089b4:	4620      	mov	r0, r4
 80089b6:	4629      	mov	r1, r5
 80089b8:	f7f8 f8b8 	bl	8000b2c <__aeabi_dcmplt>
 80089bc:	b140      	cbz	r0, 80089d0 <_dtoa_r+0x168>
 80089be:	4638      	mov	r0, r7
 80089c0:	f7f7 fdd8 	bl	8000574 <__aeabi_i2d>
 80089c4:	4622      	mov	r2, r4
 80089c6:	462b      	mov	r3, r5
 80089c8:	f7f8 f8a6 	bl	8000b18 <__aeabi_dcmpeq>
 80089cc:	b900      	cbnz	r0, 80089d0 <_dtoa_r+0x168>
 80089ce:	3f01      	subs	r7, #1
 80089d0:	2f16      	cmp	r7, #22
 80089d2:	d851      	bhi.n	8008a78 <_dtoa_r+0x210>
 80089d4:	4b5b      	ldr	r3, [pc, #364]	@ (8008b44 <_dtoa_r+0x2dc>)
 80089d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089e2:	f7f8 f8a3 	bl	8000b2c <__aeabi_dcmplt>
 80089e6:	2800      	cmp	r0, #0
 80089e8:	d048      	beq.n	8008a7c <_dtoa_r+0x214>
 80089ea:	3f01      	subs	r7, #1
 80089ec:	2300      	movs	r3, #0
 80089ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80089f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80089f2:	1b9b      	subs	r3, r3, r6
 80089f4:	1e5a      	subs	r2, r3, #1
 80089f6:	bf44      	itt	mi
 80089f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80089fc:	2300      	movmi	r3, #0
 80089fe:	9208      	str	r2, [sp, #32]
 8008a00:	bf54      	ite	pl
 8008a02:	f04f 0800 	movpl.w	r8, #0
 8008a06:	9308      	strmi	r3, [sp, #32]
 8008a08:	2f00      	cmp	r7, #0
 8008a0a:	db39      	blt.n	8008a80 <_dtoa_r+0x218>
 8008a0c:	9b08      	ldr	r3, [sp, #32]
 8008a0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008a10:	443b      	add	r3, r7
 8008a12:	9308      	str	r3, [sp, #32]
 8008a14:	2300      	movs	r3, #0
 8008a16:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a1a:	2b09      	cmp	r3, #9
 8008a1c:	d864      	bhi.n	8008ae8 <_dtoa_r+0x280>
 8008a1e:	2b05      	cmp	r3, #5
 8008a20:	bfc4      	itt	gt
 8008a22:	3b04      	subgt	r3, #4
 8008a24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a28:	f1a3 0302 	sub.w	r3, r3, #2
 8008a2c:	bfcc      	ite	gt
 8008a2e:	2400      	movgt	r4, #0
 8008a30:	2401      	movle	r4, #1
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d863      	bhi.n	8008afe <_dtoa_r+0x296>
 8008a36:	e8df f003 	tbb	[pc, r3]
 8008a3a:	372a      	.short	0x372a
 8008a3c:	5535      	.short	0x5535
 8008a3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008a42:	441e      	add	r6, r3
 8008a44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008a48:	2b20      	cmp	r3, #32
 8008a4a:	bfc1      	itttt	gt
 8008a4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008a50:	409f      	lslgt	r7, r3
 8008a52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008a56:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008a5a:	bfd6      	itet	le
 8008a5c:	f1c3 0320 	rsble	r3, r3, #32
 8008a60:	ea47 0003 	orrgt.w	r0, r7, r3
 8008a64:	fa04 f003 	lslle.w	r0, r4, r3
 8008a68:	f7f7 fd74 	bl	8000554 <__aeabi_ui2d>
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008a72:	3e01      	subs	r6, #1
 8008a74:	9214      	str	r2, [sp, #80]	@ 0x50
 8008a76:	e777      	b.n	8008968 <_dtoa_r+0x100>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e7b8      	b.n	80089ee <_dtoa_r+0x186>
 8008a7c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008a7e:	e7b7      	b.n	80089f0 <_dtoa_r+0x188>
 8008a80:	427b      	negs	r3, r7
 8008a82:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a84:	2300      	movs	r3, #0
 8008a86:	eba8 0807 	sub.w	r8, r8, r7
 8008a8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a8c:	e7c4      	b.n	8008a18 <_dtoa_r+0x1b0>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	dc35      	bgt.n	8008b04 <_dtoa_r+0x29c>
 8008a98:	2301      	movs	r3, #1
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	9307      	str	r3, [sp, #28]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008aa2:	e00b      	b.n	8008abc <_dtoa_r+0x254>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e7f3      	b.n	8008a90 <_dtoa_r+0x228>
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008aac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008aae:	18fb      	adds	r3, r7, r3
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	9307      	str	r3, [sp, #28]
 8008ab8:	bfb8      	it	lt
 8008aba:	2301      	movlt	r3, #1
 8008abc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	2204      	movs	r2, #4
 8008ac4:	f102 0514 	add.w	r5, r2, #20
 8008ac8:	429d      	cmp	r5, r3
 8008aca:	d91f      	bls.n	8008b0c <_dtoa_r+0x2a4>
 8008acc:	6041      	str	r1, [r0, #4]
 8008ace:	4658      	mov	r0, fp
 8008ad0:	f000 fd8e 	bl	80095f0 <_Balloc>
 8008ad4:	4682      	mov	sl, r0
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	d13c      	bne.n	8008b54 <_dtoa_r+0x2ec>
 8008ada:	4b1b      	ldr	r3, [pc, #108]	@ (8008b48 <_dtoa_r+0x2e0>)
 8008adc:	4602      	mov	r2, r0
 8008ade:	f240 11af 	movw	r1, #431	@ 0x1af
 8008ae2:	e6d8      	b.n	8008896 <_dtoa_r+0x2e>
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e7e0      	b.n	8008aaa <_dtoa_r+0x242>
 8008ae8:	2401      	movs	r4, #1
 8008aea:	2300      	movs	r3, #0
 8008aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aee:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008af0:	f04f 33ff 	mov.w	r3, #4294967295
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	9307      	str	r3, [sp, #28]
 8008af8:	2200      	movs	r2, #0
 8008afa:	2312      	movs	r3, #18
 8008afc:	e7d0      	b.n	8008aa0 <_dtoa_r+0x238>
 8008afe:	2301      	movs	r3, #1
 8008b00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b02:	e7f5      	b.n	8008af0 <_dtoa_r+0x288>
 8008b04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b06:	9300      	str	r3, [sp, #0]
 8008b08:	9307      	str	r3, [sp, #28]
 8008b0a:	e7d7      	b.n	8008abc <_dtoa_r+0x254>
 8008b0c:	3101      	adds	r1, #1
 8008b0e:	0052      	lsls	r2, r2, #1
 8008b10:	e7d8      	b.n	8008ac4 <_dtoa_r+0x25c>
 8008b12:	bf00      	nop
 8008b14:	f3af 8000 	nop.w
 8008b18:	636f4361 	.word	0x636f4361
 8008b1c:	3fd287a7 	.word	0x3fd287a7
 8008b20:	8b60c8b3 	.word	0x8b60c8b3
 8008b24:	3fc68a28 	.word	0x3fc68a28
 8008b28:	509f79fb 	.word	0x509f79fb
 8008b2c:	3fd34413 	.word	0x3fd34413
 8008b30:	0800a7e9 	.word	0x0800a7e9
 8008b34:	0800a800 	.word	0x0800a800
 8008b38:	7ff00000 	.word	0x7ff00000
 8008b3c:	0800a7b9 	.word	0x0800a7b9
 8008b40:	3ff80000 	.word	0x3ff80000
 8008b44:	0800a8f8 	.word	0x0800a8f8
 8008b48:	0800a858 	.word	0x0800a858
 8008b4c:	0800a7e5 	.word	0x0800a7e5
 8008b50:	0800a7b8 	.word	0x0800a7b8
 8008b54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b58:	6018      	str	r0, [r3, #0]
 8008b5a:	9b07      	ldr	r3, [sp, #28]
 8008b5c:	2b0e      	cmp	r3, #14
 8008b5e:	f200 80a4 	bhi.w	8008caa <_dtoa_r+0x442>
 8008b62:	2c00      	cmp	r4, #0
 8008b64:	f000 80a1 	beq.w	8008caa <_dtoa_r+0x442>
 8008b68:	2f00      	cmp	r7, #0
 8008b6a:	dd33      	ble.n	8008bd4 <_dtoa_r+0x36c>
 8008b6c:	4bad      	ldr	r3, [pc, #692]	@ (8008e24 <_dtoa_r+0x5bc>)
 8008b6e:	f007 020f 	and.w	r2, r7, #15
 8008b72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b76:	ed93 7b00 	vldr	d7, [r3]
 8008b7a:	05f8      	lsls	r0, r7, #23
 8008b7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008b80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008b84:	d516      	bpl.n	8008bb4 <_dtoa_r+0x34c>
 8008b86:	4ba8      	ldr	r3, [pc, #672]	@ (8008e28 <_dtoa_r+0x5c0>)
 8008b88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b90:	f7f7 fe84 	bl	800089c <__aeabi_ddiv>
 8008b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b98:	f004 040f 	and.w	r4, r4, #15
 8008b9c:	2603      	movs	r6, #3
 8008b9e:	4da2      	ldr	r5, [pc, #648]	@ (8008e28 <_dtoa_r+0x5c0>)
 8008ba0:	b954      	cbnz	r4, 8008bb8 <_dtoa_r+0x350>
 8008ba2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008baa:	f7f7 fe77 	bl	800089c <__aeabi_ddiv>
 8008bae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bb2:	e028      	b.n	8008c06 <_dtoa_r+0x39e>
 8008bb4:	2602      	movs	r6, #2
 8008bb6:	e7f2      	b.n	8008b9e <_dtoa_r+0x336>
 8008bb8:	07e1      	lsls	r1, r4, #31
 8008bba:	d508      	bpl.n	8008bce <_dtoa_r+0x366>
 8008bbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008bc4:	f7f7 fd40 	bl	8000648 <__aeabi_dmul>
 8008bc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bcc:	3601      	adds	r6, #1
 8008bce:	1064      	asrs	r4, r4, #1
 8008bd0:	3508      	adds	r5, #8
 8008bd2:	e7e5      	b.n	8008ba0 <_dtoa_r+0x338>
 8008bd4:	f000 80d2 	beq.w	8008d7c <_dtoa_r+0x514>
 8008bd8:	427c      	negs	r4, r7
 8008bda:	4b92      	ldr	r3, [pc, #584]	@ (8008e24 <_dtoa_r+0x5bc>)
 8008bdc:	4d92      	ldr	r5, [pc, #584]	@ (8008e28 <_dtoa_r+0x5c0>)
 8008bde:	f004 020f 	and.w	r2, r4, #15
 8008be2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bee:	f7f7 fd2b 	bl	8000648 <__aeabi_dmul>
 8008bf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bf6:	1124      	asrs	r4, r4, #4
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	2602      	movs	r6, #2
 8008bfc:	2c00      	cmp	r4, #0
 8008bfe:	f040 80b2 	bne.w	8008d66 <_dtoa_r+0x4fe>
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1d3      	bne.n	8008bae <_dtoa_r+0x346>
 8008c06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f000 80b7 	beq.w	8008d80 <_dtoa_r+0x518>
 8008c12:	4b86      	ldr	r3, [pc, #536]	@ (8008e2c <_dtoa_r+0x5c4>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	4620      	mov	r0, r4
 8008c18:	4629      	mov	r1, r5
 8008c1a:	f7f7 ff87 	bl	8000b2c <__aeabi_dcmplt>
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	f000 80ae 	beq.w	8008d80 <_dtoa_r+0x518>
 8008c24:	9b07      	ldr	r3, [sp, #28]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f000 80aa 	beq.w	8008d80 <_dtoa_r+0x518>
 8008c2c:	9b00      	ldr	r3, [sp, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	dd37      	ble.n	8008ca2 <_dtoa_r+0x43a>
 8008c32:	1e7b      	subs	r3, r7, #1
 8008c34:	9304      	str	r3, [sp, #16]
 8008c36:	4620      	mov	r0, r4
 8008c38:	4b7d      	ldr	r3, [pc, #500]	@ (8008e30 <_dtoa_r+0x5c8>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	4629      	mov	r1, r5
 8008c3e:	f7f7 fd03 	bl	8000648 <__aeabi_dmul>
 8008c42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c46:	9c00      	ldr	r4, [sp, #0]
 8008c48:	3601      	adds	r6, #1
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	f7f7 fc92 	bl	8000574 <__aeabi_i2d>
 8008c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c54:	f7f7 fcf8 	bl	8000648 <__aeabi_dmul>
 8008c58:	4b76      	ldr	r3, [pc, #472]	@ (8008e34 <_dtoa_r+0x5cc>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f7f7 fb3e 	bl	80002dc <__adddf3>
 8008c60:	4605      	mov	r5, r0
 8008c62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008c66:	2c00      	cmp	r4, #0
 8008c68:	f040 808d 	bne.w	8008d86 <_dtoa_r+0x51e>
 8008c6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c70:	4b71      	ldr	r3, [pc, #452]	@ (8008e38 <_dtoa_r+0x5d0>)
 8008c72:	2200      	movs	r2, #0
 8008c74:	f7f7 fb30 	bl	80002d8 <__aeabi_dsub>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c80:	462a      	mov	r2, r5
 8008c82:	4633      	mov	r3, r6
 8008c84:	f7f7 ff70 	bl	8000b68 <__aeabi_dcmpgt>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	f040 828b 	bne.w	80091a4 <_dtoa_r+0x93c>
 8008c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c92:	462a      	mov	r2, r5
 8008c94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008c98:	f7f7 ff48 	bl	8000b2c <__aeabi_dcmplt>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	f040 8128 	bne.w	8008ef2 <_dtoa_r+0x68a>
 8008ca2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008ca6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008caa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f2c0 815a 	blt.w	8008f66 <_dtoa_r+0x6fe>
 8008cb2:	2f0e      	cmp	r7, #14
 8008cb4:	f300 8157 	bgt.w	8008f66 <_dtoa_r+0x6fe>
 8008cb8:	4b5a      	ldr	r3, [pc, #360]	@ (8008e24 <_dtoa_r+0x5bc>)
 8008cba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008cbe:	ed93 7b00 	vldr	d7, [r3]
 8008cc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	ed8d 7b00 	vstr	d7, [sp]
 8008cca:	da03      	bge.n	8008cd4 <_dtoa_r+0x46c>
 8008ccc:	9b07      	ldr	r3, [sp, #28]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f340 8101 	ble.w	8008ed6 <_dtoa_r+0x66e>
 8008cd4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008cd8:	4656      	mov	r6, sl
 8008cda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cde:	4620      	mov	r0, r4
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	f7f7 fddb 	bl	800089c <__aeabi_ddiv>
 8008ce6:	f7f7 ff5f 	bl	8000ba8 <__aeabi_d2iz>
 8008cea:	4680      	mov	r8, r0
 8008cec:	f7f7 fc42 	bl	8000574 <__aeabi_i2d>
 8008cf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cf4:	f7f7 fca8 	bl	8000648 <__aeabi_dmul>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	4629      	mov	r1, r5
 8008d00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008d04:	f7f7 fae8 	bl	80002d8 <__aeabi_dsub>
 8008d08:	f806 4b01 	strb.w	r4, [r6], #1
 8008d0c:	9d07      	ldr	r5, [sp, #28]
 8008d0e:	eba6 040a 	sub.w	r4, r6, sl
 8008d12:	42a5      	cmp	r5, r4
 8008d14:	4602      	mov	r2, r0
 8008d16:	460b      	mov	r3, r1
 8008d18:	f040 8117 	bne.w	8008f4a <_dtoa_r+0x6e2>
 8008d1c:	f7f7 fade 	bl	80002dc <__adddf3>
 8008d20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d24:	4604      	mov	r4, r0
 8008d26:	460d      	mov	r5, r1
 8008d28:	f7f7 ff1e 	bl	8000b68 <__aeabi_dcmpgt>
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	f040 80f9 	bne.w	8008f24 <_dtoa_r+0x6bc>
 8008d32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d36:	4620      	mov	r0, r4
 8008d38:	4629      	mov	r1, r5
 8008d3a:	f7f7 feed 	bl	8000b18 <__aeabi_dcmpeq>
 8008d3e:	b118      	cbz	r0, 8008d48 <_dtoa_r+0x4e0>
 8008d40:	f018 0f01 	tst.w	r8, #1
 8008d44:	f040 80ee 	bne.w	8008f24 <_dtoa_r+0x6bc>
 8008d48:	4649      	mov	r1, r9
 8008d4a:	4658      	mov	r0, fp
 8008d4c:	f000 fc90 	bl	8009670 <_Bfree>
 8008d50:	2300      	movs	r3, #0
 8008d52:	7033      	strb	r3, [r6, #0]
 8008d54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d56:	3701      	adds	r7, #1
 8008d58:	601f      	str	r7, [r3, #0]
 8008d5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f000 831d 	beq.w	800939c <_dtoa_r+0xb34>
 8008d62:	601e      	str	r6, [r3, #0]
 8008d64:	e31a      	b.n	800939c <_dtoa_r+0xb34>
 8008d66:	07e2      	lsls	r2, r4, #31
 8008d68:	d505      	bpl.n	8008d76 <_dtoa_r+0x50e>
 8008d6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d6e:	f7f7 fc6b 	bl	8000648 <__aeabi_dmul>
 8008d72:	3601      	adds	r6, #1
 8008d74:	2301      	movs	r3, #1
 8008d76:	1064      	asrs	r4, r4, #1
 8008d78:	3508      	adds	r5, #8
 8008d7a:	e73f      	b.n	8008bfc <_dtoa_r+0x394>
 8008d7c:	2602      	movs	r6, #2
 8008d7e:	e742      	b.n	8008c06 <_dtoa_r+0x39e>
 8008d80:	9c07      	ldr	r4, [sp, #28]
 8008d82:	9704      	str	r7, [sp, #16]
 8008d84:	e761      	b.n	8008c4a <_dtoa_r+0x3e2>
 8008d86:	4b27      	ldr	r3, [pc, #156]	@ (8008e24 <_dtoa_r+0x5bc>)
 8008d88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d92:	4454      	add	r4, sl
 8008d94:	2900      	cmp	r1, #0
 8008d96:	d053      	beq.n	8008e40 <_dtoa_r+0x5d8>
 8008d98:	4928      	ldr	r1, [pc, #160]	@ (8008e3c <_dtoa_r+0x5d4>)
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	f7f7 fd7e 	bl	800089c <__aeabi_ddiv>
 8008da0:	4633      	mov	r3, r6
 8008da2:	462a      	mov	r2, r5
 8008da4:	f7f7 fa98 	bl	80002d8 <__aeabi_dsub>
 8008da8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008dac:	4656      	mov	r6, sl
 8008dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008db2:	f7f7 fef9 	bl	8000ba8 <__aeabi_d2iz>
 8008db6:	4605      	mov	r5, r0
 8008db8:	f7f7 fbdc 	bl	8000574 <__aeabi_i2d>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dc4:	f7f7 fa88 	bl	80002d8 <__aeabi_dsub>
 8008dc8:	3530      	adds	r5, #48	@ 0x30
 8008dca:	4602      	mov	r2, r0
 8008dcc:	460b      	mov	r3, r1
 8008dce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008dd2:	f806 5b01 	strb.w	r5, [r6], #1
 8008dd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008dda:	f7f7 fea7 	bl	8000b2c <__aeabi_dcmplt>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d171      	bne.n	8008ec6 <_dtoa_r+0x65e>
 8008de2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008de6:	4911      	ldr	r1, [pc, #68]	@ (8008e2c <_dtoa_r+0x5c4>)
 8008de8:	2000      	movs	r0, #0
 8008dea:	f7f7 fa75 	bl	80002d8 <__aeabi_dsub>
 8008dee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008df2:	f7f7 fe9b 	bl	8000b2c <__aeabi_dcmplt>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	f040 8095 	bne.w	8008f26 <_dtoa_r+0x6be>
 8008dfc:	42a6      	cmp	r6, r4
 8008dfe:	f43f af50 	beq.w	8008ca2 <_dtoa_r+0x43a>
 8008e02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e06:	4b0a      	ldr	r3, [pc, #40]	@ (8008e30 <_dtoa_r+0x5c8>)
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f7f7 fc1d 	bl	8000648 <__aeabi_dmul>
 8008e0e:	4b08      	ldr	r3, [pc, #32]	@ (8008e30 <_dtoa_r+0x5c8>)
 8008e10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e14:	2200      	movs	r2, #0
 8008e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e1a:	f7f7 fc15 	bl	8000648 <__aeabi_dmul>
 8008e1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e22:	e7c4      	b.n	8008dae <_dtoa_r+0x546>
 8008e24:	0800a8f8 	.word	0x0800a8f8
 8008e28:	0800a8d0 	.word	0x0800a8d0
 8008e2c:	3ff00000 	.word	0x3ff00000
 8008e30:	40240000 	.word	0x40240000
 8008e34:	401c0000 	.word	0x401c0000
 8008e38:	40140000 	.word	0x40140000
 8008e3c:	3fe00000 	.word	0x3fe00000
 8008e40:	4631      	mov	r1, r6
 8008e42:	4628      	mov	r0, r5
 8008e44:	f7f7 fc00 	bl	8000648 <__aeabi_dmul>
 8008e48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e4c:	9415      	str	r4, [sp, #84]	@ 0x54
 8008e4e:	4656      	mov	r6, sl
 8008e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e54:	f7f7 fea8 	bl	8000ba8 <__aeabi_d2iz>
 8008e58:	4605      	mov	r5, r0
 8008e5a:	f7f7 fb8b 	bl	8000574 <__aeabi_i2d>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	460b      	mov	r3, r1
 8008e62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e66:	f7f7 fa37 	bl	80002d8 <__aeabi_dsub>
 8008e6a:	3530      	adds	r5, #48	@ 0x30
 8008e6c:	f806 5b01 	strb.w	r5, [r6], #1
 8008e70:	4602      	mov	r2, r0
 8008e72:	460b      	mov	r3, r1
 8008e74:	42a6      	cmp	r6, r4
 8008e76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e7a:	f04f 0200 	mov.w	r2, #0
 8008e7e:	d124      	bne.n	8008eca <_dtoa_r+0x662>
 8008e80:	4bac      	ldr	r3, [pc, #688]	@ (8009134 <_dtoa_r+0x8cc>)
 8008e82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e86:	f7f7 fa29 	bl	80002dc <__adddf3>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e92:	f7f7 fe69 	bl	8000b68 <__aeabi_dcmpgt>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	d145      	bne.n	8008f26 <_dtoa_r+0x6be>
 8008e9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e9e:	49a5      	ldr	r1, [pc, #660]	@ (8009134 <_dtoa_r+0x8cc>)
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	f7f7 fa19 	bl	80002d8 <__aeabi_dsub>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eae:	f7f7 fe3d 	bl	8000b2c <__aeabi_dcmplt>
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	f43f aef5 	beq.w	8008ca2 <_dtoa_r+0x43a>
 8008eb8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008eba:	1e73      	subs	r3, r6, #1
 8008ebc:	9315      	str	r3, [sp, #84]	@ 0x54
 8008ebe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008ec2:	2b30      	cmp	r3, #48	@ 0x30
 8008ec4:	d0f8      	beq.n	8008eb8 <_dtoa_r+0x650>
 8008ec6:	9f04      	ldr	r7, [sp, #16]
 8008ec8:	e73e      	b.n	8008d48 <_dtoa_r+0x4e0>
 8008eca:	4b9b      	ldr	r3, [pc, #620]	@ (8009138 <_dtoa_r+0x8d0>)
 8008ecc:	f7f7 fbbc 	bl	8000648 <__aeabi_dmul>
 8008ed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ed4:	e7bc      	b.n	8008e50 <_dtoa_r+0x5e8>
 8008ed6:	d10c      	bne.n	8008ef2 <_dtoa_r+0x68a>
 8008ed8:	4b98      	ldr	r3, [pc, #608]	@ (800913c <_dtoa_r+0x8d4>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ee0:	f7f7 fbb2 	bl	8000648 <__aeabi_dmul>
 8008ee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ee8:	f7f7 fe34 	bl	8000b54 <__aeabi_dcmpge>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	f000 8157 	beq.w	80091a0 <_dtoa_r+0x938>
 8008ef2:	2400      	movs	r4, #0
 8008ef4:	4625      	mov	r5, r4
 8008ef6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ef8:	43db      	mvns	r3, r3
 8008efa:	9304      	str	r3, [sp, #16]
 8008efc:	4656      	mov	r6, sl
 8008efe:	2700      	movs	r7, #0
 8008f00:	4621      	mov	r1, r4
 8008f02:	4658      	mov	r0, fp
 8008f04:	f000 fbb4 	bl	8009670 <_Bfree>
 8008f08:	2d00      	cmp	r5, #0
 8008f0a:	d0dc      	beq.n	8008ec6 <_dtoa_r+0x65e>
 8008f0c:	b12f      	cbz	r7, 8008f1a <_dtoa_r+0x6b2>
 8008f0e:	42af      	cmp	r7, r5
 8008f10:	d003      	beq.n	8008f1a <_dtoa_r+0x6b2>
 8008f12:	4639      	mov	r1, r7
 8008f14:	4658      	mov	r0, fp
 8008f16:	f000 fbab 	bl	8009670 <_Bfree>
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	4658      	mov	r0, fp
 8008f1e:	f000 fba7 	bl	8009670 <_Bfree>
 8008f22:	e7d0      	b.n	8008ec6 <_dtoa_r+0x65e>
 8008f24:	9704      	str	r7, [sp, #16]
 8008f26:	4633      	mov	r3, r6
 8008f28:	461e      	mov	r6, r3
 8008f2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f2e:	2a39      	cmp	r2, #57	@ 0x39
 8008f30:	d107      	bne.n	8008f42 <_dtoa_r+0x6da>
 8008f32:	459a      	cmp	sl, r3
 8008f34:	d1f8      	bne.n	8008f28 <_dtoa_r+0x6c0>
 8008f36:	9a04      	ldr	r2, [sp, #16]
 8008f38:	3201      	adds	r2, #1
 8008f3a:	9204      	str	r2, [sp, #16]
 8008f3c:	2230      	movs	r2, #48	@ 0x30
 8008f3e:	f88a 2000 	strb.w	r2, [sl]
 8008f42:	781a      	ldrb	r2, [r3, #0]
 8008f44:	3201      	adds	r2, #1
 8008f46:	701a      	strb	r2, [r3, #0]
 8008f48:	e7bd      	b.n	8008ec6 <_dtoa_r+0x65e>
 8008f4a:	4b7b      	ldr	r3, [pc, #492]	@ (8009138 <_dtoa_r+0x8d0>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f7f7 fb7b 	bl	8000648 <__aeabi_dmul>
 8008f52:	2200      	movs	r2, #0
 8008f54:	2300      	movs	r3, #0
 8008f56:	4604      	mov	r4, r0
 8008f58:	460d      	mov	r5, r1
 8008f5a:	f7f7 fddd 	bl	8000b18 <__aeabi_dcmpeq>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	f43f aebb 	beq.w	8008cda <_dtoa_r+0x472>
 8008f64:	e6f0      	b.n	8008d48 <_dtoa_r+0x4e0>
 8008f66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008f68:	2a00      	cmp	r2, #0
 8008f6a:	f000 80db 	beq.w	8009124 <_dtoa_r+0x8bc>
 8008f6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f70:	2a01      	cmp	r2, #1
 8008f72:	f300 80bf 	bgt.w	80090f4 <_dtoa_r+0x88c>
 8008f76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008f78:	2a00      	cmp	r2, #0
 8008f7a:	f000 80b7 	beq.w	80090ec <_dtoa_r+0x884>
 8008f7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008f82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f84:	4646      	mov	r6, r8
 8008f86:	9a08      	ldr	r2, [sp, #32]
 8008f88:	2101      	movs	r1, #1
 8008f8a:	441a      	add	r2, r3
 8008f8c:	4658      	mov	r0, fp
 8008f8e:	4498      	add	r8, r3
 8008f90:	9208      	str	r2, [sp, #32]
 8008f92:	f000 fc21 	bl	80097d8 <__i2b>
 8008f96:	4605      	mov	r5, r0
 8008f98:	b15e      	cbz	r6, 8008fb2 <_dtoa_r+0x74a>
 8008f9a:	9b08      	ldr	r3, [sp, #32]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	dd08      	ble.n	8008fb2 <_dtoa_r+0x74a>
 8008fa0:	42b3      	cmp	r3, r6
 8008fa2:	9a08      	ldr	r2, [sp, #32]
 8008fa4:	bfa8      	it	ge
 8008fa6:	4633      	movge	r3, r6
 8008fa8:	eba8 0803 	sub.w	r8, r8, r3
 8008fac:	1af6      	subs	r6, r6, r3
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	9308      	str	r3, [sp, #32]
 8008fb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fb4:	b1f3      	cbz	r3, 8008ff4 <_dtoa_r+0x78c>
 8008fb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 80b7 	beq.w	800912c <_dtoa_r+0x8c4>
 8008fbe:	b18c      	cbz	r4, 8008fe4 <_dtoa_r+0x77c>
 8008fc0:	4629      	mov	r1, r5
 8008fc2:	4622      	mov	r2, r4
 8008fc4:	4658      	mov	r0, fp
 8008fc6:	f000 fcc7 	bl	8009958 <__pow5mult>
 8008fca:	464a      	mov	r2, r9
 8008fcc:	4601      	mov	r1, r0
 8008fce:	4605      	mov	r5, r0
 8008fd0:	4658      	mov	r0, fp
 8008fd2:	f000 fc17 	bl	8009804 <__multiply>
 8008fd6:	4649      	mov	r1, r9
 8008fd8:	9004      	str	r0, [sp, #16]
 8008fda:	4658      	mov	r0, fp
 8008fdc:	f000 fb48 	bl	8009670 <_Bfree>
 8008fe0:	9b04      	ldr	r3, [sp, #16]
 8008fe2:	4699      	mov	r9, r3
 8008fe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fe6:	1b1a      	subs	r2, r3, r4
 8008fe8:	d004      	beq.n	8008ff4 <_dtoa_r+0x78c>
 8008fea:	4649      	mov	r1, r9
 8008fec:	4658      	mov	r0, fp
 8008fee:	f000 fcb3 	bl	8009958 <__pow5mult>
 8008ff2:	4681      	mov	r9, r0
 8008ff4:	2101      	movs	r1, #1
 8008ff6:	4658      	mov	r0, fp
 8008ff8:	f000 fbee 	bl	80097d8 <__i2b>
 8008ffc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ffe:	4604      	mov	r4, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	f000 81cf 	beq.w	80093a4 <_dtoa_r+0xb3c>
 8009006:	461a      	mov	r2, r3
 8009008:	4601      	mov	r1, r0
 800900a:	4658      	mov	r0, fp
 800900c:	f000 fca4 	bl	8009958 <__pow5mult>
 8009010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009012:	2b01      	cmp	r3, #1
 8009014:	4604      	mov	r4, r0
 8009016:	f300 8095 	bgt.w	8009144 <_dtoa_r+0x8dc>
 800901a:	9b02      	ldr	r3, [sp, #8]
 800901c:	2b00      	cmp	r3, #0
 800901e:	f040 8087 	bne.w	8009130 <_dtoa_r+0x8c8>
 8009022:	9b03      	ldr	r3, [sp, #12]
 8009024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009028:	2b00      	cmp	r3, #0
 800902a:	f040 8089 	bne.w	8009140 <_dtoa_r+0x8d8>
 800902e:	9b03      	ldr	r3, [sp, #12]
 8009030:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009034:	0d1b      	lsrs	r3, r3, #20
 8009036:	051b      	lsls	r3, r3, #20
 8009038:	b12b      	cbz	r3, 8009046 <_dtoa_r+0x7de>
 800903a:	9b08      	ldr	r3, [sp, #32]
 800903c:	3301      	adds	r3, #1
 800903e:	9308      	str	r3, [sp, #32]
 8009040:	f108 0801 	add.w	r8, r8, #1
 8009044:	2301      	movs	r3, #1
 8009046:	930a      	str	r3, [sp, #40]	@ 0x28
 8009048:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800904a:	2b00      	cmp	r3, #0
 800904c:	f000 81b0 	beq.w	80093b0 <_dtoa_r+0xb48>
 8009050:	6923      	ldr	r3, [r4, #16]
 8009052:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009056:	6918      	ldr	r0, [r3, #16]
 8009058:	f000 fb72 	bl	8009740 <__hi0bits>
 800905c:	f1c0 0020 	rsb	r0, r0, #32
 8009060:	9b08      	ldr	r3, [sp, #32]
 8009062:	4418      	add	r0, r3
 8009064:	f010 001f 	ands.w	r0, r0, #31
 8009068:	d077      	beq.n	800915a <_dtoa_r+0x8f2>
 800906a:	f1c0 0320 	rsb	r3, r0, #32
 800906e:	2b04      	cmp	r3, #4
 8009070:	dd6b      	ble.n	800914a <_dtoa_r+0x8e2>
 8009072:	9b08      	ldr	r3, [sp, #32]
 8009074:	f1c0 001c 	rsb	r0, r0, #28
 8009078:	4403      	add	r3, r0
 800907a:	4480      	add	r8, r0
 800907c:	4406      	add	r6, r0
 800907e:	9308      	str	r3, [sp, #32]
 8009080:	f1b8 0f00 	cmp.w	r8, #0
 8009084:	dd05      	ble.n	8009092 <_dtoa_r+0x82a>
 8009086:	4649      	mov	r1, r9
 8009088:	4642      	mov	r2, r8
 800908a:	4658      	mov	r0, fp
 800908c:	f000 fcbe 	bl	8009a0c <__lshift>
 8009090:	4681      	mov	r9, r0
 8009092:	9b08      	ldr	r3, [sp, #32]
 8009094:	2b00      	cmp	r3, #0
 8009096:	dd05      	ble.n	80090a4 <_dtoa_r+0x83c>
 8009098:	4621      	mov	r1, r4
 800909a:	461a      	mov	r2, r3
 800909c:	4658      	mov	r0, fp
 800909e:	f000 fcb5 	bl	8009a0c <__lshift>
 80090a2:	4604      	mov	r4, r0
 80090a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d059      	beq.n	800915e <_dtoa_r+0x8f6>
 80090aa:	4621      	mov	r1, r4
 80090ac:	4648      	mov	r0, r9
 80090ae:	f000 fd19 	bl	8009ae4 <__mcmp>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	da53      	bge.n	800915e <_dtoa_r+0x8f6>
 80090b6:	1e7b      	subs	r3, r7, #1
 80090b8:	9304      	str	r3, [sp, #16]
 80090ba:	4649      	mov	r1, r9
 80090bc:	2300      	movs	r3, #0
 80090be:	220a      	movs	r2, #10
 80090c0:	4658      	mov	r0, fp
 80090c2:	f000 faf7 	bl	80096b4 <__multadd>
 80090c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090c8:	4681      	mov	r9, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f000 8172 	beq.w	80093b4 <_dtoa_r+0xb4c>
 80090d0:	2300      	movs	r3, #0
 80090d2:	4629      	mov	r1, r5
 80090d4:	220a      	movs	r2, #10
 80090d6:	4658      	mov	r0, fp
 80090d8:	f000 faec 	bl	80096b4 <__multadd>
 80090dc:	9b00      	ldr	r3, [sp, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	4605      	mov	r5, r0
 80090e2:	dc67      	bgt.n	80091b4 <_dtoa_r+0x94c>
 80090e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	dc41      	bgt.n	800916e <_dtoa_r+0x906>
 80090ea:	e063      	b.n	80091b4 <_dtoa_r+0x94c>
 80090ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80090ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80090f2:	e746      	b.n	8008f82 <_dtoa_r+0x71a>
 80090f4:	9b07      	ldr	r3, [sp, #28]
 80090f6:	1e5c      	subs	r4, r3, #1
 80090f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090fa:	42a3      	cmp	r3, r4
 80090fc:	bfbf      	itttt	lt
 80090fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009100:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009102:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009104:	1ae3      	sublt	r3, r4, r3
 8009106:	bfb4      	ite	lt
 8009108:	18d2      	addlt	r2, r2, r3
 800910a:	1b1c      	subge	r4, r3, r4
 800910c:	9b07      	ldr	r3, [sp, #28]
 800910e:	bfbc      	itt	lt
 8009110:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009112:	2400      	movlt	r4, #0
 8009114:	2b00      	cmp	r3, #0
 8009116:	bfb5      	itete	lt
 8009118:	eba8 0603 	sublt.w	r6, r8, r3
 800911c:	9b07      	ldrge	r3, [sp, #28]
 800911e:	2300      	movlt	r3, #0
 8009120:	4646      	movge	r6, r8
 8009122:	e730      	b.n	8008f86 <_dtoa_r+0x71e>
 8009124:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009126:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009128:	4646      	mov	r6, r8
 800912a:	e735      	b.n	8008f98 <_dtoa_r+0x730>
 800912c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800912e:	e75c      	b.n	8008fea <_dtoa_r+0x782>
 8009130:	2300      	movs	r3, #0
 8009132:	e788      	b.n	8009046 <_dtoa_r+0x7de>
 8009134:	3fe00000 	.word	0x3fe00000
 8009138:	40240000 	.word	0x40240000
 800913c:	40140000 	.word	0x40140000
 8009140:	9b02      	ldr	r3, [sp, #8]
 8009142:	e780      	b.n	8009046 <_dtoa_r+0x7de>
 8009144:	2300      	movs	r3, #0
 8009146:	930a      	str	r3, [sp, #40]	@ 0x28
 8009148:	e782      	b.n	8009050 <_dtoa_r+0x7e8>
 800914a:	d099      	beq.n	8009080 <_dtoa_r+0x818>
 800914c:	9a08      	ldr	r2, [sp, #32]
 800914e:	331c      	adds	r3, #28
 8009150:	441a      	add	r2, r3
 8009152:	4498      	add	r8, r3
 8009154:	441e      	add	r6, r3
 8009156:	9208      	str	r2, [sp, #32]
 8009158:	e792      	b.n	8009080 <_dtoa_r+0x818>
 800915a:	4603      	mov	r3, r0
 800915c:	e7f6      	b.n	800914c <_dtoa_r+0x8e4>
 800915e:	9b07      	ldr	r3, [sp, #28]
 8009160:	9704      	str	r7, [sp, #16]
 8009162:	2b00      	cmp	r3, #0
 8009164:	dc20      	bgt.n	80091a8 <_dtoa_r+0x940>
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800916a:	2b02      	cmp	r3, #2
 800916c:	dd1e      	ble.n	80091ac <_dtoa_r+0x944>
 800916e:	9b00      	ldr	r3, [sp, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	f47f aec0 	bne.w	8008ef6 <_dtoa_r+0x68e>
 8009176:	4621      	mov	r1, r4
 8009178:	2205      	movs	r2, #5
 800917a:	4658      	mov	r0, fp
 800917c:	f000 fa9a 	bl	80096b4 <__multadd>
 8009180:	4601      	mov	r1, r0
 8009182:	4604      	mov	r4, r0
 8009184:	4648      	mov	r0, r9
 8009186:	f000 fcad 	bl	8009ae4 <__mcmp>
 800918a:	2800      	cmp	r0, #0
 800918c:	f77f aeb3 	ble.w	8008ef6 <_dtoa_r+0x68e>
 8009190:	4656      	mov	r6, sl
 8009192:	2331      	movs	r3, #49	@ 0x31
 8009194:	f806 3b01 	strb.w	r3, [r6], #1
 8009198:	9b04      	ldr	r3, [sp, #16]
 800919a:	3301      	adds	r3, #1
 800919c:	9304      	str	r3, [sp, #16]
 800919e:	e6ae      	b.n	8008efe <_dtoa_r+0x696>
 80091a0:	9c07      	ldr	r4, [sp, #28]
 80091a2:	9704      	str	r7, [sp, #16]
 80091a4:	4625      	mov	r5, r4
 80091a6:	e7f3      	b.n	8009190 <_dtoa_r+0x928>
 80091a8:	9b07      	ldr	r3, [sp, #28]
 80091aa:	9300      	str	r3, [sp, #0]
 80091ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f000 8104 	beq.w	80093bc <_dtoa_r+0xb54>
 80091b4:	2e00      	cmp	r6, #0
 80091b6:	dd05      	ble.n	80091c4 <_dtoa_r+0x95c>
 80091b8:	4629      	mov	r1, r5
 80091ba:	4632      	mov	r2, r6
 80091bc:	4658      	mov	r0, fp
 80091be:	f000 fc25 	bl	8009a0c <__lshift>
 80091c2:	4605      	mov	r5, r0
 80091c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d05a      	beq.n	8009280 <_dtoa_r+0xa18>
 80091ca:	6869      	ldr	r1, [r5, #4]
 80091cc:	4658      	mov	r0, fp
 80091ce:	f000 fa0f 	bl	80095f0 <_Balloc>
 80091d2:	4606      	mov	r6, r0
 80091d4:	b928      	cbnz	r0, 80091e2 <_dtoa_r+0x97a>
 80091d6:	4b84      	ldr	r3, [pc, #528]	@ (80093e8 <_dtoa_r+0xb80>)
 80091d8:	4602      	mov	r2, r0
 80091da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80091de:	f7ff bb5a 	b.w	8008896 <_dtoa_r+0x2e>
 80091e2:	692a      	ldr	r2, [r5, #16]
 80091e4:	3202      	adds	r2, #2
 80091e6:	0092      	lsls	r2, r2, #2
 80091e8:	f105 010c 	add.w	r1, r5, #12
 80091ec:	300c      	adds	r0, #12
 80091ee:	f001 f975 	bl	800a4dc <memcpy>
 80091f2:	2201      	movs	r2, #1
 80091f4:	4631      	mov	r1, r6
 80091f6:	4658      	mov	r0, fp
 80091f8:	f000 fc08 	bl	8009a0c <__lshift>
 80091fc:	f10a 0301 	add.w	r3, sl, #1
 8009200:	9307      	str	r3, [sp, #28]
 8009202:	9b00      	ldr	r3, [sp, #0]
 8009204:	4453      	add	r3, sl
 8009206:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009208:	9b02      	ldr	r3, [sp, #8]
 800920a:	f003 0301 	and.w	r3, r3, #1
 800920e:	462f      	mov	r7, r5
 8009210:	930a      	str	r3, [sp, #40]	@ 0x28
 8009212:	4605      	mov	r5, r0
 8009214:	9b07      	ldr	r3, [sp, #28]
 8009216:	4621      	mov	r1, r4
 8009218:	3b01      	subs	r3, #1
 800921a:	4648      	mov	r0, r9
 800921c:	9300      	str	r3, [sp, #0]
 800921e:	f7ff fa98 	bl	8008752 <quorem>
 8009222:	4639      	mov	r1, r7
 8009224:	9002      	str	r0, [sp, #8]
 8009226:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800922a:	4648      	mov	r0, r9
 800922c:	f000 fc5a 	bl	8009ae4 <__mcmp>
 8009230:	462a      	mov	r2, r5
 8009232:	9008      	str	r0, [sp, #32]
 8009234:	4621      	mov	r1, r4
 8009236:	4658      	mov	r0, fp
 8009238:	f000 fc70 	bl	8009b1c <__mdiff>
 800923c:	68c2      	ldr	r2, [r0, #12]
 800923e:	4606      	mov	r6, r0
 8009240:	bb02      	cbnz	r2, 8009284 <_dtoa_r+0xa1c>
 8009242:	4601      	mov	r1, r0
 8009244:	4648      	mov	r0, r9
 8009246:	f000 fc4d 	bl	8009ae4 <__mcmp>
 800924a:	4602      	mov	r2, r0
 800924c:	4631      	mov	r1, r6
 800924e:	4658      	mov	r0, fp
 8009250:	920e      	str	r2, [sp, #56]	@ 0x38
 8009252:	f000 fa0d 	bl	8009670 <_Bfree>
 8009256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009258:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800925a:	9e07      	ldr	r6, [sp, #28]
 800925c:	ea43 0102 	orr.w	r1, r3, r2
 8009260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009262:	4319      	orrs	r1, r3
 8009264:	d110      	bne.n	8009288 <_dtoa_r+0xa20>
 8009266:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800926a:	d029      	beq.n	80092c0 <_dtoa_r+0xa58>
 800926c:	9b08      	ldr	r3, [sp, #32]
 800926e:	2b00      	cmp	r3, #0
 8009270:	dd02      	ble.n	8009278 <_dtoa_r+0xa10>
 8009272:	9b02      	ldr	r3, [sp, #8]
 8009274:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009278:	9b00      	ldr	r3, [sp, #0]
 800927a:	f883 8000 	strb.w	r8, [r3]
 800927e:	e63f      	b.n	8008f00 <_dtoa_r+0x698>
 8009280:	4628      	mov	r0, r5
 8009282:	e7bb      	b.n	80091fc <_dtoa_r+0x994>
 8009284:	2201      	movs	r2, #1
 8009286:	e7e1      	b.n	800924c <_dtoa_r+0x9e4>
 8009288:	9b08      	ldr	r3, [sp, #32]
 800928a:	2b00      	cmp	r3, #0
 800928c:	db04      	blt.n	8009298 <_dtoa_r+0xa30>
 800928e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009290:	430b      	orrs	r3, r1
 8009292:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009294:	430b      	orrs	r3, r1
 8009296:	d120      	bne.n	80092da <_dtoa_r+0xa72>
 8009298:	2a00      	cmp	r2, #0
 800929a:	dded      	ble.n	8009278 <_dtoa_r+0xa10>
 800929c:	4649      	mov	r1, r9
 800929e:	2201      	movs	r2, #1
 80092a0:	4658      	mov	r0, fp
 80092a2:	f000 fbb3 	bl	8009a0c <__lshift>
 80092a6:	4621      	mov	r1, r4
 80092a8:	4681      	mov	r9, r0
 80092aa:	f000 fc1b 	bl	8009ae4 <__mcmp>
 80092ae:	2800      	cmp	r0, #0
 80092b0:	dc03      	bgt.n	80092ba <_dtoa_r+0xa52>
 80092b2:	d1e1      	bne.n	8009278 <_dtoa_r+0xa10>
 80092b4:	f018 0f01 	tst.w	r8, #1
 80092b8:	d0de      	beq.n	8009278 <_dtoa_r+0xa10>
 80092ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80092be:	d1d8      	bne.n	8009272 <_dtoa_r+0xa0a>
 80092c0:	9a00      	ldr	r2, [sp, #0]
 80092c2:	2339      	movs	r3, #57	@ 0x39
 80092c4:	7013      	strb	r3, [r2, #0]
 80092c6:	4633      	mov	r3, r6
 80092c8:	461e      	mov	r6, r3
 80092ca:	3b01      	subs	r3, #1
 80092cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80092d0:	2a39      	cmp	r2, #57	@ 0x39
 80092d2:	d052      	beq.n	800937a <_dtoa_r+0xb12>
 80092d4:	3201      	adds	r2, #1
 80092d6:	701a      	strb	r2, [r3, #0]
 80092d8:	e612      	b.n	8008f00 <_dtoa_r+0x698>
 80092da:	2a00      	cmp	r2, #0
 80092dc:	dd07      	ble.n	80092ee <_dtoa_r+0xa86>
 80092de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80092e2:	d0ed      	beq.n	80092c0 <_dtoa_r+0xa58>
 80092e4:	9a00      	ldr	r2, [sp, #0]
 80092e6:	f108 0301 	add.w	r3, r8, #1
 80092ea:	7013      	strb	r3, [r2, #0]
 80092ec:	e608      	b.n	8008f00 <_dtoa_r+0x698>
 80092ee:	9b07      	ldr	r3, [sp, #28]
 80092f0:	9a07      	ldr	r2, [sp, #28]
 80092f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80092f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d028      	beq.n	800934e <_dtoa_r+0xae6>
 80092fc:	4649      	mov	r1, r9
 80092fe:	2300      	movs	r3, #0
 8009300:	220a      	movs	r2, #10
 8009302:	4658      	mov	r0, fp
 8009304:	f000 f9d6 	bl	80096b4 <__multadd>
 8009308:	42af      	cmp	r7, r5
 800930a:	4681      	mov	r9, r0
 800930c:	f04f 0300 	mov.w	r3, #0
 8009310:	f04f 020a 	mov.w	r2, #10
 8009314:	4639      	mov	r1, r7
 8009316:	4658      	mov	r0, fp
 8009318:	d107      	bne.n	800932a <_dtoa_r+0xac2>
 800931a:	f000 f9cb 	bl	80096b4 <__multadd>
 800931e:	4607      	mov	r7, r0
 8009320:	4605      	mov	r5, r0
 8009322:	9b07      	ldr	r3, [sp, #28]
 8009324:	3301      	adds	r3, #1
 8009326:	9307      	str	r3, [sp, #28]
 8009328:	e774      	b.n	8009214 <_dtoa_r+0x9ac>
 800932a:	f000 f9c3 	bl	80096b4 <__multadd>
 800932e:	4629      	mov	r1, r5
 8009330:	4607      	mov	r7, r0
 8009332:	2300      	movs	r3, #0
 8009334:	220a      	movs	r2, #10
 8009336:	4658      	mov	r0, fp
 8009338:	f000 f9bc 	bl	80096b4 <__multadd>
 800933c:	4605      	mov	r5, r0
 800933e:	e7f0      	b.n	8009322 <_dtoa_r+0xaba>
 8009340:	9b00      	ldr	r3, [sp, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	bfcc      	ite	gt
 8009346:	461e      	movgt	r6, r3
 8009348:	2601      	movle	r6, #1
 800934a:	4456      	add	r6, sl
 800934c:	2700      	movs	r7, #0
 800934e:	4649      	mov	r1, r9
 8009350:	2201      	movs	r2, #1
 8009352:	4658      	mov	r0, fp
 8009354:	f000 fb5a 	bl	8009a0c <__lshift>
 8009358:	4621      	mov	r1, r4
 800935a:	4681      	mov	r9, r0
 800935c:	f000 fbc2 	bl	8009ae4 <__mcmp>
 8009360:	2800      	cmp	r0, #0
 8009362:	dcb0      	bgt.n	80092c6 <_dtoa_r+0xa5e>
 8009364:	d102      	bne.n	800936c <_dtoa_r+0xb04>
 8009366:	f018 0f01 	tst.w	r8, #1
 800936a:	d1ac      	bne.n	80092c6 <_dtoa_r+0xa5e>
 800936c:	4633      	mov	r3, r6
 800936e:	461e      	mov	r6, r3
 8009370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009374:	2a30      	cmp	r2, #48	@ 0x30
 8009376:	d0fa      	beq.n	800936e <_dtoa_r+0xb06>
 8009378:	e5c2      	b.n	8008f00 <_dtoa_r+0x698>
 800937a:	459a      	cmp	sl, r3
 800937c:	d1a4      	bne.n	80092c8 <_dtoa_r+0xa60>
 800937e:	9b04      	ldr	r3, [sp, #16]
 8009380:	3301      	adds	r3, #1
 8009382:	9304      	str	r3, [sp, #16]
 8009384:	2331      	movs	r3, #49	@ 0x31
 8009386:	f88a 3000 	strb.w	r3, [sl]
 800938a:	e5b9      	b.n	8008f00 <_dtoa_r+0x698>
 800938c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800938e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80093ec <_dtoa_r+0xb84>
 8009392:	b11b      	cbz	r3, 800939c <_dtoa_r+0xb34>
 8009394:	f10a 0308 	add.w	r3, sl, #8
 8009398:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800939a:	6013      	str	r3, [r2, #0]
 800939c:	4650      	mov	r0, sl
 800939e:	b019      	add	sp, #100	@ 0x64
 80093a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	f77f ae37 	ble.w	800901a <_dtoa_r+0x7b2>
 80093ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80093b0:	2001      	movs	r0, #1
 80093b2:	e655      	b.n	8009060 <_dtoa_r+0x7f8>
 80093b4:	9b00      	ldr	r3, [sp, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f77f aed6 	ble.w	8009168 <_dtoa_r+0x900>
 80093bc:	4656      	mov	r6, sl
 80093be:	4621      	mov	r1, r4
 80093c0:	4648      	mov	r0, r9
 80093c2:	f7ff f9c6 	bl	8008752 <quorem>
 80093c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80093ca:	f806 8b01 	strb.w	r8, [r6], #1
 80093ce:	9b00      	ldr	r3, [sp, #0]
 80093d0:	eba6 020a 	sub.w	r2, r6, sl
 80093d4:	4293      	cmp	r3, r2
 80093d6:	ddb3      	ble.n	8009340 <_dtoa_r+0xad8>
 80093d8:	4649      	mov	r1, r9
 80093da:	2300      	movs	r3, #0
 80093dc:	220a      	movs	r2, #10
 80093de:	4658      	mov	r0, fp
 80093e0:	f000 f968 	bl	80096b4 <__multadd>
 80093e4:	4681      	mov	r9, r0
 80093e6:	e7ea      	b.n	80093be <_dtoa_r+0xb56>
 80093e8:	0800a858 	.word	0x0800a858
 80093ec:	0800a7dc 	.word	0x0800a7dc

080093f0 <_free_r>:
 80093f0:	b538      	push	{r3, r4, r5, lr}
 80093f2:	4605      	mov	r5, r0
 80093f4:	2900      	cmp	r1, #0
 80093f6:	d041      	beq.n	800947c <_free_r+0x8c>
 80093f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093fc:	1f0c      	subs	r4, r1, #4
 80093fe:	2b00      	cmp	r3, #0
 8009400:	bfb8      	it	lt
 8009402:	18e4      	addlt	r4, r4, r3
 8009404:	f000 f8e8 	bl	80095d8 <__malloc_lock>
 8009408:	4a1d      	ldr	r2, [pc, #116]	@ (8009480 <_free_r+0x90>)
 800940a:	6813      	ldr	r3, [r2, #0]
 800940c:	b933      	cbnz	r3, 800941c <_free_r+0x2c>
 800940e:	6063      	str	r3, [r4, #4]
 8009410:	6014      	str	r4, [r2, #0]
 8009412:	4628      	mov	r0, r5
 8009414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009418:	f000 b8e4 	b.w	80095e4 <__malloc_unlock>
 800941c:	42a3      	cmp	r3, r4
 800941e:	d908      	bls.n	8009432 <_free_r+0x42>
 8009420:	6820      	ldr	r0, [r4, #0]
 8009422:	1821      	adds	r1, r4, r0
 8009424:	428b      	cmp	r3, r1
 8009426:	bf01      	itttt	eq
 8009428:	6819      	ldreq	r1, [r3, #0]
 800942a:	685b      	ldreq	r3, [r3, #4]
 800942c:	1809      	addeq	r1, r1, r0
 800942e:	6021      	streq	r1, [r4, #0]
 8009430:	e7ed      	b.n	800940e <_free_r+0x1e>
 8009432:	461a      	mov	r2, r3
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	b10b      	cbz	r3, 800943c <_free_r+0x4c>
 8009438:	42a3      	cmp	r3, r4
 800943a:	d9fa      	bls.n	8009432 <_free_r+0x42>
 800943c:	6811      	ldr	r1, [r2, #0]
 800943e:	1850      	adds	r0, r2, r1
 8009440:	42a0      	cmp	r0, r4
 8009442:	d10b      	bne.n	800945c <_free_r+0x6c>
 8009444:	6820      	ldr	r0, [r4, #0]
 8009446:	4401      	add	r1, r0
 8009448:	1850      	adds	r0, r2, r1
 800944a:	4283      	cmp	r3, r0
 800944c:	6011      	str	r1, [r2, #0]
 800944e:	d1e0      	bne.n	8009412 <_free_r+0x22>
 8009450:	6818      	ldr	r0, [r3, #0]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	6053      	str	r3, [r2, #4]
 8009456:	4408      	add	r0, r1
 8009458:	6010      	str	r0, [r2, #0]
 800945a:	e7da      	b.n	8009412 <_free_r+0x22>
 800945c:	d902      	bls.n	8009464 <_free_r+0x74>
 800945e:	230c      	movs	r3, #12
 8009460:	602b      	str	r3, [r5, #0]
 8009462:	e7d6      	b.n	8009412 <_free_r+0x22>
 8009464:	6820      	ldr	r0, [r4, #0]
 8009466:	1821      	adds	r1, r4, r0
 8009468:	428b      	cmp	r3, r1
 800946a:	bf04      	itt	eq
 800946c:	6819      	ldreq	r1, [r3, #0]
 800946e:	685b      	ldreq	r3, [r3, #4]
 8009470:	6063      	str	r3, [r4, #4]
 8009472:	bf04      	itt	eq
 8009474:	1809      	addeq	r1, r1, r0
 8009476:	6021      	streq	r1, [r4, #0]
 8009478:	6054      	str	r4, [r2, #4]
 800947a:	e7ca      	b.n	8009412 <_free_r+0x22>
 800947c:	bd38      	pop	{r3, r4, r5, pc}
 800947e:	bf00      	nop
 8009480:	200006c8 	.word	0x200006c8

08009484 <malloc>:
 8009484:	4b02      	ldr	r3, [pc, #8]	@ (8009490 <malloc+0xc>)
 8009486:	4601      	mov	r1, r0
 8009488:	6818      	ldr	r0, [r3, #0]
 800948a:	f000 b825 	b.w	80094d8 <_malloc_r>
 800948e:	bf00      	nop
 8009490:	20000018 	.word	0x20000018

08009494 <sbrk_aligned>:
 8009494:	b570      	push	{r4, r5, r6, lr}
 8009496:	4e0f      	ldr	r6, [pc, #60]	@ (80094d4 <sbrk_aligned+0x40>)
 8009498:	460c      	mov	r4, r1
 800949a:	6831      	ldr	r1, [r6, #0]
 800949c:	4605      	mov	r5, r0
 800949e:	b911      	cbnz	r1, 80094a6 <sbrk_aligned+0x12>
 80094a0:	f001 f80c 	bl	800a4bc <_sbrk_r>
 80094a4:	6030      	str	r0, [r6, #0]
 80094a6:	4621      	mov	r1, r4
 80094a8:	4628      	mov	r0, r5
 80094aa:	f001 f807 	bl	800a4bc <_sbrk_r>
 80094ae:	1c43      	adds	r3, r0, #1
 80094b0:	d103      	bne.n	80094ba <sbrk_aligned+0x26>
 80094b2:	f04f 34ff 	mov.w	r4, #4294967295
 80094b6:	4620      	mov	r0, r4
 80094b8:	bd70      	pop	{r4, r5, r6, pc}
 80094ba:	1cc4      	adds	r4, r0, #3
 80094bc:	f024 0403 	bic.w	r4, r4, #3
 80094c0:	42a0      	cmp	r0, r4
 80094c2:	d0f8      	beq.n	80094b6 <sbrk_aligned+0x22>
 80094c4:	1a21      	subs	r1, r4, r0
 80094c6:	4628      	mov	r0, r5
 80094c8:	f000 fff8 	bl	800a4bc <_sbrk_r>
 80094cc:	3001      	adds	r0, #1
 80094ce:	d1f2      	bne.n	80094b6 <sbrk_aligned+0x22>
 80094d0:	e7ef      	b.n	80094b2 <sbrk_aligned+0x1e>
 80094d2:	bf00      	nop
 80094d4:	200006c4 	.word	0x200006c4

080094d8 <_malloc_r>:
 80094d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094dc:	1ccd      	adds	r5, r1, #3
 80094de:	f025 0503 	bic.w	r5, r5, #3
 80094e2:	3508      	adds	r5, #8
 80094e4:	2d0c      	cmp	r5, #12
 80094e6:	bf38      	it	cc
 80094e8:	250c      	movcc	r5, #12
 80094ea:	2d00      	cmp	r5, #0
 80094ec:	4606      	mov	r6, r0
 80094ee:	db01      	blt.n	80094f4 <_malloc_r+0x1c>
 80094f0:	42a9      	cmp	r1, r5
 80094f2:	d904      	bls.n	80094fe <_malloc_r+0x26>
 80094f4:	230c      	movs	r3, #12
 80094f6:	6033      	str	r3, [r6, #0]
 80094f8:	2000      	movs	r0, #0
 80094fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095d4 <_malloc_r+0xfc>
 8009502:	f000 f869 	bl	80095d8 <__malloc_lock>
 8009506:	f8d8 3000 	ldr.w	r3, [r8]
 800950a:	461c      	mov	r4, r3
 800950c:	bb44      	cbnz	r4, 8009560 <_malloc_r+0x88>
 800950e:	4629      	mov	r1, r5
 8009510:	4630      	mov	r0, r6
 8009512:	f7ff ffbf 	bl	8009494 <sbrk_aligned>
 8009516:	1c43      	adds	r3, r0, #1
 8009518:	4604      	mov	r4, r0
 800951a:	d158      	bne.n	80095ce <_malloc_r+0xf6>
 800951c:	f8d8 4000 	ldr.w	r4, [r8]
 8009520:	4627      	mov	r7, r4
 8009522:	2f00      	cmp	r7, #0
 8009524:	d143      	bne.n	80095ae <_malloc_r+0xd6>
 8009526:	2c00      	cmp	r4, #0
 8009528:	d04b      	beq.n	80095c2 <_malloc_r+0xea>
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	4639      	mov	r1, r7
 800952e:	4630      	mov	r0, r6
 8009530:	eb04 0903 	add.w	r9, r4, r3
 8009534:	f000 ffc2 	bl	800a4bc <_sbrk_r>
 8009538:	4581      	cmp	r9, r0
 800953a:	d142      	bne.n	80095c2 <_malloc_r+0xea>
 800953c:	6821      	ldr	r1, [r4, #0]
 800953e:	1a6d      	subs	r5, r5, r1
 8009540:	4629      	mov	r1, r5
 8009542:	4630      	mov	r0, r6
 8009544:	f7ff ffa6 	bl	8009494 <sbrk_aligned>
 8009548:	3001      	adds	r0, #1
 800954a:	d03a      	beq.n	80095c2 <_malloc_r+0xea>
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	442b      	add	r3, r5
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	f8d8 3000 	ldr.w	r3, [r8]
 8009556:	685a      	ldr	r2, [r3, #4]
 8009558:	bb62      	cbnz	r2, 80095b4 <_malloc_r+0xdc>
 800955a:	f8c8 7000 	str.w	r7, [r8]
 800955e:	e00f      	b.n	8009580 <_malloc_r+0xa8>
 8009560:	6822      	ldr	r2, [r4, #0]
 8009562:	1b52      	subs	r2, r2, r5
 8009564:	d420      	bmi.n	80095a8 <_malloc_r+0xd0>
 8009566:	2a0b      	cmp	r2, #11
 8009568:	d917      	bls.n	800959a <_malloc_r+0xc2>
 800956a:	1961      	adds	r1, r4, r5
 800956c:	42a3      	cmp	r3, r4
 800956e:	6025      	str	r5, [r4, #0]
 8009570:	bf18      	it	ne
 8009572:	6059      	strne	r1, [r3, #4]
 8009574:	6863      	ldr	r3, [r4, #4]
 8009576:	bf08      	it	eq
 8009578:	f8c8 1000 	streq.w	r1, [r8]
 800957c:	5162      	str	r2, [r4, r5]
 800957e:	604b      	str	r3, [r1, #4]
 8009580:	4630      	mov	r0, r6
 8009582:	f000 f82f 	bl	80095e4 <__malloc_unlock>
 8009586:	f104 000b 	add.w	r0, r4, #11
 800958a:	1d23      	adds	r3, r4, #4
 800958c:	f020 0007 	bic.w	r0, r0, #7
 8009590:	1ac2      	subs	r2, r0, r3
 8009592:	bf1c      	itt	ne
 8009594:	1a1b      	subne	r3, r3, r0
 8009596:	50a3      	strne	r3, [r4, r2]
 8009598:	e7af      	b.n	80094fa <_malloc_r+0x22>
 800959a:	6862      	ldr	r2, [r4, #4]
 800959c:	42a3      	cmp	r3, r4
 800959e:	bf0c      	ite	eq
 80095a0:	f8c8 2000 	streq.w	r2, [r8]
 80095a4:	605a      	strne	r2, [r3, #4]
 80095a6:	e7eb      	b.n	8009580 <_malloc_r+0xa8>
 80095a8:	4623      	mov	r3, r4
 80095aa:	6864      	ldr	r4, [r4, #4]
 80095ac:	e7ae      	b.n	800950c <_malloc_r+0x34>
 80095ae:	463c      	mov	r4, r7
 80095b0:	687f      	ldr	r7, [r7, #4]
 80095b2:	e7b6      	b.n	8009522 <_malloc_r+0x4a>
 80095b4:	461a      	mov	r2, r3
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	42a3      	cmp	r3, r4
 80095ba:	d1fb      	bne.n	80095b4 <_malloc_r+0xdc>
 80095bc:	2300      	movs	r3, #0
 80095be:	6053      	str	r3, [r2, #4]
 80095c0:	e7de      	b.n	8009580 <_malloc_r+0xa8>
 80095c2:	230c      	movs	r3, #12
 80095c4:	6033      	str	r3, [r6, #0]
 80095c6:	4630      	mov	r0, r6
 80095c8:	f000 f80c 	bl	80095e4 <__malloc_unlock>
 80095cc:	e794      	b.n	80094f8 <_malloc_r+0x20>
 80095ce:	6005      	str	r5, [r0, #0]
 80095d0:	e7d6      	b.n	8009580 <_malloc_r+0xa8>
 80095d2:	bf00      	nop
 80095d4:	200006c8 	.word	0x200006c8

080095d8 <__malloc_lock>:
 80095d8:	4801      	ldr	r0, [pc, #4]	@ (80095e0 <__malloc_lock+0x8>)
 80095da:	f7ff b8b8 	b.w	800874e <__retarget_lock_acquire_recursive>
 80095de:	bf00      	nop
 80095e0:	200006c0 	.word	0x200006c0

080095e4 <__malloc_unlock>:
 80095e4:	4801      	ldr	r0, [pc, #4]	@ (80095ec <__malloc_unlock+0x8>)
 80095e6:	f7ff b8b3 	b.w	8008750 <__retarget_lock_release_recursive>
 80095ea:	bf00      	nop
 80095ec:	200006c0 	.word	0x200006c0

080095f0 <_Balloc>:
 80095f0:	b570      	push	{r4, r5, r6, lr}
 80095f2:	69c6      	ldr	r6, [r0, #28]
 80095f4:	4604      	mov	r4, r0
 80095f6:	460d      	mov	r5, r1
 80095f8:	b976      	cbnz	r6, 8009618 <_Balloc+0x28>
 80095fa:	2010      	movs	r0, #16
 80095fc:	f7ff ff42 	bl	8009484 <malloc>
 8009600:	4602      	mov	r2, r0
 8009602:	61e0      	str	r0, [r4, #28]
 8009604:	b920      	cbnz	r0, 8009610 <_Balloc+0x20>
 8009606:	4b18      	ldr	r3, [pc, #96]	@ (8009668 <_Balloc+0x78>)
 8009608:	4818      	ldr	r0, [pc, #96]	@ (800966c <_Balloc+0x7c>)
 800960a:	216b      	movs	r1, #107	@ 0x6b
 800960c:	f000 ff74 	bl	800a4f8 <__assert_func>
 8009610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009614:	6006      	str	r6, [r0, #0]
 8009616:	60c6      	str	r6, [r0, #12]
 8009618:	69e6      	ldr	r6, [r4, #28]
 800961a:	68f3      	ldr	r3, [r6, #12]
 800961c:	b183      	cbz	r3, 8009640 <_Balloc+0x50>
 800961e:	69e3      	ldr	r3, [r4, #28]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009626:	b9b8      	cbnz	r0, 8009658 <_Balloc+0x68>
 8009628:	2101      	movs	r1, #1
 800962a:	fa01 f605 	lsl.w	r6, r1, r5
 800962e:	1d72      	adds	r2, r6, #5
 8009630:	0092      	lsls	r2, r2, #2
 8009632:	4620      	mov	r0, r4
 8009634:	f000 ff7e 	bl	800a534 <_calloc_r>
 8009638:	b160      	cbz	r0, 8009654 <_Balloc+0x64>
 800963a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800963e:	e00e      	b.n	800965e <_Balloc+0x6e>
 8009640:	2221      	movs	r2, #33	@ 0x21
 8009642:	2104      	movs	r1, #4
 8009644:	4620      	mov	r0, r4
 8009646:	f000 ff75 	bl	800a534 <_calloc_r>
 800964a:	69e3      	ldr	r3, [r4, #28]
 800964c:	60f0      	str	r0, [r6, #12]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1e4      	bne.n	800961e <_Balloc+0x2e>
 8009654:	2000      	movs	r0, #0
 8009656:	bd70      	pop	{r4, r5, r6, pc}
 8009658:	6802      	ldr	r2, [r0, #0]
 800965a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800965e:	2300      	movs	r3, #0
 8009660:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009664:	e7f7      	b.n	8009656 <_Balloc+0x66>
 8009666:	bf00      	nop
 8009668:	0800a7e9 	.word	0x0800a7e9
 800966c:	0800a869 	.word	0x0800a869

08009670 <_Bfree>:
 8009670:	b570      	push	{r4, r5, r6, lr}
 8009672:	69c6      	ldr	r6, [r0, #28]
 8009674:	4605      	mov	r5, r0
 8009676:	460c      	mov	r4, r1
 8009678:	b976      	cbnz	r6, 8009698 <_Bfree+0x28>
 800967a:	2010      	movs	r0, #16
 800967c:	f7ff ff02 	bl	8009484 <malloc>
 8009680:	4602      	mov	r2, r0
 8009682:	61e8      	str	r0, [r5, #28]
 8009684:	b920      	cbnz	r0, 8009690 <_Bfree+0x20>
 8009686:	4b09      	ldr	r3, [pc, #36]	@ (80096ac <_Bfree+0x3c>)
 8009688:	4809      	ldr	r0, [pc, #36]	@ (80096b0 <_Bfree+0x40>)
 800968a:	218f      	movs	r1, #143	@ 0x8f
 800968c:	f000 ff34 	bl	800a4f8 <__assert_func>
 8009690:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009694:	6006      	str	r6, [r0, #0]
 8009696:	60c6      	str	r6, [r0, #12]
 8009698:	b13c      	cbz	r4, 80096aa <_Bfree+0x3a>
 800969a:	69eb      	ldr	r3, [r5, #28]
 800969c:	6862      	ldr	r2, [r4, #4]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096a4:	6021      	str	r1, [r4, #0]
 80096a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80096aa:	bd70      	pop	{r4, r5, r6, pc}
 80096ac:	0800a7e9 	.word	0x0800a7e9
 80096b0:	0800a869 	.word	0x0800a869

080096b4 <__multadd>:
 80096b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096b8:	690d      	ldr	r5, [r1, #16]
 80096ba:	4607      	mov	r7, r0
 80096bc:	460c      	mov	r4, r1
 80096be:	461e      	mov	r6, r3
 80096c0:	f101 0c14 	add.w	ip, r1, #20
 80096c4:	2000      	movs	r0, #0
 80096c6:	f8dc 3000 	ldr.w	r3, [ip]
 80096ca:	b299      	uxth	r1, r3
 80096cc:	fb02 6101 	mla	r1, r2, r1, r6
 80096d0:	0c1e      	lsrs	r6, r3, #16
 80096d2:	0c0b      	lsrs	r3, r1, #16
 80096d4:	fb02 3306 	mla	r3, r2, r6, r3
 80096d8:	b289      	uxth	r1, r1
 80096da:	3001      	adds	r0, #1
 80096dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096e0:	4285      	cmp	r5, r0
 80096e2:	f84c 1b04 	str.w	r1, [ip], #4
 80096e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096ea:	dcec      	bgt.n	80096c6 <__multadd+0x12>
 80096ec:	b30e      	cbz	r6, 8009732 <__multadd+0x7e>
 80096ee:	68a3      	ldr	r3, [r4, #8]
 80096f0:	42ab      	cmp	r3, r5
 80096f2:	dc19      	bgt.n	8009728 <__multadd+0x74>
 80096f4:	6861      	ldr	r1, [r4, #4]
 80096f6:	4638      	mov	r0, r7
 80096f8:	3101      	adds	r1, #1
 80096fa:	f7ff ff79 	bl	80095f0 <_Balloc>
 80096fe:	4680      	mov	r8, r0
 8009700:	b928      	cbnz	r0, 800970e <__multadd+0x5a>
 8009702:	4602      	mov	r2, r0
 8009704:	4b0c      	ldr	r3, [pc, #48]	@ (8009738 <__multadd+0x84>)
 8009706:	480d      	ldr	r0, [pc, #52]	@ (800973c <__multadd+0x88>)
 8009708:	21ba      	movs	r1, #186	@ 0xba
 800970a:	f000 fef5 	bl	800a4f8 <__assert_func>
 800970e:	6922      	ldr	r2, [r4, #16]
 8009710:	3202      	adds	r2, #2
 8009712:	f104 010c 	add.w	r1, r4, #12
 8009716:	0092      	lsls	r2, r2, #2
 8009718:	300c      	adds	r0, #12
 800971a:	f000 fedf 	bl	800a4dc <memcpy>
 800971e:	4621      	mov	r1, r4
 8009720:	4638      	mov	r0, r7
 8009722:	f7ff ffa5 	bl	8009670 <_Bfree>
 8009726:	4644      	mov	r4, r8
 8009728:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800972c:	3501      	adds	r5, #1
 800972e:	615e      	str	r6, [r3, #20]
 8009730:	6125      	str	r5, [r4, #16]
 8009732:	4620      	mov	r0, r4
 8009734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009738:	0800a858 	.word	0x0800a858
 800973c:	0800a869 	.word	0x0800a869

08009740 <__hi0bits>:
 8009740:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009744:	4603      	mov	r3, r0
 8009746:	bf36      	itet	cc
 8009748:	0403      	lslcc	r3, r0, #16
 800974a:	2000      	movcs	r0, #0
 800974c:	2010      	movcc	r0, #16
 800974e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009752:	bf3c      	itt	cc
 8009754:	021b      	lslcc	r3, r3, #8
 8009756:	3008      	addcc	r0, #8
 8009758:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800975c:	bf3c      	itt	cc
 800975e:	011b      	lslcc	r3, r3, #4
 8009760:	3004      	addcc	r0, #4
 8009762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009766:	bf3c      	itt	cc
 8009768:	009b      	lslcc	r3, r3, #2
 800976a:	3002      	addcc	r0, #2
 800976c:	2b00      	cmp	r3, #0
 800976e:	db05      	blt.n	800977c <__hi0bits+0x3c>
 8009770:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009774:	f100 0001 	add.w	r0, r0, #1
 8009778:	bf08      	it	eq
 800977a:	2020      	moveq	r0, #32
 800977c:	4770      	bx	lr

0800977e <__lo0bits>:
 800977e:	6803      	ldr	r3, [r0, #0]
 8009780:	4602      	mov	r2, r0
 8009782:	f013 0007 	ands.w	r0, r3, #7
 8009786:	d00b      	beq.n	80097a0 <__lo0bits+0x22>
 8009788:	07d9      	lsls	r1, r3, #31
 800978a:	d421      	bmi.n	80097d0 <__lo0bits+0x52>
 800978c:	0798      	lsls	r0, r3, #30
 800978e:	bf49      	itett	mi
 8009790:	085b      	lsrmi	r3, r3, #1
 8009792:	089b      	lsrpl	r3, r3, #2
 8009794:	2001      	movmi	r0, #1
 8009796:	6013      	strmi	r3, [r2, #0]
 8009798:	bf5c      	itt	pl
 800979a:	6013      	strpl	r3, [r2, #0]
 800979c:	2002      	movpl	r0, #2
 800979e:	4770      	bx	lr
 80097a0:	b299      	uxth	r1, r3
 80097a2:	b909      	cbnz	r1, 80097a8 <__lo0bits+0x2a>
 80097a4:	0c1b      	lsrs	r3, r3, #16
 80097a6:	2010      	movs	r0, #16
 80097a8:	b2d9      	uxtb	r1, r3
 80097aa:	b909      	cbnz	r1, 80097b0 <__lo0bits+0x32>
 80097ac:	3008      	adds	r0, #8
 80097ae:	0a1b      	lsrs	r3, r3, #8
 80097b0:	0719      	lsls	r1, r3, #28
 80097b2:	bf04      	itt	eq
 80097b4:	091b      	lsreq	r3, r3, #4
 80097b6:	3004      	addeq	r0, #4
 80097b8:	0799      	lsls	r1, r3, #30
 80097ba:	bf04      	itt	eq
 80097bc:	089b      	lsreq	r3, r3, #2
 80097be:	3002      	addeq	r0, #2
 80097c0:	07d9      	lsls	r1, r3, #31
 80097c2:	d403      	bmi.n	80097cc <__lo0bits+0x4e>
 80097c4:	085b      	lsrs	r3, r3, #1
 80097c6:	f100 0001 	add.w	r0, r0, #1
 80097ca:	d003      	beq.n	80097d4 <__lo0bits+0x56>
 80097cc:	6013      	str	r3, [r2, #0]
 80097ce:	4770      	bx	lr
 80097d0:	2000      	movs	r0, #0
 80097d2:	4770      	bx	lr
 80097d4:	2020      	movs	r0, #32
 80097d6:	4770      	bx	lr

080097d8 <__i2b>:
 80097d8:	b510      	push	{r4, lr}
 80097da:	460c      	mov	r4, r1
 80097dc:	2101      	movs	r1, #1
 80097de:	f7ff ff07 	bl	80095f0 <_Balloc>
 80097e2:	4602      	mov	r2, r0
 80097e4:	b928      	cbnz	r0, 80097f2 <__i2b+0x1a>
 80097e6:	4b05      	ldr	r3, [pc, #20]	@ (80097fc <__i2b+0x24>)
 80097e8:	4805      	ldr	r0, [pc, #20]	@ (8009800 <__i2b+0x28>)
 80097ea:	f240 1145 	movw	r1, #325	@ 0x145
 80097ee:	f000 fe83 	bl	800a4f8 <__assert_func>
 80097f2:	2301      	movs	r3, #1
 80097f4:	6144      	str	r4, [r0, #20]
 80097f6:	6103      	str	r3, [r0, #16]
 80097f8:	bd10      	pop	{r4, pc}
 80097fa:	bf00      	nop
 80097fc:	0800a858 	.word	0x0800a858
 8009800:	0800a869 	.word	0x0800a869

08009804 <__multiply>:
 8009804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009808:	4614      	mov	r4, r2
 800980a:	690a      	ldr	r2, [r1, #16]
 800980c:	6923      	ldr	r3, [r4, #16]
 800980e:	429a      	cmp	r2, r3
 8009810:	bfa8      	it	ge
 8009812:	4623      	movge	r3, r4
 8009814:	460f      	mov	r7, r1
 8009816:	bfa4      	itt	ge
 8009818:	460c      	movge	r4, r1
 800981a:	461f      	movge	r7, r3
 800981c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009820:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009824:	68a3      	ldr	r3, [r4, #8]
 8009826:	6861      	ldr	r1, [r4, #4]
 8009828:	eb0a 0609 	add.w	r6, sl, r9
 800982c:	42b3      	cmp	r3, r6
 800982e:	b085      	sub	sp, #20
 8009830:	bfb8      	it	lt
 8009832:	3101      	addlt	r1, #1
 8009834:	f7ff fedc 	bl	80095f0 <_Balloc>
 8009838:	b930      	cbnz	r0, 8009848 <__multiply+0x44>
 800983a:	4602      	mov	r2, r0
 800983c:	4b44      	ldr	r3, [pc, #272]	@ (8009950 <__multiply+0x14c>)
 800983e:	4845      	ldr	r0, [pc, #276]	@ (8009954 <__multiply+0x150>)
 8009840:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009844:	f000 fe58 	bl	800a4f8 <__assert_func>
 8009848:	f100 0514 	add.w	r5, r0, #20
 800984c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009850:	462b      	mov	r3, r5
 8009852:	2200      	movs	r2, #0
 8009854:	4543      	cmp	r3, r8
 8009856:	d321      	bcc.n	800989c <__multiply+0x98>
 8009858:	f107 0114 	add.w	r1, r7, #20
 800985c:	f104 0214 	add.w	r2, r4, #20
 8009860:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009864:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009868:	9302      	str	r3, [sp, #8]
 800986a:	1b13      	subs	r3, r2, r4
 800986c:	3b15      	subs	r3, #21
 800986e:	f023 0303 	bic.w	r3, r3, #3
 8009872:	3304      	adds	r3, #4
 8009874:	f104 0715 	add.w	r7, r4, #21
 8009878:	42ba      	cmp	r2, r7
 800987a:	bf38      	it	cc
 800987c:	2304      	movcc	r3, #4
 800987e:	9301      	str	r3, [sp, #4]
 8009880:	9b02      	ldr	r3, [sp, #8]
 8009882:	9103      	str	r1, [sp, #12]
 8009884:	428b      	cmp	r3, r1
 8009886:	d80c      	bhi.n	80098a2 <__multiply+0x9e>
 8009888:	2e00      	cmp	r6, #0
 800988a:	dd03      	ble.n	8009894 <__multiply+0x90>
 800988c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009890:	2b00      	cmp	r3, #0
 8009892:	d05b      	beq.n	800994c <__multiply+0x148>
 8009894:	6106      	str	r6, [r0, #16]
 8009896:	b005      	add	sp, #20
 8009898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800989c:	f843 2b04 	str.w	r2, [r3], #4
 80098a0:	e7d8      	b.n	8009854 <__multiply+0x50>
 80098a2:	f8b1 a000 	ldrh.w	sl, [r1]
 80098a6:	f1ba 0f00 	cmp.w	sl, #0
 80098aa:	d024      	beq.n	80098f6 <__multiply+0xf2>
 80098ac:	f104 0e14 	add.w	lr, r4, #20
 80098b0:	46a9      	mov	r9, r5
 80098b2:	f04f 0c00 	mov.w	ip, #0
 80098b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80098ba:	f8d9 3000 	ldr.w	r3, [r9]
 80098be:	fa1f fb87 	uxth.w	fp, r7
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	fb0a 330b 	mla	r3, sl, fp, r3
 80098c8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80098cc:	f8d9 7000 	ldr.w	r7, [r9]
 80098d0:	4463      	add	r3, ip
 80098d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80098d6:	fb0a c70b 	mla	r7, sl, fp, ip
 80098da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80098de:	b29b      	uxth	r3, r3
 80098e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80098e4:	4572      	cmp	r2, lr
 80098e6:	f849 3b04 	str.w	r3, [r9], #4
 80098ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80098ee:	d8e2      	bhi.n	80098b6 <__multiply+0xb2>
 80098f0:	9b01      	ldr	r3, [sp, #4]
 80098f2:	f845 c003 	str.w	ip, [r5, r3]
 80098f6:	9b03      	ldr	r3, [sp, #12]
 80098f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80098fc:	3104      	adds	r1, #4
 80098fe:	f1b9 0f00 	cmp.w	r9, #0
 8009902:	d021      	beq.n	8009948 <__multiply+0x144>
 8009904:	682b      	ldr	r3, [r5, #0]
 8009906:	f104 0c14 	add.w	ip, r4, #20
 800990a:	46ae      	mov	lr, r5
 800990c:	f04f 0a00 	mov.w	sl, #0
 8009910:	f8bc b000 	ldrh.w	fp, [ip]
 8009914:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009918:	fb09 770b 	mla	r7, r9, fp, r7
 800991c:	4457      	add	r7, sl
 800991e:	b29b      	uxth	r3, r3
 8009920:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009924:	f84e 3b04 	str.w	r3, [lr], #4
 8009928:	f85c 3b04 	ldr.w	r3, [ip], #4
 800992c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009930:	f8be 3000 	ldrh.w	r3, [lr]
 8009934:	fb09 330a 	mla	r3, r9, sl, r3
 8009938:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800993c:	4562      	cmp	r2, ip
 800993e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009942:	d8e5      	bhi.n	8009910 <__multiply+0x10c>
 8009944:	9f01      	ldr	r7, [sp, #4]
 8009946:	51eb      	str	r3, [r5, r7]
 8009948:	3504      	adds	r5, #4
 800994a:	e799      	b.n	8009880 <__multiply+0x7c>
 800994c:	3e01      	subs	r6, #1
 800994e:	e79b      	b.n	8009888 <__multiply+0x84>
 8009950:	0800a858 	.word	0x0800a858
 8009954:	0800a869 	.word	0x0800a869

08009958 <__pow5mult>:
 8009958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800995c:	4615      	mov	r5, r2
 800995e:	f012 0203 	ands.w	r2, r2, #3
 8009962:	4607      	mov	r7, r0
 8009964:	460e      	mov	r6, r1
 8009966:	d007      	beq.n	8009978 <__pow5mult+0x20>
 8009968:	4c25      	ldr	r4, [pc, #148]	@ (8009a00 <__pow5mult+0xa8>)
 800996a:	3a01      	subs	r2, #1
 800996c:	2300      	movs	r3, #0
 800996e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009972:	f7ff fe9f 	bl	80096b4 <__multadd>
 8009976:	4606      	mov	r6, r0
 8009978:	10ad      	asrs	r5, r5, #2
 800997a:	d03d      	beq.n	80099f8 <__pow5mult+0xa0>
 800997c:	69fc      	ldr	r4, [r7, #28]
 800997e:	b97c      	cbnz	r4, 80099a0 <__pow5mult+0x48>
 8009980:	2010      	movs	r0, #16
 8009982:	f7ff fd7f 	bl	8009484 <malloc>
 8009986:	4602      	mov	r2, r0
 8009988:	61f8      	str	r0, [r7, #28]
 800998a:	b928      	cbnz	r0, 8009998 <__pow5mult+0x40>
 800998c:	4b1d      	ldr	r3, [pc, #116]	@ (8009a04 <__pow5mult+0xac>)
 800998e:	481e      	ldr	r0, [pc, #120]	@ (8009a08 <__pow5mult+0xb0>)
 8009990:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009994:	f000 fdb0 	bl	800a4f8 <__assert_func>
 8009998:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800999c:	6004      	str	r4, [r0, #0]
 800999e:	60c4      	str	r4, [r0, #12]
 80099a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80099a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099a8:	b94c      	cbnz	r4, 80099be <__pow5mult+0x66>
 80099aa:	f240 2171 	movw	r1, #625	@ 0x271
 80099ae:	4638      	mov	r0, r7
 80099b0:	f7ff ff12 	bl	80097d8 <__i2b>
 80099b4:	2300      	movs	r3, #0
 80099b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80099ba:	4604      	mov	r4, r0
 80099bc:	6003      	str	r3, [r0, #0]
 80099be:	f04f 0900 	mov.w	r9, #0
 80099c2:	07eb      	lsls	r3, r5, #31
 80099c4:	d50a      	bpl.n	80099dc <__pow5mult+0x84>
 80099c6:	4631      	mov	r1, r6
 80099c8:	4622      	mov	r2, r4
 80099ca:	4638      	mov	r0, r7
 80099cc:	f7ff ff1a 	bl	8009804 <__multiply>
 80099d0:	4631      	mov	r1, r6
 80099d2:	4680      	mov	r8, r0
 80099d4:	4638      	mov	r0, r7
 80099d6:	f7ff fe4b 	bl	8009670 <_Bfree>
 80099da:	4646      	mov	r6, r8
 80099dc:	106d      	asrs	r5, r5, #1
 80099de:	d00b      	beq.n	80099f8 <__pow5mult+0xa0>
 80099e0:	6820      	ldr	r0, [r4, #0]
 80099e2:	b938      	cbnz	r0, 80099f4 <__pow5mult+0x9c>
 80099e4:	4622      	mov	r2, r4
 80099e6:	4621      	mov	r1, r4
 80099e8:	4638      	mov	r0, r7
 80099ea:	f7ff ff0b 	bl	8009804 <__multiply>
 80099ee:	6020      	str	r0, [r4, #0]
 80099f0:	f8c0 9000 	str.w	r9, [r0]
 80099f4:	4604      	mov	r4, r0
 80099f6:	e7e4      	b.n	80099c2 <__pow5mult+0x6a>
 80099f8:	4630      	mov	r0, r6
 80099fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099fe:	bf00      	nop
 8009a00:	0800a8c4 	.word	0x0800a8c4
 8009a04:	0800a7e9 	.word	0x0800a7e9
 8009a08:	0800a869 	.word	0x0800a869

08009a0c <__lshift>:
 8009a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a10:	460c      	mov	r4, r1
 8009a12:	6849      	ldr	r1, [r1, #4]
 8009a14:	6923      	ldr	r3, [r4, #16]
 8009a16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a1a:	68a3      	ldr	r3, [r4, #8]
 8009a1c:	4607      	mov	r7, r0
 8009a1e:	4691      	mov	r9, r2
 8009a20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a24:	f108 0601 	add.w	r6, r8, #1
 8009a28:	42b3      	cmp	r3, r6
 8009a2a:	db0b      	blt.n	8009a44 <__lshift+0x38>
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	f7ff fddf 	bl	80095f0 <_Balloc>
 8009a32:	4605      	mov	r5, r0
 8009a34:	b948      	cbnz	r0, 8009a4a <__lshift+0x3e>
 8009a36:	4602      	mov	r2, r0
 8009a38:	4b28      	ldr	r3, [pc, #160]	@ (8009adc <__lshift+0xd0>)
 8009a3a:	4829      	ldr	r0, [pc, #164]	@ (8009ae0 <__lshift+0xd4>)
 8009a3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009a40:	f000 fd5a 	bl	800a4f8 <__assert_func>
 8009a44:	3101      	adds	r1, #1
 8009a46:	005b      	lsls	r3, r3, #1
 8009a48:	e7ee      	b.n	8009a28 <__lshift+0x1c>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	f100 0114 	add.w	r1, r0, #20
 8009a50:	f100 0210 	add.w	r2, r0, #16
 8009a54:	4618      	mov	r0, r3
 8009a56:	4553      	cmp	r3, sl
 8009a58:	db33      	blt.n	8009ac2 <__lshift+0xb6>
 8009a5a:	6920      	ldr	r0, [r4, #16]
 8009a5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a60:	f104 0314 	add.w	r3, r4, #20
 8009a64:	f019 091f 	ands.w	r9, r9, #31
 8009a68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a70:	d02b      	beq.n	8009aca <__lshift+0xbe>
 8009a72:	f1c9 0e20 	rsb	lr, r9, #32
 8009a76:	468a      	mov	sl, r1
 8009a78:	2200      	movs	r2, #0
 8009a7a:	6818      	ldr	r0, [r3, #0]
 8009a7c:	fa00 f009 	lsl.w	r0, r0, r9
 8009a80:	4310      	orrs	r0, r2
 8009a82:	f84a 0b04 	str.w	r0, [sl], #4
 8009a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a8a:	459c      	cmp	ip, r3
 8009a8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a90:	d8f3      	bhi.n	8009a7a <__lshift+0x6e>
 8009a92:	ebac 0304 	sub.w	r3, ip, r4
 8009a96:	3b15      	subs	r3, #21
 8009a98:	f023 0303 	bic.w	r3, r3, #3
 8009a9c:	3304      	adds	r3, #4
 8009a9e:	f104 0015 	add.w	r0, r4, #21
 8009aa2:	4584      	cmp	ip, r0
 8009aa4:	bf38      	it	cc
 8009aa6:	2304      	movcc	r3, #4
 8009aa8:	50ca      	str	r2, [r1, r3]
 8009aaa:	b10a      	cbz	r2, 8009ab0 <__lshift+0xa4>
 8009aac:	f108 0602 	add.w	r6, r8, #2
 8009ab0:	3e01      	subs	r6, #1
 8009ab2:	4638      	mov	r0, r7
 8009ab4:	612e      	str	r6, [r5, #16]
 8009ab6:	4621      	mov	r1, r4
 8009ab8:	f7ff fdda 	bl	8009670 <_Bfree>
 8009abc:	4628      	mov	r0, r5
 8009abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ac2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	e7c5      	b.n	8009a56 <__lshift+0x4a>
 8009aca:	3904      	subs	r1, #4
 8009acc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ad0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ad4:	459c      	cmp	ip, r3
 8009ad6:	d8f9      	bhi.n	8009acc <__lshift+0xc0>
 8009ad8:	e7ea      	b.n	8009ab0 <__lshift+0xa4>
 8009ada:	bf00      	nop
 8009adc:	0800a858 	.word	0x0800a858
 8009ae0:	0800a869 	.word	0x0800a869

08009ae4 <__mcmp>:
 8009ae4:	690a      	ldr	r2, [r1, #16]
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	6900      	ldr	r0, [r0, #16]
 8009aea:	1a80      	subs	r0, r0, r2
 8009aec:	b530      	push	{r4, r5, lr}
 8009aee:	d10e      	bne.n	8009b0e <__mcmp+0x2a>
 8009af0:	3314      	adds	r3, #20
 8009af2:	3114      	adds	r1, #20
 8009af4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009af8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009afc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b04:	4295      	cmp	r5, r2
 8009b06:	d003      	beq.n	8009b10 <__mcmp+0x2c>
 8009b08:	d205      	bcs.n	8009b16 <__mcmp+0x32>
 8009b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b0e:	bd30      	pop	{r4, r5, pc}
 8009b10:	42a3      	cmp	r3, r4
 8009b12:	d3f3      	bcc.n	8009afc <__mcmp+0x18>
 8009b14:	e7fb      	b.n	8009b0e <__mcmp+0x2a>
 8009b16:	2001      	movs	r0, #1
 8009b18:	e7f9      	b.n	8009b0e <__mcmp+0x2a>
	...

08009b1c <__mdiff>:
 8009b1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b20:	4689      	mov	r9, r1
 8009b22:	4606      	mov	r6, r0
 8009b24:	4611      	mov	r1, r2
 8009b26:	4648      	mov	r0, r9
 8009b28:	4614      	mov	r4, r2
 8009b2a:	f7ff ffdb 	bl	8009ae4 <__mcmp>
 8009b2e:	1e05      	subs	r5, r0, #0
 8009b30:	d112      	bne.n	8009b58 <__mdiff+0x3c>
 8009b32:	4629      	mov	r1, r5
 8009b34:	4630      	mov	r0, r6
 8009b36:	f7ff fd5b 	bl	80095f0 <_Balloc>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	b928      	cbnz	r0, 8009b4a <__mdiff+0x2e>
 8009b3e:	4b3f      	ldr	r3, [pc, #252]	@ (8009c3c <__mdiff+0x120>)
 8009b40:	f240 2137 	movw	r1, #567	@ 0x237
 8009b44:	483e      	ldr	r0, [pc, #248]	@ (8009c40 <__mdiff+0x124>)
 8009b46:	f000 fcd7 	bl	800a4f8 <__assert_func>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b50:	4610      	mov	r0, r2
 8009b52:	b003      	add	sp, #12
 8009b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b58:	bfbc      	itt	lt
 8009b5a:	464b      	movlt	r3, r9
 8009b5c:	46a1      	movlt	r9, r4
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009b64:	bfba      	itte	lt
 8009b66:	461c      	movlt	r4, r3
 8009b68:	2501      	movlt	r5, #1
 8009b6a:	2500      	movge	r5, #0
 8009b6c:	f7ff fd40 	bl	80095f0 <_Balloc>
 8009b70:	4602      	mov	r2, r0
 8009b72:	b918      	cbnz	r0, 8009b7c <__mdiff+0x60>
 8009b74:	4b31      	ldr	r3, [pc, #196]	@ (8009c3c <__mdiff+0x120>)
 8009b76:	f240 2145 	movw	r1, #581	@ 0x245
 8009b7a:	e7e3      	b.n	8009b44 <__mdiff+0x28>
 8009b7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009b80:	6926      	ldr	r6, [r4, #16]
 8009b82:	60c5      	str	r5, [r0, #12]
 8009b84:	f109 0310 	add.w	r3, r9, #16
 8009b88:	f109 0514 	add.w	r5, r9, #20
 8009b8c:	f104 0e14 	add.w	lr, r4, #20
 8009b90:	f100 0b14 	add.w	fp, r0, #20
 8009b94:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009b98:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009b9c:	9301      	str	r3, [sp, #4]
 8009b9e:	46d9      	mov	r9, fp
 8009ba0:	f04f 0c00 	mov.w	ip, #0
 8009ba4:	9b01      	ldr	r3, [sp, #4]
 8009ba6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009baa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009bae:	9301      	str	r3, [sp, #4]
 8009bb0:	fa1f f38a 	uxth.w	r3, sl
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	b283      	uxth	r3, r0
 8009bb8:	1acb      	subs	r3, r1, r3
 8009bba:	0c00      	lsrs	r0, r0, #16
 8009bbc:	4463      	add	r3, ip
 8009bbe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009bc2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009bcc:	4576      	cmp	r6, lr
 8009bce:	f849 3b04 	str.w	r3, [r9], #4
 8009bd2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009bd6:	d8e5      	bhi.n	8009ba4 <__mdiff+0x88>
 8009bd8:	1b33      	subs	r3, r6, r4
 8009bda:	3b15      	subs	r3, #21
 8009bdc:	f023 0303 	bic.w	r3, r3, #3
 8009be0:	3415      	adds	r4, #21
 8009be2:	3304      	adds	r3, #4
 8009be4:	42a6      	cmp	r6, r4
 8009be6:	bf38      	it	cc
 8009be8:	2304      	movcc	r3, #4
 8009bea:	441d      	add	r5, r3
 8009bec:	445b      	add	r3, fp
 8009bee:	461e      	mov	r6, r3
 8009bf0:	462c      	mov	r4, r5
 8009bf2:	4544      	cmp	r4, r8
 8009bf4:	d30e      	bcc.n	8009c14 <__mdiff+0xf8>
 8009bf6:	f108 0103 	add.w	r1, r8, #3
 8009bfa:	1b49      	subs	r1, r1, r5
 8009bfc:	f021 0103 	bic.w	r1, r1, #3
 8009c00:	3d03      	subs	r5, #3
 8009c02:	45a8      	cmp	r8, r5
 8009c04:	bf38      	it	cc
 8009c06:	2100      	movcc	r1, #0
 8009c08:	440b      	add	r3, r1
 8009c0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c0e:	b191      	cbz	r1, 8009c36 <__mdiff+0x11a>
 8009c10:	6117      	str	r7, [r2, #16]
 8009c12:	e79d      	b.n	8009b50 <__mdiff+0x34>
 8009c14:	f854 1b04 	ldr.w	r1, [r4], #4
 8009c18:	46e6      	mov	lr, ip
 8009c1a:	0c08      	lsrs	r0, r1, #16
 8009c1c:	fa1c fc81 	uxtah	ip, ip, r1
 8009c20:	4471      	add	r1, lr
 8009c22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009c26:	b289      	uxth	r1, r1
 8009c28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009c2c:	f846 1b04 	str.w	r1, [r6], #4
 8009c30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c34:	e7dd      	b.n	8009bf2 <__mdiff+0xd6>
 8009c36:	3f01      	subs	r7, #1
 8009c38:	e7e7      	b.n	8009c0a <__mdiff+0xee>
 8009c3a:	bf00      	nop
 8009c3c:	0800a858 	.word	0x0800a858
 8009c40:	0800a869 	.word	0x0800a869

08009c44 <__d2b>:
 8009c44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c48:	460f      	mov	r7, r1
 8009c4a:	2101      	movs	r1, #1
 8009c4c:	ec59 8b10 	vmov	r8, r9, d0
 8009c50:	4616      	mov	r6, r2
 8009c52:	f7ff fccd 	bl	80095f0 <_Balloc>
 8009c56:	4604      	mov	r4, r0
 8009c58:	b930      	cbnz	r0, 8009c68 <__d2b+0x24>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	4b23      	ldr	r3, [pc, #140]	@ (8009cec <__d2b+0xa8>)
 8009c5e:	4824      	ldr	r0, [pc, #144]	@ (8009cf0 <__d2b+0xac>)
 8009c60:	f240 310f 	movw	r1, #783	@ 0x30f
 8009c64:	f000 fc48 	bl	800a4f8 <__assert_func>
 8009c68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c70:	b10d      	cbz	r5, 8009c76 <__d2b+0x32>
 8009c72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c76:	9301      	str	r3, [sp, #4]
 8009c78:	f1b8 0300 	subs.w	r3, r8, #0
 8009c7c:	d023      	beq.n	8009cc6 <__d2b+0x82>
 8009c7e:	4668      	mov	r0, sp
 8009c80:	9300      	str	r3, [sp, #0]
 8009c82:	f7ff fd7c 	bl	800977e <__lo0bits>
 8009c86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c8a:	b1d0      	cbz	r0, 8009cc2 <__d2b+0x7e>
 8009c8c:	f1c0 0320 	rsb	r3, r0, #32
 8009c90:	fa02 f303 	lsl.w	r3, r2, r3
 8009c94:	430b      	orrs	r3, r1
 8009c96:	40c2      	lsrs	r2, r0
 8009c98:	6163      	str	r3, [r4, #20]
 8009c9a:	9201      	str	r2, [sp, #4]
 8009c9c:	9b01      	ldr	r3, [sp, #4]
 8009c9e:	61a3      	str	r3, [r4, #24]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	bf0c      	ite	eq
 8009ca4:	2201      	moveq	r2, #1
 8009ca6:	2202      	movne	r2, #2
 8009ca8:	6122      	str	r2, [r4, #16]
 8009caa:	b1a5      	cbz	r5, 8009cd6 <__d2b+0x92>
 8009cac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009cb0:	4405      	add	r5, r0
 8009cb2:	603d      	str	r5, [r7, #0]
 8009cb4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009cb8:	6030      	str	r0, [r6, #0]
 8009cba:	4620      	mov	r0, r4
 8009cbc:	b003      	add	sp, #12
 8009cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cc2:	6161      	str	r1, [r4, #20]
 8009cc4:	e7ea      	b.n	8009c9c <__d2b+0x58>
 8009cc6:	a801      	add	r0, sp, #4
 8009cc8:	f7ff fd59 	bl	800977e <__lo0bits>
 8009ccc:	9b01      	ldr	r3, [sp, #4]
 8009cce:	6163      	str	r3, [r4, #20]
 8009cd0:	3020      	adds	r0, #32
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	e7e8      	b.n	8009ca8 <__d2b+0x64>
 8009cd6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009cda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009cde:	6038      	str	r0, [r7, #0]
 8009ce0:	6918      	ldr	r0, [r3, #16]
 8009ce2:	f7ff fd2d 	bl	8009740 <__hi0bits>
 8009ce6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009cea:	e7e5      	b.n	8009cb8 <__d2b+0x74>
 8009cec:	0800a858 	.word	0x0800a858
 8009cf0:	0800a869 	.word	0x0800a869

08009cf4 <__ssputs_r>:
 8009cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf8:	688e      	ldr	r6, [r1, #8]
 8009cfa:	461f      	mov	r7, r3
 8009cfc:	42be      	cmp	r6, r7
 8009cfe:	680b      	ldr	r3, [r1, #0]
 8009d00:	4682      	mov	sl, r0
 8009d02:	460c      	mov	r4, r1
 8009d04:	4690      	mov	r8, r2
 8009d06:	d82d      	bhi.n	8009d64 <__ssputs_r+0x70>
 8009d08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009d10:	d026      	beq.n	8009d60 <__ssputs_r+0x6c>
 8009d12:	6965      	ldr	r5, [r4, #20]
 8009d14:	6909      	ldr	r1, [r1, #16]
 8009d16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d1a:	eba3 0901 	sub.w	r9, r3, r1
 8009d1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d22:	1c7b      	adds	r3, r7, #1
 8009d24:	444b      	add	r3, r9
 8009d26:	106d      	asrs	r5, r5, #1
 8009d28:	429d      	cmp	r5, r3
 8009d2a:	bf38      	it	cc
 8009d2c:	461d      	movcc	r5, r3
 8009d2e:	0553      	lsls	r3, r2, #21
 8009d30:	d527      	bpl.n	8009d82 <__ssputs_r+0x8e>
 8009d32:	4629      	mov	r1, r5
 8009d34:	f7ff fbd0 	bl	80094d8 <_malloc_r>
 8009d38:	4606      	mov	r6, r0
 8009d3a:	b360      	cbz	r0, 8009d96 <__ssputs_r+0xa2>
 8009d3c:	6921      	ldr	r1, [r4, #16]
 8009d3e:	464a      	mov	r2, r9
 8009d40:	f000 fbcc 	bl	800a4dc <memcpy>
 8009d44:	89a3      	ldrh	r3, [r4, #12]
 8009d46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d4e:	81a3      	strh	r3, [r4, #12]
 8009d50:	6126      	str	r6, [r4, #16]
 8009d52:	6165      	str	r5, [r4, #20]
 8009d54:	444e      	add	r6, r9
 8009d56:	eba5 0509 	sub.w	r5, r5, r9
 8009d5a:	6026      	str	r6, [r4, #0]
 8009d5c:	60a5      	str	r5, [r4, #8]
 8009d5e:	463e      	mov	r6, r7
 8009d60:	42be      	cmp	r6, r7
 8009d62:	d900      	bls.n	8009d66 <__ssputs_r+0x72>
 8009d64:	463e      	mov	r6, r7
 8009d66:	6820      	ldr	r0, [r4, #0]
 8009d68:	4632      	mov	r2, r6
 8009d6a:	4641      	mov	r1, r8
 8009d6c:	f000 fb6a 	bl	800a444 <memmove>
 8009d70:	68a3      	ldr	r3, [r4, #8]
 8009d72:	1b9b      	subs	r3, r3, r6
 8009d74:	60a3      	str	r3, [r4, #8]
 8009d76:	6823      	ldr	r3, [r4, #0]
 8009d78:	4433      	add	r3, r6
 8009d7a:	6023      	str	r3, [r4, #0]
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d82:	462a      	mov	r2, r5
 8009d84:	f000 fbfc 	bl	800a580 <_realloc_r>
 8009d88:	4606      	mov	r6, r0
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	d1e0      	bne.n	8009d50 <__ssputs_r+0x5c>
 8009d8e:	6921      	ldr	r1, [r4, #16]
 8009d90:	4650      	mov	r0, sl
 8009d92:	f7ff fb2d 	bl	80093f0 <_free_r>
 8009d96:	230c      	movs	r3, #12
 8009d98:	f8ca 3000 	str.w	r3, [sl]
 8009d9c:	89a3      	ldrh	r3, [r4, #12]
 8009d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009da2:	81a3      	strh	r3, [r4, #12]
 8009da4:	f04f 30ff 	mov.w	r0, #4294967295
 8009da8:	e7e9      	b.n	8009d7e <__ssputs_r+0x8a>
	...

08009dac <_svfiprintf_r>:
 8009dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db0:	4698      	mov	r8, r3
 8009db2:	898b      	ldrh	r3, [r1, #12]
 8009db4:	061b      	lsls	r3, r3, #24
 8009db6:	b09d      	sub	sp, #116	@ 0x74
 8009db8:	4607      	mov	r7, r0
 8009dba:	460d      	mov	r5, r1
 8009dbc:	4614      	mov	r4, r2
 8009dbe:	d510      	bpl.n	8009de2 <_svfiprintf_r+0x36>
 8009dc0:	690b      	ldr	r3, [r1, #16]
 8009dc2:	b973      	cbnz	r3, 8009de2 <_svfiprintf_r+0x36>
 8009dc4:	2140      	movs	r1, #64	@ 0x40
 8009dc6:	f7ff fb87 	bl	80094d8 <_malloc_r>
 8009dca:	6028      	str	r0, [r5, #0]
 8009dcc:	6128      	str	r0, [r5, #16]
 8009dce:	b930      	cbnz	r0, 8009dde <_svfiprintf_r+0x32>
 8009dd0:	230c      	movs	r3, #12
 8009dd2:	603b      	str	r3, [r7, #0]
 8009dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd8:	b01d      	add	sp, #116	@ 0x74
 8009dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dde:	2340      	movs	r3, #64	@ 0x40
 8009de0:	616b      	str	r3, [r5, #20]
 8009de2:	2300      	movs	r3, #0
 8009de4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009de6:	2320      	movs	r3, #32
 8009de8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009dec:	f8cd 800c 	str.w	r8, [sp, #12]
 8009df0:	2330      	movs	r3, #48	@ 0x30
 8009df2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009f90 <_svfiprintf_r+0x1e4>
 8009df6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009dfa:	f04f 0901 	mov.w	r9, #1
 8009dfe:	4623      	mov	r3, r4
 8009e00:	469a      	mov	sl, r3
 8009e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e06:	b10a      	cbz	r2, 8009e0c <_svfiprintf_r+0x60>
 8009e08:	2a25      	cmp	r2, #37	@ 0x25
 8009e0a:	d1f9      	bne.n	8009e00 <_svfiprintf_r+0x54>
 8009e0c:	ebba 0b04 	subs.w	fp, sl, r4
 8009e10:	d00b      	beq.n	8009e2a <_svfiprintf_r+0x7e>
 8009e12:	465b      	mov	r3, fp
 8009e14:	4622      	mov	r2, r4
 8009e16:	4629      	mov	r1, r5
 8009e18:	4638      	mov	r0, r7
 8009e1a:	f7ff ff6b 	bl	8009cf4 <__ssputs_r>
 8009e1e:	3001      	adds	r0, #1
 8009e20:	f000 80a7 	beq.w	8009f72 <_svfiprintf_r+0x1c6>
 8009e24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e26:	445a      	add	r2, fp
 8009e28:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f000 809f 	beq.w	8009f72 <_svfiprintf_r+0x1c6>
 8009e34:	2300      	movs	r3, #0
 8009e36:	f04f 32ff 	mov.w	r2, #4294967295
 8009e3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e3e:	f10a 0a01 	add.w	sl, sl, #1
 8009e42:	9304      	str	r3, [sp, #16]
 8009e44:	9307      	str	r3, [sp, #28]
 8009e46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e4c:	4654      	mov	r4, sl
 8009e4e:	2205      	movs	r2, #5
 8009e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e54:	484e      	ldr	r0, [pc, #312]	@ (8009f90 <_svfiprintf_r+0x1e4>)
 8009e56:	f7f6 f9e3 	bl	8000220 <memchr>
 8009e5a:	9a04      	ldr	r2, [sp, #16]
 8009e5c:	b9d8      	cbnz	r0, 8009e96 <_svfiprintf_r+0xea>
 8009e5e:	06d0      	lsls	r0, r2, #27
 8009e60:	bf44      	itt	mi
 8009e62:	2320      	movmi	r3, #32
 8009e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e68:	0711      	lsls	r1, r2, #28
 8009e6a:	bf44      	itt	mi
 8009e6c:	232b      	movmi	r3, #43	@ 0x2b
 8009e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e72:	f89a 3000 	ldrb.w	r3, [sl]
 8009e76:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e78:	d015      	beq.n	8009ea6 <_svfiprintf_r+0xfa>
 8009e7a:	9a07      	ldr	r2, [sp, #28]
 8009e7c:	4654      	mov	r4, sl
 8009e7e:	2000      	movs	r0, #0
 8009e80:	f04f 0c0a 	mov.w	ip, #10
 8009e84:	4621      	mov	r1, r4
 8009e86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e8a:	3b30      	subs	r3, #48	@ 0x30
 8009e8c:	2b09      	cmp	r3, #9
 8009e8e:	d94b      	bls.n	8009f28 <_svfiprintf_r+0x17c>
 8009e90:	b1b0      	cbz	r0, 8009ec0 <_svfiprintf_r+0x114>
 8009e92:	9207      	str	r2, [sp, #28]
 8009e94:	e014      	b.n	8009ec0 <_svfiprintf_r+0x114>
 8009e96:	eba0 0308 	sub.w	r3, r0, r8
 8009e9a:	fa09 f303 	lsl.w	r3, r9, r3
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	9304      	str	r3, [sp, #16]
 8009ea2:	46a2      	mov	sl, r4
 8009ea4:	e7d2      	b.n	8009e4c <_svfiprintf_r+0xa0>
 8009ea6:	9b03      	ldr	r3, [sp, #12]
 8009ea8:	1d19      	adds	r1, r3, #4
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	9103      	str	r1, [sp, #12]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	bfbb      	ittet	lt
 8009eb2:	425b      	neglt	r3, r3
 8009eb4:	f042 0202 	orrlt.w	r2, r2, #2
 8009eb8:	9307      	strge	r3, [sp, #28]
 8009eba:	9307      	strlt	r3, [sp, #28]
 8009ebc:	bfb8      	it	lt
 8009ebe:	9204      	strlt	r2, [sp, #16]
 8009ec0:	7823      	ldrb	r3, [r4, #0]
 8009ec2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ec4:	d10a      	bne.n	8009edc <_svfiprintf_r+0x130>
 8009ec6:	7863      	ldrb	r3, [r4, #1]
 8009ec8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009eca:	d132      	bne.n	8009f32 <_svfiprintf_r+0x186>
 8009ecc:	9b03      	ldr	r3, [sp, #12]
 8009ece:	1d1a      	adds	r2, r3, #4
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	9203      	str	r2, [sp, #12]
 8009ed4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ed8:	3402      	adds	r4, #2
 8009eda:	9305      	str	r3, [sp, #20]
 8009edc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009fa0 <_svfiprintf_r+0x1f4>
 8009ee0:	7821      	ldrb	r1, [r4, #0]
 8009ee2:	2203      	movs	r2, #3
 8009ee4:	4650      	mov	r0, sl
 8009ee6:	f7f6 f99b 	bl	8000220 <memchr>
 8009eea:	b138      	cbz	r0, 8009efc <_svfiprintf_r+0x150>
 8009eec:	9b04      	ldr	r3, [sp, #16]
 8009eee:	eba0 000a 	sub.w	r0, r0, sl
 8009ef2:	2240      	movs	r2, #64	@ 0x40
 8009ef4:	4082      	lsls	r2, r0
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	3401      	adds	r4, #1
 8009efa:	9304      	str	r3, [sp, #16]
 8009efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f00:	4824      	ldr	r0, [pc, #144]	@ (8009f94 <_svfiprintf_r+0x1e8>)
 8009f02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f06:	2206      	movs	r2, #6
 8009f08:	f7f6 f98a 	bl	8000220 <memchr>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	d036      	beq.n	8009f7e <_svfiprintf_r+0x1d2>
 8009f10:	4b21      	ldr	r3, [pc, #132]	@ (8009f98 <_svfiprintf_r+0x1ec>)
 8009f12:	bb1b      	cbnz	r3, 8009f5c <_svfiprintf_r+0x1b0>
 8009f14:	9b03      	ldr	r3, [sp, #12]
 8009f16:	3307      	adds	r3, #7
 8009f18:	f023 0307 	bic.w	r3, r3, #7
 8009f1c:	3308      	adds	r3, #8
 8009f1e:	9303      	str	r3, [sp, #12]
 8009f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f22:	4433      	add	r3, r6
 8009f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f26:	e76a      	b.n	8009dfe <_svfiprintf_r+0x52>
 8009f28:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	2001      	movs	r0, #1
 8009f30:	e7a8      	b.n	8009e84 <_svfiprintf_r+0xd8>
 8009f32:	2300      	movs	r3, #0
 8009f34:	3401      	adds	r4, #1
 8009f36:	9305      	str	r3, [sp, #20]
 8009f38:	4619      	mov	r1, r3
 8009f3a:	f04f 0c0a 	mov.w	ip, #10
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f44:	3a30      	subs	r2, #48	@ 0x30
 8009f46:	2a09      	cmp	r2, #9
 8009f48:	d903      	bls.n	8009f52 <_svfiprintf_r+0x1a6>
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d0c6      	beq.n	8009edc <_svfiprintf_r+0x130>
 8009f4e:	9105      	str	r1, [sp, #20]
 8009f50:	e7c4      	b.n	8009edc <_svfiprintf_r+0x130>
 8009f52:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f56:	4604      	mov	r4, r0
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e7f0      	b.n	8009f3e <_svfiprintf_r+0x192>
 8009f5c:	ab03      	add	r3, sp, #12
 8009f5e:	9300      	str	r3, [sp, #0]
 8009f60:	462a      	mov	r2, r5
 8009f62:	4b0e      	ldr	r3, [pc, #56]	@ (8009f9c <_svfiprintf_r+0x1f0>)
 8009f64:	a904      	add	r1, sp, #16
 8009f66:	4638      	mov	r0, r7
 8009f68:	f7fd fd92 	bl	8007a90 <_printf_float>
 8009f6c:	1c42      	adds	r2, r0, #1
 8009f6e:	4606      	mov	r6, r0
 8009f70:	d1d6      	bne.n	8009f20 <_svfiprintf_r+0x174>
 8009f72:	89ab      	ldrh	r3, [r5, #12]
 8009f74:	065b      	lsls	r3, r3, #25
 8009f76:	f53f af2d 	bmi.w	8009dd4 <_svfiprintf_r+0x28>
 8009f7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f7c:	e72c      	b.n	8009dd8 <_svfiprintf_r+0x2c>
 8009f7e:	ab03      	add	r3, sp, #12
 8009f80:	9300      	str	r3, [sp, #0]
 8009f82:	462a      	mov	r2, r5
 8009f84:	4b05      	ldr	r3, [pc, #20]	@ (8009f9c <_svfiprintf_r+0x1f0>)
 8009f86:	a904      	add	r1, sp, #16
 8009f88:	4638      	mov	r0, r7
 8009f8a:	f7fe f819 	bl	8007fc0 <_printf_i>
 8009f8e:	e7ed      	b.n	8009f6c <_svfiprintf_r+0x1c0>
 8009f90:	0800a9c0 	.word	0x0800a9c0
 8009f94:	0800a9ca 	.word	0x0800a9ca
 8009f98:	08007a91 	.word	0x08007a91
 8009f9c:	08009cf5 	.word	0x08009cf5
 8009fa0:	0800a9c6 	.word	0x0800a9c6

08009fa4 <__sfputc_r>:
 8009fa4:	6893      	ldr	r3, [r2, #8]
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	b410      	push	{r4}
 8009fac:	6093      	str	r3, [r2, #8]
 8009fae:	da08      	bge.n	8009fc2 <__sfputc_r+0x1e>
 8009fb0:	6994      	ldr	r4, [r2, #24]
 8009fb2:	42a3      	cmp	r3, r4
 8009fb4:	db01      	blt.n	8009fba <__sfputc_r+0x16>
 8009fb6:	290a      	cmp	r1, #10
 8009fb8:	d103      	bne.n	8009fc2 <__sfputc_r+0x1e>
 8009fba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fbe:	f7fe bab4 	b.w	800852a <__swbuf_r>
 8009fc2:	6813      	ldr	r3, [r2, #0]
 8009fc4:	1c58      	adds	r0, r3, #1
 8009fc6:	6010      	str	r0, [r2, #0]
 8009fc8:	7019      	strb	r1, [r3, #0]
 8009fca:	4608      	mov	r0, r1
 8009fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fd0:	4770      	bx	lr

08009fd2 <__sfputs_r>:
 8009fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd4:	4606      	mov	r6, r0
 8009fd6:	460f      	mov	r7, r1
 8009fd8:	4614      	mov	r4, r2
 8009fda:	18d5      	adds	r5, r2, r3
 8009fdc:	42ac      	cmp	r4, r5
 8009fde:	d101      	bne.n	8009fe4 <__sfputs_r+0x12>
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	e007      	b.n	8009ff4 <__sfputs_r+0x22>
 8009fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fe8:	463a      	mov	r2, r7
 8009fea:	4630      	mov	r0, r6
 8009fec:	f7ff ffda 	bl	8009fa4 <__sfputc_r>
 8009ff0:	1c43      	adds	r3, r0, #1
 8009ff2:	d1f3      	bne.n	8009fdc <__sfputs_r+0xa>
 8009ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ff8 <_vfiprintf_r>:
 8009ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ffc:	460d      	mov	r5, r1
 8009ffe:	b09d      	sub	sp, #116	@ 0x74
 800a000:	4614      	mov	r4, r2
 800a002:	4698      	mov	r8, r3
 800a004:	4606      	mov	r6, r0
 800a006:	b118      	cbz	r0, 800a010 <_vfiprintf_r+0x18>
 800a008:	6a03      	ldr	r3, [r0, #32]
 800a00a:	b90b      	cbnz	r3, 800a010 <_vfiprintf_r+0x18>
 800a00c:	f7fe f984 	bl	8008318 <__sinit>
 800a010:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a012:	07d9      	lsls	r1, r3, #31
 800a014:	d405      	bmi.n	800a022 <_vfiprintf_r+0x2a>
 800a016:	89ab      	ldrh	r3, [r5, #12]
 800a018:	059a      	lsls	r2, r3, #22
 800a01a:	d402      	bmi.n	800a022 <_vfiprintf_r+0x2a>
 800a01c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a01e:	f7fe fb96 	bl	800874e <__retarget_lock_acquire_recursive>
 800a022:	89ab      	ldrh	r3, [r5, #12]
 800a024:	071b      	lsls	r3, r3, #28
 800a026:	d501      	bpl.n	800a02c <_vfiprintf_r+0x34>
 800a028:	692b      	ldr	r3, [r5, #16]
 800a02a:	b99b      	cbnz	r3, 800a054 <_vfiprintf_r+0x5c>
 800a02c:	4629      	mov	r1, r5
 800a02e:	4630      	mov	r0, r6
 800a030:	f7fe faba 	bl	80085a8 <__swsetup_r>
 800a034:	b170      	cbz	r0, 800a054 <_vfiprintf_r+0x5c>
 800a036:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a038:	07dc      	lsls	r4, r3, #31
 800a03a:	d504      	bpl.n	800a046 <_vfiprintf_r+0x4e>
 800a03c:	f04f 30ff 	mov.w	r0, #4294967295
 800a040:	b01d      	add	sp, #116	@ 0x74
 800a042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a046:	89ab      	ldrh	r3, [r5, #12]
 800a048:	0598      	lsls	r0, r3, #22
 800a04a:	d4f7      	bmi.n	800a03c <_vfiprintf_r+0x44>
 800a04c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a04e:	f7fe fb7f 	bl	8008750 <__retarget_lock_release_recursive>
 800a052:	e7f3      	b.n	800a03c <_vfiprintf_r+0x44>
 800a054:	2300      	movs	r3, #0
 800a056:	9309      	str	r3, [sp, #36]	@ 0x24
 800a058:	2320      	movs	r3, #32
 800a05a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a05e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a062:	2330      	movs	r3, #48	@ 0x30
 800a064:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a214 <_vfiprintf_r+0x21c>
 800a068:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a06c:	f04f 0901 	mov.w	r9, #1
 800a070:	4623      	mov	r3, r4
 800a072:	469a      	mov	sl, r3
 800a074:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a078:	b10a      	cbz	r2, 800a07e <_vfiprintf_r+0x86>
 800a07a:	2a25      	cmp	r2, #37	@ 0x25
 800a07c:	d1f9      	bne.n	800a072 <_vfiprintf_r+0x7a>
 800a07e:	ebba 0b04 	subs.w	fp, sl, r4
 800a082:	d00b      	beq.n	800a09c <_vfiprintf_r+0xa4>
 800a084:	465b      	mov	r3, fp
 800a086:	4622      	mov	r2, r4
 800a088:	4629      	mov	r1, r5
 800a08a:	4630      	mov	r0, r6
 800a08c:	f7ff ffa1 	bl	8009fd2 <__sfputs_r>
 800a090:	3001      	adds	r0, #1
 800a092:	f000 80a7 	beq.w	800a1e4 <_vfiprintf_r+0x1ec>
 800a096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a098:	445a      	add	r2, fp
 800a09a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a09c:	f89a 3000 	ldrb.w	r3, [sl]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 809f 	beq.w	800a1e4 <_vfiprintf_r+0x1ec>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0b0:	f10a 0a01 	add.w	sl, sl, #1
 800a0b4:	9304      	str	r3, [sp, #16]
 800a0b6:	9307      	str	r3, [sp, #28]
 800a0b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a0bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800a0be:	4654      	mov	r4, sl
 800a0c0:	2205      	movs	r2, #5
 800a0c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c6:	4853      	ldr	r0, [pc, #332]	@ (800a214 <_vfiprintf_r+0x21c>)
 800a0c8:	f7f6 f8aa 	bl	8000220 <memchr>
 800a0cc:	9a04      	ldr	r2, [sp, #16]
 800a0ce:	b9d8      	cbnz	r0, 800a108 <_vfiprintf_r+0x110>
 800a0d0:	06d1      	lsls	r1, r2, #27
 800a0d2:	bf44      	itt	mi
 800a0d4:	2320      	movmi	r3, #32
 800a0d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0da:	0713      	lsls	r3, r2, #28
 800a0dc:	bf44      	itt	mi
 800a0de:	232b      	movmi	r3, #43	@ 0x2b
 800a0e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0ea:	d015      	beq.n	800a118 <_vfiprintf_r+0x120>
 800a0ec:	9a07      	ldr	r2, [sp, #28]
 800a0ee:	4654      	mov	r4, sl
 800a0f0:	2000      	movs	r0, #0
 800a0f2:	f04f 0c0a 	mov.w	ip, #10
 800a0f6:	4621      	mov	r1, r4
 800a0f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0fc:	3b30      	subs	r3, #48	@ 0x30
 800a0fe:	2b09      	cmp	r3, #9
 800a100:	d94b      	bls.n	800a19a <_vfiprintf_r+0x1a2>
 800a102:	b1b0      	cbz	r0, 800a132 <_vfiprintf_r+0x13a>
 800a104:	9207      	str	r2, [sp, #28]
 800a106:	e014      	b.n	800a132 <_vfiprintf_r+0x13a>
 800a108:	eba0 0308 	sub.w	r3, r0, r8
 800a10c:	fa09 f303 	lsl.w	r3, r9, r3
 800a110:	4313      	orrs	r3, r2
 800a112:	9304      	str	r3, [sp, #16]
 800a114:	46a2      	mov	sl, r4
 800a116:	e7d2      	b.n	800a0be <_vfiprintf_r+0xc6>
 800a118:	9b03      	ldr	r3, [sp, #12]
 800a11a:	1d19      	adds	r1, r3, #4
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	9103      	str	r1, [sp, #12]
 800a120:	2b00      	cmp	r3, #0
 800a122:	bfbb      	ittet	lt
 800a124:	425b      	neglt	r3, r3
 800a126:	f042 0202 	orrlt.w	r2, r2, #2
 800a12a:	9307      	strge	r3, [sp, #28]
 800a12c:	9307      	strlt	r3, [sp, #28]
 800a12e:	bfb8      	it	lt
 800a130:	9204      	strlt	r2, [sp, #16]
 800a132:	7823      	ldrb	r3, [r4, #0]
 800a134:	2b2e      	cmp	r3, #46	@ 0x2e
 800a136:	d10a      	bne.n	800a14e <_vfiprintf_r+0x156>
 800a138:	7863      	ldrb	r3, [r4, #1]
 800a13a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a13c:	d132      	bne.n	800a1a4 <_vfiprintf_r+0x1ac>
 800a13e:	9b03      	ldr	r3, [sp, #12]
 800a140:	1d1a      	adds	r2, r3, #4
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	9203      	str	r2, [sp, #12]
 800a146:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a14a:	3402      	adds	r4, #2
 800a14c:	9305      	str	r3, [sp, #20]
 800a14e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a224 <_vfiprintf_r+0x22c>
 800a152:	7821      	ldrb	r1, [r4, #0]
 800a154:	2203      	movs	r2, #3
 800a156:	4650      	mov	r0, sl
 800a158:	f7f6 f862 	bl	8000220 <memchr>
 800a15c:	b138      	cbz	r0, 800a16e <_vfiprintf_r+0x176>
 800a15e:	9b04      	ldr	r3, [sp, #16]
 800a160:	eba0 000a 	sub.w	r0, r0, sl
 800a164:	2240      	movs	r2, #64	@ 0x40
 800a166:	4082      	lsls	r2, r0
 800a168:	4313      	orrs	r3, r2
 800a16a:	3401      	adds	r4, #1
 800a16c:	9304      	str	r3, [sp, #16]
 800a16e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a172:	4829      	ldr	r0, [pc, #164]	@ (800a218 <_vfiprintf_r+0x220>)
 800a174:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a178:	2206      	movs	r2, #6
 800a17a:	f7f6 f851 	bl	8000220 <memchr>
 800a17e:	2800      	cmp	r0, #0
 800a180:	d03f      	beq.n	800a202 <_vfiprintf_r+0x20a>
 800a182:	4b26      	ldr	r3, [pc, #152]	@ (800a21c <_vfiprintf_r+0x224>)
 800a184:	bb1b      	cbnz	r3, 800a1ce <_vfiprintf_r+0x1d6>
 800a186:	9b03      	ldr	r3, [sp, #12]
 800a188:	3307      	adds	r3, #7
 800a18a:	f023 0307 	bic.w	r3, r3, #7
 800a18e:	3308      	adds	r3, #8
 800a190:	9303      	str	r3, [sp, #12]
 800a192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a194:	443b      	add	r3, r7
 800a196:	9309      	str	r3, [sp, #36]	@ 0x24
 800a198:	e76a      	b.n	800a070 <_vfiprintf_r+0x78>
 800a19a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a19e:	460c      	mov	r4, r1
 800a1a0:	2001      	movs	r0, #1
 800a1a2:	e7a8      	b.n	800a0f6 <_vfiprintf_r+0xfe>
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	3401      	adds	r4, #1
 800a1a8:	9305      	str	r3, [sp, #20]
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	f04f 0c0a 	mov.w	ip, #10
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1b6:	3a30      	subs	r2, #48	@ 0x30
 800a1b8:	2a09      	cmp	r2, #9
 800a1ba:	d903      	bls.n	800a1c4 <_vfiprintf_r+0x1cc>
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d0c6      	beq.n	800a14e <_vfiprintf_r+0x156>
 800a1c0:	9105      	str	r1, [sp, #20]
 800a1c2:	e7c4      	b.n	800a14e <_vfiprintf_r+0x156>
 800a1c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1c8:	4604      	mov	r4, r0
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e7f0      	b.n	800a1b0 <_vfiprintf_r+0x1b8>
 800a1ce:	ab03      	add	r3, sp, #12
 800a1d0:	9300      	str	r3, [sp, #0]
 800a1d2:	462a      	mov	r2, r5
 800a1d4:	4b12      	ldr	r3, [pc, #72]	@ (800a220 <_vfiprintf_r+0x228>)
 800a1d6:	a904      	add	r1, sp, #16
 800a1d8:	4630      	mov	r0, r6
 800a1da:	f7fd fc59 	bl	8007a90 <_printf_float>
 800a1de:	4607      	mov	r7, r0
 800a1e0:	1c78      	adds	r0, r7, #1
 800a1e2:	d1d6      	bne.n	800a192 <_vfiprintf_r+0x19a>
 800a1e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1e6:	07d9      	lsls	r1, r3, #31
 800a1e8:	d405      	bmi.n	800a1f6 <_vfiprintf_r+0x1fe>
 800a1ea:	89ab      	ldrh	r3, [r5, #12]
 800a1ec:	059a      	lsls	r2, r3, #22
 800a1ee:	d402      	bmi.n	800a1f6 <_vfiprintf_r+0x1fe>
 800a1f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1f2:	f7fe faad 	bl	8008750 <__retarget_lock_release_recursive>
 800a1f6:	89ab      	ldrh	r3, [r5, #12]
 800a1f8:	065b      	lsls	r3, r3, #25
 800a1fa:	f53f af1f 	bmi.w	800a03c <_vfiprintf_r+0x44>
 800a1fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a200:	e71e      	b.n	800a040 <_vfiprintf_r+0x48>
 800a202:	ab03      	add	r3, sp, #12
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	462a      	mov	r2, r5
 800a208:	4b05      	ldr	r3, [pc, #20]	@ (800a220 <_vfiprintf_r+0x228>)
 800a20a:	a904      	add	r1, sp, #16
 800a20c:	4630      	mov	r0, r6
 800a20e:	f7fd fed7 	bl	8007fc0 <_printf_i>
 800a212:	e7e4      	b.n	800a1de <_vfiprintf_r+0x1e6>
 800a214:	0800a9c0 	.word	0x0800a9c0
 800a218:	0800a9ca 	.word	0x0800a9ca
 800a21c:	08007a91 	.word	0x08007a91
 800a220:	08009fd3 	.word	0x08009fd3
 800a224:	0800a9c6 	.word	0x0800a9c6

0800a228 <__sflush_r>:
 800a228:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a230:	0716      	lsls	r6, r2, #28
 800a232:	4605      	mov	r5, r0
 800a234:	460c      	mov	r4, r1
 800a236:	d454      	bmi.n	800a2e2 <__sflush_r+0xba>
 800a238:	684b      	ldr	r3, [r1, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	dc02      	bgt.n	800a244 <__sflush_r+0x1c>
 800a23e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a240:	2b00      	cmp	r3, #0
 800a242:	dd48      	ble.n	800a2d6 <__sflush_r+0xae>
 800a244:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a246:	2e00      	cmp	r6, #0
 800a248:	d045      	beq.n	800a2d6 <__sflush_r+0xae>
 800a24a:	2300      	movs	r3, #0
 800a24c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a250:	682f      	ldr	r7, [r5, #0]
 800a252:	6a21      	ldr	r1, [r4, #32]
 800a254:	602b      	str	r3, [r5, #0]
 800a256:	d030      	beq.n	800a2ba <__sflush_r+0x92>
 800a258:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a25a:	89a3      	ldrh	r3, [r4, #12]
 800a25c:	0759      	lsls	r1, r3, #29
 800a25e:	d505      	bpl.n	800a26c <__sflush_r+0x44>
 800a260:	6863      	ldr	r3, [r4, #4]
 800a262:	1ad2      	subs	r2, r2, r3
 800a264:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a266:	b10b      	cbz	r3, 800a26c <__sflush_r+0x44>
 800a268:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a26a:	1ad2      	subs	r2, r2, r3
 800a26c:	2300      	movs	r3, #0
 800a26e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a270:	6a21      	ldr	r1, [r4, #32]
 800a272:	4628      	mov	r0, r5
 800a274:	47b0      	blx	r6
 800a276:	1c43      	adds	r3, r0, #1
 800a278:	89a3      	ldrh	r3, [r4, #12]
 800a27a:	d106      	bne.n	800a28a <__sflush_r+0x62>
 800a27c:	6829      	ldr	r1, [r5, #0]
 800a27e:	291d      	cmp	r1, #29
 800a280:	d82b      	bhi.n	800a2da <__sflush_r+0xb2>
 800a282:	4a2a      	ldr	r2, [pc, #168]	@ (800a32c <__sflush_r+0x104>)
 800a284:	410a      	asrs	r2, r1
 800a286:	07d6      	lsls	r6, r2, #31
 800a288:	d427      	bmi.n	800a2da <__sflush_r+0xb2>
 800a28a:	2200      	movs	r2, #0
 800a28c:	6062      	str	r2, [r4, #4]
 800a28e:	04d9      	lsls	r1, r3, #19
 800a290:	6922      	ldr	r2, [r4, #16]
 800a292:	6022      	str	r2, [r4, #0]
 800a294:	d504      	bpl.n	800a2a0 <__sflush_r+0x78>
 800a296:	1c42      	adds	r2, r0, #1
 800a298:	d101      	bne.n	800a29e <__sflush_r+0x76>
 800a29a:	682b      	ldr	r3, [r5, #0]
 800a29c:	b903      	cbnz	r3, 800a2a0 <__sflush_r+0x78>
 800a29e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a2a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a2a2:	602f      	str	r7, [r5, #0]
 800a2a4:	b1b9      	cbz	r1, 800a2d6 <__sflush_r+0xae>
 800a2a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2aa:	4299      	cmp	r1, r3
 800a2ac:	d002      	beq.n	800a2b4 <__sflush_r+0x8c>
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	f7ff f89e 	bl	80093f0 <_free_r>
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2b8:	e00d      	b.n	800a2d6 <__sflush_r+0xae>
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	4628      	mov	r0, r5
 800a2be:	47b0      	blx	r6
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	1c50      	adds	r0, r2, #1
 800a2c4:	d1c9      	bne.n	800a25a <__sflush_r+0x32>
 800a2c6:	682b      	ldr	r3, [r5, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d0c6      	beq.n	800a25a <__sflush_r+0x32>
 800a2cc:	2b1d      	cmp	r3, #29
 800a2ce:	d001      	beq.n	800a2d4 <__sflush_r+0xac>
 800a2d0:	2b16      	cmp	r3, #22
 800a2d2:	d11e      	bne.n	800a312 <__sflush_r+0xea>
 800a2d4:	602f      	str	r7, [r5, #0]
 800a2d6:	2000      	movs	r0, #0
 800a2d8:	e022      	b.n	800a320 <__sflush_r+0xf8>
 800a2da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2de:	b21b      	sxth	r3, r3
 800a2e0:	e01b      	b.n	800a31a <__sflush_r+0xf2>
 800a2e2:	690f      	ldr	r7, [r1, #16]
 800a2e4:	2f00      	cmp	r7, #0
 800a2e6:	d0f6      	beq.n	800a2d6 <__sflush_r+0xae>
 800a2e8:	0793      	lsls	r3, r2, #30
 800a2ea:	680e      	ldr	r6, [r1, #0]
 800a2ec:	bf08      	it	eq
 800a2ee:	694b      	ldreq	r3, [r1, #20]
 800a2f0:	600f      	str	r7, [r1, #0]
 800a2f2:	bf18      	it	ne
 800a2f4:	2300      	movne	r3, #0
 800a2f6:	eba6 0807 	sub.w	r8, r6, r7
 800a2fa:	608b      	str	r3, [r1, #8]
 800a2fc:	f1b8 0f00 	cmp.w	r8, #0
 800a300:	dde9      	ble.n	800a2d6 <__sflush_r+0xae>
 800a302:	6a21      	ldr	r1, [r4, #32]
 800a304:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a306:	4643      	mov	r3, r8
 800a308:	463a      	mov	r2, r7
 800a30a:	4628      	mov	r0, r5
 800a30c:	47b0      	blx	r6
 800a30e:	2800      	cmp	r0, #0
 800a310:	dc08      	bgt.n	800a324 <__sflush_r+0xfc>
 800a312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a31a:	81a3      	strh	r3, [r4, #12]
 800a31c:	f04f 30ff 	mov.w	r0, #4294967295
 800a320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a324:	4407      	add	r7, r0
 800a326:	eba8 0800 	sub.w	r8, r8, r0
 800a32a:	e7e7      	b.n	800a2fc <__sflush_r+0xd4>
 800a32c:	dfbffffe 	.word	0xdfbffffe

0800a330 <_fflush_r>:
 800a330:	b538      	push	{r3, r4, r5, lr}
 800a332:	690b      	ldr	r3, [r1, #16]
 800a334:	4605      	mov	r5, r0
 800a336:	460c      	mov	r4, r1
 800a338:	b913      	cbnz	r3, 800a340 <_fflush_r+0x10>
 800a33a:	2500      	movs	r5, #0
 800a33c:	4628      	mov	r0, r5
 800a33e:	bd38      	pop	{r3, r4, r5, pc}
 800a340:	b118      	cbz	r0, 800a34a <_fflush_r+0x1a>
 800a342:	6a03      	ldr	r3, [r0, #32]
 800a344:	b90b      	cbnz	r3, 800a34a <_fflush_r+0x1a>
 800a346:	f7fd ffe7 	bl	8008318 <__sinit>
 800a34a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d0f3      	beq.n	800a33a <_fflush_r+0xa>
 800a352:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a354:	07d0      	lsls	r0, r2, #31
 800a356:	d404      	bmi.n	800a362 <_fflush_r+0x32>
 800a358:	0599      	lsls	r1, r3, #22
 800a35a:	d402      	bmi.n	800a362 <_fflush_r+0x32>
 800a35c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a35e:	f7fe f9f6 	bl	800874e <__retarget_lock_acquire_recursive>
 800a362:	4628      	mov	r0, r5
 800a364:	4621      	mov	r1, r4
 800a366:	f7ff ff5f 	bl	800a228 <__sflush_r>
 800a36a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a36c:	07da      	lsls	r2, r3, #31
 800a36e:	4605      	mov	r5, r0
 800a370:	d4e4      	bmi.n	800a33c <_fflush_r+0xc>
 800a372:	89a3      	ldrh	r3, [r4, #12]
 800a374:	059b      	lsls	r3, r3, #22
 800a376:	d4e1      	bmi.n	800a33c <_fflush_r+0xc>
 800a378:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a37a:	f7fe f9e9 	bl	8008750 <__retarget_lock_release_recursive>
 800a37e:	e7dd      	b.n	800a33c <_fflush_r+0xc>

0800a380 <__swhatbuf_r>:
 800a380:	b570      	push	{r4, r5, r6, lr}
 800a382:	460c      	mov	r4, r1
 800a384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a388:	2900      	cmp	r1, #0
 800a38a:	b096      	sub	sp, #88	@ 0x58
 800a38c:	4615      	mov	r5, r2
 800a38e:	461e      	mov	r6, r3
 800a390:	da0d      	bge.n	800a3ae <__swhatbuf_r+0x2e>
 800a392:	89a3      	ldrh	r3, [r4, #12]
 800a394:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a398:	f04f 0100 	mov.w	r1, #0
 800a39c:	bf14      	ite	ne
 800a39e:	2340      	movne	r3, #64	@ 0x40
 800a3a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a3a4:	2000      	movs	r0, #0
 800a3a6:	6031      	str	r1, [r6, #0]
 800a3a8:	602b      	str	r3, [r5, #0]
 800a3aa:	b016      	add	sp, #88	@ 0x58
 800a3ac:	bd70      	pop	{r4, r5, r6, pc}
 800a3ae:	466a      	mov	r2, sp
 800a3b0:	f000 f862 	bl	800a478 <_fstat_r>
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	dbec      	blt.n	800a392 <__swhatbuf_r+0x12>
 800a3b8:	9901      	ldr	r1, [sp, #4]
 800a3ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a3be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a3c2:	4259      	negs	r1, r3
 800a3c4:	4159      	adcs	r1, r3
 800a3c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3ca:	e7eb      	b.n	800a3a4 <__swhatbuf_r+0x24>

0800a3cc <__smakebuf_r>:
 800a3cc:	898b      	ldrh	r3, [r1, #12]
 800a3ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3d0:	079d      	lsls	r5, r3, #30
 800a3d2:	4606      	mov	r6, r0
 800a3d4:	460c      	mov	r4, r1
 800a3d6:	d507      	bpl.n	800a3e8 <__smakebuf_r+0x1c>
 800a3d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a3dc:	6023      	str	r3, [r4, #0]
 800a3de:	6123      	str	r3, [r4, #16]
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	6163      	str	r3, [r4, #20]
 800a3e4:	b003      	add	sp, #12
 800a3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3e8:	ab01      	add	r3, sp, #4
 800a3ea:	466a      	mov	r2, sp
 800a3ec:	f7ff ffc8 	bl	800a380 <__swhatbuf_r>
 800a3f0:	9f00      	ldr	r7, [sp, #0]
 800a3f2:	4605      	mov	r5, r0
 800a3f4:	4639      	mov	r1, r7
 800a3f6:	4630      	mov	r0, r6
 800a3f8:	f7ff f86e 	bl	80094d8 <_malloc_r>
 800a3fc:	b948      	cbnz	r0, 800a412 <__smakebuf_r+0x46>
 800a3fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a402:	059a      	lsls	r2, r3, #22
 800a404:	d4ee      	bmi.n	800a3e4 <__smakebuf_r+0x18>
 800a406:	f023 0303 	bic.w	r3, r3, #3
 800a40a:	f043 0302 	orr.w	r3, r3, #2
 800a40e:	81a3      	strh	r3, [r4, #12]
 800a410:	e7e2      	b.n	800a3d8 <__smakebuf_r+0xc>
 800a412:	89a3      	ldrh	r3, [r4, #12]
 800a414:	6020      	str	r0, [r4, #0]
 800a416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a41a:	81a3      	strh	r3, [r4, #12]
 800a41c:	9b01      	ldr	r3, [sp, #4]
 800a41e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a422:	b15b      	cbz	r3, 800a43c <__smakebuf_r+0x70>
 800a424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a428:	4630      	mov	r0, r6
 800a42a:	f000 f837 	bl	800a49c <_isatty_r>
 800a42e:	b128      	cbz	r0, 800a43c <__smakebuf_r+0x70>
 800a430:	89a3      	ldrh	r3, [r4, #12]
 800a432:	f023 0303 	bic.w	r3, r3, #3
 800a436:	f043 0301 	orr.w	r3, r3, #1
 800a43a:	81a3      	strh	r3, [r4, #12]
 800a43c:	89a3      	ldrh	r3, [r4, #12]
 800a43e:	431d      	orrs	r5, r3
 800a440:	81a5      	strh	r5, [r4, #12]
 800a442:	e7cf      	b.n	800a3e4 <__smakebuf_r+0x18>

0800a444 <memmove>:
 800a444:	4288      	cmp	r0, r1
 800a446:	b510      	push	{r4, lr}
 800a448:	eb01 0402 	add.w	r4, r1, r2
 800a44c:	d902      	bls.n	800a454 <memmove+0x10>
 800a44e:	4284      	cmp	r4, r0
 800a450:	4623      	mov	r3, r4
 800a452:	d807      	bhi.n	800a464 <memmove+0x20>
 800a454:	1e43      	subs	r3, r0, #1
 800a456:	42a1      	cmp	r1, r4
 800a458:	d008      	beq.n	800a46c <memmove+0x28>
 800a45a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a45e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a462:	e7f8      	b.n	800a456 <memmove+0x12>
 800a464:	4402      	add	r2, r0
 800a466:	4601      	mov	r1, r0
 800a468:	428a      	cmp	r2, r1
 800a46a:	d100      	bne.n	800a46e <memmove+0x2a>
 800a46c:	bd10      	pop	{r4, pc}
 800a46e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a472:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a476:	e7f7      	b.n	800a468 <memmove+0x24>

0800a478 <_fstat_r>:
 800a478:	b538      	push	{r3, r4, r5, lr}
 800a47a:	4d07      	ldr	r5, [pc, #28]	@ (800a498 <_fstat_r+0x20>)
 800a47c:	2300      	movs	r3, #0
 800a47e:	4604      	mov	r4, r0
 800a480:	4608      	mov	r0, r1
 800a482:	4611      	mov	r1, r2
 800a484:	602b      	str	r3, [r5, #0]
 800a486:	f7f7 facf 	bl	8001a28 <_fstat>
 800a48a:	1c43      	adds	r3, r0, #1
 800a48c:	d102      	bne.n	800a494 <_fstat_r+0x1c>
 800a48e:	682b      	ldr	r3, [r5, #0]
 800a490:	b103      	cbz	r3, 800a494 <_fstat_r+0x1c>
 800a492:	6023      	str	r3, [r4, #0]
 800a494:	bd38      	pop	{r3, r4, r5, pc}
 800a496:	bf00      	nop
 800a498:	200006bc 	.word	0x200006bc

0800a49c <_isatty_r>:
 800a49c:	b538      	push	{r3, r4, r5, lr}
 800a49e:	4d06      	ldr	r5, [pc, #24]	@ (800a4b8 <_isatty_r+0x1c>)
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	4608      	mov	r0, r1
 800a4a6:	602b      	str	r3, [r5, #0]
 800a4a8:	f7f7 face 	bl	8001a48 <_isatty>
 800a4ac:	1c43      	adds	r3, r0, #1
 800a4ae:	d102      	bne.n	800a4b6 <_isatty_r+0x1a>
 800a4b0:	682b      	ldr	r3, [r5, #0]
 800a4b2:	b103      	cbz	r3, 800a4b6 <_isatty_r+0x1a>
 800a4b4:	6023      	str	r3, [r4, #0]
 800a4b6:	bd38      	pop	{r3, r4, r5, pc}
 800a4b8:	200006bc 	.word	0x200006bc

0800a4bc <_sbrk_r>:
 800a4bc:	b538      	push	{r3, r4, r5, lr}
 800a4be:	4d06      	ldr	r5, [pc, #24]	@ (800a4d8 <_sbrk_r+0x1c>)
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	4604      	mov	r4, r0
 800a4c4:	4608      	mov	r0, r1
 800a4c6:	602b      	str	r3, [r5, #0]
 800a4c8:	f7f7 fad6 	bl	8001a78 <_sbrk>
 800a4cc:	1c43      	adds	r3, r0, #1
 800a4ce:	d102      	bne.n	800a4d6 <_sbrk_r+0x1a>
 800a4d0:	682b      	ldr	r3, [r5, #0]
 800a4d2:	b103      	cbz	r3, 800a4d6 <_sbrk_r+0x1a>
 800a4d4:	6023      	str	r3, [r4, #0]
 800a4d6:	bd38      	pop	{r3, r4, r5, pc}
 800a4d8:	200006bc 	.word	0x200006bc

0800a4dc <memcpy>:
 800a4dc:	440a      	add	r2, r1
 800a4de:	4291      	cmp	r1, r2
 800a4e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4e4:	d100      	bne.n	800a4e8 <memcpy+0xc>
 800a4e6:	4770      	bx	lr
 800a4e8:	b510      	push	{r4, lr}
 800a4ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4f2:	4291      	cmp	r1, r2
 800a4f4:	d1f9      	bne.n	800a4ea <memcpy+0xe>
 800a4f6:	bd10      	pop	{r4, pc}

0800a4f8 <__assert_func>:
 800a4f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4fa:	4614      	mov	r4, r2
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	4b09      	ldr	r3, [pc, #36]	@ (800a524 <__assert_func+0x2c>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4605      	mov	r5, r0
 800a504:	68d8      	ldr	r0, [r3, #12]
 800a506:	b954      	cbnz	r4, 800a51e <__assert_func+0x26>
 800a508:	4b07      	ldr	r3, [pc, #28]	@ (800a528 <__assert_func+0x30>)
 800a50a:	461c      	mov	r4, r3
 800a50c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a510:	9100      	str	r1, [sp, #0]
 800a512:	462b      	mov	r3, r5
 800a514:	4905      	ldr	r1, [pc, #20]	@ (800a52c <__assert_func+0x34>)
 800a516:	f000 f86f 	bl	800a5f8 <fiprintf>
 800a51a:	f000 f87f 	bl	800a61c <abort>
 800a51e:	4b04      	ldr	r3, [pc, #16]	@ (800a530 <__assert_func+0x38>)
 800a520:	e7f4      	b.n	800a50c <__assert_func+0x14>
 800a522:	bf00      	nop
 800a524:	20000018 	.word	0x20000018
 800a528:	0800aa16 	.word	0x0800aa16
 800a52c:	0800a9e8 	.word	0x0800a9e8
 800a530:	0800a9db 	.word	0x0800a9db

0800a534 <_calloc_r>:
 800a534:	b570      	push	{r4, r5, r6, lr}
 800a536:	fba1 5402 	umull	r5, r4, r1, r2
 800a53a:	b93c      	cbnz	r4, 800a54c <_calloc_r+0x18>
 800a53c:	4629      	mov	r1, r5
 800a53e:	f7fe ffcb 	bl	80094d8 <_malloc_r>
 800a542:	4606      	mov	r6, r0
 800a544:	b928      	cbnz	r0, 800a552 <_calloc_r+0x1e>
 800a546:	2600      	movs	r6, #0
 800a548:	4630      	mov	r0, r6
 800a54a:	bd70      	pop	{r4, r5, r6, pc}
 800a54c:	220c      	movs	r2, #12
 800a54e:	6002      	str	r2, [r0, #0]
 800a550:	e7f9      	b.n	800a546 <_calloc_r+0x12>
 800a552:	462a      	mov	r2, r5
 800a554:	4621      	mov	r1, r4
 800a556:	f7fe f87d 	bl	8008654 <memset>
 800a55a:	e7f5      	b.n	800a548 <_calloc_r+0x14>

0800a55c <__ascii_mbtowc>:
 800a55c:	b082      	sub	sp, #8
 800a55e:	b901      	cbnz	r1, 800a562 <__ascii_mbtowc+0x6>
 800a560:	a901      	add	r1, sp, #4
 800a562:	b142      	cbz	r2, 800a576 <__ascii_mbtowc+0x1a>
 800a564:	b14b      	cbz	r3, 800a57a <__ascii_mbtowc+0x1e>
 800a566:	7813      	ldrb	r3, [r2, #0]
 800a568:	600b      	str	r3, [r1, #0]
 800a56a:	7812      	ldrb	r2, [r2, #0]
 800a56c:	1e10      	subs	r0, r2, #0
 800a56e:	bf18      	it	ne
 800a570:	2001      	movne	r0, #1
 800a572:	b002      	add	sp, #8
 800a574:	4770      	bx	lr
 800a576:	4610      	mov	r0, r2
 800a578:	e7fb      	b.n	800a572 <__ascii_mbtowc+0x16>
 800a57a:	f06f 0001 	mvn.w	r0, #1
 800a57e:	e7f8      	b.n	800a572 <__ascii_mbtowc+0x16>

0800a580 <_realloc_r>:
 800a580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a584:	4680      	mov	r8, r0
 800a586:	4615      	mov	r5, r2
 800a588:	460c      	mov	r4, r1
 800a58a:	b921      	cbnz	r1, 800a596 <_realloc_r+0x16>
 800a58c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a590:	4611      	mov	r1, r2
 800a592:	f7fe bfa1 	b.w	80094d8 <_malloc_r>
 800a596:	b92a      	cbnz	r2, 800a5a4 <_realloc_r+0x24>
 800a598:	f7fe ff2a 	bl	80093f0 <_free_r>
 800a59c:	2400      	movs	r4, #0
 800a59e:	4620      	mov	r0, r4
 800a5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a4:	f000 f841 	bl	800a62a <_malloc_usable_size_r>
 800a5a8:	4285      	cmp	r5, r0
 800a5aa:	4606      	mov	r6, r0
 800a5ac:	d802      	bhi.n	800a5b4 <_realloc_r+0x34>
 800a5ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a5b2:	d8f4      	bhi.n	800a59e <_realloc_r+0x1e>
 800a5b4:	4629      	mov	r1, r5
 800a5b6:	4640      	mov	r0, r8
 800a5b8:	f7fe ff8e 	bl	80094d8 <_malloc_r>
 800a5bc:	4607      	mov	r7, r0
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d0ec      	beq.n	800a59c <_realloc_r+0x1c>
 800a5c2:	42b5      	cmp	r5, r6
 800a5c4:	462a      	mov	r2, r5
 800a5c6:	4621      	mov	r1, r4
 800a5c8:	bf28      	it	cs
 800a5ca:	4632      	movcs	r2, r6
 800a5cc:	f7ff ff86 	bl	800a4dc <memcpy>
 800a5d0:	4621      	mov	r1, r4
 800a5d2:	4640      	mov	r0, r8
 800a5d4:	f7fe ff0c 	bl	80093f0 <_free_r>
 800a5d8:	463c      	mov	r4, r7
 800a5da:	e7e0      	b.n	800a59e <_realloc_r+0x1e>

0800a5dc <__ascii_wctomb>:
 800a5dc:	4603      	mov	r3, r0
 800a5de:	4608      	mov	r0, r1
 800a5e0:	b141      	cbz	r1, 800a5f4 <__ascii_wctomb+0x18>
 800a5e2:	2aff      	cmp	r2, #255	@ 0xff
 800a5e4:	d904      	bls.n	800a5f0 <__ascii_wctomb+0x14>
 800a5e6:	228a      	movs	r2, #138	@ 0x8a
 800a5e8:	601a      	str	r2, [r3, #0]
 800a5ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ee:	4770      	bx	lr
 800a5f0:	700a      	strb	r2, [r1, #0]
 800a5f2:	2001      	movs	r0, #1
 800a5f4:	4770      	bx	lr
	...

0800a5f8 <fiprintf>:
 800a5f8:	b40e      	push	{r1, r2, r3}
 800a5fa:	b503      	push	{r0, r1, lr}
 800a5fc:	4601      	mov	r1, r0
 800a5fe:	ab03      	add	r3, sp, #12
 800a600:	4805      	ldr	r0, [pc, #20]	@ (800a618 <fiprintf+0x20>)
 800a602:	f853 2b04 	ldr.w	r2, [r3], #4
 800a606:	6800      	ldr	r0, [r0, #0]
 800a608:	9301      	str	r3, [sp, #4]
 800a60a:	f7ff fcf5 	bl	8009ff8 <_vfiprintf_r>
 800a60e:	b002      	add	sp, #8
 800a610:	f85d eb04 	ldr.w	lr, [sp], #4
 800a614:	b003      	add	sp, #12
 800a616:	4770      	bx	lr
 800a618:	20000018 	.word	0x20000018

0800a61c <abort>:
 800a61c:	b508      	push	{r3, lr}
 800a61e:	2006      	movs	r0, #6
 800a620:	f000 f834 	bl	800a68c <raise>
 800a624:	2001      	movs	r0, #1
 800a626:	f7f7 f9af 	bl	8001988 <_exit>

0800a62a <_malloc_usable_size_r>:
 800a62a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a62e:	1f18      	subs	r0, r3, #4
 800a630:	2b00      	cmp	r3, #0
 800a632:	bfbc      	itt	lt
 800a634:	580b      	ldrlt	r3, [r1, r0]
 800a636:	18c0      	addlt	r0, r0, r3
 800a638:	4770      	bx	lr

0800a63a <_raise_r>:
 800a63a:	291f      	cmp	r1, #31
 800a63c:	b538      	push	{r3, r4, r5, lr}
 800a63e:	4605      	mov	r5, r0
 800a640:	460c      	mov	r4, r1
 800a642:	d904      	bls.n	800a64e <_raise_r+0x14>
 800a644:	2316      	movs	r3, #22
 800a646:	6003      	str	r3, [r0, #0]
 800a648:	f04f 30ff 	mov.w	r0, #4294967295
 800a64c:	bd38      	pop	{r3, r4, r5, pc}
 800a64e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a650:	b112      	cbz	r2, 800a658 <_raise_r+0x1e>
 800a652:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a656:	b94b      	cbnz	r3, 800a66c <_raise_r+0x32>
 800a658:	4628      	mov	r0, r5
 800a65a:	f000 f831 	bl	800a6c0 <_getpid_r>
 800a65e:	4622      	mov	r2, r4
 800a660:	4601      	mov	r1, r0
 800a662:	4628      	mov	r0, r5
 800a664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a668:	f000 b818 	b.w	800a69c <_kill_r>
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d00a      	beq.n	800a686 <_raise_r+0x4c>
 800a670:	1c59      	adds	r1, r3, #1
 800a672:	d103      	bne.n	800a67c <_raise_r+0x42>
 800a674:	2316      	movs	r3, #22
 800a676:	6003      	str	r3, [r0, #0]
 800a678:	2001      	movs	r0, #1
 800a67a:	e7e7      	b.n	800a64c <_raise_r+0x12>
 800a67c:	2100      	movs	r1, #0
 800a67e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a682:	4620      	mov	r0, r4
 800a684:	4798      	blx	r3
 800a686:	2000      	movs	r0, #0
 800a688:	e7e0      	b.n	800a64c <_raise_r+0x12>
	...

0800a68c <raise>:
 800a68c:	4b02      	ldr	r3, [pc, #8]	@ (800a698 <raise+0xc>)
 800a68e:	4601      	mov	r1, r0
 800a690:	6818      	ldr	r0, [r3, #0]
 800a692:	f7ff bfd2 	b.w	800a63a <_raise_r>
 800a696:	bf00      	nop
 800a698:	20000018 	.word	0x20000018

0800a69c <_kill_r>:
 800a69c:	b538      	push	{r3, r4, r5, lr}
 800a69e:	4d07      	ldr	r5, [pc, #28]	@ (800a6bc <_kill_r+0x20>)
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	4604      	mov	r4, r0
 800a6a4:	4608      	mov	r0, r1
 800a6a6:	4611      	mov	r1, r2
 800a6a8:	602b      	str	r3, [r5, #0]
 800a6aa:	f7f7 f95d 	bl	8001968 <_kill>
 800a6ae:	1c43      	adds	r3, r0, #1
 800a6b0:	d102      	bne.n	800a6b8 <_kill_r+0x1c>
 800a6b2:	682b      	ldr	r3, [r5, #0]
 800a6b4:	b103      	cbz	r3, 800a6b8 <_kill_r+0x1c>
 800a6b6:	6023      	str	r3, [r4, #0]
 800a6b8:	bd38      	pop	{r3, r4, r5, pc}
 800a6ba:	bf00      	nop
 800a6bc:	200006bc 	.word	0x200006bc

0800a6c0 <_getpid_r>:
 800a6c0:	f7f7 b94a 	b.w	8001958 <_getpid>

0800a6c4 <_init>:
 800a6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c6:	bf00      	nop
 800a6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ca:	bc08      	pop	{r3}
 800a6cc:	469e      	mov	lr, r3
 800a6ce:	4770      	bx	lr

0800a6d0 <_fini>:
 800a6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d2:	bf00      	nop
 800a6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6d6:	bc08      	pop	{r3}
 800a6d8:	469e      	mov	lr, r3
 800a6da:	4770      	bx	lr
