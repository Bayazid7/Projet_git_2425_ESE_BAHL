
SOFWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9ec  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  0800bbd0  0800bbd0  0000cbd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c010  0800c010  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c010  0800c010  0000d010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c018  0800c018  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c018  0800c018  0000d018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c01c  0800c01c  0000d01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c020  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012a4  200001d8  0800c1f8  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000147c  0800c1f8  0000e47c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002278a  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b90  00000000  00000000  00030992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e38  00000000  00000000  00035528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000176b  00000000  00000000  00037360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000655a  00000000  00000000  00038acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025233  00000000  00000000  0003f025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e90ba  00000000  00000000  00064258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d312  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ff0  00000000  00000000  0014d358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00156348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bbb4 	.word	0x0800bbb4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800bbb4 	.word	0x0800bbb4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <Moteur_init>:
#include "MoteurPWM.h"
#include <stdlib.h>

void Moteur_init(Moteur_HandleTypeDef* moteur, TIM_HandleTypeDef* timer, uint32_t channel)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
    moteur->pwm_timer = timer;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	601a      	str	r2, [r3, #0]
    moteur->channel = channel;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	605a      	str	r2, [r3, #4]
    moteur->direction = MOTEUR_STOP;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2253      	movs	r2, #83	@ 0x53
 8000fa4:	721a      	strb	r2, [r3, #8]
    moteur->speed = 0;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
    moteur->theta = 0;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
    moteur->vitesse = 0;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	615a      	str	r2, [r3, #20]
    moteur->omega = 0;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
    moteur->moteur_droite = NULL;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
    moteur->moteur_gauche = NULL;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <Moteur_setSpeed>:

void Moteur_setSpeed(Moteur_HandleTypeDef* moteur, int speed)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
    int vitesse = (int)(speed * 4250 / 290);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	f241 029a 	movw	r2, #4250	@ 0x109a
 8000fec:	fb02 f303 	mul.w	r3, r2, r3
 8000ff0:	4a56      	ldr	r2, [pc, #344]	@ (800114c <Moteur_setSpeed+0x170>)
 8000ff2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff6:	441a      	add	r2, r3
 8000ff8:	1212      	asrs	r2, r2, #8
 8000ffa:	17db      	asrs	r3, r3, #31
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	60fb      	str	r3, [r7, #12]
    moteur->speed = speed;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	60da      	str	r2, [r3, #12]

    if (speed >= 0)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db3b      	blt.n	8001084 <Moteur_setSpeed+0xa8>
    {
        Moteur_setDirection(moteur, MOTEUR_AVANCER);
 800100c:	2141      	movs	r1, #65	@ 0x41
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f89e 	bl	8001150 <Moteur_setDirection>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, vitesse);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d105      	bne.n	8001028 <Moteur_setSpeed+0x4c>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	635a      	str	r2, [r3, #52]	@ 0x34
    else
    {
        Moteur_setDirection(moteur, MOTEUR_RECULER);
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, 8500-abs(vitesse));
    }
}
 8001026:	e08d      	b.n	8001144 <Moteur_setSpeed+0x168>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, vitesse);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b04      	cmp	r3, #4
 800102e:	d105      	bne.n	800103c <Moteur_setSpeed+0x60>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6393      	str	r3, [r2, #56]	@ 0x38
 800103a:	e083      	b.n	8001144 <Moteur_setSpeed+0x168>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b08      	cmp	r3, #8
 8001042:	d105      	bne.n	8001050 <Moteur_setSpeed+0x74>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800104e:	e079      	b.n	8001144 <Moteur_setSpeed+0x168>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b0c      	cmp	r3, #12
 8001056:	d105      	bne.n	8001064 <Moteur_setSpeed+0x88>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6413      	str	r3, [r2, #64]	@ 0x40
 8001062:	e06f      	b.n	8001144 <Moteur_setSpeed+0x168>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b10      	cmp	r3, #16
 800106a:	d105      	bne.n	8001078 <Moteur_setSpeed+0x9c>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6493      	str	r3, [r2, #72]	@ 0x48
 8001076:	e065      	b.n	8001144 <Moteur_setSpeed+0x168>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001082:	e05f      	b.n	8001144 <Moteur_setSpeed+0x168>
        Moteur_setDirection(moteur, MOTEUR_RECULER);
 8001084:	2152      	movs	r1, #82	@ 0x52
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 f862 	bl	8001150 <Moteur_setDirection>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, 8500-abs(vitesse));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10b      	bne.n	80010ac <Moteur_setSpeed+0xd0>
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	bfb8      	it	lt
 800109a:	425b      	neglt	r3, r3
 800109c:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 80010a0:	3334      	adds	r3, #52	@ 0x34
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	6812      	ldr	r2, [r2, #0]
 80010a6:	6812      	ldr	r2, [r2, #0]
 80010a8:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80010aa:	e04b      	b.n	8001144 <Moteur_setSpeed+0x168>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, 8500-abs(vitesse));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d10b      	bne.n	80010cc <Moteur_setSpeed+0xf0>
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	bfb8      	it	lt
 80010ba:	425b      	neglt	r3, r3
 80010bc:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 80010c0:	3334      	adds	r3, #52	@ 0x34
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	6812      	ldr	r2, [r2, #0]
 80010c6:	6812      	ldr	r2, [r2, #0]
 80010c8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80010ca:	e03b      	b.n	8001144 <Moteur_setSpeed+0x168>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, 8500-abs(vitesse));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b08      	cmp	r3, #8
 80010d2:	d10b      	bne.n	80010ec <Moteur_setSpeed+0x110>
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	bfb8      	it	lt
 80010da:	425b      	neglt	r3, r3
 80010dc:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 80010e0:	3334      	adds	r3, #52	@ 0x34
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	6812      	ldr	r2, [r2, #0]
 80010e6:	6812      	ldr	r2, [r2, #0]
 80010e8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80010ea:	e02b      	b.n	8001144 <Moteur_setSpeed+0x168>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, 8500-abs(vitesse));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b0c      	cmp	r3, #12
 80010f2:	d10b      	bne.n	800110c <Moteur_setSpeed+0x130>
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	bfb8      	it	lt
 80010fa:	425b      	neglt	r3, r3
 80010fc:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 8001100:	3334      	adds	r3, #52	@ 0x34
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	6812      	ldr	r2, [r2, #0]
 8001108:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800110a:	e01b      	b.n	8001144 <Moteur_setSpeed+0x168>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, 8500-abs(vitesse));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b10      	cmp	r3, #16
 8001112:	d10b      	bne.n	800112c <Moteur_setSpeed+0x150>
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	bfb8      	it	lt
 800111a:	425b      	neglt	r3, r3
 800111c:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 8001120:	3334      	adds	r3, #52	@ 0x34
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	6812      	ldr	r2, [r2, #0]
 8001126:	6812      	ldr	r2, [r2, #0]
 8001128:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800112a:	e00b      	b.n	8001144 <Moteur_setSpeed+0x168>
        __HAL_TIM_SET_COMPARE(moteur->pwm_timer, moteur->channel, 8500-abs(vitesse));
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	bfb8      	it	lt
 8001132:	425b      	neglt	r3, r3
 8001134:	f5c3 5304 	rsb	r3, r3, #8448	@ 0x2100
 8001138:	3334      	adds	r3, #52	@ 0x34
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	6812      	ldr	r2, [r2, #0]
 800113e:	6812      	ldr	r2, [r2, #0]
 8001140:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001142:	e7ff      	b.n	8001144 <Moteur_setSpeed+0x168>
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	e1fc780f 	.word	0xe1fc780f

08001150 <Moteur_setDirection>:

void Moteur_setDirection(Moteur_HandleTypeDef* moteur, char direction)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
    moteur->direction = direction;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	78fa      	ldrb	r2, [r7, #3]
 8001160:	721a      	strb	r2, [r3, #8]

    switch (direction)
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	2b41      	cmp	r3, #65	@ 0x41
 8001166:	d002      	beq.n	800116e <Moteur_setDirection+0x1e>
 8001168:	2b52      	cmp	r3, #82	@ 0x52
 800116a:	d011      	beq.n	8001190 <Moteur_setDirection+0x40>
 800116c:	e021      	b.n	80011b2 <Moteur_setDirection+0x62>
    {
        case MOTEUR_AVANCER:
            HAL_TIM_PWM_Start(moteur->pwm_timer, moteur->channel);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4619      	mov	r1, r3
 8001178:	4610      	mov	r0, r2
 800117a:	f004 f8bd 	bl	80052f8 <HAL_TIM_PWM_Start>
            HAL_TIMEx_PWMN_Stop(moteur->pwm_timer, moteur->channel);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	4619      	mov	r1, r3
 8001188:	4610      	mov	r0, r2
 800118a:	f005 f9e9 	bl	8006560 <HAL_TIMEx_PWMN_Stop>
            break;
 800118e:	e021      	b.n	80011d4 <Moteur_setDirection+0x84>

        case MOTEUR_RECULER:
            HAL_TIMEx_PWMN_Start(moteur->pwm_timer, moteur->channel);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4619      	mov	r1, r3
 800119a:	4610      	mov	r0, r2
 800119c:	f005 f92c 	bl	80063f8 <HAL_TIMEx_PWMN_Start>
            HAL_TIM_PWM_Stop(moteur->pwm_timer, moteur->channel);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4619      	mov	r1, r3
 80011aa:	4610      	mov	r0, r2
 80011ac:	f004 f9a4 	bl	80054f8 <HAL_TIM_PWM_Stop>
            break;
 80011b0:	e010      	b.n	80011d4 <Moteur_setDirection+0x84>

        case MOTEUR_STOP:
        default:
            HAL_TIM_PWM_Stop(moteur->pwm_timer, moteur->channel);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	4619      	mov	r1, r3
 80011bc:	4610      	mov	r0, r2
 80011be:	f004 f99b 	bl	80054f8 <HAL_TIM_PWM_Stop>
            HAL_TIMEx_PWMN_Stop(moteur->pwm_timer, moteur->channel);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	4619      	mov	r1, r3
 80011cc:	4610      	mov	r0, r2
 80011ce:	f005 f9c7 	bl	8006560 <HAL_TIMEx_PWMN_Stop>
            break;
 80011d2:	bf00      	nop
    }
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <Moteur_start>:

void Moteur_start(Moteur_HandleTypeDef* moteur)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    Moteur_setDirection(moteur, MOTEUR_AVANCER);
 80011e4:	2141      	movs	r1, #65	@ 0x41
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffb2 	bl	8001150 <Moteur_setDirection>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <Moteur_stop>:

void Moteur_stop(Moteur_HandleTypeDef* moteur)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    Moteur_setDirection(moteur, MOTEUR_STOP);
 80011fc:	2153      	movs	r1, #83	@ 0x53
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ffa6 	bl	8001150 <Moteur_setDirection>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	0000      	movs	r0, r0
	...

08001210 <Robot_setAngle>:

void Robot_setAngle(Moteur_HandleTypeDef* robot, float angle)
{
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	ed87 0a00 	vstr	s0, [r7]
    //  Rotation pour atteindre l'angle spécifié
    robot->omega = (2.0 / Ts) * (angle - robot->theta) + robot->omega;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001222:	ed97 7a00 	vldr	s14, [r7]
 8001226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122a:	ee17 0a90 	vmov	r0, s15
 800122e:	f7ff f9b3 	bl	8000598 <__aeabi_f2d>
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	4b68      	ldr	r3, [pc, #416]	@ (80013d8 <Robot_setAngle+0x1c8>)
 8001238:	f7ff fa06 	bl	8000648 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4614      	mov	r4, r2
 8001242:	461d      	mov	r5, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f9a5 	bl	8000598 <__aeabi_f2d>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4620      	mov	r0, r4
 8001254:	4629      	mov	r1, r5
 8001256:	f7ff f841 	bl	80002dc <__adddf3>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f7ff fcc9 	bl	8000bf8 <__aeabi_d2f>
 8001266:	4602      	mov	r2, r0
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	619a      	str	r2, [r3, #24]
    robot->moteur_droite->vitesse = robot->omega * L / 2.0;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f991 	bl	8000598 <__aeabi_f2d>
 8001276:	a356      	add	r3, pc, #344	@ (adr r3, 80013d0 <Robot_setAngle+0x1c0>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff f9e4 	bl	8000648 <__aeabi_dmul>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001290:	f7ff fb04 	bl	800089c <__aeabi_ddiv>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4610      	mov	r0, r2
 800129a:	4619      	mov	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69dc      	ldr	r4, [r3, #28]
 80012a0:	f7ff fcaa 	bl	8000bf8 <__aeabi_d2f>
 80012a4:	4603      	mov	r3, r0
 80012a6:	6163      	str	r3, [r4, #20]
    robot->moteur_gauche->vitesse = -robot->omega * L / 2.0;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	edd3 7a06 	vldr	s15, [r3, #24]
 80012ae:	eef1 7a67 	vneg.f32	s15, s15
 80012b2:	ee17 3a90 	vmov	r3, s15
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f96e 	bl	8000598 <__aeabi_f2d>
 80012bc:	a344      	add	r3, pc, #272	@ (adr r3, 80013d0 <Robot_setAngle+0x1c0>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f7ff f9c1 	bl	8000648 <__aeabi_dmul>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012d6:	f7ff fae1 	bl	800089c <__aeabi_ddiv>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a1c      	ldr	r4, [r3, #32]
 80012e6:	f7ff fc87 	bl	8000bf8 <__aeabi_d2f>
 80012ea:	4603      	mov	r3, r0
 80012ec:	6163      	str	r3, [r4, #20]

    // Limiter les vitesses des moteurs pendant la rotation
    if (robot->moteur_droite->vitesse > 290) robot->moteur_droite->vitesse = 290;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80012f6:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80013dc <Robot_setAngle+0x1cc>
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <Robot_setAngle+0xfc>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	4a35      	ldr	r2, [pc, #212]	@ (80013e0 <Robot_setAngle+0x1d0>)
 800130a:	615a      	str	r2, [r3, #20]
    if (robot->moteur_droite->vitesse < -290) robot->moteur_droite->vitesse = -290;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	edd3 7a05 	vldr	s15, [r3, #20]
 8001314:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80013e4 <Robot_setAngle+0x1d4>
 8001318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800131c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001320:	d503      	bpl.n	800132a <Robot_setAngle+0x11a>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a30      	ldr	r2, [pc, #192]	@ (80013e8 <Robot_setAngle+0x1d8>)
 8001328:	615a      	str	r2, [r3, #20]
    if (robot->moteur_gauche->vitesse > 290) robot->moteur_gauche->vitesse = 290;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001332:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80013dc <Robot_setAngle+0x1cc>
 8001336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133e:	dd03      	ble.n	8001348 <Robot_setAngle+0x138>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4a26      	ldr	r2, [pc, #152]	@ (80013e0 <Robot_setAngle+0x1d0>)
 8001346:	615a      	str	r2, [r3, #20]
    if (robot->moteur_gauche->vitesse < -290) robot->moteur_gauche->vitesse = -290;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001350:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80013e4 <Robot_setAngle+0x1d4>
 8001354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135c:	d503      	bpl.n	8001366 <Robot_setAngle+0x156>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	4a21      	ldr	r2, [pc, #132]	@ (80013e8 <Robot_setAngle+0x1d8>)
 8001364:	615a      	str	r2, [r3, #20]

    // Appliquer les vitesses des moteurs pour la rotation
    Moteur_setSpeed(robot->moteur_droite, (int)robot->moteur_droite->vitesse);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69da      	ldr	r2, [r3, #28]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001376:	ee17 1a90 	vmov	r1, s15
 800137a:	4610      	mov	r0, r2
 800137c:	f7ff fe2e 	bl	8000fdc <Moteur_setSpeed>
    Moteur_setSpeed(robot->moteur_gauche, (int)robot->moteur_gauche->vitesse);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a1a      	ldr	r2, [r3, #32]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	edd3 7a05 	vldr	s15, [r3, #20]
 800138c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001390:	ee17 1a90 	vmov	r1, s15
 8001394:	4610      	mov	r0, r2
 8001396:	f7ff fe21 	bl	8000fdc <Moteur_setSpeed>

    // Attendre que l'angle soit atteint
    HAL_Delay(500);
 800139a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800139e:	f001 f9d5 	bl	800274c <HAL_Delay>

    // Mettre à jour l'angle courant
    robot->theta = angle;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	611a      	str	r2, [r3, #16]

    //  Avancer en ligne droite
    robot->omega = 0;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]

    // Appliquer les vitesses des moteurs pour avancer
    Moteur_setSpeed(robot->moteur_droite, 120);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	2178      	movs	r1, #120	@ 0x78
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fe10 	bl	8000fdc <Moteur_setSpeed>
    Moteur_setSpeed(robot->moteur_gauche, 80);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	2150      	movs	r1, #80	@ 0x50
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fe0a 	bl	8000fdc <Moteur_setSpeed>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bdb0      	pop	{r4, r5, r7, pc}
 80013d0:	9999999a 	.word	0x9999999a
 80013d4:	3fc99999 	.word	0x3fc99999
 80013d8:	40690000 	.word	0x40690000
 80013dc:	43910000 	.word	0x43910000
 80013e0:	43910000 	.word	0x43910000
 80013e4:	c3910000 	.word	0xc3910000
 80013e8:	c3910000 	.word	0xc3910000

080013ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08c      	sub	sp, #48	@ 0x30
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2220      	movs	r2, #32
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f008 fdfb 	bl	800a000 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800140a:	4b32      	ldr	r3, [pc, #200]	@ (80014d4 <MX_ADC1_Init+0xe8>)
 800140c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001410:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001412:	4b30      	ldr	r3, [pc, #192]	@ (80014d4 <MX_ADC1_Init+0xe8>)
 8001414:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001418:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800141a:	4b2e      	ldr	r3, [pc, #184]	@ (80014d4 <MX_ADC1_Init+0xe8>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001420:	4b2c      	ldr	r3, [pc, #176]	@ (80014d4 <MX_ADC1_Init+0xe8>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001426:	4b2b      	ldr	r3, [pc, #172]	@ (80014d4 <MX_ADC1_Init+0xe8>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800142c:	4b29      	ldr	r3, [pc, #164]	@ (80014d4 <MX_ADC1_Init+0xe8>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001432:	4b28      	ldr	r3, [pc, #160]	@ (80014d4 <MX_ADC1_Init+0xe8>)
 8001434:	2204      	movs	r2, #4
 8001436:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001438:	4b26      	ldr	r3, [pc, #152]	@ (80014d4 <MX_ADC1_Init+0xe8>)
 800143a:	2200      	movs	r2, #0
 800143c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800143e:	4b25      	ldr	r3, [pc, #148]	@ (80014d4 <MX_ADC1_Init+0xe8>)
 8001440:	2200      	movs	r2, #0
 8001442:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001444:	4b23      	ldr	r3, [pc, #140]	@ (80014d4 <MX_ADC1_Init+0xe8>)
 8001446:	2201      	movs	r2, #1
 8001448:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800144a:	4b22      	ldr	r3, [pc, #136]	@ (80014d4 <MX_ADC1_Init+0xe8>)
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001452:	4b20      	ldr	r3, [pc, #128]	@ (80014d4 <MX_ADC1_Init+0xe8>)
 8001454:	2200      	movs	r2, #0
 8001456:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001458:	4b1e      	ldr	r3, [pc, #120]	@ (80014d4 <MX_ADC1_Init+0xe8>)
 800145a:	2200      	movs	r2, #0
 800145c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800145e:	4b1d      	ldr	r3, [pc, #116]	@ (80014d4 <MX_ADC1_Init+0xe8>)
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001466:	4b1b      	ldr	r3, [pc, #108]	@ (80014d4 <MX_ADC1_Init+0xe8>)
 8001468:	2200      	movs	r2, #0
 800146a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800146c:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <MX_ADC1_Init+0xe8>)
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001474:	4817      	ldr	r0, [pc, #92]	@ (80014d4 <MX_ADC1_Init+0xe8>)
 8001476:	f001 fb61 	bl	8002b3c <HAL_ADC_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001480:	f000 fb08 	bl	8001a94 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001488:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800148c:	4619      	mov	r1, r3
 800148e:	4811      	ldr	r0, [pc, #68]	@ (80014d4 <MX_ADC1_Init+0xe8>)
 8001490:	f002 f8ee 	bl	8003670 <HAL_ADCEx_MultiModeConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800149a:	f000 fafb 	bl	8001a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <MX_ADC1_Init+0xec>)
 80014a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014a2:	2306      	movs	r3, #6
 80014a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014aa:	237f      	movs	r3, #127	@ 0x7f
 80014ac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014ae:	2304      	movs	r3, #4
 80014b0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	4619      	mov	r1, r3
 80014ba:	4806      	ldr	r0, [pc, #24]	@ (80014d4 <MX_ADC1_Init+0xe8>)
 80014bc:	f001 fcc2 	bl	8002e44 <HAL_ADC_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80014c6:	f000 fae5 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	3730      	adds	r7, #48	@ 0x30
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200001f4 	.word	0x200001f4
 80014d8:	0c900008 	.word	0x0c900008

080014dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b09a      	sub	sp, #104	@ 0x68
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	2244      	movs	r2, #68	@ 0x44
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f008 fd7f 	bl	800a000 <memset>
  if(adcHandle->Instance==ADC1)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800150a:	d134      	bne.n	8001576 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800150c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001510:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001512:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001516:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	4618      	mov	r0, r3
 800151e:	f003 fbe1 	bl	8004ce4 <HAL_RCCEx_PeriphCLKConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001528:	f000 fab4 	bl	8001a94 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800152c:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <HAL_ADC_MspInit+0xa4>)
 800152e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001530:	4a13      	ldr	r2, [pc, #76]	@ (8001580 <HAL_ADC_MspInit+0xa4>)
 8001532:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001536:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001538:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <HAL_ADC_MspInit+0xa4>)
 800153a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001544:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <HAL_ADC_MspInit+0xa4>)
 8001546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001548:	4a0d      	ldr	r2, [pc, #52]	@ (8001580 <HAL_ADC_MspInit+0xa4>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001550:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <HAL_ADC_MspInit+0xa4>)
 8001552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CB_OUT1_Pin|CB_OUT2_Pin;
 800155c:	230c      	movs	r3, #12
 800155e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001560:	2303      	movs	r3, #3
 8001562:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800156c:	4619      	mov	r1, r3
 800156e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001572:	f002 fac1 	bl	8003af8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001576:	bf00      	nop
 8001578:	3768      	adds	r7, #104	@ 0x68
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000

08001584 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001584:	b5b0      	push	{r4, r5, r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <MX_FREERTOS_Init+0x2c>)
 800158c:	1d3c      	adds	r4, r7, #4
 800158e:	461d      	mov	r5, r3
 8001590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001594:	682b      	ldr	r3, [r5, #0]
 8001596:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f006 fc60 	bl	8007e62 <osThreadCreate>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4a03      	ldr	r2, [pc, #12]	@ (80015b4 <MX_FREERTOS_Init+0x30>)
 80015a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80015a8:	bf00      	nop
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bdb0      	pop	{r4, r5, r7, pc}
 80015b0:	0800bbdc 	.word	0x0800bbdc
 80015b4:	20000260 	.word	0x20000260

080015b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f006 fc75 	bl	8007eb0 <osDelay>
 80015c6:	e7fb      	b.n	80015c0 <StartDefaultTask+0x8>

080015c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	@ 0x28
 80015cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015de:	4b46      	ldr	r3, [pc, #280]	@ (80016f8 <MX_GPIO_Init+0x130>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e2:	4a45      	ldr	r2, [pc, #276]	@ (80016f8 <MX_GPIO_Init+0x130>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ea:	4b43      	ldr	r3, [pc, #268]	@ (80016f8 <MX_GPIO_Init+0x130>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015f6:	4b40      	ldr	r3, [pc, #256]	@ (80016f8 <MX_GPIO_Init+0x130>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	4a3f      	ldr	r2, [pc, #252]	@ (80016f8 <MX_GPIO_Init+0x130>)
 80015fc:	f043 0320 	orr.w	r3, r3, #32
 8001600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001602:	4b3d      	ldr	r3, [pc, #244]	@ (80016f8 <MX_GPIO_Init+0x130>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	f003 0320 	and.w	r3, r3, #32
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	4b3a      	ldr	r3, [pc, #232]	@ (80016f8 <MX_GPIO_Init+0x130>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	4a39      	ldr	r2, [pc, #228]	@ (80016f8 <MX_GPIO_Init+0x130>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161a:	4b37      	ldr	r3, [pc, #220]	@ (80016f8 <MX_GPIO_Init+0x130>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	4b34      	ldr	r3, [pc, #208]	@ (80016f8 <MX_GPIO_Init+0x130>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162a:	4a33      	ldr	r2, [pc, #204]	@ (80016f8 <MX_GPIO_Init+0x130>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001632:	4b31      	ldr	r3, [pc, #196]	@ (80016f8 <MX_GPIO_Init+0x130>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001644:	482d      	ldr	r0, [pc, #180]	@ (80016fc <MX_GPIO_Init+0x134>)
 8001646:	f002 fbd9 	bl	8003dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CB_IN_Pin|DEV_EN_LIDAR_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	2190      	movs	r1, #144	@ 0x90
 800164e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001652:	f002 fbd3 	bl	8003dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M_EN_LIDAR_GPIO_Port, M_EN_LIDAR_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800165c:	4828      	ldr	r0, [pc, #160]	@ (8001700 <MX_GPIO_Init+0x138>)
 800165e:	f002 fbcd 	bl	8003dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001662:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	2301      	movs	r3, #1
 800166a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4619      	mov	r1, r3
 800167a:	4820      	ldr	r0, [pc, #128]	@ (80016fc <MX_GPIO_Init+0x134>)
 800167c:	f002 fa3c 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CB_IN_Pin|DEV_EN_LIDAR_Pin;
 8001680:	2390      	movs	r3, #144	@ 0x90
 8001682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4619      	mov	r1, r3
 8001696:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800169a:	f002 fa2d 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHAT_SOURIS_Pin;
 800169e:	2320      	movs	r3, #32
 80016a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHAT_SOURIS_GPIO_Port, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016b4:	f002 fa20 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M_EN_LIDAR_Pin;
 80016b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M_EN_LIDAR_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	480b      	ldr	r0, [pc, #44]	@ (8001700 <MX_GPIO_Init+0x138>)
 80016d2:	f002 fa11 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 80016d6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80016da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016dc:	2300      	movs	r3, #0
 80016de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	4805      	ldr	r0, [pc, #20]	@ (8001700 <MX_GPIO_Init+0x138>)
 80016ec:	f002 fa04 	bl	8003af8 <HAL_GPIO_Init>

}
 80016f0:	bf00      	nop
 80016f2:	3728      	adds	r7, #40	@ 0x28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40021000 	.word	0x40021000
 80016fc:	48000800 	.word	0x48000800
 8001700:	48000400 	.word	0x48000400

08001704 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001708:	4b1b      	ldr	r3, [pc, #108]	@ (8001778 <MX_I2C1_Init+0x74>)
 800170a:	4a1c      	ldr	r2, [pc, #112]	@ (800177c <MX_I2C1_Init+0x78>)
 800170c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xA0623C56;
 800170e:	4b1a      	ldr	r3, [pc, #104]	@ (8001778 <MX_I2C1_Init+0x74>)
 8001710:	4a1b      	ldr	r2, [pc, #108]	@ (8001780 <MX_I2C1_Init+0x7c>)
 8001712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001714:	4b18      	ldr	r3, [pc, #96]	@ (8001778 <MX_I2C1_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800171a:	4b17      	ldr	r3, [pc, #92]	@ (8001778 <MX_I2C1_Init+0x74>)
 800171c:	2201      	movs	r2, #1
 800171e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001720:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <MX_I2C1_Init+0x74>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001726:	4b14      	ldr	r3, [pc, #80]	@ (8001778 <MX_I2C1_Init+0x74>)
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800172c:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <MX_I2C1_Init+0x74>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001732:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <MX_I2C1_Init+0x74>)
 8001734:	2200      	movs	r2, #0
 8001736:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001738:	4b0f      	ldr	r3, [pc, #60]	@ (8001778 <MX_I2C1_Init+0x74>)
 800173a:	2200      	movs	r2, #0
 800173c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800173e:	480e      	ldr	r0, [pc, #56]	@ (8001778 <MX_I2C1_Init+0x74>)
 8001740:	f002 fb8e 	bl	8003e60 <HAL_I2C_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800174a:	f000 f9a3 	bl	8001a94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800174e:	2100      	movs	r1, #0
 8001750:	4809      	ldr	r0, [pc, #36]	@ (8001778 <MX_I2C1_Init+0x74>)
 8001752:	f002 fc20 	bl	8003f96 <HAL_I2CEx_ConfigAnalogFilter>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800175c:	f000 f99a 	bl	8001a94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001760:	2100      	movs	r1, #0
 8001762:	4805      	ldr	r0, [pc, #20]	@ (8001778 <MX_I2C1_Init+0x74>)
 8001764:	f002 fc62 	bl	800402c <HAL_I2CEx_ConfigDigitalFilter>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800176e:	f000 f991 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000264 	.word	0x20000264
 800177c:	40005400 	.word	0x40005400
 8001780:	a0623c56 	.word	0xa0623c56

08001784 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b09a      	sub	sp, #104	@ 0x68
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	2244      	movs	r2, #68	@ 0x44
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f008 fc2b 	bl	800a000 <memset>
  if(i2cHandle->Instance==I2C1)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a1f      	ldr	r2, [pc, #124]	@ (800182c <HAL_I2C_MspInit+0xa8>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d136      	bne.n	8001822 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017b4:	2340      	movs	r3, #64	@ 0x40
 80017b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	4618      	mov	r0, r3
 80017c2:	f003 fa8f 	bl	8004ce4 <HAL_RCCEx_PeriphCLKConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017cc:	f000 f962 	bl	8001a94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d0:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <HAL_I2C_MspInit+0xac>)
 80017d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d4:	4a16      	ldr	r2, [pc, #88]	@ (8001830 <HAL_I2C_MspInit+0xac>)
 80017d6:	f043 0302 	orr.w	r3, r3, #2
 80017da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017dc:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <HAL_I2C_MspInit+0xac>)
 80017de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80017e8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80017ec:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ee:	2312      	movs	r3, #18
 80017f0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017fa:	2304      	movs	r3, #4
 80017fc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001802:	4619      	mov	r1, r3
 8001804:	480b      	ldr	r0, [pc, #44]	@ (8001834 <HAL_I2C_MspInit+0xb0>)
 8001806:	f002 f977 	bl	8003af8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <HAL_I2C_MspInit+0xac>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180e:	4a08      	ldr	r2, [pc, #32]	@ (8001830 <HAL_I2C_MspInit+0xac>)
 8001810:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001814:	6593      	str	r3, [r2, #88]	@ 0x58
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_I2C_MspInit+0xac>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001822:	bf00      	nop
 8001824:	3768      	adds	r7, #104	@ 0x68
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40005400 	.word	0x40005400
 8001830:	40021000 	.word	0x40021000
 8001834:	48000400 	.word	0x48000400

08001838 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart4, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 8001840:	1d39      	adds	r1, r7, #4
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	2201      	movs	r2, #1
 8001848:	4803      	ldr	r0, [pc, #12]	@ (8001858 <__io_putchar+0x20>)
 800184a:	f005 f8b0 	bl	80069ae <HAL_UART_Transmit>
  return chr;
 800184e:	687b      	ldr	r3, [r7, #4]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	200004b0 	.word	0x200004b0

0800185c <task_angle>:


/*** Task ****/

void task_angle(void * unused)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
for(;;) {
 ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001864:	f04f 31ff 	mov.w	r1, #4294967295
 8001868:	2001      	movs	r0, #1
 800186a:	f007 f813 	bl	8008894 <ulTaskNotifyTake>
 Robot_setAngle(&robot, angle);
 800186e:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <task_angle+0x2c>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	ee07 3a90 	vmov	s15, r3
 8001876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800187a:	eeb0 0a67 	vmov.f32	s0, s15
 800187e:	4803      	ldr	r0, [pc, #12]	@ (800188c <task_angle+0x30>)
 8001880:	f7ff fcc6 	bl	8001210 <Robot_setAngle>
 ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001884:	bf00      	nop
 8001886:	e7ed      	b.n	8001864 <task_angle+0x8>
 8001888:	200002c0 	.word	0x200002c0
 800188c:	2000030c 	.word	0x2000030c

08001890 <task_Bord>:
}
}
void task_Bord(void * unused)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
for(;;) {
 ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	2001      	movs	r0, #1
 800189e:	f006 fff9 	bl	8008894 <ulTaskNotifyTake>
 Moteur_stop(&moteur_droit);
 80018a2:	4808      	ldr	r0, [pc, #32]	@ (80018c4 <task_Bord+0x34>)
 80018a4:	f7ff fca6 	bl	80011f4 <Moteur_stop>
 Moteur_stop(&moteur_gauche);
 80018a8:	4807      	ldr	r0, [pc, #28]	@ (80018c8 <task_Bord+0x38>)
 80018aa:	f7ff fca3 	bl	80011f4 <Moteur_stop>

 Moteur_setSpeed(&moteur_droit, 120);
 80018ae:	2178      	movs	r1, #120	@ 0x78
 80018b0:	4804      	ldr	r0, [pc, #16]	@ (80018c4 <task_Bord+0x34>)
 80018b2:	f7ff fb93 	bl	8000fdc <Moteur_setSpeed>
 Moteur_setSpeed(&moteur_gauche, 80);
 80018b6:	2150      	movs	r1, #80	@ 0x50
 80018b8:	4803      	ldr	r0, [pc, #12]	@ (80018c8 <task_Bord+0x38>)
 80018ba:	f7ff fb8f 	bl	8000fdc <Moteur_setSpeed>
 ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80018be:	bf00      	nop
 80018c0:	e7ea      	b.n	8001898 <task_Bord+0x8>
 80018c2:	bf00      	nop
 80018c4:	200002c4 	.word	0x200002c4
 80018c8:	200002e8 	.word	0x200002e8

080018cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d2:	f000 ff04 	bl	80026de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d6:	f000 f881 	bl	80019dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018da:	f7ff fe75 	bl	80015c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80018de:	f7ff fd85 	bl	80013ec <MX_ADC1_Init>
  MX_TIM1_Init();
 80018e2:	f000 fa7f 	bl	8001de4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80018e6:	f000 fb21 	bl	8001f2c <MX_TIM3_Init>
  MX_TIM4_Init();
 80018ea:	f000 fb75 	bl	8001fd8 <MX_TIM4_Init>
  MX_TIM16_Init();
 80018ee:	f000 fbc9 	bl	8002084 <MX_TIM16_Init>
  MX_UART4_Init();
 80018f2:	f000 fd91 	bl	8002418 <MX_UART4_Init>
  MX_USART3_UART_Init();
 80018f6:	f000 fddb 	bl	80024b0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80018fa:	f7ff ff03 	bl	8001704 <MX_I2C1_Init>
   //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 // HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);  // Signal complémentaire (CH1N)
  //nbCounter = __HAL_TIM_GET_COUNTER(&htim1);
    //HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);

  xTaskCreate(task_angle, "angle", 256, NULL, 1, &h_task_angle);
 80018fe:	4b2a      	ldr	r3, [pc, #168]	@ (80019a8 <main+0xdc>)
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	2301      	movs	r3, #1
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2300      	movs	r3, #0
 8001908:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800190c:	4927      	ldr	r1, [pc, #156]	@ (80019ac <main+0xe0>)
 800190e:	4828      	ldr	r0, [pc, #160]	@ (80019b0 <main+0xe4>)
 8001910:	f006 fb96 	bl	8008040 <xTaskCreate>
  xTaskCreate(task_Bord, "Bord", 256, NULL, 2, &h_task_bord);
 8001914:	4b27      	ldr	r3, [pc, #156]	@ (80019b4 <main+0xe8>)
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	2302      	movs	r3, #2
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2300      	movs	r3, #0
 800191e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001922:	4925      	ldr	r1, [pc, #148]	@ (80019b8 <main+0xec>)
 8001924:	4825      	ldr	r0, [pc, #148]	@ (80019bc <main+0xf0>)
 8001926:	f006 fb8b 	bl	8008040 <xTaskCreate>


  Moteur_init(&moteur_droit, &htim1, TIM_CHANNEL_1);
 800192a:	2200      	movs	r2, #0
 800192c:	4924      	ldr	r1, [pc, #144]	@ (80019c0 <main+0xf4>)
 800192e:	4825      	ldr	r0, [pc, #148]	@ (80019c4 <main+0xf8>)
 8001930:	f7ff fb2a 	bl	8000f88 <Moteur_init>
  Moteur_init(&moteur_gauche, &htim1, TIM_CHANNEL_2);
 8001934:	2204      	movs	r2, #4
 8001936:	4922      	ldr	r1, [pc, #136]	@ (80019c0 <main+0xf4>)
 8001938:	4823      	ldr	r0, [pc, #140]	@ (80019c8 <main+0xfc>)
 800193a:	f7ff fb25 	bl	8000f88 <Moteur_init>
  Moteur_start(&moteur_droit);
 800193e:	4821      	ldr	r0, [pc, #132]	@ (80019c4 <main+0xf8>)
 8001940:	f7ff fc4c 	bl	80011dc <Moteur_start>
  Moteur_start(&moteur_gauche);
 8001944:	4820      	ldr	r0, [pc, #128]	@ (80019c8 <main+0xfc>)
 8001946:	f7ff fc49 	bl	80011dc <Moteur_start>
  robot.moteur_droite = &moteur_droit;
 800194a:	4b20      	ldr	r3, [pc, #128]	@ (80019cc <main+0x100>)
 800194c:	4a1d      	ldr	r2, [pc, #116]	@ (80019c4 <main+0xf8>)
 800194e:	61da      	str	r2, [r3, #28]
  robot.moteur_gauche = &moteur_gauche;
 8001950:	4b1e      	ldr	r3, [pc, #120]	@ (80019cc <main+0x100>)
 8001952:	4a1d      	ldr	r2, [pc, #116]	@ (80019c8 <main+0xfc>)
 8001954:	621a      	str	r2, [r3, #32]
  robot.theta = 0;
 8001956:	4b1d      	ldr	r3, [pc, #116]	@ (80019cc <main+0x100>)
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	611a      	str	r2, [r3, #16]
  robot.omega = 0;
 800195e:	4b1b      	ldr	r3, [pc, #108]	@ (80019cc <main+0x100>)
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	619a      	str	r2, [r3, #24]
  robot.vitesse = 0;
 8001966:	4b19      	ldr	r3, [pc, #100]	@ (80019cc <main+0x100>)
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	615a      	str	r2, [r3, #20]
  Robot_setAngle(&robot, 80);
 800196e:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 80019d0 <main+0x104>
 8001972:	4816      	ldr	r0, [pc, #88]	@ (80019cc <main+0x100>)
 8001974:	f7ff fc4c 	bl	8001210 <Robot_setAngle>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001978:	f7ff fe04 	bl	8001584 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800197c:	f006 fa6a 	bl	8007e54 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    printf("hello \r\n");
 8001980:	4814      	ldr	r0, [pc, #80]	@ (80019d4 <main+0x108>)
 8001982:	f008 fa5d 	bl	8009e40 <puts>

      HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001986:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800198a:	4813      	ldr	r0, [pc, #76]	@ (80019d8 <main+0x10c>)
 800198c:	f002 fa4e 	bl	8003e2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001990:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001994:	4810      	ldr	r0, [pc, #64]	@ (80019d8 <main+0x10c>)
 8001996:	f002 fa49 	bl	8003e2c <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800199a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800199e:	480e      	ldr	r0, [pc, #56]	@ (80019d8 <main+0x10c>)
 80019a0:	f002 fa44 	bl	8003e2c <HAL_GPIO_TogglePin>
    printf("hello \r\n");
 80019a4:	bf00      	nop
 80019a6:	e7eb      	b.n	8001980 <main+0xb4>
 80019a8:	200002b8 	.word	0x200002b8
 80019ac:	0800bc3c 	.word	0x0800bc3c
 80019b0:	0800185d 	.word	0x0800185d
 80019b4:	200002bc 	.word	0x200002bc
 80019b8:	0800bc44 	.word	0x0800bc44
 80019bc:	08001891 	.word	0x08001891
 80019c0:	20000380 	.word	0x20000380
 80019c4:	200002c4 	.word	0x200002c4
 80019c8:	200002e8 	.word	0x200002e8
 80019cc:	2000030c 	.word	0x2000030c
 80019d0:	42a00000 	.word	0x42a00000
 80019d4:	0800bc4c 	.word	0x0800bc4c
 80019d8:	48000800 	.word	0x48000800

080019dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b094      	sub	sp, #80	@ 0x50
 80019e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019e2:	f107 0318 	add.w	r3, r7, #24
 80019e6:	2238      	movs	r2, #56	@ 0x38
 80019e8:	2100      	movs	r1, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f008 fb08 	bl	800a000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
 80019fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80019fe:	2000      	movs	r0, #0
 8001a00:	f002 fb60 	bl	80040c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a04:	2301      	movs	r3, #1
 8001a06:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a0c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a12:	2303      	movs	r3, #3
 8001a14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001a16:	2304      	movs	r3, #4
 8001a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001a1a:	2355      	movs	r3, #85	@ 0x55
 8001a1c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a22:	2302      	movs	r3, #2
 8001a24:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a26:	2302      	movs	r3, #2
 8001a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a2a:	f107 0318 	add.w	r3, r7, #24
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f002 fbfc 	bl	800422c <HAL_RCC_OscConfig>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001a3a:	f000 f82b 	bl	8001a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a3e:	230f      	movs	r3, #15
 8001a40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a42:	2303      	movs	r3, #3
 8001a44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	2104      	movs	r1, #4
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 fefa 	bl	8004850 <HAL_RCC_ClockConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001a62:	f000 f817 	bl	8001a94 <Error_Handler>
  }
}
 8001a66:	bf00      	nop
 8001a68:	3750      	adds	r7, #80	@ 0x50
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d101      	bne.n	8001a86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a82:	f000 fe45 	bl	8002710 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40001000 	.word	0x40001000

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <Error_Handler+0x8>

08001aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <HAL_MspInit+0x50>)
 8001aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aaa:	4a11      	ldr	r2, [pc, #68]	@ (8001af0 <HAL_MspInit+0x50>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <HAL_MspInit+0x50>)
 8001ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <HAL_MspInit+0x50>)
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	@ (8001af0 <HAL_MspInit+0x50>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aca:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <HAL_MspInit+0x50>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	210f      	movs	r1, #15
 8001ada:	f06f 0001 	mvn.w	r0, #1
 8001ade:	f001 ff23 	bl	8003928 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ae2:	f002 fb93 	bl	800420c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000

08001af4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08c      	sub	sp, #48	@ 0x30
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b04:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb8 <HAL_InitTick+0xc4>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b08:	4a2b      	ldr	r2, [pc, #172]	@ (8001bb8 <HAL_InitTick+0xc4>)
 8001b0a:	f043 0310 	orr.w	r3, r3, #16
 8001b0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b10:	4b29      	ldr	r3, [pc, #164]	@ (8001bb8 <HAL_InitTick+0xc4>)
 8001b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b14:	f003 0310 	and.w	r3, r3, #16
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b1c:	f107 020c 	add.w	r2, r7, #12
 8001b20:	f107 0310 	add.w	r3, r7, #16
 8001b24:	4611      	mov	r1, r2
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 f866 	bl	8004bf8 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b2c:	f003 f838 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 8001b30:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b34:	4a21      	ldr	r2, [pc, #132]	@ (8001bbc <HAL_InitTick+0xc8>)
 8001b36:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3a:	0c9b      	lsrs	r3, r3, #18
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b40:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc0 <HAL_InitTick+0xcc>)
 8001b42:	4a20      	ldr	r2, [pc, #128]	@ (8001bc4 <HAL_InitTick+0xd0>)
 8001b44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b46:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc0 <HAL_InitTick+0xcc>)
 8001b48:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b4c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001bc0 <HAL_InitTick+0xcc>)
 8001b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b52:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b54:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc0 <HAL_InitTick+0xcc>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5a:	4b19      	ldr	r3, [pc, #100]	@ (8001bc0 <HAL_InitTick+0xcc>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001b60:	4817      	ldr	r0, [pc, #92]	@ (8001bc0 <HAL_InitTick+0xcc>)
 8001b62:	f003 faaf 	bl	80050c4 <HAL_TIM_Base_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001b6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d11b      	bne.n	8001bac <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001b74:	4812      	ldr	r0, [pc, #72]	@ (8001bc0 <HAL_InitTick+0xcc>)
 8001b76:	f003 fafd 	bl	8005174 <HAL_TIM_Base_Start_IT>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001b80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d111      	bne.n	8001bac <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b88:	2036      	movs	r0, #54	@ 0x36
 8001b8a:	f001 fee7 	bl	800395c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b0f      	cmp	r3, #15
 8001b92:	d808      	bhi.n	8001ba6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001b94:	2200      	movs	r2, #0
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	2036      	movs	r0, #54	@ 0x36
 8001b9a:	f001 fec5 	bl	8003928 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc8 <HAL_InitTick+0xd4>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	e002      	b.n	8001bac <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001bac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3730      	adds	r7, #48	@ 0x30
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	431bde83 	.word	0x431bde83
 8001bc0:	20000330 	.word	0x20000330
 8001bc4:	40001000 	.word	0x40001000
 8001bc8:	20000004 	.word	0x20000004

08001bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <NMI_Handler+0x4>

08001bd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <HardFault_Handler+0x4>

08001bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <MemManage_Handler+0x4>

08001be4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <BusFault_Handler+0x4>

08001bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <UsageFault_Handler+0x4>

08001bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <USART3_IRQHandler+0x10>)
 8001c0a:	f004 ff5f 	bl	8006acc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000544 	.word	0x20000544

08001c18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c1c:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <TIM6_DAC_IRQHandler+0x10>)
 8001c1e:	f003 fda7 	bl	8005770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000330 	.word	0x20000330

08001c2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return 1;
 8001c30:	2301      	movs	r3, #1
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_kill>:

int _kill(int pid, int sig)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c46:	f008 fa3d 	bl	800a0c4 <__errno>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2216      	movs	r2, #22
 8001c4e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <_exit>:

void _exit (int status)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ffe7 	bl	8001c3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c6e:	bf00      	nop
 8001c70:	e7fd      	b.n	8001c6e <_exit+0x12>

08001c72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e00a      	b.n	8001c9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c84:	f3af 8000 	nop.w
 8001c88:	4601      	mov	r1, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	60ba      	str	r2, [r7, #8]
 8001c90:	b2ca      	uxtb	r2, r1
 8001c92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	3301      	adds	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	dbf0      	blt.n	8001c84 <_read+0x12>
  }

  return len;
 8001ca2:	687b      	ldr	r3, [r7, #4]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	e009      	b.n	8001cd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	60ba      	str	r2, [r7, #8]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fdb6 	bl	8001838 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	dbf1      	blt.n	8001cbe <_write+0x12>
  }
  return len;
 8001cda:	687b      	ldr	r3, [r7, #4]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_close>:

int _close(int file)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d0c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_isatty>:

int _isatty(int file)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d24:	2301      	movs	r3, #1
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b085      	sub	sp, #20
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d54:	4a14      	ldr	r2, [pc, #80]	@ (8001da8 <_sbrk+0x5c>)
 8001d56:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <_sbrk+0x60>)
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d60:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <_sbrk+0x64>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d68:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <_sbrk+0x64>)
 8001d6a:	4a12      	ldr	r2, [pc, #72]	@ (8001db4 <_sbrk+0x68>)
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6e:	4b10      	ldr	r3, [pc, #64]	@ (8001db0 <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d207      	bcs.n	8001d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d7c:	f008 f9a2 	bl	800a0c4 <__errno>
 8001d80:	4603      	mov	r3, r0
 8001d82:	220c      	movs	r2, #12
 8001d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8a:	e009      	b.n	8001da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d8c:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d92:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	4a05      	ldr	r2, [pc, #20]	@ (8001db0 <_sbrk+0x64>)
 8001d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20008000 	.word	0x20008000
 8001dac:	00000400 	.word	0x00000400
 8001db0:	2000037c 	.word	0x2000037c
 8001db4:	20001480 	.word	0x20001480

08001db8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001dbc:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <SystemInit+0x28>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dc2:	4a07      	ldr	r2, [pc, #28]	@ (8001de0 <SystemInit+0x28>)
 8001dc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8001dcc:	4b04      	ldr	r3, [pc, #16]	@ (8001de0 <SystemInit+0x28>)
 8001dce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001dd2:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b098      	sub	sp, #96	@ 0x60
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001df6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	611a      	str	r2, [r3, #16]
 8001e06:	615a      	str	r2, [r3, #20]
 8001e08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	2234      	movs	r2, #52	@ 0x34
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4618      	mov	r0, r3
 8001e12:	f008 f8f5 	bl	800a000 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e16:	4b43      	ldr	r3, [pc, #268]	@ (8001f24 <MX_TIM1_Init+0x140>)
 8001e18:	4a43      	ldr	r2, [pc, #268]	@ (8001f28 <MX_TIM1_Init+0x144>)
 8001e1a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e1c:	4b41      	ldr	r3, [pc, #260]	@ (8001f24 <MX_TIM1_Init+0x140>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e22:	4b40      	ldr	r3, [pc, #256]	@ (8001f24 <MX_TIM1_Init+0x140>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8001e28:	4b3e      	ldr	r3, [pc, #248]	@ (8001f24 <MX_TIM1_Init+0x140>)
 8001e2a:	f242 1233 	movw	r2, #8499	@ 0x2133
 8001e2e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e30:	4b3c      	ldr	r3, [pc, #240]	@ (8001f24 <MX_TIM1_Init+0x140>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e36:	4b3b      	ldr	r3, [pc, #236]	@ (8001f24 <MX_TIM1_Init+0x140>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e3c:	4b39      	ldr	r3, [pc, #228]	@ (8001f24 <MX_TIM1_Init+0x140>)
 8001e3e:	2280      	movs	r2, #128	@ 0x80
 8001e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e42:	4838      	ldr	r0, [pc, #224]	@ (8001f24 <MX_TIM1_Init+0x140>)
 8001e44:	f003 fa00 	bl	8005248 <HAL_TIM_PWM_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001e4e:	f7ff fe21 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e52:	2300      	movs	r3, #0
 8001e54:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e5e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e62:	4619      	mov	r1, r3
 8001e64:	482f      	ldr	r0, [pc, #188]	@ (8001f24 <MX_TIM1_Init+0x140>)
 8001e66:	f004 fbd9 	bl	800661c <HAL_TIMEx_MasterConfigSynchronization>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e70:	f7ff fe10 	bl	8001a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e74:	2360      	movs	r3, #96	@ 0x60
 8001e76:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 3400;
 8001e78:	f640 5348 	movw	r3, #3400	@ 0xd48
 8001e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e82:	2300      	movs	r3, #0
 8001e84:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e86:	2300      	movs	r3, #0
 8001e88:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e92:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e96:	2200      	movs	r2, #0
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4822      	ldr	r0, [pc, #136]	@ (8001f24 <MX_TIM1_Init+0x140>)
 8001e9c:	f003 fdb8 	bl	8005a10 <HAL_TIM_PWM_ConfigChannel>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001ea6:	f7ff fdf5 	bl	8001a94 <Error_Handler>
  }
  sConfigOC.Pulse = 2400;
 8001eaa:	f44f 6316 	mov.w	r3, #2400	@ 0x960
 8001eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eb0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	481a      	ldr	r0, [pc, #104]	@ (8001f24 <MX_TIM1_Init+0x140>)
 8001eba:	f003 fda9 	bl	8005a10 <HAL_TIM_PWM_ConfigChannel>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8001ec4:	f7ff fde6 	bl	8001a94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001edc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ee0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001eee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	4619      	mov	r1, r3
 8001f04:	4807      	ldr	r0, [pc, #28]	@ (8001f24 <MX_TIM1_Init+0x140>)
 8001f06:	f004 fc0b 	bl	8006720 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001f10:	f7ff fdc0 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f14:	4803      	ldr	r0, [pc, #12]	@ (8001f24 <MX_TIM1_Init+0x140>)
 8001f16:	f000 fa03 	bl	8002320 <HAL_TIM_MspPostInit>

}
 8001f1a:	bf00      	nop
 8001f1c:	3760      	adds	r7, #96	@ 0x60
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000380 	.word	0x20000380
 8001f28:	40012c00 	.word	0x40012c00

08001f2c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08c      	sub	sp, #48	@ 0x30
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f32:	f107 030c 	add.w	r3, r7, #12
 8001f36:	2224      	movs	r2, #36	@ 0x24
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f008 f860 	bl	800a000 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f40:	463b      	mov	r3, r7
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f4a:	4b21      	ldr	r3, [pc, #132]	@ (8001fd0 <MX_TIM3_Init+0xa4>)
 8001f4c:	4a21      	ldr	r2, [pc, #132]	@ (8001fd4 <MX_TIM3_Init+0xa8>)
 8001f4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f50:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd0 <MX_TIM3_Init+0xa4>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f56:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd0 <MX_TIM3_Init+0xa4>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd0 <MX_TIM3_Init+0xa4>)
 8001f5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f64:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd0 <MX_TIM3_Init+0xa4>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6a:	4b19      	ldr	r3, [pc, #100]	@ (8001fd0 <MX_TIM3_Init+0xa4>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f70:	2303      	movs	r3, #3
 8001f72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f74:	2300      	movs	r3, #0
 8001f76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f84:	2300      	movs	r3, #0
 8001f86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	4619      	mov	r1, r3
 8001f9a:	480d      	ldr	r0, [pc, #52]	@ (8001fd0 <MX_TIM3_Init+0xa4>)
 8001f9c:	f003 fb42 	bl	8005624 <HAL_TIM_Encoder_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001fa6:	f7ff fd75 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4806      	ldr	r0, [pc, #24]	@ (8001fd0 <MX_TIM3_Init+0xa4>)
 8001fb8:	f004 fb30 	bl	800661c <HAL_TIMEx_MasterConfigSynchronization>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001fc2:	f7ff fd67 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fc6:	bf00      	nop
 8001fc8:	3730      	adds	r7, #48	@ 0x30
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	200003cc 	.word	0x200003cc
 8001fd4:	40000400 	.word	0x40000400

08001fd8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08c      	sub	sp, #48	@ 0x30
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	2224      	movs	r2, #36	@ 0x24
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f008 f80a 	bl	800a000 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fec:	463b      	mov	r3, r7
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ff6:	4b21      	ldr	r3, [pc, #132]	@ (800207c <MX_TIM4_Init+0xa4>)
 8001ff8:	4a21      	ldr	r2, [pc, #132]	@ (8002080 <MX_TIM4_Init+0xa8>)
 8001ffa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800207c <MX_TIM4_Init+0xa4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002002:	4b1e      	ldr	r3, [pc, #120]	@ (800207c <MX_TIM4_Init+0xa4>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002008:	4b1c      	ldr	r3, [pc, #112]	@ (800207c <MX_TIM4_Init+0xa4>)
 800200a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800200e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002010:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <MX_TIM4_Init+0xa4>)
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002016:	4b19      	ldr	r3, [pc, #100]	@ (800207c <MX_TIM4_Init+0xa4>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800201c:	2303      	movs	r3, #3
 800201e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002020:	2300      	movs	r3, #0
 8002022:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002024:	2301      	movs	r3, #1
 8002026:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002028:	2300      	movs	r3, #0
 800202a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002030:	2300      	movs	r3, #0
 8002032:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002034:	2301      	movs	r3, #1
 8002036:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002038:	2300      	movs	r3, #0
 800203a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002040:	f107 030c 	add.w	r3, r7, #12
 8002044:	4619      	mov	r1, r3
 8002046:	480d      	ldr	r0, [pc, #52]	@ (800207c <MX_TIM4_Init+0xa4>)
 8002048:	f003 faec 	bl	8005624 <HAL_TIM_Encoder_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002052:	f7ff fd1f 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800205e:	463b      	mov	r3, r7
 8002060:	4619      	mov	r1, r3
 8002062:	4806      	ldr	r0, [pc, #24]	@ (800207c <MX_TIM4_Init+0xa4>)
 8002064:	f004 fada 	bl	800661c <HAL_TIMEx_MasterConfigSynchronization>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800206e:	f7ff fd11 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	3730      	adds	r7, #48	@ 0x30
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000418 	.word	0x20000418
 8002080:	40000800 	.word	0x40000800

08002084 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b094      	sub	sp, #80	@ 0x50
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800208a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	60da      	str	r2, [r3, #12]
 8002098:	611a      	str	r2, [r3, #16]
 800209a:	615a      	str	r2, [r3, #20]
 800209c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800209e:	463b      	mov	r3, r7
 80020a0:	2234      	movs	r2, #52	@ 0x34
 80020a2:	2100      	movs	r1, #0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f007 ffab 	bl	800a000 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80020aa:	4b31      	ldr	r3, [pc, #196]	@ (8002170 <MX_TIM16_Init+0xec>)
 80020ac:	4a31      	ldr	r2, [pc, #196]	@ (8002174 <MX_TIM16_Init+0xf0>)
 80020ae:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80020b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002170 <MX_TIM16_Init+0xec>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002170 <MX_TIM16_Init+0xec>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80020bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002170 <MX_TIM16_Init+0xec>)
 80020be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020c2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002170 <MX_TIM16_Init+0xec>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80020ca:	4b29      	ldr	r3, [pc, #164]	@ (8002170 <MX_TIM16_Init+0xec>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d0:	4b27      	ldr	r3, [pc, #156]	@ (8002170 <MX_TIM16_Init+0xec>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80020d6:	4826      	ldr	r0, [pc, #152]	@ (8002170 <MX_TIM16_Init+0xec>)
 80020d8:	f002 fff4 	bl	80050c4 <HAL_TIM_Base_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80020e2:	f7ff fcd7 	bl	8001a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80020e6:	4822      	ldr	r0, [pc, #136]	@ (8002170 <MX_TIM16_Init+0xec>)
 80020e8:	f003 f8ae 	bl	8005248 <HAL_TIM_PWM_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80020f2:	f7ff fccf 	bl	8001a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f6:	2360      	movs	r3, #96	@ 0x60
 80020f8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020fe:	2300      	movs	r3, #0
 8002100:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002102:	2300      	movs	r3, #0
 8002104:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002112:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002116:	2200      	movs	r2, #0
 8002118:	4619      	mov	r1, r3
 800211a:	4815      	ldr	r0, [pc, #84]	@ (8002170 <MX_TIM16_Init+0xec>)
 800211c:	f003 fc78 	bl	8005a10 <HAL_TIM_PWM_ConfigChannel>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8002126:	f7ff fcb5 	bl	8001a94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800213e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002142:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800214c:	463b      	mov	r3, r7
 800214e:	4619      	mov	r1, r3
 8002150:	4807      	ldr	r0, [pc, #28]	@ (8002170 <MX_TIM16_Init+0xec>)
 8002152:	f004 fae5 	bl	8006720 <HAL_TIMEx_ConfigBreakDeadTime>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 800215c:	f7ff fc9a 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002160:	4803      	ldr	r0, [pc, #12]	@ (8002170 <MX_TIM16_Init+0xec>)
 8002162:	f000 f8dd 	bl	8002320 <HAL_TIM_MspPostInit>

}
 8002166:	bf00      	nop
 8002168:	3750      	adds	r7, #80	@ 0x50
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000464 	.word	0x20000464
 8002174:	40014400 	.word	0x40014400

08002178 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <HAL_TIM_PWM_MspInit+0x38>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d10b      	bne.n	80021a2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800218a:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <HAL_TIM_PWM_MspInit+0x3c>)
 800218c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800218e:	4a09      	ldr	r2, [pc, #36]	@ (80021b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002190:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002194:	6613      	str	r3, [r2, #96]	@ 0x60
 8002196:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800219a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40012c00 	.word	0x40012c00
 80021b4:	40021000 	.word	0x40021000

080021b8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08c      	sub	sp, #48	@ 0x30
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 031c 	add.w	r3, r7, #28
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a3d      	ldr	r2, [pc, #244]	@ (80022cc <HAL_TIM_Encoder_MspInit+0x114>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d144      	bne.n	8002264 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021da:	4b3d      	ldr	r3, [pc, #244]	@ (80022d0 <HAL_TIM_Encoder_MspInit+0x118>)
 80021dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021de:	4a3c      	ldr	r2, [pc, #240]	@ (80022d0 <HAL_TIM_Encoder_MspInit+0x118>)
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80021e6:	4b3a      	ldr	r3, [pc, #232]	@ (80022d0 <HAL_TIM_Encoder_MspInit+0x118>)
 80021e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	61bb      	str	r3, [r7, #24]
 80021f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f2:	4b37      	ldr	r3, [pc, #220]	@ (80022d0 <HAL_TIM_Encoder_MspInit+0x118>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f6:	4a36      	ldr	r2, [pc, #216]	@ (80022d0 <HAL_TIM_Encoder_MspInit+0x118>)
 80021f8:	f043 0304 	orr.w	r3, r3, #4
 80021fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021fe:	4b34      	ldr	r3, [pc, #208]	@ (80022d0 <HAL_TIM_Encoder_MspInit+0x118>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220a:	4b31      	ldr	r3, [pc, #196]	@ (80022d0 <HAL_TIM_Encoder_MspInit+0x118>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220e:	4a30      	ldr	r2, [pc, #192]	@ (80022d0 <HAL_TIM_Encoder_MspInit+0x118>)
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002216:	4b2e      	ldr	r3, [pc, #184]	@ (80022d0 <HAL_TIM_Encoder_MspInit+0x118>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002222:	2340      	movs	r3, #64	@ 0x40
 8002224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222e:	2300      	movs	r3, #0
 8002230:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002232:	2302      	movs	r3, #2
 8002234:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002236:	f107 031c 	add.w	r3, r7, #28
 800223a:	4619      	mov	r1, r3
 800223c:	4825      	ldr	r0, [pc, #148]	@ (80022d4 <HAL_TIM_Encoder_MspInit+0x11c>)
 800223e:	f001 fc5b 	bl	8003af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002242:	2320      	movs	r3, #32
 8002244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002246:	2302      	movs	r3, #2
 8002248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224e:	2300      	movs	r3, #0
 8002250:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002252:	2302      	movs	r3, #2
 8002254:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002256:	f107 031c 	add.w	r3, r7, #28
 800225a:	4619      	mov	r1, r3
 800225c:	481e      	ldr	r0, [pc, #120]	@ (80022d8 <HAL_TIM_Encoder_MspInit+0x120>)
 800225e:	f001 fc4b 	bl	8003af8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002262:	e02e      	b.n	80022c2 <HAL_TIM_Encoder_MspInit+0x10a>
  else if(tim_encoderHandle->Instance==TIM4)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a1c      	ldr	r2, [pc, #112]	@ (80022dc <HAL_TIM_Encoder_MspInit+0x124>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d129      	bne.n	80022c2 <HAL_TIM_Encoder_MspInit+0x10a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800226e:	4b18      	ldr	r3, [pc, #96]	@ (80022d0 <HAL_TIM_Encoder_MspInit+0x118>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002272:	4a17      	ldr	r2, [pc, #92]	@ (80022d0 <HAL_TIM_Encoder_MspInit+0x118>)
 8002274:	f043 0304 	orr.w	r3, r3, #4
 8002278:	6593      	str	r3, [r2, #88]	@ 0x58
 800227a:	4b15      	ldr	r3, [pc, #84]	@ (80022d0 <HAL_TIM_Encoder_MspInit+0x118>)
 800227c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002286:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <HAL_TIM_Encoder_MspInit+0x118>)
 8002288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228a:	4a11      	ldr	r2, [pc, #68]	@ (80022d0 <HAL_TIM_Encoder_MspInit+0x118>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002292:	4b0f      	ldr	r3, [pc, #60]	@ (80022d0 <HAL_TIM_Encoder_MspInit+0x118>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PHASEB1_Pin|PHASEA1_Pin;
 800229e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80022a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80022b0:	230a      	movs	r3, #10
 80022b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	4619      	mov	r1, r3
 80022ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022be:	f001 fc1b 	bl	8003af8 <HAL_GPIO_Init>
}
 80022c2:	bf00      	nop
 80022c4:	3730      	adds	r7, #48	@ 0x30
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40000400 	.word	0x40000400
 80022d0:	40021000 	.word	0x40021000
 80022d4:	48000800 	.word	0x48000800
 80022d8:	48000400 	.word	0x48000400
 80022dc:	40000800 	.word	0x40000800

080022e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <HAL_TIM_Base_MspInit+0x38>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d10b      	bne.n	800230a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80022f2:	4b0a      	ldr	r3, [pc, #40]	@ (800231c <HAL_TIM_Base_MspInit+0x3c>)
 80022f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f6:	4a09      	ldr	r2, [pc, #36]	@ (800231c <HAL_TIM_Base_MspInit+0x3c>)
 80022f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80022fe:	4b07      	ldr	r3, [pc, #28]	@ (800231c <HAL_TIM_Base_MspInit+0x3c>)
 8002300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40014400 	.word	0x40014400
 800231c:	40021000 	.word	0x40021000

08002320 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	@ 0x28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a32      	ldr	r2, [pc, #200]	@ (8002408 <HAL_TIM_MspPostInit+0xe8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d13b      	bne.n	80023ba <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002342:	4b32      	ldr	r3, [pc, #200]	@ (800240c <HAL_TIM_MspPostInit+0xec>)
 8002344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002346:	4a31      	ldr	r2, [pc, #196]	@ (800240c <HAL_TIM_MspPostInit+0xec>)
 8002348:	f043 0302 	orr.w	r3, r3, #2
 800234c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800234e:	4b2f      	ldr	r3, [pc, #188]	@ (800240c <HAL_TIM_MspPostInit+0xec>)
 8002350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235a:	4b2c      	ldr	r3, [pc, #176]	@ (800240c <HAL_TIM_MspPostInit+0xec>)
 800235c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235e:	4a2b      	ldr	r2, [pc, #172]	@ (800240c <HAL_TIM_MspPostInit+0xec>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002366:	4b29      	ldr	r3, [pc, #164]	@ (800240c <HAL_TIM_MspPostInit+0xec>)
 8002368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = REV2_Pin|REV1_Pin;
 8002372:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002380:	2300      	movs	r3, #0
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002384:	2306      	movs	r3, #6
 8002386:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4619      	mov	r1, r3
 800238e:	4820      	ldr	r0, [pc, #128]	@ (8002410 <HAL_TIM_MspPostInit+0xf0>)
 8002390:	f001 fbb2 	bl	8003af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FWD2_Pin|FWD1_Pin;
 8002394:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a2:	2300      	movs	r3, #0
 80023a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80023a6:	2306      	movs	r3, #6
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	4619      	mov	r1, r3
 80023b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023b4:	f001 fba0 	bl	8003af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80023b8:	e021      	b.n	80023fe <HAL_TIM_MspPostInit+0xde>
  else if(timHandle->Instance==TIM16)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a15      	ldr	r2, [pc, #84]	@ (8002414 <HAL_TIM_MspPostInit+0xf4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d11c      	bne.n	80023fe <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c4:	4b11      	ldr	r3, [pc, #68]	@ (800240c <HAL_TIM_MspPostInit+0xec>)
 80023c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c8:	4a10      	ldr	r2, [pc, #64]	@ (800240c <HAL_TIM_MspPostInit+0xec>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023d0:	4b0e      	ldr	r3, [pc, #56]	@ (800240c <HAL_TIM_MspPostInit+0xec>)
 80023d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M_SCTR_LIDAR_Pin;
 80023dc:	2340      	movs	r3, #64	@ 0x40
 80023de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e8:	2300      	movs	r3, #0
 80023ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80023ec:	2301      	movs	r3, #1
 80023ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M_SCTR_LIDAR_GPIO_Port, &GPIO_InitStruct);
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	4619      	mov	r1, r3
 80023f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023fa:	f001 fb7d 	bl	8003af8 <HAL_GPIO_Init>
}
 80023fe:	bf00      	nop
 8002400:	3728      	adds	r7, #40	@ 0x28
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40012c00 	.word	0x40012c00
 800240c:	40021000 	.word	0x40021000
 8002410:	48000400 	.word	0x48000400
 8002414:	40014400 	.word	0x40014400

08002418 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800241c:	4b22      	ldr	r3, [pc, #136]	@ (80024a8 <MX_UART4_Init+0x90>)
 800241e:	4a23      	ldr	r2, [pc, #140]	@ (80024ac <MX_UART4_Init+0x94>)
 8002420:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002422:	4b21      	ldr	r3, [pc, #132]	@ (80024a8 <MX_UART4_Init+0x90>)
 8002424:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002428:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800242a:	4b1f      	ldr	r3, [pc, #124]	@ (80024a8 <MX_UART4_Init+0x90>)
 800242c:	2200      	movs	r2, #0
 800242e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002430:	4b1d      	ldr	r3, [pc, #116]	@ (80024a8 <MX_UART4_Init+0x90>)
 8002432:	2200      	movs	r2, #0
 8002434:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002436:	4b1c      	ldr	r3, [pc, #112]	@ (80024a8 <MX_UART4_Init+0x90>)
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800243c:	4b1a      	ldr	r3, [pc, #104]	@ (80024a8 <MX_UART4_Init+0x90>)
 800243e:	220c      	movs	r2, #12
 8002440:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002442:	4b19      	ldr	r3, [pc, #100]	@ (80024a8 <MX_UART4_Init+0x90>)
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002448:	4b17      	ldr	r3, [pc, #92]	@ (80024a8 <MX_UART4_Init+0x90>)
 800244a:	2200      	movs	r2, #0
 800244c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800244e:	4b16      	ldr	r3, [pc, #88]	@ (80024a8 <MX_UART4_Init+0x90>)
 8002450:	2200      	movs	r2, #0
 8002452:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002454:	4b14      	ldr	r3, [pc, #80]	@ (80024a8 <MX_UART4_Init+0x90>)
 8002456:	2200      	movs	r2, #0
 8002458:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800245a:	4b13      	ldr	r3, [pc, #76]	@ (80024a8 <MX_UART4_Init+0x90>)
 800245c:	2200      	movs	r2, #0
 800245e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002460:	4811      	ldr	r0, [pc, #68]	@ (80024a8 <MX_UART4_Init+0x90>)
 8002462:	f004 fa54 	bl	800690e <HAL_UART_Init>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800246c:	f7ff fb12 	bl	8001a94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002470:	2100      	movs	r1, #0
 8002472:	480d      	ldr	r0, [pc, #52]	@ (80024a8 <MX_UART4_Init+0x90>)
 8002474:	f005 fc0b 	bl	8007c8e <HAL_UARTEx_SetTxFifoThreshold>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800247e:	f7ff fb09 	bl	8001a94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002482:	2100      	movs	r1, #0
 8002484:	4808      	ldr	r0, [pc, #32]	@ (80024a8 <MX_UART4_Init+0x90>)
 8002486:	f005 fc40 	bl	8007d0a <HAL_UARTEx_SetRxFifoThreshold>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002490:	f7ff fb00 	bl	8001a94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002494:	4804      	ldr	r0, [pc, #16]	@ (80024a8 <MX_UART4_Init+0x90>)
 8002496:	f005 fbc1 	bl	8007c1c <HAL_UARTEx_DisableFifoMode>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80024a0:	f7ff faf8 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	200004b0 	.word	0x200004b0
 80024ac:	40004c00 	.word	0x40004c00

080024b0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024b4:	4b22      	ldr	r3, [pc, #136]	@ (8002540 <MX_USART3_UART_Init+0x90>)
 80024b6:	4a23      	ldr	r2, [pc, #140]	@ (8002544 <MX_USART3_UART_Init+0x94>)
 80024b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80024ba:	4b21      	ldr	r3, [pc, #132]	@ (8002540 <MX_USART3_UART_Init+0x90>)
 80024bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002540 <MX_USART3_UART_Init+0x90>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002540 <MX_USART3_UART_Init+0x90>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002540 <MX_USART3_UART_Init+0x90>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002540 <MX_USART3_UART_Init+0x90>)
 80024d6:	220c      	movs	r2, #12
 80024d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024da:	4b19      	ldr	r3, [pc, #100]	@ (8002540 <MX_USART3_UART_Init+0x90>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e0:	4b17      	ldr	r3, [pc, #92]	@ (8002540 <MX_USART3_UART_Init+0x90>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024e6:	4b16      	ldr	r3, [pc, #88]	@ (8002540 <MX_USART3_UART_Init+0x90>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024ec:	4b14      	ldr	r3, [pc, #80]	@ (8002540 <MX_USART3_UART_Init+0x90>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024f2:	4b13      	ldr	r3, [pc, #76]	@ (8002540 <MX_USART3_UART_Init+0x90>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024f8:	4811      	ldr	r0, [pc, #68]	@ (8002540 <MX_USART3_UART_Init+0x90>)
 80024fa:	f004 fa08 	bl	800690e <HAL_UART_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002504:	f7ff fac6 	bl	8001a94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002508:	2100      	movs	r1, #0
 800250a:	480d      	ldr	r0, [pc, #52]	@ (8002540 <MX_USART3_UART_Init+0x90>)
 800250c:	f005 fbbf 	bl	8007c8e <HAL_UARTEx_SetTxFifoThreshold>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002516:	f7ff fabd 	bl	8001a94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800251a:	2100      	movs	r1, #0
 800251c:	4808      	ldr	r0, [pc, #32]	@ (8002540 <MX_USART3_UART_Init+0x90>)
 800251e:	f005 fbf4 	bl	8007d0a <HAL_UARTEx_SetRxFifoThreshold>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002528:	f7ff fab4 	bl	8001a94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800252c:	4804      	ldr	r0, [pc, #16]	@ (8002540 <MX_USART3_UART_Init+0x90>)
 800252e:	f005 fb75 	bl	8007c1c <HAL_UARTEx_DisableFifoMode>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002538:	f7ff faac 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000544 	.word	0x20000544
 8002544:	40004800 	.word	0x40004800

08002548 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b09c      	sub	sp, #112	@ 0x70
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002550:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	60da      	str	r2, [r3, #12]
 800255e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002560:	f107 0318 	add.w	r3, r7, #24
 8002564:	2244      	movs	r2, #68	@ 0x44
 8002566:	2100      	movs	r1, #0
 8002568:	4618      	mov	r0, r3
 800256a:	f007 fd49 	bl	800a000 <memset>
  if(uartHandle->Instance==UART4)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a41      	ldr	r2, [pc, #260]	@ (8002678 <HAL_UART_MspInit+0x130>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d137      	bne.n	80025e8 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002578:	2308      	movs	r3, #8
 800257a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800257c:	2300      	movs	r3, #0
 800257e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002580:	f107 0318 	add.w	r3, r7, #24
 8002584:	4618      	mov	r0, r3
 8002586:	f002 fbad 	bl	8004ce4 <HAL_RCCEx_PeriphCLKConfig>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002590:	f7ff fa80 	bl	8001a94 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002594:	4b39      	ldr	r3, [pc, #228]	@ (800267c <HAL_UART_MspInit+0x134>)
 8002596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002598:	4a38      	ldr	r2, [pc, #224]	@ (800267c <HAL_UART_MspInit+0x134>)
 800259a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800259e:	6593      	str	r3, [r2, #88]	@ 0x58
 80025a0:	4b36      	ldr	r3, [pc, #216]	@ (800267c <HAL_UART_MspInit+0x134>)
 80025a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ac:	4b33      	ldr	r3, [pc, #204]	@ (800267c <HAL_UART_MspInit+0x134>)
 80025ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b0:	4a32      	ldr	r2, [pc, #200]	@ (800267c <HAL_UART_MspInit+0x134>)
 80025b2:	f043 0304 	orr.w	r3, r3, #4
 80025b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025b8:	4b30      	ldr	r3, [pc, #192]	@ (800267c <HAL_UART_MspInit+0x134>)
 80025ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_SWD_Pin|RX_SWD_Pin;
 80025c4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80025c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ca:	2302      	movs	r3, #2
 80025cc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d2:	2300      	movs	r3, #0
 80025d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80025d6:	2305      	movs	r3, #5
 80025d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025da:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80025de:	4619      	mov	r1, r3
 80025e0:	4827      	ldr	r0, [pc, #156]	@ (8002680 <HAL_UART_MspInit+0x138>)
 80025e2:	f001 fa89 	bl	8003af8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80025e6:	e043      	b.n	8002670 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a25      	ldr	r2, [pc, #148]	@ (8002684 <HAL_UART_MspInit+0x13c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d13e      	bne.n	8002670 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025f2:	2304      	movs	r3, #4
 80025f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80025f6:	2300      	movs	r3, #0
 80025f8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025fa:	f107 0318 	add.w	r3, r7, #24
 80025fe:	4618      	mov	r0, r3
 8002600:	f002 fb70 	bl	8004ce4 <HAL_RCCEx_PeriphCLKConfig>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800260a:	f7ff fa43 	bl	8001a94 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800260e:	4b1b      	ldr	r3, [pc, #108]	@ (800267c <HAL_UART_MspInit+0x134>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002612:	4a1a      	ldr	r2, [pc, #104]	@ (800267c <HAL_UART_MspInit+0x134>)
 8002614:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002618:	6593      	str	r3, [r2, #88]	@ 0x58
 800261a:	4b18      	ldr	r3, [pc, #96]	@ (800267c <HAL_UART_MspInit+0x134>)
 800261c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002626:	4b15      	ldr	r3, [pc, #84]	@ (800267c <HAL_UART_MspInit+0x134>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262a:	4a14      	ldr	r2, [pc, #80]	@ (800267c <HAL_UART_MspInit+0x134>)
 800262c:	f043 0302 	orr.w	r3, r3, #2
 8002630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002632:	4b12      	ldr	r3, [pc, #72]	@ (800267c <HAL_UART_MspInit+0x134>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LIDAR_RX_Pin|LIDAR_TX_Pin;
 800263e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002642:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002644:	2302      	movs	r3, #2
 8002646:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002650:	2307      	movs	r3, #7
 8002652:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002654:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002658:	4619      	mov	r1, r3
 800265a:	480b      	ldr	r0, [pc, #44]	@ (8002688 <HAL_UART_MspInit+0x140>)
 800265c:	f001 fa4c 	bl	8003af8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002660:	2200      	movs	r2, #0
 8002662:	2105      	movs	r1, #5
 8002664:	2027      	movs	r0, #39	@ 0x27
 8002666:	f001 f95f 	bl	8003928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800266a:	2027      	movs	r0, #39	@ 0x27
 800266c:	f001 f976 	bl	800395c <HAL_NVIC_EnableIRQ>
}
 8002670:	bf00      	nop
 8002672:	3770      	adds	r7, #112	@ 0x70
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40004c00 	.word	0x40004c00
 800267c:	40021000 	.word	0x40021000
 8002680:	48000800 	.word	0x48000800
 8002684:	40004800 	.word	0x40004800
 8002688:	48000400 	.word	0x48000400

0800268c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800268c:	480d      	ldr	r0, [pc, #52]	@ (80026c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800268e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002690:	f7ff fb92 	bl	8001db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002694:	480c      	ldr	r0, [pc, #48]	@ (80026c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002696:	490d      	ldr	r1, [pc, #52]	@ (80026cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002698:	4a0d      	ldr	r2, [pc, #52]	@ (80026d0 <LoopForever+0xe>)
  movs r3, #0
 800269a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800269c:	e002      	b.n	80026a4 <LoopCopyDataInit>

0800269e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800269e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026a2:	3304      	adds	r3, #4

080026a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026a8:	d3f9      	bcc.n	800269e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026aa:	4a0a      	ldr	r2, [pc, #40]	@ (80026d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026ac:	4c0a      	ldr	r4, [pc, #40]	@ (80026d8 <LoopForever+0x16>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026b0:	e001      	b.n	80026b6 <LoopFillZerobss>

080026b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b4:	3204      	adds	r2, #4

080026b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026b8:	d3fb      	bcc.n	80026b2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80026ba:	f007 fd09 	bl	800a0d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026be:	f7ff f905 	bl	80018cc <main>

080026c2 <LoopForever>:

LoopForever:
    b LoopForever
 80026c2:	e7fe      	b.n	80026c2 <LoopForever>
  ldr   r0, =_estack
 80026c4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80026c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026cc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80026d0:	0800c020 	.word	0x0800c020
  ldr r2, =_sbss
 80026d4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80026d8:	2000147c 	.word	0x2000147c

080026dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026dc:	e7fe      	b.n	80026dc <ADC1_2_IRQHandler>

080026de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026e8:	2003      	movs	r0, #3
 80026ea:	f001 f912 	bl	8003912 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026ee:	200f      	movs	r0, #15
 80026f0:	f7ff fa00 	bl	8001af4 <HAL_InitTick>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	71fb      	strb	r3, [r7, #7]
 80026fe:	e001      	b.n	8002704 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002700:	f7ff f9ce 	bl	8001aa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002704:	79fb      	ldrb	r3, [r7, #7]

}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002714:	4b05      	ldr	r3, [pc, #20]	@ (800272c <HAL_IncTick+0x1c>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4b05      	ldr	r3, [pc, #20]	@ (8002730 <HAL_IncTick+0x20>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4413      	add	r3, r2
 800271e:	4a03      	ldr	r2, [pc, #12]	@ (800272c <HAL_IncTick+0x1c>)
 8002720:	6013      	str	r3, [r2, #0]
}
 8002722:	bf00      	nop
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	200005d8 	.word	0x200005d8
 8002730:	20000008 	.word	0x20000008

08002734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return uwTick;
 8002738:	4b03      	ldr	r3, [pc, #12]	@ (8002748 <HAL_GetTick+0x14>)
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	200005d8 	.word	0x200005d8

0800274c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002754:	f7ff ffee 	bl	8002734 <HAL_GetTick>
 8002758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002764:	d004      	beq.n	8002770 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002766:	4b09      	ldr	r3, [pc, #36]	@ (800278c <HAL_Delay+0x40>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4413      	add	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002770:	bf00      	nop
 8002772:	f7ff ffdf 	bl	8002734 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	429a      	cmp	r2, r3
 8002780:	d8f7      	bhi.n	8002772 <HAL_Delay+0x26>
  {
  }
}
 8002782:	bf00      	nop
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000008 	.word	0x20000008

08002790 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	609a      	str	r2, [r3, #8]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	609a      	str	r2, [r3, #8]
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3360      	adds	r3, #96	@ 0x60
 800280a:	461a      	mov	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b08      	ldr	r3, [pc, #32]	@ (800283c <LL_ADC_SetOffset+0x44>)
 800281a:	4013      	ands	r3, r2
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	4313      	orrs	r3, r2
 8002828:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002830:	bf00      	nop
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	03fff000 	.word	0x03fff000

08002840 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3360      	adds	r3, #96	@ 0x60
 800284e:	461a      	mov	r2, r3
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	3360      	adds	r3, #96	@ 0x60
 800287c:	461a      	mov	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	431a      	orrs	r2, r3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002896:	bf00      	nop
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b087      	sub	sp, #28
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	3360      	adds	r3, #96	@ 0x60
 80028b2:	461a      	mov	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80028cc:	bf00      	nop
 80028ce:	371c      	adds	r7, #28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	3360      	adds	r3, #96	@ 0x60
 80028e8:	461a      	mov	r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	431a      	orrs	r2, r3
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002902:	bf00      	nop
 8002904:	371c      	adds	r7, #28
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	615a      	str	r2, [r3, #20]
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	3330      	adds	r3, #48	@ 0x30
 8002944:	461a      	mov	r2, r3
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	0a1b      	lsrs	r3, r3, #8
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	f003 030c 	and.w	r3, r3, #12
 8002950:	4413      	add	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	211f      	movs	r1, #31
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	401a      	ands	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	0e9b      	lsrs	r3, r3, #26
 800296c:	f003 011f 	and.w	r1, r3, #31
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	431a      	orrs	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002980:	bf00      	nop
 8002982:	371c      	adds	r7, #28
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	3314      	adds	r3, #20
 800299c:	461a      	mov	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	0e5b      	lsrs	r3, r3, #25
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	4413      	add	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	0d1b      	lsrs	r3, r3, #20
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	2107      	movs	r1, #7
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	401a      	ands	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	0d1b      	lsrs	r3, r3, #20
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	fa01 f303 	lsl.w	r3, r1, r3
 80029d0:	431a      	orrs	r2, r3
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029d6:	bf00      	nop
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fc:	43db      	mvns	r3, r3
 80029fe:	401a      	ands	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f003 0318 	and.w	r3, r3, #24
 8002a06:	4908      	ldr	r1, [pc, #32]	@ (8002a28 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a08:	40d9      	lsrs	r1, r3
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	400b      	ands	r3, r1
 8002a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a12:	431a      	orrs	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	0007ffff 	.word	0x0007ffff

08002a2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002a3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6093      	str	r3, [r2, #8]
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a64:	d101      	bne.n	8002a6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002a88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a8c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ab4:	d101      	bne.n	8002aba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <LL_ADC_IsEnabled+0x18>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <LL_ADC_IsEnabled+0x1a>
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d101      	bne.n	8002b06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d101      	bne.n	8002b2c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b3c:	b590      	push	{r4, r7, lr}
 8002b3e:	b089      	sub	sp, #36	@ 0x24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e167      	b.n	8002e26 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d109      	bne.n	8002b78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7fe fcb9 	bl	80014dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff67 	bl	8002a50 <LL_ADC_IsDeepPowerDownEnabled>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d004      	beq.n	8002b92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff4d 	bl	8002a2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff ff82 	bl	8002aa0 <LL_ADC_IsInternalRegulatorEnabled>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d115      	bne.n	8002bce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff ff66 	bl	8002a78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bac:	4ba0      	ldr	r3, [pc, #640]	@ (8002e30 <HAL_ADC_Init+0x2f4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	099b      	lsrs	r3, r3, #6
 8002bb2:	4aa0      	ldr	r2, [pc, #640]	@ (8002e34 <HAL_ADC_Init+0x2f8>)
 8002bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb8:	099b      	lsrs	r3, r3, #6
 8002bba:	3301      	adds	r3, #1
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bc0:	e002      	b.n	8002bc8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f9      	bne.n	8002bc2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff ff64 	bl	8002aa0 <LL_ADC_IsInternalRegulatorEnabled>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10d      	bne.n	8002bfa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be2:	f043 0210 	orr.w	r2, r3, #16
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bee:	f043 0201 	orr.w	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff ff75 	bl	8002aee <LL_ADC_REG_IsConversionOngoing>
 8002c04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f040 8100 	bne.w	8002e14 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f040 80fc 	bne.w	8002e14 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c20:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002c24:	f043 0202 	orr.w	r2, r3, #2
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ff49 	bl	8002ac8 <LL_ADC_IsEnabled>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d111      	bne.n	8002c60 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c3c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c40:	f7ff ff42 	bl	8002ac8 <LL_ADC_IsEnabled>
 8002c44:	4604      	mov	r4, r0
 8002c46:	487c      	ldr	r0, [pc, #496]	@ (8002e38 <HAL_ADC_Init+0x2fc>)
 8002c48:	f7ff ff3e 	bl	8002ac8 <LL_ADC_IsEnabled>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	4323      	orrs	r3, r4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d105      	bne.n	8002c60 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4878      	ldr	r0, [pc, #480]	@ (8002e3c <HAL_ADC_Init+0x300>)
 8002c5c:	f7ff fd98 	bl	8002790 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	7f5b      	ldrb	r3, [r3, #29]
 8002c64:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c6a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002c70:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002c76:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c7e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d106      	bne.n	8002c9c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c92:	3b01      	subs	r3, #1
 8002c94:	045b      	lsls	r3, r3, #17
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d009      	beq.n	8002cb8 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	4b60      	ldr	r3, [pc, #384]	@ (8002e40 <HAL_ADC_Init+0x304>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	69b9      	ldr	r1, [r7, #24]
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff ff14 	bl	8002b14 <LL_ADC_INJ_IsConversionOngoing>
 8002cec:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d16d      	bne.n	8002dd0 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d16a      	bne.n	8002dd0 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cfe:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d06:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d16:	f023 0302 	bic.w	r3, r3, #2
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6812      	ldr	r2, [r2, #0]
 8002d1e:	69b9      	ldr	r1, [r7, #24]
 8002d20:	430b      	orrs	r3, r1
 8002d22:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d017      	beq.n	8002d5c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002d3a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002d44:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002d48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6911      	ldr	r1, [r2, #16]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	430b      	orrs	r3, r1
 8002d56:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002d5a:	e013      	b.n	8002d84 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002d6a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002d7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d80:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d118      	bne.n	8002dc0 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002d98:	f023 0304 	bic.w	r3, r3, #4
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002da4:	4311      	orrs	r1, r2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002daa:	4311      	orrs	r1, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002db0:	430a      	orrs	r2, r1
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0201 	orr.w	r2, r2, #1
 8002dbc:	611a      	str	r2, [r3, #16]
 8002dbe:	e007      	b.n	8002dd0 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691a      	ldr	r2, [r3, #16]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0201 	bic.w	r2, r2, #1
 8002dce:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d10c      	bne.n	8002df2 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	f023 010f 	bic.w	r1, r3, #15
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	1e5a      	subs	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	631a      	str	r2, [r3, #48]	@ 0x30
 8002df0:	e007      	b.n	8002e02 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 020f 	bic.w	r2, r2, #15
 8002e00:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e06:	f023 0303 	bic.w	r3, r3, #3
 8002e0a:	f043 0201 	orr.w	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e12:	e007      	b.n	8002e24 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e18:	f043 0210 	orr.w	r2, r3, #16
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e24:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3724      	adds	r7, #36	@ 0x24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd90      	pop	{r4, r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000000 	.word	0x20000000
 8002e34:	053e2d63 	.word	0x053e2d63
 8002e38:	50000100 	.word	0x50000100
 8002e3c:	50000300 	.word	0x50000300
 8002e40:	fff04007 	.word	0xfff04007

08002e44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b0b6      	sub	sp, #216	@ 0xd8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x22>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e3c8      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x7b4>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fe3b 	bl	8002aee <LL_ADC_REG_IsConversionOngoing>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f040 83ad 	bne.w	80035da <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	6859      	ldr	r1, [r3, #4]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f7ff fd51 	bl	8002934 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fe29 	bl	8002aee <LL_ADC_REG_IsConversionOngoing>
 8002e9c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff fe35 	bl	8002b14 <LL_ADC_INJ_IsConversionOngoing>
 8002eaa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002eae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f040 81d9 	bne.w	800326a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002eb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f040 81d4 	bne.w	800326a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002eca:	d10f      	bne.n	8002eec <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f7ff fd58 	bl	800298c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fd12 	bl	800290e <LL_ADC_SetSamplingTimeCommonConfig>
 8002eea:	e00e      	b.n	8002f0a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	6819      	ldr	r1, [r3, #0]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	f7ff fd47 	bl	800298c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2100      	movs	r1, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fd02 	bl	800290e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	08db      	lsrs	r3, r3, #3
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d022      	beq.n	8002f72 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	6919      	ldr	r1, [r3, #16]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f3c:	f7ff fc5c 	bl	80027f8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	6919      	ldr	r1, [r3, #16]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f7ff fca8 	bl	80028a2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d102      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x124>
 8002f62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f66:	e000      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x126>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f7ff fcb4 	bl	80028d8 <LL_ADC_SetOffsetSaturation>
 8002f70:	e17b      	b.n	800326a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2100      	movs	r1, #0
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff fc61 	bl	8002840 <LL_ADC_GetOffsetChannel>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x15a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fc56 	bl	8002840 <LL_ADC_GetOffsetChannel>
 8002f94:	4603      	mov	r3, r0
 8002f96:	0e9b      	lsrs	r3, r3, #26
 8002f98:	f003 021f 	and.w	r2, r3, #31
 8002f9c:	e01e      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x198>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fc4b 	bl	8002840 <LL_ADC_GetOffsetChannel>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002fb4:	fa93 f3a3 	rbit	r3, r3
 8002fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002fc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002fc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002fcc:	2320      	movs	r3, #32
 8002fce:	e004      	b.n	8002fda <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002fd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fd4:	fab3 f383 	clz	r3, r3
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x1b0>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	0e9b      	lsrs	r3, r3, #26
 8002fee:	f003 031f 	and.w	r3, r3, #31
 8002ff2:	e018      	b.n	8003026 <HAL_ADC_ConfigChannel+0x1e2>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003008:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800300c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003010:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003018:	2320      	movs	r3, #32
 800301a:	e004      	b.n	8003026 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800301c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003020:	fab3 f383 	clz	r3, r3
 8003024:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003026:	429a      	cmp	r2, r3
 8003028:	d106      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2200      	movs	r2, #0
 8003030:	2100      	movs	r1, #0
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fc1a 	bl	800286c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2101      	movs	r1, #1
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fbfe 	bl	8002840 <LL_ADC_GetOffsetChannel>
 8003044:	4603      	mov	r3, r0
 8003046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10a      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x220>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2101      	movs	r1, #1
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fbf3 	bl	8002840 <LL_ADC_GetOffsetChannel>
 800305a:	4603      	mov	r3, r0
 800305c:	0e9b      	lsrs	r3, r3, #26
 800305e:	f003 021f 	and.w	r2, r3, #31
 8003062:	e01e      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x25e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2101      	movs	r1, #1
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fbe8 	bl	8002840 <LL_ADC_GetOffsetChannel>
 8003070:	4603      	mov	r3, r0
 8003072:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003082:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003086:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800308a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003092:	2320      	movs	r3, #32
 8003094:	e004      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003096:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800309a:	fab3 f383 	clz	r3, r3
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d105      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x276>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	0e9b      	lsrs	r3, r3, #26
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	e018      	b.n	80030ec <HAL_ADC_ConfigChannel+0x2a8>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80030ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80030d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80030de:	2320      	movs	r3, #32
 80030e0:	e004      	b.n	80030ec <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80030e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d106      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2200      	movs	r2, #0
 80030f6:	2101      	movs	r1, #1
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fbb7 	bl	800286c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2102      	movs	r1, #2
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff fb9b 	bl	8002840 <LL_ADC_GetOffsetChannel>
 800310a:	4603      	mov	r3, r0
 800310c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10a      	bne.n	800312a <HAL_ADC_ConfigChannel+0x2e6>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2102      	movs	r1, #2
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fb90 	bl	8002840 <LL_ADC_GetOffsetChannel>
 8003120:	4603      	mov	r3, r0
 8003122:	0e9b      	lsrs	r3, r3, #26
 8003124:	f003 021f 	and.w	r2, r3, #31
 8003128:	e01e      	b.n	8003168 <HAL_ADC_ConfigChannel+0x324>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2102      	movs	r1, #2
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fb85 	bl	8002840 <LL_ADC_GetOffsetChannel>
 8003136:	4603      	mov	r3, r0
 8003138:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003148:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800314c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003150:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003158:	2320      	movs	r3, #32
 800315a:	e004      	b.n	8003166 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800315c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003160:	fab3 f383 	clz	r3, r3
 8003164:	b2db      	uxtb	r3, r3
 8003166:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x33c>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	0e9b      	lsrs	r3, r3, #26
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	e016      	b.n	80031ae <HAL_ADC_ConfigChannel+0x36a>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003192:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003194:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003198:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80031a0:	2320      	movs	r3, #32
 80031a2:	e004      	b.n	80031ae <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80031a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031a8:	fab3 f383 	clz	r3, r3
 80031ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d106      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2200      	movs	r2, #0
 80031b8:	2102      	movs	r1, #2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fb56 	bl	800286c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2103      	movs	r1, #3
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fb3a 	bl	8002840 <LL_ADC_GetOffsetChannel>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10a      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x3a8>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2103      	movs	r1, #3
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fb2f 	bl	8002840 <LL_ADC_GetOffsetChannel>
 80031e2:	4603      	mov	r3, r0
 80031e4:	0e9b      	lsrs	r3, r3, #26
 80031e6:	f003 021f 	and.w	r2, r3, #31
 80031ea:	e017      	b.n	800321c <HAL_ADC_ConfigChannel+0x3d8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2103      	movs	r1, #3
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fb24 	bl	8002840 <LL_ADC_GetOffsetChannel>
 80031f8:	4603      	mov	r3, r0
 80031fa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003204:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003206:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003208:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800320e:	2320      	movs	r3, #32
 8003210:	e003      	b.n	800321a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003212:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003214:	fab3 f383 	clz	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003224:	2b00      	cmp	r3, #0
 8003226:	d105      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x3f0>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	0e9b      	lsrs	r3, r3, #26
 800322e:	f003 031f 	and.w	r3, r3, #31
 8003232:	e011      	b.n	8003258 <HAL_ADC_ConfigChannel+0x414>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800323c:	fa93 f3a3 	rbit	r3, r3
 8003240:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003242:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003244:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003246:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800324c:	2320      	movs	r3, #32
 800324e:	e003      	b.n	8003258 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003250:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003258:	429a      	cmp	r2, r3
 800325a:	d106      	bne.n	800326a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2200      	movs	r2, #0
 8003262:	2103      	movs	r1, #3
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fb01 	bl	800286c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fc2a 	bl	8002ac8 <LL_ADC_IsEnabled>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	f040 8140 	bne.w	80034fc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	461a      	mov	r2, r3
 800328a:	f7ff fbab 	bl	80029e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	4a8f      	ldr	r2, [pc, #572]	@ (80034d0 <HAL_ADC_ConfigChannel+0x68c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	f040 8131 	bne.w	80034fc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10b      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x47e>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	0e9b      	lsrs	r3, r3, #26
 80032b0:	3301      	adds	r3, #1
 80032b2:	f003 031f 	and.w	r3, r3, #31
 80032b6:	2b09      	cmp	r3, #9
 80032b8:	bf94      	ite	ls
 80032ba:	2301      	movls	r3, #1
 80032bc:	2300      	movhi	r3, #0
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	e019      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x4b2>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80032d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032d2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80032d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80032da:	2320      	movs	r3, #32
 80032dc:	e003      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80032de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032e0:	fab3 f383 	clz	r3, r3
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	3301      	adds	r3, #1
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	2b09      	cmp	r3, #9
 80032ee:	bf94      	ite	ls
 80032f0:	2301      	movls	r3, #1
 80032f2:	2300      	movhi	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d079      	beq.n	80033ee <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003302:	2b00      	cmp	r3, #0
 8003304:	d107      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x4d2>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	0e9b      	lsrs	r3, r3, #26
 800330c:	3301      	adds	r3, #1
 800330e:	069b      	lsls	r3, r3, #26
 8003310:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003314:	e015      	b.n	8003342 <HAL_ADC_ConfigChannel+0x4fe>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003324:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003326:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800332e:	2320      	movs	r3, #32
 8003330:	e003      	b.n	800333a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003334:	fab3 f383 	clz	r3, r3
 8003338:	b2db      	uxtb	r3, r3
 800333a:	3301      	adds	r3, #1
 800333c:	069b      	lsls	r3, r3, #26
 800333e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x51e>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	0e9b      	lsrs	r3, r3, #26
 8003354:	3301      	adds	r3, #1
 8003356:	f003 031f 	and.w	r3, r3, #31
 800335a:	2101      	movs	r1, #1
 800335c:	fa01 f303 	lsl.w	r3, r1, r3
 8003360:	e017      	b.n	8003392 <HAL_ADC_ConfigChannel+0x54e>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003370:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003372:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003374:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800337a:	2320      	movs	r3, #32
 800337c:	e003      	b.n	8003386 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800337e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003380:	fab3 f383 	clz	r3, r3
 8003384:	b2db      	uxtb	r3, r3
 8003386:	3301      	adds	r3, #1
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	2101      	movs	r1, #1
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	ea42 0103 	orr.w	r1, r2, r3
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10a      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x574>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	0e9b      	lsrs	r3, r3, #26
 80033a8:	3301      	adds	r3, #1
 80033aa:	f003 021f 	and.w	r2, r3, #31
 80033ae:	4613      	mov	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	051b      	lsls	r3, r3, #20
 80033b6:	e018      	b.n	80033ea <HAL_ADC_ConfigChannel+0x5a6>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c0:	fa93 f3a3 	rbit	r3, r3
 80033c4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80033c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80033ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80033d0:	2320      	movs	r3, #32
 80033d2:	e003      	b.n	80033dc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80033d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033d6:	fab3 f383 	clz	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	3301      	adds	r3, #1
 80033de:	f003 021f 	and.w	r2, r3, #31
 80033e2:	4613      	mov	r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4413      	add	r3, r2
 80033e8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033ea:	430b      	orrs	r3, r1
 80033ec:	e081      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d107      	bne.n	800340a <HAL_ADC_ConfigChannel+0x5c6>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	0e9b      	lsrs	r3, r3, #26
 8003400:	3301      	adds	r3, #1
 8003402:	069b      	lsls	r3, r3, #26
 8003404:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003408:	e015      	b.n	8003436 <HAL_ADC_ConfigChannel+0x5f2>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003412:	fa93 f3a3 	rbit	r3, r3
 8003416:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800341c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003422:	2320      	movs	r3, #32
 8003424:	e003      	b.n	800342e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003428:	fab3 f383 	clz	r3, r3
 800342c:	b2db      	uxtb	r3, r3
 800342e:	3301      	adds	r3, #1
 8003430:	069b      	lsls	r3, r3, #26
 8003432:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x612>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	0e9b      	lsrs	r3, r3, #26
 8003448:	3301      	adds	r3, #1
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	2101      	movs	r1, #1
 8003450:	fa01 f303 	lsl.w	r3, r1, r3
 8003454:	e017      	b.n	8003486 <HAL_ADC_ConfigChannel+0x642>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	61fb      	str	r3, [r7, #28]
  return result;
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800346e:	2320      	movs	r3, #32
 8003470:	e003      	b.n	800347a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003474:	fab3 f383 	clz	r3, r3
 8003478:	b2db      	uxtb	r3, r3
 800347a:	3301      	adds	r3, #1
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	2101      	movs	r1, #1
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	ea42 0103 	orr.w	r1, r2, r3
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10d      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x66e>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	0e9b      	lsrs	r3, r3, #26
 800349c:	3301      	adds	r3, #1
 800349e:	f003 021f 	and.w	r2, r3, #31
 80034a2:	4613      	mov	r3, r2
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4413      	add	r3, r2
 80034a8:	3b1e      	subs	r3, #30
 80034aa:	051b      	lsls	r3, r3, #20
 80034ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034b0:	e01e      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x6ac>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	613b      	str	r3, [r7, #16]
  return result;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d104      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80034ca:	2320      	movs	r3, #32
 80034cc:	e006      	b.n	80034dc <HAL_ADC_ConfigChannel+0x698>
 80034ce:	bf00      	nop
 80034d0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	fab3 f383 	clz	r3, r3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	3301      	adds	r3, #1
 80034de:	f003 021f 	and.w	r2, r3, #31
 80034e2:	4613      	mov	r3, r2
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	4413      	add	r3, r2
 80034e8:	3b1e      	subs	r3, #30
 80034ea:	051b      	lsls	r3, r3, #20
 80034ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034f0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034f6:	4619      	mov	r1, r3
 80034f8:	f7ff fa48 	bl	800298c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4b3f      	ldr	r3, [pc, #252]	@ (8003600 <HAL_ADC_ConfigChannel+0x7bc>)
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d071      	beq.n	80035ec <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003508:	483e      	ldr	r0, [pc, #248]	@ (8003604 <HAL_ADC_ConfigChannel+0x7c0>)
 800350a:	f7ff f967 	bl	80027dc <LL_ADC_GetCommonPathInternalCh>
 800350e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a3c      	ldr	r2, [pc, #240]	@ (8003608 <HAL_ADC_ConfigChannel+0x7c4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d004      	beq.n	8003526 <HAL_ADC_ConfigChannel+0x6e2>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a3a      	ldr	r2, [pc, #232]	@ (800360c <HAL_ADC_ConfigChannel+0x7c8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d127      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003526:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800352a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d121      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800353a:	d157      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800353c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003540:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003544:	4619      	mov	r1, r3
 8003546:	482f      	ldr	r0, [pc, #188]	@ (8003604 <HAL_ADC_ConfigChannel+0x7c0>)
 8003548:	f7ff f935 	bl	80027b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800354c:	4b30      	ldr	r3, [pc, #192]	@ (8003610 <HAL_ADC_ConfigChannel+0x7cc>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	099b      	lsrs	r3, r3, #6
 8003552:	4a30      	ldr	r2, [pc, #192]	@ (8003614 <HAL_ADC_ConfigChannel+0x7d0>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	099b      	lsrs	r3, r3, #6
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	4613      	mov	r3, r2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003566:	e002      	b.n	800356e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	3b01      	subs	r3, #1
 800356c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1f9      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003574:	e03a      	b.n	80035ec <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a27      	ldr	r2, [pc, #156]	@ (8003618 <HAL_ADC_ConfigChannel+0x7d4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d113      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003580:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003584:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10d      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a22      	ldr	r2, [pc, #136]	@ (800361c <HAL_ADC_ConfigChannel+0x7d8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d02a      	beq.n	80035ec <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003596:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800359a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800359e:	4619      	mov	r1, r3
 80035a0:	4818      	ldr	r0, [pc, #96]	@ (8003604 <HAL_ADC_ConfigChannel+0x7c0>)
 80035a2:	f7ff f908 	bl	80027b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035a6:	e021      	b.n	80035ec <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003620 <HAL_ADC_ConfigChannel+0x7dc>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d11c      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d116      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a16      	ldr	r2, [pc, #88]	@ (800361c <HAL_ADC_ConfigChannel+0x7d8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d011      	beq.n	80035ec <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035d0:	4619      	mov	r1, r3
 80035d2:	480c      	ldr	r0, [pc, #48]	@ (8003604 <HAL_ADC_ConfigChannel+0x7c0>)
 80035d4:	f7ff f8ef 	bl	80027b6 <LL_ADC_SetCommonPathInternalCh>
 80035d8:	e008      	b.n	80035ec <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035de:	f043 0220 	orr.w	r2, r3, #32
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80035f4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	37d8      	adds	r7, #216	@ 0xd8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	80080000 	.word	0x80080000
 8003604:	50000300 	.word	0x50000300
 8003608:	c3210000 	.word	0xc3210000
 800360c:	90c00010 	.word	0x90c00010
 8003610:	20000000 	.word	0x20000000
 8003614:	053e2d63 	.word	0x053e2d63
 8003618:	c7520000 	.word	0xc7520000
 800361c:	50000100 	.word	0x50000100
 8003620:	cb840000 	.word	0xcb840000

08003624 <LL_ADC_IsEnabled>:
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <LL_ADC_IsEnabled+0x18>
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <LL_ADC_IsEnabled+0x1a>
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <LL_ADC_REG_IsConversionOngoing>:
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b04      	cmp	r3, #4
 800365c:	d101      	bne.n	8003662 <LL_ADC_REG_IsConversionOngoing+0x18>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003670:	b590      	push	{r4, r7, lr}
 8003672:	b0a1      	sub	sp, #132	@ 0x84
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800368a:	2302      	movs	r3, #2
 800368c:	e08b      	b.n	80037a6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003696:	2300      	movs	r3, #0
 8003698:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800369a:	2300      	movs	r3, #0
 800369c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036a6:	d102      	bne.n	80036ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80036a8:	4b41      	ldr	r3, [pc, #260]	@ (80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80036aa:	60bb      	str	r3, [r7, #8]
 80036ac:	e001      	b.n	80036b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80036ae:	2300      	movs	r3, #0
 80036b0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10b      	bne.n	80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036bc:	f043 0220 	orr.w	r2, r3, #32
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e06a      	b.n	80037a6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff ffb9 	bl	800364a <LL_ADC_REG_IsConversionOngoing>
 80036d8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff ffb3 	bl	800364a <LL_ADC_REG_IsConversionOngoing>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d14c      	bne.n	8003784 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80036ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d149      	bne.n	8003784 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036f0:	4b30      	ldr	r3, [pc, #192]	@ (80037b4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80036f2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d028      	beq.n	800374e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80036fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	6859      	ldr	r1, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800370e:	035b      	lsls	r3, r3, #13
 8003710:	430b      	orrs	r3, r1
 8003712:	431a      	orrs	r2, r3
 8003714:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003716:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003718:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800371c:	f7ff ff82 	bl	8003624 <LL_ADC_IsEnabled>
 8003720:	4604      	mov	r4, r0
 8003722:	4823      	ldr	r0, [pc, #140]	@ (80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003724:	f7ff ff7e 	bl	8003624 <LL_ADC_IsEnabled>
 8003728:	4603      	mov	r3, r0
 800372a:	4323      	orrs	r3, r4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d133      	bne.n	8003798 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003730:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003738:	f023 030f 	bic.w	r3, r3, #15
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	6811      	ldr	r1, [r2, #0]
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	6892      	ldr	r2, [r2, #8]
 8003744:	430a      	orrs	r2, r1
 8003746:	431a      	orrs	r2, r3
 8003748:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800374a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800374c:	e024      	b.n	8003798 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800374e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003756:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003758:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800375a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800375e:	f7ff ff61 	bl	8003624 <LL_ADC_IsEnabled>
 8003762:	4604      	mov	r4, r0
 8003764:	4812      	ldr	r0, [pc, #72]	@ (80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003766:	f7ff ff5d 	bl	8003624 <LL_ADC_IsEnabled>
 800376a:	4603      	mov	r3, r0
 800376c:	4323      	orrs	r3, r4
 800376e:	2b00      	cmp	r3, #0
 8003770:	d112      	bne.n	8003798 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003772:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800377a:	f023 030f 	bic.w	r3, r3, #15
 800377e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003780:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003782:	e009      	b.n	8003798 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003788:	f043 0220 	orr.w	r2, r3, #32
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003796:	e000      	b.n	800379a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003798:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80037a2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3784      	adds	r7, #132	@ 0x84
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd90      	pop	{r4, r7, pc}
 80037ae:	bf00      	nop
 80037b0:	50000100 	.word	0x50000100
 80037b4:	50000300 	.word	0x50000300

080037b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037c8:	4b0c      	ldr	r3, [pc, #48]	@ (80037fc <__NVIC_SetPriorityGrouping+0x44>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037d4:	4013      	ands	r3, r2
 80037d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ea:	4a04      	ldr	r2, [pc, #16]	@ (80037fc <__NVIC_SetPriorityGrouping+0x44>)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	60d3      	str	r3, [r2, #12]
}
 80037f0:	bf00      	nop
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003804:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <__NVIC_GetPriorityGrouping+0x18>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	0a1b      	lsrs	r3, r3, #8
 800380a:	f003 0307 	and.w	r3, r3, #7
}
 800380e:	4618      	mov	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	2b00      	cmp	r3, #0
 800382c:	db0b      	blt.n	8003846 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	f003 021f 	and.w	r2, r3, #31
 8003834:	4907      	ldr	r1, [pc, #28]	@ (8003854 <__NVIC_EnableIRQ+0x38>)
 8003836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	2001      	movs	r0, #1
 800383e:	fa00 f202 	lsl.w	r2, r0, r2
 8003842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	e000e100 	.word	0xe000e100

08003858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	6039      	str	r1, [r7, #0]
 8003862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003868:	2b00      	cmp	r3, #0
 800386a:	db0a      	blt.n	8003882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	b2da      	uxtb	r2, r3
 8003870:	490c      	ldr	r1, [pc, #48]	@ (80038a4 <__NVIC_SetPriority+0x4c>)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	0112      	lsls	r2, r2, #4
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	440b      	add	r3, r1
 800387c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003880:	e00a      	b.n	8003898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	4908      	ldr	r1, [pc, #32]	@ (80038a8 <__NVIC_SetPriority+0x50>)
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	3b04      	subs	r3, #4
 8003890:	0112      	lsls	r2, r2, #4
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	440b      	add	r3, r1
 8003896:	761a      	strb	r2, [r3, #24]
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	e000e100 	.word	0xe000e100
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b089      	sub	sp, #36	@ 0x24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f1c3 0307 	rsb	r3, r3, #7
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	bf28      	it	cs
 80038ca:	2304      	movcs	r3, #4
 80038cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	3304      	adds	r3, #4
 80038d2:	2b06      	cmp	r3, #6
 80038d4:	d902      	bls.n	80038dc <NVIC_EncodePriority+0x30>
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3b03      	subs	r3, #3
 80038da:	e000      	b.n	80038de <NVIC_EncodePriority+0x32>
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e0:	f04f 32ff 	mov.w	r2, #4294967295
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43da      	mvns	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	401a      	ands	r2, r3
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038f4:	f04f 31ff 	mov.w	r1, #4294967295
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	fa01 f303 	lsl.w	r3, r1, r3
 80038fe:	43d9      	mvns	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003904:	4313      	orrs	r3, r2
         );
}
 8003906:	4618      	mov	r0, r3
 8003908:	3724      	adds	r7, #36	@ 0x24
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff ff4c 	bl	80037b8 <__NVIC_SetPriorityGrouping>
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003936:	f7ff ff63 	bl	8003800 <__NVIC_GetPriorityGrouping>
 800393a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	6978      	ldr	r0, [r7, #20]
 8003942:	f7ff ffb3 	bl	80038ac <NVIC_EncodePriority>
 8003946:	4602      	mov	r2, r0
 8003948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800394c:	4611      	mov	r1, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff ff82 	bl	8003858 <__NVIC_SetPriority>
}
 8003954:	bf00      	nop
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff ff56 	bl	800381c <__NVIC_EnableIRQ>
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d005      	beq.n	800399c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2204      	movs	r2, #4
 8003994:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	73fb      	strb	r3, [r7, #15]
 800399a:	e037      	b.n	8003a0c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 020e 	bic.w	r2, r2, #14
 80039aa:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039ba:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0201 	bic.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d0:	f003 021f 	and.w	r2, r3, #31
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d8:	2101      	movs	r1, #1
 80039da:	fa01 f202 	lsl.w	r2, r1, r2
 80039de:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039e8:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00c      	beq.n	8003a0c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a00:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a0a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d00d      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2204      	movs	r2, #4
 8003a46:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
 8003a5c:	e047      	b.n	8003aee <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 020e 	bic.w	r2, r2, #14
 8003a6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a92:	f003 021f 	and.w	r2, r3, #31
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003aaa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00c      	beq.n	8003ace <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003abe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ac2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003acc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	4798      	blx	r3
    }
  }
  return status;
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b06:	e15a      	b.n	8003dbe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	fa01 f303 	lsl.w	r3, r1, r3
 8003b14:	4013      	ands	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 814c 	beq.w	8003db8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d005      	beq.n	8003b38 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d130      	bne.n	8003b9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	2203      	movs	r2, #3
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b6e:	2201      	movs	r2, #1
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43db      	mvns	r3, r3
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	091b      	lsrs	r3, r3, #4
 8003b84:	f003 0201 	and.w	r2, r3, #1
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d017      	beq.n	8003bd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d123      	bne.n	8003c2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	08da      	lsrs	r2, r3, #3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3208      	adds	r2, #8
 8003bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	220f      	movs	r2, #15
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4013      	ands	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	08da      	lsrs	r2, r3, #3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3208      	adds	r2, #8
 8003c24:	6939      	ldr	r1, [r7, #16]
 8003c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	2203      	movs	r2, #3
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f003 0203 	and.w	r2, r3, #3
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 80a6 	beq.w	8003db8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c6c:	4b5b      	ldr	r3, [pc, #364]	@ (8003ddc <HAL_GPIO_Init+0x2e4>)
 8003c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c70:	4a5a      	ldr	r2, [pc, #360]	@ (8003ddc <HAL_GPIO_Init+0x2e4>)
 8003c72:	f043 0301 	orr.w	r3, r3, #1
 8003c76:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c78:	4b58      	ldr	r3, [pc, #352]	@ (8003ddc <HAL_GPIO_Init+0x2e4>)
 8003c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c84:	4a56      	ldr	r2, [pc, #344]	@ (8003de0 <HAL_GPIO_Init+0x2e8>)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	089b      	lsrs	r3, r3, #2
 8003c8a:	3302      	adds	r3, #2
 8003c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	220f      	movs	r2, #15
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003cae:	d01f      	beq.n	8003cf0 <HAL_GPIO_Init+0x1f8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a4c      	ldr	r2, [pc, #304]	@ (8003de4 <HAL_GPIO_Init+0x2ec>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d019      	beq.n	8003cec <HAL_GPIO_Init+0x1f4>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a4b      	ldr	r2, [pc, #300]	@ (8003de8 <HAL_GPIO_Init+0x2f0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d013      	beq.n	8003ce8 <HAL_GPIO_Init+0x1f0>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a4a      	ldr	r2, [pc, #296]	@ (8003dec <HAL_GPIO_Init+0x2f4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00d      	beq.n	8003ce4 <HAL_GPIO_Init+0x1ec>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a49      	ldr	r2, [pc, #292]	@ (8003df0 <HAL_GPIO_Init+0x2f8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d007      	beq.n	8003ce0 <HAL_GPIO_Init+0x1e8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a48      	ldr	r2, [pc, #288]	@ (8003df4 <HAL_GPIO_Init+0x2fc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d101      	bne.n	8003cdc <HAL_GPIO_Init+0x1e4>
 8003cd8:	2305      	movs	r3, #5
 8003cda:	e00a      	b.n	8003cf2 <HAL_GPIO_Init+0x1fa>
 8003cdc:	2306      	movs	r3, #6
 8003cde:	e008      	b.n	8003cf2 <HAL_GPIO_Init+0x1fa>
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	e006      	b.n	8003cf2 <HAL_GPIO_Init+0x1fa>
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e004      	b.n	8003cf2 <HAL_GPIO_Init+0x1fa>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e002      	b.n	8003cf2 <HAL_GPIO_Init+0x1fa>
 8003cec:	2301      	movs	r3, #1
 8003cee:	e000      	b.n	8003cf2 <HAL_GPIO_Init+0x1fa>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	f002 0203 	and.w	r2, r2, #3
 8003cf8:	0092      	lsls	r2, r2, #2
 8003cfa:	4093      	lsls	r3, r2
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d02:	4937      	ldr	r1, [pc, #220]	@ (8003de0 <HAL_GPIO_Init+0x2e8>)
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	089b      	lsrs	r3, r3, #2
 8003d08:	3302      	adds	r3, #2
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d10:	4b39      	ldr	r3, [pc, #228]	@ (8003df8 <HAL_GPIO_Init+0x300>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d34:	4a30      	ldr	r2, [pc, #192]	@ (8003df8 <HAL_GPIO_Init+0x300>)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d3a:	4b2f      	ldr	r3, [pc, #188]	@ (8003df8 <HAL_GPIO_Init+0x300>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	43db      	mvns	r3, r3
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4013      	ands	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d5e:	4a26      	ldr	r2, [pc, #152]	@ (8003df8 <HAL_GPIO_Init+0x300>)
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003d64:	4b24      	ldr	r3, [pc, #144]	@ (8003df8 <HAL_GPIO_Init+0x300>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4013      	ands	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d88:	4a1b      	ldr	r2, [pc, #108]	@ (8003df8 <HAL_GPIO_Init+0x300>)
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8003df8 <HAL_GPIO_Init+0x300>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	43db      	mvns	r3, r3
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003db2:	4a11      	ldr	r2, [pc, #68]	@ (8003df8 <HAL_GPIO_Init+0x300>)
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f47f ae9d 	bne.w	8003b08 <HAL_GPIO_Init+0x10>
  }
}
 8003dce:	bf00      	nop
 8003dd0:	bf00      	nop
 8003dd2:	371c      	adds	r7, #28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	40010000 	.word	0x40010000
 8003de4:	48000400 	.word	0x48000400
 8003de8:	48000800 	.word	0x48000800
 8003dec:	48000c00 	.word	0x48000c00
 8003df0:	48001000 	.word	0x48001000
 8003df4:	48001400 	.word	0x48001400
 8003df8:	40010400 	.word	0x40010400

08003dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	807b      	strh	r3, [r7, #2]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e0c:	787b      	ldrb	r3, [r7, #1]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e12:	887a      	ldrh	r2, [r7, #2]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e18:	e002      	b.n	8003e20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e1a:	887a      	ldrh	r2, [r7, #2]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e3e:	887a      	ldrh	r2, [r7, #2]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4013      	ands	r3, r2
 8003e44:	041a      	lsls	r2, r3, #16
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	43d9      	mvns	r1, r3
 8003e4a:	887b      	ldrh	r3, [r7, #2]
 8003e4c:	400b      	ands	r3, r1
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	619a      	str	r2, [r3, #24]
}
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e08d      	b.n	8003f8e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fd fc7c 	bl	8001784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2224      	movs	r2, #36	@ 0x24
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0201 	bic.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003eb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ec0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d107      	bne.n	8003eda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ed6:	609a      	str	r2, [r3, #8]
 8003ed8:	e006      	b.n	8003ee8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003ee6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d108      	bne.n	8003f02 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003efe:	605a      	str	r2, [r3, #4]
 8003f00:	e007      	b.n	8003f12 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6812      	ldr	r2, [r2, #0]
 8003f1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69d9      	ldr	r1, [r3, #28]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1a      	ldr	r2, [r3, #32]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d138      	bne.n	800401e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e032      	b.n	8004020 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2224      	movs	r2, #36	@ 0x24
 8003fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0201 	bic.w	r2, r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003fe8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6819      	ldr	r1, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0201 	orr.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	e000      	b.n	8004020 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800401e:	2302      	movs	r3, #2
  }
}
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b20      	cmp	r3, #32
 8004040:	d139      	bne.n	80040b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800404c:	2302      	movs	r3, #2
 800404e:	e033      	b.n	80040b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2224      	movs	r2, #36	@ 0x24
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0201 	bic.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800407e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0201 	orr.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	e000      	b.n	80040b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040b6:	2302      	movs	r3, #2
  }
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d141      	bne.n	8004156 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040d2:	4b4b      	ldr	r3, [pc, #300]	@ (8004200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040de:	d131      	bne.n	8004144 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040e0:	4b47      	ldr	r3, [pc, #284]	@ (8004200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040e6:	4a46      	ldr	r2, [pc, #280]	@ (8004200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040f0:	4b43      	ldr	r3, [pc, #268]	@ (8004200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040f8:	4a41      	ldr	r2, [pc, #260]	@ (8004200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004100:	4b40      	ldr	r3, [pc, #256]	@ (8004204 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2232      	movs	r2, #50	@ 0x32
 8004106:	fb02 f303 	mul.w	r3, r2, r3
 800410a:	4a3f      	ldr	r2, [pc, #252]	@ (8004208 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800410c:	fba2 2303 	umull	r2, r3, r2, r3
 8004110:	0c9b      	lsrs	r3, r3, #18
 8004112:	3301      	adds	r3, #1
 8004114:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004116:	e002      	b.n	800411e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3b01      	subs	r3, #1
 800411c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800411e:	4b38      	ldr	r3, [pc, #224]	@ (8004200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800412a:	d102      	bne.n	8004132 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f2      	bne.n	8004118 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004132:	4b33      	ldr	r3, [pc, #204]	@ (8004200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800413a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800413e:	d158      	bne.n	80041f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e057      	b.n	80041f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004144:	4b2e      	ldr	r3, [pc, #184]	@ (8004200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800414a:	4a2d      	ldr	r2, [pc, #180]	@ (8004200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800414c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004150:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004154:	e04d      	b.n	80041f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800415c:	d141      	bne.n	80041e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800415e:	4b28      	ldr	r3, [pc, #160]	@ (8004200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800416a:	d131      	bne.n	80041d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800416c:	4b24      	ldr	r3, [pc, #144]	@ (8004200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800416e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004172:	4a23      	ldr	r2, [pc, #140]	@ (8004200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004178:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800417c:	4b20      	ldr	r3, [pc, #128]	@ (8004200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004184:	4a1e      	ldr	r2, [pc, #120]	@ (8004200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004186:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800418a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800418c:	4b1d      	ldr	r3, [pc, #116]	@ (8004204 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2232      	movs	r2, #50	@ 0x32
 8004192:	fb02 f303 	mul.w	r3, r2, r3
 8004196:	4a1c      	ldr	r2, [pc, #112]	@ (8004208 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004198:	fba2 2303 	umull	r2, r3, r2, r3
 800419c:	0c9b      	lsrs	r3, r3, #18
 800419e:	3301      	adds	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041a2:	e002      	b.n	80041aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041aa:	4b15      	ldr	r3, [pc, #84]	@ (8004200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041b6:	d102      	bne.n	80041be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f2      	bne.n	80041a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041be:	4b10      	ldr	r3, [pc, #64]	@ (8004200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ca:	d112      	bne.n	80041f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e011      	b.n	80041f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80041e0:	e007      	b.n	80041f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041e2:	4b07      	ldr	r3, [pc, #28]	@ (8004200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80041ea:	4a05      	ldr	r2, [pc, #20]	@ (8004200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	40007000 	.word	0x40007000
 8004204:	20000000 	.word	0x20000000
 8004208:	431bde83 	.word	0x431bde83

0800420c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004210:	4b05      	ldr	r3, [pc, #20]	@ (8004228 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	4a04      	ldr	r2, [pc, #16]	@ (8004228 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004216:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800421a:	6093      	str	r3, [r2, #8]
}
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40007000 	.word	0x40007000

0800422c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e2fe      	b.n	800483c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d075      	beq.n	8004336 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800424a:	4b97      	ldr	r3, [pc, #604]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 030c 	and.w	r3, r3, #12
 8004252:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004254:	4b94      	ldr	r3, [pc, #592]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b0c      	cmp	r3, #12
 8004262:	d102      	bne.n	800426a <HAL_RCC_OscConfig+0x3e>
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2b03      	cmp	r3, #3
 8004268:	d002      	beq.n	8004270 <HAL_RCC_OscConfig+0x44>
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	2b08      	cmp	r3, #8
 800426e:	d10b      	bne.n	8004288 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004270:	4b8d      	ldr	r3, [pc, #564]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d05b      	beq.n	8004334 <HAL_RCC_OscConfig+0x108>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d157      	bne.n	8004334 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e2d9      	b.n	800483c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004290:	d106      	bne.n	80042a0 <HAL_RCC_OscConfig+0x74>
 8004292:	4b85      	ldr	r3, [pc, #532]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a84      	ldr	r2, [pc, #528]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 8004298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	e01d      	b.n	80042dc <HAL_RCC_OscConfig+0xb0>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042a8:	d10c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x98>
 80042aa:	4b7f      	ldr	r3, [pc, #508]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a7e      	ldr	r2, [pc, #504]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 80042b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	4b7c      	ldr	r3, [pc, #496]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a7b      	ldr	r2, [pc, #492]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 80042bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	e00b      	b.n	80042dc <HAL_RCC_OscConfig+0xb0>
 80042c4:	4b78      	ldr	r3, [pc, #480]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a77      	ldr	r2, [pc, #476]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 80042ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	4b75      	ldr	r3, [pc, #468]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a74      	ldr	r2, [pc, #464]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 80042d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d013      	beq.n	800430c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e4:	f7fe fa26 	bl	8002734 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ec:	f7fe fa22 	bl	8002734 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b64      	cmp	r3, #100	@ 0x64
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e29e      	b.n	800483c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042fe:	4b6a      	ldr	r3, [pc, #424]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f0      	beq.n	80042ec <HAL_RCC_OscConfig+0xc0>
 800430a:	e014      	b.n	8004336 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430c:	f7fe fa12 	bl	8002734 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004314:	f7fe fa0e 	bl	8002734 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b64      	cmp	r3, #100	@ 0x64
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e28a      	b.n	800483c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004326:	4b60      	ldr	r3, [pc, #384]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f0      	bne.n	8004314 <HAL_RCC_OscConfig+0xe8>
 8004332:	e000      	b.n	8004336 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d075      	beq.n	800442e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004342:	4b59      	ldr	r3, [pc, #356]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 030c 	and.w	r3, r3, #12
 800434a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800434c:	4b56      	ldr	r3, [pc, #344]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	2b0c      	cmp	r3, #12
 800435a:	d102      	bne.n	8004362 <HAL_RCC_OscConfig+0x136>
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2b02      	cmp	r3, #2
 8004360:	d002      	beq.n	8004368 <HAL_RCC_OscConfig+0x13c>
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2b04      	cmp	r3, #4
 8004366:	d11f      	bne.n	80043a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004368:	4b4f      	ldr	r3, [pc, #316]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004370:	2b00      	cmp	r3, #0
 8004372:	d005      	beq.n	8004380 <HAL_RCC_OscConfig+0x154>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e25d      	b.n	800483c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004380:	4b49      	ldr	r3, [pc, #292]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	061b      	lsls	r3, r3, #24
 800438e:	4946      	ldr	r1, [pc, #280]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 8004390:	4313      	orrs	r3, r2
 8004392:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004394:	4b45      	ldr	r3, [pc, #276]	@ (80044ac <HAL_RCC_OscConfig+0x280>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7fd fbab 	bl	8001af4 <HAL_InitTick>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d043      	beq.n	800442c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e249      	b.n	800483c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d023      	beq.n	80043f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b0:	4b3d      	ldr	r3, [pc, #244]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a3c      	ldr	r2, [pc, #240]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 80043b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fe f9ba 	bl	8002734 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c4:	f7fe f9b6 	bl	8002734 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e232      	b.n	800483c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043d6:	4b34      	ldr	r3, [pc, #208]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e2:	4b31      	ldr	r3, [pc, #196]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	061b      	lsls	r3, r3, #24
 80043f0:	492d      	ldr	r1, [pc, #180]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	604b      	str	r3, [r1, #4]
 80043f6:	e01a      	b.n	800442e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043f8:	4b2b      	ldr	r3, [pc, #172]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a2a      	ldr	r2, [pc, #168]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 80043fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7fe f996 	bl	8002734 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800440c:	f7fe f992 	bl	8002734 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e20e      	b.n	800483c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800441e:	4b22      	ldr	r3, [pc, #136]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f0      	bne.n	800440c <HAL_RCC_OscConfig+0x1e0>
 800442a:	e000      	b.n	800442e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800442c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d041      	beq.n	80044be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d01c      	beq.n	800447c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004442:	4b19      	ldr	r3, [pc, #100]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 8004444:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004448:	4a17      	ldr	r2, [pc, #92]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004452:	f7fe f96f 	bl	8002734 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800445a:	f7fe f96b 	bl	8002734 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e1e7      	b.n	800483c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800446c:	4b0e      	ldr	r3, [pc, #56]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 800446e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0ef      	beq.n	800445a <HAL_RCC_OscConfig+0x22e>
 800447a:	e020      	b.n	80044be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800447c:	4b0a      	ldr	r3, [pc, #40]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 800447e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004482:	4a09      	ldr	r2, [pc, #36]	@ (80044a8 <HAL_RCC_OscConfig+0x27c>)
 8004484:	f023 0301 	bic.w	r3, r3, #1
 8004488:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448c:	f7fe f952 	bl	8002734 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004492:	e00d      	b.n	80044b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004494:	f7fe f94e 	bl	8002734 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d906      	bls.n	80044b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e1ca      	b.n	800483c <HAL_RCC_OscConfig+0x610>
 80044a6:	bf00      	nop
 80044a8:	40021000 	.word	0x40021000
 80044ac:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044b0:	4b8c      	ldr	r3, [pc, #560]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 80044b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1ea      	bne.n	8004494 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 80a6 	beq.w	8004618 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044cc:	2300      	movs	r3, #0
 80044ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044d0:	4b84      	ldr	r3, [pc, #528]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 80044d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_RCC_OscConfig+0x2b4>
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <HAL_RCC_OscConfig+0x2b6>
 80044e0:	2300      	movs	r3, #0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00d      	beq.n	8004502 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044e6:	4b7f      	ldr	r3, [pc, #508]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 80044e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ea:	4a7e      	ldr	r2, [pc, #504]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 80044ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80044f2:	4b7c      	ldr	r3, [pc, #496]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 80044f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044fe:	2301      	movs	r3, #1
 8004500:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004502:	4b79      	ldr	r3, [pc, #484]	@ (80046e8 <HAL_RCC_OscConfig+0x4bc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450a:	2b00      	cmp	r3, #0
 800450c:	d118      	bne.n	8004540 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800450e:	4b76      	ldr	r3, [pc, #472]	@ (80046e8 <HAL_RCC_OscConfig+0x4bc>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a75      	ldr	r2, [pc, #468]	@ (80046e8 <HAL_RCC_OscConfig+0x4bc>)
 8004514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800451a:	f7fe f90b 	bl	8002734 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004522:	f7fe f907 	bl	8002734 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e183      	b.n	800483c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004534:	4b6c      	ldr	r3, [pc, #432]	@ (80046e8 <HAL_RCC_OscConfig+0x4bc>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0f0      	beq.n	8004522 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d108      	bne.n	800455a <HAL_RCC_OscConfig+0x32e>
 8004548:	4b66      	ldr	r3, [pc, #408]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800454e:	4a65      	ldr	r2, [pc, #404]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004558:	e024      	b.n	80045a4 <HAL_RCC_OscConfig+0x378>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b05      	cmp	r3, #5
 8004560:	d110      	bne.n	8004584 <HAL_RCC_OscConfig+0x358>
 8004562:	4b60      	ldr	r3, [pc, #384]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 8004564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004568:	4a5e      	ldr	r2, [pc, #376]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 800456a:	f043 0304 	orr.w	r3, r3, #4
 800456e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004572:	4b5c      	ldr	r3, [pc, #368]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 8004574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004578:	4a5a      	ldr	r2, [pc, #360]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004582:	e00f      	b.n	80045a4 <HAL_RCC_OscConfig+0x378>
 8004584:	4b57      	ldr	r3, [pc, #348]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800458a:	4a56      	ldr	r2, [pc, #344]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 800458c:	f023 0301 	bic.w	r3, r3, #1
 8004590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004594:	4b53      	ldr	r3, [pc, #332]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800459a:	4a52      	ldr	r2, [pc, #328]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 800459c:	f023 0304 	bic.w	r3, r3, #4
 80045a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d016      	beq.n	80045da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ac:	f7fe f8c2 	bl	8002734 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045b2:	e00a      	b.n	80045ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b4:	f7fe f8be 	bl	8002734 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e138      	b.n	800483c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ca:	4b46      	ldr	r3, [pc, #280]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 80045cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0ed      	beq.n	80045b4 <HAL_RCC_OscConfig+0x388>
 80045d8:	e015      	b.n	8004606 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045da:	f7fe f8ab 	bl	8002734 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045e0:	e00a      	b.n	80045f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e2:	f7fe f8a7 	bl	8002734 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e121      	b.n	800483c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045f8:	4b3a      	ldr	r3, [pc, #232]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1ed      	bne.n	80045e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004606:	7ffb      	ldrb	r3, [r7, #31]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d105      	bne.n	8004618 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460c:	4b35      	ldr	r3, [pc, #212]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 800460e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004610:	4a34      	ldr	r2, [pc, #208]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 8004612:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004616:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d03c      	beq.n	800469e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01c      	beq.n	8004666 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800462c:	4b2d      	ldr	r3, [pc, #180]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 800462e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004632:	4a2c      	ldr	r2, [pc, #176]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 8004634:	f043 0301 	orr.w	r3, r3, #1
 8004638:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463c:	f7fe f87a 	bl	8002734 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004644:	f7fe f876 	bl	8002734 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e0f2      	b.n	800483c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004656:	4b23      	ldr	r3, [pc, #140]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 8004658:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0ef      	beq.n	8004644 <HAL_RCC_OscConfig+0x418>
 8004664:	e01b      	b.n	800469e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004666:	4b1f      	ldr	r3, [pc, #124]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 8004668:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800466c:	4a1d      	ldr	r2, [pc, #116]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 800466e:	f023 0301 	bic.w	r3, r3, #1
 8004672:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004676:	f7fe f85d 	bl	8002734 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800467e:	f7fe f859 	bl	8002734 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e0d5      	b.n	800483c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004690:	4b14      	ldr	r3, [pc, #80]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 8004692:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1ef      	bne.n	800467e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 80c9 	beq.w	800483a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046a8:	4b0e      	ldr	r3, [pc, #56]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 030c 	and.w	r3, r3, #12
 80046b0:	2b0c      	cmp	r3, #12
 80046b2:	f000 8083 	beq.w	80047bc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d15e      	bne.n	800477c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046be:	4b09      	ldr	r3, [pc, #36]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a08      	ldr	r2, [pc, #32]	@ (80046e4 <HAL_RCC_OscConfig+0x4b8>)
 80046c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7fe f833 	bl	8002734 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d0:	e00c      	b.n	80046ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d2:	f7fe f82f 	bl	8002734 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d905      	bls.n	80046ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e0ab      	b.n	800483c <HAL_RCC_OscConfig+0x610>
 80046e4:	40021000 	.word	0x40021000
 80046e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ec:	4b55      	ldr	r3, [pc, #340]	@ (8004844 <HAL_RCC_OscConfig+0x618>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1ec      	bne.n	80046d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046f8:	4b52      	ldr	r3, [pc, #328]	@ (8004844 <HAL_RCC_OscConfig+0x618>)
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	4b52      	ldr	r3, [pc, #328]	@ (8004848 <HAL_RCC_OscConfig+0x61c>)
 80046fe:	4013      	ands	r3, r2
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6a11      	ldr	r1, [r2, #32]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004708:	3a01      	subs	r2, #1
 800470a:	0112      	lsls	r2, r2, #4
 800470c:	4311      	orrs	r1, r2
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004712:	0212      	lsls	r2, r2, #8
 8004714:	4311      	orrs	r1, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800471a:	0852      	lsrs	r2, r2, #1
 800471c:	3a01      	subs	r2, #1
 800471e:	0552      	lsls	r2, r2, #21
 8004720:	4311      	orrs	r1, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004726:	0852      	lsrs	r2, r2, #1
 8004728:	3a01      	subs	r2, #1
 800472a:	0652      	lsls	r2, r2, #25
 800472c:	4311      	orrs	r1, r2
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004732:	06d2      	lsls	r2, r2, #27
 8004734:	430a      	orrs	r2, r1
 8004736:	4943      	ldr	r1, [pc, #268]	@ (8004844 <HAL_RCC_OscConfig+0x618>)
 8004738:	4313      	orrs	r3, r2
 800473a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800473c:	4b41      	ldr	r3, [pc, #260]	@ (8004844 <HAL_RCC_OscConfig+0x618>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a40      	ldr	r2, [pc, #256]	@ (8004844 <HAL_RCC_OscConfig+0x618>)
 8004742:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004746:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004748:	4b3e      	ldr	r3, [pc, #248]	@ (8004844 <HAL_RCC_OscConfig+0x618>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	4a3d      	ldr	r2, [pc, #244]	@ (8004844 <HAL_RCC_OscConfig+0x618>)
 800474e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004752:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004754:	f7fd ffee 	bl	8002734 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800475c:	f7fd ffea 	bl	8002734 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e066      	b.n	800483c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800476e:	4b35      	ldr	r3, [pc, #212]	@ (8004844 <HAL_RCC_OscConfig+0x618>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f0      	beq.n	800475c <HAL_RCC_OscConfig+0x530>
 800477a:	e05e      	b.n	800483a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800477c:	4b31      	ldr	r3, [pc, #196]	@ (8004844 <HAL_RCC_OscConfig+0x618>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a30      	ldr	r2, [pc, #192]	@ (8004844 <HAL_RCC_OscConfig+0x618>)
 8004782:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fd ffd4 	bl	8002734 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004790:	f7fd ffd0 	bl	8002734 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e04c      	b.n	800483c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047a2:	4b28      	ldr	r3, [pc, #160]	@ (8004844 <HAL_RCC_OscConfig+0x618>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80047ae:	4b25      	ldr	r3, [pc, #148]	@ (8004844 <HAL_RCC_OscConfig+0x618>)
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	4924      	ldr	r1, [pc, #144]	@ (8004844 <HAL_RCC_OscConfig+0x618>)
 80047b4:	4b25      	ldr	r3, [pc, #148]	@ (800484c <HAL_RCC_OscConfig+0x620>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	60cb      	str	r3, [r1, #12]
 80047ba:	e03e      	b.n	800483a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e039      	b.n	800483c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80047c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004844 <HAL_RCC_OscConfig+0x618>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f003 0203 	and.w	r2, r3, #3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d12c      	bne.n	8004836 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e6:	3b01      	subs	r3, #1
 80047e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d123      	bne.n	8004836 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d11b      	bne.n	8004836 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004808:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800480a:	429a      	cmp	r2, r3
 800480c:	d113      	bne.n	8004836 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004818:	085b      	lsrs	r3, r3, #1
 800481a:	3b01      	subs	r3, #1
 800481c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800481e:	429a      	cmp	r2, r3
 8004820:	d109      	bne.n	8004836 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800482c:	085b      	lsrs	r3, r3, #1
 800482e:	3b01      	subs	r3, #1
 8004830:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004832:	429a      	cmp	r2, r3
 8004834:	d001      	beq.n	800483a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e000      	b.n	800483c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3720      	adds	r7, #32
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40021000 	.word	0x40021000
 8004848:	019f800c 	.word	0x019f800c
 800484c:	feeefffc 	.word	0xfeeefffc

08004850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800485a:	2300      	movs	r3, #0
 800485c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e11e      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004868:	4b91      	ldr	r3, [pc, #580]	@ (8004ab0 <HAL_RCC_ClockConfig+0x260>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 030f 	and.w	r3, r3, #15
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d910      	bls.n	8004898 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004876:	4b8e      	ldr	r3, [pc, #568]	@ (8004ab0 <HAL_RCC_ClockConfig+0x260>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f023 020f 	bic.w	r2, r3, #15
 800487e:	498c      	ldr	r1, [pc, #560]	@ (8004ab0 <HAL_RCC_ClockConfig+0x260>)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	4313      	orrs	r3, r2
 8004884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004886:	4b8a      	ldr	r3, [pc, #552]	@ (8004ab0 <HAL_RCC_ClockConfig+0x260>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d001      	beq.n	8004898 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e106      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d073      	beq.n	800498c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d129      	bne.n	8004900 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ac:	4b81      	ldr	r3, [pc, #516]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0f4      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80048bc:	f000 f9ce 	bl	8004c5c <RCC_GetSysClockFreqFromPLLSource>
 80048c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	4a7c      	ldr	r2, [pc, #496]	@ (8004ab8 <HAL_RCC_ClockConfig+0x268>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d93f      	bls.n	800494a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048ca:	4b7a      	ldr	r3, [pc, #488]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d009      	beq.n	80048ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d033      	beq.n	800494a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d12f      	bne.n	800494a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048ea:	4b72      	ldr	r3, [pc, #456]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048f2:	4a70      	ldr	r2, [pc, #448]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 80048f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80048fa:	2380      	movs	r3, #128	@ 0x80
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	e024      	b.n	800494a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2b02      	cmp	r3, #2
 8004906:	d107      	bne.n	8004918 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004908:	4b6a      	ldr	r3, [pc, #424]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d109      	bne.n	8004928 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e0c6      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004918:	4b66      	ldr	r3, [pc, #408]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0be      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004928:	f000 f8ce 	bl	8004ac8 <HAL_RCC_GetSysClockFreq>
 800492c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	4a61      	ldr	r2, [pc, #388]	@ (8004ab8 <HAL_RCC_ClockConfig+0x268>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d909      	bls.n	800494a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004936:	4b5f      	ldr	r3, [pc, #380]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800493e:	4a5d      	ldr	r2, [pc, #372]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 8004940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004944:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004946:	2380      	movs	r3, #128	@ 0x80
 8004948:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800494a:	4b5a      	ldr	r3, [pc, #360]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f023 0203 	bic.w	r2, r3, #3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	4957      	ldr	r1, [pc, #348]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 8004958:	4313      	orrs	r3, r2
 800495a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800495c:	f7fd feea 	bl	8002734 <HAL_GetTick>
 8004960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004962:	e00a      	b.n	800497a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004964:	f7fd fee6 	bl	8002734 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e095      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497a:	4b4e      	ldr	r3, [pc, #312]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 020c 	and.w	r2, r3, #12
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	429a      	cmp	r2, r3
 800498a:	d1eb      	bne.n	8004964 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d023      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049a4:	4b43      	ldr	r3, [pc, #268]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	4a42      	ldr	r2, [pc, #264]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 80049aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d007      	beq.n	80049cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80049bc:	4b3d      	ldr	r3, [pc, #244]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80049c4:	4a3b      	ldr	r2, [pc, #236]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 80049c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049cc:	4b39      	ldr	r3, [pc, #228]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	4936      	ldr	r1, [pc, #216]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	608b      	str	r3, [r1, #8]
 80049de:	e008      	b.n	80049f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2b80      	cmp	r3, #128	@ 0x80
 80049e4:	d105      	bne.n	80049f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80049e6:	4b33      	ldr	r3, [pc, #204]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	4a32      	ldr	r2, [pc, #200]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 80049ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049f2:	4b2f      	ldr	r3, [pc, #188]	@ (8004ab0 <HAL_RCC_ClockConfig+0x260>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d21d      	bcs.n	8004a3c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a00:	4b2b      	ldr	r3, [pc, #172]	@ (8004ab0 <HAL_RCC_ClockConfig+0x260>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f023 020f 	bic.w	r2, r3, #15
 8004a08:	4929      	ldr	r1, [pc, #164]	@ (8004ab0 <HAL_RCC_ClockConfig+0x260>)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a10:	f7fd fe90 	bl	8002734 <HAL_GetTick>
 8004a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a16:	e00a      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a18:	f7fd fe8c 	bl	8002734 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e03b      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2e:	4b20      	ldr	r3, [pc, #128]	@ (8004ab0 <HAL_RCC_ClockConfig+0x260>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d1ed      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d008      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a48:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4917      	ldr	r1, [pc, #92]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d009      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a66:	4b13      	ldr	r3, [pc, #76]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	490f      	ldr	r1, [pc, #60]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a7a:	f000 f825 	bl	8004ac8 <HAL_RCC_GetSysClockFreq>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab4 <HAL_RCC_ClockConfig+0x264>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	091b      	lsrs	r3, r3, #4
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	490c      	ldr	r1, [pc, #48]	@ (8004abc <HAL_RCC_ClockConfig+0x26c>)
 8004a8c:	5ccb      	ldrb	r3, [r1, r3]
 8004a8e:	f003 031f 	and.w	r3, r3, #31
 8004a92:	fa22 f303 	lsr.w	r3, r2, r3
 8004a96:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac0 <HAL_RCC_ClockConfig+0x270>)
 8004a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac4 <HAL_RCC_ClockConfig+0x274>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fd f828 	bl	8001af4 <HAL_InitTick>
 8004aa4:	4603      	mov	r3, r0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40022000 	.word	0x40022000
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	04c4b400 	.word	0x04c4b400
 8004abc:	0800bc5c 	.word	0x0800bc5c
 8004ac0:	20000000 	.word	0x20000000
 8004ac4:	20000004 	.word	0x20000004

08004ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004ace:	4b2c      	ldr	r3, [pc, #176]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d102      	bne.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ada:	4b2a      	ldr	r3, [pc, #168]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004adc:	613b      	str	r3, [r7, #16]
 8004ade:	e047      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ae0:	4b27      	ldr	r3, [pc, #156]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 030c 	and.w	r3, r3, #12
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d102      	bne.n	8004af2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004aec:	4b25      	ldr	r3, [pc, #148]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	e03e      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004af2:	4b23      	ldr	r3, [pc, #140]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
 8004afa:	2b0c      	cmp	r3, #12
 8004afc:	d136      	bne.n	8004b6c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004afe:	4b20      	ldr	r3, [pc, #128]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b08:	4b1d      	ldr	r3, [pc, #116]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	091b      	lsrs	r3, r3, #4
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	3301      	adds	r3, #1
 8004b14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d10c      	bne.n	8004b36 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b1c:	4a19      	ldr	r2, [pc, #100]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b24:	4a16      	ldr	r2, [pc, #88]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b26:	68d2      	ldr	r2, [r2, #12]
 8004b28:	0a12      	lsrs	r2, r2, #8
 8004b2a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b2e:	fb02 f303 	mul.w	r3, r2, r3
 8004b32:	617b      	str	r3, [r7, #20]
      break;
 8004b34:	e00c      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b36:	4a13      	ldr	r2, [pc, #76]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3e:	4a10      	ldr	r2, [pc, #64]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b40:	68d2      	ldr	r2, [r2, #12]
 8004b42:	0a12      	lsrs	r2, r2, #8
 8004b44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b48:	fb02 f303 	mul.w	r3, r2, r3
 8004b4c:	617b      	str	r3, [r7, #20]
      break;
 8004b4e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b50:	4b0b      	ldr	r3, [pc, #44]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	0e5b      	lsrs	r3, r3, #25
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b68:	613b      	str	r3, [r7, #16]
 8004b6a:	e001      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b70:	693b      	ldr	r3, [r7, #16]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	371c      	adds	r7, #28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	40021000 	.word	0x40021000
 8004b84:	00f42400 	.word	0x00f42400

08004b88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b8c:	4b03      	ldr	r3, [pc, #12]	@ (8004b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	20000000 	.word	0x20000000

08004ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ba4:	f7ff fff0 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	4b06      	ldr	r3, [pc, #24]	@ (8004bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	0a1b      	lsrs	r3, r3, #8
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	4904      	ldr	r1, [pc, #16]	@ (8004bc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bb6:	5ccb      	ldrb	r3, [r1, r3]
 8004bb8:	f003 031f 	and.w	r3, r3, #31
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	0800bc6c 	.word	0x0800bc6c

08004bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bd0:	f7ff ffda 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	4b06      	ldr	r3, [pc, #24]	@ (8004bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	0adb      	lsrs	r3, r3, #11
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	4904      	ldr	r1, [pc, #16]	@ (8004bf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004be2:	5ccb      	ldrb	r3, [r1, r3]
 8004be4:	f003 031f 	and.w	r3, r3, #31
 8004be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	0800bc6c 	.word	0x0800bc6c

08004bf8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	220f      	movs	r2, #15
 8004c06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004c08:	4b12      	ldr	r3, [pc, #72]	@ (8004c54 <HAL_RCC_GetClockConfig+0x5c>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 0203 	and.w	r2, r3, #3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004c14:	4b0f      	ldr	r3, [pc, #60]	@ (8004c54 <HAL_RCC_GetClockConfig+0x5c>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004c20:	4b0c      	ldr	r3, [pc, #48]	@ (8004c54 <HAL_RCC_GetClockConfig+0x5c>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004c2c:	4b09      	ldr	r3, [pc, #36]	@ (8004c54 <HAL_RCC_GetClockConfig+0x5c>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	08db      	lsrs	r3, r3, #3
 8004c32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004c3a:	4b07      	ldr	r3, [pc, #28]	@ (8004c58 <HAL_RCC_GetClockConfig+0x60>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 020f 	and.w	r2, r3, #15
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	601a      	str	r2, [r3, #0]
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40021000 	.word	0x40021000
 8004c58:	40022000 	.word	0x40022000

08004c5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c62:	4b1e      	ldr	r3, [pc, #120]	@ (8004cdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8004cdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	091b      	lsrs	r3, r3, #4
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	3301      	adds	r3, #1
 8004c78:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	d10c      	bne.n	8004c9a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c80:	4a17      	ldr	r2, [pc, #92]	@ (8004ce0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c88:	4a14      	ldr	r2, [pc, #80]	@ (8004cdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c8a:	68d2      	ldr	r2, [r2, #12]
 8004c8c:	0a12      	lsrs	r2, r2, #8
 8004c8e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c92:	fb02 f303 	mul.w	r3, r2, r3
 8004c96:	617b      	str	r3, [r7, #20]
    break;
 8004c98:	e00c      	b.n	8004cb4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c9a:	4a11      	ldr	r2, [pc, #68]	@ (8004ce0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8004cdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ca4:	68d2      	ldr	r2, [r2, #12]
 8004ca6:	0a12      	lsrs	r2, r2, #8
 8004ca8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004cac:	fb02 f303 	mul.w	r3, r2, r3
 8004cb0:	617b      	str	r3, [r7, #20]
    break;
 8004cb2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cb4:	4b09      	ldr	r3, [pc, #36]	@ (8004cdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	0e5b      	lsrs	r3, r3, #25
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ccc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004cce:	687b      	ldr	r3, [r7, #4]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	371c      	adds	r7, #28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	00f42400 	.word	0x00f42400

08004ce4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cec:	2300      	movs	r3, #0
 8004cee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8098 	beq.w	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d02:	2300      	movs	r3, #0
 8004d04:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d06:	4b43      	ldr	r3, [pc, #268]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10d      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d12:	4b40      	ldr	r3, [pc, #256]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d16:	4a3f      	ldr	r2, [pc, #252]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d26:	60bb      	str	r3, [r7, #8]
 8004d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d2e:	4b3a      	ldr	r3, [pc, #232]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a39      	ldr	r2, [pc, #228]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d3a:	f7fd fcfb 	bl	8002734 <HAL_GetTick>
 8004d3e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d40:	e009      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d42:	f7fd fcf7 	bl	8002734 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d902      	bls.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	74fb      	strb	r3, [r7, #19]
        break;
 8004d54:	e005      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d56:	4b30      	ldr	r3, [pc, #192]	@ (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0ef      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d62:	7cfb      	ldrb	r3, [r7, #19]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d159      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d68:	4b2a      	ldr	r3, [pc, #168]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d72:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d01e      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d019      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d84:	4b23      	ldr	r3, [pc, #140]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d90:	4b20      	ldr	r3, [pc, #128]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d96:	4a1f      	ldr	r2, [pc, #124]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004da0:	4b1c      	ldr	r3, [pc, #112]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da6:	4a1b      	ldr	r2, [pc, #108]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004db0:	4a18      	ldr	r2, [pc, #96]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d016      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc2:	f7fd fcb7 	bl	8002734 <HAL_GetTick>
 8004dc6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dc8:	e00b      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dca:	f7fd fcb3 	bl	8002734 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d902      	bls.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	74fb      	strb	r3, [r7, #19]
            break;
 8004de0:	e006      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004de2:	4b0c      	ldr	r3, [pc, #48]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0ec      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004df0:	7cfb      	ldrb	r3, [r7, #19]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10b      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004df6:	4b07      	ldr	r3, [pc, #28]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e04:	4903      	ldr	r1, [pc, #12]	@ (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004e0c:	e008      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e0e:	7cfb      	ldrb	r3, [r7, #19]
 8004e10:	74bb      	strb	r3, [r7, #18]
 8004e12:	e005      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e14:	40021000 	.word	0x40021000
 8004e18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e1c:	7cfb      	ldrb	r3, [r7, #19]
 8004e1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e20:	7c7b      	ldrb	r3, [r7, #17]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d105      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e26:	4ba6      	ldr	r3, [pc, #664]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e2a:	4aa5      	ldr	r2, [pc, #660]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e30:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e3e:	4ba0      	ldr	r3, [pc, #640]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e44:	f023 0203 	bic.w	r2, r3, #3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	499c      	ldr	r1, [pc, #624]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e60:	4b97      	ldr	r3, [pc, #604]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e66:	f023 020c 	bic.w	r2, r3, #12
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	4994      	ldr	r1, [pc, #592]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0304 	and.w	r3, r3, #4
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00a      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e82:	4b8f      	ldr	r3, [pc, #572]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e88:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	498b      	ldr	r1, [pc, #556]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0308 	and.w	r3, r3, #8
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00a      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ea4:	4b86      	ldr	r3, [pc, #536]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eaa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	4983      	ldr	r1, [pc, #524]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ec6:	4b7e      	ldr	r3, [pc, #504]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ecc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	497a      	ldr	r1, [pc, #488]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00a      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ee8:	4b75      	ldr	r3, [pc, #468]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	4972      	ldr	r1, [pc, #456]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f0a:	4b6d      	ldr	r3, [pc, #436]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f10:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	4969      	ldr	r1, [pc, #420]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00a      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f2c:	4b64      	ldr	r3, [pc, #400]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f32:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	4961      	ldr	r1, [pc, #388]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f4e:	4b5c      	ldr	r3, [pc, #368]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5c:	4958      	ldr	r1, [pc, #352]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d015      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f70:	4b53      	ldr	r3, [pc, #332]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7e:	4950      	ldr	r1, [pc, #320]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f8e:	d105      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f90:	4b4b      	ldr	r3, [pc, #300]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	4a4a      	ldr	r2, [pc, #296]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f9a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d015      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004fa8:	4b45      	ldr	r3, [pc, #276]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb6:	4942      	ldr	r1, [pc, #264]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fc6:	d105      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fc8:	4b3d      	ldr	r3, [pc, #244]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	4a3c      	ldr	r2, [pc, #240]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fd2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d015      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fe0:	4b37      	ldr	r3, [pc, #220]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fee:	4934      	ldr	r1, [pc, #208]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ffe:	d105      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005000:	4b2f      	ldr	r3, [pc, #188]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4a2e      	ldr	r2, [pc, #184]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005006:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800500a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d015      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005018:	4b29      	ldr	r3, [pc, #164]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800501e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005026:	4926      	ldr	r1, [pc, #152]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005032:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005036:	d105      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005038:	4b21      	ldr	r3, [pc, #132]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	4a20      	ldr	r2, [pc, #128]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800503e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005042:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d015      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005050:	4b1b      	ldr	r3, [pc, #108]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005056:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800505e:	4918      	ldr	r1, [pc, #96]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800506a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800506e:	d105      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005070:	4b13      	ldr	r3, [pc, #76]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	4a12      	ldr	r2, [pc, #72]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005076:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800507a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d015      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005088:	4b0d      	ldr	r3, [pc, #52]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800508a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800508e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005096:	490a      	ldr	r1, [pc, #40]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050a6:	d105      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050a8:	4b05      	ldr	r3, [pc, #20]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	4a04      	ldr	r2, [pc, #16]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80050b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	40021000 	.word	0x40021000

080050c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e049      	b.n	800516a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d106      	bne.n	80050f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7fd f8f8 	bl	80022e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3304      	adds	r3, #4
 8005100:	4619      	mov	r1, r3
 8005102:	4610      	mov	r0, r2
 8005104:	f000 fdc0 	bl	8005c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
	...

08005174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b01      	cmp	r3, #1
 8005186:	d001      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e04a      	b.n	8005222 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68da      	ldr	r2, [r3, #12]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a21      	ldr	r2, [pc, #132]	@ (8005230 <HAL_TIM_Base_Start_IT+0xbc>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d018      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x6c>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051b6:	d013      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x6c>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005234 <HAL_TIM_Base_Start_IT+0xc0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00e      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x6c>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005238 <HAL_TIM_Base_Start_IT+0xc4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d009      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x6c>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a1a      	ldr	r2, [pc, #104]	@ (800523c <HAL_TIM_Base_Start_IT+0xc8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d004      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x6c>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a19      	ldr	r2, [pc, #100]	@ (8005240 <HAL_TIM_Base_Start_IT+0xcc>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d115      	bne.n	800520c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	4b17      	ldr	r3, [pc, #92]	@ (8005244 <HAL_TIM_Base_Start_IT+0xd0>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b06      	cmp	r3, #6
 80051f0:	d015      	beq.n	800521e <HAL_TIM_Base_Start_IT+0xaa>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051f8:	d011      	beq.n	800521e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f042 0201 	orr.w	r2, r2, #1
 8005208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520a:	e008      	b.n	800521e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	e000      	b.n	8005220 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800521e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40012c00 	.word	0x40012c00
 8005234:	40000400 	.word	0x40000400
 8005238:	40000800 	.word	0x40000800
 800523c:	40013400 	.word	0x40013400
 8005240:	40014000 	.word	0x40014000
 8005244:	00010007 	.word	0x00010007

08005248 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e049      	b.n	80052ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fc ff82 	bl	8002178 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3304      	adds	r3, #4
 8005284:	4619      	mov	r1, r3
 8005286:	4610      	mov	r0, r2
 8005288:	f000 fcfe 	bl	8005c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d109      	bne.n	800531c <HAL_TIM_PWM_Start+0x24>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b01      	cmp	r3, #1
 8005312:	bf14      	ite	ne
 8005314:	2301      	movne	r3, #1
 8005316:	2300      	moveq	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	e03c      	b.n	8005396 <HAL_TIM_PWM_Start+0x9e>
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	2b04      	cmp	r3, #4
 8005320:	d109      	bne.n	8005336 <HAL_TIM_PWM_Start+0x3e>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b01      	cmp	r3, #1
 800532c:	bf14      	ite	ne
 800532e:	2301      	movne	r3, #1
 8005330:	2300      	moveq	r3, #0
 8005332:	b2db      	uxtb	r3, r3
 8005334:	e02f      	b.n	8005396 <HAL_TIM_PWM_Start+0x9e>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b08      	cmp	r3, #8
 800533a:	d109      	bne.n	8005350 <HAL_TIM_PWM_Start+0x58>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b01      	cmp	r3, #1
 8005346:	bf14      	ite	ne
 8005348:	2301      	movne	r3, #1
 800534a:	2300      	moveq	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	e022      	b.n	8005396 <HAL_TIM_PWM_Start+0x9e>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2b0c      	cmp	r3, #12
 8005354:	d109      	bne.n	800536a <HAL_TIM_PWM_Start+0x72>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b01      	cmp	r3, #1
 8005360:	bf14      	ite	ne
 8005362:	2301      	movne	r3, #1
 8005364:	2300      	moveq	r3, #0
 8005366:	b2db      	uxtb	r3, r3
 8005368:	e015      	b.n	8005396 <HAL_TIM_PWM_Start+0x9e>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b10      	cmp	r3, #16
 800536e:	d109      	bne.n	8005384 <HAL_TIM_PWM_Start+0x8c>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b01      	cmp	r3, #1
 800537a:	bf14      	ite	ne
 800537c:	2301      	movne	r3, #1
 800537e:	2300      	moveq	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	e008      	b.n	8005396 <HAL_TIM_PWM_Start+0x9e>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b01      	cmp	r3, #1
 800538e:	bf14      	ite	ne
 8005390:	2301      	movne	r3, #1
 8005392:	2300      	moveq	r3, #0
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e097      	b.n	80054ce <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d104      	bne.n	80053ae <HAL_TIM_PWM_Start+0xb6>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053ac:	e023      	b.n	80053f6 <HAL_TIM_PWM_Start+0xfe>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d104      	bne.n	80053be <HAL_TIM_PWM_Start+0xc6>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053bc:	e01b      	b.n	80053f6 <HAL_TIM_PWM_Start+0xfe>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d104      	bne.n	80053ce <HAL_TIM_PWM_Start+0xd6>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053cc:	e013      	b.n	80053f6 <HAL_TIM_PWM_Start+0xfe>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b0c      	cmp	r3, #12
 80053d2:	d104      	bne.n	80053de <HAL_TIM_PWM_Start+0xe6>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053dc:	e00b      	b.n	80053f6 <HAL_TIM_PWM_Start+0xfe>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b10      	cmp	r3, #16
 80053e2:	d104      	bne.n	80053ee <HAL_TIM_PWM_Start+0xf6>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053ec:	e003      	b.n	80053f6 <HAL_TIM_PWM_Start+0xfe>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2202      	movs	r2, #2
 80053f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2201      	movs	r2, #1
 80053fc:	6839      	ldr	r1, [r7, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 ffd4 	bl	80063ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a33      	ldr	r2, [pc, #204]	@ (80054d8 <HAL_TIM_PWM_Start+0x1e0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d013      	beq.n	8005436 <HAL_TIM_PWM_Start+0x13e>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a32      	ldr	r2, [pc, #200]	@ (80054dc <HAL_TIM_PWM_Start+0x1e4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d00e      	beq.n	8005436 <HAL_TIM_PWM_Start+0x13e>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a30      	ldr	r2, [pc, #192]	@ (80054e0 <HAL_TIM_PWM_Start+0x1e8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d009      	beq.n	8005436 <HAL_TIM_PWM_Start+0x13e>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a2f      	ldr	r2, [pc, #188]	@ (80054e4 <HAL_TIM_PWM_Start+0x1ec>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d004      	beq.n	8005436 <HAL_TIM_PWM_Start+0x13e>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a2d      	ldr	r2, [pc, #180]	@ (80054e8 <HAL_TIM_PWM_Start+0x1f0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d101      	bne.n	800543a <HAL_TIM_PWM_Start+0x142>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <HAL_TIM_PWM_Start+0x144>
 800543a:	2300      	movs	r3, #0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d007      	beq.n	8005450 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800544e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a20      	ldr	r2, [pc, #128]	@ (80054d8 <HAL_TIM_PWM_Start+0x1e0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d018      	beq.n	800548c <HAL_TIM_PWM_Start+0x194>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005462:	d013      	beq.n	800548c <HAL_TIM_PWM_Start+0x194>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a20      	ldr	r2, [pc, #128]	@ (80054ec <HAL_TIM_PWM_Start+0x1f4>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00e      	beq.n	800548c <HAL_TIM_PWM_Start+0x194>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a1f      	ldr	r2, [pc, #124]	@ (80054f0 <HAL_TIM_PWM_Start+0x1f8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d009      	beq.n	800548c <HAL_TIM_PWM_Start+0x194>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a17      	ldr	r2, [pc, #92]	@ (80054dc <HAL_TIM_PWM_Start+0x1e4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d004      	beq.n	800548c <HAL_TIM_PWM_Start+0x194>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a16      	ldr	r2, [pc, #88]	@ (80054e0 <HAL_TIM_PWM_Start+0x1e8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d115      	bne.n	80054b8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	4b18      	ldr	r3, [pc, #96]	@ (80054f4 <HAL_TIM_PWM_Start+0x1fc>)
 8005494:	4013      	ands	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b06      	cmp	r3, #6
 800549c:	d015      	beq.n	80054ca <HAL_TIM_PWM_Start+0x1d2>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054a4:	d011      	beq.n	80054ca <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f042 0201 	orr.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b6:	e008      	b.n	80054ca <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0201 	orr.w	r2, r2, #1
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	e000      	b.n	80054cc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40012c00 	.word	0x40012c00
 80054dc:	40013400 	.word	0x40013400
 80054e0:	40014000 	.word	0x40014000
 80054e4:	40014400 	.word	0x40014400
 80054e8:	40014800 	.word	0x40014800
 80054ec:	40000400 	.word	0x40000400
 80054f0:	40000800 	.word	0x40000800
 80054f4:	00010007 	.word	0x00010007

080054f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2200      	movs	r2, #0
 8005508:	6839      	ldr	r1, [r7, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f000 ff4e 	bl	80063ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a3e      	ldr	r2, [pc, #248]	@ (8005610 <HAL_TIM_PWM_Stop+0x118>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d013      	beq.n	8005542 <HAL_TIM_PWM_Stop+0x4a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a3d      	ldr	r2, [pc, #244]	@ (8005614 <HAL_TIM_PWM_Stop+0x11c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d00e      	beq.n	8005542 <HAL_TIM_PWM_Stop+0x4a>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a3b      	ldr	r2, [pc, #236]	@ (8005618 <HAL_TIM_PWM_Stop+0x120>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d009      	beq.n	8005542 <HAL_TIM_PWM_Stop+0x4a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a3a      	ldr	r2, [pc, #232]	@ (800561c <HAL_TIM_PWM_Stop+0x124>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d004      	beq.n	8005542 <HAL_TIM_PWM_Stop+0x4a>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a38      	ldr	r2, [pc, #224]	@ (8005620 <HAL_TIM_PWM_Stop+0x128>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d101      	bne.n	8005546 <HAL_TIM_PWM_Stop+0x4e>
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <HAL_TIM_PWM_Stop+0x50>
 8005546:	2300      	movs	r3, #0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d017      	beq.n	800557c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6a1a      	ldr	r2, [r3, #32]
 8005552:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005556:	4013      	ands	r3, r2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10f      	bne.n	800557c <HAL_TIM_PWM_Stop+0x84>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6a1a      	ldr	r2, [r3, #32]
 8005562:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005566:	4013      	ands	r3, r2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d107      	bne.n	800557c <HAL_TIM_PWM_Stop+0x84>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800557a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6a1a      	ldr	r2, [r3, #32]
 8005582:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005586:	4013      	ands	r3, r2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10f      	bne.n	80055ac <HAL_TIM_PWM_Stop+0xb4>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6a1a      	ldr	r2, [r3, #32]
 8005592:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005596:	4013      	ands	r3, r2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d107      	bne.n	80055ac <HAL_TIM_PWM_Stop+0xb4>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0201 	bic.w	r2, r2, #1
 80055aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d104      	bne.n	80055bc <HAL_TIM_PWM_Stop+0xc4>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055ba:	e023      	b.n	8005604 <HAL_TIM_PWM_Stop+0x10c>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d104      	bne.n	80055cc <HAL_TIM_PWM_Stop+0xd4>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055ca:	e01b      	b.n	8005604 <HAL_TIM_PWM_Stop+0x10c>
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d104      	bne.n	80055dc <HAL_TIM_PWM_Stop+0xe4>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055da:	e013      	b.n	8005604 <HAL_TIM_PWM_Stop+0x10c>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	2b0c      	cmp	r3, #12
 80055e0:	d104      	bne.n	80055ec <HAL_TIM_PWM_Stop+0xf4>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055ea:	e00b      	b.n	8005604 <HAL_TIM_PWM_Stop+0x10c>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2b10      	cmp	r3, #16
 80055f0:	d104      	bne.n	80055fc <HAL_TIM_PWM_Stop+0x104>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055fa:	e003      	b.n	8005604 <HAL_TIM_PWM_Stop+0x10c>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40013400 	.word	0x40013400
 8005618:	40014000 	.word	0x40014000
 800561c:	40014400 	.word	0x40014400
 8005620:	40014800 	.word	0x40014800

08005624 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e097      	b.n	8005768 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	d106      	bne.n	8005652 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7fc fdb3 	bl	80021b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2202      	movs	r2, #2
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6812      	ldr	r2, [r2, #0]
 8005664:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005668:	f023 0307 	bic.w	r3, r3, #7
 800566c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3304      	adds	r3, #4
 8005676:	4619      	mov	r1, r3
 8005678:	4610      	mov	r0, r2
 800567a:	f000 fb05 	bl	8005c88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056a6:	f023 0303 	bic.w	r3, r3, #3
 80056aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	021b      	lsls	r3, r3, #8
 80056b6:	4313      	orrs	r3, r2
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80056c4:	f023 030c 	bic.w	r3, r3, #12
 80056c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	021b      	lsls	r3, r3, #8
 80056e0:	4313      	orrs	r3, r2
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	011a      	lsls	r2, r3, #4
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	031b      	lsls	r3, r3, #12
 80056f4:	4313      	orrs	r3, r2
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005702:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800570a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	4313      	orrs	r3, r2
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d020      	beq.n	80057d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01b      	beq.n	80057d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f06f 0202 	mvn.w	r2, #2
 80057a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fa46 	bl	8005c4c <HAL_TIM_IC_CaptureCallback>
 80057c0:	e005      	b.n	80057ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fa38 	bl	8005c38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fa49 	bl	8005c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f003 0304 	and.w	r3, r3, #4
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d020      	beq.n	8005820 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d01b      	beq.n	8005820 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0204 	mvn.w	r2, #4
 80057f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2202      	movs	r2, #2
 80057f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fa20 	bl	8005c4c <HAL_TIM_IC_CaptureCallback>
 800580c:	e005      	b.n	800581a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fa12 	bl	8005c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fa23 	bl	8005c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b00      	cmp	r3, #0
 8005828:	d020      	beq.n	800586c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f003 0308 	and.w	r3, r3, #8
 8005830:	2b00      	cmp	r3, #0
 8005832:	d01b      	beq.n	800586c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 0208 	mvn.w	r2, #8
 800583c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2204      	movs	r2, #4
 8005842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f9fa 	bl	8005c4c <HAL_TIM_IC_CaptureCallback>
 8005858:	e005      	b.n	8005866 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f9ec 	bl	8005c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f9fd 	bl	8005c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f003 0310 	and.w	r3, r3, #16
 8005872:	2b00      	cmp	r3, #0
 8005874:	d020      	beq.n	80058b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2b00      	cmp	r3, #0
 800587e:	d01b      	beq.n	80058b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f06f 0210 	mvn.w	r2, #16
 8005888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2208      	movs	r2, #8
 800588e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f9d4 	bl	8005c4c <HAL_TIM_IC_CaptureCallback>
 80058a4:	e005      	b.n	80058b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f9c6 	bl	8005c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f9d7 	bl	8005c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00c      	beq.n	80058dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d007      	beq.n	80058dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0201 	mvn.w	r2, #1
 80058d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7fc f8ca 	bl	8001a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d104      	bne.n	80058f0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00c      	beq.n	800590a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d007      	beq.n	800590a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 ffa1 	bl	800684c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00c      	beq.n	800592e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800591a:	2b00      	cmp	r3, #0
 800591c:	d007      	beq.n	800592e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 ff99 	bl	8006860 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00c      	beq.n	8005952 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	d007      	beq.n	8005952 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800594a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f991 	bl	8005c74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f003 0320 	and.w	r3, r3, #32
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00c      	beq.n	8005976 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d007      	beq.n	8005976 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f06f 0220 	mvn.w	r2, #32
 800596e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 ff61 	bl	8006838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00c      	beq.n	800599a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d007      	beq.n	800599a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 ff6d 	bl	8006874 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00c      	beq.n	80059be <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d007      	beq.n	80059be <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80059b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 ff65 	bl	8006888 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00c      	beq.n	80059e2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d007      	beq.n	80059e2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80059da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 ff5d 	bl	800689c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00c      	beq.n	8005a06 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d007      	beq.n	8005a06 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80059fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 ff55 	bl	80068b0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a06:	bf00      	nop
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d101      	bne.n	8005a2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	e0ff      	b.n	8005c2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b14      	cmp	r3, #20
 8005a3a:	f200 80f0 	bhi.w	8005c1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a44:	08005a99 	.word	0x08005a99
 8005a48:	08005c1f 	.word	0x08005c1f
 8005a4c:	08005c1f 	.word	0x08005c1f
 8005a50:	08005c1f 	.word	0x08005c1f
 8005a54:	08005ad9 	.word	0x08005ad9
 8005a58:	08005c1f 	.word	0x08005c1f
 8005a5c:	08005c1f 	.word	0x08005c1f
 8005a60:	08005c1f 	.word	0x08005c1f
 8005a64:	08005b1b 	.word	0x08005b1b
 8005a68:	08005c1f 	.word	0x08005c1f
 8005a6c:	08005c1f 	.word	0x08005c1f
 8005a70:	08005c1f 	.word	0x08005c1f
 8005a74:	08005b5b 	.word	0x08005b5b
 8005a78:	08005c1f 	.word	0x08005c1f
 8005a7c:	08005c1f 	.word	0x08005c1f
 8005a80:	08005c1f 	.word	0x08005c1f
 8005a84:	08005b9d 	.word	0x08005b9d
 8005a88:	08005c1f 	.word	0x08005c1f
 8005a8c:	08005c1f 	.word	0x08005c1f
 8005a90:	08005c1f 	.word	0x08005c1f
 8005a94:	08005bdd 	.word	0x08005bdd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68b9      	ldr	r1, [r7, #8]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 f98e 	bl	8005dc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699a      	ldr	r2, [r3, #24]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f042 0208 	orr.w	r2, r2, #8
 8005ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	699a      	ldr	r2, [r3, #24]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0204 	bic.w	r2, r2, #4
 8005ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6999      	ldr	r1, [r3, #24]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	691a      	ldr	r2, [r3, #16]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	619a      	str	r2, [r3, #24]
      break;
 8005ad6:	e0a5      	b.n	8005c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68b9      	ldr	r1, [r7, #8]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 f9fe 	bl	8005ee0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699a      	ldr	r2, [r3, #24]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6999      	ldr	r1, [r3, #24]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	021a      	lsls	r2, r3, #8
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	619a      	str	r2, [r3, #24]
      break;
 8005b18:	e084      	b.n	8005c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68b9      	ldr	r1, [r7, #8]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 fa67 	bl	8005ff4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69da      	ldr	r2, [r3, #28]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f042 0208 	orr.w	r2, r2, #8
 8005b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69da      	ldr	r2, [r3, #28]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0204 	bic.w	r2, r2, #4
 8005b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	69d9      	ldr	r1, [r3, #28]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	61da      	str	r2, [r3, #28]
      break;
 8005b58:	e064      	b.n	8005c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68b9      	ldr	r1, [r7, #8]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 facf 	bl	8006104 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69da      	ldr	r2, [r3, #28]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69da      	ldr	r2, [r3, #28]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69d9      	ldr	r1, [r3, #28]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	021a      	lsls	r2, r3, #8
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	61da      	str	r2, [r3, #28]
      break;
 8005b9a:	e043      	b.n	8005c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fb38 	bl	8006218 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0208 	orr.w	r2, r2, #8
 8005bb6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0204 	bic.w	r2, r2, #4
 8005bc6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005bda:	e023      	b.n	8005c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 fb7c 	bl	80062e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bf6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c06:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	021a      	lsls	r2, r3, #8
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005c1c:	e002      	b.n	8005c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	75fb      	strb	r3, [r7, #23]
      break;
 8005c22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop

08005c38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a42      	ldr	r2, [pc, #264]	@ (8005da4 <TIM_Base_SetConfig+0x11c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00f      	beq.n	8005cc0 <TIM_Base_SetConfig+0x38>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ca6:	d00b      	beq.n	8005cc0 <TIM_Base_SetConfig+0x38>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a3f      	ldr	r2, [pc, #252]	@ (8005da8 <TIM_Base_SetConfig+0x120>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d007      	beq.n	8005cc0 <TIM_Base_SetConfig+0x38>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a3e      	ldr	r2, [pc, #248]	@ (8005dac <TIM_Base_SetConfig+0x124>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d003      	beq.n	8005cc0 <TIM_Base_SetConfig+0x38>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a3d      	ldr	r2, [pc, #244]	@ (8005db0 <TIM_Base_SetConfig+0x128>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d108      	bne.n	8005cd2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a33      	ldr	r2, [pc, #204]	@ (8005da4 <TIM_Base_SetConfig+0x11c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d01b      	beq.n	8005d12 <TIM_Base_SetConfig+0x8a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ce0:	d017      	beq.n	8005d12 <TIM_Base_SetConfig+0x8a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a30      	ldr	r2, [pc, #192]	@ (8005da8 <TIM_Base_SetConfig+0x120>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d013      	beq.n	8005d12 <TIM_Base_SetConfig+0x8a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a2f      	ldr	r2, [pc, #188]	@ (8005dac <TIM_Base_SetConfig+0x124>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00f      	beq.n	8005d12 <TIM_Base_SetConfig+0x8a>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a2e      	ldr	r2, [pc, #184]	@ (8005db0 <TIM_Base_SetConfig+0x128>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00b      	beq.n	8005d12 <TIM_Base_SetConfig+0x8a>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a2d      	ldr	r2, [pc, #180]	@ (8005db4 <TIM_Base_SetConfig+0x12c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d007      	beq.n	8005d12 <TIM_Base_SetConfig+0x8a>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a2c      	ldr	r2, [pc, #176]	@ (8005db8 <TIM_Base_SetConfig+0x130>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d003      	beq.n	8005d12 <TIM_Base_SetConfig+0x8a>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a2b      	ldr	r2, [pc, #172]	@ (8005dbc <TIM_Base_SetConfig+0x134>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d108      	bne.n	8005d24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a16      	ldr	r2, [pc, #88]	@ (8005da4 <TIM_Base_SetConfig+0x11c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00f      	beq.n	8005d70 <TIM_Base_SetConfig+0xe8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a17      	ldr	r2, [pc, #92]	@ (8005db0 <TIM_Base_SetConfig+0x128>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00b      	beq.n	8005d70 <TIM_Base_SetConfig+0xe8>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a16      	ldr	r2, [pc, #88]	@ (8005db4 <TIM_Base_SetConfig+0x12c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d007      	beq.n	8005d70 <TIM_Base_SetConfig+0xe8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a15      	ldr	r2, [pc, #84]	@ (8005db8 <TIM_Base_SetConfig+0x130>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_Base_SetConfig+0xe8>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a14      	ldr	r2, [pc, #80]	@ (8005dbc <TIM_Base_SetConfig+0x134>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d103      	bne.n	8005d78 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d105      	bne.n	8005d96 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	f023 0201 	bic.w	r2, r3, #1
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	611a      	str	r2, [r3, #16]
  }
}
 8005d96:	bf00      	nop
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	40012c00 	.word	0x40012c00
 8005da8:	40000400 	.word	0x40000400
 8005dac:	40000800 	.word	0x40000800
 8005db0:	40013400 	.word	0x40013400
 8005db4:	40014000 	.word	0x40014000
 8005db8:	40014400 	.word	0x40014400
 8005dbc:	40014800 	.word	0x40014800

08005dc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	f023 0201 	bic.w	r2, r3, #1
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0303 	bic.w	r3, r3, #3
 8005dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f023 0302 	bic.w	r3, r3, #2
 8005e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a2c      	ldr	r2, [pc, #176]	@ (8005ecc <TIM_OC1_SetConfig+0x10c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d00f      	beq.n	8005e40 <TIM_OC1_SetConfig+0x80>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a2b      	ldr	r2, [pc, #172]	@ (8005ed0 <TIM_OC1_SetConfig+0x110>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d00b      	beq.n	8005e40 <TIM_OC1_SetConfig+0x80>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8005ed4 <TIM_OC1_SetConfig+0x114>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d007      	beq.n	8005e40 <TIM_OC1_SetConfig+0x80>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a29      	ldr	r2, [pc, #164]	@ (8005ed8 <TIM_OC1_SetConfig+0x118>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d003      	beq.n	8005e40 <TIM_OC1_SetConfig+0x80>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a28      	ldr	r2, [pc, #160]	@ (8005edc <TIM_OC1_SetConfig+0x11c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d10c      	bne.n	8005e5a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f023 0308 	bic.w	r3, r3, #8
 8005e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f023 0304 	bic.w	r3, r3, #4
 8005e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8005ecc <TIM_OC1_SetConfig+0x10c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d00f      	beq.n	8005e82 <TIM_OC1_SetConfig+0xc2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a1a      	ldr	r2, [pc, #104]	@ (8005ed0 <TIM_OC1_SetConfig+0x110>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d00b      	beq.n	8005e82 <TIM_OC1_SetConfig+0xc2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a19      	ldr	r2, [pc, #100]	@ (8005ed4 <TIM_OC1_SetConfig+0x114>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d007      	beq.n	8005e82 <TIM_OC1_SetConfig+0xc2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a18      	ldr	r2, [pc, #96]	@ (8005ed8 <TIM_OC1_SetConfig+0x118>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d003      	beq.n	8005e82 <TIM_OC1_SetConfig+0xc2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a17      	ldr	r2, [pc, #92]	@ (8005edc <TIM_OC1_SetConfig+0x11c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d111      	bne.n	8005ea6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	621a      	str	r2, [r3, #32]
}
 8005ec0:	bf00      	nop
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	40012c00 	.word	0x40012c00
 8005ed0:	40013400 	.word	0x40013400
 8005ed4:	40014000 	.word	0x40014000
 8005ed8:	40014400 	.word	0x40014400
 8005edc:	40014800 	.word	0x40014800

08005ee0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	f023 0210 	bic.w	r2, r3, #16
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	021b      	lsls	r3, r3, #8
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f023 0320 	bic.w	r3, r3, #32
 8005f2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	011b      	lsls	r3, r3, #4
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a28      	ldr	r2, [pc, #160]	@ (8005fe0 <TIM_OC2_SetConfig+0x100>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d003      	beq.n	8005f4c <TIM_OC2_SetConfig+0x6c>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a27      	ldr	r2, [pc, #156]	@ (8005fe4 <TIM_OC2_SetConfig+0x104>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d10d      	bne.n	8005f68 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8005fe0 <TIM_OC2_SetConfig+0x100>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d00f      	beq.n	8005f90 <TIM_OC2_SetConfig+0xb0>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a1c      	ldr	r2, [pc, #112]	@ (8005fe4 <TIM_OC2_SetConfig+0x104>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d00b      	beq.n	8005f90 <TIM_OC2_SetConfig+0xb0>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8005fe8 <TIM_OC2_SetConfig+0x108>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d007      	beq.n	8005f90 <TIM_OC2_SetConfig+0xb0>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a1a      	ldr	r2, [pc, #104]	@ (8005fec <TIM_OC2_SetConfig+0x10c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d003      	beq.n	8005f90 <TIM_OC2_SetConfig+0xb0>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a19      	ldr	r2, [pc, #100]	@ (8005ff0 <TIM_OC2_SetConfig+0x110>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d113      	bne.n	8005fb8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	621a      	str	r2, [r3, #32]
}
 8005fd2:	bf00      	nop
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	40012c00 	.word	0x40012c00
 8005fe4:	40013400 	.word	0x40013400
 8005fe8:	40014000 	.word	0x40014000
 8005fec:	40014400 	.word	0x40014400
 8005ff0:	40014800 	.word	0x40014800

08005ff4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f023 0303 	bic.w	r3, r3, #3
 800602e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	021b      	lsls	r3, r3, #8
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a27      	ldr	r2, [pc, #156]	@ (80060f0 <TIM_OC3_SetConfig+0xfc>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d003      	beq.n	800605e <TIM_OC3_SetConfig+0x6a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a26      	ldr	r2, [pc, #152]	@ (80060f4 <TIM_OC3_SetConfig+0x100>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d10d      	bne.n	800607a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006064:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	021b      	lsls	r3, r3, #8
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a1c      	ldr	r2, [pc, #112]	@ (80060f0 <TIM_OC3_SetConfig+0xfc>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00f      	beq.n	80060a2 <TIM_OC3_SetConfig+0xae>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a1b      	ldr	r2, [pc, #108]	@ (80060f4 <TIM_OC3_SetConfig+0x100>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00b      	beq.n	80060a2 <TIM_OC3_SetConfig+0xae>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a1a      	ldr	r2, [pc, #104]	@ (80060f8 <TIM_OC3_SetConfig+0x104>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d007      	beq.n	80060a2 <TIM_OC3_SetConfig+0xae>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a19      	ldr	r2, [pc, #100]	@ (80060fc <TIM_OC3_SetConfig+0x108>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d003      	beq.n	80060a2 <TIM_OC3_SetConfig+0xae>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a18      	ldr	r2, [pc, #96]	@ (8006100 <TIM_OC3_SetConfig+0x10c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d113      	bne.n	80060ca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	621a      	str	r2, [r3, #32]
}
 80060e4:	bf00      	nop
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	40012c00 	.word	0x40012c00
 80060f4:	40013400 	.word	0x40013400
 80060f8:	40014000 	.word	0x40014000
 80060fc:	40014400 	.word	0x40014400
 8006100:	40014800 	.word	0x40014800

08006104 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006132:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800613e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	021b      	lsls	r3, r3, #8
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4313      	orrs	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006152:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	031b      	lsls	r3, r3, #12
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a28      	ldr	r2, [pc, #160]	@ (8006204 <TIM_OC4_SetConfig+0x100>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d003      	beq.n	8006170 <TIM_OC4_SetConfig+0x6c>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a27      	ldr	r2, [pc, #156]	@ (8006208 <TIM_OC4_SetConfig+0x104>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d10d      	bne.n	800618c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	031b      	lsls	r3, r3, #12
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	4313      	orrs	r3, r2
 8006182:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800618a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a1d      	ldr	r2, [pc, #116]	@ (8006204 <TIM_OC4_SetConfig+0x100>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d00f      	beq.n	80061b4 <TIM_OC4_SetConfig+0xb0>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a1c      	ldr	r2, [pc, #112]	@ (8006208 <TIM_OC4_SetConfig+0x104>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d00b      	beq.n	80061b4 <TIM_OC4_SetConfig+0xb0>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a1b      	ldr	r2, [pc, #108]	@ (800620c <TIM_OC4_SetConfig+0x108>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d007      	beq.n	80061b4 <TIM_OC4_SetConfig+0xb0>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a1a      	ldr	r2, [pc, #104]	@ (8006210 <TIM_OC4_SetConfig+0x10c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d003      	beq.n	80061b4 <TIM_OC4_SetConfig+0xb0>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a19      	ldr	r2, [pc, #100]	@ (8006214 <TIM_OC4_SetConfig+0x110>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d113      	bne.n	80061dc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061ba:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061c2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	019b      	lsls	r3, r3, #6
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	019b      	lsls	r3, r3, #6
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	621a      	str	r2, [r3, #32]
}
 80061f6:	bf00      	nop
 80061f8:	371c      	adds	r7, #28
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	40012c00 	.word	0x40012c00
 8006208:	40013400 	.word	0x40013400
 800620c:	40014000 	.word	0x40014000
 8006210:	40014400 	.word	0x40014400
 8006214:	40014800 	.word	0x40014800

08006218 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800623e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800624a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800625c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	041b      	lsls	r3, r3, #16
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	4313      	orrs	r3, r2
 8006268:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a17      	ldr	r2, [pc, #92]	@ (80062cc <TIM_OC5_SetConfig+0xb4>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d00f      	beq.n	8006292 <TIM_OC5_SetConfig+0x7a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a16      	ldr	r2, [pc, #88]	@ (80062d0 <TIM_OC5_SetConfig+0xb8>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00b      	beq.n	8006292 <TIM_OC5_SetConfig+0x7a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a15      	ldr	r2, [pc, #84]	@ (80062d4 <TIM_OC5_SetConfig+0xbc>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d007      	beq.n	8006292 <TIM_OC5_SetConfig+0x7a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a14      	ldr	r2, [pc, #80]	@ (80062d8 <TIM_OC5_SetConfig+0xc0>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d003      	beq.n	8006292 <TIM_OC5_SetConfig+0x7a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a13      	ldr	r2, [pc, #76]	@ (80062dc <TIM_OC5_SetConfig+0xc4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d109      	bne.n	80062a6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006298:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	021b      	lsls	r3, r3, #8
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	621a      	str	r2, [r3, #32]
}
 80062c0:	bf00      	nop
 80062c2:	371c      	adds	r7, #28
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	40012c00 	.word	0x40012c00
 80062d0:	40013400 	.word	0x40013400
 80062d4:	40014000 	.word	0x40014000
 80062d8:	40014400 	.word	0x40014400
 80062dc:	40014800 	.word	0x40014800

080062e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800630e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	051b      	lsls	r3, r3, #20
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	4313      	orrs	r3, r2
 8006332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a18      	ldr	r2, [pc, #96]	@ (8006398 <TIM_OC6_SetConfig+0xb8>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00f      	beq.n	800635c <TIM_OC6_SetConfig+0x7c>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a17      	ldr	r2, [pc, #92]	@ (800639c <TIM_OC6_SetConfig+0xbc>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00b      	beq.n	800635c <TIM_OC6_SetConfig+0x7c>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a16      	ldr	r2, [pc, #88]	@ (80063a0 <TIM_OC6_SetConfig+0xc0>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d007      	beq.n	800635c <TIM_OC6_SetConfig+0x7c>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a15      	ldr	r2, [pc, #84]	@ (80063a4 <TIM_OC6_SetConfig+0xc4>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d003      	beq.n	800635c <TIM_OC6_SetConfig+0x7c>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a14      	ldr	r2, [pc, #80]	@ (80063a8 <TIM_OC6_SetConfig+0xc8>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d109      	bne.n	8006370 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006362:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	029b      	lsls	r3, r3, #10
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	4313      	orrs	r3, r2
 800636e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	621a      	str	r2, [r3, #32]
}
 800638a:	bf00      	nop
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	40012c00 	.word	0x40012c00
 800639c:	40013400 	.word	0x40013400
 80063a0:	40014000 	.word	0x40014000
 80063a4:	40014400 	.word	0x40014400
 80063a8:	40014800 	.word	0x40014800

080063ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f003 031f 	and.w	r3, r3, #31
 80063be:	2201      	movs	r2, #1
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a1a      	ldr	r2, [r3, #32]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	43db      	mvns	r3, r3
 80063ce:	401a      	ands	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a1a      	ldr	r2, [r3, #32]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f003 031f 	and.w	r3, r3, #31
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	fa01 f303 	lsl.w	r3, r1, r3
 80063e4:	431a      	orrs	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	621a      	str	r2, [r3, #32]
}
 80063ea:	bf00      	nop
 80063ec:	371c      	adds	r7, #28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
	...

080063f8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d109      	bne.n	800641c <HAL_TIMEx_PWMN_Start+0x24>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b01      	cmp	r3, #1
 8006412:	bf14      	ite	ne
 8006414:	2301      	movne	r3, #1
 8006416:	2300      	moveq	r3, #0
 8006418:	b2db      	uxtb	r3, r3
 800641a:	e022      	b.n	8006462 <HAL_TIMEx_PWMN_Start+0x6a>
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	2b04      	cmp	r3, #4
 8006420:	d109      	bne.n	8006436 <HAL_TIMEx_PWMN_Start+0x3e>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b01      	cmp	r3, #1
 800642c:	bf14      	ite	ne
 800642e:	2301      	movne	r3, #1
 8006430:	2300      	moveq	r3, #0
 8006432:	b2db      	uxtb	r3, r3
 8006434:	e015      	b.n	8006462 <HAL_TIMEx_PWMN_Start+0x6a>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b08      	cmp	r3, #8
 800643a:	d109      	bne.n	8006450 <HAL_TIMEx_PWMN_Start+0x58>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b01      	cmp	r3, #1
 8006446:	bf14      	ite	ne
 8006448:	2301      	movne	r3, #1
 800644a:	2300      	moveq	r3, #0
 800644c:	b2db      	uxtb	r3, r3
 800644e:	e008      	b.n	8006462 <HAL_TIMEx_PWMN_Start+0x6a>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b01      	cmp	r3, #1
 800645a:	bf14      	ite	ne
 800645c:	2301      	movne	r3, #1
 800645e:	2300      	moveq	r3, #0
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e069      	b.n	800653e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d104      	bne.n	800647a <HAL_TIMEx_PWMN_Start+0x82>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006478:	e013      	b.n	80064a2 <HAL_TIMEx_PWMN_Start+0xaa>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b04      	cmp	r3, #4
 800647e:	d104      	bne.n	800648a <HAL_TIMEx_PWMN_Start+0x92>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006488:	e00b      	b.n	80064a2 <HAL_TIMEx_PWMN_Start+0xaa>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b08      	cmp	r3, #8
 800648e:	d104      	bne.n	800649a <HAL_TIMEx_PWMN_Start+0xa2>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006498:	e003      	b.n	80064a2 <HAL_TIMEx_PWMN_Start+0xaa>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2202      	movs	r2, #2
 800649e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2204      	movs	r2, #4
 80064a8:	6839      	ldr	r1, [r7, #0]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 fa0a 	bl	80068c4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064be:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a20      	ldr	r2, [pc, #128]	@ (8006548 <HAL_TIMEx_PWMN_Start+0x150>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d018      	beq.n	80064fc <HAL_TIMEx_PWMN_Start+0x104>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064d2:	d013      	beq.n	80064fc <HAL_TIMEx_PWMN_Start+0x104>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a1c      	ldr	r2, [pc, #112]	@ (800654c <HAL_TIMEx_PWMN_Start+0x154>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d00e      	beq.n	80064fc <HAL_TIMEx_PWMN_Start+0x104>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a1b      	ldr	r2, [pc, #108]	@ (8006550 <HAL_TIMEx_PWMN_Start+0x158>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d009      	beq.n	80064fc <HAL_TIMEx_PWMN_Start+0x104>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a19      	ldr	r2, [pc, #100]	@ (8006554 <HAL_TIMEx_PWMN_Start+0x15c>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d004      	beq.n	80064fc <HAL_TIMEx_PWMN_Start+0x104>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a18      	ldr	r2, [pc, #96]	@ (8006558 <HAL_TIMEx_PWMN_Start+0x160>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d115      	bne.n	8006528 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689a      	ldr	r2, [r3, #8]
 8006502:	4b16      	ldr	r3, [pc, #88]	@ (800655c <HAL_TIMEx_PWMN_Start+0x164>)
 8006504:	4013      	ands	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b06      	cmp	r3, #6
 800650c:	d015      	beq.n	800653a <HAL_TIMEx_PWMN_Start+0x142>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006514:	d011      	beq.n	800653a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f042 0201 	orr.w	r2, r2, #1
 8006524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006526:	e008      	b.n	800653a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f042 0201 	orr.w	r2, r2, #1
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	e000      	b.n	800653c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800653a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	40012c00 	.word	0x40012c00
 800654c:	40000400 	.word	0x40000400
 8006550:	40000800 	.word	0x40000800
 8006554:	40013400 	.word	0x40013400
 8006558:	40014000 	.word	0x40014000
 800655c:	00010007 	.word	0x00010007

08006560 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2200      	movs	r2, #0
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	4618      	mov	r0, r3
 8006574:	f000 f9a6 	bl	80068c4 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6a1a      	ldr	r2, [r3, #32]
 800657e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006582:	4013      	ands	r3, r2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10f      	bne.n	80065a8 <HAL_TIMEx_PWMN_Stop+0x48>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6a1a      	ldr	r2, [r3, #32]
 800658e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006592:	4013      	ands	r3, r2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d107      	bne.n	80065a8 <HAL_TIMEx_PWMN_Stop+0x48>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6a1a      	ldr	r2, [r3, #32]
 80065ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80065b2:	4013      	ands	r3, r2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10f      	bne.n	80065d8 <HAL_TIMEx_PWMN_Stop+0x78>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6a1a      	ldr	r2, [r3, #32]
 80065be:	f244 4344 	movw	r3, #17476	@ 0x4444
 80065c2:	4013      	ands	r3, r2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d107      	bne.n	80065d8 <HAL_TIMEx_PWMN_Stop+0x78>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0201 	bic.w	r2, r2, #1
 80065d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d104      	bne.n	80065e8 <HAL_TIMEx_PWMN_Stop+0x88>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065e6:	e013      	b.n	8006610 <HAL_TIMEx_PWMN_Stop+0xb0>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	d104      	bne.n	80065f8 <HAL_TIMEx_PWMN_Stop+0x98>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065f6:	e00b      	b.n	8006610 <HAL_TIMEx_PWMN_Stop+0xb0>
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	2b08      	cmp	r3, #8
 80065fc:	d104      	bne.n	8006608 <HAL_TIMEx_PWMN_Stop+0xa8>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006606:	e003      	b.n	8006610 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
	...

0800661c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006630:	2302      	movs	r3, #2
 8006632:	e065      	b.n	8006700 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a2c      	ldr	r2, [pc, #176]	@ (800670c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d004      	beq.n	8006668 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a2b      	ldr	r2, [pc, #172]	@ (8006710 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d108      	bne.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800666e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006684:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4313      	orrs	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a1b      	ldr	r2, [pc, #108]	@ (800670c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d018      	beq.n	80066d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066aa:	d013      	beq.n	80066d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a18      	ldr	r2, [pc, #96]	@ (8006714 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d00e      	beq.n	80066d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a17      	ldr	r2, [pc, #92]	@ (8006718 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d009      	beq.n	80066d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a12      	ldr	r2, [pc, #72]	@ (8006710 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d004      	beq.n	80066d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a13      	ldr	r2, [pc, #76]	@ (800671c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d10c      	bne.n	80066ee <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	40012c00 	.word	0x40012c00
 8006710:	40013400 	.word	0x40013400
 8006714:	40000400 	.word	0x40000400
 8006718:	40000800 	.word	0x40000800
 800671c:	40014000 	.word	0x40014000

08006720 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006738:	2302      	movs	r3, #2
 800673a:	e073      	b.n	8006824 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	4313      	orrs	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	4313      	orrs	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4313      	orrs	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	4313      	orrs	r3, r2
 8006796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a2:	4313      	orrs	r3, r2
 80067a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	041b      	lsls	r3, r3, #16
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a19      	ldr	r2, [pc, #100]	@ (8006830 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d004      	beq.n	80067d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a18      	ldr	r2, [pc, #96]	@ (8006834 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d11c      	bne.n	8006812 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e2:	051b      	lsls	r3, r3, #20
 80067e4:	4313      	orrs	r3, r2
 80067e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006800:	4313      	orrs	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680e:	4313      	orrs	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	40012c00 	.word	0x40012c00
 8006834:	40013400 	.word	0x40013400

08006838 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	2204      	movs	r2, #4
 80068d8:	fa02 f303 	lsl.w	r3, r2, r3
 80068dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6a1a      	ldr	r2, [r3, #32]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	43db      	mvns	r3, r3
 80068e6:	401a      	ands	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a1a      	ldr	r2, [r3, #32]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f003 030f 	and.w	r3, r3, #15
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	fa01 f303 	lsl.w	r3, r1, r3
 80068fc:	431a      	orrs	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	621a      	str	r2, [r3, #32]
}
 8006902:	bf00      	nop
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b082      	sub	sp, #8
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e042      	b.n	80069a6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006926:	2b00      	cmp	r3, #0
 8006928:	d106      	bne.n	8006938 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7fb fe08 	bl	8002548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2224      	movs	r2, #36	@ 0x24
 800693c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0201 	bic.w	r2, r2, #1
 800694e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fee5 	bl	8007728 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fc16 	bl	8007190 <UART_SetConfig>
 8006964:	4603      	mov	r3, r0
 8006966:	2b01      	cmp	r3, #1
 8006968:	d101      	bne.n	800696e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e01b      	b.n	80069a6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800697c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800698c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f042 0201 	orr.w	r2, r2, #1
 800699c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 ff64 	bl	800786c <UART_CheckIdleState>
 80069a4:	4603      	mov	r3, r0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b08a      	sub	sp, #40	@ 0x28
 80069b2:	af02      	add	r7, sp, #8
 80069b4:	60f8      	str	r0, [r7, #12]
 80069b6:	60b9      	str	r1, [r7, #8]
 80069b8:	603b      	str	r3, [r7, #0]
 80069ba:	4613      	mov	r3, r2
 80069bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c4:	2b20      	cmp	r3, #32
 80069c6:	d17b      	bne.n	8006ac0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <HAL_UART_Transmit+0x26>
 80069ce:	88fb      	ldrh	r3, [r7, #6]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e074      	b.n	8006ac2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2221      	movs	r2, #33	@ 0x21
 80069e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069e8:	f7fb fea4 	bl	8002734 <HAL_GetTick>
 80069ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	88fa      	ldrh	r2, [r7, #6]
 80069f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	88fa      	ldrh	r2, [r7, #6]
 80069fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a06:	d108      	bne.n	8006a1a <HAL_UART_Transmit+0x6c>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d104      	bne.n	8006a1a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006a10:	2300      	movs	r3, #0
 8006a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	61bb      	str	r3, [r7, #24]
 8006a18:	e003      	b.n	8006a22 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a22:	e030      	b.n	8006a86 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	2180      	movs	r1, #128	@ 0x80
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 ffc6 	bl	80079c0 <UART_WaitOnFlagUntilTimeout>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d005      	beq.n	8006a46 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e03d      	b.n	8006ac2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10b      	bne.n	8006a64 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	881b      	ldrh	r3, [r3, #0]
 8006a50:	461a      	mov	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	3302      	adds	r3, #2
 8006a60:	61bb      	str	r3, [r7, #24]
 8006a62:	e007      	b.n	8006a74 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	781a      	ldrb	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	3301      	adds	r3, #1
 8006a72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1c8      	bne.n	8006a24 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	2140      	movs	r1, #64	@ 0x40
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 ff8f 	bl	80079c0 <UART_WaitOnFlagUntilTimeout>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d005      	beq.n	8006ab4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e006      	b.n	8006ac2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	e000      	b.n	8006ac2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006ac0:	2302      	movs	r3, #2
  }
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3720      	adds	r7, #32
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b0ba      	sub	sp, #232	@ 0xe8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006af2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006af6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006afa:	4013      	ands	r3, r2
 8006afc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006b00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d11b      	bne.n	8006b40 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b0c:	f003 0320 	and.w	r3, r3, #32
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d015      	beq.n	8006b40 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b18:	f003 0320 	and.w	r3, r3, #32
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d105      	bne.n	8006b2c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d009      	beq.n	8006b40 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 8300 	beq.w	8007136 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	4798      	blx	r3
      }
      return;
 8006b3e:	e2fa      	b.n	8007136 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 8123 	beq.w	8006d90 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006b4a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006b4e:	4b8d      	ldr	r3, [pc, #564]	@ (8006d84 <HAL_UART_IRQHandler+0x2b8>)
 8006b50:	4013      	ands	r3, r2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d106      	bne.n	8006b64 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006b56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006b5a:	4b8b      	ldr	r3, [pc, #556]	@ (8006d88 <HAL_UART_IRQHandler+0x2bc>)
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 8116 	beq.w	8006d90 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d011      	beq.n	8006b94 <HAL_UART_IRQHandler+0xc8>
 8006b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00b      	beq.n	8006b94 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2201      	movs	r2, #1
 8006b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b8a:	f043 0201 	orr.w	r2, r3, #1
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d011      	beq.n	8006bc4 <HAL_UART_IRQHandler+0xf8>
 8006ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00b      	beq.n	8006bc4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bba:	f043 0204 	orr.w	r2, r3, #4
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bc8:	f003 0304 	and.w	r3, r3, #4
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d011      	beq.n	8006bf4 <HAL_UART_IRQHandler+0x128>
 8006bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00b      	beq.n	8006bf4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2204      	movs	r2, #4
 8006be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bea:	f043 0202 	orr.w	r2, r3, #2
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bf8:	f003 0308 	and.w	r3, r3, #8
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d017      	beq.n	8006c30 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c04:	f003 0320 	and.w	r3, r3, #32
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d105      	bne.n	8006c18 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006c0c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006c10:	4b5c      	ldr	r3, [pc, #368]	@ (8006d84 <HAL_UART_IRQHandler+0x2b8>)
 8006c12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00b      	beq.n	8006c30 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2208      	movs	r2, #8
 8006c1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c26:	f043 0208 	orr.w	r2, r3, #8
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d012      	beq.n	8006c62 <HAL_UART_IRQHandler+0x196>
 8006c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00c      	beq.n	8006c62 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c58:	f043 0220 	orr.w	r2, r3, #32
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 8266 	beq.w	800713a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c72:	f003 0320 	and.w	r3, r3, #32
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d013      	beq.n	8006ca2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c7e:	f003 0320 	and.w	r3, r3, #32
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d105      	bne.n	8006c92 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d007      	beq.n	8006ca2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d003      	beq.n	8006ca2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ca8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cb6:	2b40      	cmp	r3, #64	@ 0x40
 8006cb8:	d005      	beq.n	8006cc6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cbe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d054      	beq.n	8006d70 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fee7 	bl	8007a9a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd6:	2b40      	cmp	r3, #64	@ 0x40
 8006cd8:	d146      	bne.n	8006d68 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3308      	adds	r3, #8
 8006ce0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ce8:	e853 3f00 	ldrex	r3, [r3]
 8006cec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006cf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006cf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3308      	adds	r3, #8
 8006d02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006d06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006d0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006d12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006d16:	e841 2300 	strex	r3, r2, [r1]
 8006d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006d1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1d9      	bne.n	8006cda <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d017      	beq.n	8006d60 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d36:	4a15      	ldr	r2, [pc, #84]	@ (8006d8c <HAL_UART_IRQHandler+0x2c0>)
 8006d38:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7fc fe72 	bl	8003a2a <HAL_DMA_Abort_IT>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d019      	beq.n	8006d80 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d5e:	e00f      	b.n	8006d80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f9ff 	bl	8007164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d66:	e00b      	b.n	8006d80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f9fb 	bl	8007164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d6e:	e007      	b.n	8006d80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f9f7 	bl	8007164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006d7e:	e1dc      	b.n	800713a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d80:	bf00      	nop
    return;
 8006d82:	e1da      	b.n	800713a <HAL_UART_IRQHandler+0x66e>
 8006d84:	10000001 	.word	0x10000001
 8006d88:	04000120 	.word	0x04000120
 8006d8c:	08007b67 	.word	0x08007b67

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	f040 8170 	bne.w	800707a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d9e:	f003 0310 	and.w	r3, r3, #16
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 8169 	beq.w	800707a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dac:	f003 0310 	and.w	r3, r3, #16
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 8162 	beq.w	800707a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2210      	movs	r2, #16
 8006dbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dc8:	2b40      	cmp	r3, #64	@ 0x40
 8006dca:	f040 80d8 	bne.w	8006f7e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ddc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 80af 	beq.w	8006f44 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006dec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006df0:	429a      	cmp	r2, r3
 8006df2:	f080 80a7 	bcs.w	8006f44 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006dfc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0320 	and.w	r3, r3, #32
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f040 8087 	bne.w	8006f22 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e20:	e853 3f00 	ldrex	r3, [r3]
 8006e24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	461a      	mov	r2, r3
 8006e3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e42:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006e4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1da      	bne.n	8006e14 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3308      	adds	r3, #8
 8006e64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006e6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e70:	f023 0301 	bic.w	r3, r3, #1
 8006e74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006e82:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006e86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006e8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006e94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e1      	bne.n	8006e5e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006eaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006eac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3308      	adds	r3, #8
 8006eba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ebe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ec0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ec4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ecc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e3      	bne.n	8006e9a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ee8:	e853 3f00 	ldrex	r3, [r3]
 8006eec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006eee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ef0:	f023 0310 	bic.w	r3, r3, #16
 8006ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	461a      	mov	r2, r3
 8006efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f04:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f0a:	e841 2300 	strex	r3, r2, [r1]
 8006f0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1e4      	bne.n	8006ee0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7fc fd2b 	bl	8003978 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2202      	movs	r2, #2
 8006f26:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f91b 	bl	8007178 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006f42:	e0fc      	b.n	800713e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	f040 80f5 	bne.w	800713e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b20      	cmp	r3, #32
 8006f64:	f040 80eb 	bne.w	800713e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f8fe 	bl	8007178 <HAL_UARTEx_RxEventCallback>
      return;
 8006f7c:	e0df      	b.n	800713e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 80d1 	beq.w	8007142 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006fa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 80cc 	beq.w	8007142 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb2:	e853 3f00 	ldrex	r3, [r3]
 8006fb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006fcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fd4:	e841 2300 	strex	r3, r2, [r1]
 8006fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e4      	bne.n	8006faa <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fea:	e853 3f00 	ldrex	r3, [r3]
 8006fee:	623b      	str	r3, [r7, #32]
   return(result);
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ff6:	f023 0301 	bic.w	r3, r3, #1
 8006ffa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3308      	adds	r3, #8
 8007004:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007008:	633a      	str	r2, [r7, #48]	@ 0x30
 800700a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800700e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007010:	e841 2300 	strex	r3, r2, [r1]
 8007014:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1e1      	bne.n	8006fe0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2220      	movs	r2, #32
 8007020:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	e853 3f00 	ldrex	r3, [r3]
 800703c:	60fb      	str	r3, [r7, #12]
   return(result);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f023 0310 	bic.w	r3, r3, #16
 8007044:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	461a      	mov	r2, r3
 800704e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007052:	61fb      	str	r3, [r7, #28]
 8007054:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007056:	69b9      	ldr	r1, [r7, #24]
 8007058:	69fa      	ldr	r2, [r7, #28]
 800705a:	e841 2300 	strex	r3, r2, [r1]
 800705e:	617b      	str	r3, [r7, #20]
   return(result);
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1e4      	bne.n	8007030 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2202      	movs	r2, #2
 800706a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800706c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f880 	bl	8007178 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007078:	e063      	b.n	8007142 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800707a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800707e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00e      	beq.n	80070a4 <HAL_UART_IRQHandler+0x5d8>
 8007086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800708a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d008      	beq.n	80070a4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800709a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fd9f 	bl	8007be0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070a2:	e051      	b.n	8007148 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80070a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d014      	beq.n	80070da <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80070b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d105      	bne.n	80070c8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80070bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d008      	beq.n	80070da <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d03a      	beq.n	8007146 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	4798      	blx	r3
    }
    return;
 80070d8:	e035      	b.n	8007146 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d009      	beq.n	80070fa <HAL_UART_IRQHandler+0x62e>
 80070e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fd49 	bl	8007b8a <UART_EndTransmit_IT>
    return;
 80070f8:	e026      	b.n	8007148 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80070fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d009      	beq.n	800711a <HAL_UART_IRQHandler+0x64e>
 8007106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800710a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fd78 	bl	8007c08 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007118:	e016      	b.n	8007148 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800711a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800711e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d010      	beq.n	8007148 <HAL_UART_IRQHandler+0x67c>
 8007126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800712a:	2b00      	cmp	r3, #0
 800712c:	da0c      	bge.n	8007148 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fd60 	bl	8007bf4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007134:	e008      	b.n	8007148 <HAL_UART_IRQHandler+0x67c>
      return;
 8007136:	bf00      	nop
 8007138:	e006      	b.n	8007148 <HAL_UART_IRQHandler+0x67c>
    return;
 800713a:	bf00      	nop
 800713c:	e004      	b.n	8007148 <HAL_UART_IRQHandler+0x67c>
      return;
 800713e:	bf00      	nop
 8007140:	e002      	b.n	8007148 <HAL_UART_IRQHandler+0x67c>
      return;
 8007142:	bf00      	nop
 8007144:	e000      	b.n	8007148 <HAL_UART_IRQHandler+0x67c>
    return;
 8007146:	bf00      	nop
  }
}
 8007148:	37e8      	adds	r7, #232	@ 0xe8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop

08007150 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007194:	b08c      	sub	sp, #48	@ 0x30
 8007196:	af00      	add	r7, sp, #0
 8007198:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	689a      	ldr	r2, [r3, #8]
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	431a      	orrs	r2, r3
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	431a      	orrs	r2, r3
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	69db      	ldr	r3, [r3, #28]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	4bab      	ldr	r3, [pc, #684]	@ (800746c <UART_SetConfig+0x2dc>)
 80071c0:	4013      	ands	r3, r2
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	6812      	ldr	r2, [r2, #0]
 80071c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071c8:	430b      	orrs	r3, r1
 80071ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	68da      	ldr	r2, [r3, #12]
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	430a      	orrs	r2, r1
 80071e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4aa0      	ldr	r2, [pc, #640]	@ (8007470 <UART_SetConfig+0x2e0>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d004      	beq.n	80071fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071f8:	4313      	orrs	r3, r2
 80071fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007206:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	6812      	ldr	r2, [r2, #0]
 800720e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007210:	430b      	orrs	r3, r1
 8007212:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721a:	f023 010f 	bic.w	r1, r3, #15
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a91      	ldr	r2, [pc, #580]	@ (8007474 <UART_SetConfig+0x2e4>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d125      	bne.n	8007280 <UART_SetConfig+0xf0>
 8007234:	4b90      	ldr	r3, [pc, #576]	@ (8007478 <UART_SetConfig+0x2e8>)
 8007236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800723a:	f003 0303 	and.w	r3, r3, #3
 800723e:	2b03      	cmp	r3, #3
 8007240:	d81a      	bhi.n	8007278 <UART_SetConfig+0xe8>
 8007242:	a201      	add	r2, pc, #4	@ (adr r2, 8007248 <UART_SetConfig+0xb8>)
 8007244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007248:	08007259 	.word	0x08007259
 800724c:	08007269 	.word	0x08007269
 8007250:	08007261 	.word	0x08007261
 8007254:	08007271 	.word	0x08007271
 8007258:	2301      	movs	r3, #1
 800725a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800725e:	e0d6      	b.n	800740e <UART_SetConfig+0x27e>
 8007260:	2302      	movs	r3, #2
 8007262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007266:	e0d2      	b.n	800740e <UART_SetConfig+0x27e>
 8007268:	2304      	movs	r3, #4
 800726a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800726e:	e0ce      	b.n	800740e <UART_SetConfig+0x27e>
 8007270:	2308      	movs	r3, #8
 8007272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007276:	e0ca      	b.n	800740e <UART_SetConfig+0x27e>
 8007278:	2310      	movs	r3, #16
 800727a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800727e:	e0c6      	b.n	800740e <UART_SetConfig+0x27e>
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a7d      	ldr	r2, [pc, #500]	@ (800747c <UART_SetConfig+0x2ec>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d138      	bne.n	80072fc <UART_SetConfig+0x16c>
 800728a:	4b7b      	ldr	r3, [pc, #492]	@ (8007478 <UART_SetConfig+0x2e8>)
 800728c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007290:	f003 030c 	and.w	r3, r3, #12
 8007294:	2b0c      	cmp	r3, #12
 8007296:	d82d      	bhi.n	80072f4 <UART_SetConfig+0x164>
 8007298:	a201      	add	r2, pc, #4	@ (adr r2, 80072a0 <UART_SetConfig+0x110>)
 800729a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729e:	bf00      	nop
 80072a0:	080072d5 	.word	0x080072d5
 80072a4:	080072f5 	.word	0x080072f5
 80072a8:	080072f5 	.word	0x080072f5
 80072ac:	080072f5 	.word	0x080072f5
 80072b0:	080072e5 	.word	0x080072e5
 80072b4:	080072f5 	.word	0x080072f5
 80072b8:	080072f5 	.word	0x080072f5
 80072bc:	080072f5 	.word	0x080072f5
 80072c0:	080072dd 	.word	0x080072dd
 80072c4:	080072f5 	.word	0x080072f5
 80072c8:	080072f5 	.word	0x080072f5
 80072cc:	080072f5 	.word	0x080072f5
 80072d0:	080072ed 	.word	0x080072ed
 80072d4:	2300      	movs	r3, #0
 80072d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072da:	e098      	b.n	800740e <UART_SetConfig+0x27e>
 80072dc:	2302      	movs	r3, #2
 80072de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072e2:	e094      	b.n	800740e <UART_SetConfig+0x27e>
 80072e4:	2304      	movs	r3, #4
 80072e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ea:	e090      	b.n	800740e <UART_SetConfig+0x27e>
 80072ec:	2308      	movs	r3, #8
 80072ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072f2:	e08c      	b.n	800740e <UART_SetConfig+0x27e>
 80072f4:	2310      	movs	r3, #16
 80072f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072fa:	e088      	b.n	800740e <UART_SetConfig+0x27e>
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a5f      	ldr	r2, [pc, #380]	@ (8007480 <UART_SetConfig+0x2f0>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d125      	bne.n	8007352 <UART_SetConfig+0x1c2>
 8007306:	4b5c      	ldr	r3, [pc, #368]	@ (8007478 <UART_SetConfig+0x2e8>)
 8007308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800730c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007310:	2b30      	cmp	r3, #48	@ 0x30
 8007312:	d016      	beq.n	8007342 <UART_SetConfig+0x1b2>
 8007314:	2b30      	cmp	r3, #48	@ 0x30
 8007316:	d818      	bhi.n	800734a <UART_SetConfig+0x1ba>
 8007318:	2b20      	cmp	r3, #32
 800731a:	d00a      	beq.n	8007332 <UART_SetConfig+0x1a2>
 800731c:	2b20      	cmp	r3, #32
 800731e:	d814      	bhi.n	800734a <UART_SetConfig+0x1ba>
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <UART_SetConfig+0x19a>
 8007324:	2b10      	cmp	r3, #16
 8007326:	d008      	beq.n	800733a <UART_SetConfig+0x1aa>
 8007328:	e00f      	b.n	800734a <UART_SetConfig+0x1ba>
 800732a:	2300      	movs	r3, #0
 800732c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007330:	e06d      	b.n	800740e <UART_SetConfig+0x27e>
 8007332:	2302      	movs	r3, #2
 8007334:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007338:	e069      	b.n	800740e <UART_SetConfig+0x27e>
 800733a:	2304      	movs	r3, #4
 800733c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007340:	e065      	b.n	800740e <UART_SetConfig+0x27e>
 8007342:	2308      	movs	r3, #8
 8007344:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007348:	e061      	b.n	800740e <UART_SetConfig+0x27e>
 800734a:	2310      	movs	r3, #16
 800734c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007350:	e05d      	b.n	800740e <UART_SetConfig+0x27e>
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a4b      	ldr	r2, [pc, #300]	@ (8007484 <UART_SetConfig+0x2f4>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d125      	bne.n	80073a8 <UART_SetConfig+0x218>
 800735c:	4b46      	ldr	r3, [pc, #280]	@ (8007478 <UART_SetConfig+0x2e8>)
 800735e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007362:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007366:	2bc0      	cmp	r3, #192	@ 0xc0
 8007368:	d016      	beq.n	8007398 <UART_SetConfig+0x208>
 800736a:	2bc0      	cmp	r3, #192	@ 0xc0
 800736c:	d818      	bhi.n	80073a0 <UART_SetConfig+0x210>
 800736e:	2b80      	cmp	r3, #128	@ 0x80
 8007370:	d00a      	beq.n	8007388 <UART_SetConfig+0x1f8>
 8007372:	2b80      	cmp	r3, #128	@ 0x80
 8007374:	d814      	bhi.n	80073a0 <UART_SetConfig+0x210>
 8007376:	2b00      	cmp	r3, #0
 8007378:	d002      	beq.n	8007380 <UART_SetConfig+0x1f0>
 800737a:	2b40      	cmp	r3, #64	@ 0x40
 800737c:	d008      	beq.n	8007390 <UART_SetConfig+0x200>
 800737e:	e00f      	b.n	80073a0 <UART_SetConfig+0x210>
 8007380:	2300      	movs	r3, #0
 8007382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007386:	e042      	b.n	800740e <UART_SetConfig+0x27e>
 8007388:	2302      	movs	r3, #2
 800738a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800738e:	e03e      	b.n	800740e <UART_SetConfig+0x27e>
 8007390:	2304      	movs	r3, #4
 8007392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007396:	e03a      	b.n	800740e <UART_SetConfig+0x27e>
 8007398:	2308      	movs	r3, #8
 800739a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800739e:	e036      	b.n	800740e <UART_SetConfig+0x27e>
 80073a0:	2310      	movs	r3, #16
 80073a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073a6:	e032      	b.n	800740e <UART_SetConfig+0x27e>
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a30      	ldr	r2, [pc, #192]	@ (8007470 <UART_SetConfig+0x2e0>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d12a      	bne.n	8007408 <UART_SetConfig+0x278>
 80073b2:	4b31      	ldr	r3, [pc, #196]	@ (8007478 <UART_SetConfig+0x2e8>)
 80073b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80073bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073c0:	d01a      	beq.n	80073f8 <UART_SetConfig+0x268>
 80073c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073c6:	d81b      	bhi.n	8007400 <UART_SetConfig+0x270>
 80073c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073cc:	d00c      	beq.n	80073e8 <UART_SetConfig+0x258>
 80073ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073d2:	d815      	bhi.n	8007400 <UART_SetConfig+0x270>
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d003      	beq.n	80073e0 <UART_SetConfig+0x250>
 80073d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073dc:	d008      	beq.n	80073f0 <UART_SetConfig+0x260>
 80073de:	e00f      	b.n	8007400 <UART_SetConfig+0x270>
 80073e0:	2300      	movs	r3, #0
 80073e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073e6:	e012      	b.n	800740e <UART_SetConfig+0x27e>
 80073e8:	2302      	movs	r3, #2
 80073ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ee:	e00e      	b.n	800740e <UART_SetConfig+0x27e>
 80073f0:	2304      	movs	r3, #4
 80073f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073f6:	e00a      	b.n	800740e <UART_SetConfig+0x27e>
 80073f8:	2308      	movs	r3, #8
 80073fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073fe:	e006      	b.n	800740e <UART_SetConfig+0x27e>
 8007400:	2310      	movs	r3, #16
 8007402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007406:	e002      	b.n	800740e <UART_SetConfig+0x27e>
 8007408:	2310      	movs	r3, #16
 800740a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a17      	ldr	r2, [pc, #92]	@ (8007470 <UART_SetConfig+0x2e0>)
 8007414:	4293      	cmp	r3, r2
 8007416:	f040 80a8 	bne.w	800756a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800741a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800741e:	2b08      	cmp	r3, #8
 8007420:	d834      	bhi.n	800748c <UART_SetConfig+0x2fc>
 8007422:	a201      	add	r2, pc, #4	@ (adr r2, 8007428 <UART_SetConfig+0x298>)
 8007424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007428:	0800744d 	.word	0x0800744d
 800742c:	0800748d 	.word	0x0800748d
 8007430:	08007455 	.word	0x08007455
 8007434:	0800748d 	.word	0x0800748d
 8007438:	0800745b 	.word	0x0800745b
 800743c:	0800748d 	.word	0x0800748d
 8007440:	0800748d 	.word	0x0800748d
 8007444:	0800748d 	.word	0x0800748d
 8007448:	08007463 	.word	0x08007463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800744c:	f7fd fba8 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 8007450:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007452:	e021      	b.n	8007498 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007454:	4b0c      	ldr	r3, [pc, #48]	@ (8007488 <UART_SetConfig+0x2f8>)
 8007456:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007458:	e01e      	b.n	8007498 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800745a:	f7fd fb35 	bl	8004ac8 <HAL_RCC_GetSysClockFreq>
 800745e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007460:	e01a      	b.n	8007498 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007466:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007468:	e016      	b.n	8007498 <UART_SetConfig+0x308>
 800746a:	bf00      	nop
 800746c:	cfff69f3 	.word	0xcfff69f3
 8007470:	40008000 	.word	0x40008000
 8007474:	40013800 	.word	0x40013800
 8007478:	40021000 	.word	0x40021000
 800747c:	40004400 	.word	0x40004400
 8007480:	40004800 	.word	0x40004800
 8007484:	40004c00 	.word	0x40004c00
 8007488:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007496:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749a:	2b00      	cmp	r3, #0
 800749c:	f000 812a 	beq.w	80076f4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a4:	4a9e      	ldr	r2, [pc, #632]	@ (8007720 <UART_SetConfig+0x590>)
 80074a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074aa:	461a      	mov	r2, r3
 80074ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80074b2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	4613      	mov	r3, r2
 80074ba:	005b      	lsls	r3, r3, #1
 80074bc:	4413      	add	r3, r2
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d305      	bcc.n	80074d0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d903      	bls.n	80074d8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80074d6:	e10d      	b.n	80076f4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074da:	2200      	movs	r2, #0
 80074dc:	60bb      	str	r3, [r7, #8]
 80074de:	60fa      	str	r2, [r7, #12]
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e4:	4a8e      	ldr	r2, [pc, #568]	@ (8007720 <UART_SetConfig+0x590>)
 80074e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	2200      	movs	r2, #0
 80074ee:	603b      	str	r3, [r7, #0]
 80074f0:	607a      	str	r2, [r7, #4]
 80074f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80074fa:	f7f9 fbcd 	bl	8000c98 <__aeabi_uldivmod>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	4610      	mov	r0, r2
 8007504:	4619      	mov	r1, r3
 8007506:	f04f 0200 	mov.w	r2, #0
 800750a:	f04f 0300 	mov.w	r3, #0
 800750e:	020b      	lsls	r3, r1, #8
 8007510:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007514:	0202      	lsls	r2, r0, #8
 8007516:	6979      	ldr	r1, [r7, #20]
 8007518:	6849      	ldr	r1, [r1, #4]
 800751a:	0849      	lsrs	r1, r1, #1
 800751c:	2000      	movs	r0, #0
 800751e:	460c      	mov	r4, r1
 8007520:	4605      	mov	r5, r0
 8007522:	eb12 0804 	adds.w	r8, r2, r4
 8007526:	eb43 0905 	adc.w	r9, r3, r5
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	469a      	mov	sl, r3
 8007532:	4693      	mov	fp, r2
 8007534:	4652      	mov	r2, sl
 8007536:	465b      	mov	r3, fp
 8007538:	4640      	mov	r0, r8
 800753a:	4649      	mov	r1, r9
 800753c:	f7f9 fbac 	bl	8000c98 <__aeabi_uldivmod>
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	4613      	mov	r3, r2
 8007546:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800754e:	d308      	bcc.n	8007562 <UART_SetConfig+0x3d2>
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007556:	d204      	bcs.n	8007562 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6a3a      	ldr	r2, [r7, #32]
 800755e:	60da      	str	r2, [r3, #12]
 8007560:	e0c8      	b.n	80076f4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007568:	e0c4      	b.n	80076f4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007572:	d167      	bne.n	8007644 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007574:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007578:	2b08      	cmp	r3, #8
 800757a:	d828      	bhi.n	80075ce <UART_SetConfig+0x43e>
 800757c:	a201      	add	r2, pc, #4	@ (adr r2, 8007584 <UART_SetConfig+0x3f4>)
 800757e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007582:	bf00      	nop
 8007584:	080075a9 	.word	0x080075a9
 8007588:	080075b1 	.word	0x080075b1
 800758c:	080075b9 	.word	0x080075b9
 8007590:	080075cf 	.word	0x080075cf
 8007594:	080075bf 	.word	0x080075bf
 8007598:	080075cf 	.word	0x080075cf
 800759c:	080075cf 	.word	0x080075cf
 80075a0:	080075cf 	.word	0x080075cf
 80075a4:	080075c7 	.word	0x080075c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075a8:	f7fd fafa 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 80075ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075ae:	e014      	b.n	80075da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075b0:	f7fd fb0c 	bl	8004bcc <HAL_RCC_GetPCLK2Freq>
 80075b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075b6:	e010      	b.n	80075da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075b8:	4b5a      	ldr	r3, [pc, #360]	@ (8007724 <UART_SetConfig+0x594>)
 80075ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075bc:	e00d      	b.n	80075da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075be:	f7fd fa83 	bl	8004ac8 <HAL_RCC_GetSysClockFreq>
 80075c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075c4:	e009      	b.n	80075da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075cc:	e005      	b.n	80075da <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80075d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 8089 	beq.w	80076f4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e6:	4a4e      	ldr	r2, [pc, #312]	@ (8007720 <UART_SetConfig+0x590>)
 80075e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075ec:	461a      	mov	r2, r3
 80075ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80075f4:	005a      	lsls	r2, r3, #1
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	085b      	lsrs	r3, r3, #1
 80075fc:	441a      	add	r2, r3
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	fbb2 f3f3 	udiv	r3, r2, r3
 8007606:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	2b0f      	cmp	r3, #15
 800760c:	d916      	bls.n	800763c <UART_SetConfig+0x4ac>
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007614:	d212      	bcs.n	800763c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	b29b      	uxth	r3, r3
 800761a:	f023 030f 	bic.w	r3, r3, #15
 800761e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	085b      	lsrs	r3, r3, #1
 8007624:	b29b      	uxth	r3, r3
 8007626:	f003 0307 	and.w	r3, r3, #7
 800762a:	b29a      	uxth	r2, r3
 800762c:	8bfb      	ldrh	r3, [r7, #30]
 800762e:	4313      	orrs	r3, r2
 8007630:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	8bfa      	ldrh	r2, [r7, #30]
 8007638:	60da      	str	r2, [r3, #12]
 800763a:	e05b      	b.n	80076f4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007642:	e057      	b.n	80076f4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007644:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007648:	2b08      	cmp	r3, #8
 800764a:	d828      	bhi.n	800769e <UART_SetConfig+0x50e>
 800764c:	a201      	add	r2, pc, #4	@ (adr r2, 8007654 <UART_SetConfig+0x4c4>)
 800764e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007652:	bf00      	nop
 8007654:	08007679 	.word	0x08007679
 8007658:	08007681 	.word	0x08007681
 800765c:	08007689 	.word	0x08007689
 8007660:	0800769f 	.word	0x0800769f
 8007664:	0800768f 	.word	0x0800768f
 8007668:	0800769f 	.word	0x0800769f
 800766c:	0800769f 	.word	0x0800769f
 8007670:	0800769f 	.word	0x0800769f
 8007674:	08007697 	.word	0x08007697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007678:	f7fd fa92 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 800767c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800767e:	e014      	b.n	80076aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007680:	f7fd faa4 	bl	8004bcc <HAL_RCC_GetPCLK2Freq>
 8007684:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007686:	e010      	b.n	80076aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007688:	4b26      	ldr	r3, [pc, #152]	@ (8007724 <UART_SetConfig+0x594>)
 800768a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800768c:	e00d      	b.n	80076aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800768e:	f7fd fa1b 	bl	8004ac8 <HAL_RCC_GetSysClockFreq>
 8007692:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007694:	e009      	b.n	80076aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800769a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800769c:	e005      	b.n	80076aa <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800769e:	2300      	movs	r3, #0
 80076a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80076a8:	bf00      	nop
    }

    if (pclk != 0U)
 80076aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d021      	beq.n	80076f4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b4:	4a1a      	ldr	r2, [pc, #104]	@ (8007720 <UART_SetConfig+0x590>)
 80076b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076ba:	461a      	mov	r2, r3
 80076bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076be:	fbb3 f2f2 	udiv	r2, r3, r2
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	085b      	lsrs	r3, r3, #1
 80076c8:	441a      	add	r2, r3
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	2b0f      	cmp	r3, #15
 80076d8:	d909      	bls.n	80076ee <UART_SetConfig+0x55e>
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076e0:	d205      	bcs.n	80076ee <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	60da      	str	r2, [r3, #12]
 80076ec:	e002      	b.n	80076f4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	2201      	movs	r2, #1
 8007700:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	2200      	movs	r2, #0
 8007708:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2200      	movs	r2, #0
 800770e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007710:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007714:	4618      	mov	r0, r3
 8007716:	3730      	adds	r7, #48	@ 0x30
 8007718:	46bd      	mov	sp, r7
 800771a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800771e:	bf00      	nop
 8007720:	0800bc74 	.word	0x0800bc74
 8007724:	00f42400 	.word	0x00f42400

08007728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007734:	f003 0308 	and.w	r3, r3, #8
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00a      	beq.n	8007752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00a      	beq.n	8007774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	430a      	orrs	r2, r1
 8007772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00a      	beq.n	8007796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	430a      	orrs	r2, r1
 8007794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800779a:	f003 0304 	and.w	r3, r3, #4
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00a      	beq.n	80077b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	430a      	orrs	r2, r1
 80077b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077bc:	f003 0310 	and.w	r3, r3, #16
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00a      	beq.n	80077da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077de:	f003 0320 	and.w	r3, r3, #32
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007804:	2b00      	cmp	r3, #0
 8007806:	d01a      	beq.n	800783e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007822:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007826:	d10a      	bne.n	800783e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	605a      	str	r2, [r3, #4]
  }
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b098      	sub	sp, #96	@ 0x60
 8007870:	af02      	add	r7, sp, #8
 8007872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800787c:	f7fa ff5a 	bl	8002734 <HAL_GetTick>
 8007880:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0308 	and.w	r3, r3, #8
 800788c:	2b08      	cmp	r3, #8
 800788e:	d12f      	bne.n	80078f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007890:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007898:	2200      	movs	r2, #0
 800789a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f88e 	bl	80079c0 <UART_WaitOnFlagUntilTimeout>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d022      	beq.n	80078f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b2:	e853 3f00 	ldrex	r3, [r3]
 80078b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078be:	653b      	str	r3, [r7, #80]	@ 0x50
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	461a      	mov	r2, r3
 80078c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80078ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078d0:	e841 2300 	strex	r3, r2, [r1]
 80078d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e6      	bne.n	80078aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2220      	movs	r2, #32
 80078e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e063      	b.n	80079b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0304 	and.w	r3, r3, #4
 80078fa:	2b04      	cmp	r3, #4
 80078fc:	d149      	bne.n	8007992 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007906:	2200      	movs	r2, #0
 8007908:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f857 	bl	80079c0 <UART_WaitOnFlagUntilTimeout>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d03c      	beq.n	8007992 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007920:	e853 3f00 	ldrex	r3, [r3]
 8007924:	623b      	str	r3, [r7, #32]
   return(result);
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800792c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007936:	633b      	str	r3, [r7, #48]	@ 0x30
 8007938:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800793c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800793e:	e841 2300 	strex	r3, r2, [r1]
 8007942:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1e6      	bne.n	8007918 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	3308      	adds	r3, #8
 8007950:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	e853 3f00 	ldrex	r3, [r3]
 8007958:	60fb      	str	r3, [r7, #12]
   return(result);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f023 0301 	bic.w	r3, r3, #1
 8007960:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	3308      	adds	r3, #8
 8007968:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800796a:	61fa      	str	r2, [r7, #28]
 800796c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796e:	69b9      	ldr	r1, [r7, #24]
 8007970:	69fa      	ldr	r2, [r7, #28]
 8007972:	e841 2300 	strex	r3, r2, [r1]
 8007976:	617b      	str	r3, [r7, #20]
   return(result);
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1e5      	bne.n	800794a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2220      	movs	r2, #32
 8007982:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e012      	b.n	80079b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2220      	movs	r2, #32
 8007996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2220      	movs	r2, #32
 800799e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3758      	adds	r7, #88	@ 0x58
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	603b      	str	r3, [r7, #0]
 80079cc:	4613      	mov	r3, r2
 80079ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079d0:	e04f      	b.n	8007a72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d8:	d04b      	beq.n	8007a72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079da:	f7fa feab 	bl	8002734 <HAL_GetTick>
 80079de:	4602      	mov	r2, r0
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d302      	bcc.n	80079f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e04e      	b.n	8007a92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0304 	and.w	r3, r3, #4
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d037      	beq.n	8007a72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2b80      	cmp	r3, #128	@ 0x80
 8007a06:	d034      	beq.n	8007a72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	2b40      	cmp	r3, #64	@ 0x40
 8007a0c:	d031      	beq.n	8007a72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	69db      	ldr	r3, [r3, #28]
 8007a14:	f003 0308 	and.w	r3, r3, #8
 8007a18:	2b08      	cmp	r3, #8
 8007a1a:	d110      	bne.n	8007a3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2208      	movs	r2, #8
 8007a22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 f838 	bl	8007a9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2208      	movs	r2, #8
 8007a2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e029      	b.n	8007a92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	69db      	ldr	r3, [r3, #28]
 8007a44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a4c:	d111      	bne.n	8007a72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 f81e 	bl	8007a9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2220      	movs	r2, #32
 8007a62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e00f      	b.n	8007a92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	69da      	ldr	r2, [r3, #28]
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	bf0c      	ite	eq
 8007a82:	2301      	moveq	r3, #1
 8007a84:	2300      	movne	r3, #0
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	461a      	mov	r2, r3
 8007a8a:	79fb      	ldrb	r3, [r7, #7]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d0a0      	beq.n	80079d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b095      	sub	sp, #84	@ 0x54
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aaa:	e853 3f00 	ldrex	r3, [r3]
 8007aae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	461a      	mov	r2, r3
 8007abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ac0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ac2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ac6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ac8:	e841 2300 	strex	r3, r2, [r1]
 8007acc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1e6      	bne.n	8007aa2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3308      	adds	r3, #8
 8007ada:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007adc:	6a3b      	ldr	r3, [r7, #32]
 8007ade:	e853 3f00 	ldrex	r3, [r3]
 8007ae2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007aea:	f023 0301 	bic.w	r3, r3, #1
 8007aee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3308      	adds	r3, #8
 8007af6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007af8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007afe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b00:	e841 2300 	strex	r3, r2, [r1]
 8007b04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1e3      	bne.n	8007ad4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d118      	bne.n	8007b46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	e853 3f00 	ldrex	r3, [r3]
 8007b20:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	f023 0310 	bic.w	r3, r3, #16
 8007b28:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b32:	61bb      	str	r3, [r7, #24]
 8007b34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b36:	6979      	ldr	r1, [r7, #20]
 8007b38:	69ba      	ldr	r2, [r7, #24]
 8007b3a:	e841 2300 	strex	r3, r2, [r1]
 8007b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1e6      	bne.n	8007b14 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2220      	movs	r2, #32
 8007b4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007b5a:	bf00      	nop
 8007b5c:	3754      	adds	r7, #84	@ 0x54
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b084      	sub	sp, #16
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f7ff faf1 	bl	8007164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b82:	bf00      	nop
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b088      	sub	sp, #32
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	e853 3f00 	ldrex	r3, [r3]
 8007b9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ba6:	61fb      	str	r3, [r7, #28]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	461a      	mov	r2, r3
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	61bb      	str	r3, [r7, #24]
 8007bb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb4:	6979      	ldr	r1, [r7, #20]
 8007bb6:	69ba      	ldr	r2, [r7, #24]
 8007bb8:	e841 2300 	strex	r3, r2, [r1]
 8007bbc:	613b      	str	r3, [r7, #16]
   return(result);
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e6      	bne.n	8007b92 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2220      	movs	r2, #32
 8007bc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7ff fabc 	bl	8007150 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bd8:	bf00      	nop
 8007bda:	3720      	adds	r7, #32
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d101      	bne.n	8007c32 <HAL_UARTEx_DisableFifoMode+0x16>
 8007c2e:	2302      	movs	r3, #2
 8007c30:	e027      	b.n	8007c82 <HAL_UARTEx_DisableFifoMode+0x66>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2224      	movs	r2, #36	@ 0x24
 8007c3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f022 0201 	bic.w	r2, r2, #1
 8007c58:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007c60:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2220      	movs	r2, #32
 8007c74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b084      	sub	sp, #16
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d101      	bne.n	8007ca6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	e02d      	b.n	8007d02 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2224      	movs	r2, #36	@ 0x24
 8007cb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 0201 	bic.w	r2, r2, #1
 8007ccc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	430a      	orrs	r2, r1
 8007ce0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f850 	bl	8007d88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b084      	sub	sp, #16
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d101      	bne.n	8007d22 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d1e:	2302      	movs	r3, #2
 8007d20:	e02d      	b.n	8007d7e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2224      	movs	r2, #36	@ 0x24
 8007d2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f022 0201 	bic.w	r2, r2, #1
 8007d48:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f812 	bl	8007d88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2220      	movs	r2, #32
 8007d70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
	...

08007d88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d108      	bne.n	8007daa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007da8:	e031      	b.n	8007e0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007daa:	2308      	movs	r3, #8
 8007dac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007dae:	2308      	movs	r3, #8
 8007db0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	0e5b      	lsrs	r3, r3, #25
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	f003 0307 	and.w	r3, r3, #7
 8007dc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	0f5b      	lsrs	r3, r3, #29
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	f003 0307 	and.w	r3, r3, #7
 8007dd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007dd2:	7bbb      	ldrb	r3, [r7, #14]
 8007dd4:	7b3a      	ldrb	r2, [r7, #12]
 8007dd6:	4911      	ldr	r1, [pc, #68]	@ (8007e1c <UARTEx_SetNbDataToProcess+0x94>)
 8007dd8:	5c8a      	ldrb	r2, [r1, r2]
 8007dda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007dde:	7b3a      	ldrb	r2, [r7, #12]
 8007de0:	490f      	ldr	r1, [pc, #60]	@ (8007e20 <UARTEx_SetNbDataToProcess+0x98>)
 8007de2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007de4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
 8007df2:	7b7a      	ldrb	r2, [r7, #13]
 8007df4:	4909      	ldr	r1, [pc, #36]	@ (8007e1c <UARTEx_SetNbDataToProcess+0x94>)
 8007df6:	5c8a      	ldrb	r2, [r1, r2]
 8007df8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007dfc:	7b7a      	ldrb	r2, [r7, #13]
 8007dfe:	4908      	ldr	r1, [pc, #32]	@ (8007e20 <UARTEx_SetNbDataToProcess+0x98>)
 8007e00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e02:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007e0e:	bf00      	nop
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	0800bc8c 	.word	0x0800bc8c
 8007e20:	0800bc94 	.word	0x0800bc94

08007e24 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007e32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e36:	2b84      	cmp	r3, #132	@ 0x84
 8007e38:	d005      	beq.n	8007e46 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007e3a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	4413      	add	r3, r2
 8007e42:	3303      	adds	r3, #3
 8007e44:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007e46:	68fb      	ldr	r3, [r7, #12]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3714      	adds	r7, #20
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007e58:	f000 fa5c 	bl	8008314 <vTaskStartScheduler>
  
  return osOK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e64:	b087      	sub	sp, #28
 8007e66:	af02      	add	r7, sp, #8
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685c      	ldr	r4, [r3, #4]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e78:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7ff ffcf 	bl	8007e24 <makeFreeRtosPriority>
 8007e86:	4602      	mov	r2, r0
 8007e88:	f107 030c 	add.w	r3, r7, #12
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	9200      	str	r2, [sp, #0]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	4632      	mov	r2, r6
 8007e94:	4629      	mov	r1, r5
 8007e96:	4620      	mov	r0, r4
 8007e98:	f000 f8d2 	bl	8008040 <xTaskCreate>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d001      	beq.n	8007ea6 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	e000      	b.n	8007ea8 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007eb0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <osDelay+0x16>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	e000      	b.n	8007ec8 <osDelay+0x18>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f000 f9ed 	bl	80082a8 <vTaskDelay>
  
  return osOK;
 8007ece:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f103 0208 	add.w	r2, r3, #8
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f103 0208 	add.w	r2, r3, #8
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f103 0208 	add.w	r2, r3, #8
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f32:	b480      	push	{r7}
 8007f34:	b085      	sub	sp, #20
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	689a      	ldr	r2, [r3, #8]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	601a      	str	r2, [r3, #0]
}
 8007f6e:	bf00      	nop
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b085      	sub	sp, #20
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f90:	d103      	bne.n	8007f9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	60fb      	str	r3, [r7, #12]
 8007f98:	e00c      	b.n	8007fb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	3308      	adds	r3, #8
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	e002      	b.n	8007fa8 <vListInsert+0x2e>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	60fb      	str	r3, [r7, #12]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d2f6      	bcs.n	8007fa2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	685a      	ldr	r2, [r3, #4]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	683a      	ldr	r2, [r7, #0]
 8007fc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	1c5a      	adds	r2, r3, #1
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	601a      	str	r2, [r3, #0]
}
 8007fe0:	bf00      	nop
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	6892      	ldr	r2, [r2, #8]
 8008002:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	6852      	ldr	r2, [r2, #4]
 800800c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	429a      	cmp	r2, r3
 8008016:	d103      	bne.n	8008020 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	689a      	ldr	r2, [r3, #8]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	1e5a      	subs	r2, r3, #1
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008040:	b580      	push	{r7, lr}
 8008042:	b08c      	sub	sp, #48	@ 0x30
 8008044:	af04      	add	r7, sp, #16
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	603b      	str	r3, [r7, #0]
 800804c:	4613      	mov	r3, r2
 800804e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008050:	88fb      	ldrh	r3, [r7, #6]
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4618      	mov	r0, r3
 8008056:	f000 fedf 	bl	8008e18 <pvPortMalloc>
 800805a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00e      	beq.n	8008080 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008062:	2054      	movs	r0, #84	@ 0x54
 8008064:	f000 fed8 	bl	8008e18 <pvPortMalloc>
 8008068:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d003      	beq.n	8008078 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	631a      	str	r2, [r3, #48]	@ 0x30
 8008076:	e005      	b.n	8008084 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008078:	6978      	ldr	r0, [r7, #20]
 800807a:	f000 ff9b 	bl	8008fb4 <vPortFree>
 800807e:	e001      	b.n	8008084 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008080:	2300      	movs	r3, #0
 8008082:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d013      	beq.n	80080b2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800808a:	88fa      	ldrh	r2, [r7, #6]
 800808c:	2300      	movs	r3, #0
 800808e:	9303      	str	r3, [sp, #12]
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	9302      	str	r3, [sp, #8]
 8008094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008096:	9301      	str	r3, [sp, #4]
 8008098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	68b9      	ldr	r1, [r7, #8]
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 f80e 	bl	80080c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080a6:	69f8      	ldr	r0, [r7, #28]
 80080a8:	f000 f894 	bl	80081d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80080ac:	2301      	movs	r3, #1
 80080ae:	61bb      	str	r3, [r7, #24]
 80080b0:	e002      	b.n	80080b8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80080b2:	f04f 33ff 	mov.w	r3, #4294967295
 80080b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80080b8:	69bb      	ldr	r3, [r7, #24]
	}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3720      	adds	r7, #32
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b088      	sub	sp, #32
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	60f8      	str	r0, [r7, #12]
 80080ca:	60b9      	str	r1, [r7, #8]
 80080cc:	607a      	str	r2, [r7, #4]
 80080ce:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80080d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80080da:	3b01      	subs	r3, #1
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4413      	add	r3, r2
 80080e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	f023 0307 	bic.w	r3, r3, #7
 80080e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	f003 0307 	and.w	r3, r3, #7
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00b      	beq.n	800810c <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008106:	bf00      	nop
 8008108:	bf00      	nop
 800810a:	e7fd      	b.n	8008108 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d01f      	beq.n	8008152 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008112:	2300      	movs	r3, #0
 8008114:	61fb      	str	r3, [r7, #28]
 8008116:	e012      	b.n	800813e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	4413      	add	r3, r2
 800811e:	7819      	ldrb	r1, [r3, #0]
 8008120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	4413      	add	r3, r2
 8008126:	3334      	adds	r3, #52	@ 0x34
 8008128:	460a      	mov	r2, r1
 800812a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	4413      	add	r3, r2
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d006      	beq.n	8008146 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	3301      	adds	r3, #1
 800813c:	61fb      	str	r3, [r7, #28]
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	2b0f      	cmp	r3, #15
 8008142:	d9e9      	bls.n	8008118 <prvInitialiseNewTask+0x56>
 8008144:	e000      	b.n	8008148 <prvInitialiseNewTask+0x86>
			{
				break;
 8008146:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814a:	2200      	movs	r2, #0
 800814c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008150:	e003      	b.n	800815a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800815a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800815c:	2b06      	cmp	r3, #6
 800815e:	d901      	bls.n	8008164 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008160:	2306      	movs	r3, #6
 8008162:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008166:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008168:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800816a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800816e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008172:	2200      	movs	r2, #0
 8008174:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008178:	3304      	adds	r3, #4
 800817a:	4618      	mov	r0, r3
 800817c:	f7ff fecc 	bl	8007f18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008182:	3318      	adds	r3, #24
 8008184:	4618      	mov	r0, r3
 8008186:	f7ff fec7 	bl	8007f18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800818a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800818e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008192:	f1c3 0207 	rsb	r2, r3, #7
 8008196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008198:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800819a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800819c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800819e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80081a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a2:	2200      	movs	r2, #0
 80081a4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80081a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	68f9      	ldr	r1, [r7, #12]
 80081b2:	69b8      	ldr	r0, [r7, #24]
 80081b4:	f000 fc1c 	bl	80089f0 <pxPortInitialiseStack>
 80081b8:	4602      	mov	r2, r0
 80081ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80081be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80081c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081ca:	bf00      	nop
 80081cc:	3720      	adds	r7, #32
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
	...

080081d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80081dc:	f000 fd3c 	bl	8008c58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80081e0:	4b2a      	ldr	r3, [pc, #168]	@ (800828c <prvAddNewTaskToReadyList+0xb8>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	3301      	adds	r3, #1
 80081e6:	4a29      	ldr	r2, [pc, #164]	@ (800828c <prvAddNewTaskToReadyList+0xb8>)
 80081e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081ea:	4b29      	ldr	r3, [pc, #164]	@ (8008290 <prvAddNewTaskToReadyList+0xbc>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d109      	bne.n	8008206 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80081f2:	4a27      	ldr	r2, [pc, #156]	@ (8008290 <prvAddNewTaskToReadyList+0xbc>)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081f8:	4b24      	ldr	r3, [pc, #144]	@ (800828c <prvAddNewTaskToReadyList+0xb8>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d110      	bne.n	8008222 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008200:	f000 faaa 	bl	8008758 <prvInitialiseTaskLists>
 8008204:	e00d      	b.n	8008222 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008206:	4b23      	ldr	r3, [pc, #140]	@ (8008294 <prvAddNewTaskToReadyList+0xc0>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d109      	bne.n	8008222 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800820e:	4b20      	ldr	r3, [pc, #128]	@ (8008290 <prvAddNewTaskToReadyList+0xbc>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008218:	429a      	cmp	r2, r3
 800821a:	d802      	bhi.n	8008222 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800821c:	4a1c      	ldr	r2, [pc, #112]	@ (8008290 <prvAddNewTaskToReadyList+0xbc>)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008222:	4b1d      	ldr	r3, [pc, #116]	@ (8008298 <prvAddNewTaskToReadyList+0xc4>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3301      	adds	r3, #1
 8008228:	4a1b      	ldr	r2, [pc, #108]	@ (8008298 <prvAddNewTaskToReadyList+0xc4>)
 800822a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008230:	2201      	movs	r2, #1
 8008232:	409a      	lsls	r2, r3
 8008234:	4b19      	ldr	r3, [pc, #100]	@ (800829c <prvAddNewTaskToReadyList+0xc8>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4313      	orrs	r3, r2
 800823a:	4a18      	ldr	r2, [pc, #96]	@ (800829c <prvAddNewTaskToReadyList+0xc8>)
 800823c:	6013      	str	r3, [r2, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008242:	4613      	mov	r3, r2
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4413      	add	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4a15      	ldr	r2, [pc, #84]	@ (80082a0 <prvAddNewTaskToReadyList+0xcc>)
 800824c:	441a      	add	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	3304      	adds	r3, #4
 8008252:	4619      	mov	r1, r3
 8008254:	4610      	mov	r0, r2
 8008256:	f7ff fe6c 	bl	8007f32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800825a:	f000 fd2f 	bl	8008cbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800825e:	4b0d      	ldr	r3, [pc, #52]	@ (8008294 <prvAddNewTaskToReadyList+0xc0>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00e      	beq.n	8008284 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008266:	4b0a      	ldr	r3, [pc, #40]	@ (8008290 <prvAddNewTaskToReadyList+0xbc>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008270:	429a      	cmp	r2, r3
 8008272:	d207      	bcs.n	8008284 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008274:	4b0b      	ldr	r3, [pc, #44]	@ (80082a4 <prvAddNewTaskToReadyList+0xd0>)
 8008276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008284:	bf00      	nop
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	200006dc 	.word	0x200006dc
 8008290:	200005dc 	.word	0x200005dc
 8008294:	200006e8 	.word	0x200006e8
 8008298:	200006f8 	.word	0x200006f8
 800829c:	200006e4 	.word	0x200006e4
 80082a0:	200005e0 	.word	0x200005e0
 80082a4:	e000ed04 	.word	0xe000ed04

080082a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d018      	beq.n	80082ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80082ba:	4b14      	ldr	r3, [pc, #80]	@ (800830c <vTaskDelay+0x64>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00b      	beq.n	80082da <vTaskDelay+0x32>
	__asm volatile
 80082c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	60bb      	str	r3, [r7, #8]
}
 80082d4:	bf00      	nop
 80082d6:	bf00      	nop
 80082d8:	e7fd      	b.n	80082d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80082da:	f000 f863 	bl	80083a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082de:	2100      	movs	r1, #0
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fb1f 	bl	8008924 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082e6:	f000 f86b 	bl	80083c0 <xTaskResumeAll>
 80082ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d107      	bne.n	8008302 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80082f2:	4b07      	ldr	r3, [pc, #28]	@ (8008310 <vTaskDelay+0x68>)
 80082f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008302:	bf00      	nop
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	20000704 	.word	0x20000704
 8008310:	e000ed04 	.word	0xe000ed04

08008314 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800831a:	4b1c      	ldr	r3, [pc, #112]	@ (800838c <vTaskStartScheduler+0x78>)
 800831c:	9301      	str	r3, [sp, #4]
 800831e:	2300      	movs	r3, #0
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	2300      	movs	r3, #0
 8008324:	2280      	movs	r2, #128	@ 0x80
 8008326:	491a      	ldr	r1, [pc, #104]	@ (8008390 <vTaskStartScheduler+0x7c>)
 8008328:	481a      	ldr	r0, [pc, #104]	@ (8008394 <vTaskStartScheduler+0x80>)
 800832a:	f7ff fe89 	bl	8008040 <xTaskCreate>
 800832e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2b01      	cmp	r3, #1
 8008334:	d116      	bne.n	8008364 <vTaskStartScheduler+0x50>
	__asm volatile
 8008336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800833a:	f383 8811 	msr	BASEPRI, r3
 800833e:	f3bf 8f6f 	isb	sy
 8008342:	f3bf 8f4f 	dsb	sy
 8008346:	60bb      	str	r3, [r7, #8]
}
 8008348:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800834a:	4b13      	ldr	r3, [pc, #76]	@ (8008398 <vTaskStartScheduler+0x84>)
 800834c:	f04f 32ff 	mov.w	r2, #4294967295
 8008350:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008352:	4b12      	ldr	r3, [pc, #72]	@ (800839c <vTaskStartScheduler+0x88>)
 8008354:	2201      	movs	r2, #1
 8008356:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008358:	4b11      	ldr	r3, [pc, #68]	@ (80083a0 <vTaskStartScheduler+0x8c>)
 800835a:	2200      	movs	r2, #0
 800835c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800835e:	f000 fbd7 	bl	8008b10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008362:	e00f      	b.n	8008384 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800836a:	d10b      	bne.n	8008384 <vTaskStartScheduler+0x70>
	__asm volatile
 800836c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	607b      	str	r3, [r7, #4]
}
 800837e:	bf00      	nop
 8008380:	bf00      	nop
 8008382:	e7fd      	b.n	8008380 <vTaskStartScheduler+0x6c>
}
 8008384:	bf00      	nop
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	20000700 	.word	0x20000700
 8008390:	0800bc54 	.word	0x0800bc54
 8008394:	08008729 	.word	0x08008729
 8008398:	200006fc 	.word	0x200006fc
 800839c:	200006e8 	.word	0x200006e8
 80083a0:	200006e0 	.word	0x200006e0

080083a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083a4:	b480      	push	{r7}
 80083a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80083a8:	4b04      	ldr	r3, [pc, #16]	@ (80083bc <vTaskSuspendAll+0x18>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3301      	adds	r3, #1
 80083ae:	4a03      	ldr	r2, [pc, #12]	@ (80083bc <vTaskSuspendAll+0x18>)
 80083b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80083b2:	bf00      	nop
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr
 80083bc:	20000704 	.word	0x20000704

080083c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083c6:	2300      	movs	r3, #0
 80083c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083ca:	2300      	movs	r3, #0
 80083cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083ce:	4b42      	ldr	r3, [pc, #264]	@ (80084d8 <xTaskResumeAll+0x118>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10b      	bne.n	80083ee <xTaskResumeAll+0x2e>
	__asm volatile
 80083d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083da:	f383 8811 	msr	BASEPRI, r3
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	f3bf 8f4f 	dsb	sy
 80083e6:	603b      	str	r3, [r7, #0]
}
 80083e8:	bf00      	nop
 80083ea:	bf00      	nop
 80083ec:	e7fd      	b.n	80083ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80083ee:	f000 fc33 	bl	8008c58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80083f2:	4b39      	ldr	r3, [pc, #228]	@ (80084d8 <xTaskResumeAll+0x118>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	3b01      	subs	r3, #1
 80083f8:	4a37      	ldr	r2, [pc, #220]	@ (80084d8 <xTaskResumeAll+0x118>)
 80083fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083fc:	4b36      	ldr	r3, [pc, #216]	@ (80084d8 <xTaskResumeAll+0x118>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d161      	bne.n	80084c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008404:	4b35      	ldr	r3, [pc, #212]	@ (80084dc <xTaskResumeAll+0x11c>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d05d      	beq.n	80084c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800840c:	e02e      	b.n	800846c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800840e:	4b34      	ldr	r3, [pc, #208]	@ (80084e0 <xTaskResumeAll+0x120>)
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	3318      	adds	r3, #24
 800841a:	4618      	mov	r0, r3
 800841c:	f7ff fde6 	bl	8007fec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	3304      	adds	r3, #4
 8008424:	4618      	mov	r0, r3
 8008426:	f7ff fde1 	bl	8007fec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800842e:	2201      	movs	r2, #1
 8008430:	409a      	lsls	r2, r3
 8008432:	4b2c      	ldr	r3, [pc, #176]	@ (80084e4 <xTaskResumeAll+0x124>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4313      	orrs	r3, r2
 8008438:	4a2a      	ldr	r2, [pc, #168]	@ (80084e4 <xTaskResumeAll+0x124>)
 800843a:	6013      	str	r3, [r2, #0]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008440:	4613      	mov	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4413      	add	r3, r2
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	4a27      	ldr	r2, [pc, #156]	@ (80084e8 <xTaskResumeAll+0x128>)
 800844a:	441a      	add	r2, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	3304      	adds	r3, #4
 8008450:	4619      	mov	r1, r3
 8008452:	4610      	mov	r0, r2
 8008454:	f7ff fd6d 	bl	8007f32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800845c:	4b23      	ldr	r3, [pc, #140]	@ (80084ec <xTaskResumeAll+0x12c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008462:	429a      	cmp	r2, r3
 8008464:	d302      	bcc.n	800846c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008466:	4b22      	ldr	r3, [pc, #136]	@ (80084f0 <xTaskResumeAll+0x130>)
 8008468:	2201      	movs	r2, #1
 800846a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800846c:	4b1c      	ldr	r3, [pc, #112]	@ (80084e0 <xTaskResumeAll+0x120>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1cc      	bne.n	800840e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800847a:	f000 f9eb 	bl	8008854 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800847e:	4b1d      	ldr	r3, [pc, #116]	@ (80084f4 <xTaskResumeAll+0x134>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d010      	beq.n	80084ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800848a:	f000 f837 	bl	80084fc <xTaskIncrementTick>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d002      	beq.n	800849a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008494:	4b16      	ldr	r3, [pc, #88]	@ (80084f0 <xTaskResumeAll+0x130>)
 8008496:	2201      	movs	r2, #1
 8008498:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	3b01      	subs	r3, #1
 800849e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1f1      	bne.n	800848a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80084a6:	4b13      	ldr	r3, [pc, #76]	@ (80084f4 <xTaskResumeAll+0x134>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084ac:	4b10      	ldr	r3, [pc, #64]	@ (80084f0 <xTaskResumeAll+0x130>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d009      	beq.n	80084c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084b4:	2301      	movs	r3, #1
 80084b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084b8:	4b0f      	ldr	r3, [pc, #60]	@ (80084f8 <xTaskResumeAll+0x138>)
 80084ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084be:	601a      	str	r2, [r3, #0]
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084c8:	f000 fbf8 	bl	8008cbc <vPortExitCritical>

	return xAlreadyYielded;
 80084cc:	68bb      	ldr	r3, [r7, #8]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	20000704 	.word	0x20000704
 80084dc:	200006dc 	.word	0x200006dc
 80084e0:	2000069c 	.word	0x2000069c
 80084e4:	200006e4 	.word	0x200006e4
 80084e8:	200005e0 	.word	0x200005e0
 80084ec:	200005dc 	.word	0x200005dc
 80084f0:	200006f0 	.word	0x200006f0
 80084f4:	200006ec 	.word	0x200006ec
 80084f8:	e000ed04 	.word	0xe000ed04

080084fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b086      	sub	sp, #24
 8008500:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008502:	2300      	movs	r3, #0
 8008504:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008506:	4b4f      	ldr	r3, [pc, #316]	@ (8008644 <xTaskIncrementTick+0x148>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	f040 808f 	bne.w	800862e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008510:	4b4d      	ldr	r3, [pc, #308]	@ (8008648 <xTaskIncrementTick+0x14c>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	3301      	adds	r3, #1
 8008516:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008518:	4a4b      	ldr	r2, [pc, #300]	@ (8008648 <xTaskIncrementTick+0x14c>)
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d121      	bne.n	8008568 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008524:	4b49      	ldr	r3, [pc, #292]	@ (800864c <xTaskIncrementTick+0x150>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00b      	beq.n	8008546 <xTaskIncrementTick+0x4a>
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	603b      	str	r3, [r7, #0]
}
 8008540:	bf00      	nop
 8008542:	bf00      	nop
 8008544:	e7fd      	b.n	8008542 <xTaskIncrementTick+0x46>
 8008546:	4b41      	ldr	r3, [pc, #260]	@ (800864c <xTaskIncrementTick+0x150>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	60fb      	str	r3, [r7, #12]
 800854c:	4b40      	ldr	r3, [pc, #256]	@ (8008650 <xTaskIncrementTick+0x154>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a3e      	ldr	r2, [pc, #248]	@ (800864c <xTaskIncrementTick+0x150>)
 8008552:	6013      	str	r3, [r2, #0]
 8008554:	4a3e      	ldr	r2, [pc, #248]	@ (8008650 <xTaskIncrementTick+0x154>)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6013      	str	r3, [r2, #0]
 800855a:	4b3e      	ldr	r3, [pc, #248]	@ (8008654 <xTaskIncrementTick+0x158>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	3301      	adds	r3, #1
 8008560:	4a3c      	ldr	r2, [pc, #240]	@ (8008654 <xTaskIncrementTick+0x158>)
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	f000 f976 	bl	8008854 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008568:	4b3b      	ldr	r3, [pc, #236]	@ (8008658 <xTaskIncrementTick+0x15c>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	429a      	cmp	r2, r3
 8008570:	d348      	bcc.n	8008604 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008572:	4b36      	ldr	r3, [pc, #216]	@ (800864c <xTaskIncrementTick+0x150>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d104      	bne.n	8008586 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800857c:	4b36      	ldr	r3, [pc, #216]	@ (8008658 <xTaskIncrementTick+0x15c>)
 800857e:	f04f 32ff 	mov.w	r2, #4294967295
 8008582:	601a      	str	r2, [r3, #0]
					break;
 8008584:	e03e      	b.n	8008604 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008586:	4b31      	ldr	r3, [pc, #196]	@ (800864c <xTaskIncrementTick+0x150>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	429a      	cmp	r2, r3
 800859c:	d203      	bcs.n	80085a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800859e:	4a2e      	ldr	r2, [pc, #184]	@ (8008658 <xTaskIncrementTick+0x15c>)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085a4:	e02e      	b.n	8008604 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	3304      	adds	r3, #4
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7ff fd1e 	bl	8007fec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d004      	beq.n	80085c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	3318      	adds	r3, #24
 80085bc:	4618      	mov	r0, r3
 80085be:	f7ff fd15 	bl	8007fec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c6:	2201      	movs	r2, #1
 80085c8:	409a      	lsls	r2, r3
 80085ca:	4b24      	ldr	r3, [pc, #144]	@ (800865c <xTaskIncrementTick+0x160>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	4a22      	ldr	r2, [pc, #136]	@ (800865c <xTaskIncrementTick+0x160>)
 80085d2:	6013      	str	r3, [r2, #0]
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085d8:	4613      	mov	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	4a1f      	ldr	r2, [pc, #124]	@ (8008660 <xTaskIncrementTick+0x164>)
 80085e2:	441a      	add	r2, r3
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	3304      	adds	r3, #4
 80085e8:	4619      	mov	r1, r3
 80085ea:	4610      	mov	r0, r2
 80085ec:	f7ff fca1 	bl	8007f32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085f4:	4b1b      	ldr	r3, [pc, #108]	@ (8008664 <xTaskIncrementTick+0x168>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d3b9      	bcc.n	8008572 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80085fe:	2301      	movs	r3, #1
 8008600:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008602:	e7b6      	b.n	8008572 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008604:	4b17      	ldr	r3, [pc, #92]	@ (8008664 <xTaskIncrementTick+0x168>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800860a:	4915      	ldr	r1, [pc, #84]	@ (8008660 <xTaskIncrementTick+0x164>)
 800860c:	4613      	mov	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	440b      	add	r3, r1
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d901      	bls.n	8008620 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800861c:	2301      	movs	r3, #1
 800861e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008620:	4b11      	ldr	r3, [pc, #68]	@ (8008668 <xTaskIncrementTick+0x16c>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d007      	beq.n	8008638 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008628:	2301      	movs	r3, #1
 800862a:	617b      	str	r3, [r7, #20]
 800862c:	e004      	b.n	8008638 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800862e:	4b0f      	ldr	r3, [pc, #60]	@ (800866c <xTaskIncrementTick+0x170>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3301      	adds	r3, #1
 8008634:	4a0d      	ldr	r2, [pc, #52]	@ (800866c <xTaskIncrementTick+0x170>)
 8008636:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008638:	697b      	ldr	r3, [r7, #20]
}
 800863a:	4618      	mov	r0, r3
 800863c:	3718      	adds	r7, #24
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	20000704 	.word	0x20000704
 8008648:	200006e0 	.word	0x200006e0
 800864c:	20000694 	.word	0x20000694
 8008650:	20000698 	.word	0x20000698
 8008654:	200006f4 	.word	0x200006f4
 8008658:	200006fc 	.word	0x200006fc
 800865c:	200006e4 	.word	0x200006e4
 8008660:	200005e0 	.word	0x200005e0
 8008664:	200005dc 	.word	0x200005dc
 8008668:	200006f0 	.word	0x200006f0
 800866c:	200006ec 	.word	0x200006ec

08008670 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008670:	b480      	push	{r7}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008676:	4b27      	ldr	r3, [pc, #156]	@ (8008714 <vTaskSwitchContext+0xa4>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d003      	beq.n	8008686 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800867e:	4b26      	ldr	r3, [pc, #152]	@ (8008718 <vTaskSwitchContext+0xa8>)
 8008680:	2201      	movs	r2, #1
 8008682:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008684:	e040      	b.n	8008708 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008686:	4b24      	ldr	r3, [pc, #144]	@ (8008718 <vTaskSwitchContext+0xa8>)
 8008688:	2200      	movs	r2, #0
 800868a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800868c:	4b23      	ldr	r3, [pc, #140]	@ (800871c <vTaskSwitchContext+0xac>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	fab3 f383 	clz	r3, r3
 8008698:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800869a:	7afb      	ldrb	r3, [r7, #11]
 800869c:	f1c3 031f 	rsb	r3, r3, #31
 80086a0:	617b      	str	r3, [r7, #20]
 80086a2:	491f      	ldr	r1, [pc, #124]	@ (8008720 <vTaskSwitchContext+0xb0>)
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	4613      	mov	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	440b      	add	r3, r1
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10b      	bne.n	80086ce <vTaskSwitchContext+0x5e>
	__asm volatile
 80086b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	607b      	str	r3, [r7, #4]
}
 80086c8:	bf00      	nop
 80086ca:	bf00      	nop
 80086cc:	e7fd      	b.n	80086ca <vTaskSwitchContext+0x5a>
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	4613      	mov	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	4413      	add	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4a11      	ldr	r2, [pc, #68]	@ (8008720 <vTaskSwitchContext+0xb0>)
 80086da:	4413      	add	r3, r2
 80086dc:	613b      	str	r3, [r7, #16]
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	685a      	ldr	r2, [r3, #4]
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	605a      	str	r2, [r3, #4]
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	3308      	adds	r3, #8
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d104      	bne.n	80086fe <vTaskSwitchContext+0x8e>
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	605a      	str	r2, [r3, #4]
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	4a07      	ldr	r2, [pc, #28]	@ (8008724 <vTaskSwitchContext+0xb4>)
 8008706:	6013      	str	r3, [r2, #0]
}
 8008708:	bf00      	nop
 800870a:	371c      	adds	r7, #28
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	20000704 	.word	0x20000704
 8008718:	200006f0 	.word	0x200006f0
 800871c:	200006e4 	.word	0x200006e4
 8008720:	200005e0 	.word	0x200005e0
 8008724:	200005dc 	.word	0x200005dc

08008728 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008730:	f000 f852 	bl	80087d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008734:	4b06      	ldr	r3, [pc, #24]	@ (8008750 <prvIdleTask+0x28>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d9f9      	bls.n	8008730 <prvIdleTask+0x8>
			{
				taskYIELD();
 800873c:	4b05      	ldr	r3, [pc, #20]	@ (8008754 <prvIdleTask+0x2c>)
 800873e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008742:	601a      	str	r2, [r3, #0]
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800874c:	e7f0      	b.n	8008730 <prvIdleTask+0x8>
 800874e:	bf00      	nop
 8008750:	200005e0 	.word	0x200005e0
 8008754:	e000ed04 	.word	0xe000ed04

08008758 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800875e:	2300      	movs	r3, #0
 8008760:	607b      	str	r3, [r7, #4]
 8008762:	e00c      	b.n	800877e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	4613      	mov	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4a12      	ldr	r2, [pc, #72]	@ (80087b8 <prvInitialiseTaskLists+0x60>)
 8008770:	4413      	add	r3, r2
 8008772:	4618      	mov	r0, r3
 8008774:	f7ff fbb0 	bl	8007ed8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3301      	adds	r3, #1
 800877c:	607b      	str	r3, [r7, #4]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2b06      	cmp	r3, #6
 8008782:	d9ef      	bls.n	8008764 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008784:	480d      	ldr	r0, [pc, #52]	@ (80087bc <prvInitialiseTaskLists+0x64>)
 8008786:	f7ff fba7 	bl	8007ed8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800878a:	480d      	ldr	r0, [pc, #52]	@ (80087c0 <prvInitialiseTaskLists+0x68>)
 800878c:	f7ff fba4 	bl	8007ed8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008790:	480c      	ldr	r0, [pc, #48]	@ (80087c4 <prvInitialiseTaskLists+0x6c>)
 8008792:	f7ff fba1 	bl	8007ed8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008796:	480c      	ldr	r0, [pc, #48]	@ (80087c8 <prvInitialiseTaskLists+0x70>)
 8008798:	f7ff fb9e 	bl	8007ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800879c:	480b      	ldr	r0, [pc, #44]	@ (80087cc <prvInitialiseTaskLists+0x74>)
 800879e:	f7ff fb9b 	bl	8007ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087a2:	4b0b      	ldr	r3, [pc, #44]	@ (80087d0 <prvInitialiseTaskLists+0x78>)
 80087a4:	4a05      	ldr	r2, [pc, #20]	@ (80087bc <prvInitialiseTaskLists+0x64>)
 80087a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087a8:	4b0a      	ldr	r3, [pc, #40]	@ (80087d4 <prvInitialiseTaskLists+0x7c>)
 80087aa:	4a05      	ldr	r2, [pc, #20]	@ (80087c0 <prvInitialiseTaskLists+0x68>)
 80087ac:	601a      	str	r2, [r3, #0]
}
 80087ae:	bf00      	nop
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	200005e0 	.word	0x200005e0
 80087bc:	2000066c 	.word	0x2000066c
 80087c0:	20000680 	.word	0x20000680
 80087c4:	2000069c 	.word	0x2000069c
 80087c8:	200006b0 	.word	0x200006b0
 80087cc:	200006c8 	.word	0x200006c8
 80087d0:	20000694 	.word	0x20000694
 80087d4:	20000698 	.word	0x20000698

080087d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087de:	e019      	b.n	8008814 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80087e0:	f000 fa3a 	bl	8008c58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087e4:	4b10      	ldr	r3, [pc, #64]	@ (8008828 <prvCheckTasksWaitingTermination+0x50>)
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	3304      	adds	r3, #4
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7ff fbfb 	bl	8007fec <uxListRemove>
				--uxCurrentNumberOfTasks;
 80087f6:	4b0d      	ldr	r3, [pc, #52]	@ (800882c <prvCheckTasksWaitingTermination+0x54>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	3b01      	subs	r3, #1
 80087fc:	4a0b      	ldr	r2, [pc, #44]	@ (800882c <prvCheckTasksWaitingTermination+0x54>)
 80087fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008800:	4b0b      	ldr	r3, [pc, #44]	@ (8008830 <prvCheckTasksWaitingTermination+0x58>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	3b01      	subs	r3, #1
 8008806:	4a0a      	ldr	r2, [pc, #40]	@ (8008830 <prvCheckTasksWaitingTermination+0x58>)
 8008808:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800880a:	f000 fa57 	bl	8008cbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f810 	bl	8008834 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008814:	4b06      	ldr	r3, [pc, #24]	@ (8008830 <prvCheckTasksWaitingTermination+0x58>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1e1      	bne.n	80087e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800881c:	bf00      	nop
 800881e:	bf00      	nop
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	200006b0 	.word	0x200006b0
 800882c:	200006dc 	.word	0x200006dc
 8008830:	200006c4 	.word	0x200006c4

08008834 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008840:	4618      	mov	r0, r3
 8008842:	f000 fbb7 	bl	8008fb4 <vPortFree>
			vPortFree( pxTCB );
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fbb4 	bl	8008fb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800884c:	bf00      	nop
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800885a:	4b0c      	ldr	r3, [pc, #48]	@ (800888c <prvResetNextTaskUnblockTime+0x38>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d104      	bne.n	800886e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008864:	4b0a      	ldr	r3, [pc, #40]	@ (8008890 <prvResetNextTaskUnblockTime+0x3c>)
 8008866:	f04f 32ff 	mov.w	r2, #4294967295
 800886a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800886c:	e008      	b.n	8008880 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800886e:	4b07      	ldr	r3, [pc, #28]	@ (800888c <prvResetNextTaskUnblockTime+0x38>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	4a04      	ldr	r2, [pc, #16]	@ (8008890 <prvResetNextTaskUnblockTime+0x3c>)
 800887e:	6013      	str	r3, [r2, #0]
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	20000694 	.word	0x20000694
 8008890:	200006fc 	.word	0x200006fc

08008894 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800889e:	f000 f9db 	bl	8008c58 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80088a2:	4b1e      	ldr	r3, [pc, #120]	@ (800891c <ulTaskNotifyTake+0x88>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d113      	bne.n	80088d4 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80088ac:	4b1b      	ldr	r3, [pc, #108]	@ (800891c <ulTaskNotifyTake+0x88>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00b      	beq.n	80088d4 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80088bc:	2101      	movs	r1, #1
 80088be:	6838      	ldr	r0, [r7, #0]
 80088c0:	f000 f830 	bl	8008924 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80088c4:	4b16      	ldr	r3, [pc, #88]	@ (8008920 <ulTaskNotifyTake+0x8c>)
 80088c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088ca:	601a      	str	r2, [r3, #0]
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80088d4:	f000 f9f2 	bl	8008cbc <vPortExitCritical>

		taskENTER_CRITICAL();
 80088d8:	f000 f9be 	bl	8008c58 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80088dc:	4b0f      	ldr	r3, [pc, #60]	@ (800891c <ulTaskNotifyTake+0x88>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088e2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00c      	beq.n	8008904 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d004      	beq.n	80088fa <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80088f0:	4b0a      	ldr	r3, [pc, #40]	@ (800891c <ulTaskNotifyTake+0x88>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2200      	movs	r2, #0
 80088f6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80088f8:	e004      	b.n	8008904 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80088fa:	4b08      	ldr	r3, [pc, #32]	@ (800891c <ulTaskNotifyTake+0x88>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	3a01      	subs	r2, #1
 8008902:	64da      	str	r2, [r3, #76]	@ 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008904:	4b05      	ldr	r3, [pc, #20]	@ (800891c <ulTaskNotifyTake+0x88>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 800890e:	f000 f9d5 	bl	8008cbc <vPortExitCritical>

		return ulReturn;
 8008912:	68fb      	ldr	r3, [r7, #12]
	}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	200005dc 	.word	0x200005dc
 8008920:	e000ed04 	.word	0xe000ed04

08008924 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800892e:	4b29      	ldr	r3, [pc, #164]	@ (80089d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008934:	4b28      	ldr	r3, [pc, #160]	@ (80089d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	3304      	adds	r3, #4
 800893a:	4618      	mov	r0, r3
 800893c:	f7ff fb56 	bl	8007fec <uxListRemove>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10b      	bne.n	800895e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008946:	4b24      	ldr	r3, [pc, #144]	@ (80089d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800894c:	2201      	movs	r2, #1
 800894e:	fa02 f303 	lsl.w	r3, r2, r3
 8008952:	43da      	mvns	r2, r3
 8008954:	4b21      	ldr	r3, [pc, #132]	@ (80089dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4013      	ands	r3, r2
 800895a:	4a20      	ldr	r2, [pc, #128]	@ (80089dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800895c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008964:	d10a      	bne.n	800897c <prvAddCurrentTaskToDelayedList+0x58>
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d007      	beq.n	800897c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800896c:	4b1a      	ldr	r3, [pc, #104]	@ (80089d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3304      	adds	r3, #4
 8008972:	4619      	mov	r1, r3
 8008974:	481a      	ldr	r0, [pc, #104]	@ (80089e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008976:	f7ff fadc 	bl	8007f32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800897a:	e026      	b.n	80089ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4413      	add	r3, r2
 8008982:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008984:	4b14      	ldr	r3, [pc, #80]	@ (80089d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	429a      	cmp	r2, r3
 8008992:	d209      	bcs.n	80089a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008994:	4b13      	ldr	r3, [pc, #76]	@ (80089e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	4b0f      	ldr	r3, [pc, #60]	@ (80089d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	3304      	adds	r3, #4
 800899e:	4619      	mov	r1, r3
 80089a0:	4610      	mov	r0, r2
 80089a2:	f7ff faea 	bl	8007f7a <vListInsert>
}
 80089a6:	e010      	b.n	80089ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089a8:	4b0f      	ldr	r3, [pc, #60]	@ (80089e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	4b0a      	ldr	r3, [pc, #40]	@ (80089d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3304      	adds	r3, #4
 80089b2:	4619      	mov	r1, r3
 80089b4:	4610      	mov	r0, r2
 80089b6:	f7ff fae0 	bl	8007f7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80089ba:	4b0c      	ldr	r3, [pc, #48]	@ (80089ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d202      	bcs.n	80089ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80089c4:	4a09      	ldr	r2, [pc, #36]	@ (80089ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	6013      	str	r3, [r2, #0]
}
 80089ca:	bf00      	nop
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	200006e0 	.word	0x200006e0
 80089d8:	200005dc 	.word	0x200005dc
 80089dc:	200006e4 	.word	0x200006e4
 80089e0:	200006c8 	.word	0x200006c8
 80089e4:	20000698 	.word	0x20000698
 80089e8:	20000694 	.word	0x20000694
 80089ec:	200006fc 	.word	0x200006fc

080089f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	3b04      	subs	r3, #4
 8008a00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008a08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	3b04      	subs	r3, #4
 8008a0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f023 0201 	bic.w	r2, r3, #1
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	3b04      	subs	r3, #4
 8008a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a20:	4a0c      	ldr	r2, [pc, #48]	@ (8008a54 <pxPortInitialiseStack+0x64>)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	3b14      	subs	r3, #20
 8008a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	3b04      	subs	r3, #4
 8008a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f06f 0202 	mvn.w	r2, #2
 8008a3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	3b20      	subs	r3, #32
 8008a44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a46:	68fb      	ldr	r3, [r7, #12]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3714      	adds	r7, #20
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr
 8008a54:	08008a59 	.word	0x08008a59

08008a58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a62:	4b13      	ldr	r3, [pc, #76]	@ (8008ab0 <prvTaskExitError+0x58>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6a:	d00b      	beq.n	8008a84 <prvTaskExitError+0x2c>
	__asm volatile
 8008a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a70:	f383 8811 	msr	BASEPRI, r3
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	60fb      	str	r3, [r7, #12]
}
 8008a7e:	bf00      	nop
 8008a80:	bf00      	nop
 8008a82:	e7fd      	b.n	8008a80 <prvTaskExitError+0x28>
	__asm volatile
 8008a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	60bb      	str	r3, [r7, #8]
}
 8008a96:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a98:	bf00      	nop
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d0fc      	beq.n	8008a9a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008aa0:	bf00      	nop
 8008aa2:	bf00      	nop
 8008aa4:	3714      	adds	r7, #20
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	2000000c 	.word	0x2000000c
	...

08008ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ac0:	4b07      	ldr	r3, [pc, #28]	@ (8008ae0 <pxCurrentTCBConst2>)
 8008ac2:	6819      	ldr	r1, [r3, #0]
 8008ac4:	6808      	ldr	r0, [r1, #0]
 8008ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aca:	f380 8809 	msr	PSP, r0
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f04f 0000 	mov.w	r0, #0
 8008ad6:	f380 8811 	msr	BASEPRI, r0
 8008ada:	4770      	bx	lr
 8008adc:	f3af 8000 	nop.w

08008ae0 <pxCurrentTCBConst2>:
 8008ae0:	200005dc 	.word	0x200005dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ae4:	bf00      	nop
 8008ae6:	bf00      	nop

08008ae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ae8:	4808      	ldr	r0, [pc, #32]	@ (8008b0c <prvPortStartFirstTask+0x24>)
 8008aea:	6800      	ldr	r0, [r0, #0]
 8008aec:	6800      	ldr	r0, [r0, #0]
 8008aee:	f380 8808 	msr	MSP, r0
 8008af2:	f04f 0000 	mov.w	r0, #0
 8008af6:	f380 8814 	msr	CONTROL, r0
 8008afa:	b662      	cpsie	i
 8008afc:	b661      	cpsie	f
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	df00      	svc	0
 8008b08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b0a:	bf00      	nop
 8008b0c:	e000ed08 	.word	0xe000ed08

08008b10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b086      	sub	sp, #24
 8008b14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b16:	4b47      	ldr	r3, [pc, #284]	@ (8008c34 <xPortStartScheduler+0x124>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a47      	ldr	r2, [pc, #284]	@ (8008c38 <xPortStartScheduler+0x128>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d10b      	bne.n	8008b38 <xPortStartScheduler+0x28>
	__asm volatile
 8008b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b24:	f383 8811 	msr	BASEPRI, r3
 8008b28:	f3bf 8f6f 	isb	sy
 8008b2c:	f3bf 8f4f 	dsb	sy
 8008b30:	613b      	str	r3, [r7, #16]
}
 8008b32:	bf00      	nop
 8008b34:	bf00      	nop
 8008b36:	e7fd      	b.n	8008b34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b38:	4b3e      	ldr	r3, [pc, #248]	@ (8008c34 <xPortStartScheduler+0x124>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a3f      	ldr	r2, [pc, #252]	@ (8008c3c <xPortStartScheduler+0x12c>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d10b      	bne.n	8008b5a <xPortStartScheduler+0x4a>
	__asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	60fb      	str	r3, [r7, #12]
}
 8008b54:	bf00      	nop
 8008b56:	bf00      	nop
 8008b58:	e7fd      	b.n	8008b56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b5a:	4b39      	ldr	r3, [pc, #228]	@ (8008c40 <xPortStartScheduler+0x130>)
 8008b5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	22ff      	movs	r2, #255	@ 0xff
 8008b6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b74:	78fb      	ldrb	r3, [r7, #3]
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008b7c:	b2da      	uxtb	r2, r3
 8008b7e:	4b31      	ldr	r3, [pc, #196]	@ (8008c44 <xPortStartScheduler+0x134>)
 8008b80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b82:	4b31      	ldr	r3, [pc, #196]	@ (8008c48 <xPortStartScheduler+0x138>)
 8008b84:	2207      	movs	r2, #7
 8008b86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b88:	e009      	b.n	8008b9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8008c48 <xPortStartScheduler+0x138>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	4a2d      	ldr	r2, [pc, #180]	@ (8008c48 <xPortStartScheduler+0x138>)
 8008b92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b94:	78fb      	ldrb	r3, [r7, #3]
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b9e:	78fb      	ldrb	r3, [r7, #3]
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ba6:	2b80      	cmp	r3, #128	@ 0x80
 8008ba8:	d0ef      	beq.n	8008b8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008baa:	4b27      	ldr	r3, [pc, #156]	@ (8008c48 <xPortStartScheduler+0x138>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f1c3 0307 	rsb	r3, r3, #7
 8008bb2:	2b04      	cmp	r3, #4
 8008bb4:	d00b      	beq.n	8008bce <xPortStartScheduler+0xbe>
	__asm volatile
 8008bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bba:	f383 8811 	msr	BASEPRI, r3
 8008bbe:	f3bf 8f6f 	isb	sy
 8008bc2:	f3bf 8f4f 	dsb	sy
 8008bc6:	60bb      	str	r3, [r7, #8]
}
 8008bc8:	bf00      	nop
 8008bca:	bf00      	nop
 8008bcc:	e7fd      	b.n	8008bca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008bce:	4b1e      	ldr	r3, [pc, #120]	@ (8008c48 <xPortStartScheduler+0x138>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	021b      	lsls	r3, r3, #8
 8008bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8008c48 <xPortStartScheduler+0x138>)
 8008bd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8008c48 <xPortStartScheduler+0x138>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008be0:	4a19      	ldr	r2, [pc, #100]	@ (8008c48 <xPortStartScheduler+0x138>)
 8008be2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008bec:	4b17      	ldr	r3, [pc, #92]	@ (8008c4c <xPortStartScheduler+0x13c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a16      	ldr	r2, [pc, #88]	@ (8008c4c <xPortStartScheduler+0x13c>)
 8008bf2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008bf6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008bf8:	4b14      	ldr	r3, [pc, #80]	@ (8008c4c <xPortStartScheduler+0x13c>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a13      	ldr	r2, [pc, #76]	@ (8008c4c <xPortStartScheduler+0x13c>)
 8008bfe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008c02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c04:	f000 f8da 	bl	8008dbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c08:	4b11      	ldr	r3, [pc, #68]	@ (8008c50 <xPortStartScheduler+0x140>)
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008c0e:	f000 f8f9 	bl	8008e04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c12:	4b10      	ldr	r3, [pc, #64]	@ (8008c54 <xPortStartScheduler+0x144>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a0f      	ldr	r2, [pc, #60]	@ (8008c54 <xPortStartScheduler+0x144>)
 8008c18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008c1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c1e:	f7ff ff63 	bl	8008ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c22:	f7ff fd25 	bl	8008670 <vTaskSwitchContext>
	prvTaskExitError();
 8008c26:	f7ff ff17 	bl	8008a58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3718      	adds	r7, #24
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	e000ed00 	.word	0xe000ed00
 8008c38:	410fc271 	.word	0x410fc271
 8008c3c:	410fc270 	.word	0x410fc270
 8008c40:	e000e400 	.word	0xe000e400
 8008c44:	20000708 	.word	0x20000708
 8008c48:	2000070c 	.word	0x2000070c
 8008c4c:	e000ed20 	.word	0xe000ed20
 8008c50:	2000000c 	.word	0x2000000c
 8008c54:	e000ef34 	.word	0xe000ef34

08008c58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	607b      	str	r3, [r7, #4]
}
 8008c70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c72:	4b10      	ldr	r3, [pc, #64]	@ (8008cb4 <vPortEnterCritical+0x5c>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3301      	adds	r3, #1
 8008c78:	4a0e      	ldr	r2, [pc, #56]	@ (8008cb4 <vPortEnterCritical+0x5c>)
 8008c7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb4 <vPortEnterCritical+0x5c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d110      	bne.n	8008ca6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c84:	4b0c      	ldr	r3, [pc, #48]	@ (8008cb8 <vPortEnterCritical+0x60>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00b      	beq.n	8008ca6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c92:	f383 8811 	msr	BASEPRI, r3
 8008c96:	f3bf 8f6f 	isb	sy
 8008c9a:	f3bf 8f4f 	dsb	sy
 8008c9e:	603b      	str	r3, [r7, #0]
}
 8008ca0:	bf00      	nop
 8008ca2:	bf00      	nop
 8008ca4:	e7fd      	b.n	8008ca2 <vPortEnterCritical+0x4a>
	}
}
 8008ca6:	bf00      	nop
 8008ca8:	370c      	adds	r7, #12
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	2000000c 	.word	0x2000000c
 8008cb8:	e000ed04 	.word	0xe000ed04

08008cbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008cc2:	4b12      	ldr	r3, [pc, #72]	@ (8008d0c <vPortExitCritical+0x50>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10b      	bne.n	8008ce2 <vPortExitCritical+0x26>
	__asm volatile
 8008cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cce:	f383 8811 	msr	BASEPRI, r3
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	607b      	str	r3, [r7, #4]
}
 8008cdc:	bf00      	nop
 8008cde:	bf00      	nop
 8008ce0:	e7fd      	b.n	8008cde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8008d0c <vPortExitCritical+0x50>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	4a08      	ldr	r2, [pc, #32]	@ (8008d0c <vPortExitCritical+0x50>)
 8008cea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008cec:	4b07      	ldr	r3, [pc, #28]	@ (8008d0c <vPortExitCritical+0x50>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d105      	bne.n	8008d00 <vPortExitCritical+0x44>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008cfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d00:	bf00      	nop
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	2000000c 	.word	0x2000000c

08008d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d10:	f3ef 8009 	mrs	r0, PSP
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	4b15      	ldr	r3, [pc, #84]	@ (8008d70 <pxCurrentTCBConst>)
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	f01e 0f10 	tst.w	lr, #16
 8008d20:	bf08      	it	eq
 8008d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2a:	6010      	str	r0, [r2, #0]
 8008d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008d34:	f380 8811 	msr	BASEPRI, r0
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f7ff fc96 	bl	8008670 <vTaskSwitchContext>
 8008d44:	f04f 0000 	mov.w	r0, #0
 8008d48:	f380 8811 	msr	BASEPRI, r0
 8008d4c:	bc09      	pop	{r0, r3}
 8008d4e:	6819      	ldr	r1, [r3, #0]
 8008d50:	6808      	ldr	r0, [r1, #0]
 8008d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d56:	f01e 0f10 	tst.w	lr, #16
 8008d5a:	bf08      	it	eq
 8008d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d60:	f380 8809 	msr	PSP, r0
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	f3af 8000 	nop.w

08008d70 <pxCurrentTCBConst>:
 8008d70:	200005dc 	.word	0x200005dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d74:	bf00      	nop
 8008d76:	bf00      	nop

08008d78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	607b      	str	r3, [r7, #4]
}
 8008d90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d92:	f7ff fbb3 	bl	80084fc <xTaskIncrementTick>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d003      	beq.n	8008da4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d9c:	4b06      	ldr	r3, [pc, #24]	@ (8008db8 <SysTick_Handler+0x40>)
 8008d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	2300      	movs	r3, #0
 8008da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	f383 8811 	msr	BASEPRI, r3
}
 8008dae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008db0:	bf00      	nop
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	e000ed04 	.word	0xe000ed04

08008dbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8008df0 <vPortSetupTimerInterrupt+0x34>)
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8008df4 <vPortSetupTimerInterrupt+0x38>)
 8008dc8:	2200      	movs	r2, #0
 8008dca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8008df8 <vPortSetupTimerInterrupt+0x3c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8008dfc <vPortSetupTimerInterrupt+0x40>)
 8008dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd6:	099b      	lsrs	r3, r3, #6
 8008dd8:	4a09      	ldr	r2, [pc, #36]	@ (8008e00 <vPortSetupTimerInterrupt+0x44>)
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008dde:	4b04      	ldr	r3, [pc, #16]	@ (8008df0 <vPortSetupTimerInterrupt+0x34>)
 8008de0:	2207      	movs	r2, #7
 8008de2:	601a      	str	r2, [r3, #0]
}
 8008de4:	bf00      	nop
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	e000e010 	.word	0xe000e010
 8008df4:	e000e018 	.word	0xe000e018
 8008df8:	20000000 	.word	0x20000000
 8008dfc:	10624dd3 	.word	0x10624dd3
 8008e00:	e000e014 	.word	0xe000e014

08008e04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008e04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008e14 <vPortEnableVFP+0x10>
 8008e08:	6801      	ldr	r1, [r0, #0]
 8008e0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008e0e:	6001      	str	r1, [r0, #0]
 8008e10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e12:	bf00      	nop
 8008e14:	e000ed88 	.word	0xe000ed88

08008e18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b08a      	sub	sp, #40	@ 0x28
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e20:	2300      	movs	r3, #0
 8008e22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e24:	f7ff fabe 	bl	80083a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e28:	4b5c      	ldr	r3, [pc, #368]	@ (8008f9c <pvPortMalloc+0x184>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d101      	bne.n	8008e34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e30:	f000 f924 	bl	800907c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e34:	4b5a      	ldr	r3, [pc, #360]	@ (8008fa0 <pvPortMalloc+0x188>)
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f040 8095 	bne.w	8008f6c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d01e      	beq.n	8008e86 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008e48:	2208      	movs	r2, #8
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f003 0307 	and.w	r3, r3, #7
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d015      	beq.n	8008e86 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f023 0307 	bic.w	r3, r3, #7
 8008e60:	3308      	adds	r3, #8
 8008e62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f003 0307 	and.w	r3, r3, #7
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00b      	beq.n	8008e86 <pvPortMalloc+0x6e>
	__asm volatile
 8008e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e72:	f383 8811 	msr	BASEPRI, r3
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	617b      	str	r3, [r7, #20]
}
 8008e80:	bf00      	nop
 8008e82:	bf00      	nop
 8008e84:	e7fd      	b.n	8008e82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d06f      	beq.n	8008f6c <pvPortMalloc+0x154>
 8008e8c:	4b45      	ldr	r3, [pc, #276]	@ (8008fa4 <pvPortMalloc+0x18c>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d86a      	bhi.n	8008f6c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e96:	4b44      	ldr	r3, [pc, #272]	@ (8008fa8 <pvPortMalloc+0x190>)
 8008e98:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e9a:	4b43      	ldr	r3, [pc, #268]	@ (8008fa8 <pvPortMalloc+0x190>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ea0:	e004      	b.n	8008eac <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d903      	bls.n	8008ebe <pvPortMalloc+0xa6>
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1f1      	bne.n	8008ea2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ebe:	4b37      	ldr	r3, [pc, #220]	@ (8008f9c <pvPortMalloc+0x184>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d051      	beq.n	8008f6c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2208      	movs	r2, #8
 8008ece:	4413      	add	r3, r2
 8008ed0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	1ad2      	subs	r2, r2, r3
 8008ee2:	2308      	movs	r3, #8
 8008ee4:	005b      	lsls	r3, r3, #1
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d920      	bls.n	8008f2c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4413      	add	r3, r2
 8008ef0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	f003 0307 	and.w	r3, r3, #7
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00b      	beq.n	8008f14 <pvPortMalloc+0xfc>
	__asm volatile
 8008efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f00:	f383 8811 	msr	BASEPRI, r3
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	613b      	str	r3, [r7, #16]
}
 8008f0e:	bf00      	nop
 8008f10:	bf00      	nop
 8008f12:	e7fd      	b.n	8008f10 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f16:	685a      	ldr	r2, [r3, #4]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	1ad2      	subs	r2, r2, r3
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f26:	69b8      	ldr	r0, [r7, #24]
 8008f28:	f000 f90a 	bl	8009140 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8008fa4 <pvPortMalloc+0x18c>)
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	4a1b      	ldr	r2, [pc, #108]	@ (8008fa4 <pvPortMalloc+0x18c>)
 8008f38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8008fa4 <pvPortMalloc+0x18c>)
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8008fac <pvPortMalloc+0x194>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d203      	bcs.n	8008f4e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f46:	4b17      	ldr	r3, [pc, #92]	@ (8008fa4 <pvPortMalloc+0x18c>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a18      	ldr	r2, [pc, #96]	@ (8008fac <pvPortMalloc+0x194>)
 8008f4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f50:	685a      	ldr	r2, [r3, #4]
 8008f52:	4b13      	ldr	r3, [pc, #76]	@ (8008fa0 <pvPortMalloc+0x188>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	431a      	orrs	r2, r3
 8008f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f5e:	2200      	movs	r2, #0
 8008f60:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f62:	4b13      	ldr	r3, [pc, #76]	@ (8008fb0 <pvPortMalloc+0x198>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	3301      	adds	r3, #1
 8008f68:	4a11      	ldr	r2, [pc, #68]	@ (8008fb0 <pvPortMalloc+0x198>)
 8008f6a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f6c:	f7ff fa28 	bl	80083c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	f003 0307 	and.w	r3, r3, #7
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00b      	beq.n	8008f92 <pvPortMalloc+0x17a>
	__asm volatile
 8008f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f7e:	f383 8811 	msr	BASEPRI, r3
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	60fb      	str	r3, [r7, #12]
}
 8008f8c:	bf00      	nop
 8008f8e:	bf00      	nop
 8008f90:	e7fd      	b.n	8008f8e <pvPortMalloc+0x176>
	return pvReturn;
 8008f92:	69fb      	ldr	r3, [r7, #28]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3728      	adds	r7, #40	@ 0x28
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	20001318 	.word	0x20001318
 8008fa0:	2000132c 	.word	0x2000132c
 8008fa4:	2000131c 	.word	0x2000131c
 8008fa8:	20001310 	.word	0x20001310
 8008fac:	20001320 	.word	0x20001320
 8008fb0:	20001324 	.word	0x20001324

08008fb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b086      	sub	sp, #24
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d04f      	beq.n	8009066 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fc6:	2308      	movs	r3, #8
 8008fc8:	425b      	negs	r3, r3
 8008fca:	697a      	ldr	r2, [r7, #20]
 8008fcc:	4413      	add	r3, r2
 8008fce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	685a      	ldr	r2, [r3, #4]
 8008fd8:	4b25      	ldr	r3, [pc, #148]	@ (8009070 <vPortFree+0xbc>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4013      	ands	r3, r2
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d10b      	bne.n	8008ffa <vPortFree+0x46>
	__asm volatile
 8008fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe6:	f383 8811 	msr	BASEPRI, r3
 8008fea:	f3bf 8f6f 	isb	sy
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	60fb      	str	r3, [r7, #12]
}
 8008ff4:	bf00      	nop
 8008ff6:	bf00      	nop
 8008ff8:	e7fd      	b.n	8008ff6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00b      	beq.n	800901a <vPortFree+0x66>
	__asm volatile
 8009002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	60bb      	str	r3, [r7, #8]
}
 8009014:	bf00      	nop
 8009016:	bf00      	nop
 8009018:	e7fd      	b.n	8009016 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	685a      	ldr	r2, [r3, #4]
 800901e:	4b14      	ldr	r3, [pc, #80]	@ (8009070 <vPortFree+0xbc>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4013      	ands	r3, r2
 8009024:	2b00      	cmp	r3, #0
 8009026:	d01e      	beq.n	8009066 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d11a      	bne.n	8009066 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	685a      	ldr	r2, [r3, #4]
 8009034:	4b0e      	ldr	r3, [pc, #56]	@ (8009070 <vPortFree+0xbc>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	43db      	mvns	r3, r3
 800903a:	401a      	ands	r2, r3
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009040:	f7ff f9b0 	bl	80083a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	685a      	ldr	r2, [r3, #4]
 8009048:	4b0a      	ldr	r3, [pc, #40]	@ (8009074 <vPortFree+0xc0>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4413      	add	r3, r2
 800904e:	4a09      	ldr	r2, [pc, #36]	@ (8009074 <vPortFree+0xc0>)
 8009050:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009052:	6938      	ldr	r0, [r7, #16]
 8009054:	f000 f874 	bl	8009140 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009058:	4b07      	ldr	r3, [pc, #28]	@ (8009078 <vPortFree+0xc4>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	3301      	adds	r3, #1
 800905e:	4a06      	ldr	r2, [pc, #24]	@ (8009078 <vPortFree+0xc4>)
 8009060:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009062:	f7ff f9ad 	bl	80083c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009066:	bf00      	nop
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	2000132c 	.word	0x2000132c
 8009074:	2000131c 	.word	0x2000131c
 8009078:	20001328 	.word	0x20001328

0800907c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009082:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009086:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009088:	4b27      	ldr	r3, [pc, #156]	@ (8009128 <prvHeapInit+0xac>)
 800908a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f003 0307 	and.w	r3, r3, #7
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00c      	beq.n	80090b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	3307      	adds	r3, #7
 800909a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f023 0307 	bic.w	r3, r3, #7
 80090a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	4a1f      	ldr	r2, [pc, #124]	@ (8009128 <prvHeapInit+0xac>)
 80090ac:	4413      	add	r3, r2
 80090ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090b4:	4a1d      	ldr	r2, [pc, #116]	@ (800912c <prvHeapInit+0xb0>)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090ba:	4b1c      	ldr	r3, [pc, #112]	@ (800912c <prvHeapInit+0xb0>)
 80090bc:	2200      	movs	r2, #0
 80090be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	4413      	add	r3, r2
 80090c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090c8:	2208      	movs	r2, #8
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	1a9b      	subs	r3, r3, r2
 80090ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f023 0307 	bic.w	r3, r3, #7
 80090d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	4a15      	ldr	r2, [pc, #84]	@ (8009130 <prvHeapInit+0xb4>)
 80090dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090de:	4b14      	ldr	r3, [pc, #80]	@ (8009130 <prvHeapInit+0xb4>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2200      	movs	r2, #0
 80090e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090e6:	4b12      	ldr	r3, [pc, #72]	@ (8009130 <prvHeapInit+0xb4>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2200      	movs	r2, #0
 80090ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	1ad2      	subs	r2, r2, r3
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009130 <prvHeapInit+0xb4>)
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	4a0a      	ldr	r2, [pc, #40]	@ (8009134 <prvHeapInit+0xb8>)
 800910a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	4a09      	ldr	r2, [pc, #36]	@ (8009138 <prvHeapInit+0xbc>)
 8009112:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009114:	4b09      	ldr	r3, [pc, #36]	@ (800913c <prvHeapInit+0xc0>)
 8009116:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800911a:	601a      	str	r2, [r3, #0]
}
 800911c:	bf00      	nop
 800911e:	3714      	adds	r7, #20
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	20000710 	.word	0x20000710
 800912c:	20001310 	.word	0x20001310
 8009130:	20001318 	.word	0x20001318
 8009134:	20001320 	.word	0x20001320
 8009138:	2000131c 	.word	0x2000131c
 800913c:	2000132c 	.word	0x2000132c

08009140 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009148:	4b28      	ldr	r3, [pc, #160]	@ (80091ec <prvInsertBlockIntoFreeList+0xac>)
 800914a:	60fb      	str	r3, [r7, #12]
 800914c:	e002      	b.n	8009154 <prvInsertBlockIntoFreeList+0x14>
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	429a      	cmp	r2, r3
 800915c:	d8f7      	bhi.n	800914e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	68ba      	ldr	r2, [r7, #8]
 8009168:	4413      	add	r3, r2
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	429a      	cmp	r2, r3
 800916e:	d108      	bne.n	8009182 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	685a      	ldr	r2, [r3, #4]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	441a      	add	r2, r3
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	441a      	add	r2, r3
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	429a      	cmp	r2, r3
 8009194:	d118      	bne.n	80091c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	4b15      	ldr	r3, [pc, #84]	@ (80091f0 <prvInsertBlockIntoFreeList+0xb0>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d00d      	beq.n	80091be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685a      	ldr	r2, [r3, #4]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	441a      	add	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	601a      	str	r2, [r3, #0]
 80091bc:	e008      	b.n	80091d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091be:	4b0c      	ldr	r3, [pc, #48]	@ (80091f0 <prvInsertBlockIntoFreeList+0xb0>)
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	e003      	b.n	80091d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d002      	beq.n	80091de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091de:	bf00      	nop
 80091e0:	3714      	adds	r7, #20
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	20001310 	.word	0x20001310
 80091f0:	20001318 	.word	0x20001318

080091f4 <malloc>:
 80091f4:	4b02      	ldr	r3, [pc, #8]	@ (8009200 <malloc+0xc>)
 80091f6:	4601      	mov	r1, r0
 80091f8:	6818      	ldr	r0, [r3, #0]
 80091fa:	f000 b825 	b.w	8009248 <_malloc_r>
 80091fe:	bf00      	nop
 8009200:	2000001c 	.word	0x2000001c

08009204 <sbrk_aligned>:
 8009204:	b570      	push	{r4, r5, r6, lr}
 8009206:	4e0f      	ldr	r6, [pc, #60]	@ (8009244 <sbrk_aligned+0x40>)
 8009208:	460c      	mov	r4, r1
 800920a:	6831      	ldr	r1, [r6, #0]
 800920c:	4605      	mov	r5, r0
 800920e:	b911      	cbnz	r1, 8009216 <sbrk_aligned+0x12>
 8009210:	f000 ff36 	bl	800a080 <_sbrk_r>
 8009214:	6030      	str	r0, [r6, #0]
 8009216:	4621      	mov	r1, r4
 8009218:	4628      	mov	r0, r5
 800921a:	f000 ff31 	bl	800a080 <_sbrk_r>
 800921e:	1c43      	adds	r3, r0, #1
 8009220:	d103      	bne.n	800922a <sbrk_aligned+0x26>
 8009222:	f04f 34ff 	mov.w	r4, #4294967295
 8009226:	4620      	mov	r0, r4
 8009228:	bd70      	pop	{r4, r5, r6, pc}
 800922a:	1cc4      	adds	r4, r0, #3
 800922c:	f024 0403 	bic.w	r4, r4, #3
 8009230:	42a0      	cmp	r0, r4
 8009232:	d0f8      	beq.n	8009226 <sbrk_aligned+0x22>
 8009234:	1a21      	subs	r1, r4, r0
 8009236:	4628      	mov	r0, r5
 8009238:	f000 ff22 	bl	800a080 <_sbrk_r>
 800923c:	3001      	adds	r0, #1
 800923e:	d1f2      	bne.n	8009226 <sbrk_aligned+0x22>
 8009240:	e7ef      	b.n	8009222 <sbrk_aligned+0x1e>
 8009242:	bf00      	nop
 8009244:	20001330 	.word	0x20001330

08009248 <_malloc_r>:
 8009248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800924c:	1ccd      	adds	r5, r1, #3
 800924e:	f025 0503 	bic.w	r5, r5, #3
 8009252:	3508      	adds	r5, #8
 8009254:	2d0c      	cmp	r5, #12
 8009256:	bf38      	it	cc
 8009258:	250c      	movcc	r5, #12
 800925a:	2d00      	cmp	r5, #0
 800925c:	4606      	mov	r6, r0
 800925e:	db01      	blt.n	8009264 <_malloc_r+0x1c>
 8009260:	42a9      	cmp	r1, r5
 8009262:	d904      	bls.n	800926e <_malloc_r+0x26>
 8009264:	230c      	movs	r3, #12
 8009266:	6033      	str	r3, [r6, #0]
 8009268:	2000      	movs	r0, #0
 800926a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800926e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009344 <_malloc_r+0xfc>
 8009272:	f000 f869 	bl	8009348 <__malloc_lock>
 8009276:	f8d8 3000 	ldr.w	r3, [r8]
 800927a:	461c      	mov	r4, r3
 800927c:	bb44      	cbnz	r4, 80092d0 <_malloc_r+0x88>
 800927e:	4629      	mov	r1, r5
 8009280:	4630      	mov	r0, r6
 8009282:	f7ff ffbf 	bl	8009204 <sbrk_aligned>
 8009286:	1c43      	adds	r3, r0, #1
 8009288:	4604      	mov	r4, r0
 800928a:	d158      	bne.n	800933e <_malloc_r+0xf6>
 800928c:	f8d8 4000 	ldr.w	r4, [r8]
 8009290:	4627      	mov	r7, r4
 8009292:	2f00      	cmp	r7, #0
 8009294:	d143      	bne.n	800931e <_malloc_r+0xd6>
 8009296:	2c00      	cmp	r4, #0
 8009298:	d04b      	beq.n	8009332 <_malloc_r+0xea>
 800929a:	6823      	ldr	r3, [r4, #0]
 800929c:	4639      	mov	r1, r7
 800929e:	4630      	mov	r0, r6
 80092a0:	eb04 0903 	add.w	r9, r4, r3
 80092a4:	f000 feec 	bl	800a080 <_sbrk_r>
 80092a8:	4581      	cmp	r9, r0
 80092aa:	d142      	bne.n	8009332 <_malloc_r+0xea>
 80092ac:	6821      	ldr	r1, [r4, #0]
 80092ae:	1a6d      	subs	r5, r5, r1
 80092b0:	4629      	mov	r1, r5
 80092b2:	4630      	mov	r0, r6
 80092b4:	f7ff ffa6 	bl	8009204 <sbrk_aligned>
 80092b8:	3001      	adds	r0, #1
 80092ba:	d03a      	beq.n	8009332 <_malloc_r+0xea>
 80092bc:	6823      	ldr	r3, [r4, #0]
 80092be:	442b      	add	r3, r5
 80092c0:	6023      	str	r3, [r4, #0]
 80092c2:	f8d8 3000 	ldr.w	r3, [r8]
 80092c6:	685a      	ldr	r2, [r3, #4]
 80092c8:	bb62      	cbnz	r2, 8009324 <_malloc_r+0xdc>
 80092ca:	f8c8 7000 	str.w	r7, [r8]
 80092ce:	e00f      	b.n	80092f0 <_malloc_r+0xa8>
 80092d0:	6822      	ldr	r2, [r4, #0]
 80092d2:	1b52      	subs	r2, r2, r5
 80092d4:	d420      	bmi.n	8009318 <_malloc_r+0xd0>
 80092d6:	2a0b      	cmp	r2, #11
 80092d8:	d917      	bls.n	800930a <_malloc_r+0xc2>
 80092da:	1961      	adds	r1, r4, r5
 80092dc:	42a3      	cmp	r3, r4
 80092de:	6025      	str	r5, [r4, #0]
 80092e0:	bf18      	it	ne
 80092e2:	6059      	strne	r1, [r3, #4]
 80092e4:	6863      	ldr	r3, [r4, #4]
 80092e6:	bf08      	it	eq
 80092e8:	f8c8 1000 	streq.w	r1, [r8]
 80092ec:	5162      	str	r2, [r4, r5]
 80092ee:	604b      	str	r3, [r1, #4]
 80092f0:	4630      	mov	r0, r6
 80092f2:	f000 f82f 	bl	8009354 <__malloc_unlock>
 80092f6:	f104 000b 	add.w	r0, r4, #11
 80092fa:	1d23      	adds	r3, r4, #4
 80092fc:	f020 0007 	bic.w	r0, r0, #7
 8009300:	1ac2      	subs	r2, r0, r3
 8009302:	bf1c      	itt	ne
 8009304:	1a1b      	subne	r3, r3, r0
 8009306:	50a3      	strne	r3, [r4, r2]
 8009308:	e7af      	b.n	800926a <_malloc_r+0x22>
 800930a:	6862      	ldr	r2, [r4, #4]
 800930c:	42a3      	cmp	r3, r4
 800930e:	bf0c      	ite	eq
 8009310:	f8c8 2000 	streq.w	r2, [r8]
 8009314:	605a      	strne	r2, [r3, #4]
 8009316:	e7eb      	b.n	80092f0 <_malloc_r+0xa8>
 8009318:	4623      	mov	r3, r4
 800931a:	6864      	ldr	r4, [r4, #4]
 800931c:	e7ae      	b.n	800927c <_malloc_r+0x34>
 800931e:	463c      	mov	r4, r7
 8009320:	687f      	ldr	r7, [r7, #4]
 8009322:	e7b6      	b.n	8009292 <_malloc_r+0x4a>
 8009324:	461a      	mov	r2, r3
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	42a3      	cmp	r3, r4
 800932a:	d1fb      	bne.n	8009324 <_malloc_r+0xdc>
 800932c:	2300      	movs	r3, #0
 800932e:	6053      	str	r3, [r2, #4]
 8009330:	e7de      	b.n	80092f0 <_malloc_r+0xa8>
 8009332:	230c      	movs	r3, #12
 8009334:	6033      	str	r3, [r6, #0]
 8009336:	4630      	mov	r0, r6
 8009338:	f000 f80c 	bl	8009354 <__malloc_unlock>
 800933c:	e794      	b.n	8009268 <_malloc_r+0x20>
 800933e:	6005      	str	r5, [r0, #0]
 8009340:	e7d6      	b.n	80092f0 <_malloc_r+0xa8>
 8009342:	bf00      	nop
 8009344:	20001334 	.word	0x20001334

08009348 <__malloc_lock>:
 8009348:	4801      	ldr	r0, [pc, #4]	@ (8009350 <__malloc_lock+0x8>)
 800934a:	f000 bee6 	b.w	800a11a <__retarget_lock_acquire_recursive>
 800934e:	bf00      	nop
 8009350:	20001478 	.word	0x20001478

08009354 <__malloc_unlock>:
 8009354:	4801      	ldr	r0, [pc, #4]	@ (800935c <__malloc_unlock+0x8>)
 8009356:	f000 bee1 	b.w	800a11c <__retarget_lock_release_recursive>
 800935a:	bf00      	nop
 800935c:	20001478 	.word	0x20001478

08009360 <__cvt>:
 8009360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009364:	ec57 6b10 	vmov	r6, r7, d0
 8009368:	2f00      	cmp	r7, #0
 800936a:	460c      	mov	r4, r1
 800936c:	4619      	mov	r1, r3
 800936e:	463b      	mov	r3, r7
 8009370:	bfbb      	ittet	lt
 8009372:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009376:	461f      	movlt	r7, r3
 8009378:	2300      	movge	r3, #0
 800937a:	232d      	movlt	r3, #45	@ 0x2d
 800937c:	700b      	strb	r3, [r1, #0]
 800937e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009380:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009384:	4691      	mov	r9, r2
 8009386:	f023 0820 	bic.w	r8, r3, #32
 800938a:	bfbc      	itt	lt
 800938c:	4632      	movlt	r2, r6
 800938e:	4616      	movlt	r6, r2
 8009390:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009394:	d005      	beq.n	80093a2 <__cvt+0x42>
 8009396:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800939a:	d100      	bne.n	800939e <__cvt+0x3e>
 800939c:	3401      	adds	r4, #1
 800939e:	2102      	movs	r1, #2
 80093a0:	e000      	b.n	80093a4 <__cvt+0x44>
 80093a2:	2103      	movs	r1, #3
 80093a4:	ab03      	add	r3, sp, #12
 80093a6:	9301      	str	r3, [sp, #4]
 80093a8:	ab02      	add	r3, sp, #8
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	ec47 6b10 	vmov	d0, r6, r7
 80093b0:	4653      	mov	r3, sl
 80093b2:	4622      	mov	r2, r4
 80093b4:	f000 ff4c 	bl	800a250 <_dtoa_r>
 80093b8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80093bc:	4605      	mov	r5, r0
 80093be:	d119      	bne.n	80093f4 <__cvt+0x94>
 80093c0:	f019 0f01 	tst.w	r9, #1
 80093c4:	d00e      	beq.n	80093e4 <__cvt+0x84>
 80093c6:	eb00 0904 	add.w	r9, r0, r4
 80093ca:	2200      	movs	r2, #0
 80093cc:	2300      	movs	r3, #0
 80093ce:	4630      	mov	r0, r6
 80093d0:	4639      	mov	r1, r7
 80093d2:	f7f7 fba1 	bl	8000b18 <__aeabi_dcmpeq>
 80093d6:	b108      	cbz	r0, 80093dc <__cvt+0x7c>
 80093d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80093dc:	2230      	movs	r2, #48	@ 0x30
 80093de:	9b03      	ldr	r3, [sp, #12]
 80093e0:	454b      	cmp	r3, r9
 80093e2:	d31e      	bcc.n	8009422 <__cvt+0xc2>
 80093e4:	9b03      	ldr	r3, [sp, #12]
 80093e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093e8:	1b5b      	subs	r3, r3, r5
 80093ea:	4628      	mov	r0, r5
 80093ec:	6013      	str	r3, [r2, #0]
 80093ee:	b004      	add	sp, #16
 80093f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80093f8:	eb00 0904 	add.w	r9, r0, r4
 80093fc:	d1e5      	bne.n	80093ca <__cvt+0x6a>
 80093fe:	7803      	ldrb	r3, [r0, #0]
 8009400:	2b30      	cmp	r3, #48	@ 0x30
 8009402:	d10a      	bne.n	800941a <__cvt+0xba>
 8009404:	2200      	movs	r2, #0
 8009406:	2300      	movs	r3, #0
 8009408:	4630      	mov	r0, r6
 800940a:	4639      	mov	r1, r7
 800940c:	f7f7 fb84 	bl	8000b18 <__aeabi_dcmpeq>
 8009410:	b918      	cbnz	r0, 800941a <__cvt+0xba>
 8009412:	f1c4 0401 	rsb	r4, r4, #1
 8009416:	f8ca 4000 	str.w	r4, [sl]
 800941a:	f8da 3000 	ldr.w	r3, [sl]
 800941e:	4499      	add	r9, r3
 8009420:	e7d3      	b.n	80093ca <__cvt+0x6a>
 8009422:	1c59      	adds	r1, r3, #1
 8009424:	9103      	str	r1, [sp, #12]
 8009426:	701a      	strb	r2, [r3, #0]
 8009428:	e7d9      	b.n	80093de <__cvt+0x7e>

0800942a <__exponent>:
 800942a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800942c:	2900      	cmp	r1, #0
 800942e:	bfba      	itte	lt
 8009430:	4249      	neglt	r1, r1
 8009432:	232d      	movlt	r3, #45	@ 0x2d
 8009434:	232b      	movge	r3, #43	@ 0x2b
 8009436:	2909      	cmp	r1, #9
 8009438:	7002      	strb	r2, [r0, #0]
 800943a:	7043      	strb	r3, [r0, #1]
 800943c:	dd29      	ble.n	8009492 <__exponent+0x68>
 800943e:	f10d 0307 	add.w	r3, sp, #7
 8009442:	461d      	mov	r5, r3
 8009444:	270a      	movs	r7, #10
 8009446:	461a      	mov	r2, r3
 8009448:	fbb1 f6f7 	udiv	r6, r1, r7
 800944c:	fb07 1416 	mls	r4, r7, r6, r1
 8009450:	3430      	adds	r4, #48	@ 0x30
 8009452:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009456:	460c      	mov	r4, r1
 8009458:	2c63      	cmp	r4, #99	@ 0x63
 800945a:	f103 33ff 	add.w	r3, r3, #4294967295
 800945e:	4631      	mov	r1, r6
 8009460:	dcf1      	bgt.n	8009446 <__exponent+0x1c>
 8009462:	3130      	adds	r1, #48	@ 0x30
 8009464:	1e94      	subs	r4, r2, #2
 8009466:	f803 1c01 	strb.w	r1, [r3, #-1]
 800946a:	1c41      	adds	r1, r0, #1
 800946c:	4623      	mov	r3, r4
 800946e:	42ab      	cmp	r3, r5
 8009470:	d30a      	bcc.n	8009488 <__exponent+0x5e>
 8009472:	f10d 0309 	add.w	r3, sp, #9
 8009476:	1a9b      	subs	r3, r3, r2
 8009478:	42ac      	cmp	r4, r5
 800947a:	bf88      	it	hi
 800947c:	2300      	movhi	r3, #0
 800947e:	3302      	adds	r3, #2
 8009480:	4403      	add	r3, r0
 8009482:	1a18      	subs	r0, r3, r0
 8009484:	b003      	add	sp, #12
 8009486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009488:	f813 6b01 	ldrb.w	r6, [r3], #1
 800948c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009490:	e7ed      	b.n	800946e <__exponent+0x44>
 8009492:	2330      	movs	r3, #48	@ 0x30
 8009494:	3130      	adds	r1, #48	@ 0x30
 8009496:	7083      	strb	r3, [r0, #2]
 8009498:	70c1      	strb	r1, [r0, #3]
 800949a:	1d03      	adds	r3, r0, #4
 800949c:	e7f1      	b.n	8009482 <__exponent+0x58>
	...

080094a0 <_printf_float>:
 80094a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a4:	b08d      	sub	sp, #52	@ 0x34
 80094a6:	460c      	mov	r4, r1
 80094a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80094ac:	4616      	mov	r6, r2
 80094ae:	461f      	mov	r7, r3
 80094b0:	4605      	mov	r5, r0
 80094b2:	f000 fdad 	bl	800a010 <_localeconv_r>
 80094b6:	6803      	ldr	r3, [r0, #0]
 80094b8:	9304      	str	r3, [sp, #16]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7f6 ff00 	bl	80002c0 <strlen>
 80094c0:	2300      	movs	r3, #0
 80094c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80094c4:	f8d8 3000 	ldr.w	r3, [r8]
 80094c8:	9005      	str	r0, [sp, #20]
 80094ca:	3307      	adds	r3, #7
 80094cc:	f023 0307 	bic.w	r3, r3, #7
 80094d0:	f103 0208 	add.w	r2, r3, #8
 80094d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80094d8:	f8d4 b000 	ldr.w	fp, [r4]
 80094dc:	f8c8 2000 	str.w	r2, [r8]
 80094e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80094e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80094e8:	9307      	str	r3, [sp, #28]
 80094ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80094ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80094f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094f6:	4b9c      	ldr	r3, [pc, #624]	@ (8009768 <_printf_float+0x2c8>)
 80094f8:	f04f 32ff 	mov.w	r2, #4294967295
 80094fc:	f7f7 fb3e 	bl	8000b7c <__aeabi_dcmpun>
 8009500:	bb70      	cbnz	r0, 8009560 <_printf_float+0xc0>
 8009502:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009506:	4b98      	ldr	r3, [pc, #608]	@ (8009768 <_printf_float+0x2c8>)
 8009508:	f04f 32ff 	mov.w	r2, #4294967295
 800950c:	f7f7 fb18 	bl	8000b40 <__aeabi_dcmple>
 8009510:	bb30      	cbnz	r0, 8009560 <_printf_float+0xc0>
 8009512:	2200      	movs	r2, #0
 8009514:	2300      	movs	r3, #0
 8009516:	4640      	mov	r0, r8
 8009518:	4649      	mov	r1, r9
 800951a:	f7f7 fb07 	bl	8000b2c <__aeabi_dcmplt>
 800951e:	b110      	cbz	r0, 8009526 <_printf_float+0x86>
 8009520:	232d      	movs	r3, #45	@ 0x2d
 8009522:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009526:	4a91      	ldr	r2, [pc, #580]	@ (800976c <_printf_float+0x2cc>)
 8009528:	4b91      	ldr	r3, [pc, #580]	@ (8009770 <_printf_float+0x2d0>)
 800952a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800952e:	bf94      	ite	ls
 8009530:	4690      	movls	r8, r2
 8009532:	4698      	movhi	r8, r3
 8009534:	2303      	movs	r3, #3
 8009536:	6123      	str	r3, [r4, #16]
 8009538:	f02b 0304 	bic.w	r3, fp, #4
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	f04f 0900 	mov.w	r9, #0
 8009542:	9700      	str	r7, [sp, #0]
 8009544:	4633      	mov	r3, r6
 8009546:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009548:	4621      	mov	r1, r4
 800954a:	4628      	mov	r0, r5
 800954c:	f000 f9d2 	bl	80098f4 <_printf_common>
 8009550:	3001      	adds	r0, #1
 8009552:	f040 808d 	bne.w	8009670 <_printf_float+0x1d0>
 8009556:	f04f 30ff 	mov.w	r0, #4294967295
 800955a:	b00d      	add	sp, #52	@ 0x34
 800955c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009560:	4642      	mov	r2, r8
 8009562:	464b      	mov	r3, r9
 8009564:	4640      	mov	r0, r8
 8009566:	4649      	mov	r1, r9
 8009568:	f7f7 fb08 	bl	8000b7c <__aeabi_dcmpun>
 800956c:	b140      	cbz	r0, 8009580 <_printf_float+0xe0>
 800956e:	464b      	mov	r3, r9
 8009570:	2b00      	cmp	r3, #0
 8009572:	bfbc      	itt	lt
 8009574:	232d      	movlt	r3, #45	@ 0x2d
 8009576:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800957a:	4a7e      	ldr	r2, [pc, #504]	@ (8009774 <_printf_float+0x2d4>)
 800957c:	4b7e      	ldr	r3, [pc, #504]	@ (8009778 <_printf_float+0x2d8>)
 800957e:	e7d4      	b.n	800952a <_printf_float+0x8a>
 8009580:	6863      	ldr	r3, [r4, #4]
 8009582:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009586:	9206      	str	r2, [sp, #24]
 8009588:	1c5a      	adds	r2, r3, #1
 800958a:	d13b      	bne.n	8009604 <_printf_float+0x164>
 800958c:	2306      	movs	r3, #6
 800958e:	6063      	str	r3, [r4, #4]
 8009590:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009594:	2300      	movs	r3, #0
 8009596:	6022      	str	r2, [r4, #0]
 8009598:	9303      	str	r3, [sp, #12]
 800959a:	ab0a      	add	r3, sp, #40	@ 0x28
 800959c:	e9cd a301 	strd	sl, r3, [sp, #4]
 80095a0:	ab09      	add	r3, sp, #36	@ 0x24
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	6861      	ldr	r1, [r4, #4]
 80095a6:	ec49 8b10 	vmov	d0, r8, r9
 80095aa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80095ae:	4628      	mov	r0, r5
 80095b0:	f7ff fed6 	bl	8009360 <__cvt>
 80095b4:	9b06      	ldr	r3, [sp, #24]
 80095b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80095b8:	2b47      	cmp	r3, #71	@ 0x47
 80095ba:	4680      	mov	r8, r0
 80095bc:	d129      	bne.n	8009612 <_printf_float+0x172>
 80095be:	1cc8      	adds	r0, r1, #3
 80095c0:	db02      	blt.n	80095c8 <_printf_float+0x128>
 80095c2:	6863      	ldr	r3, [r4, #4]
 80095c4:	4299      	cmp	r1, r3
 80095c6:	dd41      	ble.n	800964c <_printf_float+0x1ac>
 80095c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80095cc:	fa5f fa8a 	uxtb.w	sl, sl
 80095d0:	3901      	subs	r1, #1
 80095d2:	4652      	mov	r2, sl
 80095d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80095d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80095da:	f7ff ff26 	bl	800942a <__exponent>
 80095de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80095e0:	1813      	adds	r3, r2, r0
 80095e2:	2a01      	cmp	r2, #1
 80095e4:	4681      	mov	r9, r0
 80095e6:	6123      	str	r3, [r4, #16]
 80095e8:	dc02      	bgt.n	80095f0 <_printf_float+0x150>
 80095ea:	6822      	ldr	r2, [r4, #0]
 80095ec:	07d2      	lsls	r2, r2, #31
 80095ee:	d501      	bpl.n	80095f4 <_printf_float+0x154>
 80095f0:	3301      	adds	r3, #1
 80095f2:	6123      	str	r3, [r4, #16]
 80095f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d0a2      	beq.n	8009542 <_printf_float+0xa2>
 80095fc:	232d      	movs	r3, #45	@ 0x2d
 80095fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009602:	e79e      	b.n	8009542 <_printf_float+0xa2>
 8009604:	9a06      	ldr	r2, [sp, #24]
 8009606:	2a47      	cmp	r2, #71	@ 0x47
 8009608:	d1c2      	bne.n	8009590 <_printf_float+0xf0>
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1c0      	bne.n	8009590 <_printf_float+0xf0>
 800960e:	2301      	movs	r3, #1
 8009610:	e7bd      	b.n	800958e <_printf_float+0xee>
 8009612:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009616:	d9db      	bls.n	80095d0 <_printf_float+0x130>
 8009618:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800961c:	d118      	bne.n	8009650 <_printf_float+0x1b0>
 800961e:	2900      	cmp	r1, #0
 8009620:	6863      	ldr	r3, [r4, #4]
 8009622:	dd0b      	ble.n	800963c <_printf_float+0x19c>
 8009624:	6121      	str	r1, [r4, #16]
 8009626:	b913      	cbnz	r3, 800962e <_printf_float+0x18e>
 8009628:	6822      	ldr	r2, [r4, #0]
 800962a:	07d0      	lsls	r0, r2, #31
 800962c:	d502      	bpl.n	8009634 <_printf_float+0x194>
 800962e:	3301      	adds	r3, #1
 8009630:	440b      	add	r3, r1
 8009632:	6123      	str	r3, [r4, #16]
 8009634:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009636:	f04f 0900 	mov.w	r9, #0
 800963a:	e7db      	b.n	80095f4 <_printf_float+0x154>
 800963c:	b913      	cbnz	r3, 8009644 <_printf_float+0x1a4>
 800963e:	6822      	ldr	r2, [r4, #0]
 8009640:	07d2      	lsls	r2, r2, #31
 8009642:	d501      	bpl.n	8009648 <_printf_float+0x1a8>
 8009644:	3302      	adds	r3, #2
 8009646:	e7f4      	b.n	8009632 <_printf_float+0x192>
 8009648:	2301      	movs	r3, #1
 800964a:	e7f2      	b.n	8009632 <_printf_float+0x192>
 800964c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009650:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009652:	4299      	cmp	r1, r3
 8009654:	db05      	blt.n	8009662 <_printf_float+0x1c2>
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	6121      	str	r1, [r4, #16]
 800965a:	07d8      	lsls	r0, r3, #31
 800965c:	d5ea      	bpl.n	8009634 <_printf_float+0x194>
 800965e:	1c4b      	adds	r3, r1, #1
 8009660:	e7e7      	b.n	8009632 <_printf_float+0x192>
 8009662:	2900      	cmp	r1, #0
 8009664:	bfd4      	ite	le
 8009666:	f1c1 0202 	rsble	r2, r1, #2
 800966a:	2201      	movgt	r2, #1
 800966c:	4413      	add	r3, r2
 800966e:	e7e0      	b.n	8009632 <_printf_float+0x192>
 8009670:	6823      	ldr	r3, [r4, #0]
 8009672:	055a      	lsls	r2, r3, #21
 8009674:	d407      	bmi.n	8009686 <_printf_float+0x1e6>
 8009676:	6923      	ldr	r3, [r4, #16]
 8009678:	4642      	mov	r2, r8
 800967a:	4631      	mov	r1, r6
 800967c:	4628      	mov	r0, r5
 800967e:	47b8      	blx	r7
 8009680:	3001      	adds	r0, #1
 8009682:	d12b      	bne.n	80096dc <_printf_float+0x23c>
 8009684:	e767      	b.n	8009556 <_printf_float+0xb6>
 8009686:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800968a:	f240 80dd 	bls.w	8009848 <_printf_float+0x3a8>
 800968e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009692:	2200      	movs	r2, #0
 8009694:	2300      	movs	r3, #0
 8009696:	f7f7 fa3f 	bl	8000b18 <__aeabi_dcmpeq>
 800969a:	2800      	cmp	r0, #0
 800969c:	d033      	beq.n	8009706 <_printf_float+0x266>
 800969e:	4a37      	ldr	r2, [pc, #220]	@ (800977c <_printf_float+0x2dc>)
 80096a0:	2301      	movs	r3, #1
 80096a2:	4631      	mov	r1, r6
 80096a4:	4628      	mov	r0, r5
 80096a6:	47b8      	blx	r7
 80096a8:	3001      	adds	r0, #1
 80096aa:	f43f af54 	beq.w	8009556 <_printf_float+0xb6>
 80096ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80096b2:	4543      	cmp	r3, r8
 80096b4:	db02      	blt.n	80096bc <_printf_float+0x21c>
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	07d8      	lsls	r0, r3, #31
 80096ba:	d50f      	bpl.n	80096dc <_printf_float+0x23c>
 80096bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096c0:	4631      	mov	r1, r6
 80096c2:	4628      	mov	r0, r5
 80096c4:	47b8      	blx	r7
 80096c6:	3001      	adds	r0, #1
 80096c8:	f43f af45 	beq.w	8009556 <_printf_float+0xb6>
 80096cc:	f04f 0900 	mov.w	r9, #0
 80096d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80096d4:	f104 0a1a 	add.w	sl, r4, #26
 80096d8:	45c8      	cmp	r8, r9
 80096da:	dc09      	bgt.n	80096f0 <_printf_float+0x250>
 80096dc:	6823      	ldr	r3, [r4, #0]
 80096de:	079b      	lsls	r3, r3, #30
 80096e0:	f100 8103 	bmi.w	80098ea <_printf_float+0x44a>
 80096e4:	68e0      	ldr	r0, [r4, #12]
 80096e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096e8:	4298      	cmp	r0, r3
 80096ea:	bfb8      	it	lt
 80096ec:	4618      	movlt	r0, r3
 80096ee:	e734      	b.n	800955a <_printf_float+0xba>
 80096f0:	2301      	movs	r3, #1
 80096f2:	4652      	mov	r2, sl
 80096f4:	4631      	mov	r1, r6
 80096f6:	4628      	mov	r0, r5
 80096f8:	47b8      	blx	r7
 80096fa:	3001      	adds	r0, #1
 80096fc:	f43f af2b 	beq.w	8009556 <_printf_float+0xb6>
 8009700:	f109 0901 	add.w	r9, r9, #1
 8009704:	e7e8      	b.n	80096d8 <_printf_float+0x238>
 8009706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009708:	2b00      	cmp	r3, #0
 800970a:	dc39      	bgt.n	8009780 <_printf_float+0x2e0>
 800970c:	4a1b      	ldr	r2, [pc, #108]	@ (800977c <_printf_float+0x2dc>)
 800970e:	2301      	movs	r3, #1
 8009710:	4631      	mov	r1, r6
 8009712:	4628      	mov	r0, r5
 8009714:	47b8      	blx	r7
 8009716:	3001      	adds	r0, #1
 8009718:	f43f af1d 	beq.w	8009556 <_printf_float+0xb6>
 800971c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009720:	ea59 0303 	orrs.w	r3, r9, r3
 8009724:	d102      	bne.n	800972c <_printf_float+0x28c>
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	07d9      	lsls	r1, r3, #31
 800972a:	d5d7      	bpl.n	80096dc <_printf_float+0x23c>
 800972c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009730:	4631      	mov	r1, r6
 8009732:	4628      	mov	r0, r5
 8009734:	47b8      	blx	r7
 8009736:	3001      	adds	r0, #1
 8009738:	f43f af0d 	beq.w	8009556 <_printf_float+0xb6>
 800973c:	f04f 0a00 	mov.w	sl, #0
 8009740:	f104 0b1a 	add.w	fp, r4, #26
 8009744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009746:	425b      	negs	r3, r3
 8009748:	4553      	cmp	r3, sl
 800974a:	dc01      	bgt.n	8009750 <_printf_float+0x2b0>
 800974c:	464b      	mov	r3, r9
 800974e:	e793      	b.n	8009678 <_printf_float+0x1d8>
 8009750:	2301      	movs	r3, #1
 8009752:	465a      	mov	r2, fp
 8009754:	4631      	mov	r1, r6
 8009756:	4628      	mov	r0, r5
 8009758:	47b8      	blx	r7
 800975a:	3001      	adds	r0, #1
 800975c:	f43f aefb 	beq.w	8009556 <_printf_float+0xb6>
 8009760:	f10a 0a01 	add.w	sl, sl, #1
 8009764:	e7ee      	b.n	8009744 <_printf_float+0x2a4>
 8009766:	bf00      	nop
 8009768:	7fefffff 	.word	0x7fefffff
 800976c:	0800bc9c 	.word	0x0800bc9c
 8009770:	0800bca0 	.word	0x0800bca0
 8009774:	0800bca4 	.word	0x0800bca4
 8009778:	0800bca8 	.word	0x0800bca8
 800977c:	0800bcac 	.word	0x0800bcac
 8009780:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009782:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009786:	4553      	cmp	r3, sl
 8009788:	bfa8      	it	ge
 800978a:	4653      	movge	r3, sl
 800978c:	2b00      	cmp	r3, #0
 800978e:	4699      	mov	r9, r3
 8009790:	dc36      	bgt.n	8009800 <_printf_float+0x360>
 8009792:	f04f 0b00 	mov.w	fp, #0
 8009796:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800979a:	f104 021a 	add.w	r2, r4, #26
 800979e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80097a0:	9306      	str	r3, [sp, #24]
 80097a2:	eba3 0309 	sub.w	r3, r3, r9
 80097a6:	455b      	cmp	r3, fp
 80097a8:	dc31      	bgt.n	800980e <_printf_float+0x36e>
 80097aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097ac:	459a      	cmp	sl, r3
 80097ae:	dc3a      	bgt.n	8009826 <_printf_float+0x386>
 80097b0:	6823      	ldr	r3, [r4, #0]
 80097b2:	07da      	lsls	r2, r3, #31
 80097b4:	d437      	bmi.n	8009826 <_printf_float+0x386>
 80097b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097b8:	ebaa 0903 	sub.w	r9, sl, r3
 80097bc:	9b06      	ldr	r3, [sp, #24]
 80097be:	ebaa 0303 	sub.w	r3, sl, r3
 80097c2:	4599      	cmp	r9, r3
 80097c4:	bfa8      	it	ge
 80097c6:	4699      	movge	r9, r3
 80097c8:	f1b9 0f00 	cmp.w	r9, #0
 80097cc:	dc33      	bgt.n	8009836 <_printf_float+0x396>
 80097ce:	f04f 0800 	mov.w	r8, #0
 80097d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097d6:	f104 0b1a 	add.w	fp, r4, #26
 80097da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097dc:	ebaa 0303 	sub.w	r3, sl, r3
 80097e0:	eba3 0309 	sub.w	r3, r3, r9
 80097e4:	4543      	cmp	r3, r8
 80097e6:	f77f af79 	ble.w	80096dc <_printf_float+0x23c>
 80097ea:	2301      	movs	r3, #1
 80097ec:	465a      	mov	r2, fp
 80097ee:	4631      	mov	r1, r6
 80097f0:	4628      	mov	r0, r5
 80097f2:	47b8      	blx	r7
 80097f4:	3001      	adds	r0, #1
 80097f6:	f43f aeae 	beq.w	8009556 <_printf_float+0xb6>
 80097fa:	f108 0801 	add.w	r8, r8, #1
 80097fe:	e7ec      	b.n	80097da <_printf_float+0x33a>
 8009800:	4642      	mov	r2, r8
 8009802:	4631      	mov	r1, r6
 8009804:	4628      	mov	r0, r5
 8009806:	47b8      	blx	r7
 8009808:	3001      	adds	r0, #1
 800980a:	d1c2      	bne.n	8009792 <_printf_float+0x2f2>
 800980c:	e6a3      	b.n	8009556 <_printf_float+0xb6>
 800980e:	2301      	movs	r3, #1
 8009810:	4631      	mov	r1, r6
 8009812:	4628      	mov	r0, r5
 8009814:	9206      	str	r2, [sp, #24]
 8009816:	47b8      	blx	r7
 8009818:	3001      	adds	r0, #1
 800981a:	f43f ae9c 	beq.w	8009556 <_printf_float+0xb6>
 800981e:	9a06      	ldr	r2, [sp, #24]
 8009820:	f10b 0b01 	add.w	fp, fp, #1
 8009824:	e7bb      	b.n	800979e <_printf_float+0x2fe>
 8009826:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800982a:	4631      	mov	r1, r6
 800982c:	4628      	mov	r0, r5
 800982e:	47b8      	blx	r7
 8009830:	3001      	adds	r0, #1
 8009832:	d1c0      	bne.n	80097b6 <_printf_float+0x316>
 8009834:	e68f      	b.n	8009556 <_printf_float+0xb6>
 8009836:	9a06      	ldr	r2, [sp, #24]
 8009838:	464b      	mov	r3, r9
 800983a:	4442      	add	r2, r8
 800983c:	4631      	mov	r1, r6
 800983e:	4628      	mov	r0, r5
 8009840:	47b8      	blx	r7
 8009842:	3001      	adds	r0, #1
 8009844:	d1c3      	bne.n	80097ce <_printf_float+0x32e>
 8009846:	e686      	b.n	8009556 <_printf_float+0xb6>
 8009848:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800984c:	f1ba 0f01 	cmp.w	sl, #1
 8009850:	dc01      	bgt.n	8009856 <_printf_float+0x3b6>
 8009852:	07db      	lsls	r3, r3, #31
 8009854:	d536      	bpl.n	80098c4 <_printf_float+0x424>
 8009856:	2301      	movs	r3, #1
 8009858:	4642      	mov	r2, r8
 800985a:	4631      	mov	r1, r6
 800985c:	4628      	mov	r0, r5
 800985e:	47b8      	blx	r7
 8009860:	3001      	adds	r0, #1
 8009862:	f43f ae78 	beq.w	8009556 <_printf_float+0xb6>
 8009866:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800986a:	4631      	mov	r1, r6
 800986c:	4628      	mov	r0, r5
 800986e:	47b8      	blx	r7
 8009870:	3001      	adds	r0, #1
 8009872:	f43f ae70 	beq.w	8009556 <_printf_float+0xb6>
 8009876:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800987a:	2200      	movs	r2, #0
 800987c:	2300      	movs	r3, #0
 800987e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009882:	f7f7 f949 	bl	8000b18 <__aeabi_dcmpeq>
 8009886:	b9c0      	cbnz	r0, 80098ba <_printf_float+0x41a>
 8009888:	4653      	mov	r3, sl
 800988a:	f108 0201 	add.w	r2, r8, #1
 800988e:	4631      	mov	r1, r6
 8009890:	4628      	mov	r0, r5
 8009892:	47b8      	blx	r7
 8009894:	3001      	adds	r0, #1
 8009896:	d10c      	bne.n	80098b2 <_printf_float+0x412>
 8009898:	e65d      	b.n	8009556 <_printf_float+0xb6>
 800989a:	2301      	movs	r3, #1
 800989c:	465a      	mov	r2, fp
 800989e:	4631      	mov	r1, r6
 80098a0:	4628      	mov	r0, r5
 80098a2:	47b8      	blx	r7
 80098a4:	3001      	adds	r0, #1
 80098a6:	f43f ae56 	beq.w	8009556 <_printf_float+0xb6>
 80098aa:	f108 0801 	add.w	r8, r8, #1
 80098ae:	45d0      	cmp	r8, sl
 80098b0:	dbf3      	blt.n	800989a <_printf_float+0x3fa>
 80098b2:	464b      	mov	r3, r9
 80098b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80098b8:	e6df      	b.n	800967a <_printf_float+0x1da>
 80098ba:	f04f 0800 	mov.w	r8, #0
 80098be:	f104 0b1a 	add.w	fp, r4, #26
 80098c2:	e7f4      	b.n	80098ae <_printf_float+0x40e>
 80098c4:	2301      	movs	r3, #1
 80098c6:	4642      	mov	r2, r8
 80098c8:	e7e1      	b.n	800988e <_printf_float+0x3ee>
 80098ca:	2301      	movs	r3, #1
 80098cc:	464a      	mov	r2, r9
 80098ce:	4631      	mov	r1, r6
 80098d0:	4628      	mov	r0, r5
 80098d2:	47b8      	blx	r7
 80098d4:	3001      	adds	r0, #1
 80098d6:	f43f ae3e 	beq.w	8009556 <_printf_float+0xb6>
 80098da:	f108 0801 	add.w	r8, r8, #1
 80098de:	68e3      	ldr	r3, [r4, #12]
 80098e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80098e2:	1a5b      	subs	r3, r3, r1
 80098e4:	4543      	cmp	r3, r8
 80098e6:	dcf0      	bgt.n	80098ca <_printf_float+0x42a>
 80098e8:	e6fc      	b.n	80096e4 <_printf_float+0x244>
 80098ea:	f04f 0800 	mov.w	r8, #0
 80098ee:	f104 0919 	add.w	r9, r4, #25
 80098f2:	e7f4      	b.n	80098de <_printf_float+0x43e>

080098f4 <_printf_common>:
 80098f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f8:	4616      	mov	r6, r2
 80098fa:	4698      	mov	r8, r3
 80098fc:	688a      	ldr	r2, [r1, #8]
 80098fe:	690b      	ldr	r3, [r1, #16]
 8009900:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009904:	4293      	cmp	r3, r2
 8009906:	bfb8      	it	lt
 8009908:	4613      	movlt	r3, r2
 800990a:	6033      	str	r3, [r6, #0]
 800990c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009910:	4607      	mov	r7, r0
 8009912:	460c      	mov	r4, r1
 8009914:	b10a      	cbz	r2, 800991a <_printf_common+0x26>
 8009916:	3301      	adds	r3, #1
 8009918:	6033      	str	r3, [r6, #0]
 800991a:	6823      	ldr	r3, [r4, #0]
 800991c:	0699      	lsls	r1, r3, #26
 800991e:	bf42      	ittt	mi
 8009920:	6833      	ldrmi	r3, [r6, #0]
 8009922:	3302      	addmi	r3, #2
 8009924:	6033      	strmi	r3, [r6, #0]
 8009926:	6825      	ldr	r5, [r4, #0]
 8009928:	f015 0506 	ands.w	r5, r5, #6
 800992c:	d106      	bne.n	800993c <_printf_common+0x48>
 800992e:	f104 0a19 	add.w	sl, r4, #25
 8009932:	68e3      	ldr	r3, [r4, #12]
 8009934:	6832      	ldr	r2, [r6, #0]
 8009936:	1a9b      	subs	r3, r3, r2
 8009938:	42ab      	cmp	r3, r5
 800993a:	dc26      	bgt.n	800998a <_printf_common+0x96>
 800993c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009940:	6822      	ldr	r2, [r4, #0]
 8009942:	3b00      	subs	r3, #0
 8009944:	bf18      	it	ne
 8009946:	2301      	movne	r3, #1
 8009948:	0692      	lsls	r2, r2, #26
 800994a:	d42b      	bmi.n	80099a4 <_printf_common+0xb0>
 800994c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009950:	4641      	mov	r1, r8
 8009952:	4638      	mov	r0, r7
 8009954:	47c8      	blx	r9
 8009956:	3001      	adds	r0, #1
 8009958:	d01e      	beq.n	8009998 <_printf_common+0xa4>
 800995a:	6823      	ldr	r3, [r4, #0]
 800995c:	6922      	ldr	r2, [r4, #16]
 800995e:	f003 0306 	and.w	r3, r3, #6
 8009962:	2b04      	cmp	r3, #4
 8009964:	bf02      	ittt	eq
 8009966:	68e5      	ldreq	r5, [r4, #12]
 8009968:	6833      	ldreq	r3, [r6, #0]
 800996a:	1aed      	subeq	r5, r5, r3
 800996c:	68a3      	ldr	r3, [r4, #8]
 800996e:	bf0c      	ite	eq
 8009970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009974:	2500      	movne	r5, #0
 8009976:	4293      	cmp	r3, r2
 8009978:	bfc4      	itt	gt
 800997a:	1a9b      	subgt	r3, r3, r2
 800997c:	18ed      	addgt	r5, r5, r3
 800997e:	2600      	movs	r6, #0
 8009980:	341a      	adds	r4, #26
 8009982:	42b5      	cmp	r5, r6
 8009984:	d11a      	bne.n	80099bc <_printf_common+0xc8>
 8009986:	2000      	movs	r0, #0
 8009988:	e008      	b.n	800999c <_printf_common+0xa8>
 800998a:	2301      	movs	r3, #1
 800998c:	4652      	mov	r2, sl
 800998e:	4641      	mov	r1, r8
 8009990:	4638      	mov	r0, r7
 8009992:	47c8      	blx	r9
 8009994:	3001      	adds	r0, #1
 8009996:	d103      	bne.n	80099a0 <_printf_common+0xac>
 8009998:	f04f 30ff 	mov.w	r0, #4294967295
 800999c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099a0:	3501      	adds	r5, #1
 80099a2:	e7c6      	b.n	8009932 <_printf_common+0x3e>
 80099a4:	18e1      	adds	r1, r4, r3
 80099a6:	1c5a      	adds	r2, r3, #1
 80099a8:	2030      	movs	r0, #48	@ 0x30
 80099aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80099ae:	4422      	add	r2, r4
 80099b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80099b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80099b8:	3302      	adds	r3, #2
 80099ba:	e7c7      	b.n	800994c <_printf_common+0x58>
 80099bc:	2301      	movs	r3, #1
 80099be:	4622      	mov	r2, r4
 80099c0:	4641      	mov	r1, r8
 80099c2:	4638      	mov	r0, r7
 80099c4:	47c8      	blx	r9
 80099c6:	3001      	adds	r0, #1
 80099c8:	d0e6      	beq.n	8009998 <_printf_common+0xa4>
 80099ca:	3601      	adds	r6, #1
 80099cc:	e7d9      	b.n	8009982 <_printf_common+0x8e>
	...

080099d0 <_printf_i>:
 80099d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099d4:	7e0f      	ldrb	r7, [r1, #24]
 80099d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80099d8:	2f78      	cmp	r7, #120	@ 0x78
 80099da:	4691      	mov	r9, r2
 80099dc:	4680      	mov	r8, r0
 80099de:	460c      	mov	r4, r1
 80099e0:	469a      	mov	sl, r3
 80099e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80099e6:	d807      	bhi.n	80099f8 <_printf_i+0x28>
 80099e8:	2f62      	cmp	r7, #98	@ 0x62
 80099ea:	d80a      	bhi.n	8009a02 <_printf_i+0x32>
 80099ec:	2f00      	cmp	r7, #0
 80099ee:	f000 80d2 	beq.w	8009b96 <_printf_i+0x1c6>
 80099f2:	2f58      	cmp	r7, #88	@ 0x58
 80099f4:	f000 80b9 	beq.w	8009b6a <_printf_i+0x19a>
 80099f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009a00:	e03a      	b.n	8009a78 <_printf_i+0xa8>
 8009a02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009a06:	2b15      	cmp	r3, #21
 8009a08:	d8f6      	bhi.n	80099f8 <_printf_i+0x28>
 8009a0a:	a101      	add	r1, pc, #4	@ (adr r1, 8009a10 <_printf_i+0x40>)
 8009a0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a10:	08009a69 	.word	0x08009a69
 8009a14:	08009a7d 	.word	0x08009a7d
 8009a18:	080099f9 	.word	0x080099f9
 8009a1c:	080099f9 	.word	0x080099f9
 8009a20:	080099f9 	.word	0x080099f9
 8009a24:	080099f9 	.word	0x080099f9
 8009a28:	08009a7d 	.word	0x08009a7d
 8009a2c:	080099f9 	.word	0x080099f9
 8009a30:	080099f9 	.word	0x080099f9
 8009a34:	080099f9 	.word	0x080099f9
 8009a38:	080099f9 	.word	0x080099f9
 8009a3c:	08009b7d 	.word	0x08009b7d
 8009a40:	08009aa7 	.word	0x08009aa7
 8009a44:	08009b37 	.word	0x08009b37
 8009a48:	080099f9 	.word	0x080099f9
 8009a4c:	080099f9 	.word	0x080099f9
 8009a50:	08009b9f 	.word	0x08009b9f
 8009a54:	080099f9 	.word	0x080099f9
 8009a58:	08009aa7 	.word	0x08009aa7
 8009a5c:	080099f9 	.word	0x080099f9
 8009a60:	080099f9 	.word	0x080099f9
 8009a64:	08009b3f 	.word	0x08009b3f
 8009a68:	6833      	ldr	r3, [r6, #0]
 8009a6a:	1d1a      	adds	r2, r3, #4
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	6032      	str	r2, [r6, #0]
 8009a70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e09d      	b.n	8009bb8 <_printf_i+0x1e8>
 8009a7c:	6833      	ldr	r3, [r6, #0]
 8009a7e:	6820      	ldr	r0, [r4, #0]
 8009a80:	1d19      	adds	r1, r3, #4
 8009a82:	6031      	str	r1, [r6, #0]
 8009a84:	0606      	lsls	r6, r0, #24
 8009a86:	d501      	bpl.n	8009a8c <_printf_i+0xbc>
 8009a88:	681d      	ldr	r5, [r3, #0]
 8009a8a:	e003      	b.n	8009a94 <_printf_i+0xc4>
 8009a8c:	0645      	lsls	r5, r0, #25
 8009a8e:	d5fb      	bpl.n	8009a88 <_printf_i+0xb8>
 8009a90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a94:	2d00      	cmp	r5, #0
 8009a96:	da03      	bge.n	8009aa0 <_printf_i+0xd0>
 8009a98:	232d      	movs	r3, #45	@ 0x2d
 8009a9a:	426d      	negs	r5, r5
 8009a9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009aa0:	4859      	ldr	r0, [pc, #356]	@ (8009c08 <_printf_i+0x238>)
 8009aa2:	230a      	movs	r3, #10
 8009aa4:	e011      	b.n	8009aca <_printf_i+0xfa>
 8009aa6:	6821      	ldr	r1, [r4, #0]
 8009aa8:	6833      	ldr	r3, [r6, #0]
 8009aaa:	0608      	lsls	r0, r1, #24
 8009aac:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ab0:	d402      	bmi.n	8009ab8 <_printf_i+0xe8>
 8009ab2:	0649      	lsls	r1, r1, #25
 8009ab4:	bf48      	it	mi
 8009ab6:	b2ad      	uxthmi	r5, r5
 8009ab8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009aba:	4853      	ldr	r0, [pc, #332]	@ (8009c08 <_printf_i+0x238>)
 8009abc:	6033      	str	r3, [r6, #0]
 8009abe:	bf14      	ite	ne
 8009ac0:	230a      	movne	r3, #10
 8009ac2:	2308      	moveq	r3, #8
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009aca:	6866      	ldr	r6, [r4, #4]
 8009acc:	60a6      	str	r6, [r4, #8]
 8009ace:	2e00      	cmp	r6, #0
 8009ad0:	bfa2      	ittt	ge
 8009ad2:	6821      	ldrge	r1, [r4, #0]
 8009ad4:	f021 0104 	bicge.w	r1, r1, #4
 8009ad8:	6021      	strge	r1, [r4, #0]
 8009ada:	b90d      	cbnz	r5, 8009ae0 <_printf_i+0x110>
 8009adc:	2e00      	cmp	r6, #0
 8009ade:	d04b      	beq.n	8009b78 <_printf_i+0x1a8>
 8009ae0:	4616      	mov	r6, r2
 8009ae2:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ae6:	fb03 5711 	mls	r7, r3, r1, r5
 8009aea:	5dc7      	ldrb	r7, [r0, r7]
 8009aec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009af0:	462f      	mov	r7, r5
 8009af2:	42bb      	cmp	r3, r7
 8009af4:	460d      	mov	r5, r1
 8009af6:	d9f4      	bls.n	8009ae2 <_printf_i+0x112>
 8009af8:	2b08      	cmp	r3, #8
 8009afa:	d10b      	bne.n	8009b14 <_printf_i+0x144>
 8009afc:	6823      	ldr	r3, [r4, #0]
 8009afe:	07df      	lsls	r7, r3, #31
 8009b00:	d508      	bpl.n	8009b14 <_printf_i+0x144>
 8009b02:	6923      	ldr	r3, [r4, #16]
 8009b04:	6861      	ldr	r1, [r4, #4]
 8009b06:	4299      	cmp	r1, r3
 8009b08:	bfde      	ittt	le
 8009b0a:	2330      	movle	r3, #48	@ 0x30
 8009b0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b14:	1b92      	subs	r2, r2, r6
 8009b16:	6122      	str	r2, [r4, #16]
 8009b18:	f8cd a000 	str.w	sl, [sp]
 8009b1c:	464b      	mov	r3, r9
 8009b1e:	aa03      	add	r2, sp, #12
 8009b20:	4621      	mov	r1, r4
 8009b22:	4640      	mov	r0, r8
 8009b24:	f7ff fee6 	bl	80098f4 <_printf_common>
 8009b28:	3001      	adds	r0, #1
 8009b2a:	d14a      	bne.n	8009bc2 <_printf_i+0x1f2>
 8009b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b30:	b004      	add	sp, #16
 8009b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	f043 0320 	orr.w	r3, r3, #32
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	4833      	ldr	r0, [pc, #204]	@ (8009c0c <_printf_i+0x23c>)
 8009b40:	2778      	movs	r7, #120	@ 0x78
 8009b42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	6831      	ldr	r1, [r6, #0]
 8009b4a:	061f      	lsls	r7, r3, #24
 8009b4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b50:	d402      	bmi.n	8009b58 <_printf_i+0x188>
 8009b52:	065f      	lsls	r7, r3, #25
 8009b54:	bf48      	it	mi
 8009b56:	b2ad      	uxthmi	r5, r5
 8009b58:	6031      	str	r1, [r6, #0]
 8009b5a:	07d9      	lsls	r1, r3, #31
 8009b5c:	bf44      	itt	mi
 8009b5e:	f043 0320 	orrmi.w	r3, r3, #32
 8009b62:	6023      	strmi	r3, [r4, #0]
 8009b64:	b11d      	cbz	r5, 8009b6e <_printf_i+0x19e>
 8009b66:	2310      	movs	r3, #16
 8009b68:	e7ac      	b.n	8009ac4 <_printf_i+0xf4>
 8009b6a:	4827      	ldr	r0, [pc, #156]	@ (8009c08 <_printf_i+0x238>)
 8009b6c:	e7e9      	b.n	8009b42 <_printf_i+0x172>
 8009b6e:	6823      	ldr	r3, [r4, #0]
 8009b70:	f023 0320 	bic.w	r3, r3, #32
 8009b74:	6023      	str	r3, [r4, #0]
 8009b76:	e7f6      	b.n	8009b66 <_printf_i+0x196>
 8009b78:	4616      	mov	r6, r2
 8009b7a:	e7bd      	b.n	8009af8 <_printf_i+0x128>
 8009b7c:	6833      	ldr	r3, [r6, #0]
 8009b7e:	6825      	ldr	r5, [r4, #0]
 8009b80:	6961      	ldr	r1, [r4, #20]
 8009b82:	1d18      	adds	r0, r3, #4
 8009b84:	6030      	str	r0, [r6, #0]
 8009b86:	062e      	lsls	r6, r5, #24
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	d501      	bpl.n	8009b90 <_printf_i+0x1c0>
 8009b8c:	6019      	str	r1, [r3, #0]
 8009b8e:	e002      	b.n	8009b96 <_printf_i+0x1c6>
 8009b90:	0668      	lsls	r0, r5, #25
 8009b92:	d5fb      	bpl.n	8009b8c <_printf_i+0x1bc>
 8009b94:	8019      	strh	r1, [r3, #0]
 8009b96:	2300      	movs	r3, #0
 8009b98:	6123      	str	r3, [r4, #16]
 8009b9a:	4616      	mov	r6, r2
 8009b9c:	e7bc      	b.n	8009b18 <_printf_i+0x148>
 8009b9e:	6833      	ldr	r3, [r6, #0]
 8009ba0:	1d1a      	adds	r2, r3, #4
 8009ba2:	6032      	str	r2, [r6, #0]
 8009ba4:	681e      	ldr	r6, [r3, #0]
 8009ba6:	6862      	ldr	r2, [r4, #4]
 8009ba8:	2100      	movs	r1, #0
 8009baa:	4630      	mov	r0, r6
 8009bac:	f7f6 fb38 	bl	8000220 <memchr>
 8009bb0:	b108      	cbz	r0, 8009bb6 <_printf_i+0x1e6>
 8009bb2:	1b80      	subs	r0, r0, r6
 8009bb4:	6060      	str	r0, [r4, #4]
 8009bb6:	6863      	ldr	r3, [r4, #4]
 8009bb8:	6123      	str	r3, [r4, #16]
 8009bba:	2300      	movs	r3, #0
 8009bbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bc0:	e7aa      	b.n	8009b18 <_printf_i+0x148>
 8009bc2:	6923      	ldr	r3, [r4, #16]
 8009bc4:	4632      	mov	r2, r6
 8009bc6:	4649      	mov	r1, r9
 8009bc8:	4640      	mov	r0, r8
 8009bca:	47d0      	blx	sl
 8009bcc:	3001      	adds	r0, #1
 8009bce:	d0ad      	beq.n	8009b2c <_printf_i+0x15c>
 8009bd0:	6823      	ldr	r3, [r4, #0]
 8009bd2:	079b      	lsls	r3, r3, #30
 8009bd4:	d413      	bmi.n	8009bfe <_printf_i+0x22e>
 8009bd6:	68e0      	ldr	r0, [r4, #12]
 8009bd8:	9b03      	ldr	r3, [sp, #12]
 8009bda:	4298      	cmp	r0, r3
 8009bdc:	bfb8      	it	lt
 8009bde:	4618      	movlt	r0, r3
 8009be0:	e7a6      	b.n	8009b30 <_printf_i+0x160>
 8009be2:	2301      	movs	r3, #1
 8009be4:	4632      	mov	r2, r6
 8009be6:	4649      	mov	r1, r9
 8009be8:	4640      	mov	r0, r8
 8009bea:	47d0      	blx	sl
 8009bec:	3001      	adds	r0, #1
 8009bee:	d09d      	beq.n	8009b2c <_printf_i+0x15c>
 8009bf0:	3501      	adds	r5, #1
 8009bf2:	68e3      	ldr	r3, [r4, #12]
 8009bf4:	9903      	ldr	r1, [sp, #12]
 8009bf6:	1a5b      	subs	r3, r3, r1
 8009bf8:	42ab      	cmp	r3, r5
 8009bfa:	dcf2      	bgt.n	8009be2 <_printf_i+0x212>
 8009bfc:	e7eb      	b.n	8009bd6 <_printf_i+0x206>
 8009bfe:	2500      	movs	r5, #0
 8009c00:	f104 0619 	add.w	r6, r4, #25
 8009c04:	e7f5      	b.n	8009bf2 <_printf_i+0x222>
 8009c06:	bf00      	nop
 8009c08:	0800bcae 	.word	0x0800bcae
 8009c0c:	0800bcbf 	.word	0x0800bcbf

08009c10 <std>:
 8009c10:	2300      	movs	r3, #0
 8009c12:	b510      	push	{r4, lr}
 8009c14:	4604      	mov	r4, r0
 8009c16:	e9c0 3300 	strd	r3, r3, [r0]
 8009c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c1e:	6083      	str	r3, [r0, #8]
 8009c20:	8181      	strh	r1, [r0, #12]
 8009c22:	6643      	str	r3, [r0, #100]	@ 0x64
 8009c24:	81c2      	strh	r2, [r0, #14]
 8009c26:	6183      	str	r3, [r0, #24]
 8009c28:	4619      	mov	r1, r3
 8009c2a:	2208      	movs	r2, #8
 8009c2c:	305c      	adds	r0, #92	@ 0x5c
 8009c2e:	f000 f9e7 	bl	800a000 <memset>
 8009c32:	4b0d      	ldr	r3, [pc, #52]	@ (8009c68 <std+0x58>)
 8009c34:	6263      	str	r3, [r4, #36]	@ 0x24
 8009c36:	4b0d      	ldr	r3, [pc, #52]	@ (8009c6c <std+0x5c>)
 8009c38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c70 <std+0x60>)
 8009c3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c74 <std+0x64>)
 8009c40:	6323      	str	r3, [r4, #48]	@ 0x30
 8009c42:	4b0d      	ldr	r3, [pc, #52]	@ (8009c78 <std+0x68>)
 8009c44:	6224      	str	r4, [r4, #32]
 8009c46:	429c      	cmp	r4, r3
 8009c48:	d006      	beq.n	8009c58 <std+0x48>
 8009c4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009c4e:	4294      	cmp	r4, r2
 8009c50:	d002      	beq.n	8009c58 <std+0x48>
 8009c52:	33d0      	adds	r3, #208	@ 0xd0
 8009c54:	429c      	cmp	r4, r3
 8009c56:	d105      	bne.n	8009c64 <std+0x54>
 8009c58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c60:	f000 ba5a 	b.w	800a118 <__retarget_lock_init_recursive>
 8009c64:	bd10      	pop	{r4, pc}
 8009c66:	bf00      	nop
 8009c68:	08009e51 	.word	0x08009e51
 8009c6c:	08009e73 	.word	0x08009e73
 8009c70:	08009eab 	.word	0x08009eab
 8009c74:	08009ecf 	.word	0x08009ecf
 8009c78:	20001338 	.word	0x20001338

08009c7c <stdio_exit_handler>:
 8009c7c:	4a02      	ldr	r2, [pc, #8]	@ (8009c88 <stdio_exit_handler+0xc>)
 8009c7e:	4903      	ldr	r1, [pc, #12]	@ (8009c8c <stdio_exit_handler+0x10>)
 8009c80:	4803      	ldr	r0, [pc, #12]	@ (8009c90 <stdio_exit_handler+0x14>)
 8009c82:	f000 b869 	b.w	8009d58 <_fwalk_sglue>
 8009c86:	bf00      	nop
 8009c88:	20000010 	.word	0x20000010
 8009c8c:	0800b8fd 	.word	0x0800b8fd
 8009c90:	20000020 	.word	0x20000020

08009c94 <cleanup_stdio>:
 8009c94:	6841      	ldr	r1, [r0, #4]
 8009c96:	4b0c      	ldr	r3, [pc, #48]	@ (8009cc8 <cleanup_stdio+0x34>)
 8009c98:	4299      	cmp	r1, r3
 8009c9a:	b510      	push	{r4, lr}
 8009c9c:	4604      	mov	r4, r0
 8009c9e:	d001      	beq.n	8009ca4 <cleanup_stdio+0x10>
 8009ca0:	f001 fe2c 	bl	800b8fc <_fflush_r>
 8009ca4:	68a1      	ldr	r1, [r4, #8]
 8009ca6:	4b09      	ldr	r3, [pc, #36]	@ (8009ccc <cleanup_stdio+0x38>)
 8009ca8:	4299      	cmp	r1, r3
 8009caa:	d002      	beq.n	8009cb2 <cleanup_stdio+0x1e>
 8009cac:	4620      	mov	r0, r4
 8009cae:	f001 fe25 	bl	800b8fc <_fflush_r>
 8009cb2:	68e1      	ldr	r1, [r4, #12]
 8009cb4:	4b06      	ldr	r3, [pc, #24]	@ (8009cd0 <cleanup_stdio+0x3c>)
 8009cb6:	4299      	cmp	r1, r3
 8009cb8:	d004      	beq.n	8009cc4 <cleanup_stdio+0x30>
 8009cba:	4620      	mov	r0, r4
 8009cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cc0:	f001 be1c 	b.w	800b8fc <_fflush_r>
 8009cc4:	bd10      	pop	{r4, pc}
 8009cc6:	bf00      	nop
 8009cc8:	20001338 	.word	0x20001338
 8009ccc:	200013a0 	.word	0x200013a0
 8009cd0:	20001408 	.word	0x20001408

08009cd4 <global_stdio_init.part.0>:
 8009cd4:	b510      	push	{r4, lr}
 8009cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8009d04 <global_stdio_init.part.0+0x30>)
 8009cd8:	4c0b      	ldr	r4, [pc, #44]	@ (8009d08 <global_stdio_init.part.0+0x34>)
 8009cda:	4a0c      	ldr	r2, [pc, #48]	@ (8009d0c <global_stdio_init.part.0+0x38>)
 8009cdc:	601a      	str	r2, [r3, #0]
 8009cde:	4620      	mov	r0, r4
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	2104      	movs	r1, #4
 8009ce4:	f7ff ff94 	bl	8009c10 <std>
 8009ce8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009cec:	2201      	movs	r2, #1
 8009cee:	2109      	movs	r1, #9
 8009cf0:	f7ff ff8e 	bl	8009c10 <std>
 8009cf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009cf8:	2202      	movs	r2, #2
 8009cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cfe:	2112      	movs	r1, #18
 8009d00:	f7ff bf86 	b.w	8009c10 <std>
 8009d04:	20001470 	.word	0x20001470
 8009d08:	20001338 	.word	0x20001338
 8009d0c:	08009c7d 	.word	0x08009c7d

08009d10 <__sfp_lock_acquire>:
 8009d10:	4801      	ldr	r0, [pc, #4]	@ (8009d18 <__sfp_lock_acquire+0x8>)
 8009d12:	f000 ba02 	b.w	800a11a <__retarget_lock_acquire_recursive>
 8009d16:	bf00      	nop
 8009d18:	20001479 	.word	0x20001479

08009d1c <__sfp_lock_release>:
 8009d1c:	4801      	ldr	r0, [pc, #4]	@ (8009d24 <__sfp_lock_release+0x8>)
 8009d1e:	f000 b9fd 	b.w	800a11c <__retarget_lock_release_recursive>
 8009d22:	bf00      	nop
 8009d24:	20001479 	.word	0x20001479

08009d28 <__sinit>:
 8009d28:	b510      	push	{r4, lr}
 8009d2a:	4604      	mov	r4, r0
 8009d2c:	f7ff fff0 	bl	8009d10 <__sfp_lock_acquire>
 8009d30:	6a23      	ldr	r3, [r4, #32]
 8009d32:	b11b      	cbz	r3, 8009d3c <__sinit+0x14>
 8009d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d38:	f7ff bff0 	b.w	8009d1c <__sfp_lock_release>
 8009d3c:	4b04      	ldr	r3, [pc, #16]	@ (8009d50 <__sinit+0x28>)
 8009d3e:	6223      	str	r3, [r4, #32]
 8009d40:	4b04      	ldr	r3, [pc, #16]	@ (8009d54 <__sinit+0x2c>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d1f5      	bne.n	8009d34 <__sinit+0xc>
 8009d48:	f7ff ffc4 	bl	8009cd4 <global_stdio_init.part.0>
 8009d4c:	e7f2      	b.n	8009d34 <__sinit+0xc>
 8009d4e:	bf00      	nop
 8009d50:	08009c95 	.word	0x08009c95
 8009d54:	20001470 	.word	0x20001470

08009d58 <_fwalk_sglue>:
 8009d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d5c:	4607      	mov	r7, r0
 8009d5e:	4688      	mov	r8, r1
 8009d60:	4614      	mov	r4, r2
 8009d62:	2600      	movs	r6, #0
 8009d64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d68:	f1b9 0901 	subs.w	r9, r9, #1
 8009d6c:	d505      	bpl.n	8009d7a <_fwalk_sglue+0x22>
 8009d6e:	6824      	ldr	r4, [r4, #0]
 8009d70:	2c00      	cmp	r4, #0
 8009d72:	d1f7      	bne.n	8009d64 <_fwalk_sglue+0xc>
 8009d74:	4630      	mov	r0, r6
 8009d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d7a:	89ab      	ldrh	r3, [r5, #12]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d907      	bls.n	8009d90 <_fwalk_sglue+0x38>
 8009d80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d84:	3301      	adds	r3, #1
 8009d86:	d003      	beq.n	8009d90 <_fwalk_sglue+0x38>
 8009d88:	4629      	mov	r1, r5
 8009d8a:	4638      	mov	r0, r7
 8009d8c:	47c0      	blx	r8
 8009d8e:	4306      	orrs	r6, r0
 8009d90:	3568      	adds	r5, #104	@ 0x68
 8009d92:	e7e9      	b.n	8009d68 <_fwalk_sglue+0x10>

08009d94 <_puts_r>:
 8009d94:	6a03      	ldr	r3, [r0, #32]
 8009d96:	b570      	push	{r4, r5, r6, lr}
 8009d98:	6884      	ldr	r4, [r0, #8]
 8009d9a:	4605      	mov	r5, r0
 8009d9c:	460e      	mov	r6, r1
 8009d9e:	b90b      	cbnz	r3, 8009da4 <_puts_r+0x10>
 8009da0:	f7ff ffc2 	bl	8009d28 <__sinit>
 8009da4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009da6:	07db      	lsls	r3, r3, #31
 8009da8:	d405      	bmi.n	8009db6 <_puts_r+0x22>
 8009daa:	89a3      	ldrh	r3, [r4, #12]
 8009dac:	0598      	lsls	r0, r3, #22
 8009dae:	d402      	bmi.n	8009db6 <_puts_r+0x22>
 8009db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009db2:	f000 f9b2 	bl	800a11a <__retarget_lock_acquire_recursive>
 8009db6:	89a3      	ldrh	r3, [r4, #12]
 8009db8:	0719      	lsls	r1, r3, #28
 8009dba:	d502      	bpl.n	8009dc2 <_puts_r+0x2e>
 8009dbc:	6923      	ldr	r3, [r4, #16]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d135      	bne.n	8009e2e <_puts_r+0x9a>
 8009dc2:	4621      	mov	r1, r4
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	f000 f8c5 	bl	8009f54 <__swsetup_r>
 8009dca:	b380      	cbz	r0, 8009e2e <_puts_r+0x9a>
 8009dcc:	f04f 35ff 	mov.w	r5, #4294967295
 8009dd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009dd2:	07da      	lsls	r2, r3, #31
 8009dd4:	d405      	bmi.n	8009de2 <_puts_r+0x4e>
 8009dd6:	89a3      	ldrh	r3, [r4, #12]
 8009dd8:	059b      	lsls	r3, r3, #22
 8009dda:	d402      	bmi.n	8009de2 <_puts_r+0x4e>
 8009ddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009dde:	f000 f99d 	bl	800a11c <__retarget_lock_release_recursive>
 8009de2:	4628      	mov	r0, r5
 8009de4:	bd70      	pop	{r4, r5, r6, pc}
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	da04      	bge.n	8009df4 <_puts_r+0x60>
 8009dea:	69a2      	ldr	r2, [r4, #24]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	dc17      	bgt.n	8009e20 <_puts_r+0x8c>
 8009df0:	290a      	cmp	r1, #10
 8009df2:	d015      	beq.n	8009e20 <_puts_r+0x8c>
 8009df4:	6823      	ldr	r3, [r4, #0]
 8009df6:	1c5a      	adds	r2, r3, #1
 8009df8:	6022      	str	r2, [r4, #0]
 8009dfa:	7019      	strb	r1, [r3, #0]
 8009dfc:	68a3      	ldr	r3, [r4, #8]
 8009dfe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009e02:	3b01      	subs	r3, #1
 8009e04:	60a3      	str	r3, [r4, #8]
 8009e06:	2900      	cmp	r1, #0
 8009e08:	d1ed      	bne.n	8009de6 <_puts_r+0x52>
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	da11      	bge.n	8009e32 <_puts_r+0x9e>
 8009e0e:	4622      	mov	r2, r4
 8009e10:	210a      	movs	r1, #10
 8009e12:	4628      	mov	r0, r5
 8009e14:	f000 f85f 	bl	8009ed6 <__swbuf_r>
 8009e18:	3001      	adds	r0, #1
 8009e1a:	d0d7      	beq.n	8009dcc <_puts_r+0x38>
 8009e1c:	250a      	movs	r5, #10
 8009e1e:	e7d7      	b.n	8009dd0 <_puts_r+0x3c>
 8009e20:	4622      	mov	r2, r4
 8009e22:	4628      	mov	r0, r5
 8009e24:	f000 f857 	bl	8009ed6 <__swbuf_r>
 8009e28:	3001      	adds	r0, #1
 8009e2a:	d1e7      	bne.n	8009dfc <_puts_r+0x68>
 8009e2c:	e7ce      	b.n	8009dcc <_puts_r+0x38>
 8009e2e:	3e01      	subs	r6, #1
 8009e30:	e7e4      	b.n	8009dfc <_puts_r+0x68>
 8009e32:	6823      	ldr	r3, [r4, #0]
 8009e34:	1c5a      	adds	r2, r3, #1
 8009e36:	6022      	str	r2, [r4, #0]
 8009e38:	220a      	movs	r2, #10
 8009e3a:	701a      	strb	r2, [r3, #0]
 8009e3c:	e7ee      	b.n	8009e1c <_puts_r+0x88>
	...

08009e40 <puts>:
 8009e40:	4b02      	ldr	r3, [pc, #8]	@ (8009e4c <puts+0xc>)
 8009e42:	4601      	mov	r1, r0
 8009e44:	6818      	ldr	r0, [r3, #0]
 8009e46:	f7ff bfa5 	b.w	8009d94 <_puts_r>
 8009e4a:	bf00      	nop
 8009e4c:	2000001c 	.word	0x2000001c

08009e50 <__sread>:
 8009e50:	b510      	push	{r4, lr}
 8009e52:	460c      	mov	r4, r1
 8009e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e58:	f000 f900 	bl	800a05c <_read_r>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	bfab      	itete	ge
 8009e60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e62:	89a3      	ldrhlt	r3, [r4, #12]
 8009e64:	181b      	addge	r3, r3, r0
 8009e66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009e6a:	bfac      	ite	ge
 8009e6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e6e:	81a3      	strhlt	r3, [r4, #12]
 8009e70:	bd10      	pop	{r4, pc}

08009e72 <__swrite>:
 8009e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e76:	461f      	mov	r7, r3
 8009e78:	898b      	ldrh	r3, [r1, #12]
 8009e7a:	05db      	lsls	r3, r3, #23
 8009e7c:	4605      	mov	r5, r0
 8009e7e:	460c      	mov	r4, r1
 8009e80:	4616      	mov	r6, r2
 8009e82:	d505      	bpl.n	8009e90 <__swrite+0x1e>
 8009e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e88:	2302      	movs	r3, #2
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f000 f8d4 	bl	800a038 <_lseek_r>
 8009e90:	89a3      	ldrh	r3, [r4, #12]
 8009e92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e9a:	81a3      	strh	r3, [r4, #12]
 8009e9c:	4632      	mov	r2, r6
 8009e9e:	463b      	mov	r3, r7
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea6:	f000 b8fb 	b.w	800a0a0 <_write_r>

08009eaa <__sseek>:
 8009eaa:	b510      	push	{r4, lr}
 8009eac:	460c      	mov	r4, r1
 8009eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eb2:	f000 f8c1 	bl	800a038 <_lseek_r>
 8009eb6:	1c43      	adds	r3, r0, #1
 8009eb8:	89a3      	ldrh	r3, [r4, #12]
 8009eba:	bf15      	itete	ne
 8009ebc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009ebe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009ec2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009ec6:	81a3      	strheq	r3, [r4, #12]
 8009ec8:	bf18      	it	ne
 8009eca:	81a3      	strhne	r3, [r4, #12]
 8009ecc:	bd10      	pop	{r4, pc}

08009ece <__sclose>:
 8009ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed2:	f000 b8a1 	b.w	800a018 <_close_r>

08009ed6 <__swbuf_r>:
 8009ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed8:	460e      	mov	r6, r1
 8009eda:	4614      	mov	r4, r2
 8009edc:	4605      	mov	r5, r0
 8009ede:	b118      	cbz	r0, 8009ee8 <__swbuf_r+0x12>
 8009ee0:	6a03      	ldr	r3, [r0, #32]
 8009ee2:	b90b      	cbnz	r3, 8009ee8 <__swbuf_r+0x12>
 8009ee4:	f7ff ff20 	bl	8009d28 <__sinit>
 8009ee8:	69a3      	ldr	r3, [r4, #24]
 8009eea:	60a3      	str	r3, [r4, #8]
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	071a      	lsls	r2, r3, #28
 8009ef0:	d501      	bpl.n	8009ef6 <__swbuf_r+0x20>
 8009ef2:	6923      	ldr	r3, [r4, #16]
 8009ef4:	b943      	cbnz	r3, 8009f08 <__swbuf_r+0x32>
 8009ef6:	4621      	mov	r1, r4
 8009ef8:	4628      	mov	r0, r5
 8009efa:	f000 f82b 	bl	8009f54 <__swsetup_r>
 8009efe:	b118      	cbz	r0, 8009f08 <__swbuf_r+0x32>
 8009f00:	f04f 37ff 	mov.w	r7, #4294967295
 8009f04:	4638      	mov	r0, r7
 8009f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f08:	6823      	ldr	r3, [r4, #0]
 8009f0a:	6922      	ldr	r2, [r4, #16]
 8009f0c:	1a98      	subs	r0, r3, r2
 8009f0e:	6963      	ldr	r3, [r4, #20]
 8009f10:	b2f6      	uxtb	r6, r6
 8009f12:	4283      	cmp	r3, r0
 8009f14:	4637      	mov	r7, r6
 8009f16:	dc05      	bgt.n	8009f24 <__swbuf_r+0x4e>
 8009f18:	4621      	mov	r1, r4
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	f001 fcee 	bl	800b8fc <_fflush_r>
 8009f20:	2800      	cmp	r0, #0
 8009f22:	d1ed      	bne.n	8009f00 <__swbuf_r+0x2a>
 8009f24:	68a3      	ldr	r3, [r4, #8]
 8009f26:	3b01      	subs	r3, #1
 8009f28:	60a3      	str	r3, [r4, #8]
 8009f2a:	6823      	ldr	r3, [r4, #0]
 8009f2c:	1c5a      	adds	r2, r3, #1
 8009f2e:	6022      	str	r2, [r4, #0]
 8009f30:	701e      	strb	r6, [r3, #0]
 8009f32:	6962      	ldr	r2, [r4, #20]
 8009f34:	1c43      	adds	r3, r0, #1
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d004      	beq.n	8009f44 <__swbuf_r+0x6e>
 8009f3a:	89a3      	ldrh	r3, [r4, #12]
 8009f3c:	07db      	lsls	r3, r3, #31
 8009f3e:	d5e1      	bpl.n	8009f04 <__swbuf_r+0x2e>
 8009f40:	2e0a      	cmp	r6, #10
 8009f42:	d1df      	bne.n	8009f04 <__swbuf_r+0x2e>
 8009f44:	4621      	mov	r1, r4
 8009f46:	4628      	mov	r0, r5
 8009f48:	f001 fcd8 	bl	800b8fc <_fflush_r>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d0d9      	beq.n	8009f04 <__swbuf_r+0x2e>
 8009f50:	e7d6      	b.n	8009f00 <__swbuf_r+0x2a>
	...

08009f54 <__swsetup_r>:
 8009f54:	b538      	push	{r3, r4, r5, lr}
 8009f56:	4b29      	ldr	r3, [pc, #164]	@ (8009ffc <__swsetup_r+0xa8>)
 8009f58:	4605      	mov	r5, r0
 8009f5a:	6818      	ldr	r0, [r3, #0]
 8009f5c:	460c      	mov	r4, r1
 8009f5e:	b118      	cbz	r0, 8009f68 <__swsetup_r+0x14>
 8009f60:	6a03      	ldr	r3, [r0, #32]
 8009f62:	b90b      	cbnz	r3, 8009f68 <__swsetup_r+0x14>
 8009f64:	f7ff fee0 	bl	8009d28 <__sinit>
 8009f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f6c:	0719      	lsls	r1, r3, #28
 8009f6e:	d422      	bmi.n	8009fb6 <__swsetup_r+0x62>
 8009f70:	06da      	lsls	r2, r3, #27
 8009f72:	d407      	bmi.n	8009f84 <__swsetup_r+0x30>
 8009f74:	2209      	movs	r2, #9
 8009f76:	602a      	str	r2, [r5, #0]
 8009f78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f7c:	81a3      	strh	r3, [r4, #12]
 8009f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f82:	e033      	b.n	8009fec <__swsetup_r+0x98>
 8009f84:	0758      	lsls	r0, r3, #29
 8009f86:	d512      	bpl.n	8009fae <__swsetup_r+0x5a>
 8009f88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f8a:	b141      	cbz	r1, 8009f9e <__swsetup_r+0x4a>
 8009f8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f90:	4299      	cmp	r1, r3
 8009f92:	d002      	beq.n	8009f9a <__swsetup_r+0x46>
 8009f94:	4628      	mov	r0, r5
 8009f96:	f000 ff1f 	bl	800add8 <_free_r>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f9e:	89a3      	ldrh	r3, [r4, #12]
 8009fa0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009fa4:	81a3      	strh	r3, [r4, #12]
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	6063      	str	r3, [r4, #4]
 8009faa:	6923      	ldr	r3, [r4, #16]
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	89a3      	ldrh	r3, [r4, #12]
 8009fb0:	f043 0308 	orr.w	r3, r3, #8
 8009fb4:	81a3      	strh	r3, [r4, #12]
 8009fb6:	6923      	ldr	r3, [r4, #16]
 8009fb8:	b94b      	cbnz	r3, 8009fce <__swsetup_r+0x7a>
 8009fba:	89a3      	ldrh	r3, [r4, #12]
 8009fbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009fc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fc4:	d003      	beq.n	8009fce <__swsetup_r+0x7a>
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	4628      	mov	r0, r5
 8009fca:	f001 fce5 	bl	800b998 <__smakebuf_r>
 8009fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fd2:	f013 0201 	ands.w	r2, r3, #1
 8009fd6:	d00a      	beq.n	8009fee <__swsetup_r+0x9a>
 8009fd8:	2200      	movs	r2, #0
 8009fda:	60a2      	str	r2, [r4, #8]
 8009fdc:	6962      	ldr	r2, [r4, #20]
 8009fde:	4252      	negs	r2, r2
 8009fe0:	61a2      	str	r2, [r4, #24]
 8009fe2:	6922      	ldr	r2, [r4, #16]
 8009fe4:	b942      	cbnz	r2, 8009ff8 <__swsetup_r+0xa4>
 8009fe6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009fea:	d1c5      	bne.n	8009f78 <__swsetup_r+0x24>
 8009fec:	bd38      	pop	{r3, r4, r5, pc}
 8009fee:	0799      	lsls	r1, r3, #30
 8009ff0:	bf58      	it	pl
 8009ff2:	6962      	ldrpl	r2, [r4, #20]
 8009ff4:	60a2      	str	r2, [r4, #8]
 8009ff6:	e7f4      	b.n	8009fe2 <__swsetup_r+0x8e>
 8009ff8:	2000      	movs	r0, #0
 8009ffa:	e7f7      	b.n	8009fec <__swsetup_r+0x98>
 8009ffc:	2000001c 	.word	0x2000001c

0800a000 <memset>:
 800a000:	4402      	add	r2, r0
 800a002:	4603      	mov	r3, r0
 800a004:	4293      	cmp	r3, r2
 800a006:	d100      	bne.n	800a00a <memset+0xa>
 800a008:	4770      	bx	lr
 800a00a:	f803 1b01 	strb.w	r1, [r3], #1
 800a00e:	e7f9      	b.n	800a004 <memset+0x4>

0800a010 <_localeconv_r>:
 800a010:	4800      	ldr	r0, [pc, #0]	@ (800a014 <_localeconv_r+0x4>)
 800a012:	4770      	bx	lr
 800a014:	2000015c 	.word	0x2000015c

0800a018 <_close_r>:
 800a018:	b538      	push	{r3, r4, r5, lr}
 800a01a:	4d06      	ldr	r5, [pc, #24]	@ (800a034 <_close_r+0x1c>)
 800a01c:	2300      	movs	r3, #0
 800a01e:	4604      	mov	r4, r0
 800a020:	4608      	mov	r0, r1
 800a022:	602b      	str	r3, [r5, #0]
 800a024:	f7f7 fe5e 	bl	8001ce4 <_close>
 800a028:	1c43      	adds	r3, r0, #1
 800a02a:	d102      	bne.n	800a032 <_close_r+0x1a>
 800a02c:	682b      	ldr	r3, [r5, #0]
 800a02e:	b103      	cbz	r3, 800a032 <_close_r+0x1a>
 800a030:	6023      	str	r3, [r4, #0]
 800a032:	bd38      	pop	{r3, r4, r5, pc}
 800a034:	20001474 	.word	0x20001474

0800a038 <_lseek_r>:
 800a038:	b538      	push	{r3, r4, r5, lr}
 800a03a:	4d07      	ldr	r5, [pc, #28]	@ (800a058 <_lseek_r+0x20>)
 800a03c:	4604      	mov	r4, r0
 800a03e:	4608      	mov	r0, r1
 800a040:	4611      	mov	r1, r2
 800a042:	2200      	movs	r2, #0
 800a044:	602a      	str	r2, [r5, #0]
 800a046:	461a      	mov	r2, r3
 800a048:	f7f7 fe73 	bl	8001d32 <_lseek>
 800a04c:	1c43      	adds	r3, r0, #1
 800a04e:	d102      	bne.n	800a056 <_lseek_r+0x1e>
 800a050:	682b      	ldr	r3, [r5, #0]
 800a052:	b103      	cbz	r3, 800a056 <_lseek_r+0x1e>
 800a054:	6023      	str	r3, [r4, #0]
 800a056:	bd38      	pop	{r3, r4, r5, pc}
 800a058:	20001474 	.word	0x20001474

0800a05c <_read_r>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	4d07      	ldr	r5, [pc, #28]	@ (800a07c <_read_r+0x20>)
 800a060:	4604      	mov	r4, r0
 800a062:	4608      	mov	r0, r1
 800a064:	4611      	mov	r1, r2
 800a066:	2200      	movs	r2, #0
 800a068:	602a      	str	r2, [r5, #0]
 800a06a:	461a      	mov	r2, r3
 800a06c:	f7f7 fe01 	bl	8001c72 <_read>
 800a070:	1c43      	adds	r3, r0, #1
 800a072:	d102      	bne.n	800a07a <_read_r+0x1e>
 800a074:	682b      	ldr	r3, [r5, #0]
 800a076:	b103      	cbz	r3, 800a07a <_read_r+0x1e>
 800a078:	6023      	str	r3, [r4, #0]
 800a07a:	bd38      	pop	{r3, r4, r5, pc}
 800a07c:	20001474 	.word	0x20001474

0800a080 <_sbrk_r>:
 800a080:	b538      	push	{r3, r4, r5, lr}
 800a082:	4d06      	ldr	r5, [pc, #24]	@ (800a09c <_sbrk_r+0x1c>)
 800a084:	2300      	movs	r3, #0
 800a086:	4604      	mov	r4, r0
 800a088:	4608      	mov	r0, r1
 800a08a:	602b      	str	r3, [r5, #0]
 800a08c:	f7f7 fe5e 	bl	8001d4c <_sbrk>
 800a090:	1c43      	adds	r3, r0, #1
 800a092:	d102      	bne.n	800a09a <_sbrk_r+0x1a>
 800a094:	682b      	ldr	r3, [r5, #0]
 800a096:	b103      	cbz	r3, 800a09a <_sbrk_r+0x1a>
 800a098:	6023      	str	r3, [r4, #0]
 800a09a:	bd38      	pop	{r3, r4, r5, pc}
 800a09c:	20001474 	.word	0x20001474

0800a0a0 <_write_r>:
 800a0a0:	b538      	push	{r3, r4, r5, lr}
 800a0a2:	4d07      	ldr	r5, [pc, #28]	@ (800a0c0 <_write_r+0x20>)
 800a0a4:	4604      	mov	r4, r0
 800a0a6:	4608      	mov	r0, r1
 800a0a8:	4611      	mov	r1, r2
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	602a      	str	r2, [r5, #0]
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	f7f7 fdfc 	bl	8001cac <_write>
 800a0b4:	1c43      	adds	r3, r0, #1
 800a0b6:	d102      	bne.n	800a0be <_write_r+0x1e>
 800a0b8:	682b      	ldr	r3, [r5, #0]
 800a0ba:	b103      	cbz	r3, 800a0be <_write_r+0x1e>
 800a0bc:	6023      	str	r3, [r4, #0]
 800a0be:	bd38      	pop	{r3, r4, r5, pc}
 800a0c0:	20001474 	.word	0x20001474

0800a0c4 <__errno>:
 800a0c4:	4b01      	ldr	r3, [pc, #4]	@ (800a0cc <__errno+0x8>)
 800a0c6:	6818      	ldr	r0, [r3, #0]
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	2000001c 	.word	0x2000001c

0800a0d0 <__libc_init_array>:
 800a0d0:	b570      	push	{r4, r5, r6, lr}
 800a0d2:	4d0d      	ldr	r5, [pc, #52]	@ (800a108 <__libc_init_array+0x38>)
 800a0d4:	4c0d      	ldr	r4, [pc, #52]	@ (800a10c <__libc_init_array+0x3c>)
 800a0d6:	1b64      	subs	r4, r4, r5
 800a0d8:	10a4      	asrs	r4, r4, #2
 800a0da:	2600      	movs	r6, #0
 800a0dc:	42a6      	cmp	r6, r4
 800a0de:	d109      	bne.n	800a0f4 <__libc_init_array+0x24>
 800a0e0:	4d0b      	ldr	r5, [pc, #44]	@ (800a110 <__libc_init_array+0x40>)
 800a0e2:	4c0c      	ldr	r4, [pc, #48]	@ (800a114 <__libc_init_array+0x44>)
 800a0e4:	f001 fd66 	bl	800bbb4 <_init>
 800a0e8:	1b64      	subs	r4, r4, r5
 800a0ea:	10a4      	asrs	r4, r4, #2
 800a0ec:	2600      	movs	r6, #0
 800a0ee:	42a6      	cmp	r6, r4
 800a0f0:	d105      	bne.n	800a0fe <__libc_init_array+0x2e>
 800a0f2:	bd70      	pop	{r4, r5, r6, pc}
 800a0f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0f8:	4798      	blx	r3
 800a0fa:	3601      	adds	r6, #1
 800a0fc:	e7ee      	b.n	800a0dc <__libc_init_array+0xc>
 800a0fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a102:	4798      	blx	r3
 800a104:	3601      	adds	r6, #1
 800a106:	e7f2      	b.n	800a0ee <__libc_init_array+0x1e>
 800a108:	0800c018 	.word	0x0800c018
 800a10c:	0800c018 	.word	0x0800c018
 800a110:	0800c018 	.word	0x0800c018
 800a114:	0800c01c 	.word	0x0800c01c

0800a118 <__retarget_lock_init_recursive>:
 800a118:	4770      	bx	lr

0800a11a <__retarget_lock_acquire_recursive>:
 800a11a:	4770      	bx	lr

0800a11c <__retarget_lock_release_recursive>:
 800a11c:	4770      	bx	lr

0800a11e <memcpy>:
 800a11e:	440a      	add	r2, r1
 800a120:	4291      	cmp	r1, r2
 800a122:	f100 33ff 	add.w	r3, r0, #4294967295
 800a126:	d100      	bne.n	800a12a <memcpy+0xc>
 800a128:	4770      	bx	lr
 800a12a:	b510      	push	{r4, lr}
 800a12c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a130:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a134:	4291      	cmp	r1, r2
 800a136:	d1f9      	bne.n	800a12c <memcpy+0xe>
 800a138:	bd10      	pop	{r4, pc}

0800a13a <quorem>:
 800a13a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a13e:	6903      	ldr	r3, [r0, #16]
 800a140:	690c      	ldr	r4, [r1, #16]
 800a142:	42a3      	cmp	r3, r4
 800a144:	4607      	mov	r7, r0
 800a146:	db7e      	blt.n	800a246 <quorem+0x10c>
 800a148:	3c01      	subs	r4, #1
 800a14a:	f101 0814 	add.w	r8, r1, #20
 800a14e:	00a3      	lsls	r3, r4, #2
 800a150:	f100 0514 	add.w	r5, r0, #20
 800a154:	9300      	str	r3, [sp, #0]
 800a156:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a15a:	9301      	str	r3, [sp, #4]
 800a15c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a160:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a164:	3301      	adds	r3, #1
 800a166:	429a      	cmp	r2, r3
 800a168:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a16c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a170:	d32e      	bcc.n	800a1d0 <quorem+0x96>
 800a172:	f04f 0a00 	mov.w	sl, #0
 800a176:	46c4      	mov	ip, r8
 800a178:	46ae      	mov	lr, r5
 800a17a:	46d3      	mov	fp, sl
 800a17c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a180:	b298      	uxth	r0, r3
 800a182:	fb06 a000 	mla	r0, r6, r0, sl
 800a186:	0c02      	lsrs	r2, r0, #16
 800a188:	0c1b      	lsrs	r3, r3, #16
 800a18a:	fb06 2303 	mla	r3, r6, r3, r2
 800a18e:	f8de 2000 	ldr.w	r2, [lr]
 800a192:	b280      	uxth	r0, r0
 800a194:	b292      	uxth	r2, r2
 800a196:	1a12      	subs	r2, r2, r0
 800a198:	445a      	add	r2, fp
 800a19a:	f8de 0000 	ldr.w	r0, [lr]
 800a19e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a1a8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a1ac:	b292      	uxth	r2, r2
 800a1ae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a1b2:	45e1      	cmp	r9, ip
 800a1b4:	f84e 2b04 	str.w	r2, [lr], #4
 800a1b8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a1bc:	d2de      	bcs.n	800a17c <quorem+0x42>
 800a1be:	9b00      	ldr	r3, [sp, #0]
 800a1c0:	58eb      	ldr	r3, [r5, r3]
 800a1c2:	b92b      	cbnz	r3, 800a1d0 <quorem+0x96>
 800a1c4:	9b01      	ldr	r3, [sp, #4]
 800a1c6:	3b04      	subs	r3, #4
 800a1c8:	429d      	cmp	r5, r3
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	d32f      	bcc.n	800a22e <quorem+0xf4>
 800a1ce:	613c      	str	r4, [r7, #16]
 800a1d0:	4638      	mov	r0, r7
 800a1d2:	f001 f8c5 	bl	800b360 <__mcmp>
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	db25      	blt.n	800a226 <quorem+0xec>
 800a1da:	4629      	mov	r1, r5
 800a1dc:	2000      	movs	r0, #0
 800a1de:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1e2:	f8d1 c000 	ldr.w	ip, [r1]
 800a1e6:	fa1f fe82 	uxth.w	lr, r2
 800a1ea:	fa1f f38c 	uxth.w	r3, ip
 800a1ee:	eba3 030e 	sub.w	r3, r3, lr
 800a1f2:	4403      	add	r3, r0
 800a1f4:	0c12      	lsrs	r2, r2, #16
 800a1f6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a1fa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a204:	45c1      	cmp	r9, r8
 800a206:	f841 3b04 	str.w	r3, [r1], #4
 800a20a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a20e:	d2e6      	bcs.n	800a1de <quorem+0xa4>
 800a210:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a214:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a218:	b922      	cbnz	r2, 800a224 <quorem+0xea>
 800a21a:	3b04      	subs	r3, #4
 800a21c:	429d      	cmp	r5, r3
 800a21e:	461a      	mov	r2, r3
 800a220:	d30b      	bcc.n	800a23a <quorem+0x100>
 800a222:	613c      	str	r4, [r7, #16]
 800a224:	3601      	adds	r6, #1
 800a226:	4630      	mov	r0, r6
 800a228:	b003      	add	sp, #12
 800a22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a22e:	6812      	ldr	r2, [r2, #0]
 800a230:	3b04      	subs	r3, #4
 800a232:	2a00      	cmp	r2, #0
 800a234:	d1cb      	bne.n	800a1ce <quorem+0x94>
 800a236:	3c01      	subs	r4, #1
 800a238:	e7c6      	b.n	800a1c8 <quorem+0x8e>
 800a23a:	6812      	ldr	r2, [r2, #0]
 800a23c:	3b04      	subs	r3, #4
 800a23e:	2a00      	cmp	r2, #0
 800a240:	d1ef      	bne.n	800a222 <quorem+0xe8>
 800a242:	3c01      	subs	r4, #1
 800a244:	e7ea      	b.n	800a21c <quorem+0xe2>
 800a246:	2000      	movs	r0, #0
 800a248:	e7ee      	b.n	800a228 <quorem+0xee>
 800a24a:	0000      	movs	r0, r0
 800a24c:	0000      	movs	r0, r0
	...

0800a250 <_dtoa_r>:
 800a250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a254:	69c7      	ldr	r7, [r0, #28]
 800a256:	b099      	sub	sp, #100	@ 0x64
 800a258:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a25c:	ec55 4b10 	vmov	r4, r5, d0
 800a260:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a262:	9109      	str	r1, [sp, #36]	@ 0x24
 800a264:	4683      	mov	fp, r0
 800a266:	920e      	str	r2, [sp, #56]	@ 0x38
 800a268:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a26a:	b97f      	cbnz	r7, 800a28c <_dtoa_r+0x3c>
 800a26c:	2010      	movs	r0, #16
 800a26e:	f7fe ffc1 	bl	80091f4 <malloc>
 800a272:	4602      	mov	r2, r0
 800a274:	f8cb 001c 	str.w	r0, [fp, #28]
 800a278:	b920      	cbnz	r0, 800a284 <_dtoa_r+0x34>
 800a27a:	4ba7      	ldr	r3, [pc, #668]	@ (800a518 <_dtoa_r+0x2c8>)
 800a27c:	21ef      	movs	r1, #239	@ 0xef
 800a27e:	48a7      	ldr	r0, [pc, #668]	@ (800a51c <_dtoa_r+0x2cc>)
 800a280:	f001 fbe8 	bl	800ba54 <__assert_func>
 800a284:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a288:	6007      	str	r7, [r0, #0]
 800a28a:	60c7      	str	r7, [r0, #12]
 800a28c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a290:	6819      	ldr	r1, [r3, #0]
 800a292:	b159      	cbz	r1, 800a2ac <_dtoa_r+0x5c>
 800a294:	685a      	ldr	r2, [r3, #4]
 800a296:	604a      	str	r2, [r1, #4]
 800a298:	2301      	movs	r3, #1
 800a29a:	4093      	lsls	r3, r2
 800a29c:	608b      	str	r3, [r1, #8]
 800a29e:	4658      	mov	r0, fp
 800a2a0:	f000 fe24 	bl	800aeec <_Bfree>
 800a2a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	601a      	str	r2, [r3, #0]
 800a2ac:	1e2b      	subs	r3, r5, #0
 800a2ae:	bfb9      	ittee	lt
 800a2b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a2b4:	9303      	strlt	r3, [sp, #12]
 800a2b6:	2300      	movge	r3, #0
 800a2b8:	6033      	strge	r3, [r6, #0]
 800a2ba:	9f03      	ldr	r7, [sp, #12]
 800a2bc:	4b98      	ldr	r3, [pc, #608]	@ (800a520 <_dtoa_r+0x2d0>)
 800a2be:	bfbc      	itt	lt
 800a2c0:	2201      	movlt	r2, #1
 800a2c2:	6032      	strlt	r2, [r6, #0]
 800a2c4:	43bb      	bics	r3, r7
 800a2c6:	d112      	bne.n	800a2ee <_dtoa_r+0x9e>
 800a2c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a2ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a2ce:	6013      	str	r3, [r2, #0]
 800a2d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a2d4:	4323      	orrs	r3, r4
 800a2d6:	f000 854d 	beq.w	800ad74 <_dtoa_r+0xb24>
 800a2da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a2dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a534 <_dtoa_r+0x2e4>
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f000 854f 	beq.w	800ad84 <_dtoa_r+0xb34>
 800a2e6:	f10a 0303 	add.w	r3, sl, #3
 800a2ea:	f000 bd49 	b.w	800ad80 <_dtoa_r+0xb30>
 800a2ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	ec51 0b17 	vmov	r0, r1, d7
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a2fe:	f7f6 fc0b 	bl	8000b18 <__aeabi_dcmpeq>
 800a302:	4680      	mov	r8, r0
 800a304:	b158      	cbz	r0, 800a31e <_dtoa_r+0xce>
 800a306:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a308:	2301      	movs	r3, #1
 800a30a:	6013      	str	r3, [r2, #0]
 800a30c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a30e:	b113      	cbz	r3, 800a316 <_dtoa_r+0xc6>
 800a310:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a312:	4b84      	ldr	r3, [pc, #528]	@ (800a524 <_dtoa_r+0x2d4>)
 800a314:	6013      	str	r3, [r2, #0]
 800a316:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a538 <_dtoa_r+0x2e8>
 800a31a:	f000 bd33 	b.w	800ad84 <_dtoa_r+0xb34>
 800a31e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a322:	aa16      	add	r2, sp, #88	@ 0x58
 800a324:	a917      	add	r1, sp, #92	@ 0x5c
 800a326:	4658      	mov	r0, fp
 800a328:	f001 f8ca 	bl	800b4c0 <__d2b>
 800a32c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a330:	4681      	mov	r9, r0
 800a332:	2e00      	cmp	r6, #0
 800a334:	d077      	beq.n	800a426 <_dtoa_r+0x1d6>
 800a336:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a338:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a33c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a340:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a344:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a348:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a34c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a350:	4619      	mov	r1, r3
 800a352:	2200      	movs	r2, #0
 800a354:	4b74      	ldr	r3, [pc, #464]	@ (800a528 <_dtoa_r+0x2d8>)
 800a356:	f7f5 ffbf 	bl	80002d8 <__aeabi_dsub>
 800a35a:	a369      	add	r3, pc, #420	@ (adr r3, 800a500 <_dtoa_r+0x2b0>)
 800a35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a360:	f7f6 f972 	bl	8000648 <__aeabi_dmul>
 800a364:	a368      	add	r3, pc, #416	@ (adr r3, 800a508 <_dtoa_r+0x2b8>)
 800a366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36a:	f7f5 ffb7 	bl	80002dc <__adddf3>
 800a36e:	4604      	mov	r4, r0
 800a370:	4630      	mov	r0, r6
 800a372:	460d      	mov	r5, r1
 800a374:	f7f6 f8fe 	bl	8000574 <__aeabi_i2d>
 800a378:	a365      	add	r3, pc, #404	@ (adr r3, 800a510 <_dtoa_r+0x2c0>)
 800a37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37e:	f7f6 f963 	bl	8000648 <__aeabi_dmul>
 800a382:	4602      	mov	r2, r0
 800a384:	460b      	mov	r3, r1
 800a386:	4620      	mov	r0, r4
 800a388:	4629      	mov	r1, r5
 800a38a:	f7f5 ffa7 	bl	80002dc <__adddf3>
 800a38e:	4604      	mov	r4, r0
 800a390:	460d      	mov	r5, r1
 800a392:	f7f6 fc09 	bl	8000ba8 <__aeabi_d2iz>
 800a396:	2200      	movs	r2, #0
 800a398:	4607      	mov	r7, r0
 800a39a:	2300      	movs	r3, #0
 800a39c:	4620      	mov	r0, r4
 800a39e:	4629      	mov	r1, r5
 800a3a0:	f7f6 fbc4 	bl	8000b2c <__aeabi_dcmplt>
 800a3a4:	b140      	cbz	r0, 800a3b8 <_dtoa_r+0x168>
 800a3a6:	4638      	mov	r0, r7
 800a3a8:	f7f6 f8e4 	bl	8000574 <__aeabi_i2d>
 800a3ac:	4622      	mov	r2, r4
 800a3ae:	462b      	mov	r3, r5
 800a3b0:	f7f6 fbb2 	bl	8000b18 <__aeabi_dcmpeq>
 800a3b4:	b900      	cbnz	r0, 800a3b8 <_dtoa_r+0x168>
 800a3b6:	3f01      	subs	r7, #1
 800a3b8:	2f16      	cmp	r7, #22
 800a3ba:	d851      	bhi.n	800a460 <_dtoa_r+0x210>
 800a3bc:	4b5b      	ldr	r3, [pc, #364]	@ (800a52c <_dtoa_r+0x2dc>)
 800a3be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3ca:	f7f6 fbaf 	bl	8000b2c <__aeabi_dcmplt>
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d048      	beq.n	800a464 <_dtoa_r+0x214>
 800a3d2:	3f01      	subs	r7, #1
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	9312      	str	r3, [sp, #72]	@ 0x48
 800a3d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a3da:	1b9b      	subs	r3, r3, r6
 800a3dc:	1e5a      	subs	r2, r3, #1
 800a3de:	bf44      	itt	mi
 800a3e0:	f1c3 0801 	rsbmi	r8, r3, #1
 800a3e4:	2300      	movmi	r3, #0
 800a3e6:	9208      	str	r2, [sp, #32]
 800a3e8:	bf54      	ite	pl
 800a3ea:	f04f 0800 	movpl.w	r8, #0
 800a3ee:	9308      	strmi	r3, [sp, #32]
 800a3f0:	2f00      	cmp	r7, #0
 800a3f2:	db39      	blt.n	800a468 <_dtoa_r+0x218>
 800a3f4:	9b08      	ldr	r3, [sp, #32]
 800a3f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a3f8:	443b      	add	r3, r7
 800a3fa:	9308      	str	r3, [sp, #32]
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800a400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a402:	2b09      	cmp	r3, #9
 800a404:	d864      	bhi.n	800a4d0 <_dtoa_r+0x280>
 800a406:	2b05      	cmp	r3, #5
 800a408:	bfc4      	itt	gt
 800a40a:	3b04      	subgt	r3, #4
 800a40c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a410:	f1a3 0302 	sub.w	r3, r3, #2
 800a414:	bfcc      	ite	gt
 800a416:	2400      	movgt	r4, #0
 800a418:	2401      	movle	r4, #1
 800a41a:	2b03      	cmp	r3, #3
 800a41c:	d863      	bhi.n	800a4e6 <_dtoa_r+0x296>
 800a41e:	e8df f003 	tbb	[pc, r3]
 800a422:	372a      	.short	0x372a
 800a424:	5535      	.short	0x5535
 800a426:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a42a:	441e      	add	r6, r3
 800a42c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a430:	2b20      	cmp	r3, #32
 800a432:	bfc1      	itttt	gt
 800a434:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a438:	409f      	lslgt	r7, r3
 800a43a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a43e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a442:	bfd6      	itet	le
 800a444:	f1c3 0320 	rsble	r3, r3, #32
 800a448:	ea47 0003 	orrgt.w	r0, r7, r3
 800a44c:	fa04 f003 	lslle.w	r0, r4, r3
 800a450:	f7f6 f880 	bl	8000554 <__aeabi_ui2d>
 800a454:	2201      	movs	r2, #1
 800a456:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a45a:	3e01      	subs	r6, #1
 800a45c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a45e:	e777      	b.n	800a350 <_dtoa_r+0x100>
 800a460:	2301      	movs	r3, #1
 800a462:	e7b8      	b.n	800a3d6 <_dtoa_r+0x186>
 800a464:	9012      	str	r0, [sp, #72]	@ 0x48
 800a466:	e7b7      	b.n	800a3d8 <_dtoa_r+0x188>
 800a468:	427b      	negs	r3, r7
 800a46a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a46c:	2300      	movs	r3, #0
 800a46e:	eba8 0807 	sub.w	r8, r8, r7
 800a472:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a474:	e7c4      	b.n	800a400 <_dtoa_r+0x1b0>
 800a476:	2300      	movs	r3, #0
 800a478:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a47a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	dc35      	bgt.n	800a4ec <_dtoa_r+0x29c>
 800a480:	2301      	movs	r3, #1
 800a482:	9300      	str	r3, [sp, #0]
 800a484:	9307      	str	r3, [sp, #28]
 800a486:	461a      	mov	r2, r3
 800a488:	920e      	str	r2, [sp, #56]	@ 0x38
 800a48a:	e00b      	b.n	800a4a4 <_dtoa_r+0x254>
 800a48c:	2301      	movs	r3, #1
 800a48e:	e7f3      	b.n	800a478 <_dtoa_r+0x228>
 800a490:	2300      	movs	r3, #0
 800a492:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a494:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a496:	18fb      	adds	r3, r7, r3
 800a498:	9300      	str	r3, [sp, #0]
 800a49a:	3301      	adds	r3, #1
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	9307      	str	r3, [sp, #28]
 800a4a0:	bfb8      	it	lt
 800a4a2:	2301      	movlt	r3, #1
 800a4a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	2204      	movs	r2, #4
 800a4ac:	f102 0514 	add.w	r5, r2, #20
 800a4b0:	429d      	cmp	r5, r3
 800a4b2:	d91f      	bls.n	800a4f4 <_dtoa_r+0x2a4>
 800a4b4:	6041      	str	r1, [r0, #4]
 800a4b6:	4658      	mov	r0, fp
 800a4b8:	f000 fcd8 	bl	800ae6c <_Balloc>
 800a4bc:	4682      	mov	sl, r0
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d13c      	bne.n	800a53c <_dtoa_r+0x2ec>
 800a4c2:	4b1b      	ldr	r3, [pc, #108]	@ (800a530 <_dtoa_r+0x2e0>)
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	f240 11af 	movw	r1, #431	@ 0x1af
 800a4ca:	e6d8      	b.n	800a27e <_dtoa_r+0x2e>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e7e0      	b.n	800a492 <_dtoa_r+0x242>
 800a4d0:	2401      	movs	r4, #1
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	9307      	str	r3, [sp, #28]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	2312      	movs	r3, #18
 800a4e4:	e7d0      	b.n	800a488 <_dtoa_r+0x238>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4ea:	e7f5      	b.n	800a4d8 <_dtoa_r+0x288>
 800a4ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4ee:	9300      	str	r3, [sp, #0]
 800a4f0:	9307      	str	r3, [sp, #28]
 800a4f2:	e7d7      	b.n	800a4a4 <_dtoa_r+0x254>
 800a4f4:	3101      	adds	r1, #1
 800a4f6:	0052      	lsls	r2, r2, #1
 800a4f8:	e7d8      	b.n	800a4ac <_dtoa_r+0x25c>
 800a4fa:	bf00      	nop
 800a4fc:	f3af 8000 	nop.w
 800a500:	636f4361 	.word	0x636f4361
 800a504:	3fd287a7 	.word	0x3fd287a7
 800a508:	8b60c8b3 	.word	0x8b60c8b3
 800a50c:	3fc68a28 	.word	0x3fc68a28
 800a510:	509f79fb 	.word	0x509f79fb
 800a514:	3fd34413 	.word	0x3fd34413
 800a518:	0800bcdd 	.word	0x0800bcdd
 800a51c:	0800bcf4 	.word	0x0800bcf4
 800a520:	7ff00000 	.word	0x7ff00000
 800a524:	0800bcad 	.word	0x0800bcad
 800a528:	3ff80000 	.word	0x3ff80000
 800a52c:	0800bdf0 	.word	0x0800bdf0
 800a530:	0800bd4c 	.word	0x0800bd4c
 800a534:	0800bcd9 	.word	0x0800bcd9
 800a538:	0800bcac 	.word	0x0800bcac
 800a53c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a540:	6018      	str	r0, [r3, #0]
 800a542:	9b07      	ldr	r3, [sp, #28]
 800a544:	2b0e      	cmp	r3, #14
 800a546:	f200 80a4 	bhi.w	800a692 <_dtoa_r+0x442>
 800a54a:	2c00      	cmp	r4, #0
 800a54c:	f000 80a1 	beq.w	800a692 <_dtoa_r+0x442>
 800a550:	2f00      	cmp	r7, #0
 800a552:	dd33      	ble.n	800a5bc <_dtoa_r+0x36c>
 800a554:	4bad      	ldr	r3, [pc, #692]	@ (800a80c <_dtoa_r+0x5bc>)
 800a556:	f007 020f 	and.w	r2, r7, #15
 800a55a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a55e:	ed93 7b00 	vldr	d7, [r3]
 800a562:	05f8      	lsls	r0, r7, #23
 800a564:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a568:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a56c:	d516      	bpl.n	800a59c <_dtoa_r+0x34c>
 800a56e:	4ba8      	ldr	r3, [pc, #672]	@ (800a810 <_dtoa_r+0x5c0>)
 800a570:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a574:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a578:	f7f6 f990 	bl	800089c <__aeabi_ddiv>
 800a57c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a580:	f004 040f 	and.w	r4, r4, #15
 800a584:	2603      	movs	r6, #3
 800a586:	4da2      	ldr	r5, [pc, #648]	@ (800a810 <_dtoa_r+0x5c0>)
 800a588:	b954      	cbnz	r4, 800a5a0 <_dtoa_r+0x350>
 800a58a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a58e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a592:	f7f6 f983 	bl	800089c <__aeabi_ddiv>
 800a596:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a59a:	e028      	b.n	800a5ee <_dtoa_r+0x39e>
 800a59c:	2602      	movs	r6, #2
 800a59e:	e7f2      	b.n	800a586 <_dtoa_r+0x336>
 800a5a0:	07e1      	lsls	r1, r4, #31
 800a5a2:	d508      	bpl.n	800a5b6 <_dtoa_r+0x366>
 800a5a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5ac:	f7f6 f84c 	bl	8000648 <__aeabi_dmul>
 800a5b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5b4:	3601      	adds	r6, #1
 800a5b6:	1064      	asrs	r4, r4, #1
 800a5b8:	3508      	adds	r5, #8
 800a5ba:	e7e5      	b.n	800a588 <_dtoa_r+0x338>
 800a5bc:	f000 80d2 	beq.w	800a764 <_dtoa_r+0x514>
 800a5c0:	427c      	negs	r4, r7
 800a5c2:	4b92      	ldr	r3, [pc, #584]	@ (800a80c <_dtoa_r+0x5bc>)
 800a5c4:	4d92      	ldr	r5, [pc, #584]	@ (800a810 <_dtoa_r+0x5c0>)
 800a5c6:	f004 020f 	and.w	r2, r4, #15
 800a5ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5d6:	f7f6 f837 	bl	8000648 <__aeabi_dmul>
 800a5da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5de:	1124      	asrs	r4, r4, #4
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	2602      	movs	r6, #2
 800a5e4:	2c00      	cmp	r4, #0
 800a5e6:	f040 80b2 	bne.w	800a74e <_dtoa_r+0x4fe>
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1d3      	bne.n	800a596 <_dtoa_r+0x346>
 800a5ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a5f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f000 80b7 	beq.w	800a768 <_dtoa_r+0x518>
 800a5fa:	4b86      	ldr	r3, [pc, #536]	@ (800a814 <_dtoa_r+0x5c4>)
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	4620      	mov	r0, r4
 800a600:	4629      	mov	r1, r5
 800a602:	f7f6 fa93 	bl	8000b2c <__aeabi_dcmplt>
 800a606:	2800      	cmp	r0, #0
 800a608:	f000 80ae 	beq.w	800a768 <_dtoa_r+0x518>
 800a60c:	9b07      	ldr	r3, [sp, #28]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	f000 80aa 	beq.w	800a768 <_dtoa_r+0x518>
 800a614:	9b00      	ldr	r3, [sp, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	dd37      	ble.n	800a68a <_dtoa_r+0x43a>
 800a61a:	1e7b      	subs	r3, r7, #1
 800a61c:	9304      	str	r3, [sp, #16]
 800a61e:	4620      	mov	r0, r4
 800a620:	4b7d      	ldr	r3, [pc, #500]	@ (800a818 <_dtoa_r+0x5c8>)
 800a622:	2200      	movs	r2, #0
 800a624:	4629      	mov	r1, r5
 800a626:	f7f6 f80f 	bl	8000648 <__aeabi_dmul>
 800a62a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a62e:	9c00      	ldr	r4, [sp, #0]
 800a630:	3601      	adds	r6, #1
 800a632:	4630      	mov	r0, r6
 800a634:	f7f5 ff9e 	bl	8000574 <__aeabi_i2d>
 800a638:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a63c:	f7f6 f804 	bl	8000648 <__aeabi_dmul>
 800a640:	4b76      	ldr	r3, [pc, #472]	@ (800a81c <_dtoa_r+0x5cc>)
 800a642:	2200      	movs	r2, #0
 800a644:	f7f5 fe4a 	bl	80002dc <__adddf3>
 800a648:	4605      	mov	r5, r0
 800a64a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a64e:	2c00      	cmp	r4, #0
 800a650:	f040 808d 	bne.w	800a76e <_dtoa_r+0x51e>
 800a654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a658:	4b71      	ldr	r3, [pc, #452]	@ (800a820 <_dtoa_r+0x5d0>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	f7f5 fe3c 	bl	80002d8 <__aeabi_dsub>
 800a660:	4602      	mov	r2, r0
 800a662:	460b      	mov	r3, r1
 800a664:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a668:	462a      	mov	r2, r5
 800a66a:	4633      	mov	r3, r6
 800a66c:	f7f6 fa7c 	bl	8000b68 <__aeabi_dcmpgt>
 800a670:	2800      	cmp	r0, #0
 800a672:	f040 828b 	bne.w	800ab8c <_dtoa_r+0x93c>
 800a676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a67a:	462a      	mov	r2, r5
 800a67c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a680:	f7f6 fa54 	bl	8000b2c <__aeabi_dcmplt>
 800a684:	2800      	cmp	r0, #0
 800a686:	f040 8128 	bne.w	800a8da <_dtoa_r+0x68a>
 800a68a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a68e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a692:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a694:	2b00      	cmp	r3, #0
 800a696:	f2c0 815a 	blt.w	800a94e <_dtoa_r+0x6fe>
 800a69a:	2f0e      	cmp	r7, #14
 800a69c:	f300 8157 	bgt.w	800a94e <_dtoa_r+0x6fe>
 800a6a0:	4b5a      	ldr	r3, [pc, #360]	@ (800a80c <_dtoa_r+0x5bc>)
 800a6a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a6a6:	ed93 7b00 	vldr	d7, [r3]
 800a6aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	ed8d 7b00 	vstr	d7, [sp]
 800a6b2:	da03      	bge.n	800a6bc <_dtoa_r+0x46c>
 800a6b4:	9b07      	ldr	r3, [sp, #28]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f340 8101 	ble.w	800a8be <_dtoa_r+0x66e>
 800a6bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a6c0:	4656      	mov	r6, sl
 800a6c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	f7f6 f8e7 	bl	800089c <__aeabi_ddiv>
 800a6ce:	f7f6 fa6b 	bl	8000ba8 <__aeabi_d2iz>
 800a6d2:	4680      	mov	r8, r0
 800a6d4:	f7f5 ff4e 	bl	8000574 <__aeabi_i2d>
 800a6d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6dc:	f7f5 ffb4 	bl	8000648 <__aeabi_dmul>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	4629      	mov	r1, r5
 800a6e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a6ec:	f7f5 fdf4 	bl	80002d8 <__aeabi_dsub>
 800a6f0:	f806 4b01 	strb.w	r4, [r6], #1
 800a6f4:	9d07      	ldr	r5, [sp, #28]
 800a6f6:	eba6 040a 	sub.w	r4, r6, sl
 800a6fa:	42a5      	cmp	r5, r4
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	460b      	mov	r3, r1
 800a700:	f040 8117 	bne.w	800a932 <_dtoa_r+0x6e2>
 800a704:	f7f5 fdea 	bl	80002dc <__adddf3>
 800a708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a70c:	4604      	mov	r4, r0
 800a70e:	460d      	mov	r5, r1
 800a710:	f7f6 fa2a 	bl	8000b68 <__aeabi_dcmpgt>
 800a714:	2800      	cmp	r0, #0
 800a716:	f040 80f9 	bne.w	800a90c <_dtoa_r+0x6bc>
 800a71a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a71e:	4620      	mov	r0, r4
 800a720:	4629      	mov	r1, r5
 800a722:	f7f6 f9f9 	bl	8000b18 <__aeabi_dcmpeq>
 800a726:	b118      	cbz	r0, 800a730 <_dtoa_r+0x4e0>
 800a728:	f018 0f01 	tst.w	r8, #1
 800a72c:	f040 80ee 	bne.w	800a90c <_dtoa_r+0x6bc>
 800a730:	4649      	mov	r1, r9
 800a732:	4658      	mov	r0, fp
 800a734:	f000 fbda 	bl	800aeec <_Bfree>
 800a738:	2300      	movs	r3, #0
 800a73a:	7033      	strb	r3, [r6, #0]
 800a73c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a73e:	3701      	adds	r7, #1
 800a740:	601f      	str	r7, [r3, #0]
 800a742:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a744:	2b00      	cmp	r3, #0
 800a746:	f000 831d 	beq.w	800ad84 <_dtoa_r+0xb34>
 800a74a:	601e      	str	r6, [r3, #0]
 800a74c:	e31a      	b.n	800ad84 <_dtoa_r+0xb34>
 800a74e:	07e2      	lsls	r2, r4, #31
 800a750:	d505      	bpl.n	800a75e <_dtoa_r+0x50e>
 800a752:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a756:	f7f5 ff77 	bl	8000648 <__aeabi_dmul>
 800a75a:	3601      	adds	r6, #1
 800a75c:	2301      	movs	r3, #1
 800a75e:	1064      	asrs	r4, r4, #1
 800a760:	3508      	adds	r5, #8
 800a762:	e73f      	b.n	800a5e4 <_dtoa_r+0x394>
 800a764:	2602      	movs	r6, #2
 800a766:	e742      	b.n	800a5ee <_dtoa_r+0x39e>
 800a768:	9c07      	ldr	r4, [sp, #28]
 800a76a:	9704      	str	r7, [sp, #16]
 800a76c:	e761      	b.n	800a632 <_dtoa_r+0x3e2>
 800a76e:	4b27      	ldr	r3, [pc, #156]	@ (800a80c <_dtoa_r+0x5bc>)
 800a770:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a772:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a776:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a77a:	4454      	add	r4, sl
 800a77c:	2900      	cmp	r1, #0
 800a77e:	d053      	beq.n	800a828 <_dtoa_r+0x5d8>
 800a780:	4928      	ldr	r1, [pc, #160]	@ (800a824 <_dtoa_r+0x5d4>)
 800a782:	2000      	movs	r0, #0
 800a784:	f7f6 f88a 	bl	800089c <__aeabi_ddiv>
 800a788:	4633      	mov	r3, r6
 800a78a:	462a      	mov	r2, r5
 800a78c:	f7f5 fda4 	bl	80002d8 <__aeabi_dsub>
 800a790:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a794:	4656      	mov	r6, sl
 800a796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a79a:	f7f6 fa05 	bl	8000ba8 <__aeabi_d2iz>
 800a79e:	4605      	mov	r5, r0
 800a7a0:	f7f5 fee8 	bl	8000574 <__aeabi_i2d>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7ac:	f7f5 fd94 	bl	80002d8 <__aeabi_dsub>
 800a7b0:	3530      	adds	r5, #48	@ 0x30
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7ba:	f806 5b01 	strb.w	r5, [r6], #1
 800a7be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a7c2:	f7f6 f9b3 	bl	8000b2c <__aeabi_dcmplt>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d171      	bne.n	800a8ae <_dtoa_r+0x65e>
 800a7ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7ce:	4911      	ldr	r1, [pc, #68]	@ (800a814 <_dtoa_r+0x5c4>)
 800a7d0:	2000      	movs	r0, #0
 800a7d2:	f7f5 fd81 	bl	80002d8 <__aeabi_dsub>
 800a7d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a7da:	f7f6 f9a7 	bl	8000b2c <__aeabi_dcmplt>
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	f040 8095 	bne.w	800a90e <_dtoa_r+0x6be>
 800a7e4:	42a6      	cmp	r6, r4
 800a7e6:	f43f af50 	beq.w	800a68a <_dtoa_r+0x43a>
 800a7ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a7ee:	4b0a      	ldr	r3, [pc, #40]	@ (800a818 <_dtoa_r+0x5c8>)
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f7f5 ff29 	bl	8000648 <__aeabi_dmul>
 800a7f6:	4b08      	ldr	r3, [pc, #32]	@ (800a818 <_dtoa_r+0x5c8>)
 800a7f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a802:	f7f5 ff21 	bl	8000648 <__aeabi_dmul>
 800a806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a80a:	e7c4      	b.n	800a796 <_dtoa_r+0x546>
 800a80c:	0800bdf0 	.word	0x0800bdf0
 800a810:	0800bdc8 	.word	0x0800bdc8
 800a814:	3ff00000 	.word	0x3ff00000
 800a818:	40240000 	.word	0x40240000
 800a81c:	401c0000 	.word	0x401c0000
 800a820:	40140000 	.word	0x40140000
 800a824:	3fe00000 	.word	0x3fe00000
 800a828:	4631      	mov	r1, r6
 800a82a:	4628      	mov	r0, r5
 800a82c:	f7f5 ff0c 	bl	8000648 <__aeabi_dmul>
 800a830:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a834:	9415      	str	r4, [sp, #84]	@ 0x54
 800a836:	4656      	mov	r6, sl
 800a838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a83c:	f7f6 f9b4 	bl	8000ba8 <__aeabi_d2iz>
 800a840:	4605      	mov	r5, r0
 800a842:	f7f5 fe97 	bl	8000574 <__aeabi_i2d>
 800a846:	4602      	mov	r2, r0
 800a848:	460b      	mov	r3, r1
 800a84a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a84e:	f7f5 fd43 	bl	80002d8 <__aeabi_dsub>
 800a852:	3530      	adds	r5, #48	@ 0x30
 800a854:	f806 5b01 	strb.w	r5, [r6], #1
 800a858:	4602      	mov	r2, r0
 800a85a:	460b      	mov	r3, r1
 800a85c:	42a6      	cmp	r6, r4
 800a85e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a862:	f04f 0200 	mov.w	r2, #0
 800a866:	d124      	bne.n	800a8b2 <_dtoa_r+0x662>
 800a868:	4bac      	ldr	r3, [pc, #688]	@ (800ab1c <_dtoa_r+0x8cc>)
 800a86a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a86e:	f7f5 fd35 	bl	80002dc <__adddf3>
 800a872:	4602      	mov	r2, r0
 800a874:	460b      	mov	r3, r1
 800a876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a87a:	f7f6 f975 	bl	8000b68 <__aeabi_dcmpgt>
 800a87e:	2800      	cmp	r0, #0
 800a880:	d145      	bne.n	800a90e <_dtoa_r+0x6be>
 800a882:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a886:	49a5      	ldr	r1, [pc, #660]	@ (800ab1c <_dtoa_r+0x8cc>)
 800a888:	2000      	movs	r0, #0
 800a88a:	f7f5 fd25 	bl	80002d8 <__aeabi_dsub>
 800a88e:	4602      	mov	r2, r0
 800a890:	460b      	mov	r3, r1
 800a892:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a896:	f7f6 f949 	bl	8000b2c <__aeabi_dcmplt>
 800a89a:	2800      	cmp	r0, #0
 800a89c:	f43f aef5 	beq.w	800a68a <_dtoa_r+0x43a>
 800a8a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a8a2:	1e73      	subs	r3, r6, #1
 800a8a4:	9315      	str	r3, [sp, #84]	@ 0x54
 800a8a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a8aa:	2b30      	cmp	r3, #48	@ 0x30
 800a8ac:	d0f8      	beq.n	800a8a0 <_dtoa_r+0x650>
 800a8ae:	9f04      	ldr	r7, [sp, #16]
 800a8b0:	e73e      	b.n	800a730 <_dtoa_r+0x4e0>
 800a8b2:	4b9b      	ldr	r3, [pc, #620]	@ (800ab20 <_dtoa_r+0x8d0>)
 800a8b4:	f7f5 fec8 	bl	8000648 <__aeabi_dmul>
 800a8b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8bc:	e7bc      	b.n	800a838 <_dtoa_r+0x5e8>
 800a8be:	d10c      	bne.n	800a8da <_dtoa_r+0x68a>
 800a8c0:	4b98      	ldr	r3, [pc, #608]	@ (800ab24 <_dtoa_r+0x8d4>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8c8:	f7f5 febe 	bl	8000648 <__aeabi_dmul>
 800a8cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8d0:	f7f6 f940 	bl	8000b54 <__aeabi_dcmpge>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	f000 8157 	beq.w	800ab88 <_dtoa_r+0x938>
 800a8da:	2400      	movs	r4, #0
 800a8dc:	4625      	mov	r5, r4
 800a8de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8e0:	43db      	mvns	r3, r3
 800a8e2:	9304      	str	r3, [sp, #16]
 800a8e4:	4656      	mov	r6, sl
 800a8e6:	2700      	movs	r7, #0
 800a8e8:	4621      	mov	r1, r4
 800a8ea:	4658      	mov	r0, fp
 800a8ec:	f000 fafe 	bl	800aeec <_Bfree>
 800a8f0:	2d00      	cmp	r5, #0
 800a8f2:	d0dc      	beq.n	800a8ae <_dtoa_r+0x65e>
 800a8f4:	b12f      	cbz	r7, 800a902 <_dtoa_r+0x6b2>
 800a8f6:	42af      	cmp	r7, r5
 800a8f8:	d003      	beq.n	800a902 <_dtoa_r+0x6b2>
 800a8fa:	4639      	mov	r1, r7
 800a8fc:	4658      	mov	r0, fp
 800a8fe:	f000 faf5 	bl	800aeec <_Bfree>
 800a902:	4629      	mov	r1, r5
 800a904:	4658      	mov	r0, fp
 800a906:	f000 faf1 	bl	800aeec <_Bfree>
 800a90a:	e7d0      	b.n	800a8ae <_dtoa_r+0x65e>
 800a90c:	9704      	str	r7, [sp, #16]
 800a90e:	4633      	mov	r3, r6
 800a910:	461e      	mov	r6, r3
 800a912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a916:	2a39      	cmp	r2, #57	@ 0x39
 800a918:	d107      	bne.n	800a92a <_dtoa_r+0x6da>
 800a91a:	459a      	cmp	sl, r3
 800a91c:	d1f8      	bne.n	800a910 <_dtoa_r+0x6c0>
 800a91e:	9a04      	ldr	r2, [sp, #16]
 800a920:	3201      	adds	r2, #1
 800a922:	9204      	str	r2, [sp, #16]
 800a924:	2230      	movs	r2, #48	@ 0x30
 800a926:	f88a 2000 	strb.w	r2, [sl]
 800a92a:	781a      	ldrb	r2, [r3, #0]
 800a92c:	3201      	adds	r2, #1
 800a92e:	701a      	strb	r2, [r3, #0]
 800a930:	e7bd      	b.n	800a8ae <_dtoa_r+0x65e>
 800a932:	4b7b      	ldr	r3, [pc, #492]	@ (800ab20 <_dtoa_r+0x8d0>)
 800a934:	2200      	movs	r2, #0
 800a936:	f7f5 fe87 	bl	8000648 <__aeabi_dmul>
 800a93a:	2200      	movs	r2, #0
 800a93c:	2300      	movs	r3, #0
 800a93e:	4604      	mov	r4, r0
 800a940:	460d      	mov	r5, r1
 800a942:	f7f6 f8e9 	bl	8000b18 <__aeabi_dcmpeq>
 800a946:	2800      	cmp	r0, #0
 800a948:	f43f aebb 	beq.w	800a6c2 <_dtoa_r+0x472>
 800a94c:	e6f0      	b.n	800a730 <_dtoa_r+0x4e0>
 800a94e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a950:	2a00      	cmp	r2, #0
 800a952:	f000 80db 	beq.w	800ab0c <_dtoa_r+0x8bc>
 800a956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a958:	2a01      	cmp	r2, #1
 800a95a:	f300 80bf 	bgt.w	800aadc <_dtoa_r+0x88c>
 800a95e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a960:	2a00      	cmp	r2, #0
 800a962:	f000 80b7 	beq.w	800aad4 <_dtoa_r+0x884>
 800a966:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a96a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a96c:	4646      	mov	r6, r8
 800a96e:	9a08      	ldr	r2, [sp, #32]
 800a970:	2101      	movs	r1, #1
 800a972:	441a      	add	r2, r3
 800a974:	4658      	mov	r0, fp
 800a976:	4498      	add	r8, r3
 800a978:	9208      	str	r2, [sp, #32]
 800a97a:	f000 fb6b 	bl	800b054 <__i2b>
 800a97e:	4605      	mov	r5, r0
 800a980:	b15e      	cbz	r6, 800a99a <_dtoa_r+0x74a>
 800a982:	9b08      	ldr	r3, [sp, #32]
 800a984:	2b00      	cmp	r3, #0
 800a986:	dd08      	ble.n	800a99a <_dtoa_r+0x74a>
 800a988:	42b3      	cmp	r3, r6
 800a98a:	9a08      	ldr	r2, [sp, #32]
 800a98c:	bfa8      	it	ge
 800a98e:	4633      	movge	r3, r6
 800a990:	eba8 0803 	sub.w	r8, r8, r3
 800a994:	1af6      	subs	r6, r6, r3
 800a996:	1ad3      	subs	r3, r2, r3
 800a998:	9308      	str	r3, [sp, #32]
 800a99a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a99c:	b1f3      	cbz	r3, 800a9dc <_dtoa_r+0x78c>
 800a99e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f000 80b7 	beq.w	800ab14 <_dtoa_r+0x8c4>
 800a9a6:	b18c      	cbz	r4, 800a9cc <_dtoa_r+0x77c>
 800a9a8:	4629      	mov	r1, r5
 800a9aa:	4622      	mov	r2, r4
 800a9ac:	4658      	mov	r0, fp
 800a9ae:	f000 fc11 	bl	800b1d4 <__pow5mult>
 800a9b2:	464a      	mov	r2, r9
 800a9b4:	4601      	mov	r1, r0
 800a9b6:	4605      	mov	r5, r0
 800a9b8:	4658      	mov	r0, fp
 800a9ba:	f000 fb61 	bl	800b080 <__multiply>
 800a9be:	4649      	mov	r1, r9
 800a9c0:	9004      	str	r0, [sp, #16]
 800a9c2:	4658      	mov	r0, fp
 800a9c4:	f000 fa92 	bl	800aeec <_Bfree>
 800a9c8:	9b04      	ldr	r3, [sp, #16]
 800a9ca:	4699      	mov	r9, r3
 800a9cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9ce:	1b1a      	subs	r2, r3, r4
 800a9d0:	d004      	beq.n	800a9dc <_dtoa_r+0x78c>
 800a9d2:	4649      	mov	r1, r9
 800a9d4:	4658      	mov	r0, fp
 800a9d6:	f000 fbfd 	bl	800b1d4 <__pow5mult>
 800a9da:	4681      	mov	r9, r0
 800a9dc:	2101      	movs	r1, #1
 800a9de:	4658      	mov	r0, fp
 800a9e0:	f000 fb38 	bl	800b054 <__i2b>
 800a9e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f000 81cf 	beq.w	800ad8c <_dtoa_r+0xb3c>
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	4601      	mov	r1, r0
 800a9f2:	4658      	mov	r0, fp
 800a9f4:	f000 fbee 	bl	800b1d4 <__pow5mult>
 800a9f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	f300 8095 	bgt.w	800ab2c <_dtoa_r+0x8dc>
 800aa02:	9b02      	ldr	r3, [sp, #8]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f040 8087 	bne.w	800ab18 <_dtoa_r+0x8c8>
 800aa0a:	9b03      	ldr	r3, [sp, #12]
 800aa0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	f040 8089 	bne.w	800ab28 <_dtoa_r+0x8d8>
 800aa16:	9b03      	ldr	r3, [sp, #12]
 800aa18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aa1c:	0d1b      	lsrs	r3, r3, #20
 800aa1e:	051b      	lsls	r3, r3, #20
 800aa20:	b12b      	cbz	r3, 800aa2e <_dtoa_r+0x7de>
 800aa22:	9b08      	ldr	r3, [sp, #32]
 800aa24:	3301      	adds	r3, #1
 800aa26:	9308      	str	r3, [sp, #32]
 800aa28:	f108 0801 	add.w	r8, r8, #1
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f000 81b0 	beq.w	800ad98 <_dtoa_r+0xb48>
 800aa38:	6923      	ldr	r3, [r4, #16]
 800aa3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa3e:	6918      	ldr	r0, [r3, #16]
 800aa40:	f000 fabc 	bl	800afbc <__hi0bits>
 800aa44:	f1c0 0020 	rsb	r0, r0, #32
 800aa48:	9b08      	ldr	r3, [sp, #32]
 800aa4a:	4418      	add	r0, r3
 800aa4c:	f010 001f 	ands.w	r0, r0, #31
 800aa50:	d077      	beq.n	800ab42 <_dtoa_r+0x8f2>
 800aa52:	f1c0 0320 	rsb	r3, r0, #32
 800aa56:	2b04      	cmp	r3, #4
 800aa58:	dd6b      	ble.n	800ab32 <_dtoa_r+0x8e2>
 800aa5a:	9b08      	ldr	r3, [sp, #32]
 800aa5c:	f1c0 001c 	rsb	r0, r0, #28
 800aa60:	4403      	add	r3, r0
 800aa62:	4480      	add	r8, r0
 800aa64:	4406      	add	r6, r0
 800aa66:	9308      	str	r3, [sp, #32]
 800aa68:	f1b8 0f00 	cmp.w	r8, #0
 800aa6c:	dd05      	ble.n	800aa7a <_dtoa_r+0x82a>
 800aa6e:	4649      	mov	r1, r9
 800aa70:	4642      	mov	r2, r8
 800aa72:	4658      	mov	r0, fp
 800aa74:	f000 fc08 	bl	800b288 <__lshift>
 800aa78:	4681      	mov	r9, r0
 800aa7a:	9b08      	ldr	r3, [sp, #32]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	dd05      	ble.n	800aa8c <_dtoa_r+0x83c>
 800aa80:	4621      	mov	r1, r4
 800aa82:	461a      	mov	r2, r3
 800aa84:	4658      	mov	r0, fp
 800aa86:	f000 fbff 	bl	800b288 <__lshift>
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d059      	beq.n	800ab46 <_dtoa_r+0x8f6>
 800aa92:	4621      	mov	r1, r4
 800aa94:	4648      	mov	r0, r9
 800aa96:	f000 fc63 	bl	800b360 <__mcmp>
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	da53      	bge.n	800ab46 <_dtoa_r+0x8f6>
 800aa9e:	1e7b      	subs	r3, r7, #1
 800aaa0:	9304      	str	r3, [sp, #16]
 800aaa2:	4649      	mov	r1, r9
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	220a      	movs	r2, #10
 800aaa8:	4658      	mov	r0, fp
 800aaaa:	f000 fa41 	bl	800af30 <__multadd>
 800aaae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aab0:	4681      	mov	r9, r0
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f000 8172 	beq.w	800ad9c <_dtoa_r+0xb4c>
 800aab8:	2300      	movs	r3, #0
 800aaba:	4629      	mov	r1, r5
 800aabc:	220a      	movs	r2, #10
 800aabe:	4658      	mov	r0, fp
 800aac0:	f000 fa36 	bl	800af30 <__multadd>
 800aac4:	9b00      	ldr	r3, [sp, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	4605      	mov	r5, r0
 800aaca:	dc67      	bgt.n	800ab9c <_dtoa_r+0x94c>
 800aacc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aace:	2b02      	cmp	r3, #2
 800aad0:	dc41      	bgt.n	800ab56 <_dtoa_r+0x906>
 800aad2:	e063      	b.n	800ab9c <_dtoa_r+0x94c>
 800aad4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aad6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800aada:	e746      	b.n	800a96a <_dtoa_r+0x71a>
 800aadc:	9b07      	ldr	r3, [sp, #28]
 800aade:	1e5c      	subs	r4, r3, #1
 800aae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aae2:	42a3      	cmp	r3, r4
 800aae4:	bfbf      	itttt	lt
 800aae6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800aae8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800aaea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800aaec:	1ae3      	sublt	r3, r4, r3
 800aaee:	bfb4      	ite	lt
 800aaf0:	18d2      	addlt	r2, r2, r3
 800aaf2:	1b1c      	subge	r4, r3, r4
 800aaf4:	9b07      	ldr	r3, [sp, #28]
 800aaf6:	bfbc      	itt	lt
 800aaf8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800aafa:	2400      	movlt	r4, #0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	bfb5      	itete	lt
 800ab00:	eba8 0603 	sublt.w	r6, r8, r3
 800ab04:	9b07      	ldrge	r3, [sp, #28]
 800ab06:	2300      	movlt	r3, #0
 800ab08:	4646      	movge	r6, r8
 800ab0a:	e730      	b.n	800a96e <_dtoa_r+0x71e>
 800ab0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ab0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ab10:	4646      	mov	r6, r8
 800ab12:	e735      	b.n	800a980 <_dtoa_r+0x730>
 800ab14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab16:	e75c      	b.n	800a9d2 <_dtoa_r+0x782>
 800ab18:	2300      	movs	r3, #0
 800ab1a:	e788      	b.n	800aa2e <_dtoa_r+0x7de>
 800ab1c:	3fe00000 	.word	0x3fe00000
 800ab20:	40240000 	.word	0x40240000
 800ab24:	40140000 	.word	0x40140000
 800ab28:	9b02      	ldr	r3, [sp, #8]
 800ab2a:	e780      	b.n	800aa2e <_dtoa_r+0x7de>
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab30:	e782      	b.n	800aa38 <_dtoa_r+0x7e8>
 800ab32:	d099      	beq.n	800aa68 <_dtoa_r+0x818>
 800ab34:	9a08      	ldr	r2, [sp, #32]
 800ab36:	331c      	adds	r3, #28
 800ab38:	441a      	add	r2, r3
 800ab3a:	4498      	add	r8, r3
 800ab3c:	441e      	add	r6, r3
 800ab3e:	9208      	str	r2, [sp, #32]
 800ab40:	e792      	b.n	800aa68 <_dtoa_r+0x818>
 800ab42:	4603      	mov	r3, r0
 800ab44:	e7f6      	b.n	800ab34 <_dtoa_r+0x8e4>
 800ab46:	9b07      	ldr	r3, [sp, #28]
 800ab48:	9704      	str	r7, [sp, #16]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	dc20      	bgt.n	800ab90 <_dtoa_r+0x940>
 800ab4e:	9300      	str	r3, [sp, #0]
 800ab50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab52:	2b02      	cmp	r3, #2
 800ab54:	dd1e      	ble.n	800ab94 <_dtoa_r+0x944>
 800ab56:	9b00      	ldr	r3, [sp, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f47f aec0 	bne.w	800a8de <_dtoa_r+0x68e>
 800ab5e:	4621      	mov	r1, r4
 800ab60:	2205      	movs	r2, #5
 800ab62:	4658      	mov	r0, fp
 800ab64:	f000 f9e4 	bl	800af30 <__multadd>
 800ab68:	4601      	mov	r1, r0
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	4648      	mov	r0, r9
 800ab6e:	f000 fbf7 	bl	800b360 <__mcmp>
 800ab72:	2800      	cmp	r0, #0
 800ab74:	f77f aeb3 	ble.w	800a8de <_dtoa_r+0x68e>
 800ab78:	4656      	mov	r6, sl
 800ab7a:	2331      	movs	r3, #49	@ 0x31
 800ab7c:	f806 3b01 	strb.w	r3, [r6], #1
 800ab80:	9b04      	ldr	r3, [sp, #16]
 800ab82:	3301      	adds	r3, #1
 800ab84:	9304      	str	r3, [sp, #16]
 800ab86:	e6ae      	b.n	800a8e6 <_dtoa_r+0x696>
 800ab88:	9c07      	ldr	r4, [sp, #28]
 800ab8a:	9704      	str	r7, [sp, #16]
 800ab8c:	4625      	mov	r5, r4
 800ab8e:	e7f3      	b.n	800ab78 <_dtoa_r+0x928>
 800ab90:	9b07      	ldr	r3, [sp, #28]
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	f000 8104 	beq.w	800ada4 <_dtoa_r+0xb54>
 800ab9c:	2e00      	cmp	r6, #0
 800ab9e:	dd05      	ble.n	800abac <_dtoa_r+0x95c>
 800aba0:	4629      	mov	r1, r5
 800aba2:	4632      	mov	r2, r6
 800aba4:	4658      	mov	r0, fp
 800aba6:	f000 fb6f 	bl	800b288 <__lshift>
 800abaa:	4605      	mov	r5, r0
 800abac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d05a      	beq.n	800ac68 <_dtoa_r+0xa18>
 800abb2:	6869      	ldr	r1, [r5, #4]
 800abb4:	4658      	mov	r0, fp
 800abb6:	f000 f959 	bl	800ae6c <_Balloc>
 800abba:	4606      	mov	r6, r0
 800abbc:	b928      	cbnz	r0, 800abca <_dtoa_r+0x97a>
 800abbe:	4b84      	ldr	r3, [pc, #528]	@ (800add0 <_dtoa_r+0xb80>)
 800abc0:	4602      	mov	r2, r0
 800abc2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800abc6:	f7ff bb5a 	b.w	800a27e <_dtoa_r+0x2e>
 800abca:	692a      	ldr	r2, [r5, #16]
 800abcc:	3202      	adds	r2, #2
 800abce:	0092      	lsls	r2, r2, #2
 800abd0:	f105 010c 	add.w	r1, r5, #12
 800abd4:	300c      	adds	r0, #12
 800abd6:	f7ff faa2 	bl	800a11e <memcpy>
 800abda:	2201      	movs	r2, #1
 800abdc:	4631      	mov	r1, r6
 800abde:	4658      	mov	r0, fp
 800abe0:	f000 fb52 	bl	800b288 <__lshift>
 800abe4:	f10a 0301 	add.w	r3, sl, #1
 800abe8:	9307      	str	r3, [sp, #28]
 800abea:	9b00      	ldr	r3, [sp, #0]
 800abec:	4453      	add	r3, sl
 800abee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abf0:	9b02      	ldr	r3, [sp, #8]
 800abf2:	f003 0301 	and.w	r3, r3, #1
 800abf6:	462f      	mov	r7, r5
 800abf8:	930a      	str	r3, [sp, #40]	@ 0x28
 800abfa:	4605      	mov	r5, r0
 800abfc:	9b07      	ldr	r3, [sp, #28]
 800abfe:	4621      	mov	r1, r4
 800ac00:	3b01      	subs	r3, #1
 800ac02:	4648      	mov	r0, r9
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	f7ff fa98 	bl	800a13a <quorem>
 800ac0a:	4639      	mov	r1, r7
 800ac0c:	9002      	str	r0, [sp, #8]
 800ac0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ac12:	4648      	mov	r0, r9
 800ac14:	f000 fba4 	bl	800b360 <__mcmp>
 800ac18:	462a      	mov	r2, r5
 800ac1a:	9008      	str	r0, [sp, #32]
 800ac1c:	4621      	mov	r1, r4
 800ac1e:	4658      	mov	r0, fp
 800ac20:	f000 fbba 	bl	800b398 <__mdiff>
 800ac24:	68c2      	ldr	r2, [r0, #12]
 800ac26:	4606      	mov	r6, r0
 800ac28:	bb02      	cbnz	r2, 800ac6c <_dtoa_r+0xa1c>
 800ac2a:	4601      	mov	r1, r0
 800ac2c:	4648      	mov	r0, r9
 800ac2e:	f000 fb97 	bl	800b360 <__mcmp>
 800ac32:	4602      	mov	r2, r0
 800ac34:	4631      	mov	r1, r6
 800ac36:	4658      	mov	r0, fp
 800ac38:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac3a:	f000 f957 	bl	800aeec <_Bfree>
 800ac3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac42:	9e07      	ldr	r6, [sp, #28]
 800ac44:	ea43 0102 	orr.w	r1, r3, r2
 800ac48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac4a:	4319      	orrs	r1, r3
 800ac4c:	d110      	bne.n	800ac70 <_dtoa_r+0xa20>
 800ac4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac52:	d029      	beq.n	800aca8 <_dtoa_r+0xa58>
 800ac54:	9b08      	ldr	r3, [sp, #32]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	dd02      	ble.n	800ac60 <_dtoa_r+0xa10>
 800ac5a:	9b02      	ldr	r3, [sp, #8]
 800ac5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ac60:	9b00      	ldr	r3, [sp, #0]
 800ac62:	f883 8000 	strb.w	r8, [r3]
 800ac66:	e63f      	b.n	800a8e8 <_dtoa_r+0x698>
 800ac68:	4628      	mov	r0, r5
 800ac6a:	e7bb      	b.n	800abe4 <_dtoa_r+0x994>
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	e7e1      	b.n	800ac34 <_dtoa_r+0x9e4>
 800ac70:	9b08      	ldr	r3, [sp, #32]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	db04      	blt.n	800ac80 <_dtoa_r+0xa30>
 800ac76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac78:	430b      	orrs	r3, r1
 800ac7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac7c:	430b      	orrs	r3, r1
 800ac7e:	d120      	bne.n	800acc2 <_dtoa_r+0xa72>
 800ac80:	2a00      	cmp	r2, #0
 800ac82:	dded      	ble.n	800ac60 <_dtoa_r+0xa10>
 800ac84:	4649      	mov	r1, r9
 800ac86:	2201      	movs	r2, #1
 800ac88:	4658      	mov	r0, fp
 800ac8a:	f000 fafd 	bl	800b288 <__lshift>
 800ac8e:	4621      	mov	r1, r4
 800ac90:	4681      	mov	r9, r0
 800ac92:	f000 fb65 	bl	800b360 <__mcmp>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	dc03      	bgt.n	800aca2 <_dtoa_r+0xa52>
 800ac9a:	d1e1      	bne.n	800ac60 <_dtoa_r+0xa10>
 800ac9c:	f018 0f01 	tst.w	r8, #1
 800aca0:	d0de      	beq.n	800ac60 <_dtoa_r+0xa10>
 800aca2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aca6:	d1d8      	bne.n	800ac5a <_dtoa_r+0xa0a>
 800aca8:	9a00      	ldr	r2, [sp, #0]
 800acaa:	2339      	movs	r3, #57	@ 0x39
 800acac:	7013      	strb	r3, [r2, #0]
 800acae:	4633      	mov	r3, r6
 800acb0:	461e      	mov	r6, r3
 800acb2:	3b01      	subs	r3, #1
 800acb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800acb8:	2a39      	cmp	r2, #57	@ 0x39
 800acba:	d052      	beq.n	800ad62 <_dtoa_r+0xb12>
 800acbc:	3201      	adds	r2, #1
 800acbe:	701a      	strb	r2, [r3, #0]
 800acc0:	e612      	b.n	800a8e8 <_dtoa_r+0x698>
 800acc2:	2a00      	cmp	r2, #0
 800acc4:	dd07      	ble.n	800acd6 <_dtoa_r+0xa86>
 800acc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800acca:	d0ed      	beq.n	800aca8 <_dtoa_r+0xa58>
 800accc:	9a00      	ldr	r2, [sp, #0]
 800acce:	f108 0301 	add.w	r3, r8, #1
 800acd2:	7013      	strb	r3, [r2, #0]
 800acd4:	e608      	b.n	800a8e8 <_dtoa_r+0x698>
 800acd6:	9b07      	ldr	r3, [sp, #28]
 800acd8:	9a07      	ldr	r2, [sp, #28]
 800acda:	f803 8c01 	strb.w	r8, [r3, #-1]
 800acde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d028      	beq.n	800ad36 <_dtoa_r+0xae6>
 800ace4:	4649      	mov	r1, r9
 800ace6:	2300      	movs	r3, #0
 800ace8:	220a      	movs	r2, #10
 800acea:	4658      	mov	r0, fp
 800acec:	f000 f920 	bl	800af30 <__multadd>
 800acf0:	42af      	cmp	r7, r5
 800acf2:	4681      	mov	r9, r0
 800acf4:	f04f 0300 	mov.w	r3, #0
 800acf8:	f04f 020a 	mov.w	r2, #10
 800acfc:	4639      	mov	r1, r7
 800acfe:	4658      	mov	r0, fp
 800ad00:	d107      	bne.n	800ad12 <_dtoa_r+0xac2>
 800ad02:	f000 f915 	bl	800af30 <__multadd>
 800ad06:	4607      	mov	r7, r0
 800ad08:	4605      	mov	r5, r0
 800ad0a:	9b07      	ldr	r3, [sp, #28]
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	9307      	str	r3, [sp, #28]
 800ad10:	e774      	b.n	800abfc <_dtoa_r+0x9ac>
 800ad12:	f000 f90d 	bl	800af30 <__multadd>
 800ad16:	4629      	mov	r1, r5
 800ad18:	4607      	mov	r7, r0
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	220a      	movs	r2, #10
 800ad1e:	4658      	mov	r0, fp
 800ad20:	f000 f906 	bl	800af30 <__multadd>
 800ad24:	4605      	mov	r5, r0
 800ad26:	e7f0      	b.n	800ad0a <_dtoa_r+0xaba>
 800ad28:	9b00      	ldr	r3, [sp, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	bfcc      	ite	gt
 800ad2e:	461e      	movgt	r6, r3
 800ad30:	2601      	movle	r6, #1
 800ad32:	4456      	add	r6, sl
 800ad34:	2700      	movs	r7, #0
 800ad36:	4649      	mov	r1, r9
 800ad38:	2201      	movs	r2, #1
 800ad3a:	4658      	mov	r0, fp
 800ad3c:	f000 faa4 	bl	800b288 <__lshift>
 800ad40:	4621      	mov	r1, r4
 800ad42:	4681      	mov	r9, r0
 800ad44:	f000 fb0c 	bl	800b360 <__mcmp>
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	dcb0      	bgt.n	800acae <_dtoa_r+0xa5e>
 800ad4c:	d102      	bne.n	800ad54 <_dtoa_r+0xb04>
 800ad4e:	f018 0f01 	tst.w	r8, #1
 800ad52:	d1ac      	bne.n	800acae <_dtoa_r+0xa5e>
 800ad54:	4633      	mov	r3, r6
 800ad56:	461e      	mov	r6, r3
 800ad58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad5c:	2a30      	cmp	r2, #48	@ 0x30
 800ad5e:	d0fa      	beq.n	800ad56 <_dtoa_r+0xb06>
 800ad60:	e5c2      	b.n	800a8e8 <_dtoa_r+0x698>
 800ad62:	459a      	cmp	sl, r3
 800ad64:	d1a4      	bne.n	800acb0 <_dtoa_r+0xa60>
 800ad66:	9b04      	ldr	r3, [sp, #16]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	9304      	str	r3, [sp, #16]
 800ad6c:	2331      	movs	r3, #49	@ 0x31
 800ad6e:	f88a 3000 	strb.w	r3, [sl]
 800ad72:	e5b9      	b.n	800a8e8 <_dtoa_r+0x698>
 800ad74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800add4 <_dtoa_r+0xb84>
 800ad7a:	b11b      	cbz	r3, 800ad84 <_dtoa_r+0xb34>
 800ad7c:	f10a 0308 	add.w	r3, sl, #8
 800ad80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ad82:	6013      	str	r3, [r2, #0]
 800ad84:	4650      	mov	r0, sl
 800ad86:	b019      	add	sp, #100	@ 0x64
 800ad88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	f77f ae37 	ble.w	800aa02 <_dtoa_r+0x7b2>
 800ad94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad96:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad98:	2001      	movs	r0, #1
 800ad9a:	e655      	b.n	800aa48 <_dtoa_r+0x7f8>
 800ad9c:	9b00      	ldr	r3, [sp, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f77f aed6 	ble.w	800ab50 <_dtoa_r+0x900>
 800ada4:	4656      	mov	r6, sl
 800ada6:	4621      	mov	r1, r4
 800ada8:	4648      	mov	r0, r9
 800adaa:	f7ff f9c6 	bl	800a13a <quorem>
 800adae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800adb2:	f806 8b01 	strb.w	r8, [r6], #1
 800adb6:	9b00      	ldr	r3, [sp, #0]
 800adb8:	eba6 020a 	sub.w	r2, r6, sl
 800adbc:	4293      	cmp	r3, r2
 800adbe:	ddb3      	ble.n	800ad28 <_dtoa_r+0xad8>
 800adc0:	4649      	mov	r1, r9
 800adc2:	2300      	movs	r3, #0
 800adc4:	220a      	movs	r2, #10
 800adc6:	4658      	mov	r0, fp
 800adc8:	f000 f8b2 	bl	800af30 <__multadd>
 800adcc:	4681      	mov	r9, r0
 800adce:	e7ea      	b.n	800ada6 <_dtoa_r+0xb56>
 800add0:	0800bd4c 	.word	0x0800bd4c
 800add4:	0800bcd0 	.word	0x0800bcd0

0800add8 <_free_r>:
 800add8:	b538      	push	{r3, r4, r5, lr}
 800adda:	4605      	mov	r5, r0
 800addc:	2900      	cmp	r1, #0
 800adde:	d041      	beq.n	800ae64 <_free_r+0x8c>
 800ade0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ade4:	1f0c      	subs	r4, r1, #4
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	bfb8      	it	lt
 800adea:	18e4      	addlt	r4, r4, r3
 800adec:	f7fe faac 	bl	8009348 <__malloc_lock>
 800adf0:	4a1d      	ldr	r2, [pc, #116]	@ (800ae68 <_free_r+0x90>)
 800adf2:	6813      	ldr	r3, [r2, #0]
 800adf4:	b933      	cbnz	r3, 800ae04 <_free_r+0x2c>
 800adf6:	6063      	str	r3, [r4, #4]
 800adf8:	6014      	str	r4, [r2, #0]
 800adfa:	4628      	mov	r0, r5
 800adfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae00:	f7fe baa8 	b.w	8009354 <__malloc_unlock>
 800ae04:	42a3      	cmp	r3, r4
 800ae06:	d908      	bls.n	800ae1a <_free_r+0x42>
 800ae08:	6820      	ldr	r0, [r4, #0]
 800ae0a:	1821      	adds	r1, r4, r0
 800ae0c:	428b      	cmp	r3, r1
 800ae0e:	bf01      	itttt	eq
 800ae10:	6819      	ldreq	r1, [r3, #0]
 800ae12:	685b      	ldreq	r3, [r3, #4]
 800ae14:	1809      	addeq	r1, r1, r0
 800ae16:	6021      	streq	r1, [r4, #0]
 800ae18:	e7ed      	b.n	800adf6 <_free_r+0x1e>
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	b10b      	cbz	r3, 800ae24 <_free_r+0x4c>
 800ae20:	42a3      	cmp	r3, r4
 800ae22:	d9fa      	bls.n	800ae1a <_free_r+0x42>
 800ae24:	6811      	ldr	r1, [r2, #0]
 800ae26:	1850      	adds	r0, r2, r1
 800ae28:	42a0      	cmp	r0, r4
 800ae2a:	d10b      	bne.n	800ae44 <_free_r+0x6c>
 800ae2c:	6820      	ldr	r0, [r4, #0]
 800ae2e:	4401      	add	r1, r0
 800ae30:	1850      	adds	r0, r2, r1
 800ae32:	4283      	cmp	r3, r0
 800ae34:	6011      	str	r1, [r2, #0]
 800ae36:	d1e0      	bne.n	800adfa <_free_r+0x22>
 800ae38:	6818      	ldr	r0, [r3, #0]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	6053      	str	r3, [r2, #4]
 800ae3e:	4408      	add	r0, r1
 800ae40:	6010      	str	r0, [r2, #0]
 800ae42:	e7da      	b.n	800adfa <_free_r+0x22>
 800ae44:	d902      	bls.n	800ae4c <_free_r+0x74>
 800ae46:	230c      	movs	r3, #12
 800ae48:	602b      	str	r3, [r5, #0]
 800ae4a:	e7d6      	b.n	800adfa <_free_r+0x22>
 800ae4c:	6820      	ldr	r0, [r4, #0]
 800ae4e:	1821      	adds	r1, r4, r0
 800ae50:	428b      	cmp	r3, r1
 800ae52:	bf04      	itt	eq
 800ae54:	6819      	ldreq	r1, [r3, #0]
 800ae56:	685b      	ldreq	r3, [r3, #4]
 800ae58:	6063      	str	r3, [r4, #4]
 800ae5a:	bf04      	itt	eq
 800ae5c:	1809      	addeq	r1, r1, r0
 800ae5e:	6021      	streq	r1, [r4, #0]
 800ae60:	6054      	str	r4, [r2, #4]
 800ae62:	e7ca      	b.n	800adfa <_free_r+0x22>
 800ae64:	bd38      	pop	{r3, r4, r5, pc}
 800ae66:	bf00      	nop
 800ae68:	20001334 	.word	0x20001334

0800ae6c <_Balloc>:
 800ae6c:	b570      	push	{r4, r5, r6, lr}
 800ae6e:	69c6      	ldr	r6, [r0, #28]
 800ae70:	4604      	mov	r4, r0
 800ae72:	460d      	mov	r5, r1
 800ae74:	b976      	cbnz	r6, 800ae94 <_Balloc+0x28>
 800ae76:	2010      	movs	r0, #16
 800ae78:	f7fe f9bc 	bl	80091f4 <malloc>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	61e0      	str	r0, [r4, #28]
 800ae80:	b920      	cbnz	r0, 800ae8c <_Balloc+0x20>
 800ae82:	4b18      	ldr	r3, [pc, #96]	@ (800aee4 <_Balloc+0x78>)
 800ae84:	4818      	ldr	r0, [pc, #96]	@ (800aee8 <_Balloc+0x7c>)
 800ae86:	216b      	movs	r1, #107	@ 0x6b
 800ae88:	f000 fde4 	bl	800ba54 <__assert_func>
 800ae8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae90:	6006      	str	r6, [r0, #0]
 800ae92:	60c6      	str	r6, [r0, #12]
 800ae94:	69e6      	ldr	r6, [r4, #28]
 800ae96:	68f3      	ldr	r3, [r6, #12]
 800ae98:	b183      	cbz	r3, 800aebc <_Balloc+0x50>
 800ae9a:	69e3      	ldr	r3, [r4, #28]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aea2:	b9b8      	cbnz	r0, 800aed4 <_Balloc+0x68>
 800aea4:	2101      	movs	r1, #1
 800aea6:	fa01 f605 	lsl.w	r6, r1, r5
 800aeaa:	1d72      	adds	r2, r6, #5
 800aeac:	0092      	lsls	r2, r2, #2
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f000 fdee 	bl	800ba90 <_calloc_r>
 800aeb4:	b160      	cbz	r0, 800aed0 <_Balloc+0x64>
 800aeb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aeba:	e00e      	b.n	800aeda <_Balloc+0x6e>
 800aebc:	2221      	movs	r2, #33	@ 0x21
 800aebe:	2104      	movs	r1, #4
 800aec0:	4620      	mov	r0, r4
 800aec2:	f000 fde5 	bl	800ba90 <_calloc_r>
 800aec6:	69e3      	ldr	r3, [r4, #28]
 800aec8:	60f0      	str	r0, [r6, #12]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1e4      	bne.n	800ae9a <_Balloc+0x2e>
 800aed0:	2000      	movs	r0, #0
 800aed2:	bd70      	pop	{r4, r5, r6, pc}
 800aed4:	6802      	ldr	r2, [r0, #0]
 800aed6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aeda:	2300      	movs	r3, #0
 800aedc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aee0:	e7f7      	b.n	800aed2 <_Balloc+0x66>
 800aee2:	bf00      	nop
 800aee4:	0800bcdd 	.word	0x0800bcdd
 800aee8:	0800bd5d 	.word	0x0800bd5d

0800aeec <_Bfree>:
 800aeec:	b570      	push	{r4, r5, r6, lr}
 800aeee:	69c6      	ldr	r6, [r0, #28]
 800aef0:	4605      	mov	r5, r0
 800aef2:	460c      	mov	r4, r1
 800aef4:	b976      	cbnz	r6, 800af14 <_Bfree+0x28>
 800aef6:	2010      	movs	r0, #16
 800aef8:	f7fe f97c 	bl	80091f4 <malloc>
 800aefc:	4602      	mov	r2, r0
 800aefe:	61e8      	str	r0, [r5, #28]
 800af00:	b920      	cbnz	r0, 800af0c <_Bfree+0x20>
 800af02:	4b09      	ldr	r3, [pc, #36]	@ (800af28 <_Bfree+0x3c>)
 800af04:	4809      	ldr	r0, [pc, #36]	@ (800af2c <_Bfree+0x40>)
 800af06:	218f      	movs	r1, #143	@ 0x8f
 800af08:	f000 fda4 	bl	800ba54 <__assert_func>
 800af0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af10:	6006      	str	r6, [r0, #0]
 800af12:	60c6      	str	r6, [r0, #12]
 800af14:	b13c      	cbz	r4, 800af26 <_Bfree+0x3a>
 800af16:	69eb      	ldr	r3, [r5, #28]
 800af18:	6862      	ldr	r2, [r4, #4]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af20:	6021      	str	r1, [r4, #0]
 800af22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af26:	bd70      	pop	{r4, r5, r6, pc}
 800af28:	0800bcdd 	.word	0x0800bcdd
 800af2c:	0800bd5d 	.word	0x0800bd5d

0800af30 <__multadd>:
 800af30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af34:	690d      	ldr	r5, [r1, #16]
 800af36:	4607      	mov	r7, r0
 800af38:	460c      	mov	r4, r1
 800af3a:	461e      	mov	r6, r3
 800af3c:	f101 0c14 	add.w	ip, r1, #20
 800af40:	2000      	movs	r0, #0
 800af42:	f8dc 3000 	ldr.w	r3, [ip]
 800af46:	b299      	uxth	r1, r3
 800af48:	fb02 6101 	mla	r1, r2, r1, r6
 800af4c:	0c1e      	lsrs	r6, r3, #16
 800af4e:	0c0b      	lsrs	r3, r1, #16
 800af50:	fb02 3306 	mla	r3, r2, r6, r3
 800af54:	b289      	uxth	r1, r1
 800af56:	3001      	adds	r0, #1
 800af58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af5c:	4285      	cmp	r5, r0
 800af5e:	f84c 1b04 	str.w	r1, [ip], #4
 800af62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af66:	dcec      	bgt.n	800af42 <__multadd+0x12>
 800af68:	b30e      	cbz	r6, 800afae <__multadd+0x7e>
 800af6a:	68a3      	ldr	r3, [r4, #8]
 800af6c:	42ab      	cmp	r3, r5
 800af6e:	dc19      	bgt.n	800afa4 <__multadd+0x74>
 800af70:	6861      	ldr	r1, [r4, #4]
 800af72:	4638      	mov	r0, r7
 800af74:	3101      	adds	r1, #1
 800af76:	f7ff ff79 	bl	800ae6c <_Balloc>
 800af7a:	4680      	mov	r8, r0
 800af7c:	b928      	cbnz	r0, 800af8a <__multadd+0x5a>
 800af7e:	4602      	mov	r2, r0
 800af80:	4b0c      	ldr	r3, [pc, #48]	@ (800afb4 <__multadd+0x84>)
 800af82:	480d      	ldr	r0, [pc, #52]	@ (800afb8 <__multadd+0x88>)
 800af84:	21ba      	movs	r1, #186	@ 0xba
 800af86:	f000 fd65 	bl	800ba54 <__assert_func>
 800af8a:	6922      	ldr	r2, [r4, #16]
 800af8c:	3202      	adds	r2, #2
 800af8e:	f104 010c 	add.w	r1, r4, #12
 800af92:	0092      	lsls	r2, r2, #2
 800af94:	300c      	adds	r0, #12
 800af96:	f7ff f8c2 	bl	800a11e <memcpy>
 800af9a:	4621      	mov	r1, r4
 800af9c:	4638      	mov	r0, r7
 800af9e:	f7ff ffa5 	bl	800aeec <_Bfree>
 800afa2:	4644      	mov	r4, r8
 800afa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800afa8:	3501      	adds	r5, #1
 800afaa:	615e      	str	r6, [r3, #20]
 800afac:	6125      	str	r5, [r4, #16]
 800afae:	4620      	mov	r0, r4
 800afb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afb4:	0800bd4c 	.word	0x0800bd4c
 800afb8:	0800bd5d 	.word	0x0800bd5d

0800afbc <__hi0bits>:
 800afbc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800afc0:	4603      	mov	r3, r0
 800afc2:	bf36      	itet	cc
 800afc4:	0403      	lslcc	r3, r0, #16
 800afc6:	2000      	movcs	r0, #0
 800afc8:	2010      	movcc	r0, #16
 800afca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800afce:	bf3c      	itt	cc
 800afd0:	021b      	lslcc	r3, r3, #8
 800afd2:	3008      	addcc	r0, #8
 800afd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afd8:	bf3c      	itt	cc
 800afda:	011b      	lslcc	r3, r3, #4
 800afdc:	3004      	addcc	r0, #4
 800afde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afe2:	bf3c      	itt	cc
 800afe4:	009b      	lslcc	r3, r3, #2
 800afe6:	3002      	addcc	r0, #2
 800afe8:	2b00      	cmp	r3, #0
 800afea:	db05      	blt.n	800aff8 <__hi0bits+0x3c>
 800afec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aff0:	f100 0001 	add.w	r0, r0, #1
 800aff4:	bf08      	it	eq
 800aff6:	2020      	moveq	r0, #32
 800aff8:	4770      	bx	lr

0800affa <__lo0bits>:
 800affa:	6803      	ldr	r3, [r0, #0]
 800affc:	4602      	mov	r2, r0
 800affe:	f013 0007 	ands.w	r0, r3, #7
 800b002:	d00b      	beq.n	800b01c <__lo0bits+0x22>
 800b004:	07d9      	lsls	r1, r3, #31
 800b006:	d421      	bmi.n	800b04c <__lo0bits+0x52>
 800b008:	0798      	lsls	r0, r3, #30
 800b00a:	bf49      	itett	mi
 800b00c:	085b      	lsrmi	r3, r3, #1
 800b00e:	089b      	lsrpl	r3, r3, #2
 800b010:	2001      	movmi	r0, #1
 800b012:	6013      	strmi	r3, [r2, #0]
 800b014:	bf5c      	itt	pl
 800b016:	6013      	strpl	r3, [r2, #0]
 800b018:	2002      	movpl	r0, #2
 800b01a:	4770      	bx	lr
 800b01c:	b299      	uxth	r1, r3
 800b01e:	b909      	cbnz	r1, 800b024 <__lo0bits+0x2a>
 800b020:	0c1b      	lsrs	r3, r3, #16
 800b022:	2010      	movs	r0, #16
 800b024:	b2d9      	uxtb	r1, r3
 800b026:	b909      	cbnz	r1, 800b02c <__lo0bits+0x32>
 800b028:	3008      	adds	r0, #8
 800b02a:	0a1b      	lsrs	r3, r3, #8
 800b02c:	0719      	lsls	r1, r3, #28
 800b02e:	bf04      	itt	eq
 800b030:	091b      	lsreq	r3, r3, #4
 800b032:	3004      	addeq	r0, #4
 800b034:	0799      	lsls	r1, r3, #30
 800b036:	bf04      	itt	eq
 800b038:	089b      	lsreq	r3, r3, #2
 800b03a:	3002      	addeq	r0, #2
 800b03c:	07d9      	lsls	r1, r3, #31
 800b03e:	d403      	bmi.n	800b048 <__lo0bits+0x4e>
 800b040:	085b      	lsrs	r3, r3, #1
 800b042:	f100 0001 	add.w	r0, r0, #1
 800b046:	d003      	beq.n	800b050 <__lo0bits+0x56>
 800b048:	6013      	str	r3, [r2, #0]
 800b04a:	4770      	bx	lr
 800b04c:	2000      	movs	r0, #0
 800b04e:	4770      	bx	lr
 800b050:	2020      	movs	r0, #32
 800b052:	4770      	bx	lr

0800b054 <__i2b>:
 800b054:	b510      	push	{r4, lr}
 800b056:	460c      	mov	r4, r1
 800b058:	2101      	movs	r1, #1
 800b05a:	f7ff ff07 	bl	800ae6c <_Balloc>
 800b05e:	4602      	mov	r2, r0
 800b060:	b928      	cbnz	r0, 800b06e <__i2b+0x1a>
 800b062:	4b05      	ldr	r3, [pc, #20]	@ (800b078 <__i2b+0x24>)
 800b064:	4805      	ldr	r0, [pc, #20]	@ (800b07c <__i2b+0x28>)
 800b066:	f240 1145 	movw	r1, #325	@ 0x145
 800b06a:	f000 fcf3 	bl	800ba54 <__assert_func>
 800b06e:	2301      	movs	r3, #1
 800b070:	6144      	str	r4, [r0, #20]
 800b072:	6103      	str	r3, [r0, #16]
 800b074:	bd10      	pop	{r4, pc}
 800b076:	bf00      	nop
 800b078:	0800bd4c 	.word	0x0800bd4c
 800b07c:	0800bd5d 	.word	0x0800bd5d

0800b080 <__multiply>:
 800b080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b084:	4614      	mov	r4, r2
 800b086:	690a      	ldr	r2, [r1, #16]
 800b088:	6923      	ldr	r3, [r4, #16]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	bfa8      	it	ge
 800b08e:	4623      	movge	r3, r4
 800b090:	460f      	mov	r7, r1
 800b092:	bfa4      	itt	ge
 800b094:	460c      	movge	r4, r1
 800b096:	461f      	movge	r7, r3
 800b098:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b09c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b0a0:	68a3      	ldr	r3, [r4, #8]
 800b0a2:	6861      	ldr	r1, [r4, #4]
 800b0a4:	eb0a 0609 	add.w	r6, sl, r9
 800b0a8:	42b3      	cmp	r3, r6
 800b0aa:	b085      	sub	sp, #20
 800b0ac:	bfb8      	it	lt
 800b0ae:	3101      	addlt	r1, #1
 800b0b0:	f7ff fedc 	bl	800ae6c <_Balloc>
 800b0b4:	b930      	cbnz	r0, 800b0c4 <__multiply+0x44>
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	4b44      	ldr	r3, [pc, #272]	@ (800b1cc <__multiply+0x14c>)
 800b0ba:	4845      	ldr	r0, [pc, #276]	@ (800b1d0 <__multiply+0x150>)
 800b0bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b0c0:	f000 fcc8 	bl	800ba54 <__assert_func>
 800b0c4:	f100 0514 	add.w	r5, r0, #20
 800b0c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b0cc:	462b      	mov	r3, r5
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	4543      	cmp	r3, r8
 800b0d2:	d321      	bcc.n	800b118 <__multiply+0x98>
 800b0d4:	f107 0114 	add.w	r1, r7, #20
 800b0d8:	f104 0214 	add.w	r2, r4, #20
 800b0dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b0e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b0e4:	9302      	str	r3, [sp, #8]
 800b0e6:	1b13      	subs	r3, r2, r4
 800b0e8:	3b15      	subs	r3, #21
 800b0ea:	f023 0303 	bic.w	r3, r3, #3
 800b0ee:	3304      	adds	r3, #4
 800b0f0:	f104 0715 	add.w	r7, r4, #21
 800b0f4:	42ba      	cmp	r2, r7
 800b0f6:	bf38      	it	cc
 800b0f8:	2304      	movcc	r3, #4
 800b0fa:	9301      	str	r3, [sp, #4]
 800b0fc:	9b02      	ldr	r3, [sp, #8]
 800b0fe:	9103      	str	r1, [sp, #12]
 800b100:	428b      	cmp	r3, r1
 800b102:	d80c      	bhi.n	800b11e <__multiply+0x9e>
 800b104:	2e00      	cmp	r6, #0
 800b106:	dd03      	ble.n	800b110 <__multiply+0x90>
 800b108:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d05b      	beq.n	800b1c8 <__multiply+0x148>
 800b110:	6106      	str	r6, [r0, #16]
 800b112:	b005      	add	sp, #20
 800b114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b118:	f843 2b04 	str.w	r2, [r3], #4
 800b11c:	e7d8      	b.n	800b0d0 <__multiply+0x50>
 800b11e:	f8b1 a000 	ldrh.w	sl, [r1]
 800b122:	f1ba 0f00 	cmp.w	sl, #0
 800b126:	d024      	beq.n	800b172 <__multiply+0xf2>
 800b128:	f104 0e14 	add.w	lr, r4, #20
 800b12c:	46a9      	mov	r9, r5
 800b12e:	f04f 0c00 	mov.w	ip, #0
 800b132:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b136:	f8d9 3000 	ldr.w	r3, [r9]
 800b13a:	fa1f fb87 	uxth.w	fp, r7
 800b13e:	b29b      	uxth	r3, r3
 800b140:	fb0a 330b 	mla	r3, sl, fp, r3
 800b144:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b148:	f8d9 7000 	ldr.w	r7, [r9]
 800b14c:	4463      	add	r3, ip
 800b14e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b152:	fb0a c70b 	mla	r7, sl, fp, ip
 800b156:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b160:	4572      	cmp	r2, lr
 800b162:	f849 3b04 	str.w	r3, [r9], #4
 800b166:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b16a:	d8e2      	bhi.n	800b132 <__multiply+0xb2>
 800b16c:	9b01      	ldr	r3, [sp, #4]
 800b16e:	f845 c003 	str.w	ip, [r5, r3]
 800b172:	9b03      	ldr	r3, [sp, #12]
 800b174:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b178:	3104      	adds	r1, #4
 800b17a:	f1b9 0f00 	cmp.w	r9, #0
 800b17e:	d021      	beq.n	800b1c4 <__multiply+0x144>
 800b180:	682b      	ldr	r3, [r5, #0]
 800b182:	f104 0c14 	add.w	ip, r4, #20
 800b186:	46ae      	mov	lr, r5
 800b188:	f04f 0a00 	mov.w	sl, #0
 800b18c:	f8bc b000 	ldrh.w	fp, [ip]
 800b190:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b194:	fb09 770b 	mla	r7, r9, fp, r7
 800b198:	4457      	add	r7, sl
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b1a0:	f84e 3b04 	str.w	r3, [lr], #4
 800b1a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b1a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b1ac:	f8be 3000 	ldrh.w	r3, [lr]
 800b1b0:	fb09 330a 	mla	r3, r9, sl, r3
 800b1b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b1b8:	4562      	cmp	r2, ip
 800b1ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b1be:	d8e5      	bhi.n	800b18c <__multiply+0x10c>
 800b1c0:	9f01      	ldr	r7, [sp, #4]
 800b1c2:	51eb      	str	r3, [r5, r7]
 800b1c4:	3504      	adds	r5, #4
 800b1c6:	e799      	b.n	800b0fc <__multiply+0x7c>
 800b1c8:	3e01      	subs	r6, #1
 800b1ca:	e79b      	b.n	800b104 <__multiply+0x84>
 800b1cc:	0800bd4c 	.word	0x0800bd4c
 800b1d0:	0800bd5d 	.word	0x0800bd5d

0800b1d4 <__pow5mult>:
 800b1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1d8:	4615      	mov	r5, r2
 800b1da:	f012 0203 	ands.w	r2, r2, #3
 800b1de:	4607      	mov	r7, r0
 800b1e0:	460e      	mov	r6, r1
 800b1e2:	d007      	beq.n	800b1f4 <__pow5mult+0x20>
 800b1e4:	4c25      	ldr	r4, [pc, #148]	@ (800b27c <__pow5mult+0xa8>)
 800b1e6:	3a01      	subs	r2, #1
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1ee:	f7ff fe9f 	bl	800af30 <__multadd>
 800b1f2:	4606      	mov	r6, r0
 800b1f4:	10ad      	asrs	r5, r5, #2
 800b1f6:	d03d      	beq.n	800b274 <__pow5mult+0xa0>
 800b1f8:	69fc      	ldr	r4, [r7, #28]
 800b1fa:	b97c      	cbnz	r4, 800b21c <__pow5mult+0x48>
 800b1fc:	2010      	movs	r0, #16
 800b1fe:	f7fd fff9 	bl	80091f4 <malloc>
 800b202:	4602      	mov	r2, r0
 800b204:	61f8      	str	r0, [r7, #28]
 800b206:	b928      	cbnz	r0, 800b214 <__pow5mult+0x40>
 800b208:	4b1d      	ldr	r3, [pc, #116]	@ (800b280 <__pow5mult+0xac>)
 800b20a:	481e      	ldr	r0, [pc, #120]	@ (800b284 <__pow5mult+0xb0>)
 800b20c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b210:	f000 fc20 	bl	800ba54 <__assert_func>
 800b214:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b218:	6004      	str	r4, [r0, #0]
 800b21a:	60c4      	str	r4, [r0, #12]
 800b21c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b220:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b224:	b94c      	cbnz	r4, 800b23a <__pow5mult+0x66>
 800b226:	f240 2171 	movw	r1, #625	@ 0x271
 800b22a:	4638      	mov	r0, r7
 800b22c:	f7ff ff12 	bl	800b054 <__i2b>
 800b230:	2300      	movs	r3, #0
 800b232:	f8c8 0008 	str.w	r0, [r8, #8]
 800b236:	4604      	mov	r4, r0
 800b238:	6003      	str	r3, [r0, #0]
 800b23a:	f04f 0900 	mov.w	r9, #0
 800b23e:	07eb      	lsls	r3, r5, #31
 800b240:	d50a      	bpl.n	800b258 <__pow5mult+0x84>
 800b242:	4631      	mov	r1, r6
 800b244:	4622      	mov	r2, r4
 800b246:	4638      	mov	r0, r7
 800b248:	f7ff ff1a 	bl	800b080 <__multiply>
 800b24c:	4631      	mov	r1, r6
 800b24e:	4680      	mov	r8, r0
 800b250:	4638      	mov	r0, r7
 800b252:	f7ff fe4b 	bl	800aeec <_Bfree>
 800b256:	4646      	mov	r6, r8
 800b258:	106d      	asrs	r5, r5, #1
 800b25a:	d00b      	beq.n	800b274 <__pow5mult+0xa0>
 800b25c:	6820      	ldr	r0, [r4, #0]
 800b25e:	b938      	cbnz	r0, 800b270 <__pow5mult+0x9c>
 800b260:	4622      	mov	r2, r4
 800b262:	4621      	mov	r1, r4
 800b264:	4638      	mov	r0, r7
 800b266:	f7ff ff0b 	bl	800b080 <__multiply>
 800b26a:	6020      	str	r0, [r4, #0]
 800b26c:	f8c0 9000 	str.w	r9, [r0]
 800b270:	4604      	mov	r4, r0
 800b272:	e7e4      	b.n	800b23e <__pow5mult+0x6a>
 800b274:	4630      	mov	r0, r6
 800b276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b27a:	bf00      	nop
 800b27c:	0800bdb8 	.word	0x0800bdb8
 800b280:	0800bcdd 	.word	0x0800bcdd
 800b284:	0800bd5d 	.word	0x0800bd5d

0800b288 <__lshift>:
 800b288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b28c:	460c      	mov	r4, r1
 800b28e:	6849      	ldr	r1, [r1, #4]
 800b290:	6923      	ldr	r3, [r4, #16]
 800b292:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b296:	68a3      	ldr	r3, [r4, #8]
 800b298:	4607      	mov	r7, r0
 800b29a:	4691      	mov	r9, r2
 800b29c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2a0:	f108 0601 	add.w	r6, r8, #1
 800b2a4:	42b3      	cmp	r3, r6
 800b2a6:	db0b      	blt.n	800b2c0 <__lshift+0x38>
 800b2a8:	4638      	mov	r0, r7
 800b2aa:	f7ff fddf 	bl	800ae6c <_Balloc>
 800b2ae:	4605      	mov	r5, r0
 800b2b0:	b948      	cbnz	r0, 800b2c6 <__lshift+0x3e>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	4b28      	ldr	r3, [pc, #160]	@ (800b358 <__lshift+0xd0>)
 800b2b6:	4829      	ldr	r0, [pc, #164]	@ (800b35c <__lshift+0xd4>)
 800b2b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b2bc:	f000 fbca 	bl	800ba54 <__assert_func>
 800b2c0:	3101      	adds	r1, #1
 800b2c2:	005b      	lsls	r3, r3, #1
 800b2c4:	e7ee      	b.n	800b2a4 <__lshift+0x1c>
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	f100 0114 	add.w	r1, r0, #20
 800b2cc:	f100 0210 	add.w	r2, r0, #16
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	4553      	cmp	r3, sl
 800b2d4:	db33      	blt.n	800b33e <__lshift+0xb6>
 800b2d6:	6920      	ldr	r0, [r4, #16]
 800b2d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2dc:	f104 0314 	add.w	r3, r4, #20
 800b2e0:	f019 091f 	ands.w	r9, r9, #31
 800b2e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b2ec:	d02b      	beq.n	800b346 <__lshift+0xbe>
 800b2ee:	f1c9 0e20 	rsb	lr, r9, #32
 800b2f2:	468a      	mov	sl, r1
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	6818      	ldr	r0, [r3, #0]
 800b2f8:	fa00 f009 	lsl.w	r0, r0, r9
 800b2fc:	4310      	orrs	r0, r2
 800b2fe:	f84a 0b04 	str.w	r0, [sl], #4
 800b302:	f853 2b04 	ldr.w	r2, [r3], #4
 800b306:	459c      	cmp	ip, r3
 800b308:	fa22 f20e 	lsr.w	r2, r2, lr
 800b30c:	d8f3      	bhi.n	800b2f6 <__lshift+0x6e>
 800b30e:	ebac 0304 	sub.w	r3, ip, r4
 800b312:	3b15      	subs	r3, #21
 800b314:	f023 0303 	bic.w	r3, r3, #3
 800b318:	3304      	adds	r3, #4
 800b31a:	f104 0015 	add.w	r0, r4, #21
 800b31e:	4584      	cmp	ip, r0
 800b320:	bf38      	it	cc
 800b322:	2304      	movcc	r3, #4
 800b324:	50ca      	str	r2, [r1, r3]
 800b326:	b10a      	cbz	r2, 800b32c <__lshift+0xa4>
 800b328:	f108 0602 	add.w	r6, r8, #2
 800b32c:	3e01      	subs	r6, #1
 800b32e:	4638      	mov	r0, r7
 800b330:	612e      	str	r6, [r5, #16]
 800b332:	4621      	mov	r1, r4
 800b334:	f7ff fdda 	bl	800aeec <_Bfree>
 800b338:	4628      	mov	r0, r5
 800b33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b33e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b342:	3301      	adds	r3, #1
 800b344:	e7c5      	b.n	800b2d2 <__lshift+0x4a>
 800b346:	3904      	subs	r1, #4
 800b348:	f853 2b04 	ldr.w	r2, [r3], #4
 800b34c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b350:	459c      	cmp	ip, r3
 800b352:	d8f9      	bhi.n	800b348 <__lshift+0xc0>
 800b354:	e7ea      	b.n	800b32c <__lshift+0xa4>
 800b356:	bf00      	nop
 800b358:	0800bd4c 	.word	0x0800bd4c
 800b35c:	0800bd5d 	.word	0x0800bd5d

0800b360 <__mcmp>:
 800b360:	690a      	ldr	r2, [r1, #16]
 800b362:	4603      	mov	r3, r0
 800b364:	6900      	ldr	r0, [r0, #16]
 800b366:	1a80      	subs	r0, r0, r2
 800b368:	b530      	push	{r4, r5, lr}
 800b36a:	d10e      	bne.n	800b38a <__mcmp+0x2a>
 800b36c:	3314      	adds	r3, #20
 800b36e:	3114      	adds	r1, #20
 800b370:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b374:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b378:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b37c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b380:	4295      	cmp	r5, r2
 800b382:	d003      	beq.n	800b38c <__mcmp+0x2c>
 800b384:	d205      	bcs.n	800b392 <__mcmp+0x32>
 800b386:	f04f 30ff 	mov.w	r0, #4294967295
 800b38a:	bd30      	pop	{r4, r5, pc}
 800b38c:	42a3      	cmp	r3, r4
 800b38e:	d3f3      	bcc.n	800b378 <__mcmp+0x18>
 800b390:	e7fb      	b.n	800b38a <__mcmp+0x2a>
 800b392:	2001      	movs	r0, #1
 800b394:	e7f9      	b.n	800b38a <__mcmp+0x2a>
	...

0800b398 <__mdiff>:
 800b398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b39c:	4689      	mov	r9, r1
 800b39e:	4606      	mov	r6, r0
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	4648      	mov	r0, r9
 800b3a4:	4614      	mov	r4, r2
 800b3a6:	f7ff ffdb 	bl	800b360 <__mcmp>
 800b3aa:	1e05      	subs	r5, r0, #0
 800b3ac:	d112      	bne.n	800b3d4 <__mdiff+0x3c>
 800b3ae:	4629      	mov	r1, r5
 800b3b0:	4630      	mov	r0, r6
 800b3b2:	f7ff fd5b 	bl	800ae6c <_Balloc>
 800b3b6:	4602      	mov	r2, r0
 800b3b8:	b928      	cbnz	r0, 800b3c6 <__mdiff+0x2e>
 800b3ba:	4b3f      	ldr	r3, [pc, #252]	@ (800b4b8 <__mdiff+0x120>)
 800b3bc:	f240 2137 	movw	r1, #567	@ 0x237
 800b3c0:	483e      	ldr	r0, [pc, #248]	@ (800b4bc <__mdiff+0x124>)
 800b3c2:	f000 fb47 	bl	800ba54 <__assert_func>
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b3cc:	4610      	mov	r0, r2
 800b3ce:	b003      	add	sp, #12
 800b3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d4:	bfbc      	itt	lt
 800b3d6:	464b      	movlt	r3, r9
 800b3d8:	46a1      	movlt	r9, r4
 800b3da:	4630      	mov	r0, r6
 800b3dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b3e0:	bfba      	itte	lt
 800b3e2:	461c      	movlt	r4, r3
 800b3e4:	2501      	movlt	r5, #1
 800b3e6:	2500      	movge	r5, #0
 800b3e8:	f7ff fd40 	bl	800ae6c <_Balloc>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	b918      	cbnz	r0, 800b3f8 <__mdiff+0x60>
 800b3f0:	4b31      	ldr	r3, [pc, #196]	@ (800b4b8 <__mdiff+0x120>)
 800b3f2:	f240 2145 	movw	r1, #581	@ 0x245
 800b3f6:	e7e3      	b.n	800b3c0 <__mdiff+0x28>
 800b3f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b3fc:	6926      	ldr	r6, [r4, #16]
 800b3fe:	60c5      	str	r5, [r0, #12]
 800b400:	f109 0310 	add.w	r3, r9, #16
 800b404:	f109 0514 	add.w	r5, r9, #20
 800b408:	f104 0e14 	add.w	lr, r4, #20
 800b40c:	f100 0b14 	add.w	fp, r0, #20
 800b410:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b414:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b418:	9301      	str	r3, [sp, #4]
 800b41a:	46d9      	mov	r9, fp
 800b41c:	f04f 0c00 	mov.w	ip, #0
 800b420:	9b01      	ldr	r3, [sp, #4]
 800b422:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b426:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b42a:	9301      	str	r3, [sp, #4]
 800b42c:	fa1f f38a 	uxth.w	r3, sl
 800b430:	4619      	mov	r1, r3
 800b432:	b283      	uxth	r3, r0
 800b434:	1acb      	subs	r3, r1, r3
 800b436:	0c00      	lsrs	r0, r0, #16
 800b438:	4463      	add	r3, ip
 800b43a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b43e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b442:	b29b      	uxth	r3, r3
 800b444:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b448:	4576      	cmp	r6, lr
 800b44a:	f849 3b04 	str.w	r3, [r9], #4
 800b44e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b452:	d8e5      	bhi.n	800b420 <__mdiff+0x88>
 800b454:	1b33      	subs	r3, r6, r4
 800b456:	3b15      	subs	r3, #21
 800b458:	f023 0303 	bic.w	r3, r3, #3
 800b45c:	3415      	adds	r4, #21
 800b45e:	3304      	adds	r3, #4
 800b460:	42a6      	cmp	r6, r4
 800b462:	bf38      	it	cc
 800b464:	2304      	movcc	r3, #4
 800b466:	441d      	add	r5, r3
 800b468:	445b      	add	r3, fp
 800b46a:	461e      	mov	r6, r3
 800b46c:	462c      	mov	r4, r5
 800b46e:	4544      	cmp	r4, r8
 800b470:	d30e      	bcc.n	800b490 <__mdiff+0xf8>
 800b472:	f108 0103 	add.w	r1, r8, #3
 800b476:	1b49      	subs	r1, r1, r5
 800b478:	f021 0103 	bic.w	r1, r1, #3
 800b47c:	3d03      	subs	r5, #3
 800b47e:	45a8      	cmp	r8, r5
 800b480:	bf38      	it	cc
 800b482:	2100      	movcc	r1, #0
 800b484:	440b      	add	r3, r1
 800b486:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b48a:	b191      	cbz	r1, 800b4b2 <__mdiff+0x11a>
 800b48c:	6117      	str	r7, [r2, #16]
 800b48e:	e79d      	b.n	800b3cc <__mdiff+0x34>
 800b490:	f854 1b04 	ldr.w	r1, [r4], #4
 800b494:	46e6      	mov	lr, ip
 800b496:	0c08      	lsrs	r0, r1, #16
 800b498:	fa1c fc81 	uxtah	ip, ip, r1
 800b49c:	4471      	add	r1, lr
 800b49e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b4a2:	b289      	uxth	r1, r1
 800b4a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b4a8:	f846 1b04 	str.w	r1, [r6], #4
 800b4ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b4b0:	e7dd      	b.n	800b46e <__mdiff+0xd6>
 800b4b2:	3f01      	subs	r7, #1
 800b4b4:	e7e7      	b.n	800b486 <__mdiff+0xee>
 800b4b6:	bf00      	nop
 800b4b8:	0800bd4c 	.word	0x0800bd4c
 800b4bc:	0800bd5d 	.word	0x0800bd5d

0800b4c0 <__d2b>:
 800b4c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b4c4:	460f      	mov	r7, r1
 800b4c6:	2101      	movs	r1, #1
 800b4c8:	ec59 8b10 	vmov	r8, r9, d0
 800b4cc:	4616      	mov	r6, r2
 800b4ce:	f7ff fccd 	bl	800ae6c <_Balloc>
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	b930      	cbnz	r0, 800b4e4 <__d2b+0x24>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	4b23      	ldr	r3, [pc, #140]	@ (800b568 <__d2b+0xa8>)
 800b4da:	4824      	ldr	r0, [pc, #144]	@ (800b56c <__d2b+0xac>)
 800b4dc:	f240 310f 	movw	r1, #783	@ 0x30f
 800b4e0:	f000 fab8 	bl	800ba54 <__assert_func>
 800b4e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b4e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4ec:	b10d      	cbz	r5, 800b4f2 <__d2b+0x32>
 800b4ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b4f2:	9301      	str	r3, [sp, #4]
 800b4f4:	f1b8 0300 	subs.w	r3, r8, #0
 800b4f8:	d023      	beq.n	800b542 <__d2b+0x82>
 800b4fa:	4668      	mov	r0, sp
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	f7ff fd7c 	bl	800affa <__lo0bits>
 800b502:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b506:	b1d0      	cbz	r0, 800b53e <__d2b+0x7e>
 800b508:	f1c0 0320 	rsb	r3, r0, #32
 800b50c:	fa02 f303 	lsl.w	r3, r2, r3
 800b510:	430b      	orrs	r3, r1
 800b512:	40c2      	lsrs	r2, r0
 800b514:	6163      	str	r3, [r4, #20]
 800b516:	9201      	str	r2, [sp, #4]
 800b518:	9b01      	ldr	r3, [sp, #4]
 800b51a:	61a3      	str	r3, [r4, #24]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	bf0c      	ite	eq
 800b520:	2201      	moveq	r2, #1
 800b522:	2202      	movne	r2, #2
 800b524:	6122      	str	r2, [r4, #16]
 800b526:	b1a5      	cbz	r5, 800b552 <__d2b+0x92>
 800b528:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b52c:	4405      	add	r5, r0
 800b52e:	603d      	str	r5, [r7, #0]
 800b530:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b534:	6030      	str	r0, [r6, #0]
 800b536:	4620      	mov	r0, r4
 800b538:	b003      	add	sp, #12
 800b53a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b53e:	6161      	str	r1, [r4, #20]
 800b540:	e7ea      	b.n	800b518 <__d2b+0x58>
 800b542:	a801      	add	r0, sp, #4
 800b544:	f7ff fd59 	bl	800affa <__lo0bits>
 800b548:	9b01      	ldr	r3, [sp, #4]
 800b54a:	6163      	str	r3, [r4, #20]
 800b54c:	3020      	adds	r0, #32
 800b54e:	2201      	movs	r2, #1
 800b550:	e7e8      	b.n	800b524 <__d2b+0x64>
 800b552:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b556:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b55a:	6038      	str	r0, [r7, #0]
 800b55c:	6918      	ldr	r0, [r3, #16]
 800b55e:	f7ff fd2d 	bl	800afbc <__hi0bits>
 800b562:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b566:	e7e5      	b.n	800b534 <__d2b+0x74>
 800b568:	0800bd4c 	.word	0x0800bd4c
 800b56c:	0800bd5d 	.word	0x0800bd5d

0800b570 <__sfputc_r>:
 800b570:	6893      	ldr	r3, [r2, #8]
 800b572:	3b01      	subs	r3, #1
 800b574:	2b00      	cmp	r3, #0
 800b576:	b410      	push	{r4}
 800b578:	6093      	str	r3, [r2, #8]
 800b57a:	da08      	bge.n	800b58e <__sfputc_r+0x1e>
 800b57c:	6994      	ldr	r4, [r2, #24]
 800b57e:	42a3      	cmp	r3, r4
 800b580:	db01      	blt.n	800b586 <__sfputc_r+0x16>
 800b582:	290a      	cmp	r1, #10
 800b584:	d103      	bne.n	800b58e <__sfputc_r+0x1e>
 800b586:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b58a:	f7fe bca4 	b.w	8009ed6 <__swbuf_r>
 800b58e:	6813      	ldr	r3, [r2, #0]
 800b590:	1c58      	adds	r0, r3, #1
 800b592:	6010      	str	r0, [r2, #0]
 800b594:	7019      	strb	r1, [r3, #0]
 800b596:	4608      	mov	r0, r1
 800b598:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b59c:	4770      	bx	lr

0800b59e <__sfputs_r>:
 800b59e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a0:	4606      	mov	r6, r0
 800b5a2:	460f      	mov	r7, r1
 800b5a4:	4614      	mov	r4, r2
 800b5a6:	18d5      	adds	r5, r2, r3
 800b5a8:	42ac      	cmp	r4, r5
 800b5aa:	d101      	bne.n	800b5b0 <__sfputs_r+0x12>
 800b5ac:	2000      	movs	r0, #0
 800b5ae:	e007      	b.n	800b5c0 <__sfputs_r+0x22>
 800b5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5b4:	463a      	mov	r2, r7
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	f7ff ffda 	bl	800b570 <__sfputc_r>
 800b5bc:	1c43      	adds	r3, r0, #1
 800b5be:	d1f3      	bne.n	800b5a8 <__sfputs_r+0xa>
 800b5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b5c4 <_vfiprintf_r>:
 800b5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c8:	460d      	mov	r5, r1
 800b5ca:	b09d      	sub	sp, #116	@ 0x74
 800b5cc:	4614      	mov	r4, r2
 800b5ce:	4698      	mov	r8, r3
 800b5d0:	4606      	mov	r6, r0
 800b5d2:	b118      	cbz	r0, 800b5dc <_vfiprintf_r+0x18>
 800b5d4:	6a03      	ldr	r3, [r0, #32]
 800b5d6:	b90b      	cbnz	r3, 800b5dc <_vfiprintf_r+0x18>
 800b5d8:	f7fe fba6 	bl	8009d28 <__sinit>
 800b5dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5de:	07d9      	lsls	r1, r3, #31
 800b5e0:	d405      	bmi.n	800b5ee <_vfiprintf_r+0x2a>
 800b5e2:	89ab      	ldrh	r3, [r5, #12]
 800b5e4:	059a      	lsls	r2, r3, #22
 800b5e6:	d402      	bmi.n	800b5ee <_vfiprintf_r+0x2a>
 800b5e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5ea:	f7fe fd96 	bl	800a11a <__retarget_lock_acquire_recursive>
 800b5ee:	89ab      	ldrh	r3, [r5, #12]
 800b5f0:	071b      	lsls	r3, r3, #28
 800b5f2:	d501      	bpl.n	800b5f8 <_vfiprintf_r+0x34>
 800b5f4:	692b      	ldr	r3, [r5, #16]
 800b5f6:	b99b      	cbnz	r3, 800b620 <_vfiprintf_r+0x5c>
 800b5f8:	4629      	mov	r1, r5
 800b5fa:	4630      	mov	r0, r6
 800b5fc:	f7fe fcaa 	bl	8009f54 <__swsetup_r>
 800b600:	b170      	cbz	r0, 800b620 <_vfiprintf_r+0x5c>
 800b602:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b604:	07dc      	lsls	r4, r3, #31
 800b606:	d504      	bpl.n	800b612 <_vfiprintf_r+0x4e>
 800b608:	f04f 30ff 	mov.w	r0, #4294967295
 800b60c:	b01d      	add	sp, #116	@ 0x74
 800b60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b612:	89ab      	ldrh	r3, [r5, #12]
 800b614:	0598      	lsls	r0, r3, #22
 800b616:	d4f7      	bmi.n	800b608 <_vfiprintf_r+0x44>
 800b618:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b61a:	f7fe fd7f 	bl	800a11c <__retarget_lock_release_recursive>
 800b61e:	e7f3      	b.n	800b608 <_vfiprintf_r+0x44>
 800b620:	2300      	movs	r3, #0
 800b622:	9309      	str	r3, [sp, #36]	@ 0x24
 800b624:	2320      	movs	r3, #32
 800b626:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b62a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b62e:	2330      	movs	r3, #48	@ 0x30
 800b630:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b7e0 <_vfiprintf_r+0x21c>
 800b634:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b638:	f04f 0901 	mov.w	r9, #1
 800b63c:	4623      	mov	r3, r4
 800b63e:	469a      	mov	sl, r3
 800b640:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b644:	b10a      	cbz	r2, 800b64a <_vfiprintf_r+0x86>
 800b646:	2a25      	cmp	r2, #37	@ 0x25
 800b648:	d1f9      	bne.n	800b63e <_vfiprintf_r+0x7a>
 800b64a:	ebba 0b04 	subs.w	fp, sl, r4
 800b64e:	d00b      	beq.n	800b668 <_vfiprintf_r+0xa4>
 800b650:	465b      	mov	r3, fp
 800b652:	4622      	mov	r2, r4
 800b654:	4629      	mov	r1, r5
 800b656:	4630      	mov	r0, r6
 800b658:	f7ff ffa1 	bl	800b59e <__sfputs_r>
 800b65c:	3001      	adds	r0, #1
 800b65e:	f000 80a7 	beq.w	800b7b0 <_vfiprintf_r+0x1ec>
 800b662:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b664:	445a      	add	r2, fp
 800b666:	9209      	str	r2, [sp, #36]	@ 0x24
 800b668:	f89a 3000 	ldrb.w	r3, [sl]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f000 809f 	beq.w	800b7b0 <_vfiprintf_r+0x1ec>
 800b672:	2300      	movs	r3, #0
 800b674:	f04f 32ff 	mov.w	r2, #4294967295
 800b678:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b67c:	f10a 0a01 	add.w	sl, sl, #1
 800b680:	9304      	str	r3, [sp, #16]
 800b682:	9307      	str	r3, [sp, #28]
 800b684:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b688:	931a      	str	r3, [sp, #104]	@ 0x68
 800b68a:	4654      	mov	r4, sl
 800b68c:	2205      	movs	r2, #5
 800b68e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b692:	4853      	ldr	r0, [pc, #332]	@ (800b7e0 <_vfiprintf_r+0x21c>)
 800b694:	f7f4 fdc4 	bl	8000220 <memchr>
 800b698:	9a04      	ldr	r2, [sp, #16]
 800b69a:	b9d8      	cbnz	r0, 800b6d4 <_vfiprintf_r+0x110>
 800b69c:	06d1      	lsls	r1, r2, #27
 800b69e:	bf44      	itt	mi
 800b6a0:	2320      	movmi	r3, #32
 800b6a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6a6:	0713      	lsls	r3, r2, #28
 800b6a8:	bf44      	itt	mi
 800b6aa:	232b      	movmi	r3, #43	@ 0x2b
 800b6ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b6b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6b6:	d015      	beq.n	800b6e4 <_vfiprintf_r+0x120>
 800b6b8:	9a07      	ldr	r2, [sp, #28]
 800b6ba:	4654      	mov	r4, sl
 800b6bc:	2000      	movs	r0, #0
 800b6be:	f04f 0c0a 	mov.w	ip, #10
 800b6c2:	4621      	mov	r1, r4
 800b6c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6c8:	3b30      	subs	r3, #48	@ 0x30
 800b6ca:	2b09      	cmp	r3, #9
 800b6cc:	d94b      	bls.n	800b766 <_vfiprintf_r+0x1a2>
 800b6ce:	b1b0      	cbz	r0, 800b6fe <_vfiprintf_r+0x13a>
 800b6d0:	9207      	str	r2, [sp, #28]
 800b6d2:	e014      	b.n	800b6fe <_vfiprintf_r+0x13a>
 800b6d4:	eba0 0308 	sub.w	r3, r0, r8
 800b6d8:	fa09 f303 	lsl.w	r3, r9, r3
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	9304      	str	r3, [sp, #16]
 800b6e0:	46a2      	mov	sl, r4
 800b6e2:	e7d2      	b.n	800b68a <_vfiprintf_r+0xc6>
 800b6e4:	9b03      	ldr	r3, [sp, #12]
 800b6e6:	1d19      	adds	r1, r3, #4
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	9103      	str	r1, [sp, #12]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	bfbb      	ittet	lt
 800b6f0:	425b      	neglt	r3, r3
 800b6f2:	f042 0202 	orrlt.w	r2, r2, #2
 800b6f6:	9307      	strge	r3, [sp, #28]
 800b6f8:	9307      	strlt	r3, [sp, #28]
 800b6fa:	bfb8      	it	lt
 800b6fc:	9204      	strlt	r2, [sp, #16]
 800b6fe:	7823      	ldrb	r3, [r4, #0]
 800b700:	2b2e      	cmp	r3, #46	@ 0x2e
 800b702:	d10a      	bne.n	800b71a <_vfiprintf_r+0x156>
 800b704:	7863      	ldrb	r3, [r4, #1]
 800b706:	2b2a      	cmp	r3, #42	@ 0x2a
 800b708:	d132      	bne.n	800b770 <_vfiprintf_r+0x1ac>
 800b70a:	9b03      	ldr	r3, [sp, #12]
 800b70c:	1d1a      	adds	r2, r3, #4
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	9203      	str	r2, [sp, #12]
 800b712:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b716:	3402      	adds	r4, #2
 800b718:	9305      	str	r3, [sp, #20]
 800b71a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b7f0 <_vfiprintf_r+0x22c>
 800b71e:	7821      	ldrb	r1, [r4, #0]
 800b720:	2203      	movs	r2, #3
 800b722:	4650      	mov	r0, sl
 800b724:	f7f4 fd7c 	bl	8000220 <memchr>
 800b728:	b138      	cbz	r0, 800b73a <_vfiprintf_r+0x176>
 800b72a:	9b04      	ldr	r3, [sp, #16]
 800b72c:	eba0 000a 	sub.w	r0, r0, sl
 800b730:	2240      	movs	r2, #64	@ 0x40
 800b732:	4082      	lsls	r2, r0
 800b734:	4313      	orrs	r3, r2
 800b736:	3401      	adds	r4, #1
 800b738:	9304      	str	r3, [sp, #16]
 800b73a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b73e:	4829      	ldr	r0, [pc, #164]	@ (800b7e4 <_vfiprintf_r+0x220>)
 800b740:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b744:	2206      	movs	r2, #6
 800b746:	f7f4 fd6b 	bl	8000220 <memchr>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	d03f      	beq.n	800b7ce <_vfiprintf_r+0x20a>
 800b74e:	4b26      	ldr	r3, [pc, #152]	@ (800b7e8 <_vfiprintf_r+0x224>)
 800b750:	bb1b      	cbnz	r3, 800b79a <_vfiprintf_r+0x1d6>
 800b752:	9b03      	ldr	r3, [sp, #12]
 800b754:	3307      	adds	r3, #7
 800b756:	f023 0307 	bic.w	r3, r3, #7
 800b75a:	3308      	adds	r3, #8
 800b75c:	9303      	str	r3, [sp, #12]
 800b75e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b760:	443b      	add	r3, r7
 800b762:	9309      	str	r3, [sp, #36]	@ 0x24
 800b764:	e76a      	b.n	800b63c <_vfiprintf_r+0x78>
 800b766:	fb0c 3202 	mla	r2, ip, r2, r3
 800b76a:	460c      	mov	r4, r1
 800b76c:	2001      	movs	r0, #1
 800b76e:	e7a8      	b.n	800b6c2 <_vfiprintf_r+0xfe>
 800b770:	2300      	movs	r3, #0
 800b772:	3401      	adds	r4, #1
 800b774:	9305      	str	r3, [sp, #20]
 800b776:	4619      	mov	r1, r3
 800b778:	f04f 0c0a 	mov.w	ip, #10
 800b77c:	4620      	mov	r0, r4
 800b77e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b782:	3a30      	subs	r2, #48	@ 0x30
 800b784:	2a09      	cmp	r2, #9
 800b786:	d903      	bls.n	800b790 <_vfiprintf_r+0x1cc>
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d0c6      	beq.n	800b71a <_vfiprintf_r+0x156>
 800b78c:	9105      	str	r1, [sp, #20]
 800b78e:	e7c4      	b.n	800b71a <_vfiprintf_r+0x156>
 800b790:	fb0c 2101 	mla	r1, ip, r1, r2
 800b794:	4604      	mov	r4, r0
 800b796:	2301      	movs	r3, #1
 800b798:	e7f0      	b.n	800b77c <_vfiprintf_r+0x1b8>
 800b79a:	ab03      	add	r3, sp, #12
 800b79c:	9300      	str	r3, [sp, #0]
 800b79e:	462a      	mov	r2, r5
 800b7a0:	4b12      	ldr	r3, [pc, #72]	@ (800b7ec <_vfiprintf_r+0x228>)
 800b7a2:	a904      	add	r1, sp, #16
 800b7a4:	4630      	mov	r0, r6
 800b7a6:	f7fd fe7b 	bl	80094a0 <_printf_float>
 800b7aa:	4607      	mov	r7, r0
 800b7ac:	1c78      	adds	r0, r7, #1
 800b7ae:	d1d6      	bne.n	800b75e <_vfiprintf_r+0x19a>
 800b7b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7b2:	07d9      	lsls	r1, r3, #31
 800b7b4:	d405      	bmi.n	800b7c2 <_vfiprintf_r+0x1fe>
 800b7b6:	89ab      	ldrh	r3, [r5, #12]
 800b7b8:	059a      	lsls	r2, r3, #22
 800b7ba:	d402      	bmi.n	800b7c2 <_vfiprintf_r+0x1fe>
 800b7bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7be:	f7fe fcad 	bl	800a11c <__retarget_lock_release_recursive>
 800b7c2:	89ab      	ldrh	r3, [r5, #12]
 800b7c4:	065b      	lsls	r3, r3, #25
 800b7c6:	f53f af1f 	bmi.w	800b608 <_vfiprintf_r+0x44>
 800b7ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b7cc:	e71e      	b.n	800b60c <_vfiprintf_r+0x48>
 800b7ce:	ab03      	add	r3, sp, #12
 800b7d0:	9300      	str	r3, [sp, #0]
 800b7d2:	462a      	mov	r2, r5
 800b7d4:	4b05      	ldr	r3, [pc, #20]	@ (800b7ec <_vfiprintf_r+0x228>)
 800b7d6:	a904      	add	r1, sp, #16
 800b7d8:	4630      	mov	r0, r6
 800b7da:	f7fe f8f9 	bl	80099d0 <_printf_i>
 800b7de:	e7e4      	b.n	800b7aa <_vfiprintf_r+0x1e6>
 800b7e0:	0800beb8 	.word	0x0800beb8
 800b7e4:	0800bec2 	.word	0x0800bec2
 800b7e8:	080094a1 	.word	0x080094a1
 800b7ec:	0800b59f 	.word	0x0800b59f
 800b7f0:	0800bebe 	.word	0x0800bebe

0800b7f4 <__sflush_r>:
 800b7f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7fc:	0716      	lsls	r6, r2, #28
 800b7fe:	4605      	mov	r5, r0
 800b800:	460c      	mov	r4, r1
 800b802:	d454      	bmi.n	800b8ae <__sflush_r+0xba>
 800b804:	684b      	ldr	r3, [r1, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	dc02      	bgt.n	800b810 <__sflush_r+0x1c>
 800b80a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	dd48      	ble.n	800b8a2 <__sflush_r+0xae>
 800b810:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b812:	2e00      	cmp	r6, #0
 800b814:	d045      	beq.n	800b8a2 <__sflush_r+0xae>
 800b816:	2300      	movs	r3, #0
 800b818:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b81c:	682f      	ldr	r7, [r5, #0]
 800b81e:	6a21      	ldr	r1, [r4, #32]
 800b820:	602b      	str	r3, [r5, #0]
 800b822:	d030      	beq.n	800b886 <__sflush_r+0x92>
 800b824:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b826:	89a3      	ldrh	r3, [r4, #12]
 800b828:	0759      	lsls	r1, r3, #29
 800b82a:	d505      	bpl.n	800b838 <__sflush_r+0x44>
 800b82c:	6863      	ldr	r3, [r4, #4]
 800b82e:	1ad2      	subs	r2, r2, r3
 800b830:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b832:	b10b      	cbz	r3, 800b838 <__sflush_r+0x44>
 800b834:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b836:	1ad2      	subs	r2, r2, r3
 800b838:	2300      	movs	r3, #0
 800b83a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b83c:	6a21      	ldr	r1, [r4, #32]
 800b83e:	4628      	mov	r0, r5
 800b840:	47b0      	blx	r6
 800b842:	1c43      	adds	r3, r0, #1
 800b844:	89a3      	ldrh	r3, [r4, #12]
 800b846:	d106      	bne.n	800b856 <__sflush_r+0x62>
 800b848:	6829      	ldr	r1, [r5, #0]
 800b84a:	291d      	cmp	r1, #29
 800b84c:	d82b      	bhi.n	800b8a6 <__sflush_r+0xb2>
 800b84e:	4a2a      	ldr	r2, [pc, #168]	@ (800b8f8 <__sflush_r+0x104>)
 800b850:	410a      	asrs	r2, r1
 800b852:	07d6      	lsls	r6, r2, #31
 800b854:	d427      	bmi.n	800b8a6 <__sflush_r+0xb2>
 800b856:	2200      	movs	r2, #0
 800b858:	6062      	str	r2, [r4, #4]
 800b85a:	04d9      	lsls	r1, r3, #19
 800b85c:	6922      	ldr	r2, [r4, #16]
 800b85e:	6022      	str	r2, [r4, #0]
 800b860:	d504      	bpl.n	800b86c <__sflush_r+0x78>
 800b862:	1c42      	adds	r2, r0, #1
 800b864:	d101      	bne.n	800b86a <__sflush_r+0x76>
 800b866:	682b      	ldr	r3, [r5, #0]
 800b868:	b903      	cbnz	r3, 800b86c <__sflush_r+0x78>
 800b86a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b86c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b86e:	602f      	str	r7, [r5, #0]
 800b870:	b1b9      	cbz	r1, 800b8a2 <__sflush_r+0xae>
 800b872:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b876:	4299      	cmp	r1, r3
 800b878:	d002      	beq.n	800b880 <__sflush_r+0x8c>
 800b87a:	4628      	mov	r0, r5
 800b87c:	f7ff faac 	bl	800add8 <_free_r>
 800b880:	2300      	movs	r3, #0
 800b882:	6363      	str	r3, [r4, #52]	@ 0x34
 800b884:	e00d      	b.n	800b8a2 <__sflush_r+0xae>
 800b886:	2301      	movs	r3, #1
 800b888:	4628      	mov	r0, r5
 800b88a:	47b0      	blx	r6
 800b88c:	4602      	mov	r2, r0
 800b88e:	1c50      	adds	r0, r2, #1
 800b890:	d1c9      	bne.n	800b826 <__sflush_r+0x32>
 800b892:	682b      	ldr	r3, [r5, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d0c6      	beq.n	800b826 <__sflush_r+0x32>
 800b898:	2b1d      	cmp	r3, #29
 800b89a:	d001      	beq.n	800b8a0 <__sflush_r+0xac>
 800b89c:	2b16      	cmp	r3, #22
 800b89e:	d11e      	bne.n	800b8de <__sflush_r+0xea>
 800b8a0:	602f      	str	r7, [r5, #0]
 800b8a2:	2000      	movs	r0, #0
 800b8a4:	e022      	b.n	800b8ec <__sflush_r+0xf8>
 800b8a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8aa:	b21b      	sxth	r3, r3
 800b8ac:	e01b      	b.n	800b8e6 <__sflush_r+0xf2>
 800b8ae:	690f      	ldr	r7, [r1, #16]
 800b8b0:	2f00      	cmp	r7, #0
 800b8b2:	d0f6      	beq.n	800b8a2 <__sflush_r+0xae>
 800b8b4:	0793      	lsls	r3, r2, #30
 800b8b6:	680e      	ldr	r6, [r1, #0]
 800b8b8:	bf08      	it	eq
 800b8ba:	694b      	ldreq	r3, [r1, #20]
 800b8bc:	600f      	str	r7, [r1, #0]
 800b8be:	bf18      	it	ne
 800b8c0:	2300      	movne	r3, #0
 800b8c2:	eba6 0807 	sub.w	r8, r6, r7
 800b8c6:	608b      	str	r3, [r1, #8]
 800b8c8:	f1b8 0f00 	cmp.w	r8, #0
 800b8cc:	dde9      	ble.n	800b8a2 <__sflush_r+0xae>
 800b8ce:	6a21      	ldr	r1, [r4, #32]
 800b8d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b8d2:	4643      	mov	r3, r8
 800b8d4:	463a      	mov	r2, r7
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	47b0      	blx	r6
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	dc08      	bgt.n	800b8f0 <__sflush_r+0xfc>
 800b8de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8e6:	81a3      	strh	r3, [r4, #12]
 800b8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8f0:	4407      	add	r7, r0
 800b8f2:	eba8 0800 	sub.w	r8, r8, r0
 800b8f6:	e7e7      	b.n	800b8c8 <__sflush_r+0xd4>
 800b8f8:	dfbffffe 	.word	0xdfbffffe

0800b8fc <_fflush_r>:
 800b8fc:	b538      	push	{r3, r4, r5, lr}
 800b8fe:	690b      	ldr	r3, [r1, #16]
 800b900:	4605      	mov	r5, r0
 800b902:	460c      	mov	r4, r1
 800b904:	b913      	cbnz	r3, 800b90c <_fflush_r+0x10>
 800b906:	2500      	movs	r5, #0
 800b908:	4628      	mov	r0, r5
 800b90a:	bd38      	pop	{r3, r4, r5, pc}
 800b90c:	b118      	cbz	r0, 800b916 <_fflush_r+0x1a>
 800b90e:	6a03      	ldr	r3, [r0, #32]
 800b910:	b90b      	cbnz	r3, 800b916 <_fflush_r+0x1a>
 800b912:	f7fe fa09 	bl	8009d28 <__sinit>
 800b916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d0f3      	beq.n	800b906 <_fflush_r+0xa>
 800b91e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b920:	07d0      	lsls	r0, r2, #31
 800b922:	d404      	bmi.n	800b92e <_fflush_r+0x32>
 800b924:	0599      	lsls	r1, r3, #22
 800b926:	d402      	bmi.n	800b92e <_fflush_r+0x32>
 800b928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b92a:	f7fe fbf6 	bl	800a11a <__retarget_lock_acquire_recursive>
 800b92e:	4628      	mov	r0, r5
 800b930:	4621      	mov	r1, r4
 800b932:	f7ff ff5f 	bl	800b7f4 <__sflush_r>
 800b936:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b938:	07da      	lsls	r2, r3, #31
 800b93a:	4605      	mov	r5, r0
 800b93c:	d4e4      	bmi.n	800b908 <_fflush_r+0xc>
 800b93e:	89a3      	ldrh	r3, [r4, #12]
 800b940:	059b      	lsls	r3, r3, #22
 800b942:	d4e1      	bmi.n	800b908 <_fflush_r+0xc>
 800b944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b946:	f7fe fbe9 	bl	800a11c <__retarget_lock_release_recursive>
 800b94a:	e7dd      	b.n	800b908 <_fflush_r+0xc>

0800b94c <__swhatbuf_r>:
 800b94c:	b570      	push	{r4, r5, r6, lr}
 800b94e:	460c      	mov	r4, r1
 800b950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b954:	2900      	cmp	r1, #0
 800b956:	b096      	sub	sp, #88	@ 0x58
 800b958:	4615      	mov	r5, r2
 800b95a:	461e      	mov	r6, r3
 800b95c:	da0d      	bge.n	800b97a <__swhatbuf_r+0x2e>
 800b95e:	89a3      	ldrh	r3, [r4, #12]
 800b960:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b964:	f04f 0100 	mov.w	r1, #0
 800b968:	bf14      	ite	ne
 800b96a:	2340      	movne	r3, #64	@ 0x40
 800b96c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b970:	2000      	movs	r0, #0
 800b972:	6031      	str	r1, [r6, #0]
 800b974:	602b      	str	r3, [r5, #0]
 800b976:	b016      	add	sp, #88	@ 0x58
 800b978:	bd70      	pop	{r4, r5, r6, pc}
 800b97a:	466a      	mov	r2, sp
 800b97c:	f000 f848 	bl	800ba10 <_fstat_r>
 800b980:	2800      	cmp	r0, #0
 800b982:	dbec      	blt.n	800b95e <__swhatbuf_r+0x12>
 800b984:	9901      	ldr	r1, [sp, #4]
 800b986:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b98a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b98e:	4259      	negs	r1, r3
 800b990:	4159      	adcs	r1, r3
 800b992:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b996:	e7eb      	b.n	800b970 <__swhatbuf_r+0x24>

0800b998 <__smakebuf_r>:
 800b998:	898b      	ldrh	r3, [r1, #12]
 800b99a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b99c:	079d      	lsls	r5, r3, #30
 800b99e:	4606      	mov	r6, r0
 800b9a0:	460c      	mov	r4, r1
 800b9a2:	d507      	bpl.n	800b9b4 <__smakebuf_r+0x1c>
 800b9a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b9a8:	6023      	str	r3, [r4, #0]
 800b9aa:	6123      	str	r3, [r4, #16]
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	6163      	str	r3, [r4, #20]
 800b9b0:	b003      	add	sp, #12
 800b9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9b4:	ab01      	add	r3, sp, #4
 800b9b6:	466a      	mov	r2, sp
 800b9b8:	f7ff ffc8 	bl	800b94c <__swhatbuf_r>
 800b9bc:	9f00      	ldr	r7, [sp, #0]
 800b9be:	4605      	mov	r5, r0
 800b9c0:	4639      	mov	r1, r7
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	f7fd fc40 	bl	8009248 <_malloc_r>
 800b9c8:	b948      	cbnz	r0, 800b9de <__smakebuf_r+0x46>
 800b9ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9ce:	059a      	lsls	r2, r3, #22
 800b9d0:	d4ee      	bmi.n	800b9b0 <__smakebuf_r+0x18>
 800b9d2:	f023 0303 	bic.w	r3, r3, #3
 800b9d6:	f043 0302 	orr.w	r3, r3, #2
 800b9da:	81a3      	strh	r3, [r4, #12]
 800b9dc:	e7e2      	b.n	800b9a4 <__smakebuf_r+0xc>
 800b9de:	89a3      	ldrh	r3, [r4, #12]
 800b9e0:	6020      	str	r0, [r4, #0]
 800b9e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9e6:	81a3      	strh	r3, [r4, #12]
 800b9e8:	9b01      	ldr	r3, [sp, #4]
 800b9ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b9ee:	b15b      	cbz	r3, 800ba08 <__smakebuf_r+0x70>
 800b9f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	f000 f81d 	bl	800ba34 <_isatty_r>
 800b9fa:	b128      	cbz	r0, 800ba08 <__smakebuf_r+0x70>
 800b9fc:	89a3      	ldrh	r3, [r4, #12]
 800b9fe:	f023 0303 	bic.w	r3, r3, #3
 800ba02:	f043 0301 	orr.w	r3, r3, #1
 800ba06:	81a3      	strh	r3, [r4, #12]
 800ba08:	89a3      	ldrh	r3, [r4, #12]
 800ba0a:	431d      	orrs	r5, r3
 800ba0c:	81a5      	strh	r5, [r4, #12]
 800ba0e:	e7cf      	b.n	800b9b0 <__smakebuf_r+0x18>

0800ba10 <_fstat_r>:
 800ba10:	b538      	push	{r3, r4, r5, lr}
 800ba12:	4d07      	ldr	r5, [pc, #28]	@ (800ba30 <_fstat_r+0x20>)
 800ba14:	2300      	movs	r3, #0
 800ba16:	4604      	mov	r4, r0
 800ba18:	4608      	mov	r0, r1
 800ba1a:	4611      	mov	r1, r2
 800ba1c:	602b      	str	r3, [r5, #0]
 800ba1e:	f7f6 f96d 	bl	8001cfc <_fstat>
 800ba22:	1c43      	adds	r3, r0, #1
 800ba24:	d102      	bne.n	800ba2c <_fstat_r+0x1c>
 800ba26:	682b      	ldr	r3, [r5, #0]
 800ba28:	b103      	cbz	r3, 800ba2c <_fstat_r+0x1c>
 800ba2a:	6023      	str	r3, [r4, #0]
 800ba2c:	bd38      	pop	{r3, r4, r5, pc}
 800ba2e:	bf00      	nop
 800ba30:	20001474 	.word	0x20001474

0800ba34 <_isatty_r>:
 800ba34:	b538      	push	{r3, r4, r5, lr}
 800ba36:	4d06      	ldr	r5, [pc, #24]	@ (800ba50 <_isatty_r+0x1c>)
 800ba38:	2300      	movs	r3, #0
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	4608      	mov	r0, r1
 800ba3e:	602b      	str	r3, [r5, #0]
 800ba40:	f7f6 f96c 	bl	8001d1c <_isatty>
 800ba44:	1c43      	adds	r3, r0, #1
 800ba46:	d102      	bne.n	800ba4e <_isatty_r+0x1a>
 800ba48:	682b      	ldr	r3, [r5, #0]
 800ba4a:	b103      	cbz	r3, 800ba4e <_isatty_r+0x1a>
 800ba4c:	6023      	str	r3, [r4, #0]
 800ba4e:	bd38      	pop	{r3, r4, r5, pc}
 800ba50:	20001474 	.word	0x20001474

0800ba54 <__assert_func>:
 800ba54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba56:	4614      	mov	r4, r2
 800ba58:	461a      	mov	r2, r3
 800ba5a:	4b09      	ldr	r3, [pc, #36]	@ (800ba80 <__assert_func+0x2c>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4605      	mov	r5, r0
 800ba60:	68d8      	ldr	r0, [r3, #12]
 800ba62:	b954      	cbnz	r4, 800ba7a <__assert_func+0x26>
 800ba64:	4b07      	ldr	r3, [pc, #28]	@ (800ba84 <__assert_func+0x30>)
 800ba66:	461c      	mov	r4, r3
 800ba68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba6c:	9100      	str	r1, [sp, #0]
 800ba6e:	462b      	mov	r3, r5
 800ba70:	4905      	ldr	r1, [pc, #20]	@ (800ba88 <__assert_func+0x34>)
 800ba72:	f000 f841 	bl	800baf8 <fiprintf>
 800ba76:	f000 f851 	bl	800bb1c <abort>
 800ba7a:	4b04      	ldr	r3, [pc, #16]	@ (800ba8c <__assert_func+0x38>)
 800ba7c:	e7f4      	b.n	800ba68 <__assert_func+0x14>
 800ba7e:	bf00      	nop
 800ba80:	2000001c 	.word	0x2000001c
 800ba84:	0800bf0e 	.word	0x0800bf0e
 800ba88:	0800bee0 	.word	0x0800bee0
 800ba8c:	0800bed3 	.word	0x0800bed3

0800ba90 <_calloc_r>:
 800ba90:	b570      	push	{r4, r5, r6, lr}
 800ba92:	fba1 5402 	umull	r5, r4, r1, r2
 800ba96:	b93c      	cbnz	r4, 800baa8 <_calloc_r+0x18>
 800ba98:	4629      	mov	r1, r5
 800ba9a:	f7fd fbd5 	bl	8009248 <_malloc_r>
 800ba9e:	4606      	mov	r6, r0
 800baa0:	b928      	cbnz	r0, 800baae <_calloc_r+0x1e>
 800baa2:	2600      	movs	r6, #0
 800baa4:	4630      	mov	r0, r6
 800baa6:	bd70      	pop	{r4, r5, r6, pc}
 800baa8:	220c      	movs	r2, #12
 800baaa:	6002      	str	r2, [r0, #0]
 800baac:	e7f9      	b.n	800baa2 <_calloc_r+0x12>
 800baae:	462a      	mov	r2, r5
 800bab0:	4621      	mov	r1, r4
 800bab2:	f7fe faa5 	bl	800a000 <memset>
 800bab6:	e7f5      	b.n	800baa4 <_calloc_r+0x14>

0800bab8 <__ascii_mbtowc>:
 800bab8:	b082      	sub	sp, #8
 800baba:	b901      	cbnz	r1, 800babe <__ascii_mbtowc+0x6>
 800babc:	a901      	add	r1, sp, #4
 800babe:	b142      	cbz	r2, 800bad2 <__ascii_mbtowc+0x1a>
 800bac0:	b14b      	cbz	r3, 800bad6 <__ascii_mbtowc+0x1e>
 800bac2:	7813      	ldrb	r3, [r2, #0]
 800bac4:	600b      	str	r3, [r1, #0]
 800bac6:	7812      	ldrb	r2, [r2, #0]
 800bac8:	1e10      	subs	r0, r2, #0
 800baca:	bf18      	it	ne
 800bacc:	2001      	movne	r0, #1
 800bace:	b002      	add	sp, #8
 800bad0:	4770      	bx	lr
 800bad2:	4610      	mov	r0, r2
 800bad4:	e7fb      	b.n	800bace <__ascii_mbtowc+0x16>
 800bad6:	f06f 0001 	mvn.w	r0, #1
 800bada:	e7f8      	b.n	800bace <__ascii_mbtowc+0x16>

0800badc <__ascii_wctomb>:
 800badc:	4603      	mov	r3, r0
 800bade:	4608      	mov	r0, r1
 800bae0:	b141      	cbz	r1, 800baf4 <__ascii_wctomb+0x18>
 800bae2:	2aff      	cmp	r2, #255	@ 0xff
 800bae4:	d904      	bls.n	800baf0 <__ascii_wctomb+0x14>
 800bae6:	228a      	movs	r2, #138	@ 0x8a
 800bae8:	601a      	str	r2, [r3, #0]
 800baea:	f04f 30ff 	mov.w	r0, #4294967295
 800baee:	4770      	bx	lr
 800baf0:	700a      	strb	r2, [r1, #0]
 800baf2:	2001      	movs	r0, #1
 800baf4:	4770      	bx	lr
	...

0800baf8 <fiprintf>:
 800baf8:	b40e      	push	{r1, r2, r3}
 800bafa:	b503      	push	{r0, r1, lr}
 800bafc:	4601      	mov	r1, r0
 800bafe:	ab03      	add	r3, sp, #12
 800bb00:	4805      	ldr	r0, [pc, #20]	@ (800bb18 <fiprintf+0x20>)
 800bb02:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb06:	6800      	ldr	r0, [r0, #0]
 800bb08:	9301      	str	r3, [sp, #4]
 800bb0a:	f7ff fd5b 	bl	800b5c4 <_vfiprintf_r>
 800bb0e:	b002      	add	sp, #8
 800bb10:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb14:	b003      	add	sp, #12
 800bb16:	4770      	bx	lr
 800bb18:	2000001c 	.word	0x2000001c

0800bb1c <abort>:
 800bb1c:	b508      	push	{r3, lr}
 800bb1e:	2006      	movs	r0, #6
 800bb20:	f000 f82c 	bl	800bb7c <raise>
 800bb24:	2001      	movs	r0, #1
 800bb26:	f7f6 f899 	bl	8001c5c <_exit>

0800bb2a <_raise_r>:
 800bb2a:	291f      	cmp	r1, #31
 800bb2c:	b538      	push	{r3, r4, r5, lr}
 800bb2e:	4605      	mov	r5, r0
 800bb30:	460c      	mov	r4, r1
 800bb32:	d904      	bls.n	800bb3e <_raise_r+0x14>
 800bb34:	2316      	movs	r3, #22
 800bb36:	6003      	str	r3, [r0, #0]
 800bb38:	f04f 30ff 	mov.w	r0, #4294967295
 800bb3c:	bd38      	pop	{r3, r4, r5, pc}
 800bb3e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bb40:	b112      	cbz	r2, 800bb48 <_raise_r+0x1e>
 800bb42:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb46:	b94b      	cbnz	r3, 800bb5c <_raise_r+0x32>
 800bb48:	4628      	mov	r0, r5
 800bb4a:	f000 f831 	bl	800bbb0 <_getpid_r>
 800bb4e:	4622      	mov	r2, r4
 800bb50:	4601      	mov	r1, r0
 800bb52:	4628      	mov	r0, r5
 800bb54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb58:	f000 b818 	b.w	800bb8c <_kill_r>
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d00a      	beq.n	800bb76 <_raise_r+0x4c>
 800bb60:	1c59      	adds	r1, r3, #1
 800bb62:	d103      	bne.n	800bb6c <_raise_r+0x42>
 800bb64:	2316      	movs	r3, #22
 800bb66:	6003      	str	r3, [r0, #0]
 800bb68:	2001      	movs	r0, #1
 800bb6a:	e7e7      	b.n	800bb3c <_raise_r+0x12>
 800bb6c:	2100      	movs	r1, #0
 800bb6e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bb72:	4620      	mov	r0, r4
 800bb74:	4798      	blx	r3
 800bb76:	2000      	movs	r0, #0
 800bb78:	e7e0      	b.n	800bb3c <_raise_r+0x12>
	...

0800bb7c <raise>:
 800bb7c:	4b02      	ldr	r3, [pc, #8]	@ (800bb88 <raise+0xc>)
 800bb7e:	4601      	mov	r1, r0
 800bb80:	6818      	ldr	r0, [r3, #0]
 800bb82:	f7ff bfd2 	b.w	800bb2a <_raise_r>
 800bb86:	bf00      	nop
 800bb88:	2000001c 	.word	0x2000001c

0800bb8c <_kill_r>:
 800bb8c:	b538      	push	{r3, r4, r5, lr}
 800bb8e:	4d07      	ldr	r5, [pc, #28]	@ (800bbac <_kill_r+0x20>)
 800bb90:	2300      	movs	r3, #0
 800bb92:	4604      	mov	r4, r0
 800bb94:	4608      	mov	r0, r1
 800bb96:	4611      	mov	r1, r2
 800bb98:	602b      	str	r3, [r5, #0]
 800bb9a:	f7f6 f84f 	bl	8001c3c <_kill>
 800bb9e:	1c43      	adds	r3, r0, #1
 800bba0:	d102      	bne.n	800bba8 <_kill_r+0x1c>
 800bba2:	682b      	ldr	r3, [r5, #0]
 800bba4:	b103      	cbz	r3, 800bba8 <_kill_r+0x1c>
 800bba6:	6023      	str	r3, [r4, #0]
 800bba8:	bd38      	pop	{r3, r4, r5, pc}
 800bbaa:	bf00      	nop
 800bbac:	20001474 	.word	0x20001474

0800bbb0 <_getpid_r>:
 800bbb0:	f7f6 b83c 	b.w	8001c2c <_getpid>

0800bbb4 <_init>:
 800bbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbb6:	bf00      	nop
 800bbb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbba:	bc08      	pop	{r3}
 800bbbc:	469e      	mov	lr, r3
 800bbbe:	4770      	bx	lr

0800bbc0 <_fini>:
 800bbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbc2:	bf00      	nop
 800bbc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbc6:	bc08      	pop	{r3}
 800bbc8:	469e      	mov	lr, r3
 800bbca:	4770      	bx	lr
